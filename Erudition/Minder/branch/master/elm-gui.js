(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File === 'function' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}


// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $author$project$Main$Link = function (a) {
	return {$: 'Link', a: a};
};
var $author$project$Main$NewUrl = function (a) {
	return {$: 'NewUrl', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $author$project$Replicated$Framework$Tick = function (a) {
	return {$: 'Tick', a: a};
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Replicated$Framework$FrameworkInit = F3(
	function (a, b, c) {
		return {$: 'FrameworkInit', a: a, b: b, c: c};
	});
var $author$project$Replicated$Framework$PreInit = function (a) {
	return {$: 'PreInit', a: a};
};
var $author$project$Log$Dev = F3(
	function (a, b, c) {
		return {$: 'Dev', a: a, b: b, c: c};
	});
var $elm$core$Debug$log = _Debug_log;
var $elm$core$Debug$toString = _Debug_toString;
var $elm$core$Debug$todo = _Debug_todo;
var $author$project$Log$runningEnvironment = A3(
	$author$project$Log$Dev,
	$elm$core$Debug$log,
	_Debug_todo(
		'Log',
		{
			start: {line: 21, column: 19},
			end: {line: 21, column: 29}
		}),
	$elm$core$Debug$toString);
var $author$project$Log$crashInDev = F2(
	function (crashMessage, a) {
		var _v0 = $author$project$Log$runningEnvironment;
		if (_v0.$ === 'Production') {
			return a;
		} else {
			var logger = _v0.a;
			var todo = _v0.b;
			return todo(crashMessage);
		}
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $f0i$debug_to_json$DebugToJson$encode = function (thing) {
	switch (thing.$) {
		case 'Obj':
			var kvs = thing.a;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							$f0i$debug_to_json$DebugToJson$encode(v));
					},
					kvs));
		case 'Dct':
			var kvs = thing.a;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					function (_v2) {
						var k = _v2.a;
						var v = _v2.b;
						return _Utils_Tuple2(
							function () {
								if (k.$ === 'Str') {
									var s = k.a;
									return s;
								} else {
									return A2(
										$elm$json$Json$Encode$encode,
										0,
										$f0i$debug_to_json$DebugToJson$encode(k));
								}
							}(),
							$f0i$debug_to_json$DebugToJson$encode(v));
					},
					kvs));
		case 'Arr':
			var vals = thing.a;
			return A2($elm$json$Json$Encode$list, $f0i$debug_to_json$DebugToJson$encode, vals);
		case 'Set':
			var vals = thing.a;
			return A2($elm$json$Json$Encode$list, $f0i$debug_to_json$DebugToJson$encode, vals);
		case 'Str':
			var s = thing.a;
			return $elm$json$Json$Encode$string(s);
		case 'Custom':
			if (!thing.b.b) {
				var name = thing.a;
				return $elm$json$Json$Encode$string(name);
			} else {
				var name = thing.a;
				var args = thing.b;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							name,
							A2($elm$json$Json$Encode$list, $f0i$debug_to_json$DebugToJson$encode, args))
						]));
			}
		case 'Lst':
			var vals = thing.a;
			return A2($elm$json$Json$Encode$list, $f0i$debug_to_json$DebugToJson$encode, vals);
		case 'Tpl':
			var vals = thing.a;
			return A2($elm$json$Json$Encode$list, $f0i$debug_to_json$DebugToJson$encode, vals);
		case 'NumInt':
			var n = thing.a;
			return $elm$json$Json$Encode$int(n);
		case 'NumFloat':
			var n = thing.a;
			return $elm$json$Json$Encode$float(n);
		case 'Fun':
			return $elm$json$Json$Encode$string('<function>');
		default:
			return $elm$json$Json$Encode$string('<internals>');
	}
};
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $f0i$debug_to_json$DebugToJson$Arr = function (a) {
	return {$: 'Arr', a: a};
};
var $f0i$debug_to_json$DebugToJson$Custom = F2(
	function (a, b) {
		return {$: 'Custom', a: a, b: b};
	});
var $f0i$debug_to_json$DebugToJson$Dct = function (a) {
	return {$: 'Dct', a: a};
};
var $f0i$debug_to_json$DebugToJson$Lst = function (a) {
	return {$: 'Lst', a: a};
};
var $f0i$debug_to_json$DebugToJson$Obj = function (a) {
	return {$: 'Obj', a: a};
};
var $f0i$debug_to_json$DebugToJson$Set = function (a) {
	return {$: 'Set', a: a};
};
var $f0i$debug_to_json$DebugToJson$Tpl = function (a) {
	return {$: 'Tpl', a: a};
};
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $f0i$debug_to_json$DebugToJson$listHelp = F2(
	function (parser, acc) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (val) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, val, acc));
						}),
					parser),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(acc));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $f0i$debug_to_json$DebugToJson$list = function (parser) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$f0i$debug_to_json$DebugToJson$listHelp(parser));
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$parser$Parser$ExpectingVariable = {$: 'ExpectingVariable'};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$varHelp = F7(
	function (isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {col: col, context: context, indent: indent, offset: offset, row: row, src: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.start, s.offset, s.src);
			if (_Utils_eq(firstOffset, -1)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting));
			} else {
				var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.inner, s.offset + 1, s.row + 1, 1, s.src, s.indent, s.context) : A7($elm$parser$Parser$Advanced$varHelp, i.inner, firstOffset, s.row, s.col + 1, s.src, s.indent, s.context);
				var name = A3($elm$core$String$slice, s.offset, s1.offset, s.src);
				return A2($elm$core$Set$member, name, i.reserved) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, i.expecting)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
			}
		});
};
var $elm$parser$Parser$variable = function (i) {
	return $elm$parser$Parser$Advanced$variable(
		{expecting: $elm$parser$Parser$ExpectingVariable, inner: i.inner, reserved: i.reserved, start: i.start});
};
var $f0i$debug_to_json$DebugToJson$lowerVar = $elm$parser$Parser$variable(
	{
		inner: function (c) {
			return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
				c,
				_Utils_chr('.')) || _Utils_eq(
				c,
				_Utils_chr('_')));
		},
		reserved: $elm$core$Set$empty,
		start: $elm$core$Char$isLower
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $f0i$debug_to_json$DebugToJson$Fun = {$: 'Fun'};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $f0i$debug_to_json$DebugToJson$parseFun = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Fun),
	$elm$parser$Parser$symbol('<function>'));
var $f0i$debug_to_json$DebugToJson$Intern = {$: 'Intern'};
var $f0i$debug_to_json$DebugToJson$parseIntern = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Intern),
	$elm$parser$Parser$symbol('<internals>'));
var $f0i$debug_to_json$DebugToJson$NumFloat = function (a) {
	return {$: 'NumFloat', a: a};
};
var $elm$parser$Parser$ExpectingFloat = {$: 'ExpectingFloat'};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_v1.$ === 'Nothing') {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3($elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var $elm$parser$Parser$Advanced$float = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Ok($elm$core$Basics$identity),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$toFloat),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$float = A2($elm$parser$Parser$Advanced$float, $elm$parser$Parser$ExpectingFloat, $elm$parser$Parser$ExpectingFloat);
var $f0i$debug_to_json$DebugToJson$parseNumberFloat = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$NumFloat),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$negate),
					$elm$parser$Parser$symbol('-')),
				$elm$parser$Parser$float),
				$elm$parser$Parser$float
			])));
var $f0i$debug_to_json$DebugToJson$NumInt = function (a) {
	return {$: 'NumInt', a: a};
};
var $elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Err(invalid),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$identity),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $f0i$debug_to_json$DebugToJson$parseNumberInt = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$NumInt),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$negate),
					$elm$parser$Parser$symbol('-')),
				$elm$parser$Parser$int),
				$elm$parser$Parser$int
			])));
var $f0i$debug_to_json$DebugToJson$Str = function (a) {
	return {$: 'Str', a: a};
};
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $f0i$debug_to_json$DebugToJson$escapedChar = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed(
		function (c) {
			switch (c) {
				case 't':
					return '\t';
				case 'n':
					return '\n';
				case '\"':
					return '\"';
				case '\\':
					return '\\';
				default:
					return '\\' + c;
			}
		}),
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$symbol('\\')),
			$elm$parser$Parser$chompIf(
				function (_v1) {
					return true;
				}))));
var $elm$core$Basics$neq = _Utils_notEqual;
var $f0i$debug_to_json$DebugToJson$notQuote = $elm$parser$Parser$getChompedString(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$chompIf(
			function (c) {
				return !_Utils_eq(
					c,
					_Utils_chr('\"'));
			})));
var $f0i$debug_to_json$DebugToJson$repeatHelp = F2(
	function (parser, acc) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (val) {
							return $elm$parser$Parser$Loop(
								_Utils_ap(acc, val));
						}),
					parser),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(acc);
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $f0i$debug_to_json$DebugToJson$repeat = function (parser) {
	return A2(
		$elm$parser$Parser$loop,
		'',
		$f0i$debug_to_json$DebugToJson$repeatHelp(parser));
};
var $f0i$debug_to_json$DebugToJson$parseString = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Str),
		$elm$parser$Parser$symbol('\"')),
	A2(
		$elm$parser$Parser$ignorer,
		$f0i$debug_to_json$DebugToJson$repeat(
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[$f0i$debug_to_json$DebugToJson$escapedChar, $f0i$debug_to_json$DebugToJson$notQuote]))),
		$elm$parser$Parser$symbol('\"')));
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $f0i$debug_to_json$DebugToJson$upperVar = $elm$parser$Parser$variable(
	{
		inner: function (c) {
			return $elm$core$Char$isAlphaNum(c) || (_Utils_eq(
				c,
				_Utils_chr('.')) || _Utils_eq(
				c,
				_Utils_chr('_')));
		},
		reserved: $elm$core$Set$empty,
		start: $elm$core$Char$isUpper
	});
function $f0i$debug_to_json$DebugToJson$cyclic$parseThing() {
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$f0i$debug_to_json$DebugToJson$cyclic$parseDct(),
								$f0i$debug_to_json$DebugToJson$cyclic$parseArr(),
								$f0i$debug_to_json$DebugToJson$cyclic$parseSet(),
								$f0i$debug_to_json$DebugToJson$cyclic$parseObj(),
								$f0i$debug_to_json$DebugToJson$parseString,
								$f0i$debug_to_json$DebugToJson$cyclic$parseLst(),
								$f0i$debug_to_json$DebugToJson$cyclic$parseTpl(),
								$f0i$debug_to_json$DebugToJson$cyclic$parseCustom(),
								$f0i$debug_to_json$DebugToJson$parseNumberFloat,
								$f0i$debug_to_json$DebugToJson$parseNumberInt,
								$f0i$debug_to_json$DebugToJson$parseFun,
								$f0i$debug_to_json$DebugToJson$parseIntern
							])),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$symbol(','),
							$elm$parser$Parser$symbol('')
						]))),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseArr() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Arr),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('Array.fromList [')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$lazy(
						function (_v7) {
							return $f0i$debug_to_json$DebugToJson$list(
								$f0i$debug_to_json$DebugToJson$cyclic$parseThing());
						}),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol(']')),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseCustom() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Custom),
				$elm$parser$Parser$spaces),
			A2($elm$parser$Parser$ignorer, $f0i$debug_to_json$DebugToJson$upperVar, $elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$lazy(
				function (_v6) {
					return $f0i$debug_to_json$DebugToJson$list(
						$f0i$debug_to_json$DebugToJson$cyclic$parseThing());
				}),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseDct() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Dct),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('Dict.fromList [')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$f0i$debug_to_json$DebugToJson$list(
						$f0i$debug_to_json$DebugToJson$cyclic$parseDictKeyValue()),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol(']')),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseDictKeyValue() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Tuple$pair),
						$elm$parser$Parser$spaces),
					$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v4) {
						return $f0i$debug_to_json$DebugToJson$cyclic$parseThing();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$lazy(
								function (_v5) {
									return $f0i$debug_to_json$DebugToJson$cyclic$parseThing();
								}),
							$elm$parser$Parser$spaces),
						$elm$parser$Parser$symbol(')')),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$symbol(','),
							$elm$parser$Parser$symbol('')
						]))),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseObj() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Obj),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('{')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$f0i$debug_to_json$DebugToJson$list(
						$f0i$debug_to_json$DebugToJson$cyclic$parseKeyValue()),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('}')),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseKeyValue() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Tuple$pair),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2($elm$parser$Parser$ignorer, $f0i$debug_to_json$DebugToJson$lowerVar, $elm$parser$Parser$spaces),
					$elm$parser$Parser$symbol('=')),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$lazy(
						function (_v3) {
							return $f0i$debug_to_json$DebugToJson$cyclic$parseThing();
						}),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$symbol(','),
							$elm$parser$Parser$symbol('')
						]))),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseLst() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Lst),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('[')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v2) {
						return $f0i$debug_to_json$DebugToJson$list(
							$f0i$debug_to_json$DebugToJson$cyclic$parseThing());
					}),
				$elm$parser$Parser$symbol(']')),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseSet() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Set),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('Set.fromList [')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$lazy(
						function (_v1) {
							return $f0i$debug_to_json$DebugToJson$list(
								$f0i$debug_to_json$DebugToJson$cyclic$parseThing());
						}),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol(']')),
			$elm$parser$Parser$spaces));
}
function $f0i$debug_to_json$DebugToJson$cyclic$parseTpl() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($f0i$debug_to_json$DebugToJson$Tpl),
					$elm$parser$Parser$spaces),
				$elm$parser$Parser$symbol('(')),
			$elm$parser$Parser$spaces),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v0) {
						return $f0i$debug_to_json$DebugToJson$list(
							$f0i$debug_to_json$DebugToJson$cyclic$parseThing());
					}),
				$elm$parser$Parser$symbol(')')),
			$elm$parser$Parser$spaces));
}
try {
	var $f0i$debug_to_json$DebugToJson$parseThing = $f0i$debug_to_json$DebugToJson$cyclic$parseThing();
	$f0i$debug_to_json$DebugToJson$cyclic$parseThing = function () {
		return $f0i$debug_to_json$DebugToJson$parseThing;
	};
	var $f0i$debug_to_json$DebugToJson$parseArr = $f0i$debug_to_json$DebugToJson$cyclic$parseArr();
	$f0i$debug_to_json$DebugToJson$cyclic$parseArr = function () {
		return $f0i$debug_to_json$DebugToJson$parseArr;
	};
	var $f0i$debug_to_json$DebugToJson$parseCustom = $f0i$debug_to_json$DebugToJson$cyclic$parseCustom();
	$f0i$debug_to_json$DebugToJson$cyclic$parseCustom = function () {
		return $f0i$debug_to_json$DebugToJson$parseCustom;
	};
	var $f0i$debug_to_json$DebugToJson$parseDct = $f0i$debug_to_json$DebugToJson$cyclic$parseDct();
	$f0i$debug_to_json$DebugToJson$cyclic$parseDct = function () {
		return $f0i$debug_to_json$DebugToJson$parseDct;
	};
	var $f0i$debug_to_json$DebugToJson$parseDictKeyValue = $f0i$debug_to_json$DebugToJson$cyclic$parseDictKeyValue();
	$f0i$debug_to_json$DebugToJson$cyclic$parseDictKeyValue = function () {
		return $f0i$debug_to_json$DebugToJson$parseDictKeyValue;
	};
	var $f0i$debug_to_json$DebugToJson$parseObj = $f0i$debug_to_json$DebugToJson$cyclic$parseObj();
	$f0i$debug_to_json$DebugToJson$cyclic$parseObj = function () {
		return $f0i$debug_to_json$DebugToJson$parseObj;
	};
	var $f0i$debug_to_json$DebugToJson$parseKeyValue = $f0i$debug_to_json$DebugToJson$cyclic$parseKeyValue();
	$f0i$debug_to_json$DebugToJson$cyclic$parseKeyValue = function () {
		return $f0i$debug_to_json$DebugToJson$parseKeyValue;
	};
	var $f0i$debug_to_json$DebugToJson$parseLst = $f0i$debug_to_json$DebugToJson$cyclic$parseLst();
	$f0i$debug_to_json$DebugToJson$cyclic$parseLst = function () {
		return $f0i$debug_to_json$DebugToJson$parseLst;
	};
	var $f0i$debug_to_json$DebugToJson$parseSet = $f0i$debug_to_json$DebugToJson$cyclic$parseSet();
	$f0i$debug_to_json$DebugToJson$cyclic$parseSet = function () {
		return $f0i$debug_to_json$DebugToJson$parseSet;
	};
	var $f0i$debug_to_json$DebugToJson$parseTpl = $f0i$debug_to_json$DebugToJson$cyclic$parseTpl();
	$f0i$debug_to_json$DebugToJson$cyclic$parseTpl = function () {
		return $f0i$debug_to_json$DebugToJson$parseTpl;
	};
} catch ($) {
	throw 'Some top-level definitions from `DebugToJson` are causing infinite recursion:\n\n  ┌─────┐\n  │    parseThing\n  │     ↓\n  │    parseArr\n  │     ↓\n  │    parseCustom\n  │     ↓\n  │    parseDct\n  │     ↓\n  │    parseDictKeyValue\n  │     ↓\n  │    parseObj\n  │     ↓\n  │    parseKeyValue\n  │     ↓\n  │    parseLst\n  │     ↓\n  │    parseSet\n  │     ↓\n  │    parseTpl\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $f0i$debug_to_json$DebugToJson$parse = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed($elm$core$Basics$identity),
	A2($elm$parser$Parser$ignorer, $f0i$debug_to_json$DebugToJson$parseThing, $elm$parser$Parser$end));
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $f0i$debug_to_json$DebugToJson$pp = function (d) {
	var v = A2($elm$parser$Parser$run, $f0i$debug_to_json$DebugToJson$parse, d);
	if (v.$ === 'Ok') {
		var val = v.a;
		return A2(
			$elm$json$Json$Encode$encode,
			4,
			$f0i$debug_to_json$DebugToJson$encode(val));
	} else {
		return d;
	}
};
var $author$project$Log$dump = function (thing) {
	var _v0 = $author$project$Log$runningEnvironment;
	if (_v0.$ === 'Production') {
		return 'Not in dev mode, no toString available.';
	} else {
		var stringifier = _v0.c;
		return $f0i$debug_to_json$DebugToJson$pp(
			stringifier(thing));
	}
};
var $author$project$Replicated$Node$Node$BadRon = function (a) {
	return {$: 'BadRon', a: a};
};
var $author$project$Replicated$Node$Node$DecodingOldIdentityProblem = {$: 'DecodingOldIdentityProblem'};
var $author$project$Replicated$Node$NodeID$NodeID = function (a) {
	return {$: 'NodeID', a: a};
};
var $author$project$Replicated$Node$NodeID$bumpSessionID = function (_v0) {
	var oldNodeID = _v0.a;
	return $author$project$Replicated$Node$NodeID$NodeID(
		_Utils_update(
			oldNodeID,
			{session: oldNodeID.session + 1}));
};
var $turboMaCk$any_dict$Dict$Any$AnyDict = function (a) {
	return {$: 'AnyDict', a: a};
};
var $turboMaCk$any_dict$Dict$Any$empty = function (toKey) {
	return $turboMaCk$any_dict$Dict$Any$AnyDict(
		{dict: $elm$core$Dict$empty, toKey: toKey});
};
var $author$project$Replicated$Node$NodeID$BadCounter = {$: 'BadCounter'};
var $author$project$Replicated$Node$NodeID$BadNodeID = {$: 'BadNodeID'};
var $author$project$Replicated$Node$NodeID$ExpectingCounter = {$: 'ExpectingCounter'};
var $author$project$Replicated$Node$NodeID$NodeIDParts = F4(
	function (agent, device, client, session) {
		return {agent: agent, client: client, device: device, session: session};
	});
var $author$project$Replicated$Node$NodeID$parser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Replicated$Node$NodeID$NodeID,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Node$NodeID$NodeIDParts),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$Advanced$keeper,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$Advanced$symbol(
										A2($elm$parser$Parser$Advanced$Token, 'a', $author$project$Replicated$Node$NodeID$BadNodeID))),
								A2($elm$parser$Parser$Advanced$int, $author$project$Replicated$Node$NodeID$ExpectingCounter, $author$project$Replicated$Node$NodeID$BadCounter)),
								$elm$parser$Parser$Advanced$succeed(0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
								$elm$parser$Parser$Advanced$symbol(
									A2($elm$parser$Parser$Advanced$Token, 'd', $author$project$Replicated$Node$NodeID$BadNodeID))),
							A2($elm$parser$Parser$Advanced$int, $author$project$Replicated$Node$NodeID$ExpectingCounter, $author$project$Replicated$Node$NodeID$BadCounter)),
							$elm$parser$Parser$Advanced$succeed(0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$Advanced$symbol(
								A2($elm$parser$Parser$Advanced$Token, 'c', $author$project$Replicated$Node$NodeID$BadNodeID))),
						A2($elm$parser$Parser$Advanced$int, $author$project$Replicated$Node$NodeID$ExpectingCounter, $author$project$Replicated$Node$NodeID$BadCounter)),
						$elm$parser$Parser$Advanced$succeed(0)
					]))),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, 's', $author$project$Replicated$Node$NodeID$BadNodeID))),
					A2($elm$parser$Parser$Advanced$int, $author$project$Replicated$Node$NodeID$ExpectingCounter, $author$project$Replicated$Node$NodeID$BadCounter)),
					$elm$parser$Parser$Advanced$succeed(0)
				]))));
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Replicated$Node$NodeID$fromString = function (input) {
	return $elm$core$Result$toMaybe(
		A2($elm$parser$Parser$Advanced$run, $author$project$Replicated$Node$NodeID$parser, input));
};
var $author$project$Replicated$Op$OpID$EventStamp = F3(
	function (clock, origin, reversion) {
		return {clock: clock, origin: origin, reversion: reversion};
	});
var $author$project$Replicated$Op$OpID$toStamp = function (_v0) {
	var input = _v0.a;
	var _v1 = _Utils_Tuple2(
		A2($elm$core$String$split, '+', input),
		A2($elm$core$String$split, '-', input));
	if ((_v1.a.b && _v1.a.b.b) && (!_v1.a.b.b.b)) {
		var _v2 = _v1.a;
		var clockString = _v2.a;
		var _v3 = _v2.b;
		var nodeIDString = _v3.a;
		var _v4 = _Utils_Tuple2(
			$author$project$Replicated$Node$NodeID$fromString(nodeIDString),
			$elm$core$String$toInt(clockString));
		if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
			var nodeID = _v4.a.a;
			var clock = _v4.b.a;
			return A3($author$project$Replicated$Op$OpID$EventStamp, clock, nodeID, false);
		} else {
			return _Debug_todo(
				'Replicated.Op.OpID',
				{
					start: {line: 228, column: 21},
					end: {line: 228, column: 31}
				})('Something went wrong parsing OpID ' + (input + ' into an event stamp! found clockString+nodeIDString format though'));
		}
	} else {
		if ((_v1.b.b && _v1.b.b.b) && (!_v1.b.b.b.b)) {
			var _v5 = _v1.b;
			var clockString = _v5.a;
			var _v6 = _v5.b;
			var nodeIDString = _v6.a;
			var _v7 = _Utils_Tuple2(
				$author$project$Replicated$Node$NodeID$fromString(nodeIDString),
				$elm$core$String$toInt(clockString));
			if ((_v7.a.$ === 'Just') && (_v7.b.$ === 'Just')) {
				var nodeID = _v7.a.a;
				var clock = _v7.b.a;
				return A3($author$project$Replicated$Op$OpID$EventStamp, clock, nodeID, true);
			} else {
				return _Debug_todo(
					'Replicated.Op.OpID',
					{
						start: {line: 236, column: 21},
						end: {line: 236, column: 31}
					})('Something went wrong parsing OpID ' + (input + ' into an event stamp! found clockString-nodeIDString format though'));
			}
		} else {
			return _Debug_todo(
				'Replicated.Op.OpID',
				{
					start: {line: 239, column: 13},
					end: {line: 239, column: 23}
				})('Something went wrong parsing OpID ' + (input + ' into an event stamp! couldn\'t split based on plus or minus...'));
		}
	}
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $author$project$Replicated$Node$NodeID$toString = function (_v0) {
	var nodeIDParts = _v0.a;
	var sayPart = F2(
		function (prefix, num) {
			return (!num) ? '' : _Utils_ap(
				prefix,
				$elm$core$String$fromInt(num));
		});
	return $elm$core$String$concat(
		_List_fromArray(
			[
				A2(sayPart, 'a', nodeIDParts.agent),
				A2(sayPart, 'd', nodeIDParts.device),
				A2(sayPart, 'c', nodeIDParts.client),
				's' + $elm$core$String$fromInt(nodeIDParts.session)
			]));
};
var $author$project$Replicated$Op$OpID$toSortablePrimitives = function (opID) {
	var _v0 = $author$project$Replicated$Op$OpID$toStamp(opID);
	var clock = _v0.clock;
	var origin = _v0.origin;
	var reversion = _v0.reversion;
	var tieBreaker = reversion ? ('-' + $author$project$Replicated$Node$NodeID$toString(origin)) : ('+' + $author$project$Replicated$Node$NodeID$toString(origin));
	return _Utils_Tuple2(clock, tieBreaker);
};
var $author$project$Replicated$Node$Node$EmptyChunk = {$: 'EmptyChunk'};
var $author$project$Replicated$Node$Node$ParseFail = function (a) {
	return {$: 'ParseFail', a: a};
};
var $author$project$Log$log = F2(
	function (label, item) {
		var _v0 = $author$project$Log$runningEnvironment;
		if (_v0.$ === 'Production') {
			return item;
		} else {
			var logger = _v0.a;
			var todo = _v0.b;
			return A2(logger, label, item);
		}
	});
var $author$project$Replicated$Op$Op$ExpectedEndOfInput = {$: 'ExpectedEndOfInput'};
var $author$project$Replicated$Op$Op$FrameChunk = F2(
	function (ops, terminator) {
		return {ops: ops, terminator: terminator};
	});
var $author$project$Replicated$Op$Op$OpenTextRonFrame = function (chunks) {
	return {chunks: chunks};
};
var $author$project$Replicated$Op$Op$ParsingFrame = {$: 'ParsingFrame'};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Replicated$Op$Op$ExpectingFrameEnd = {$: 'ExpectingFrameEnd'};
var $author$project$Replicated$Op$Op$frameTerminator = A2($elm$parser$Parser$Advanced$Token, '.', $author$project$Replicated$Op$Op$ExpectingFrameEnd);
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$lineComment = function (start) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$token(start),
		$elm$parser$Parser$Advanced$chompUntilEndOr('\n'));
};
var $author$project$Replicated$Op$Op$ExpectingComment = {$: 'ExpectingComment'};
var $author$project$Replicated$Op$Op$lineCommentStarter = A2($elm$parser$Parser$Advanced$Token, '@~', $author$project$Replicated$Op$Op$ExpectingComment);
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Replicated$Op$Op$AssertionChunk = {$: 'AssertionChunk'};
var $author$project$Replicated$Op$Op$EventChunk = {$: 'EventChunk'};
var $author$project$Replicated$Op$Op$OpReference = function (a) {
	return {$: 'OpReference', a: a};
};
var $author$project$Replicated$Op$Op$OpenTextOp = F6(
	function (reducerSpecified, objectSpecified, opID, reference, payload, endOfChunk) {
		return {endOfChunk: endOfChunk, objectSpecified: objectSpecified, opID: opID, payload: payload, reducerSpecified: reducerSpecified, reference: reference};
	});
var $author$project$Replicated$Op$Op$ParsingOp = function (a) {
	return {$: 'ParsingOp', a: a};
};
var $author$project$Replicated$Op$Op$QueryChunk = {$: 'QueryChunk'};
var $author$project$Replicated$Op$Op$ReducerReference = function (a) {
	return {$: 'ReducerReference', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $author$project$Replicated$Op$Op$ExpectingChunkEnd = {$: 'ExpectingChunkEnd'};
var $author$project$Replicated$Op$Op$assertionChunkTerminator = A2($elm$parser$Parser$Advanced$Token, '!', $author$project$Replicated$Op$Op$ExpectingChunkEnd);
var $author$project$Replicated$Op$Op$eventChunkTerminator = A2($elm$parser$Parser$Advanced$Token, ';', $author$project$Replicated$Op$Op$ExpectingChunkEnd);
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $author$project$Replicated$Op$Op$ExpectingReducerName = {$: 'ExpectingReducerName'};
var $author$project$Replicated$Op$Op$lwwName = A2($elm$parser$Parser$Advanced$Token, 'lww', $author$project$Replicated$Op$Op$ExpectingReducerName);
var $author$project$Replicated$Op$OpID$OpID = function (a) {
	return {$: 'OpID', a: a};
};
var $author$project$Replicated$Op$OpID$fromStamp = function (eventStamp) {
	var separator = eventStamp.reversion ? '-' : '+';
	var nodeString = $author$project$Replicated$Node$NodeID$toString(eventStamp.origin);
	var clockString = $elm$core$String$fromInt(eventStamp.clock);
	return $author$project$Replicated$Op$OpID$OpID(
		_Utils_ap(
			clockString,
			_Utils_ap(separator, nodeString)));
};
var $author$project$Replicated$Op$OpID$nextOpInChain = function (input) {
	var inputStamp = $author$project$Replicated$Op$OpID$toStamp(input);
	var outputStamp = _Utils_update(
		inputStamp,
		{clock: inputStamp.clock + 1});
	return $author$project$Replicated$Op$OpID$fromStamp(outputStamp);
};
var $author$project$Replicated$Op$Op$ExpectingSpecObjectIDAtom = {$: 'ExpectingSpecObjectIDAtom'};
var $author$project$Replicated$Op$Op$objectIDStarter = A2($elm$parser$Parser$Advanced$Token, '#', $author$project$Replicated$Op$Op$ExpectingSpecObjectIDAtom);
var $author$project$Replicated$Op$Op$ExpectingIDClock = {$: 'ExpectingIDClock'};
var $author$project$Replicated$Op$Op$ExpectingNodeID = {$: 'ExpectingNodeID'};
var $author$project$Replicated$Op$Op$InvalidIDClock = {$: 'InvalidIDClock'};
var $author$project$Replicated$Op$Op$ParsingOpID = {$: 'ParsingOpID'};
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$Replicated$Op$OpID$fromPrimitives = F3(
	function (clock, reversion, nodeName) {
		return $author$project$Replicated$Op$OpID$OpID(
			_Utils_ap(
				$elm$core$String$fromInt(clock),
				reversion ? ('-' + nodeName) : ('+' + nodeName)));
	});
var $author$project$Replicated$Op$Op$ExpectingVersionSymbol = {$: 'ExpectingVersionSymbol'};
var $author$project$Replicated$Op$Op$versionMinus = A2($elm$parser$Parser$Advanced$Token, '-', $author$project$Replicated$Op$Op$ExpectingVersionSymbol);
var $author$project$Replicated$Op$Op$versionPlus = A2($elm$parser$Parser$Advanced$Token, '+', $author$project$Replicated$Op$Op$ExpectingVersionSymbol);
var $author$project$Replicated$Op$Op$opIDParser = function () {
	var parseVersionSplitter = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v0) {
					return false;
				},
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$versionPlus)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return true;
				},
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$versionMinus))
			]));
	var parseNodeID = $elm$parser$Parser$Advanced$variable(
		{
			expecting: $author$project$Replicated$Op$Op$ExpectingNodeID,
			inner: function (c) {
				return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
					c,
					_Utils_chr('_'));
			},
			reserved: $elm$core$Set$fromList(
				_List_fromArray(
					['lww', 'replist'])),
			start: $elm$core$Char$isLower
		});
	var parseCounter = A2($elm$parser$Parser$Advanced$int, $author$project$Replicated$Op$Op$ExpectingIDClock, $author$project$Replicated$Op$Op$InvalidIDClock);
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		$author$project$Replicated$Op$Op$ParsingOpID,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$OpID$fromPrimitives),
					parseCounter),
				parseVersionSplitter),
			parseNodeID));
}();
var $author$project$Replicated$Op$Op$ExpectingSpecOpIDAtom = {$: 'ExpectingSpecOpIDAtom'};
var $author$project$Replicated$Op$Op$opIDStarter = A2($elm$parser$Parser$Advanced$Token, '@', $author$project$Replicated$Op$Op$ExpectingSpecOpIDAtom);
var $author$project$Replicated$Op$Op$ExpectingOpSeparator = {$: 'ExpectingOpSeparator'};
var $author$project$Replicated$Op$Op$opSeparator = A2($elm$parser$Parser$Advanced$Token, ',', $author$project$Replicated$Op$Op$ExpectingOpSeparator);
var $author$project$Replicated$Op$Op$ParsingPayloadAtom = {$: 'ParsingPayloadAtom'};
var $author$project$Replicated$Op$Op$IDPointerAtom = function (a) {
	return {$: 'IDPointerAtom', a: a};
};
var $author$project$Replicated$Op$Op$ExpectingUUID = {$: 'ExpectingUUID'};
var $author$project$Replicated$Op$Op$uuidStarter = A2($elm$parser$Parser$Advanced$Token, '>', $author$project$Replicated$Op$Op$ExpectingUUID);
var $author$project$Replicated$Op$Op$explicitRonPointer = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$IDPointerAtom),
		$elm$parser$Parser$Advanced$token($author$project$Replicated$Op$Op$uuidStarter)),
	$author$project$Replicated$Op$Op$opIDParser);
var $author$project$Replicated$Op$Op$ExpectingAlphaNumUnderscore = {$: 'ExpectingAlphaNumUnderscore'};
var $author$project$Replicated$Op$Op$NakedStringAtom = function (a) {
	return {$: 'NakedStringAtom', a: a};
};
var $author$project$Replicated$Op$Op$nakedStringTag = function () {
	var letterNumbersUnderscore = function (_char) {
		return $elm$core$Char$isAlphaNum(_char) || _Utils_eq(
			_char,
			_Utils_chr('_'));
	};
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Replicated$Op$Op$NakedStringAtom,
		$elm$parser$Parser$Advanced$getChompedString(
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
					A2($elm$parser$Parser$Advanced$chompIf, letterNumbersUnderscore, $author$project$Replicated$Op$Op$ExpectingAlphaNumUnderscore)),
				$elm$parser$Parser$Advanced$chompWhile(letterNumbersUnderscore))));
}();
var $author$project$Replicated$Op$Op$StringAtom = function (a) {
	return {$: 'StringAtom', a: a};
};
var $author$project$Replicated$Op$Op$ExpectingEscapedSingleQuote = {$: 'ExpectingEscapedSingleQuote'};
var $author$project$Replicated$Op$Op$escapedSingleQuote = A2($elm$parser$Parser$Advanced$Token, '\\\'', $author$project$Replicated$Op$Op$ExpectingEscapedSingleQuote);
var $author$project$Replicated$Op$Op$isUninteresting = function (_char) {
	switch (_char.valueOf()) {
		case '\\':
			return false;
		case '\'':
			return false;
		default:
			return true;
	}
};
var $author$project$Replicated$Op$Op$ExpectingQuotedString = {$: 'ExpectingQuotedString'};
var $author$project$Replicated$Op$Op$stringWrapSingleQuote = A2($elm$parser$Parser$Advanced$Token, '\'', $author$project$Replicated$Op$Op$ExpectingQuotedString);
var $author$project$Replicated$Op$Op$quotedStringHelp = function (piecesReversed) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(
					function (_v0) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, '\\\'', piecesReversed));
					}),
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$escapedSingleQuote)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(
					function (_v1) {
						return $elm$parser$Parser$Advanced$Done(
							A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(piecesReversed)));
					}),
				$elm$parser$Parser$Advanced$token($author$project$Replicated$Op$Op$stringWrapSingleQuote)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (chunk) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, chunk, piecesReversed));
				},
				$elm$parser$Parser$Advanced$getChompedString(
					$elm$parser$Parser$Advanced$chompWhile($author$project$Replicated$Op$Op$isUninteresting)))
			]));
};
var $author$project$Replicated$Op$Op$quotedString = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$StringAtom),
		$elm$parser$Parser$Advanced$token($author$project$Replicated$Op$Op$stringWrapSingleQuote)),
	A2($elm$parser$Parser$Advanced$loop, _List_Nil, $author$project$Replicated$Op$Op$quotedStringHelp));
var $author$project$Replicated$Op$Op$ExpectingFloatAtom = {$: 'ExpectingFloatAtom'};
var $author$project$Replicated$Op$Op$FloatAtom = function (a) {
	return {$: 'FloatAtom', a: a};
};
var $author$project$Replicated$Op$Op$InvalidFloatAtom = {$: 'InvalidFloatAtom'};
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $author$project$Replicated$Op$Op$floatStarter = A2($elm$parser$Parser$Advanced$Token, '^', $author$project$Replicated$Op$Op$ExpectingUUID);
var $author$project$Replicated$Op$Op$ronFloat = function () {
	var normalFloat = A2($elm$parser$Parser$Advanced$float, $author$project$Replicated$Op$Op$ExpectingFloatAtom, $author$project$Replicated$Op$Op$InvalidFloatAtom);
	var correctFloatWorkaround = $elm$parser$Parser$Advanced$backtrackable(
		A2($elm$parser$Parser$Advanced$float, $author$project$Replicated$Op$Op$ExpectingFloatAtom, $author$project$Replicated$Op$Op$InvalidFloatAtom));
	var explicit = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$FloatAtom),
			$elm$parser$Parser$Advanced$token($author$project$Replicated$Op$Op$floatStarter)),
		correctFloatWorkaround);
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				explicit,
				A2($elm$parser$Parser$Advanced$map, $author$project$Replicated$Op$Op$FloatAtom, correctFloatWorkaround)
			]));
}();
var $author$project$Replicated$Op$Op$IntegerAtom = function (a) {
	return {$: 'IntegerAtom', a: a};
};
var $author$project$Replicated$Op$Op$ExpectingIntegerAtom = {$: 'ExpectingIntegerAtom'};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $author$project$Replicated$Op$Op$correctIntWorkaround = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (str) {
		var _v0 = $elm$core$String$toInt(str);
		if (_v0.$ === 'Just') {
			var n = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(n);
		} else {
			return $elm$parser$Parser$Advanced$problem($author$project$Replicated$Op$Op$ExpectingIntegerAtom);
		}
	},
	$elm$parser$Parser$Advanced$getChompedString(
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isDigit)));
var $author$project$Replicated$Op$Op$intStarter = A2($elm$parser$Parser$Advanced$Token, '=', $author$project$Replicated$Op$Op$ExpectingUUID);
var $author$project$Replicated$Op$Op$ronInt = function () {
	var parseInt = $author$project$Replicated$Op$Op$correctIntWorkaround;
	var explicit = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$IntegerAtom),
			$elm$parser$Parser$Advanced$token($author$project$Replicated$Op$Op$intStarter)),
		parseInt);
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				explicit,
				A2($elm$parser$Parser$Advanced$map, $author$project$Replicated$Op$Op$IntegerAtom, parseInt)
			]));
}();
var $author$project$Replicated$Op$Op$payloadAtomParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	$author$project$Replicated$Op$Op$ParsingPayloadAtom,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[$author$project$Replicated$Op$Op$explicitRonPointer, $author$project$Replicated$Op$Op$ronInt, $author$project$Replicated$Op$Op$ronFloat, $author$project$Replicated$Op$Op$nakedStringTag, $author$project$Replicated$Op$Op$quotedString])));
var $author$project$Replicated$Op$Op$queryChunkTerminator = A2($elm$parser$Parser$Advanced$Token, '?', $author$project$Replicated$Op$Op$ExpectingChunkEnd);
var $author$project$Replicated$Op$Op$ExpectingSpecReducerIDAtom = {$: 'ExpectingSpecReducerIDAtom'};
var $author$project$Replicated$Op$Op$reducerIDStarter = A2($elm$parser$Parser$Advanced$Token, '*', $author$project$Replicated$Op$Op$ExpectingSpecReducerIDAtom);
var $author$project$Replicated$Op$Op$ExpectingSpecReferenceAtom = {$: 'ExpectingSpecReferenceAtom'};
var $author$project$Replicated$Op$Op$referenceStarter = A2($elm$parser$Parser$Advanced$Token, ':', $author$project$Replicated$Op$Op$ExpectingSpecReferenceAtom);
var $author$project$Replicated$Op$Op$repListName = A2($elm$parser$Parser$Advanced$Token, 'replist', $author$project$Replicated$Op$Op$ExpectingReducerName);
var $author$project$Replicated$Op$Op$whitespace = function () {
	var isWhitespace = function (c) {
		switch (c.valueOf()) {
			case ' ':
				return true;
			case '\t':
				return true;
			case '\u000D':
				return true;
			case '\n':
				return true;
			default:
				return false;
		}
	};
	return $elm$parser$Parser$Advanced$chompWhile(isWhitespace);
}();
var $author$project$Replicated$Op$Op$opLineParser = function (prevOpIDMaybe) {
	var reducerIDParser = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (reducerID) {
			return $elm$parser$Parser$Advanced$succeed(reducerID);
		},
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isAlpha)));
	var optionalReducerIDParser = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				$elm$core$Maybe$Just,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$reducerIDStarter)),
					reducerIDParser)),
				$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
			]));
	var optionalOpIDParser = function () {
		if (prevOpIDMaybe.$ === 'Just') {
			var prevOpID = prevOpIDMaybe.a;
			return $elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$opIDStarter)),
						$author$project$Replicated$Op$Op$opIDParser),
						$elm$parser$Parser$Advanced$succeed(
						$author$project$Replicated$Op$OpID$nextOpInChain(prevOpID))
					]));
		} else {
			return A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$opIDStarter)),
				$author$project$Replicated$Op$Op$opIDParser);
		}
	}();
	var optionalObjectIDParser = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				$elm$core$Maybe$Just,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$objectIDStarter)),
					$author$project$Replicated$Op$Op$opIDParser)),
				$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
			]));
	var opRefparser = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$referenceStarter)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$author$project$Replicated$Op$Op$ReducerReference('lww')),
					$elm$parser$Parser$Advanced$keyword($author$project$Replicated$Op$Op$lwwName)),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$author$project$Replicated$Op$Op$ReducerReference('replist')),
					$elm$parser$Parser$Advanced$keyword($author$project$Replicated$Op$Op$repListName)),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$OpReference),
					$author$project$Replicated$Op$Op$opIDParser)
				])));
	var optionalRefParser = function () {
		if (prevOpIDMaybe.$ === 'Just') {
			var prevOpID = prevOpIDMaybe.a;
			return $elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						opRefparser,
						A2(
						$elm$parser$Parser$Advanced$map,
						$author$project$Replicated$Op$Op$OpReference,
						$elm$parser$Parser$Advanced$succeed(prevOpID))
					]));
		} else {
			return opRefparser;
		}
	}();
	var opPayloadParser = function (atomsReversed) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (thisAtom) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, thisAtom, atomsReversed));
						}),
					A2($elm$parser$Parser$Advanced$ignorer, $author$project$Replicated$Op$Op$payloadAtomParser, $author$project$Replicated$Op$Op$whitespace)),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(atomsReversed));
					},
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0))
				]));
	};
	var opEndParser = $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$opSeparator)),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$core$Maybe$Just($author$project$Replicated$Op$Op$EventChunk)),
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$eventChunkTerminator)),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$core$Maybe$Just($author$project$Replicated$Op$Op$AssertionChunk)),
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$assertionChunkTerminator)),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$core$Maybe$Just($author$project$Replicated$Op$Op$QueryChunk)),
				$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$queryChunkTerminator))
			]));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		$author$project$Replicated$Op$Op$ParsingOp(
			A2($elm$core$Maybe$map, $author$project$Replicated$Op$OpID$nextOpInChain, prevOpIDMaybe)),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$OpenTextOp),
								A2($elm$parser$Parser$Advanced$ignorer, optionalReducerIDParser, $author$project$Replicated$Op$Op$whitespace)),
							A2($elm$parser$Parser$Advanced$ignorer, optionalObjectIDParser, $author$project$Replicated$Op$Op$whitespace)),
						A2($elm$parser$Parser$Advanced$ignorer, optionalOpIDParser, $author$project$Replicated$Op$Op$whitespace)),
					A2($elm$parser$Parser$Advanced$ignorer, optionalRefParser, $author$project$Replicated$Op$Op$whitespace)),
				A2($elm$parser$Parser$Advanced$loop, _List_Nil, opPayloadParser)),
			opEndParser));
};
var $author$project$Replicated$Op$Op$frameParser = function () {
	var opLineParserChainLoop = function (opsReversed) {
		var lastSeenOp = $elm$core$List$head(opsReversed);
		var parseRealOp = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					function (thisOp) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, thisOp, opsReversed));
					}),
				$author$project$Replicated$Op$Op$whitespace),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Replicated$Op$Op$opLineParser(
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.opID;
						},
						lastSeenOp)),
				$author$project$Replicated$Op$Op$whitespace));
		var commentPseudoOp = A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				function (_v3) {
					return $elm$parser$Parser$Advanced$Loop(opsReversed);
				}),
			$elm$parser$Parser$Advanced$lineComment($author$project$Replicated$Op$Op$lineCommentStarter));
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[commentPseudoOp, parseRealOp]));
	};
	var opsInChunk = function (opsReversed) {
		var _v1 = A2(
			$elm$core$Maybe$andThen,
			function ($) {
				return $.endOfChunk;
			},
			$elm$core$List$head(opsReversed));
		if (_v1.$ === 'Nothing') {
			return opLineParserChainLoop(opsReversed);
		} else {
			var chunkEndType = _v1.a;
			return A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(
						A2(
							$author$project$Replicated$Op$Op$FrameChunk,
							$elm$core$List$reverse(opsReversed),
							chunkEndType));
				},
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0));
		}
	};
	var chunks = A2($elm$parser$Parser$Advanced$loop, _List_Nil, opsInChunk);
	var chunksInFrame = function (chunksReversed) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (thisChunk) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, thisChunk, chunksReversed));
						}),
					A2($elm$parser$Parser$Advanced$ignorer, chunks, $author$project$Replicated$Op$Op$whitespace)),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(chunksReversed));
					},
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$elm$parser$Parser$Advanced$symbol($author$project$Replicated$Op$Op$frameTerminator)))
				]));
	};
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		$author$project$Replicated$Op$Op$ParsingFrame,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($author$project$Replicated$Op$Op$OpenTextRonFrame),
			A2($elm$parser$Parser$Advanced$loop, _List_Nil, chunksInFrame)));
}();
var $author$project$Replicated$Op$Op$ronParser = function () {
	var frameHelp = function (framesReversed) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (frame) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, frame, framesReversed));
						}),
					A2($elm$parser$Parser$Advanced$ignorer, $author$project$Replicated$Op$Op$frameParser, $author$project$Replicated$Op$Op$whitespace)),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(framesReversed));
					},
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$elm$parser$Parser$Advanced$end($author$project$Replicated$Op$Op$ExpectedEndOfInput)))
				]));
	};
	return A2($elm$parser$Parser$Advanced$loop, _List_Nil, frameHelp);
}();
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$Replicated$Op$Op$Op = function (a) {
	return {$: 'Op', a: a};
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Replicated$Node$Node$closeOp = F3(
	function (deducedReducer, deducedObject, openOp) {
		return $author$project$Replicated$Op$Op$Op(
			{
				objectID: A2($elm$core$Maybe$withDefault, deducedObject, openOp.objectSpecified),
				operationID: openOp.opID,
				payload: openOp.payload,
				reducerID: A2($elm$core$Maybe$withDefault, deducedReducer, openOp.reducerSpecified),
				reference: openOp.reference
			});
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $author$project$Replicated$Op$Op$object = function (_v0) {
	var op = _v0.a;
	return op.objectID;
};
var $author$project$Replicated$Op$Op$Acknowledgement = {$: 'Acknowledgement'};
var $author$project$Replicated$Op$Op$Annotation = {$: 'Annotation'};
var $author$project$Replicated$Op$Op$CreationOp = {$: 'CreationOp'};
var $author$project$Replicated$Op$Op$DeletionOp = {$: 'DeletionOp'};
var $author$project$Replicated$Op$Op$NormalOp = {$: 'NormalOp'};
var $author$project$Replicated$Op$Op$UnDeletionOp = {$: 'UnDeletionOp'};
var $author$project$Replicated$Op$OpID$isReversion = function (input) {
	return $author$project$Replicated$Op$OpID$toStamp(input).reversion;
};
var $author$project$Replicated$Op$Op$opIDFromReference = function (givenRef) {
	if (givenRef.$ === 'OpReference') {
		var opID = givenRef.a;
		return $elm$core$Maybe$Just(opID);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Replicated$Op$Op$pattern = function (_v0) {
	var opRecord = _v0.a;
	var _v1 = _Utils_Tuple2(
		$author$project$Replicated$Op$OpID$isReversion(opRecord.operationID),
		A2(
			$elm$core$Maybe$map,
			$author$project$Replicated$Op$OpID$isReversion,
			$author$project$Replicated$Op$Op$opIDFromReference(opRecord.reference)));
	if (_v1.a) {
		if (_v1.b.$ === 'Just') {
			if (!_v1.b.a) {
				return $author$project$Replicated$Op$Op$DeletionOp;
			} else {
				return $author$project$Replicated$Op$Op$UnDeletionOp;
			}
		} else {
			return $author$project$Replicated$Op$Op$Annotation;
		}
	} else {
		if (_v1.b.$ === 'Nothing') {
			var _v2 = _v1.b;
			return $author$project$Replicated$Op$Op$CreationOp;
		} else {
			if (!_v1.b.a) {
				return $author$project$Replicated$Op$Op$NormalOp;
			} else {
				return $author$project$Replicated$Op$Op$Acknowledgement;
			}
		}
	}
};
var $author$project$Replicated$Node$Node$creationOpsToObjectIDs = function (ops) {
	var getCreationIDs = function (op) {
		var _v0 = $author$project$Replicated$Op$Op$pattern(op);
		if (_v0.$ === 'CreationOp') {
			return $elm$core$Maybe$Just(
				$author$project$Replicated$Op$Op$object(op));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	return A2($elm$core$List$filterMap, getCreationIDs, ops);
};
var $author$project$Replicated$Node$Node$UnknownReference = function (a) {
	return {$: 'UnknownReference', a: a};
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $turboMaCk$any_dict$Dict$Any$get = F2(
	function (k, _v0) {
		var dict = _v0.a.dict;
		var toKey = _v0.a.toKey;
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			A2(
				$elm$core$Dict$get,
				toKey(k),
				dict));
	});
var $author$project$Replicated$Op$Op$reducer = function (_v0) {
	var op = _v0.a;
	return op.reducerID;
};
var $author$project$Replicated$Node$Node$lookupObject = F2(
	function (node, opIDToFind) {
		var _v0 = A2($turboMaCk$any_dict$Dict$Any$get, opIDToFind, node.ops);
		if (_v0.$ === 'Just') {
			var foundOp = _v0.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					$author$project$Replicated$Op$Op$reducer(foundOp),
					$author$project$Replicated$Op$Op$object(foundOp)));
		} else {
			return $elm$core$Result$Err(
				$author$project$Replicated$Node$Node$UnknownReference(opIDToFind));
		}
	});
var $author$project$Replicated$Op$OpID$getClock = function (opID) {
	var _v0 = $author$project$Replicated$Op$OpID$toStamp(opID);
	var clock = _v0.clock;
	var origin = _v0.origin;
	var reversion = _v0.reversion;
	return clock;
};
var $author$project$Replicated$Op$Op$id = function (_v0) {
	var op = _v0.a;
	return op.operationID;
};
var $turboMaCk$any_dict$Dict$Any$insert = F3(
	function (k, v, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						$elm$core$Dict$insert,
						inner.toKey(k),
						_Utils_Tuple2(k, v),
						inner.dict)
				}));
	});
var $author$project$Replicated$Op$OpID$toString = function (_v0) {
	var string = _v0.a;
	return string;
};
var $author$project$Replicated$Node$Node$updateWithClosedOps = F2(
	function (node, newOps) {
		var alreadyHaveThisOp = function (op) {
			return A2(
				$turboMaCk$any_dict$Dict$Any$get,
				$author$project$Replicated$Op$Op$id(op),
				node.ops);
		};
		var updatedNodeWithOp = F2(
			function (newOp, nodeToUpdate) {
				var _v0 = alreadyHaveThisOp(newOp);
				if (_v0.$ === 'Nothing') {
					return _Utils_update(
						node,
						{
							highestSeenClock: A2(
								$elm$core$Basics$max,
								nodeToUpdate.highestSeenClock,
								$author$project$Replicated$Op$OpID$getClock(
									$author$project$Replicated$Op$Op$id(newOp))),
							ops: A3(
								$turboMaCk$any_dict$Dict$Any$insert,
								$author$project$Replicated$Op$Op$id(newOp),
								newOp,
								nodeToUpdate.ops)
						});
				} else {
					return A2(
						$elm$core$Debug$log,
						'Already have op ' + ($author$project$Replicated$Op$OpID$toString(
							$author$project$Replicated$Op$Op$id(newOp)) + 'as an object..'),
						_Utils_update(
							node,
							{
								highestSeenClock: A2(
									$elm$core$Basics$max,
									nodeToUpdate.highestSeenClock,
									$author$project$Replicated$Op$OpID$getClock(
										$author$project$Replicated$Op$Op$id(newOp))),
								ops: A3(
									$turboMaCk$any_dict$Dict$Any$insert,
									$author$project$Replicated$Op$Op$id(newOp),
									newOp,
									nodeToUpdate.ops)
							}));
				}
			});
		return A3($elm$core$List$foldl, updatedNodeWithOp, node, newOps);
	});
var $author$project$Replicated$Node$Node$updateNodeWithChunk = F2(
	function (chunk, old) {
		var deduceChunkReducerAndObject = function () {
			var _v3 = $elm$core$List$head(chunk.ops);
			if (_v3.$ === 'Nothing') {
				return $elm$core$Result$Err($author$project$Replicated$Node$Node$EmptyChunk);
			} else {
				var firstOpenOp = _v3.a;
				var _v4 = _Utils_Tuple3(firstOpenOp.objectSpecified, firstOpenOp.reducerSpecified, firstOpenOp.reference);
				_v4$0:
				while (true) {
					if (_v4.c.$ === 'ReducerReference') {
						if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
							break _v4$0;
						} else {
							var reducerID = _v4.c.a;
							return $elm$core$Result$Ok(
								_Utils_Tuple2(reducerID, firstOpenOp.opID));
						}
					} else {
						if ((_v4.a.$ === 'Just') && (_v4.b.$ === 'Just')) {
							break _v4$0;
						} else {
							var referencedOpID = _v4.c.a;
							return A2($author$project$Replicated$Node$Node$lookupObject, old.node, referencedOpID);
						}
					}
				}
				var explicitReducer = _v4.a.a;
				var explicitObject = _v4.b.a;
				return $elm$core$Result$Ok(
					_Utils_Tuple2(explicitObject, explicitReducer));
			}
		}();
		var closedOpListResult = function () {
			if (deduceChunkReducerAndObject.$ === 'Ok') {
				var _v2 = deduceChunkReducerAndObject.a;
				var foundReducerID = _v2.a;
				var foundObjectID = _v2.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$map,
						A2($author$project$Replicated$Node$Node$closeOp, foundReducerID, foundObjectID),
						chunk.ops));
			} else {
				var newErrs = deduceChunkReducerAndObject.a;
				return $elm$core$Result$Err(newErrs);
			}
		}();
		if (closedOpListResult.$ === 'Ok') {
			var closedOps = closedOpListResult.a;
			return {
				newObjects: _Utils_ap(
					old.newObjects,
					$author$project$Replicated$Node$Node$creationOpsToObjectIDs(closedOps)),
				node: A2($author$project$Replicated$Node$Node$updateWithClosedOps, old.node, closedOps),
				warnings: old.warnings
			};
		} else {
			var newErr = closedOpListResult.a;
			return _Utils_update(
				old,
				{
					warnings: _Utils_ap(
						old.warnings,
						_List_fromArray(
							[newErr]))
				});
		}
	});
var $author$project$Replicated$Node$Node$update = F2(
	function (newFrame, old) {
		var _v0 = newFrame.chunks;
		if (!_v0.b) {
			return A2(
				$author$project$Log$log,
				'Node.update: got an OpenTextRonFrame with no Chunks!',
				_Utils_update(
					old,
					{
						warnings: _Utils_ap(
							old.warnings,
							_List_fromArray(
								[$author$project$Replicated$Node$Node$EmptyChunk]))
					}));
		} else {
			var someChunks = _v0;
			return A3($elm$core$List$foldl, $author$project$Replicated$Node$Node$updateNodeWithChunk, old, someChunks);
		}
	});
var $author$project$Replicated$Node$Node$updateWithMultipleFrames = F2(
	function (newFrames, old) {
		var assumeRootIfNeeded = function (output) {
			var _v0 = output.node.root;
			if (_v0.$ === 'Just') {
				return output;
			} else {
				var oldNode = output.node;
				var newRoot = $elm_community$list_extra$List$Extra$last(output.newObjects);
				var newNode = _Utils_update(
					oldNode,
					{root: newRoot});
				return _Utils_update(
					output,
					{node: newNode});
			}
		};
		var updateWithRootFinder = F2(
			function (frame, oldInfo) {
				return assumeRootIfNeeded(
					A2($author$project$Replicated$Node$Node$update, frame, oldInfo));
			});
		return A3($elm$core$List$foldl, updateWithRootFinder, old, newFrames);
	});
var $author$project$Replicated$Node$Node$updateWithRon = F2(
	function (old, inputRon) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, $author$project$Replicated$Op$Op$ronParser, inputRon);
		if (_v0.$ === 'Ok') {
			var parsedRonFrames = _v0.a;
			if (!parsedRonFrames.b) {
				return A2(
					$author$project$Log$log,
					'parsed 0 frames from input ron: \'' + (inputRon + '\''),
					_Utils_update(
						old,
						{
							warnings: _Utils_ap(
								old.warnings,
								_List_fromArray(
									[$author$project$Replicated$Node$Node$EmptyChunk]))
						}));
			} else {
				var foundFrames = parsedRonFrames;
				return A2($author$project$Replicated$Node$Node$updateWithMultipleFrames, parsedRonFrames, old);
			}
		} else {
			var parseDeadEnds = _v0.a;
			return _Utils_update(
				old,
				{
					warnings: _Utils_ap(
						old.warnings,
						_List_fromArray(
							[
								$author$project$Replicated$Node$Node$ParseFail(parseDeadEnds)
							]))
				});
		}
	});
var $author$project$Replicated$Node$Node$initFromSaved = F2(
	function (_v0, inputRon) {
		var sameSession = _v0.sameSession;
		var storedNodeID = _v0.storedNodeID;
		var newIdentity = function (oldNodeID) {
			return sameSession ? oldNodeID : $author$project$Replicated$Node$NodeID$bumpSessionID(oldNodeID);
		};
		var startNode = function (oldNodeID) {
			return {
				highestSeenClock: 0,
				identity: newIdentity(oldNodeID),
				ops: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives),
				peers: _List_Nil,
				root: $elm$core$Maybe$Nothing
			};
		};
		var lastIdentity = $author$project$Replicated$Node$NodeID$fromString(storedNodeID);
		var backfilledNode = function (oldNodeID) {
			return A2(
				$author$project$Replicated$Node$Node$updateWithRon,
				{
					newObjects: _List_Nil,
					node: startNode(oldNodeID),
					warnings: _List_Nil
				},
				inputRon);
		};
		if (lastIdentity.$ === 'Just') {
			var oldNodeID = lastIdentity.a;
			var backfilledNodeAttempt = backfilledNode(oldNodeID);
			var _v2 = backfilledNodeAttempt.warnings;
			if (!_v2.b) {
				return $elm$core$Result$Ok(backfilledNodeAttempt);
			} else {
				var foundWarnings = _v2;
				return $elm$core$Result$Err(
					$author$project$Replicated$Node$Node$BadRon(foundWarnings));
			}
		} else {
			return $elm$core$Result$Err($author$project$Replicated$Node$Node$DecodingOldIdentityProblem);
		}
	});
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$getZoneName = _Time_getZoneName(_Utils_Tuple0);
var $elm$time$Time$here = _Time_here(_Utils_Tuple0);
var $author$project$SmartTime$Human$Calendar$Month$DayOfMonth = function (a) {
	return {$: 'DayOfMonth', a: a};
};
var $author$project$SmartTime$Human$Calendar$Year$Year = function (a) {
	return {$: 'Year', a: a};
};
var $author$project$SmartTime$Human$Duration$Hours = function (a) {
	return {$: 'Hours', a: a};
};
var $author$project$SmartTime$Human$Duration$Milliseconds = function (a) {
	return {$: 'Milliseconds', a: a};
};
var $author$project$SmartTime$Human$Duration$Minutes = function (a) {
	return {$: 'Minutes', a: a};
};
var $author$project$SmartTime$Human$Duration$Seconds = function (a) {
	return {$: 'Seconds', a: a};
};
var $author$project$SmartTime$Duration$Duration = function (a) {
	return {$: 'Duration', a: a};
};
var $author$project$SmartTime$Duration$fromInt = function (_int) {
	return $author$project$SmartTime$Duration$Duration(_int);
};
var $author$project$SmartTime$Duration$inMs = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$SmartTime$Duration$millisecondLength = 1;
var $author$project$SmartTime$Duration$secondLength = 1000 * $author$project$SmartTime$Duration$millisecondLength;
var $author$project$SmartTime$Duration$minuteLength = 60 * $author$project$SmartTime$Duration$secondLength;
var $author$project$SmartTime$Duration$hourLength = 60 * $author$project$SmartTime$Duration$minuteLength;
var $author$project$SmartTime$Duration$dayLength = 24 * $author$project$SmartTime$Duration$hourLength;
var $author$project$SmartTime$Duration$aDay = $author$project$SmartTime$Duration$Duration($author$project$SmartTime$Duration$dayLength);
var $author$project$SmartTime$Duration$aMillisecond = $author$project$SmartTime$Duration$Duration($author$project$SmartTime$Duration$millisecondLength);
var $author$project$SmartTime$Duration$aMinute = $author$project$SmartTime$Duration$Duration($author$project$SmartTime$Duration$minuteLength);
var $author$project$SmartTime$Duration$aSecond = $author$project$SmartTime$Duration$Duration($author$project$SmartTime$Duration$secondLength);
var $author$project$SmartTime$Duration$anHour = $author$project$SmartTime$Duration$Duration($author$project$SmartTime$Duration$hourLength);
var $elm$core$Basics$round = _Basics_round;
var $author$project$SmartTime$Duration$scale = F2(
	function (_v0, scalar) {
		var dur = _v0.a;
		return $author$project$SmartTime$Duration$Duration(
			$elm$core$Basics$round(dur * scalar));
	});
var $author$project$SmartTime$Human$Duration$toDuration = function (humanDuration) {
	switch (humanDuration.$) {
		case 'Days':
			var days = humanDuration.a;
			return A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$aDay, days);
		case 'Hours':
			var hours = humanDuration.a;
			return A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$anHour, hours);
		case 'Minutes':
			var minutes = humanDuration.a;
			return A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$aMinute, minutes);
		case 'Seconds':
			var seconds = humanDuration.a;
			return A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$aSecond, seconds);
		default:
			var milliseconds = humanDuration.a;
			return A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$aMillisecond, milliseconds);
	}
};
var $author$project$SmartTime$Human$Duration$normalize = function (human) {
	return $author$project$SmartTime$Duration$inMs(
		$author$project$SmartTime$Human$Duration$toDuration(human));
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$SmartTime$Human$Duration$build = function (list) {
	return $author$project$SmartTime$Duration$fromInt(
		$elm$core$List$sum(
			A2($elm$core$List$map, $author$project$SmartTime$Human$Duration$normalize, list)));
};
var $author$project$SmartTime$Human$Clock$clock = F4(
	function (hh, mm, ss, ms) {
		return $author$project$SmartTime$Human$Duration$build(
			_List_fromArray(
				[
					$author$project$SmartTime$Human$Duration$Hours(hh),
					$author$project$SmartTime$Human$Duration$Minutes(mm),
					$author$project$SmartTime$Human$Duration$Seconds(ss),
					$author$project$SmartTime$Human$Duration$Milliseconds(ms)
				]));
	});
var $author$project$SmartTime$Duration$add = F2(
	function (_v0, _v1) {
		var int1 = _v0.a;
		var int2 = _v1.a;
		return $author$project$SmartTime$Duration$Duration(int1 + int2);
	});
var $author$project$SmartTime$Human$Calendar$toRataDie = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $author$project$SmartTime$Moment$UTC = {$: 'UTC'};
var $author$project$SmartTime$Moment$Moment = function (a) {
	return {$: 'Moment', a: a};
};
var $author$project$SmartTime$Moment$commonEraStart = $author$project$SmartTime$Moment$Moment(
	$author$project$SmartTime$Duration$fromInt(0));
var $author$project$SmartTime$Moment$Earlier = {$: 'Earlier'};
var $author$project$SmartTime$Moment$Coincident = {$: 'Coincident'};
var $author$project$SmartTime$Moment$Later = {$: 'Later'};
var $author$project$SmartTime$Moment$compare = F2(
	function (_v0, _v1) {
		var time1 = _v0.a;
		var time2 = _v1.a;
		var _v2 = A2(
			$elm$core$Basics$compare,
			$author$project$SmartTime$Duration$inMs(time1),
			$author$project$SmartTime$Duration$inMs(time2));
		switch (_v2.$) {
			case 'GT':
				return $author$project$SmartTime$Moment$Later;
			case 'LT':
				return $author$project$SmartTime$Moment$Earlier;
			default:
				return $author$project$SmartTime$Moment$Coincident;
		}
	});
var $author$project$SmartTime$Human$Moment$searchRemainingZoneHistory = F3(
	function (moment, fallback, history) {
		searchRemainingZoneHistory:
		while (true) {
			if (!history.b) {
				return fallback;
			} else {
				var _v1 = history.a;
				var zoneChange = _v1.a;
				var offsetAtThatTime = _v1.b;
				var remainingHistory = history.b;
				if (!_Utils_eq(
					A2($author$project$SmartTime$Moment$compare, moment, zoneChange),
					$author$project$SmartTime$Moment$Earlier)) {
					return offsetAtThatTime;
				} else {
					var $temp$moment = moment,
						$temp$fallback = offsetAtThatTime,
						$temp$history = remainingHistory;
					moment = $temp$moment;
					fallback = $temp$fallback;
					history = $temp$history;
					continue searchRemainingZoneHistory;
				}
			}
		}
	});
var $author$project$SmartTime$Human$Moment$getOffset = F2(
	function (referencePoint, zone) {
		return A3($author$project$SmartTime$Human$Moment$searchRemainingZoneHistory, referencePoint, zone.defaultOffset, zone.history);
	});
var $author$project$SmartTime$Moment$TAI = {$: 'TAI'};
var $author$project$SmartTime$Duration$fromMs = function (_float) {
	return $author$project$SmartTime$Duration$Duration(
		$elm$core$Basics$round(_float));
};
var $author$project$SmartTime$Duration$fromSeconds = function (_float) {
	return $author$project$SmartTime$Duration$Duration(
		$elm$core$Basics$round(_float * $author$project$SmartTime$Duration$secondLength));
};
var $author$project$SmartTime$Moment$nineteen00 = $author$project$SmartTime$Moment$Moment(
	$author$project$SmartTime$Duration$fromInt(0));
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm_community$list_extra$List$Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _v0) {
			var xs = _v0.a;
			var free = _v0.b;
			return (p(x) && free) ? _Utils_Tuple2(
				A2($elm$core$List$cons, x, xs),
				true) : _Utils_Tuple2(xs, false);
		});
	return A2(
		$elm$core$Basics$composeL,
		$elm$core$Tuple$first,
		A2(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, true)));
};
var $author$project$SmartTime$Moment$linearFromUTC = function (momentAsDur) {
	return A2(
		$author$project$SmartTime$Duration$add,
		momentAsDur,
		$author$project$SmartTime$Moment$utcOffset(momentAsDur));
};
var $author$project$SmartTime$Moment$moment = F3(
	function (timeScale, _v2, inputDuration) {
		var epochDur = _v2.a;
		var input = A2($author$project$SmartTime$Duration$add, inputDuration, epochDur);
		switch (timeScale.$) {
			case 'TAI':
				return $author$project$SmartTime$Moment$Moment(input);
			case 'UTC':
				return $author$project$SmartTime$Moment$Moment(
					$author$project$SmartTime$Moment$linearFromUTC(input));
			case 'GPS':
				return $author$project$SmartTime$Moment$Moment(
					A2(
						$author$project$SmartTime$Duration$add,
						input,
						$author$project$SmartTime$Duration$fromSeconds(19)));
			default:
				return $author$project$SmartTime$Moment$Moment(
					A2(
						$author$project$SmartTime$Duration$add,
						input,
						$author$project$SmartTime$Duration$fromMs(32184)));
		}
	});
var $author$project$SmartTime$Moment$utcOffset = function (rawUTCMomentAsDur) {
	var ntpEpoch = $author$project$SmartTime$Moment$nineteen00;
	var leapSecondsTable = _List_fromArray(
		[
			_Utils_Tuple2(2272060800, 10),
			_Utils_Tuple2(2287785600, 11),
			_Utils_Tuple2(2303683200, 12),
			_Utils_Tuple2(2335219200, 13),
			_Utils_Tuple2(2366755200, 14),
			_Utils_Tuple2(2398291200, 15),
			_Utils_Tuple2(2429913600, 16),
			_Utils_Tuple2(2461449600, 17),
			_Utils_Tuple2(2492985600, 18),
			_Utils_Tuple2(2524521600, 19),
			_Utils_Tuple2(2571782400, 20),
			_Utils_Tuple2(2603318400, 21),
			_Utils_Tuple2(2634854400, 22),
			_Utils_Tuple2(2698012800, 23),
			_Utils_Tuple2(2776982400, 24),
			_Utils_Tuple2(2840140800, 25),
			_Utils_Tuple2(2871676800, 26),
			_Utils_Tuple2(2918937600, 27),
			_Utils_Tuple2(2950473600, 28),
			_Utils_Tuple2(2982009600, 29),
			_Utils_Tuple2(3029443200, 30),
			_Utils_Tuple2(3076704000, 31),
			_Utils_Tuple2(3124137600, 32),
			_Utils_Tuple2(3345062400, 33),
			_Utils_Tuple2(3439756800, 34),
			_Utils_Tuple2(3550089600, 35),
			_Utils_Tuple2(3644697600, 36),
			_Utils_Tuple2(3692217600, 37)
		]);
	var fromNTPtime = function (num) {
		return A3(
			$author$project$SmartTime$Moment$moment,
			$author$project$SmartTime$Moment$TAI,
			ntpEpoch,
			$author$project$SmartTime$Duration$fromSeconds(num));
	};
	var fromTableItem = function (_v1) {
		var ntpTime = _v1.a;
		var leaps = _v1.b;
		return _Utils_Tuple2(
			fromNTPtime(ntpTime),
			$author$project$SmartTime$Duration$fromSeconds(leaps));
	};
	var leapSeconds = A2($elm$core$List$map, fromTableItem, leapSecondsTable);
	var oldest = fromTableItem(
		_Utils_Tuple2(2272060800, 10));
	var fakeMoment = A3($author$project$SmartTime$Moment$moment, $author$project$SmartTime$Moment$TAI, $author$project$SmartTime$Moment$commonEraStart, rawUTCMomentAsDur);
	var periodStartsEarlier = function (_v0) {
		var periodStartMoment = _v0.a;
		return _Utils_eq(
			A2($author$project$SmartTime$Moment$compare, periodStartMoment, fakeMoment),
			$author$project$SmartTime$Moment$Earlier);
	};
	var goBackThroughTime = A2($elm_community$list_extra$List$Extra$takeWhileRight, periodStartsEarlier, leapSeconds);
	var relevantPeriod = A2(
		$elm$core$Maybe$withDefault,
		oldest,
		$elm_community$list_extra$List$Extra$last(goBackThroughTime));
	var offsetAtThatTime = relevantPeriod.b;
	return offsetAtThatTime;
};
var $author$project$SmartTime$Duration$subtract = F2(
	function (_v0, _v1) {
		var int1 = _v0.a;
		var int2 = _v1.a;
		return $author$project$SmartTime$Duration$Duration(int1 - int2);
	});
var $author$project$SmartTime$Human$Moment$toTAIAndUnlocalize = F2(
	function (zone, localMomentDur) {
		var toMoment = function (duration) {
			return A3($author$project$SmartTime$Moment$moment, $author$project$SmartTime$Moment$UTC, $author$project$SmartTime$Moment$commonEraStart, duration);
		};
		var zoneOffset = A2(
			$author$project$SmartTime$Human$Moment$getOffset,
			toMoment(localMomentDur),
			zone);
		return toMoment(
			A2($author$project$SmartTime$Duration$subtract, localMomentDur, zoneOffset));
	});
var $author$project$SmartTime$Human$Moment$fromDateAndTime = F3(
	function (zone, date, timeOfDay) {
		var woleDaysBefore = A2(
			$author$project$SmartTime$Duration$scale,
			$author$project$SmartTime$Duration$aDay,
			$author$project$SmartTime$Human$Calendar$toRataDie(date));
		var total = A2($author$project$SmartTime$Duration$add, timeOfDay, woleDaysBefore);
		return A2($author$project$SmartTime$Human$Moment$toTAIAndUnlocalize, zone, total);
	});
var $author$project$SmartTime$Moment$unixEpoch = function () {
	var jan1st1970_rataDie = 719163;
	return $author$project$SmartTime$Moment$Moment(
		A2($author$project$SmartTime$Duration$scale, $author$project$SmartTime$Duration$aDay, jan1st1970_rataDie));
}();
var $author$project$SmartTime$Moment$fromElmInt = function (intMsUtc) {
	return A3(
		$author$project$SmartTime$Moment$moment,
		$author$project$SmartTime$Moment$UTC,
		$author$project$SmartTime$Moment$unixEpoch,
		$author$project$SmartTime$Duration$fromInt(intMsUtc));
};
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$SmartTime$Moment$fromElmTime = function (intMsUtc) {
	return $author$project$SmartTime$Moment$fromElmInt(
		$elm$time$Time$posixToMillis(intMsUtc));
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$core$Basics$modBy = _Basics_modBy;
var $author$project$SmartTime$Human$Calendar$Year$isLeapYear = function (_v0) {
	var _int = _v0.a;
	return (!A2($elm$core$Basics$modBy, 4, _int)) && ((!A2($elm$core$Basics$modBy, 400, _int)) || (!(!A2($elm$core$Basics$modBy, 100, _int))));
};
var $author$project$SmartTime$Human$Calendar$Month$length = F2(
	function (givenYear, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $author$project$SmartTime$Human$Calendar$Year$isLeapYear(givenYear) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $author$project$SmartTime$Human$Calendar$Month$clampToValidDayOfMonth = F3(
	function (givenYear, givenMonth, _v0) {
		var originalDay = _v0.a;
		var targetMonthLength = A2($author$project$SmartTime$Human$Calendar$Month$length, givenYear, givenMonth);
		return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(
			A3($elm$core$Basics$clamp, 1, targetMonthLength, originalDay));
	});
var $author$project$SmartTime$Human$Calendar$CalendarDate = function (a) {
	return {$: 'CalendarDate', a: a};
};
var $author$project$SmartTime$Human$Calendar$Month$dayToInt = function (_v0) {
	var day = _v0.a;
	return day;
};
var $author$project$SmartTime$Human$Calendar$Month$daysBefore = F2(
	function (givenYear, m) {
		var leapDays = $author$project$SmartTime$Human$Calendar$Year$isLeapYear(givenYear) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $author$project$SmartTime$Human$Calendar$Year$daysBefore = function (_v0) {
	var givenYearInt = _v0.a;
	var yearFromZero = givenYearInt - 1;
	var leapYears = (((yearFromZero / 4) | 0) - ((yearFromZero / 100) | 0)) + ((yearFromZero / 400) | 0);
	return (365 * yearFromZero) + leapYears;
};
var $author$project$SmartTime$Human$Calendar$fromPartsTrusted = function (given) {
	return $author$project$SmartTime$Human$Calendar$CalendarDate(
		($author$project$SmartTime$Human$Calendar$Year$daysBefore(given.year) + A2($author$project$SmartTime$Human$Calendar$Month$daysBefore, given.year, given.month)) + $author$project$SmartTime$Human$Calendar$Month$dayToInt(given.day));
};
var $author$project$SmartTime$Human$Calendar$fromPartsForced = function (given) {
	return $author$project$SmartTime$Human$Calendar$fromPartsTrusted(
		{
			day: A3($author$project$SmartTime$Human$Calendar$Month$clampToValidDayOfMonth, given.year, given.month, given.day),
			month: given.month,
			year: given.year
		});
};
var $author$project$SmartTime$Human$Calendar$Month$Apr = {$: 'Apr'};
var $author$project$SmartTime$Human$Calendar$Month$Aug = {$: 'Aug'};
var $author$project$SmartTime$Human$Calendar$Month$Dec = {$: 'Dec'};
var $author$project$SmartTime$Human$Calendar$Month$Feb = {$: 'Feb'};
var $author$project$SmartTime$Human$Calendar$Month$Jan = {$: 'Jan'};
var $author$project$SmartTime$Human$Calendar$Month$Jul = {$: 'Jul'};
var $author$project$SmartTime$Human$Calendar$Month$Jun = {$: 'Jun'};
var $author$project$SmartTime$Human$Calendar$Month$Mar = {$: 'Mar'};
var $author$project$SmartTime$Human$Calendar$Month$May = {$: 'May'};
var $author$project$SmartTime$Human$Calendar$Month$Nov = {$: 'Nov'};
var $author$project$SmartTime$Human$Calendar$Month$Oct = {$: 'Oct'};
var $author$project$SmartTime$Human$Calendar$Month$Sep = {$: 'Sep'};
var $author$project$SmartTime$Human$Moment$importElmMonth = function (elmMonth) {
	switch (elmMonth.$) {
		case 'Jan':
			return $author$project$SmartTime$Human$Calendar$Month$Jan;
		case 'Feb':
			return $author$project$SmartTime$Human$Calendar$Month$Feb;
		case 'Mar':
			return $author$project$SmartTime$Human$Calendar$Month$Mar;
		case 'Apr':
			return $author$project$SmartTime$Human$Calendar$Month$Apr;
		case 'May':
			return $author$project$SmartTime$Human$Calendar$Month$May;
		case 'Jun':
			return $author$project$SmartTime$Human$Calendar$Month$Jun;
		case 'Jul':
			return $author$project$SmartTime$Human$Calendar$Month$Jul;
		case 'Aug':
			return $author$project$SmartTime$Human$Calendar$Month$Aug;
		case 'Sep':
			return $author$project$SmartTime$Human$Calendar$Month$Sep;
		case 'Oct':
			return $author$project$SmartTime$Human$Calendar$Month$Oct;
		case 'Nov':
			return $author$project$SmartTime$Human$Calendar$Month$Nov;
		default:
			return $author$project$SmartTime$Human$Calendar$Month$Dec;
	}
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $author$project$SmartTime$Moment$toSmartInt = function (_v0) {
	var dur = _v0.a;
	return $author$project$SmartTime$Duration$inMs(dur);
};
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $author$project$SmartTime$Duration$fromMinutes = function (_float) {
	return $author$project$SmartTime$Duration$Duration(
		$elm$core$Basics$round(_float * $author$project$SmartTime$Duration$minuteLength));
};
var $author$project$SmartTime$Human$Moment$utc = {
	defaultOffset: $author$project$SmartTime$Duration$fromMinutes(0),
	history: _List_Nil,
	name: 'Universal'
};
var $author$project$SmartTime$Human$Moment$deduceZoneOffset = F2(
	function (zone, elmTime) {
		var zonedTime = A4(
			$author$project$SmartTime$Human$Clock$clock,
			A2($elm$time$Time$toHour, zone, elmTime),
			A2($elm$time$Time$toMinute, zone, elmTime),
			A2($elm$time$Time$toSecond, zone, elmTime),
			A2($elm$time$Time$toMillis, zone, elmTime));
		var zonedDate = $author$project$SmartTime$Human$Calendar$fromPartsForced(
			{
				day: $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(
					A2($elm$time$Time$toDay, zone, elmTime)),
				month: $author$project$SmartTime$Human$Moment$importElmMonth(
					A2($elm$time$Time$toMonth, zone, elmTime)),
				year: $author$project$SmartTime$Human$Calendar$Year$Year(
					A2($elm$time$Time$toYear, zone, elmTime))
			});
		var utcTime = $author$project$SmartTime$Moment$fromElmTime(elmTime);
		var combinedMoment = A3($author$project$SmartTime$Human$Moment$fromDateAndTime, $author$project$SmartTime$Human$Moment$utc, zonedDate, zonedTime);
		var localTime = combinedMoment;
		var offset = $author$project$SmartTime$Moment$toSmartInt(localTime) - $author$project$SmartTime$Moment$toSmartInt(utcTime);
		return $author$project$SmartTime$Duration$fromMs(offset);
	});
var $author$project$SmartTime$Human$Moment$makeZone = F3(
	function (elmZoneName, elmZone, now) {
		var deducedOffset = A2($author$project$SmartTime$Human$Moment$deduceZoneOffset, elmZone, now);
		if (elmZoneName.$ === 'Name') {
			var zoneName = elmZoneName.a;
			return {defaultOffset: deducedOffset, history: _List_Nil, name: zoneName};
		} else {
			var offsetMinutes = elmZoneName.a;
			return {
				defaultOffset: $author$project$SmartTime$Duration$fromMinutes(offsetMinutes),
				history: _List_Nil,
				name: 'Unsupported'
			};
		}
	});
var $elm$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return A2(
							$elm$core$Task$andThen,
							function (c) {
								return $elm$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $author$project$SmartTime$Human$Moment$localZone = A4($elm$core$Task$map3, $author$project$SmartTime$Human$Moment$makeZone, $elm$time$Time$getZoneName, $elm$time$Time$here, $elm$time$Time$now);
var $author$project$SmartTime$Moment$now = A2($elm$core$Task$map, $author$project$SmartTime$Moment$fromElmTime, $elm$time$Time$now);
var $author$project$Replicated$Framework$initWrapper = F2(
	function (userInit, wrappedFlags) {
		var _v0 = function () {
			var _v1 = wrappedFlags.storedRonMaybe;
			if (_v1.$ === 'Just') {
				var foundRon = _v1.a;
				var _v2 = A2($elm$core$String$split, '❃', foundRon);
				if (!_v2.b) {
					return {loadAfter: _List_Nil, startWarnings: _List_Nil, storedNodeMaybe: $elm$core$Maybe$Nothing};
				} else {
					var firstFrame = _v2.a;
					var moreFrames = _v2.b;
					var _v3 = A2(
						$author$project$Replicated$Node$Node$initFromSaved,
						{sameSession: false, storedNodeID: 'myNode'},
						firstFrame);
					if (_v3.$ === 'Ok') {
						var node = _v3.a.node;
						var warnings = _v3.a.warnings;
						return {
							loadAfter: moreFrames,
							startWarnings: warnings,
							storedNodeMaybe: $elm$core$Maybe$Just(node)
						};
					} else {
						var initError = _v3.a;
						return A2(
							$author$project$Log$crashInDev,
							'TODO pass initError as warning: ' + ($author$project$Log$dump(initError) + ('\n InitError was from ron:\n' + firstFrame)),
							{loadAfter: moreFrames, startWarnings: _List_Nil, storedNodeMaybe: $elm$core$Maybe$Nothing});
					}
				}
			} else {
				return {loadAfter: _List_Nil, startWarnings: _List_Nil, storedNodeMaybe: $elm$core$Maybe$Nothing};
			}
		}();
		var storedNodeMaybe = _v0.storedNodeMaybe;
		var startWarnings = _v0.startWarnings;
		var loadAfter = _v0.loadAfter;
		var userInitNext = A2(
			$elm$core$Task$perform,
			$elm$core$Basics$identity,
			A3(
				$elm$core$Task$map2,
				$author$project$Replicated$Framework$FrameworkInit(loadAfter),
				$author$project$SmartTime$Human$Moment$localZone,
				$author$project$SmartTime$Moment$now));
		return _Utils_Tuple2(
			$author$project$Replicated$Framework$PreInit(
				{flags: wrappedFlags, restoredNode: storedNodeMaybe, userInit: userInit, warnings: _List_Nil}),
			userInitNext);
	});
var $author$project$Replicated$Framework$LoadMoreData = function (a) {
	return {$: 'LoadMoreData', a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Replicated$Framework$subscriptionsWrapper = F3(
	function (portIncomingChanges, userSubs, model) {
		if (model.$ === 'UserRunning') {
			var replicator = model.a;
			return $elm$core$Platform$Sub$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Platform$Sub$map,
						function (userMsg) {
							return $author$project$Replicated$Framework$Tick(userMsg);
						},
						userSubs(replicator)),
						portIncomingChanges(
						function (allFrames) {
							return $author$project$Replicated$Framework$LoadMoreData(
								A2($elm$core$String$split, '❃', allFrames));
						})
					]));
		} else {
			return $elm$core$Platform$Sub$none;
		}
	});
var $author$project$Replicated$Framework$FrameworkReady = function (a) {
	return {$: 'FrameworkReady', a: a};
};
var $author$project$Replicated$Framework$U = F2(
	function (a, b) {
		return {$: 'U', a: a, b: b};
	});
var $author$project$Replicated$Framework$UserInit = {$: 'UserInit'};
var $author$project$Replicated$Framework$UserRunning = function (a) {
	return {$: 'UserRunning', a: a};
};
var $rtfeldman$console_print$Console$bold = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[1m', str, '\u001B[22m']));
};
var $author$project$Replicated$Change$existingIDToString = function (_v0) {
	var reducer = _v0.reducer;
	var object = _v0.object;
	return _Utils_ap(
		reducer,
		$author$project$Replicated$Op$OpID$toString(object));
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $mgold$elm_nonempty_list$List$Nonempty$Nonempty = F2(
	function (a, b) {
		return {$: 'Nonempty', a: a, b: b};
	});
var $mgold$elm_nonempty_list$List$Nonempty$map = F2(
	function (f, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			f(x),
			A2($elm$core$List$map, f, xs));
	});
var $author$project$Replicated$Change$Location$AncestryBackwards = function (a) {
	return {$: 'AncestryBackwards', a: a};
};
var $author$project$Replicated$Change$Location$NestSingle = function (a) {
	return {$: 'NestSingle', a: a};
};
var $author$project$Replicated$Change$Location$nestSingle = F2(
	function (_v0, layerName) {
		var backwardsLayerList = _v0.a;
		return $author$project$Replicated$Change$Location$AncestryBackwards(
			A2(
				$elm$core$List$cons,
				$author$project$Replicated$Change$Location$NestSingle(layerName),
				backwardsLayerList));
	});
var $author$project$Replicated$Change$Location$NestMultiple = F2(
	function (a, b) {
		return {$: 'NestMultiple', a: a, b: b};
	});
var $author$project$Replicated$Change$Location$wrap = F3(
	function (_v0, _v1, middleItem) {
		var backwardsLayerListOld = _v0.a;
		var backwardsLayerListNew = _v1.a;
		if (backwardsLayerListNew.b && (backwardsLayerListNew.a.$ === 'NestMultiple')) {
			var _v3 = backwardsLayerListNew.a;
			var childName = _v3.a;
			var childIndex = _v3.b;
			var restOfNewLocationWrapper = backwardsLayerListNew.b;
			return $author$project$Replicated$Change$Location$AncestryBackwards(
				_Utils_ap(
					A2(
						$elm$core$List$cons,
						A2($author$project$Replicated$Change$Location$NestMultiple, childName + ('(' + (middleItem + ')')), childIndex),
						restOfNewLocationWrapper),
					backwardsLayerListOld));
		} else {
			return $author$project$Replicated$Change$Location$AncestryBackwards(
				_Utils_ap(
					backwardsLayerListNew,
					A2(
						$elm$core$List$cons,
						$author$project$Replicated$Change$Location$NestSingle(middleItem),
						backwardsLayerListOld)));
		}
	});
var $author$project$Replicated$Change$pendingObjectGlobalLocation = function (_v0) {
	var reducer = _v0.reducer;
	var myLocation = _v0.myLocation;
	var parentLocation = _v0.parentLocation;
	if (parentLocation.$ === 'Nothing') {
		return A2($author$project$Replicated$Change$Location$nestSingle, myLocation, reducer);
	} else {
		var foundParentLoc = parentLocation.a;
		return A3($author$project$Replicated$Change$Location$wrap, foundParentLoc, myLocation, reducer);
	}
};
var $author$project$Replicated$Change$Location$layerToString = function (layer) {
	if (layer.$ === 'NestSingle') {
		var layerName = layer.a;
		return layerName;
	} else {
		var layerName = layer.a;
		var layerIndex = layer.b;
		return layerName + ('#' + $elm$core$String$fromInt(layerIndex));
	}
};
var $author$project$Replicated$Change$Location$toString = function (_v0) {
	var backwardsLayers = _v0.a;
	var forwardsLayers = $elm$core$List$reverse(backwardsLayers);
	var cleanedList = function () {
		if (((forwardsLayers.b && (forwardsLayers.a.$ === 'NestSingle')) && forwardsLayers.b.b) && (forwardsLayers.b.a.$ === 'NestSingle')) {
			var rootLayer = forwardsLayers.a.a;
			var _v2 = forwardsLayers.b;
			var secondLayer = _v2.a.a;
			var otherLayers = _v2.b;
			return A2(
				$elm$core$List$cons,
				$author$project$Replicated$Change$Location$NestSingle(rootLayer + ('(' + (secondLayer + ')'))),
				otherLayers);
		} else {
			return forwardsLayers;
		}
	}();
	var finalListString = A2(
		$elm$core$String$join,
		' ‣ ',
		A2($elm$core$List$map, $author$project$Replicated$Change$Location$layerToString, cleanedList));
	return '〖' + (finalListString + '〗');
};
var $author$project$Replicated$Change$pendingIDToString = function (pendingID) {
	return $author$project$Replicated$Change$Location$toString(
		$author$project$Replicated$Change$pendingObjectGlobalLocation(pendingID));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Replicated$Change$primitiveAtomToString = function (primitiveAtom) {
	switch (primitiveAtom.$) {
		case 'NakedStringAtom':
			var ns = primitiveAtom.a;
			return ns;
		case 'StringAtom':
			var s = primitiveAtom.a;
			return s;
		case 'IntegerAtom':
			var i = primitiveAtom.a;
			return $elm$core$String$fromInt(i);
		default:
			var f = primitiveAtom.a;
			return $elm$core$String$fromFloat(f);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $turboMaCk$any_dict$Dict$Any$toList = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$values(dict);
};
var $mgold$elm_nonempty_list$List$Nonempty$toList = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	return A2($elm$core$List$cons, x, xs);
};
var $rtfeldman$console_print$Console$underline = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[4m', str, '\u001B[24m']));
};
var $author$project$Replicated$Change$changeSetDebug = F2(
	function (indent, _v0) {
		var changeSetToDebug = _v0.a;
		var sayComplexAtom = function (complexAtom) {
			switch (complexAtom.$) {
				case 'FromPrimitiveAtom':
					var primitiveAtom = complexAtom.a;
					return $author$project$Replicated$Change$primitiveAtomToString(primitiveAtom);
				case 'PendingObjectReferenceAtom':
					var reducer = complexAtom.a.reducer;
					return '<pending ' + (reducer + ' ref>');
				case 'ExistingObjectReferenceAtom':
					var objectID = complexAtom.a;
					return '<' + ($rtfeldman$console_print$Console$underline(
						$author$project$Replicated$Op$OpID$toString(objectID)) + '>');
				case 'QuoteNestedObject':
					var toReference = complexAtom.a.toReference;
					var changeSet = complexAtom.a.changeSet;
					var skippable = complexAtom.a.skippable;
					var saySkippable = skippable ? 'a skippable' : 'an unskippable';
					var sayNestedChangeSet = '\n' + A2($author$project$Replicated$Change$changeSetDebug, indent + 2, changeSet);
					var sayInstaller = function (installer) {
						return _Utils_eq(installer, _List_Nil) ? 'without parent installer' : ('with ' + ($elm$core$String$fromInt(
							$elm$core$List$length(installer)) + ' parent installers'));
					};
					if (toReference.$ === 'ExistingObjectPointer') {
						var reducer = toReference.a.reducer;
						var object = toReference.a.object;
						return '{' + (saySkippable + (' nested existing?! ' + (reducer + (': ' + ($author$project$Replicated$Op$OpID$toString(object) + ('}' + sayNestedChangeSet))))));
					} else {
						var reducer = toReference.a.reducer;
						var installers = toReference.b;
						return '{' + (saySkippable + (' nested pending ' + (reducer + (', ' + (sayInstaller(installers) + ('}' + sayNestedChangeSet))))));
					}
				default:
					var complexPayload = complexAtom.a;
					return 'Nested Atoms: ' + sayComplexPayload(complexPayload);
			}
		};
		var sayComplexPayload = function (complexPayload) {
			return A2(
				$elm$core$String$join,
				' ',
				$mgold$elm_nonempty_list$List$Nonempty$toList(
					A2($mgold$elm_nonempty_list$List$Nonempty$map, sayComplexAtom, complexPayload)));
		};
		var sayObjectChange = function (objectChange) {
			switch (objectChange.$) {
				case 'NewPayload':
					var complexPayload = objectChange.a;
					return sayComplexPayload(complexPayload);
				case 'NewPayloadWithRef':
					var payload = objectChange.a.payload;
					return sayComplexPayload(payload);
				default:
					var opID = objectChange.a;
					return 'Reverting op ' + $author$project$Replicated$Op$OpID$toString(opID);
			}
		};
		var indentHere = A2($elm$core$String$repeat, indent * 4, ' ');
		var sayObjectChangeList = function (objectChangeList) {
			return $elm$core$List$isEmpty(objectChangeList) ? 'none' : ('\n    ' + (indentHere + A2(
				$elm$core$String$join,
				',\n' + (indentHere + '    '),
				A2($elm$core$List$map, sayObjectChange, objectChangeList))));
		};
		var sayExistingObject = function (_v2) {
			var existingID = _v2.a;
			var objectChangeList = _v2.b;
			return $rtfeldman$console_print$Console$bold(
				'Existing ' + $rtfeldman$console_print$Console$underline(
					$author$project$Replicated$Change$existingIDToString(existingID))) + (' changes:[' + (sayObjectChangeList(objectChangeList) + ']'));
		};
		var sayObjectToCreate = function (_v1) {
			var pendingID = _v1.a;
			var objectChangeList = _v1.b;
			return $rtfeldman$console_print$Console$bold(
				'Pending ' + $rtfeldman$console_print$Console$underline(
					$author$project$Replicated$Change$pendingIDToString(pendingID))) + (' changes: [' + (sayObjectChangeList(objectChangeList) + ']'));
		};
		var ifNonemptyConcat = function (list) {
			return $elm$core$List$isEmpty(list) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2($elm$core$String$join, '\n' + indentHere, list));
		};
		var sayExistingObjectChanges = ifNonemptyConcat(
			A2(
				$elm$core$List$map,
				sayExistingObject,
				$turboMaCk$any_dict$Dict$Any$toList(changeSetToDebug.existingObjectChanges)));
		var sayObjectsToCreate = ifNonemptyConcat(
			A2(
				$elm$core$List$map,
				sayObjectToCreate,
				$turboMaCk$any_dict$Dict$Any$toList(changeSetToDebug.objectsToCreate)));
		var delayedCount = $elm$core$String$fromInt(
			$elm$core$List$length(changeSetToDebug.delayed));
		var allOuts = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[sayObjectsToCreate, sayExistingObjectChanges]));
		return _Utils_ap(
			indentHere,
			_Utils_ap(
				'ChangeSet with ' + (delayedCount + (' delayed:' + ('\n' + indentHere))),
				A2($elm$core$String$join, '\n' + indentHere, allOuts)));
	});
var $author$project$Replicated$Op$Op$CompressedOps = function (a) {
	return {$: 'CompressedOps', a: a};
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$Replicated$Op$OpID$toRonPointerString = function (_v0) {
	var string = _v0.a;
	return '>' + string;
};
var $author$project$Replicated$Op$Op$atomToRonString = function (atom) {
	switch (atom.$) {
		case 'NakedStringAtom':
			var string = atom.a;
			return string;
		case 'StringAtom':
			var string = atom.a;
			var ronSafeString = A3($elm$core$String$replace, '\'', '\\\'', string);
			return '\'' + (ronSafeString + '\'');
		case 'OtherUUIDAtom':
			var string = atom.a;
			return string;
		case 'IDPointerAtom':
			var opID = atom.a;
			return $author$project$Replicated$Op$OpID$toRonPointerString(opID);
		case 'IntegerAtom':
			var _int = atom.a;
			return $elm$core$String$fromInt(_int);
		default:
			var _float = atom.a;
			return $elm$core$String$fromFloat(_float);
	}
};
var $author$project$Replicated$Op$OpID$isIncremental = F2(
	function (id1, id2) {
		return _Utils_eq(
			$author$project$Replicated$Op$OpID$toStamp(id2).clock,
			$author$project$Replicated$Op$OpID$toStamp(id1).clock + 1);
	});
var $author$project$Replicated$Op$Op$referenceToString = function (givenRef) {
	if (givenRef.$ === 'OpReference') {
		var opID = givenRef.a;
		return $author$project$Replicated$Op$OpID$toString(opID);
	} else {
		var reducerID = givenRef.a;
		return reducerID;
	}
};
var $author$project$Replicated$Op$Op$closedOpToString = F2(
	function (format, _v0) {
		var op = _v0.a;
		var ref = ':' + $author$project$Replicated$Op$Op$referenceToString(op.reference);
		var reducerID = '*' + op.reducerID;
		var opID = '@' + $author$project$Replicated$Op$OpID$toString(op.operationID);
		var objectID = '#' + $author$project$Replicated$Op$OpID$toString(op.objectID);
		var encodePayloadAtom = function (atom) {
			return A2($elm$json$Json$Encode$encode, 0, atom);
		};
		var emptyAtom = ' ';
		var inclusionList = function () {
			switch (format.$) {
				case 'ClosedOps':
					return _List_fromArray(
						[reducerID, objectID, opID, ref]);
				case 'OpenOps':
					return _List_fromArray(
						[opID, ref]);
				default:
					if (format.a.$ === 'Nothing') {
						var _v2 = format.a;
						return _List_fromArray(
							[opID, ref]);
					} else {
						var previousOp = format.a.a.a;
						var _v3 = _Utils_Tuple2(
							A2($author$project$Replicated$Op$OpID$isIncremental, previousOp.operationID, op.operationID) && (!$author$project$Replicated$Op$OpID$isReversion(op.operationID)),
							_Utils_eq(
								op.reference,
								$author$project$Replicated$Op$Op$OpReference(previousOp.operationID)));
						if (_v3.a) {
							if (_v3.b) {
								return _List_fromArray(
									[emptyAtom, emptyAtom]);
							} else {
								return _List_fromArray(
									[emptyAtom, ref]);
							}
						} else {
							if (_v3.b) {
								return _List_fromArray(
									[opID, emptyAtom]);
							} else {
								return _List_fromArray(
									[opID, emptyAtom]);
							}
						}
					}
			}
		}();
		return A2(
			$elm$core$String$join,
			'\t',
			_Utils_ap(
				inclusionList,
				A2($elm$core$List$map, $author$project$Replicated$Op$Op$atomToRonString, op.payload)));
	});
var $elm_community$list_extra$List$Extra$mapAccuml = F3(
	function (f, acc0, list) {
		var _v0 = A3(
			$elm$core$List$foldl,
			F2(
				function (x, _v1) {
					var acc1 = _v1.a;
					var ys = _v1.b;
					var _v2 = A2(f, acc1, x);
					var acc2 = _v2.a;
					var y = _v2.b;
					return _Utils_Tuple2(
						acc2,
						A2($elm$core$List$cons, y, ys));
				}),
			_Utils_Tuple2(acc0, _List_Nil),
			list);
		var accFinal = _v0.a;
		var generatedList = _v0.b;
		return _Utils_Tuple2(
			accFinal,
			$elm$core$List$reverse(generatedList));
	});
var $author$project$Replicated$Op$Op$closedChunksToFrameText = function (chunkList) {
	var perOp = F2(
		function (prevOpMaybe, thisOp) {
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(thisOp),
				A2(
					$author$project$Replicated$Op$Op$closedOpToString,
					$author$project$Replicated$Op$Op$CompressedOps(prevOpMaybe),
					thisOp));
		});
	var perChunk = function (opsInChunk) {
		if (!opsInChunk.b) {
			return '';
		} else {
			return function (s) {
				return s + ' ;\n\n';
			}(
				A2(
					$elm$core$String$join,
					' ,\n',
					A3($elm_community$list_extra$List$Extra$mapAccuml, perOp, $elm$core$Maybe$Nothing, opsInChunk).b));
		}
	};
	if (!chunkList.b) {
		return '';
	} else {
		var chunks = chunkList;
		return function (s) {
			return s + '.❃\n';
		}(
			$elm$core$String$concat(
				A2($elm$core$List$map, perChunk, chunks)));
	}
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $author$project$Replicated$Change$ChangeSet = function (a) {
	return {$: 'ChangeSet', a: a};
};
var $author$project$Replicated$Change$emptyOpsToRepeat = $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives);
var $author$project$Replicated$Change$equalPointers = F2(
	function (pointer1, pointer2) {
		var _v0 = _Utils_Tuple2(pointer1, pointer2);
		_v0$2:
		while (true) {
			if (_v0.a.$ === 'ExistingObjectPointer') {
				if (_v0.b.$ === 'ExistingObjectPointer') {
					var objectID1 = _v0.a.a;
					var objectID2 = _v0.b.a;
					return _Utils_eq(objectID1, objectID2);
				} else {
					break _v0$2;
				}
			} else {
				if (_v0.b.$ === 'PlaceholderPointer') {
					var _v1 = _v0.a;
					var pendingID1 = _v1.a;
					var _v2 = _v0.b;
					var pendingID2 = _v2.a;
					return _Utils_eq(pendingID1, pendingID2);
				} else {
					break _v0$2;
				}
			}
		}
		return false;
	});
var $author$project$Replicated$Change$existingIDToComparable = function (_v0) {
	var reducer = _v0.reducer;
	var object = _v0.object;
	return _Utils_Tuple2(
		reducer,
		$author$project$Replicated$Op$OpID$toString(object));
};
var $elm_community$list_extra$List$Extra$groupWhile = F2(
	function (isSameGroup, items) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					if (!acc.b) {
						return _List_fromArray(
							[
								_Utils_Tuple2(x, _List_Nil)
							]);
					} else {
						var _v1 = acc.a;
						var y = _v1.a;
						var restOfGroup = _v1.b;
						var groups = acc.b;
						return A2(isSameGroup, x, y) ? A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								x,
								A2($elm$core$List$cons, y, restOfGroup)),
							groups) : A2(
							$elm$core$List$cons,
							_Utils_Tuple2(x, _List_Nil),
							acc);
					}
				}),
			_List_Nil,
			items);
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Replicated$Change$Location$toComparable = function (_v0) {
	var backwardsLayers = _v0.a;
	return A2(
		$elm$core$List$map,
		$author$project$Replicated$Change$Location$layerToString,
		$elm$core$List$reverse(backwardsLayers));
};
var $author$project$Replicated$Change$pendingIDToComparable = function (pendingID) {
	return $author$project$Replicated$Change$Location$toComparable(
		$author$project$Replicated$Change$pendingObjectGlobalLocation(pendingID));
};
var $turboMaCk$any_dict$Dict$Any$singleton = F3(
	function (k, v, f) {
		return A3(
			$turboMaCk$any_dict$Dict$Any$insert,
			k,
			v,
			$turboMaCk$any_dict$Dict$Any$empty(f));
	});
var $author$project$Replicated$Change$delayedChangesToSets = function (delayed) {
	var uniqueDelayedChanges = A3(
		$elm$core$List$foldl,
		F2(
			function (a, uniques) {
				return A2($elm$core$List$member, a, uniques) ? uniques : _Utils_ap(
					uniques,
					_List_fromArray(
						[a]));
			}),
		_List_Nil,
		delayed);
	var groupedByPointer = A2(
		$elm_community$list_extra$List$Extra$groupWhile,
		F2(
			function (_v2, _v3) {
				var p1 = _v2.a;
				var p2 = _v3.a;
				return A2($author$project$Replicated$Change$equalPointers, p1, p2);
			}),
		uniqueDelayedChanges);
	var delayedGroupToChangeSet = function (_v1) {
		var head = _v1.a;
		var target = head.a;
		var tail = _v1.b;
		var givenObjectChanges = A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2($elm$core$List$cons, head, tail));
		if (target.$ === 'ExistingObjectPointer') {
			var existingID = target.a;
			return $author$project$Replicated$Change$ChangeSet(
				{
					delayed: _List_Nil,
					existingObjectChanges: A3($turboMaCk$any_dict$Dict$Any$singleton, existingID, givenObjectChanges, $author$project$Replicated$Change$existingIDToComparable),
					objectsToCreate: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$pendingIDToComparable),
					opsToRepeat: $author$project$Replicated$Change$emptyOpsToRepeat
				});
		} else {
			var pendingID = target.a;
			return $author$project$Replicated$Change$ChangeSet(
				{
					delayed: _List_Nil,
					existingObjectChanges: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$existingIDToComparable),
					objectsToCreate: A3($turboMaCk$any_dict$Dict$Any$singleton, pendingID, givenObjectChanges, $author$project$Replicated$Change$pendingIDToComparable),
					opsToRepeat: $author$project$Replicated$Change$emptyOpsToRepeat
				});
		}
	};
	return A2($elm$core$List$map, delayedGroupToChangeSet, groupedByPointer);
};
var $author$project$Replicated$Op$OpID$NewOpCounter = function (a) {
	return {$: 'NewOpCounter', a: a};
};
var $author$project$Replicated$Op$OpID$firstCounterOfFrame = function (time) {
	return $author$project$Replicated$Op$OpID$NewOpCounter(
		$author$project$SmartTime$Moment$toSmartInt(time));
};
var $author$project$Replicated$Op$OpID$highestCounter = F2(
	function (_v0, _v1) {
		var c1 = _v0.a;
		var c2 = _v1.a;
		return $author$project$Replicated$Op$OpID$NewOpCounter(
			A2($elm$core$Basics$max, c1, c2));
	});
var $author$project$Replicated$Op$OpID$importCounter = function (_int) {
	return $author$project$Replicated$Op$OpID$NewOpCounter(_int);
};
var $rtfeldman$console_print$Console$bgRed = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[41m', str, '\u001B[49m']));
};
var $rtfeldman$console_print$Console$green = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[32m', str, '\u001B[39m']));
};
var $author$project$Log$lengthWithBad = F2(
	function (bad, list) {
		var foundLength = $elm$core$List$length(list);
		var output = $elm$core$String$fromInt(foundLength);
		return _Utils_eq(
			$elm$core$List$length(list),
			bad) ? $rtfeldman$console_print$Console$bgRed(output) : $rtfeldman$console_print$Console$green(output);
	});
var $author$project$Log$Logged = {$: 'Logged'};
var $author$project$Log$logMessageOnly = F2(
	function (msg, thing) {
		var _v0 = $author$project$Log$runningEnvironment;
		if (_v0.$ === 'Production') {
			return thing;
		} else {
			var logger = _v0.a;
			var forceLogEvenWhenNotEvaluated = F3(
				function (logger2, msg2, thing2) {
					return _Utils_eq(
						A2(logger2, msg2, $author$project$Log$Logged),
						$author$project$Log$Logged) ? thing2 : thing2;
				});
			return A3(forceLogEvenWhenNotEvaluated, logger, msg, thing);
		}
	});
var $author$project$Replicated$Op$Op$ClosedOps = {$: 'ClosedOps'};
var $author$project$Replicated$Change$ExistingObjectPointer = function (a) {
	return {$: 'ExistingObjectPointer', a: a};
};
var $author$project$Replicated$Change$PlaceholderPointer = F2(
	function (a, b) {
		return {$: 'PlaceholderPointer', a: a, b: b};
	});
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$Replicated$Op$Op$create = F5(
	function (givenReducer, givenObject, opID, givenReference, givenPayload) {
		var finalReference = _Utils_eq(
			givenReference,
			$author$project$Replicated$Op$Op$OpReference(opID)) ? A2($elm$core$Debug$log, 'giving op reference to its own ID!!!!', givenReference) : givenReference;
		return $author$project$Replicated$Op$Op$Op(
			{objectID: givenObject, operationID: opID, payload: givenPayload, reducerID: givenReducer, reference: finalReference});
	});
var $author$project$Replicated$Op$OpID$generate = F3(
	function (_v0, origin, reversion) {
		var counter = _v0.a;
		return _Utils_Tuple2(
			$author$project$Replicated$Op$OpID$fromStamp(
				{clock: counter, origin: origin, reversion: reversion}),
			$author$project$Replicated$Op$OpID$NewOpCounter(counter + 1));
	});
var $author$project$Replicated$Op$Op$initObject = F2(
	function (givenReducer, opID) {
		return $author$project$Replicated$Op$Op$Op(
			{
				objectID: opID,
				operationID: opID,
				payload: _List_Nil,
				reducerID: givenReducer,
				reference: $author$project$Replicated$Op$Op$ReducerReference(givenReducer)
			});
	});
var $author$project$Replicated$Node$Node$createPendingObject = F4(
	function (node, inCounter, inMapping, pendingID) {
		var _v0 = A2($turboMaCk$any_dict$Dict$Any$get, pendingID, inMapping.assignedIDs);
		if (_v0.$ === 'Just') {
			var assigned = _v0.a;
			return {initOps: _List_Nil, objectID: assigned, postInitCounter: inCounter, postInitMapping: inMapping, reducerID: pendingID.reducer};
		} else {
			var _v1 = A3($author$project$Replicated$Op$OpID$generate, inCounter, node.identity, false);
			var newID = _v1.a;
			var postInitCounter = _v1.b;
			var postInitMapping = _Utils_update(
				inMapping,
				{
					assignedIDs: A3($turboMaCk$any_dict$Dict$Any$insert, pendingID, newID, inMapping.assignedIDs)
				});
			return {
				initOps: _List_fromArray(
					[
						A2($author$project$Replicated$Op$Op$initObject, pendingID.reducer, newID)
					]),
				objectID: newID,
				postInitCounter: postInitCounter,
				postInitMapping: postInitMapping,
				reducerID: pendingID.reducer
			};
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $turboMaCk$any_dict$Dict$Any$foldl = F3(
	function (f, acc, _v0) {
		var dict = _v0.a.dict;
		return A3(
			$elm$core$Dict$foldl,
			F2(
				function (_v1, _v2) {
					var k = _v2.a;
					var v = _v2.b;
					return A2(f, k, v);
				}),
			acc,
			dict);
	});
var $mgold$elm_nonempty_list$List$Nonempty$foldl = F3(
	function (f, b, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A3(
			$elm$core$List$foldl,
			f,
			b,
			A2($elm$core$List$cons, x, xs));
	});
var $turboMaCk$any_dict$Dict$Any$values = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$map($elm$core$Tuple$second),
	$turboMaCk$any_dict$Dict$Any$toList);
var $author$project$Replicated$Node$Node$getLastSeen = F2(
	function (node, objectIDToFind) {
		var correctObject = function (op) {
			return _Utils_eq(
				$author$project$Replicated$Op$Op$object(op),
				objectIDToFind) ? $elm$core$Maybe$Just(
				$author$project$Replicated$Op$Op$id(op)) : $elm$core$Maybe$Nothing;
		};
		var findMatchingOps = A2(
			$elm$core$List$filterMap,
			correctObject,
			$turboMaCk$any_dict$Dict$Any$values(node.ops));
		return A2(
			$elm$core$Maybe$withDefault,
			objectIDToFind,
			$elm_community$list_extra$List$Extra$last(findMatchingOps));
	});
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Log$logSeparate = F3(
	function (label, thingToLog, thingToIgnore) {
		var _v0 = $author$project$Log$runningEnvironment;
		if (_v0.$ === 'Production') {
			return thingToIgnore;
		} else {
			var logger = _v0.a;
			var todo = _v0.b;
			return _Utils_Tuple2(
				A2(logger, label, thingToLog),
				thingToIgnore).b;
		}
	});
var $author$project$Replicated$Change$primitiveAtomToRonAtom = function (primitiveAtom) {
	switch (primitiveAtom.$) {
		case 'NakedStringAtom':
			var ns = primitiveAtom.a;
			return $author$project$Replicated$Op$Op$NakedStringAtom(ns);
		case 'StringAtom':
			var s = primitiveAtom.a;
			return $author$project$Replicated$Op$Op$StringAtom(s);
		case 'IntegerAtom':
			var i = primitiveAtom.a;
			return $author$project$Replicated$Op$Op$IntegerAtom(i);
		default:
			var f = primitiveAtom.a;
			return $author$project$Replicated$Op$Op$FloatAtom(f);
	}
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$isJust = function (m) {
	if (m.$ === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var $turboMaCk$any_dict$Dict$Any$member = F2(
	function (k, _v0) {
		var dict = _v0.a.dict;
		var toKey = _v0.a.toKey;
		return A2(
			$elm$core$Dict$member,
			toKey(k),
			dict);
	});
var $author$project$Replicated$Change$ExistingObjectReferenceAtom = function (a) {
	return {$: 'ExistingObjectReferenceAtom', a: a};
};
var $author$project$Replicated$Change$NestedAtoms = function (a) {
	return {$: 'NestedAtoms', a: a};
};
var $author$project$Replicated$Change$PendingObjectReferenceAtom = function (a) {
	return {$: 'PendingObjectReferenceAtom', a: a};
};
var $author$project$Replicated$Change$redundantObjectChange = F2(
	function (possiblyRedundantObjectChange, canonicalObjectChange) {
		var convertQuotesToRefs = function (complexAtom) {
			switch (complexAtom.$) {
				case 'NestedAtoms':
					var nestedComplexPayload = complexAtom.a;
					return $author$project$Replicated$Change$NestedAtoms(
						A2($mgold$elm_nonempty_list$List$Nonempty$map, convertQuotesToRefs, nestedComplexPayload));
				case 'QuoteNestedObject':
					var solo = complexAtom.a;
					var _v1 = solo.toReference;
					if (_v1.$ === 'ExistingObjectPointer') {
						var existingID = _v1.a;
						return $author$project$Replicated$Change$ExistingObjectReferenceAtom(existingID.object);
					} else {
						var pendingID = _v1.a;
						return $author$project$Replicated$Change$PendingObjectReferenceAtom(pendingID);
					}
				default:
					var otherAtom = complexAtom;
					return otherAtom;
			}
		};
		var payloadEquivalence = F2(
			function (payload1, payload2) {
				return _Utils_eq(
					payload1,
					A2($mgold$elm_nonempty_list$List$Nonempty$map, convertQuotesToRefs, payload2));
			});
		if (_Utils_eq(possiblyRedundantObjectChange, canonicalObjectChange)) {
			return true;
		} else {
			var _v2 = _Utils_Tuple2(possiblyRedundantObjectChange, canonicalObjectChange);
			_v2$2:
			while (true) {
				switch (_v2.a.$) {
					case 'NewPayload':
						if (_v2.b.$ === 'NewPayload') {
							var payload1 = _v2.a.a;
							var payload2 = _v2.b.a;
							return A2(payloadEquivalence, payload1, payload2);
						} else {
							break _v2$2;
						}
					case 'NewPayloadWithRef':
						if (_v2.b.$ === 'NewPayloadWithRef') {
							var first = _v2.a.a;
							var second = _v2.b.a;
							return A2(payloadEquivalence, first.payload, second.payload);
						} else {
							break _v2$2;
						}
					default:
						break _v2$2;
				}
			}
			return false;
		}
	});
var $author$project$Replicated$Node$Node$processDelayedInMapping = F3(
	function (inPointer, inObjectChanges, inMapping) {
		var canDoNow = function (delayedObjectChange) {
			var objectChangeAsPayload = function () {
				switch (delayedObjectChange.$) {
					case 'NewPayload':
						var complexPayload = delayedObjectChange.a;
						return $mgold$elm_nonempty_list$List$Nonempty$toList(complexPayload);
					case 'NewPayloadWithRef':
						var payload = delayedObjectChange.a.payload;
						return $mgold$elm_nonempty_list$List$Nonempty$toList(payload);
					default:
						return _List_Nil;
				}
			}();
			var checkComplexAtom = function (complexAtom) {
				switch (complexAtom.$) {
					case 'PendingObjectReferenceAtom':
						var pendingID = complexAtom.a;
						return A2($turboMaCk$any_dict$Dict$Any$member, pendingID, inMapping.assignedIDs);
					case 'QuoteNestedObject':
						return A2($author$project$Log$crashInDev, 'ew! there was a QuoteNestedObject in a delayed object change somehow?', false);
					case 'NestedAtoms':
						var complexPayload = complexAtom.a;
						return A2(
							$elm$core$List$all,
							checkComplexAtom,
							$mgold$elm_nonempty_list$List$Nonempty$toList(complexPayload));
					default:
						return true;
				}
			};
			return A2($elm$core$List$all, checkComplexAtom, objectChangeAsPayload);
		};
		var processDelayedChange = F2(
			function (delayedChange, acc) {
				var delayedPointer = delayedChange.a;
				var delayedObjectChange = delayedChange.b;
				if (A2($author$project$Replicated$Change$equalPointers, inPointer, delayedPointer)) {
					var foundSame = A2(
						$elm_community$list_extra$List$Extra$find,
						$author$project$Replicated$Change$redundantObjectChange(delayedObjectChange),
						inObjectChanges);
					return ($elm_community$maybe_extra$Maybe$Extra$isJust(foundSame) || A2($elm$core$List$member, delayedChange, acc.keep)) ? {doNow: acc.doNow, keep: acc.keep} : (canDoNow(delayedObjectChange) ? A3(
						$author$project$Log$logSeparate,
						'Doing a delayed change early, nice!',
						delayedObjectChange,
						{
							doNow: _Utils_ap(
								acc.doNow,
								_List_fromArray(
									[delayedObjectChange])),
							keep: acc.keep
						}) : A3(
						$author$project$Log$logSeparate,
						'Not ready to do this objectChange',
						delayedChange,
						{
							doNow: acc.doNow,
							keep: _Utils_ap(
								acc.keep,
								_List_fromArray(
									[delayedChange]))
						}));
				} else {
					return {
						doNow: acc.doNow,
						keep: _Utils_ap(
							acc.keep,
							_List_fromArray(
								[delayedChange]))
					};
				}
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			processDelayedChange,
			{doNow: _List_Nil, keep: _List_Nil},
			inMapping.delayed);
		var doNow = _v0.doNow;
		var keep = _v0.keep;
		return {
			processedMapping: _Utils_update(
				inMapping,
				{delayed: keep}),
			safeToDoNow: doNow
		};
	});
var $author$project$Replicated$Node$Node$objectChangeChunkToOps = F4(
	function (node, pointer, objectChanges, _v15) {
		var inCounter = _v15.a;
		var inMapping = _v15.b;
		var inChunks = _v15.c;
		var logOps = F2(
			function (prefix, ops) {
				return $elm$core$String$concat(
					A2(
						$elm$core$List$intersperse,
						'\n',
						A2(
							$elm$core$List$map,
							function (op) {
								return prefix + (':\t' + (A2($author$project$Replicated$Op$Op$closedOpToString, $author$project$Replicated$Op$Op$ClosedOps, op) + '\t'));
							},
							ops)));
			});
		var _v16 = A3(
			$elm_community$list_extra$List$Extra$mapAccuml,
			$author$project$Replicated$Node$Node$objectChangeToUnstampedOp(node),
			_Utils_Tuple2(inCounter, inMapping),
			objectChanges);
		var _v17 = _v16.a;
		var postUnstampedOpCounter1a = _v17.a;
		var postUnstampedOpMapping1a = _v17.b;
		var subChanges1aOutput = _v16.b;
		var _v18 = A3($author$project$Replicated$Node$Node$processDelayedInMapping, pointer, objectChanges, postUnstampedOpMapping1a);
		var safeToDoNow = _v18.safeToDoNow;
		var processedMapping = _v18.processedMapping;
		var _v19 = A3(
			$elm_community$list_extra$List$Extra$mapAccuml,
			$author$project$Replicated$Node$Node$objectChangeToUnstampedOp(node),
			_Utils_Tuple2(postUnstampedOpCounter1a, processedMapping),
			safeToDoNow);
		var _v20 = _v19.a;
		var postUnstampedOpCounter1b = _v20.a;
		var postUnstampedOpMapping1b = _v20.b;
		var subChanges1bOutput = _v19.b;
		var allPrereqChunks = _Utils_ap(
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.prerequisiteChunks;
				},
				subChanges1aOutput),
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.prerequisiteChunks;
				},
				subChanges1bOutput));
		var allUnstampedChunkOps = _Utils_ap(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.thisUnstampedOp;
				},
				subChanges1aOutput),
			A2(
				$elm$core$List$map,
				function ($) {
					return $.thisUnstampedOp;
				},
				subChanges1bOutput));
		var _v21 = function () {
			if (pointer.$ === 'ExistingObjectPointer') {
				var reducer = pointer.a.reducer;
				var object = pointer.a.object;
				return {initOps: _List_Nil, objectID: object, postInitCounter: postUnstampedOpCounter1b, postInitMapping: postUnstampedOpMapping1b, reducerID: reducer};
			} else {
				var pendingID = pointer.a;
				return A4($author$project$Replicated$Node$Node$createPendingObject, node, postUnstampedOpCounter1b, postUnstampedOpMapping1b, pendingID);
			}
		}();
		var objectID = _v21.objectID;
		var reducerID = _v21.reducerID;
		var initOps = _v21.initOps;
		var postInitCounter = _v21.postInitCounter;
		var postInitMapping = _v21.postInitMapping;
		var lastOpSeen = A2(
			$elm$core$Maybe$withDefault,
			A2($author$project$Replicated$Node$Node$getLastSeen, node, objectID),
			A2($turboMaCk$any_dict$Dict$Any$get, objectID, postInitMapping.lastSeen));
		var stampChunkOps = F2(
			function (_v26, givenUCO) {
				var stampInCounter = _v26.a;
				var opIDToReference = _v26.b;
				var _v25 = A3($author$project$Replicated$Op$OpID$generate, stampInCounter, node.identity, givenUCO.reversion);
				var newID = _v25.a;
				var stampOutCounter = _v25.b;
				var stampedOp = A5(
					$author$project$Replicated$Op$Op$create,
					reducerID,
					objectID,
					newID,
					$author$project$Replicated$Op$Op$OpReference(
						A2($elm$core$Maybe$withDefault, opIDToReference, givenUCO.reference)),
					givenUCO.payload);
				return _Utils_Tuple2(
					_Utils_Tuple2(stampOutCounter, newID),
					stampedOp);
			});
		var _v23 = A3(
			$elm_community$list_extra$List$Extra$mapAccuml,
			stampChunkOps,
			_Utils_Tuple2(postInitCounter, lastOpSeen),
			allUnstampedChunkOps);
		var _v24 = _v23.a;
		var counterAfterObjectChanges3 = _v24.a;
		var newLastOpSeen = _v24.b;
		var objectChangeOps = _v23.b;
		var finalMapping = _Utils_update(
			postInitMapping,
			{
				lastSeen: A3($turboMaCk$any_dict$Dict$Any$insert, objectID, newLastOpSeen, postInitMapping.lastSeen)
			});
		var allOpsInDependencyOrder = _Utils_ap(
			allPrereqChunks,
			_List_fromArray(
				[
					_Utils_ap(initOps, objectChangeOps)
				]));
		return _Utils_Tuple3(
			counterAfterObjectChanges3,
			finalMapping,
			_Utils_ap(inChunks, allOpsInDependencyOrder));
	});
var $author$project$Replicated$Node$Node$objectChangeToUnstampedOp = F3(
	function (node, _v6, objectChange) {
		var inCounter = _v6.a;
		var inMapping = _v6.b;
		var perPiece = F2(
			function (piece, accumulated) {
				switch (piece.$) {
					case 'FromPrimitiveAtom':
						var primitiveAtom = piece.a;
						return {
							counter: accumulated.counter,
							mapping: accumulated.mapping,
							piecesSoFar: _Utils_ap(
								accumulated.piecesSoFar,
								_List_fromArray(
									[
										$author$project$Replicated$Change$primitiveAtomToRonAtom(primitiveAtom)
									])),
							prerequisiteChunks: accumulated.prerequisiteChunks
						};
					case 'ExistingObjectReferenceAtom':
						var objectID = piece.a;
						return {
							counter: accumulated.counter,
							mapping: accumulated.mapping,
							piecesSoFar: _Utils_ap(
								accumulated.piecesSoFar,
								_List_fromArray(
									[
										$author$project$Replicated$Op$Op$IDPointerAtom(objectID)
									])),
							prerequisiteChunks: accumulated.prerequisiteChunks
						};
					case 'PendingObjectReferenceAtom':
						var pendingID = piece.a;
						var foundNewObjectID = A2($turboMaCk$any_dict$Dict$Any$get, pendingID, accumulated.mapping.assignedIDs);
						var atomInList = function () {
							if (foundNewObjectID.$ === 'Just') {
								var objectID = foundNewObjectID.a;
								return _List_fromArray(
									[
										$author$project$Replicated$Op$Op$IDPointerAtom(objectID)
									]);
							} else {
								return A3(
									$author$project$Log$logSeparate,
									$rtfeldman$console_print$Console$bgRed(
										'Node.objectChangeToUnstampedOp: Unknown PendingObjectReferenceAtom reference to a pending object: ' + ($author$project$Replicated$Change$pendingIDToString(pendingID) + (' when processing the objectChange ' + ($elm$core$Debug$toString(objectChange) + 'with this in the mapping so far')))),
									$turboMaCk$any_dict$Dict$Any$toList(accumulated.mapping.assignedIDs),
									_List_fromArray(
										[
											$author$project$Replicated$Op$Op$StringAtom(
											$author$project$Replicated$Change$pendingIDToString(pendingID))
										]));
							}
						}();
						return {
							counter: accumulated.counter,
							mapping: accumulated.mapping,
							piecesSoFar: _Utils_ap(accumulated.piecesSoFar, atomInList),
							prerequisiteChunks: accumulated.prerequisiteChunks
						};
					case 'QuoteNestedObject':
						var soloObject = piece.a;
						var _v9 = A3(
							$author$project$Replicated$Node$Node$oneChangeSetToOpChunks,
							node,
							_Utils_Tuple2(accumulated.counter, accumulated.mapping),
							soloObject.changeSet);
						var _v10 = _v9.a;
						var postPrereqCounter = _v10.a;
						var outMapping = _v10.b;
						var newPrereqChunks = _v9.b;
						var pointerPayloadAsList = function () {
							var _v11 = soloObject.toReference;
							if (_v11.$ === 'ExistingObjectPointer') {
								var existingID = _v11.a;
								return _List_fromArray(
									[
										$author$project$Replicated$Op$Op$IDPointerAtom(existingID.object)
									]);
							} else {
								var pendingID = _v11.a;
								var nestedInstallers = _v11.b;
								var _v12 = A2($turboMaCk$any_dict$Dict$Any$get, pendingID, outMapping.assignedIDs);
								if (_v12.$ === 'Just') {
									var outputObject = _v12.a;
									return _List_fromArray(
										[
											$author$project$Replicated$Op$Op$IDPointerAtom(outputObject)
										]);
								} else {
									return A2(
										$author$project$Log$crashInDev,
										'QuoteNestedObject not sure what the ObjectID was of this nested object. ' + $author$project$Log$dump(soloObject.changeSet),
										_List_Nil);
								}
							}
						}();
						return {
							counter: postPrereqCounter,
							mapping: outMapping,
							piecesSoFar: _Utils_ap(accumulated.piecesSoFar, pointerPayloadAsList),
							prerequisiteChunks: _Utils_ap(accumulated.prerequisiteChunks, newPrereqChunks)
						};
					default:
						var nestedChangeAtoms = piece.a;
						var outputAtoms = A3(
							$mgold$elm_nonempty_list$List$Nonempty$foldl,
							perPiece,
							{counter: accumulated.counter, mapping: accumulated.mapping, piecesSoFar: _List_Nil, prerequisiteChunks: _List_Nil},
							nestedChangeAtoms);
						var finalNestedPayloadAsString = outputAtoms.piecesSoFar;
						return {
							counter: outputAtoms.counter,
							mapping: outputAtoms.mapping,
							piecesSoFar: _Utils_ap(accumulated.piecesSoFar, finalNestedPayloadAsString),
							prerequisiteChunks: _Utils_ap(accumulated.prerequisiteChunks, outputAtoms.prerequisiteChunks)
						};
				}
			});
		var outputHelper = F2(
			function (pieceList, reference) {
				var _v14 = A3(
					$mgold$elm_nonempty_list$List$Nonempty$foldl,
					perPiece,
					{counter: inCounter, mapping: inMapping, piecesSoFar: _List_Nil, prerequisiteChunks: _List_Nil},
					pieceList);
				var counter = _v14.counter;
				var prerequisiteChunks = _v14.prerequisiteChunks;
				var piecesSoFar = _v14.piecesSoFar;
				var mapping = _v14.mapping;
				return _Utils_Tuple2(
					_Utils_Tuple2(counter, mapping),
					{
						prerequisiteChunks: prerequisiteChunks,
						thisUnstampedOp: {payload: piecesSoFar, reference: reference, reversion: false}
					});
			});
		switch (objectChange.$) {
			case 'NewPayload':
				var pieceList = objectChange.a;
				return A2(outputHelper, pieceList, $elm$core$Maybe$Nothing);
			case 'NewPayloadWithRef':
				var payload = objectChange.a.payload;
				var ref = objectChange.a.ref;
				return A2(
					outputHelper,
					payload,
					$elm$core$Maybe$Just(ref));
			default:
				var opIDToRevert = objectChange.a;
				return _Utils_Tuple2(
					_Utils_Tuple2(inCounter, inMapping),
					{
						prerequisiteChunks: _List_Nil,
						thisUnstampedOp: {
							payload: _List_Nil,
							reference: $elm$core$Maybe$Just(opIDToRevert),
							reversion: true
						}
					});
		}
	});
var $author$project$Replicated$Node$Node$oneChangeSetToOpChunks = F3(
	function (node, _v0, _v1) {
		var inCounter = _v0.a;
		var inMapping = _v0.b;
		var changeSet = _v1.a;
		var singlePendingChunkToOps = F3(
			function (pendingID, objectChanges, _v5) {
				var counter = _v5.a;
				var mapping = _v5.b;
				var chunksSoFar = _v5.c;
				var asPointer = A2($author$project$Replicated$Change$PlaceholderPointer, pendingID, _List_Nil);
				return A4(
					$author$project$Replicated$Node$Node$objectChangeChunkToOps,
					node,
					asPointer,
					objectChanges,
					_Utils_Tuple3(counter, mapping, chunksSoFar));
			});
		var singleExistingChunkToOps = F3(
			function (existingID, objectChanges, _v4) {
				var counter = _v4.a;
				var mapping = _v4.b;
				var chunksSoFar = _v4.c;
				var asPointer = $author$project$Replicated$Change$ExistingObjectPointer(existingID);
				return A4(
					$author$project$Replicated$Node$Node$objectChangeChunkToOps,
					node,
					asPointer,
					objectChanges,
					_Utils_Tuple3(counter, mapping, chunksSoFar));
			});
		var _v2 = A3(
			$turboMaCk$any_dict$Dict$Any$foldl,
			singlePendingChunkToOps,
			_Utils_Tuple3(inCounter, inMapping, _List_Nil),
			changeSet.objectsToCreate);
		var postObjectsCreatedCounter = _v2.a;
		var postObjectsCreatedMapping = _v2.b;
		var objectsCreatedChunks = _v2.c;
		var _v3 = A3(
			$turboMaCk$any_dict$Dict$Any$foldl,
			singleExistingChunkToOps,
			_Utils_Tuple3(postObjectsCreatedCounter, postObjectsCreatedMapping, objectsCreatedChunks),
			changeSet.existingObjectChanges);
		var outCounter = _v3.a;
		var postExistingMapping = _v3.b;
		var generatedChunks = _v3.c;
		var outMapping = _Utils_update(
			postExistingMapping,
			{
				delayed: _Utils_ap(postExistingMapping.delayed, changeSet.delayed)
			});
		return _Utils_Tuple2(
			_Utils_Tuple2(outCounter, outMapping),
			generatedChunks);
	});
var $author$project$Log$proseToString = function (prose) {
	return A2(
		$elm$core$String$join,
		' \n',
		A2(
			$elm$core$List$map,
			$elm$core$String$join(' '),
			prose));
};
var $author$project$Replicated$Node$Node$apply = F4(
	function (timeMaybe, testMode, node, _v0) {
		var changes = _v0.a.changes;
		var description = _v0.a.description;
		var nextUnseenCounter = $author$project$Replicated$Op$OpID$importCounter(node.highestSeenClock + 1);
		var frameStartMapping = {
			assignedIDs: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$pendingIDToComparable),
			delayed: _List_Nil,
			lastSeen: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toString)
		};
		var fallbackCounter = A2(
			$elm$core$Maybe$withDefault,
			nextUnseenCounter,
			A2($elm$core$Maybe$map, $author$project$Replicated$Op$OpID$firstCounterOfFrame, timeMaybe));
		var frameStartCounter = A2($author$project$Replicated$Op$OpID$highestCounter, fallbackCounter, nextUnseenCounter);
		var _v1 = A3(
			$author$project$Replicated$Node$Node$oneChangeSetToOpChunks,
			node,
			_Utils_Tuple2(frameStartCounter, frameStartMapping),
			changes);
		var _v2 = _v1.a;
		var step1OutCounter = _v2.a;
		var step1OutMapping = _v2.b;
		var step1OutChunks = _v1.b;
		var delayedChangeSets = function () {
			var asChangeSetList = $elm$core$List$reverse(
				$author$project$Replicated$Change$delayedChangesToSets(step1OutMapping.delayed));
			return asChangeSetList;
		}();
		var _v3 = A3(
			$elm_community$list_extra$List$Extra$mapAccuml,
			$author$project$Replicated$Node$Node$oneChangeSetToOpChunks(node),
			_Utils_Tuple2(
				step1OutCounter,
				_Utils_update(
					step1OutMapping,
					{delayed: _List_Nil})),
			delayedChangeSets);
		var _v4 = _v3.a;
		var step2OutCounter = _v4.a;
		var step2OutMapping = _v4.b;
		var step2OutChunks = _v3.b;
		var outChunks = _Utils_ap(
			step1OutChunks,
			$elm$core$List$concat(step2OutChunks));
		var allGeneratedOps = $elm$core$List$concat(outChunks);
		var newObjectsCreated = $author$project$Replicated$Node$Node$creationOpsToObjectIDs(allGeneratedOps);
		var updatedNode = A2($author$project$Replicated$Node$Node$updateWithClosedOps, node, allGeneratedOps);
		var finalNode = (_Utils_eq(updatedNode.root, $elm$core$Maybe$Nothing) && testMode) ? _Utils_update(
			updatedNode,
			{
				root: $elm_community$list_extra$List$Extra$last(newObjectsCreated)
			}) : updatedNode;
		var logApplyResults = $author$project$Log$proseToString(
			_List_fromArray(
				[
					_List_fromArray(
					['Node.apply:']),
					_List_fromArray(
					['Main ChangeSet:']),
					_List_fromArray(
					[
						A2($author$project$Replicated$Change$changeSetDebug, 0, changes)
					]),
					_List_fromArray(
					[
						'Delayed ChangeSets (',
						$elm$core$String$fromInt(
						$elm$core$List$length(delayedChangeSets)),
						'):'
					]),
					_List_fromArray(
					[
						A2(
						$elm$core$String$join,
						'\n',
						A2(
							$elm$core$List$map,
							$author$project$Replicated$Change$changeSetDebug(0),
							delayedChangeSets))
					]),
					_List_fromArray(
					[
						'Created',
						A2($author$project$Log$lengthWithBad, 0, newObjectsCreated),
						'new objects:'
					]),
					_List_fromArray(
					[
						A2(
						$elm$core$String$join,
						', ',
						A2($elm$core$List$map, $author$project$Replicated$Op$OpID$toString, newObjectsCreated))
					]),
					_List_fromArray(
					['Output Frame:']),
					_List_fromArray(
					[
						$author$project$Replicated$Op$Op$closedChunksToFrameText(step1OutChunks)
					]),
					_List_fromArray(
					['Delayed Updates:']),
					_List_fromArray(
					[
						$author$project$Replicated$Op$Op$closedChunksToFrameText(
						$elm$core$List$concat(step2OutChunks))
					])
				]));
		return A2(
			$author$project$Log$logMessageOnly,
			logApplyResults,
			{created: newObjectsCreated, outputFrame: outChunks, updatedNode: finalNode});
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $rtfeldman$console_print$Console$colorsInverted = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[7m', str, '\u001B[27m']));
};
var $author$project$Replicated$Codec$FailedToDecodeRoot = function (a) {
	return {$: 'FailedToDecodeRoot', a: a};
};
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $author$project$Replicated$Change$Parent = F2(
	function (a, b) {
		return {$: 'Parent', a: a, b: b};
	});
var $author$project$Replicated$Change$PendingID = F3(
	function (reducer, myLocation, parentLocation) {
		return {myLocation: myLocation, parentLocation: parentLocation, reducer: reducer};
	});
var $author$project$Replicated$Change$Location$none = $author$project$Replicated$Change$Location$AncestryBackwards(_List_Nil);
var $author$project$Replicated$Change$genesisParent = function (whereWeStarted) {
	return A2(
		$author$project$Replicated$Change$Parent,
		A2(
			$author$project$Replicated$Change$PlaceholderPointer,
			A3($author$project$Replicated$Change$PendingID, whereWeStarted + '-root', $author$project$Replicated$Change$Location$none, $elm$core$Maybe$Nothing),
			_List_Nil),
		$elm$core$Maybe$Nothing);
};
var $author$project$Replicated$Codec$getNodeDecoder = function (_v0) {
	var m = _v0.a;
	return m.nodeDecoder;
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $author$project$Replicated$Codec$prepDecoder = function (inputString) {
	var _v0 = A2($elm$core$String$startsWith, '>', inputString);
	if (_v0) {
		return '\"' + (A2(
			$elm$core$String$dropLeft,
			1,
			A2($elm$core$String$dropRight, 1, inputString)) + '\"');
	} else {
		return inputString;
	}
};
var $author$project$Replicated$Codec$decodeFromNode = F2(
	function (rootCodec, node) {
		var rootEncoded = A2(
			$elm$core$Maybe$withDefault,
			'\"[]\"',
			A2(
				$elm$core$Maybe$map,
				function (i) {
					return '[\"' + ($author$project$Replicated$Op$OpID$toString(i) + '\"]');
				},
				node.root));
		var _v0 = A2(
			$elm$json$Json$Decode$decodeString,
			A2(
				$author$project$Replicated$Codec$getNodeDecoder,
				rootCodec,
				{
					cutoff: $elm$core$Maybe$Nothing,
					node: node,
					parent: $author$project$Replicated$Change$genesisParent('dFN'),
					position: $author$project$Replicated$Change$Location$none
				}),
			$author$project$Replicated$Codec$prepDecoder(rootEncoded));
		if (_v0.$ === 'Ok') {
			var value = _v0.a;
			return A2($author$project$Log$logMessageOnly, 'Decoding Node again.', value);
		} else {
			var jdError = _v0.a;
			return $elm$core$Result$Err(
				$author$project$Replicated$Codec$FailedToDecodeRoot(
					$elm$json$Json$Decode$errorToString(jdError)));
		}
	});
var $author$project$Replicated$Change$getContextLocation = function (_v0) {
	var location = _v0.a;
	var parent = _v0.b;
	return location;
};
var $author$project$Replicated$Change$getContextParent = function (_v0) {
	var parent = _v0.b;
	return parent;
};
var $author$project$Replicated$Codec$nonChanger = function (_v0) {
	return _List_Nil;
};
var $author$project$Replicated$Codec$new = F2(
	function (_v0, context) {
		var codecDetails = _v0.a;
		return codecDetails.nodePlaceholder(
			{
				parent: $author$project$Replicated$Change$getContextParent(context),
				position: A2(
					$author$project$Replicated$Change$Location$nestSingle,
					$author$project$Replicated$Change$getContextLocation(context),
					'new'),
				seed: $author$project$Replicated$Codec$nonChanger
			});
	});
var $author$project$Replicated$Change$Context = F2(
	function (a, b) {
		return {$: 'Context', a: a, b: b};
	});
var $author$project$Replicated$Change$startContext = function (reasonForNewContext) {
	return A2(
		$author$project$Replicated$Change$Context,
		$author$project$Replicated$Change$Location$none,
		$author$project$Replicated$Change$genesisParent(reasonForNewContext));
};
var $author$project$Replicated$Codec$forceDecodeFromNode = F2(
	function (rootCodec, node) {
		var rootEncoded = A2(
			$elm$core$Maybe$withDefault,
			'\"[]\"',
			A2(
				$elm$core$Maybe$map,
				function (i) {
					return '[\"' + ($author$project$Replicated$Op$OpID$toString(i) + '\"]');
				},
				node.root));
		var fromScratch = A2(
			$author$project$Replicated$Codec$new,
			rootCodec,
			$author$project$Replicated$Change$startContext('fDFN'));
		var _v0 = A2(
			$elm$json$Json$Decode$decodeString,
			A2(
				$author$project$Replicated$Codec$getNodeDecoder,
				rootCodec,
				{
					cutoff: $elm$core$Maybe$Nothing,
					node: node,
					parent: $author$project$Replicated$Change$genesisParent('fDFN'),
					position: $author$project$Replicated$Change$Location$none
				}),
			$author$project$Replicated$Codec$prepDecoder(rootEncoded));
		if (_v0.$ === 'Err') {
			var jdError = _v0.a;
			return _Utils_Tuple2(
				fromScratch,
				$elm$core$Maybe$Just(
					$author$project$Replicated$Codec$FailedToDecodeRoot(
						A2(
							$elm$core$Debug$log,
							'forceDecodeFromNode: forcing success, but there was an error... ',
							$elm$json$Json$Decode$errorToString(jdError)))));
		} else {
			if (_v0.a.$ === 'Ok') {
				var success = _v0.a.a;
				return _Utils_Tuple2(success, $elm$core$Maybe$Nothing);
			} else {
				var err = _v0.a.a;
				return _Utils_Tuple2(
					fromScratch,
					_Debug_todo(
						'Replicated.Codec',
						{
							start: {line: 373, column: 28},
							end: {line: 373, column: 38}
						})('nested error - come up with nicer presentation'));
			}
		}
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $turboMaCk$any_dict$Dict$Any$isEmpty = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$isEmpty(dict);
};
var $author$project$Replicated$Change$isEmptyChangeSet = function (_v0) {
	var details = _v0.a;
	return $turboMaCk$any_dict$Dict$Any$isEmpty(details.existingObjectChanges) && ($turboMaCk$any_dict$Dict$Any$isEmpty(details.objectsToCreate) && ($turboMaCk$any_dict$Dict$Any$isEmpty(details.opsToRepeat) && $elm$core$List$isEmpty(details.delayed)));
};
var $author$project$Replicated$Change$isEmpty = function (_v0) {
	var changes = _v0.a.changes;
	return $author$project$Replicated$Change$isEmptyChangeSet(changes);
};
var $author$project$Replicated$Change$nonEmptyFrames = function (frames) {
	return A2(
		$elm$core$List$filter,
		A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Replicated$Change$isEmpty),
		frames);
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Replicated$Codec$EncodeThis = function (a) {
	return {$: 'EncodeThis', a: a};
};
var $author$project$Replicated$Codec$defaultEncodeMode = {cloneOldOps: false, generateSnapshot: false, initializeUnusedObjects: false, setDefaultsExplicitly: false};
var $author$project$Replicated$Codec$getSoloNodeEncoder = F2(
	function (_v0, inputs) {
		var m = _v0.a;
		return m.nodeEncoder(inputs);
	});
var $author$project$Replicated$Node$NodeID$generate = function (record) {
	return $author$project$Replicated$Node$NodeID$NodeID(record);
};
var $author$project$Replicated$Node$Node$firstSessionEver = $author$project$Replicated$Node$NodeID$generate(
	{agent: 0, client: 0, device: 0, session: 0});
var $author$project$Replicated$Change$Frame = function (a) {
	return {$: 'Frame', a: a};
};
var $author$project$Replicated$Change$emptyExistingObjectChanges = $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$existingIDToComparable);
var $author$project$Replicated$Change$emptyObjectsToCreate = $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$pendingIDToComparable);
var $author$project$Replicated$Change$emptyChangeSet = $author$project$Replicated$Change$ChangeSet(
	{delayed: _List_Nil, existingObjectChanges: $author$project$Replicated$Change$emptyExistingObjectChanges, objectsToCreate: $author$project$Replicated$Change$emptyObjectsToCreate, opsToRepeat: $author$project$Replicated$Change$emptyOpsToRepeat});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $turboMaCk$any_dict$Dict$Any$union = F2(
	function (_v0, _v1) {
		var inner = _v0.a;
		var dict = _v1.a.dict;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2($elm$core$Dict$union, inner.dict, dict)
				}));
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $turboMaCk$any_dict$Dict$Any$merge = F5(
	function (f, g, h, _v0, _v1) {
		var inner = _v0.a;
		var dict = _v1.a.dict;
		var l = F3(
			function (fc, _v5, _v6) {
				var k = _v6.a;
				var v = _v6.b;
				return A2(fc, k, v);
			});
		return A5(
			$elm$core$Dict$merge,
			l(f),
			F3(
				function (_v2, _v3, _v4) {
					var k = _v3.a;
					var a = _v3.b;
					var b = _v4.b;
					return A3(g, k, a, b);
				}),
			l(h),
			inner.dict,
			dict);
	});
var $author$project$Replicated$Change$unionCombine = F3(
	function (empty, dictA, dictB) {
		return A6(
			$turboMaCk$any_dict$Dict$Any$merge,
			$turboMaCk$any_dict$Dict$Any$insert,
			F3(
				function (key, a, b) {
					return A2(
						$turboMaCk$any_dict$Dict$Any$insert,
						key,
						_Utils_ap(a, b));
				}),
			$turboMaCk$any_dict$Dict$Any$insert,
			dictA,
			dictB,
			empty);
	});
var $author$project$Replicated$Change$mergeChanges = F2(
	function (_v0, _v1) {
		var changeSetLater = _v0.a;
		var changeSetEarlier = _v1.a;
		return $author$project$Replicated$Change$ChangeSet(
			{
				delayed: _Utils_ap(changeSetEarlier.delayed, changeSetLater.delayed),
				existingObjectChanges: A3($author$project$Replicated$Change$unionCombine, $author$project$Replicated$Change$emptyExistingObjectChanges, changeSetEarlier.existingObjectChanges, changeSetLater.existingObjectChanges),
				objectsToCreate: A3($author$project$Replicated$Change$unionCombine, $author$project$Replicated$Change$emptyObjectsToCreate, changeSetEarlier.objectsToCreate, changeSetLater.objectsToCreate),
				opsToRepeat: A2($turboMaCk$any_dict$Dict$Any$union, changeSetLater.opsToRepeat, changeSetEarlier.opsToRepeat)
			});
	});
var $author$project$Replicated$Change$Location$new = F2(
	function (reasonForNew, index) {
		return $author$project$Replicated$Change$Location$AncestryBackwards(
			_List_fromArray(
				[
					A2($author$project$Replicated$Change$Location$NestMultiple, reasonForNew, index)
				]));
	});
var $author$project$Replicated$Change$collapseChangesToChangeSet = F2(
	function (layerName, changes) {
		var supplyIndexToChange = F2(
			function (newIndex, _v0) {
				var toChangeSet = _v0.a;
				return toChangeSet(
					A2($author$project$Replicated$Change$Location$new, layerName, newIndex));
			});
		var listOfChangeSets = A2($elm$core$List$indexedMap, supplyIndexToChange, changes);
		return A3($elm$core$List$foldl, $author$project$Replicated$Change$mergeChanges, $author$project$Replicated$Change$emptyChangeSet, listOfChangeSets);
	});
var $author$project$Replicated$Change$saveChanges = F2(
	function (description, changes) {
		return $author$project$Replicated$Change$Frame(
			{
				changes: A2($author$project$Replicated$Change$collapseChangesToChangeSet, 'save', changes),
				description: description
			});
	});
var $author$project$Replicated$Node$Node$startNewNode = F3(
	function (nowMaybe, testMode, givenStartChanges) {
		var startNode = {
			highestSeenClock: 0,
			identity: $author$project$Replicated$Node$Node$firstSessionEver,
			ops: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives),
			peers: _List_Nil,
			root: $elm$core$Maybe$Nothing
		};
		var startChanges = _List_Nil;
		var firstChangeFrame = A2(
			$author$project$Replicated$Change$saveChanges,
			'Node initialized',
			_Utils_ap(givenStartChanges, startChanges));
		var _v0 = A4($author$project$Replicated$Node$Node$apply, nowMaybe, testMode, startNode, firstChangeFrame);
		var updatedNode = _v0.updatedNode;
		var created = _v0.created;
		var outputFrame = _v0.outputFrame;
		return {newNode: updatedNode, startFrame: outputFrame};
	});
var $author$project$Replicated$Node$Node$testNode = {
	highestSeenClock: 0,
	identity: $author$project$Replicated$Node$Node$firstSessionEver,
	ops: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives),
	peers: _List_Nil,
	root: $elm$core$Maybe$Nothing
};
var $author$project$Replicated$Codec$startNodeFromRoot = F2(
	function (maybeMoment, rootCodec) {
		var startNode = A3($author$project$Replicated$Node$Node$startNewNode, maybeMoment, false, _List_Nil).newNode;
		var rootEncoderOutput = A2(
			$author$project$Replicated$Codec$getSoloNodeEncoder,
			rootCodec,
			{
				mode: _Utils_update(
					$author$project$Replicated$Codec$defaultEncodeMode,
					{setDefaultsExplicitly: true}),
				node: $author$project$Replicated$Node$Node$testNode,
				parent: $author$project$Replicated$Change$genesisParent('eD'),
				position: $author$project$Replicated$Change$Location$none,
				thingToEncode: $author$project$Replicated$Codec$EncodeThis(
					A2(
						$author$project$Replicated$Codec$new,
						rootCodec,
						$author$project$Replicated$Change$startContext('eD')))
			});
		var rootPointer = rootEncoderOutput.nested.toReference;
		if (_Utils_eq(startNode.root, $elm$core$Maybe$Nothing)) {
			if (rootPointer.$ === 'ExistingObjectPointer') {
				var existingID = rootPointer.a;
				return _Utils_Tuple2(
					_Utils_update(
						startNode,
						{
							root: $elm$core$Maybe$Just(existingID.object)
						}),
					_List_Nil);
			} else {
				var pendingID = rootPointer.a;
				var _v1 = A3(
					$author$project$Replicated$Op$OpID$generate,
					$author$project$Replicated$Op$OpID$importCounter(0),
					startNode.identity,
					false);
				var rootOpID = _v1.a;
				var finalCounter = _v1.b;
				var rootInitOp = A2($author$project$Replicated$Op$Op$initObject, pendingID.reducer, rootOpID);
				var nodeWithRoot = A2(
					$author$project$Replicated$Node$Node$updateWithClosedOps,
					startNode,
					_List_fromArray(
						[rootInitOp]));
				return _Utils_Tuple2(
					_Utils_update(
						nodeWithRoot,
						{
							root: $elm$core$Maybe$Just(rootOpID)
						}),
					_List_fromArray(
						[
							_List_fromArray(
							[rootInitOp])
						]));
			}
		} else {
			return _Utils_Tuple2(startNode, _List_Nil);
		}
	});
var $author$project$Replicated$Framework$testMode = true;
var $author$project$Replicated$Framework$toReplicator = function (premodel) {
	if (premodel.$ === 'UserRunning') {
		var replicator = premodel.a;
		return $elm$core$Maybe$Just(replicator);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Replicated$Framework$updateWrapper = F5(
	function (userReplicaCodec, setStorage, userUpdate, wrappedMsg, wrappedModel) {
		switch (wrappedMsg.$) {
			case 'Tick':
				var userMsg = wrappedMsg.a;
				return _Utils_Tuple2(
					wrappedModel,
					A2(
						$elm$core$Task$perform,
						$author$project$Replicated$Framework$U(userMsg),
						$author$project$SmartTime$Moment$now));
			case 'U':
				var userMsg = wrappedMsg.a;
				var newTime = wrappedMsg.b;
				var _v1 = $author$project$Replicated$Framework$toReplicator(wrappedModel);
				if (_v1.$ === 'Nothing') {
					return _Utils_Tuple2(wrappedModel, $elm$core$Platform$Cmd$none);
				} else {
					var oldReplicator = _v1.a;
					var replicator = _Utils_update(
						oldReplicator,
						{now: newTime});
					var _v2 = A2(userUpdate, userMsg, replicator);
					var framesToApply = _v2.a;
					var temp = _v2.b;
					var cmds = _v2.c;
					var _v3 = _Utils_Tuple3(
						$author$project$Replicated$Change$nonEmptyFrames(framesToApply),
						temp,
						cmds);
					if (!_v3.a.b) {
						var newTemp = _v3.b;
						var newCmds = _v3.c;
						return _Utils_Tuple2(
							$author$project$Replicated$Framework$UserRunning(
								_Utils_update(
									replicator,
									{temp: newTemp})),
							A2(
								$elm$core$Platform$Cmd$map,
								function (m) {
									return A2($author$project$Replicated$Framework$U, m, newTime);
								},
								newCmds));
					} else {
						var filledFramesToApply = _v3.a;
						var newTemp = _v3.b;
						var newCmds = _v3.c;
						var modelWithTimeTemp = _Utils_update(
							replicator,
							{temp: newTemp});
						var maybeTime = $author$project$Replicated$Framework$testMode ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(newTime);
						var applyFrame = F2(
							function (givenFrame, _v7) {
								var givenModel = _v7.a;
								var outputsSoFar = _v7.b;
								var _v6 = A4($author$project$Replicated$Node$Node$apply, maybeTime, false, givenModel.node, givenFrame);
								var outputFrame = _v6.outputFrame;
								var updatedNode = _v6.updatedNode;
								return _Utils_Tuple2(
									_Utils_update(
										givenModel,
										{node: updatedNode}),
									_Utils_ap(outputsSoFar, outputFrame));
							});
						var _v4 = A3(
							$elm$core$List$foldl,
							applyFrame,
							_Utils_Tuple2(modelWithTimeTemp, _List_Nil),
							filledFramesToApply);
						var replicatorWithUpdates = _v4.a;
						var finalOutputFrame = _v4.b;
						var _v5 = A2($author$project$Replicated$Codec$decodeFromNode, userReplicaCodec, replicatorWithUpdates.node);
						if (_v5.$ === 'Ok') {
							var updatedUserReplica = _v5.a;
							return _Utils_Tuple2(
								$author$project$Replicated$Framework$UserRunning(
									_Utils_update(
										replicatorWithUpdates,
										{replica: updatedUserReplica})),
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[
											A2(
											$elm$core$Platform$Cmd$map,
											function (m) {
												return A2($author$project$Replicated$Framework$U, m, newTime);
											},
											setStorage(
												$author$project$Replicated$Op$Op$closedChunksToFrameText(finalOutputFrame))),
											A2(
											$elm$core$Platform$Cmd$map,
											function (m) {
												return A2($author$project$Replicated$Framework$U, m, newTime);
											},
											newCmds)
										])));
						} else {
							var problem = _v5.a;
							return _Utils_Tuple2(
								A3(
									$author$project$Log$logSeparate,
									$rtfeldman$console_print$Console$bgRed('Failed to decodeFromNode! Reverting update! Ops:\n') + ($rtfeldman$console_print$Console$colorsInverted(
										$author$project$Replicated$Op$Op$closedChunksToFrameText(finalOutputFrame)) + '\nProblem: '),
									problem,
									wrappedModel),
								A2(
									$elm$core$Platform$Cmd$map,
									function (m) {
										return A2($author$project$Replicated$Framework$U, m, newTime);
									},
									newCmds));
						}
					}
				}
			case 'FrameworkInit':
				var remainingRon = wrappedMsg.a;
				var zone = wrappedMsg.b;
				var now = wrappedMsg.c;
				if (wrappedModel.$ === 'PreInit') {
					var restoredNode = wrappedModel.a.restoredNode;
					var warnings = wrappedModel.a.warnings;
					var flags = wrappedModel.a.flags;
					var userInit = wrappedModel.a.userInit;
					var _v9 = function () {
						if (restoredNode.$ === 'Just') {
							var restoredNodeFound = restoredNode.a;
							return _Utils_Tuple2(
								restoredNodeFound,
								_List_fromArray(
									[
										A2(
										$elm$core$Task$perform,
										function (_v11) {
											return $author$project$Replicated$Framework$LoadMoreData(remainingRon);
										},
										$elm$core$Task$succeed(_Utils_Tuple0))
									]));
						} else {
							var userStartupCmd = A2(
								$elm$core$Task$perform,
								function (_v13) {
									return $author$project$Replicated$Framework$UserInit;
								},
								$elm$core$Task$succeed(_Utils_Tuple0));
							var maybeTime = $author$project$Replicated$Framework$testMode ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(now);
							var _v12 = A2($author$project$Replicated$Codec$startNodeFromRoot, maybeTime, userReplicaCodec);
							var newNode = _v12.a;
							var startChunks = _v12.b;
							var saveNodeCmd = A2(
								$elm$core$Platform$Cmd$map,
								function (m) {
									return A2($author$project$Replicated$Framework$U, m, now);
								},
								setStorage(
									$author$project$Replicated$Op$Op$closedChunksToFrameText(startChunks)));
							return _Utils_Tuple2(
								newNode,
								_List_fromArray(
									[saveNodeCmd, userStartupCmd]));
						}
					}();
					var startNode = _v9.a;
					var startCmds = _v9.b;
					var _v14 = A2($author$project$Replicated$Codec$forceDecodeFromNode, userReplicaCodec, startNode);
					var startuserReplica = _v14.a;
					var userReplicaDecodeWarnings = _v14.b;
					return _Utils_Tuple2(
						$author$project$Replicated$Framework$FrameworkReady(
							{
								loadProgress: _Utils_Tuple2(
									1,
									$elm$core$List$length(remainingRon)),
								node: startNode,
								now: now,
								userFlags: flags.userFlags,
								userInit: userInit,
								userReplica: startuserReplica,
								warnings: warnings,
								zone: zone
							}),
						$elm$core$Platform$Cmd$batch(startCmds));
				} else {
					return _Utils_Tuple2(
						A2($author$project$Log$crashInDev, 'FrameworkInit when model wasn\'t PreInit', wrappedModel),
						$elm$core$Platform$Cmd$none);
				}
			case 'LoadMoreData':
				var remainingRonFrames = wrappedMsg.a;
				var _v15 = _Utils_Tuple2(wrappedModel, remainingRonFrames);
				switch (_v15.a.$) {
					case 'FrameworkReady':
						if (!_v15.b.b) {
							var frameworkReady = _v15.a.a;
							var userReplica = frameworkReady.userReplica;
							var node = frameworkReady.node;
							var _v16 = A2($author$project$Replicated$Codec$forceDecodeFromNode, userReplicaCodec, node);
							var startuserReplica = _v16.a;
							var userReplicaDecodeWarnings = _v16.b;
							return _Utils_Tuple2(
								$author$project$Replicated$Framework$FrameworkReady(
									_Utils_update(
										frameworkReady,
										{userReplica: startuserReplica})),
								A2(
									$elm$core$Task$perform,
									function (_v17) {
										return $author$project$Replicated$Framework$UserInit;
									},
									$elm$core$Task$succeed(_Utils_Tuple0)));
						} else {
							var frameworkReady = _v15.a.a;
							var node = frameworkReady.node;
							var _v18 = _v15.b;
							var nextRonFrame = _v18.a;
							var moreRonFrames = _v18.b;
							var updated = A2(
								$author$project$Replicated$Node$Node$updateWithRon,
								{newObjects: _List_Nil, node: node, warnings: _List_Nil},
								A2($author$project$Log$logMessageOnly, 'Importing RON frame: \n' + nextRonFrame, nextRonFrame));
							var totalFrames = frameworkReady.loadProgress.b;
							return _Utils_Tuple2(
								$author$project$Replicated$Framework$FrameworkReady(
									_Utils_update(
										frameworkReady,
										{
											loadProgress: _Utils_Tuple2(
												totalFrames - $elm$core$List$length(moreRonFrames),
												totalFrames),
											node: updated.node
										})),
								A2(
									$elm$core$Task$perform,
									function (_v19) {
										return $author$project$Replicated$Framework$LoadMoreData(moreRonFrames);
									},
									$elm$core$Task$succeed(_Utils_Tuple0)));
						}
					case 'UserRunning':
						if (!_v15.b.b) {
							var replicator = _v15.a.a;
							var node = replicator.node;
							var _v20 = A2($author$project$Replicated$Codec$forceDecodeFromNode, userReplicaCodec, node);
							var newUserReplica = _v20.a;
							var userReplicaDecodeWarnings = _v20.b;
							return _Utils_Tuple2(
								$author$project$Replicated$Framework$UserRunning(
									_Utils_update(
										replicator,
										{replica: newUserReplica})),
								$elm$core$Platform$Cmd$none);
						} else {
							var replicator = _v15.a.a;
							var node = replicator.node;
							var _v21 = _v15.b;
							var nextRonFrame = _v21.a;
							var moreRonFrames = _v21.b;
							var updated = A2(
								$author$project$Replicated$Node$Node$updateWithRon,
								{newObjects: _List_Nil, node: node, warnings: _List_Nil},
								A2($author$project$Log$logMessageOnly, 'Importing RON frame: \n' + nextRonFrame, nextRonFrame));
							return _Utils_Tuple2(
								$author$project$Replicated$Framework$UserRunning(
									_Utils_update(
										replicator,
										{node: updated.node})),
								A2(
									$elm$core$Task$perform,
									function (_v22) {
										return $author$project$Replicated$Framework$LoadMoreData(moreRonFrames);
									},
									$elm$core$Task$succeed(_Utils_Tuple0)));
						}
					default:
						return _Utils_Tuple2(
							A2($author$project$Log$crashInDev, 'LoadMoreData when model was PreInit', wrappedModel),
							$elm$core$Platform$Cmd$none);
				}
			default:
				if (wrappedModel.$ === 'FrameworkReady') {
					var userInit = wrappedModel.a.userInit;
					var userFlags = wrappedModel.a.userFlags;
					var userReplica = wrappedModel.a.userReplica;
					var node = wrappedModel.a.node;
					var now = wrappedModel.a.now;
					var zone = wrappedModel.a.zone;
					var _v24 = A2(userInit, userFlags, userReplica);
					var userInitFrames = _v24.a;
					var temp = _v24.b;
					var userInitCmds = _v24.c;
					return _Utils_Tuple2(
						$author$project$Replicated$Framework$UserRunning(
							{node: node, now: now, replica: userReplica, temp: temp, zone: zone}),
						A2(
							$elm$core$Platform$Cmd$map,
							function (cmds) {
								return A2($author$project$Replicated$Framework$U, cmds, now);
							},
							userInitCmds));
				} else {
					return _Utils_Tuple2(
						A2($author$project$Log$crashInDev, 'UserInit when model wasn\'t FrameworkReady', wrappedModel),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Set$size = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$size(dict);
};
var $author$project$Replicated$Node$Node$objectCount = function (node) {
	return $elm$core$Set$size(
		$elm$core$Set$fromList(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Replicated$Op$Op$object, $author$project$Replicated$Op$OpID$toSortablePrimitives),
				$turboMaCk$any_dict$Dict$Any$values(node.ops))));
};
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Replicated$Framework$viewWrapperBrowser = F2(
	function (userView, premodel) {
		var objectsImportedString = function (node) {
			return 'Objects imported: ' + $elm$core$String$fromInt(
				$author$project$Replicated$Node$Node$objectCount(node));
		};
		switch (premodel.$) {
			case 'PreInit':
				var restoredNode = premodel.a.restoredNode;
				var warnings = premodel.a.warnings;
				var flags = premodel.a.flags;
				return {
					body: _Utils_ap(
						_List_fromArray(
							[
								$elm$html$Html$text('PreInit Replicator Failure'),
								$elm$html$Html$text(
								A2($elm$core$Maybe$withDefault, '\nNo stored RON:\n', flags.storedRonMaybe)),
								$elm$html$Html$text(
								A2(
									$elm$core$Maybe$withDefault,
									'\nNo ops imported:\n',
									A2($elm$core$Maybe$map, objectsImportedString, restoredNode)))
							]),
						A2($elm$core$List$map, $elm$html$Html$text, warnings)),
					title: 'Crashed.'
				};
			case 'FrameworkReady':
				var node = premodel.a.node;
				var now = premodel.a.now;
				var zone = premodel.a.zone;
				var userReplica = premodel.a.userReplica;
				var warnings = premodel.a.warnings;
				var loadProgress = premodel.a.loadProgress;
				return {
					body: _Utils_ap(
						_List_fromArray(
							[
								$elm$html$Html$text('FrameworkReady Replicator Failure'),
								$elm$html$Html$text(
								'Loaded frame ' + ($elm$core$String$fromInt(loadProgress.a) + (' of ' + $elm$core$String$fromInt(loadProgress.b))))
							]),
						A2($elm$core$List$map, $elm$html$Html$text, warnings)),
					title: 'Crashed.'
				};
			default:
				var replicator = premodel.a;
				var _v1 = userView(replicator);
				var title = _v1.title;
				var body = _v1.body;
				return {
					body: A2(
						$elm$core$List$map,
						$elm$html$Html$map($author$project$Replicated$Framework$Tick),
						body),
					title: title
				};
		}
	});
var $author$project$Replicated$Framework$browserApplication = function (userApp) {
	return $elm$browser$Browser$application(
		{
			init: F3(
				function (userFlags, url, key) {
					return A2(
						$author$project$Replicated$Framework$initWrapper,
						A2(userApp.init, url, key),
						userFlags);
				}),
			onUrlChange: function (url) {
				return $author$project$Replicated$Framework$Tick(
					userApp.onUrlChange(url));
			},
			onUrlRequest: function (req) {
				return $author$project$Replicated$Framework$Tick(
					userApp.onUrlRequest(req));
			},
			subscriptions: A2($author$project$Replicated$Framework$subscriptionsWrapper, userApp.portIncomingChanges, userApp.subscriptions),
			update: A3($author$project$Replicated$Framework$updateWrapper, userApp.replicaCodec, userApp.portSetStorage, userApp.update),
			view: $author$project$Replicated$Framework$viewWrapperBrowser(userApp.view)
		});
};
var $author$project$Profile$Profile = F8(
	function (errors, taskEntries, taskClasses, taskInstances, activities, timeline, todoist, timeBlocks) {
		return {activities: activities, errors: errors, taskClasses: taskClasses, taskEntries: taskEntries, taskInstances: taskInstances, timeBlocks: timeBlocks, timeline: timeline, todoist: todoist};
	});
var $author$project$Activity$Timeline$Timeline = function (a) {
	return {$: 'Timeline', a: a};
};
var $author$project$Activity$Timeline$TimelineSkel = F2(
	function (current, history) {
		return {current: current, history: history};
	});
var $author$project$Activity$Session$Session = function (a) {
	return {$: 'Session', a: a};
};
var $author$project$Activity$Session$SessionSkel = F4(
	function (start, end, activity, action) {
		return {action: action, activity: activity, end: end, start: start};
	});
var $author$project$Replicated$Codec$InitWithParentSeed = function (a) {
	return {$: 'InitWithParentSeed', a: a};
};
var $author$project$Replicated$Codec$PartialRegister = function (a) {
	return {$: 'PartialRegister', a: a};
};
var $author$project$Replicated$Change$becomeDelayedParent = F2(
	function (pointer, childInstaller) {
		return A2(
			$author$project$Replicated$Change$Parent,
			pointer,
			$elm$core$Maybe$Just(childInstaller));
	});
var $author$project$Replicated$Codec$combineIfBothSucceed = F2(
	function (decoderA, decoderB) {
		var _v0 = _Utils_Tuple2(decoderA, decoderB);
		if (_v0.a.$ === 'Ok') {
			if (_v0.b.$ === 'Ok') {
				var aDecodedValue = _v0.a.a;
				var bDecodedValue = _v0.b.a;
				return $elm$core$Result$Ok(
					aDecodedValue(bDecodedValue));
			} else {
				var b_error = _v0.b.a;
				return $elm$core$Result$Err(b_error);
			}
		} else {
			var a_error = _v0.a.a;
			return $elm$core$Result$Err(a_error);
		}
	});
var $author$project$Replicated$Codec$fieldLocationLabel = F2(
	function (fieldName, fieldSlot) {
		return '.' + (fieldName + $elm$core$String$fromInt(fieldSlot));
	});
var $author$project$Replicated$Codec$getBytesDecoder = function (_v0) {
	var m = _v0.a;
	return m.bytesDecoder;
};
var $author$project$Replicated$Codec$getBytesEncoder = function (_v0) {
	var m = _v0.a;
	return m.bytesEncoder;
};
var $author$project$Replicated$Codec$getInitializer = F2(
	function (_v0, inputs) {
		var codecDetails = _v0.a;
		return codecDetails.nodePlaceholder(
			{parent: inputs.parent, position: inputs.position, seed: inputs.seed});
	});
var $author$project$Replicated$Codec$getJsonDecoder = function (_v0) {
	var m = _v0.a;
	return m.jsonDecoder;
};
var $author$project$Replicated$Codec$getJsonEncoder = function (_v0) {
	var m = _v0.a;
	return m.jsonEncoder;
};
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$map2 = F3(
	function (func, _v0, _v1) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v2 = A2(decodeA, bites, offset);
					var aOffset = _v2.a;
					var a = _v2.b;
					var _v3 = A2(decodeB, bites, aOffset);
					var bOffset = _v3.a;
					var b = _v3.b;
					return _Utils_Tuple2(
						bOffset,
						A2(func, a, b));
				}));
	});
var $author$project$Replicated$Codec$EncodeObjectOrThis = F2(
	function (a, b) {
		return {$: 'EncodeObjectOrThis', a: a, b: b};
	});
var $author$project$Replicated$Codec$EncodeThisField = function (a) {
	return {$: 'EncodeThisField', a: a};
};
var $author$project$Replicated$Change$NewPayload = function (a) {
	return {$: 'NewPayload', a: a};
};
var $author$project$Replicated$Codec$SkipThisField = {$: 'SkipThisField'};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Replicated$Change$FromPrimitiveAtom = function (a) {
	return {$: 'FromPrimitiveAtom', a: a};
};
var $author$project$Replicated$Change$IntegerAtom = function (a) {
	return {$: 'IntegerAtom', a: a};
};
var $author$project$Replicated$Change$NakedStringAtom = function (a) {
	return {$: 'NakedStringAtom', a: a};
};
var $mgold$elm_nonempty_list$List$Nonempty$append = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var xs = _v0.b;
		var y = _v1.a;
		var ys = _v1.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			x,
			_Utils_ap(
				xs,
				A2($elm$core$List$cons, y, ys)));
	});
var $author$project$Replicated$Codec$encodeFieldPayloadAsObjectPayload = F2(
	function (_v0, fieldPayload) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$append,
			A2(
				$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
				$author$project$Replicated$Change$FromPrimitiveAtom(
					$author$project$Replicated$Change$IntegerAtom(fieldSlot)),
				_List_fromArray(
					[
						$author$project$Replicated$Change$FromPrimitiveAtom(
						$author$project$Replicated$Change$NakedStringAtom(fieldName))
					])),
			fieldPayload);
	});
var $author$project$Replicated$Codec$extractQuotedObjects = function (atomList) {
	var keepUUIDs = function (atom) {
		if (atom.$ === 'IDPointerAtom') {
			var opID = atom.a;
			return $elm$core$Maybe$Just(opID);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	return A2($elm$core$List$filterMap, keepUUIDs, atomList);
};
var $author$project$Replicated$Codec$fieldDefaultMaybe = function (fallback) {
	switch (fallback.$) {
		case 'HardcodedDefault':
			var _default = fallback.a;
			return $elm$core$Maybe$Just(_default);
		case 'DefaultAndInitWithParentSeed':
			var _default = fallback.a;
			return $elm$core$Maybe$Just(_default);
		case 'InitWithParentSeed':
			return $elm$core$Maybe$Nothing;
		case 'PlaceholderDefault':
			var seed = fallback.a;
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $mgold$elm_nonempty_list$List$Nonempty$head = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	return x;
};
var $mgold$elm_nonempty_list$List$Nonempty$tail = function (_v0) {
	var x = _v0.a;
	var xs = _v0.b;
	return xs;
};
var $mgold$elm_nonempty_list$List$Nonempty$concat = function (_v0) {
	var xs = _v0.a;
	var xss = _v0.b;
	var tl = _Utils_ap(
		$mgold$elm_nonempty_list$List$Nonempty$tail(xs),
		$elm$core$List$concat(
			A2($elm$core$List$map, $mgold$elm_nonempty_list$List$Nonempty$toList, xss)));
	var hd = $mgold$elm_nonempty_list$List$Nonempty$head(xs);
	return A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, hd, tl);
};
var $mgold$elm_nonempty_list$List$Nonempty$concatMap = F2(
	function (f, xs) {
		return $mgold$elm_nonempty_list$List$Nonempty$concat(
			A2($mgold$elm_nonempty_list$List$Nonempty$map, f, xs));
	});
var $author$project$Replicated$Codec$getFieldLatestOnly = F2(
	function (fields, _v0) {
		var fieldSlot = _v0.a;
		var name = _v0.b;
		var _v1 = A2($elm$core$Dict$get, fieldSlot, fields);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			if (_v1.a.a.b.a.$ === 'IDPointerAtom') {
				var history = _v1.a;
				var _v2 = history.a;
				var firstOpID = _v2.a;
				var _v3 = _v2.b;
				var objectID = _v3.a.a;
				var anyMoreAtoms = _v3.b;
				var anyMoreOps = history.b;
				return $elm$core$Maybe$Just(
					A2($mgold$elm_nonempty_list$List$Nonempty$concatMap, $elm$core$Tuple$second, history));
			} else {
				var historyNonempty = _v1.a;
				return $elm$core$Maybe$Just(
					$mgold$elm_nonempty_list$List$Nonempty$head(historyNonempty).b);
			}
		}
	});
var $author$project$Replicated$Codec$getNodeEncoder = F2(
	function (_v0, inputs) {
		var m = _v0.a;
		return m.nodeEncoder(inputs);
	});
var $elm_community$maybe_extra$Maybe$Extra$or = F2(
	function (ma, mb) {
		if (ma.$ === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var $author$project$Replicated$Op$Op$atomToJsonValue = function (atom) {
	switch (atom.$) {
		case 'NakedStringAtom':
			var string = atom.a;
			return $elm$json$Json$Encode$string(string);
		case 'StringAtom':
			var string = atom.a;
			return $elm$json$Json$Encode$string(string);
		case 'IDPointerAtom':
			var opID = atom.a;
			return $elm$json$Json$Encode$string(
				$author$project$Replicated$Op$OpID$toRonPointerString(opID));
		case 'OtherUUIDAtom':
			var uuid = atom.a;
			return $elm$json$Json$Encode$string(uuid);
		case 'IntegerAtom':
			var _int = atom.a;
			return $elm$json$Json$Encode$int(_int);
		default:
			var _float = atom.a;
			return $elm$json$Json$Encode$float(_float);
	}
};
var $author$project$Replicated$Op$Op$payloadToJsonValue = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (!tail.b) {
		return $author$project$Replicated$Op$Op$atomToJsonValue(head);
	} else {
		var multiple = tail;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$author$project$Replicated$Op$Op$atomToJsonValue,
				A2($elm$core$List$cons, head, multiple)));
	}
};
var $author$project$Replicated$Change$delayedChangeObject = F2(
	function (target, objectChange) {
		return _Utils_Tuple2(target, objectChange);
	});
var $mgold$elm_nonempty_list$List$Nonempty$singleton = function (x) {
	return A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, _List_Nil);
};
var $author$project$Replicated$Codec$updateRegisterPostChildInit = F3(
	function (parentPointer, fieldIdentifier, pendingChildToWrap) {
		return A2(
			$author$project$Replicated$Change$delayedChangeObject,
			parentPointer,
			$author$project$Replicated$Change$NewPayload(
				A2(
					$author$project$Replicated$Codec$encodeFieldPayloadAsObjectPayload,
					fieldIdentifier,
					$mgold$elm_nonempty_list$List$Nonempty$singleton(
						$author$project$Replicated$Change$PendingObjectReferenceAtom(pendingChildToWrap)))));
	});
var $author$project$Replicated$Codec$newRegisterFieldEncoderEntry = F5(
	function (index, _v0, fieldFallback, fieldCodec, _v1) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		var mode = _v1.mode;
		var node = _v1.node;
		var regPointer = _v1.regPointer;
		var history = _v1.history;
		var existingValMaybe = _v1.existingValMaybe;
		var regAsParent = A2(
			$author$project$Replicated$Change$becomeDelayedParent,
			regPointer,
			A2(
				$author$project$Replicated$Codec$updateRegisterPostChildInit,
				regPointer,
				_Utils_Tuple2(fieldSlot, fieldName)));
		var runFieldNodeEncoder = function (valueToEncode) {
			return A2(
				$author$project$Replicated$Codec$getNodeEncoder,
				fieldCodec,
				{
					mode: mode,
					node: node,
					parent: regAsParent,
					position: A2(
						$author$project$Replicated$Change$Location$new,
						A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
						index),
					thingToEncode: valueToEncode
				});
		};
		var getPayloadIfSet = A2(
			$author$project$Replicated$Codec$getFieldLatestOnly,
			history,
			_Utils_Tuple2(fieldSlot, fieldName));
		var fieldDecodedMaybe = function (payload) {
			var run = A2(
				$elm$json$Json$Decode$decodeValue,
				A2(
					$author$project$Replicated$Codec$getNodeDecoder,
					fieldCodec,
					{
						cutoff: $elm$core$Maybe$Nothing,
						node: node,
						parent: regAsParent,
						position: A2(
							$author$project$Replicated$Change$Location$new,
							A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
							index)
					}),
				$author$project$Replicated$Op$Op$payloadToJsonValue(payload));
			if ((run.$ === 'Ok') && (run.a.$ === 'Ok')) {
				var fieldValue = run.a.a;
				return $elm$core$Maybe$Just(fieldValue);
			} else {
				var problem = run;
				return A2(
					$author$project$Log$crashInDev,
					'fieldDecodedMaybe: Failed to decode from register memory, got ' + $author$project$Log$dump(problem),
					$elm$core$Maybe$Nothing);
			}
		};
		var isExistingSameAsDefault = function () {
			var _v8 = _Utils_Tuple2(
				$author$project$Replicated$Codec$fieldDefaultMaybe(fieldFallback),
				A2($elm$core$Maybe$andThen, fieldDecodedMaybe, getPayloadIfSet));
			if (_v8.a.$ === 'Just') {
				if (_v8.b.$ === 'Just') {
					var fieldDefault = _v8.a.a;
					var existingValue = _v8.b.a;
					return _Utils_eq(fieldDefault, existingValue);
				} else {
					var _v9 = _v8.b;
					return true;
				}
			} else {
				if (_v8.b.$ === 'Nothing') {
					var _v10 = _v8.a;
					var _v11 = _v8.b;
					if (fieldFallback.$ === 'PlaceholderDefault') {
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			}
		}();
		var encodeVal = function (val) {
			return runFieldNodeEncoder(
				$author$project$Replicated$Codec$EncodeThis(val)).complex;
		};
		var wrappedOutput = function (val) {
			return A2(
				$author$project$Replicated$Codec$encodeFieldPayloadAsObjectPayload,
				_Utils_Tuple2(fieldSlot, fieldName),
				encodeVal(val));
		};
		var explicitDefaultIfNeeded = function (val) {
			if (mode.setDefaultsExplicitly) {
				return $author$project$Replicated$Codec$EncodeThisField(
					$author$project$Replicated$Change$NewPayload(
						wrappedOutput(val)));
			} else {
				var _v7 = encodeVal(val);
				if ((_v7.a.$ === 'QuoteNestedObject') && (!_v7.b.b)) {
					var encodedVal = _v7;
					var skippable = encodedVal.a.a.skippable;
					return skippable ? $author$project$Replicated$Codec$SkipThisField : $author$project$Replicated$Codec$EncodeThisField(
						$author$project$Replicated$Change$NewPayload(
							wrappedOutput(val)));
				} else {
					return isExistingSameAsDefault ? $author$project$Replicated$Codec$SkipThisField : $author$project$Replicated$Codec$EncodeThisField(
						$author$project$Replicated$Change$NewPayload(
							wrappedOutput(val)));
				}
			}
		};
		var _v2 = A2(
			$elm_community$maybe_extra$Maybe$Extra$or,
			existingValMaybe,
			$author$project$Replicated$Codec$fieldDefaultMaybe(fieldFallback));
		if (_v2.$ === 'Just') {
			var valToEncode = _v2.a;
			if (getPayloadIfSet.$ === 'Nothing') {
				return explicitDefaultIfNeeded(valToEncode);
			} else {
				var foundPreviousValue = getPayloadIfSet.a;
				return _Debug_todo(
					'Replicated.Codec',
					{
						start: {line: 3510, column: 21},
						end: {line: 3510, column: 31}
					})('what to do here?');
			}
		} else {
			if (getPayloadIfSet.$ === 'Nothing') {
				return $author$project$Replicated$Codec$SkipThisField;
			} else {
				var latestPayload = getPayloadIfSet.a;
				var _v5 = fieldDecodedMaybe(latestPayload);
				if (_v5.$ === 'Nothing') {
					return A3($author$project$Log$logSeparate, 'WARNING newRegisterFieldEncoderEntry: failed to decode latest payload from reg, can\'t encode it.', latestPayload, $author$project$Replicated$Codec$SkipThisField);
				} else {
					var fieldValue = _v5.a;
					var _v6 = $author$project$Replicated$Codec$extractQuotedObjects(
						$mgold$elm_nonempty_list$List$Nonempty$toList(latestPayload));
					if (!_v6.b) {
						return A3($author$project$Log$logSeparate, 'WARNING newRegisterFieldEncoderEntry: failed to extract ObjectIDs from latest payload from reg, can\'t encode it.', latestPayload, $author$project$Replicated$Codec$SkipThisField);
					} else {
						var firstFoundObjectID = _v6.a;
						var moreFoundObjectIDs = _v6.b;
						var runNestedEncoder = runFieldNodeEncoder(
							A2(
								$author$project$Replicated$Codec$EncodeObjectOrThis,
								A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, firstFoundObjectID, moreFoundObjectIDs),
								fieldValue));
						return $author$project$Replicated$Codec$EncodeThisField(
							$author$project$Replicated$Change$NewPayload(runNestedEncoder.complex));
					}
				}
			}
		}
	});
var $author$project$Replicated$Codec$DataCorrupted = {$: 'DataCorrupted'};
var $author$project$Replicated$Codec$JDError = function (a) {
	return {$: 'JDError', a: a};
};
var $author$project$Replicated$Codec$registerReadOnlyFieldDecoder = F5(
	function (index, fieldIdentifier, fallback, fieldCodec, inputs) {
		var fieldSlot = fieldIdentifier.a;
		var fieldName = fieldIdentifier.b;
		var regAsParent = A2(
			$author$project$Replicated$Change$becomeDelayedParent,
			inputs.regPointer,
			A2($author$project$Replicated$Codec$updateRegisterPostChildInit, inputs.regPointer, fieldIdentifier));
		var position = A2(
			$author$project$Replicated$Change$Location$new,
			A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
			index);
		var runFieldDecoder = function (thingToDecode) {
			return A2(
				$elm$json$Json$Decode$decodeValue,
				A2(
					$author$project$Replicated$Codec$getNodeDecoder,
					fieldCodec,
					{cutoff: inputs.cutoff, node: inputs.node, parent: regAsParent, position: position}),
				thingToDecode);
		};
		var generatedDefaultMaybe = function () {
			if (fallback.$ === 'PlaceholderDefault') {
				var fieldSeed = fallback.a;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Replicated$Codec$getInitializer,
						fieldCodec,
						{parent: regAsParent, position: position, seed: fieldSeed}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var _default = A2(
			$elm_community$maybe_extra$Maybe$Extra$or,
			$author$project$Replicated$Codec$fieldDefaultMaybe(fallback),
			generatedDefaultMaybe);
		var _v0 = A2($author$project$Replicated$Codec$getFieldLatestOnly, inputs.history, fieldIdentifier);
		if (_v0.$ === 'Nothing') {
			if (_default.$ === 'Just') {
				return _Utils_Tuple2(_default, _List_Nil);
			} else {
				return A2(
					$author$project$Log$crashInDev,
					'registerReadOnlyFieldDecoder: Failed to decode a field (' + (fieldName + ') that should always decode (required missing, or nested should return defaults), there\'s no default to fall back to'),
					_Utils_Tuple2(
						_default,
						_List_fromArray(
							[$author$project$Replicated$Codec$DataCorrupted])));
			}
		} else {
			var foundField = _v0.a;
			var _v2 = runFieldDecoder(
				$author$project$Replicated$Op$Op$payloadToJsonValue(foundField));
			if (_v2.$ === 'Ok') {
				if (_v2.a.$ === 'Ok') {
					var goodValue = _v2.a.a;
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(goodValue),
						_List_Nil);
				} else {
					var problem = _v2.a.a;
					return _Utils_Tuple2(
						_default,
						_List_fromArray(
							[problem]));
				}
			} else {
				var jsonDecodeError = _v2.a;
				return _Utils_Tuple2(
					_default,
					_List_fromArray(
						[
							$author$project$Replicated$Codec$JDError(jsonDecodeError)
						]));
			}
		}
	});
var $author$project$Replicated$Codec$readableHelper = F5(
	function (_v0, fieldGetter, fieldCodec, fallback, _v1) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		var recordCodecSoFar = _v1.a;
		var newFieldIndex = recordCodecSoFar.fieldIndex + 1;
		var nodeDecoder = function (inputs) {
			var _v3 = A5(
				$author$project$Replicated$Codec$registerReadOnlyFieldDecoder,
				newFieldIndex,
				_Utils_Tuple2(fieldSlot, fieldName),
				fallback,
				fieldCodec,
				inputs);
			var thisFieldValueMaybe = _v3.a;
			var thisFieldErrors = _v3.b;
			var _v4 = recordCodecSoFar.nodeDecoder(inputs);
			var remainingRecordConstructorMaybe = _v4.a;
			var soFarErrors = _v4.b;
			var updatedConstructorMaybe = function () {
				var _v5 = _Utils_Tuple2(thisFieldValueMaybe, remainingRecordConstructorMaybe);
				if (_v5.a.$ === 'Just') {
					if (_v5.b.$ === 'Just') {
						var thisFieldValue = _v5.a.a;
						var remainingRecordConstructor = _v5.b.a;
						return $elm$core$Maybe$Just(
							remainingRecordConstructor(thisFieldValue));
					} else {
						var _v7 = _v5.b;
						return A2(
							$author$project$Log$crashInDev,
							'Codec.readableHelper.nodeDecoder: ' + (fieldName + (' field was missing prior constructor, error was ' + $elm$core$Debug$toString(thisFieldErrors))),
							$elm$core$Maybe$Nothing);
					}
				} else {
					var _v6 = _v5.a;
					return A2(
						$author$project$Log$crashInDev,
						'Codec.readableHelper.nodeDecoder: \'' + (fieldName + ('\' field decoded to nothing.. error was ' + ($elm$core$Debug$toString(thisFieldErrors) + (' for the object at ' + $elm$core$Debug$toString(inputs.regPointer))))),
						$elm$core$Maybe$Nothing);
				}
			}();
			return _Utils_Tuple2(
				updatedConstructorMaybe,
				_Utils_ap(soFarErrors, thisFieldErrors));
		};
		var nodeEncoderEntry = function (inputs) {
			var inputsWithSpecificFieldValue = {
				existingValMaybe: A2($elm$core$Maybe$map, fieldGetter, inputs.existingValMaybe),
				history: inputs.history,
				mode: inputs.mode,
				node: inputs.node,
				regPointer: inputs.regPointer
			};
			return A5(
				$author$project$Replicated$Codec$newRegisterFieldEncoderEntry,
				newFieldIndex,
				_Utils_Tuple2(fieldSlot, fieldName),
				fallback,
				fieldCodec,
				inputsWithSpecificFieldValue);
		};
		var nodeInitializer = F2(
			function (parentSeed, regPointer) {
				var fieldInit = function (fieldSeed) {
					return A2(
						$author$project$Replicated$Codec$getInitializer,
						fieldCodec,
						{
							parent: A2(
								$author$project$Replicated$Change$becomeDelayedParent,
								regPointer,
								A2(
									$author$project$Replicated$Codec$updateRegisterPostChildInit,
									regPointer,
									_Utils_Tuple2(fieldSlot, fieldName))),
							position: A2(
								$author$project$Replicated$Change$Location$new,
								A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
								newFieldIndex),
							seed: fieldSeed
						});
				};
				var fieldValue = function () {
					switch (fallback.$) {
						case 'HardcodedDefault':
							var fieldType = fallback.a;
							return fieldType;
						case 'PlaceholderDefault':
							var fieldSeed = fallback.a;
							return fieldInit(fieldSeed);
						case 'InitWithParentSeed':
							var parentSeedToFieldSeed = fallback.a;
							return fieldInit(
								parentSeedToFieldSeed(parentSeed));
						case 'DefaultFromParentSeed':
							var parentSeedToFieldDefault = fallback.a;
							return parentSeedToFieldDefault(parentSeed);
						default:
							var _default = fallback.a;
							var parentSeedToFieldSeed = fallback.b;
							return fieldInit(
								parentSeedToFieldSeed(parentSeed));
					}
				}();
				var applyToRemaining = A2(recordCodecSoFar.nodeInitializer, parentSeed, regPointer);
				return applyToRemaining(fieldValue);
			});
		var jsonObjectFieldKey = _Utils_ap(
			fieldName,
			$elm$core$String$fromInt(fieldSlot));
		var addToPartialJsonEncoderList = A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				jsonObjectFieldKey,
				A2(
					$elm$core$Basics$composeL,
					$author$project$Replicated$Codec$getJsonEncoder(fieldCodec),
					fieldGetter)),
			recordCodecSoFar.jsonEncoders);
		var addToPartialBytesEncoderList = function (existingRecord) {
			return A2(
				$elm$core$List$cons,
				A2(
					$author$project$Replicated$Codec$getBytesEncoder,
					fieldCodec,
					fieldGetter(existingRecord)),
				recordCodecSoFar.bytesEncoder(existingRecord));
		};
		return $author$project$Replicated$Codec$PartialRegister(
			{
				bytesDecoder: A3(
					$elm$bytes$Bytes$Decode$map2,
					$author$project$Replicated$Codec$combineIfBothSucceed,
					recordCodecSoFar.bytesDecoder,
					$author$project$Replicated$Codec$getBytesDecoder(fieldCodec)),
				bytesEncoder: addToPartialBytesEncoderList,
				fieldIndex: newFieldIndex,
				jsonArrayDecoder: A3(
					$elm$json$Json$Decode$map2,
					$author$project$Replicated$Codec$combineIfBothSucceed,
					recordCodecSoFar.jsonArrayDecoder,
					A2(
						$elm$json$Json$Decode$index,
						recordCodecSoFar.fieldIndex,
						$author$project$Replicated$Codec$getJsonDecoder(fieldCodec))),
				jsonEncoders: addToPartialJsonEncoderList,
				nodeDecoder: nodeDecoder,
				nodeEncoders: A2($elm$core$List$cons, nodeEncoderEntry, recordCodecSoFar.nodeEncoders),
				nodeInitializer: nodeInitializer
			});
	});
var $author$project$Replicated$Codec$coreR = F5(
	function (fieldID, fieldGetter, fieldCodec, seeder, recordBuilt) {
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$InitWithParentSeed(seeder),
			recordBuilt);
	});
var $author$project$Replicated$Codec$Codec = function (a) {
	return {$: 'Codec', a: a};
};
var $author$project$Replicated$Object$eventPayload = function (_v0) {
	var event = _v0.a;
	return event.payload;
};
var $author$project$Replicated$Codec$extractFieldEventFromObjectPayload = function (payload) {
	if (((payload.b && (payload.a.$ === 'IntegerAtom')) && payload.b.b) && (payload.b.a.$ === 'NakedStringAtom')) {
		var fieldSlot = payload.a.a;
		var _v1 = payload.b;
		var fieldName = _v1.a.a;
		var rest = _v1.b;
		if (!rest.b) {
			return $elm$core$Result$Err('Register: Missing payload for field ' + fieldName);
		} else {
			var head = rest.a;
			var tail = rest.b;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					_Utils_Tuple2(fieldSlot, fieldName),
					A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, head, tail)));
		}
	} else {
		var badList = payload;
		return $elm$core$Result$Err(
			'Register: Failed to extract field slot, field name, event payload from the given op payload because the value list is supposed to have 3+ elements and I found ' + $elm$core$String$fromInt(
				$elm$core$List$length(badList)));
	}
};
var $author$project$Replicated$Object$getEvents = function (object) {
	if (object.$ === 'Saved') {
		var initializedObject = object.a;
		return initializedObject.events;
	} else {
		var uninitializedObject = object.a;
		return $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $author$project$Replicated$Codec$buildRegisterFieldDictionary = function (object) {
	var addUpdate = F2(
		function (newUpdate, existingUpdatesMaybe) {
			return $elm$core$Maybe$Just(
				A2(
					$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
					newUpdate,
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Maybe$map, $mgold$elm_nonempty_list$List$Nonempty$toList, existingUpdatesMaybe))));
		});
	var addFieldEntry = F3(
		function (eventID, event, buildingDict) {
			var _v0 = $author$project$Replicated$Codec$extractFieldEventFromObjectPayload(
				$author$project$Replicated$Object$eventPayload(event));
			if (_v0.$ === 'Ok') {
				var _v1 = _v0.a;
				var _v2 = _v1.a;
				var fieldSlot = _v2.a;
				var fieldName = _v2.b;
				var fieldPayload = _v1.b;
				var logMsg = 'Adding to ' + ($rtfeldman$console_print$Console$underline(fieldName) + ' field history');
				return A3(
					$elm$core$Dict$update,
					fieldSlot,
					addUpdate(
						_Utils_Tuple2(eventID, fieldPayload)),
					buildingDict);
			} else {
				var problem = _v0.a;
				return A3(
					$author$project$Log$logSeparate,
					'WARNING addFieldEntry on op ' + ($author$project$Replicated$Op$OpID$toString(eventID) + (': ' + problem)),
					$author$project$Replicated$Object$eventPayload(event),
					buildingDict);
			}
		});
	return A3(
		$turboMaCk$any_dict$Dict$Any$foldl,
		addFieldEntry,
		$elm$core$Dict$empty,
		$author$project$Replicated$Object$getEvents(object));
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $author$project$SmartTime$Moment$fromSmartInt = function (_int) {
	return $author$project$SmartTime$Moment$Moment(
		$author$project$SmartTime$Duration$fromInt(_int));
};
var $author$project$Replicated$Op$OpID$fromString = function (input) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$split, '+', input),
		A2($elm$core$String$split, '-', input));
	if ((_v0.a.b && _v0.a.b.b) && (!_v0.a.b.b.b)) {
		var _v1 = _v0.a;
		var clockString = _v1.a;
		var _v2 = _v1.b;
		var nodeIDString = _v2.a;
		var _v3 = _Utils_Tuple2(
			$author$project$Replicated$Node$NodeID$fromString(nodeIDString),
			$elm$core$String$toInt(clockString));
		if (_v3.a.$ === 'Just') {
			if (_v3.b.$ === 'Just') {
				var nodeID = _v3.a.a;
				var clock = _v3.b.a;
				return $elm$core$Maybe$Just(
					$author$project$Replicated$Op$OpID$OpID(input));
			} else {
				var nodeID = _v3.a.a;
				var _v4 = _v3.b;
				return _Debug_todo(
					'Replicated.Op.OpID',
					{
						start: {line: 202, column: 21},
						end: {line: 202, column: 31}
					})('OpID from string failed to figure out a moment from input ' + input);
			}
		} else {
			var _v5 = _v3.a;
			return _Debug_todo(
				'Replicated.Op.OpID',
				{
					start: {line: 205, column: 21},
					end: {line: 205, column: 31}
				})('OpID from string failed to figure out a nodeID from input ' + input);
		}
	} else {
		if ((_v0.b.b && _v0.b.b.b) && (!_v0.b.b.b.b)) {
			var _v6 = _v0.b;
			var clockString = _v6.a;
			var _v7 = _v6.b;
			var nodeIDString = _v7.a;
			var _v8 = _Utils_Tuple2(
				$author$project$Replicated$Node$NodeID$fromString(nodeIDString),
				A2(
					$elm$core$Maybe$map,
					$author$project$SmartTime$Moment$fromSmartInt,
					$elm$core$String$toInt(clockString)));
			if ((_v8.a.$ === 'Just') && (_v8.b.$ === 'Just')) {
				var nodeID = _v8.a.a;
				var clock = _v8.b.a;
				return $elm$core$Maybe$Just(
					$author$project$Replicated$Op$OpID$OpID(input));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Replicated$Codec$concurrentObjectIDsDecoder = function () {
	var unquoteObjectID = function (quoted) {
		var _v1 = A2($elm$core$String$startsWith, '>', quoted);
		if (_v1) {
			return A2($elm$core$String$dropLeft, 1, quoted);
		} else {
			return quoted;
		}
	};
	var _try = function (givenString) {
		var _v0 = $author$project$Replicated$Op$OpID$fromString(
			unquoteObjectID(givenString));
		if (_v0.$ === 'Just') {
			var opID = _v0.a;
			return $elm$json$Json$Decode$succeed(opID);
		} else {
			return A2(
				$author$project$Log$log,
				'Codec.concurrentObjectIDsDecoder warning: got bad opID: ' + givenString,
				$elm$json$Json$Decode$fail(givenString + ' is not a valid OpID...'));
		}
	};
	var quotedObjectDecoder = A2($elm$json$Json$Decode$andThen, _try, $elm$json$Json$Decode$string);
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$list(quotedObjectDecoder),
				A2($elm$json$Json$Decode$map, $elm$core$List$singleton, quotedObjectDecoder),
				$elm$json$Json$Decode$succeed(_List_Nil)
			]));
}();
var $author$project$Replicated$Object$Saved = function (a) {
	return {$: 'Saved', a: a};
};
var $author$project$Replicated$Object$Unsaved = function (a) {
	return {$: 'Unsaved', a: a};
};
var $author$project$Replicated$Object$All = {$: 'All'};
var $author$project$Replicated$Object$NoHeader = {$: 'NoHeader'};
var $author$project$Replicated$Object$Event = function (a) {
	return {$: 'Event', a: a};
};
var $author$project$Replicated$Op$Op$payload = function (_v0) {
	var op = _v0.a;
	return op.payload;
};
var $author$project$Replicated$Op$Op$reference = function (_v0) {
	var op = _v0.a;
	return op.reference;
};
var $author$project$Replicated$Object$UnknownReference = function (a) {
	return {$: 'UnknownReference', a: a};
};
var $author$project$Replicated$Object$revertEvent = function (_v0) {
	var event = _v0.a;
	return $author$project$Replicated$Object$Event(
		_Utils_update(
			event,
			{reverted: !event.reverted}));
};
var $author$project$Replicated$Object$revertEventHelper = F3(
	function (ref, eventDict, opDict) {
		revertEventHelper:
		while (true) {
			var _v0 = A2($turboMaCk$any_dict$Dict$Any$get, ref, eventDict);
			if (_v0.$ === 'Just') {
				var foundEventToRevert = _v0.a;
				return _Utils_Tuple2(
					A3(
						$turboMaCk$any_dict$Dict$Any$insert,
						ref,
						$author$project$Replicated$Object$revertEvent(foundEventToRevert),
						eventDict),
					_List_Nil);
			} else {
				var _v1 = A2($turboMaCk$any_dict$Dict$Any$get, ref, opDict);
				if (_v1.$ === 'Nothing') {
					return _Utils_Tuple2(
						eventDict,
						_List_fromArray(
							[
								$author$project$Replicated$Object$UnknownReference(ref)
							]));
				} else {
					var referencedOp = _v1.a;
					var _v2 = $author$project$Replicated$Op$Op$reference(referencedOp);
					if (_v2.$ === 'ReducerReference') {
						return A2(
							$author$project$Log$crashInDev,
							'Tried to revert a creation op!',
							_Utils_Tuple2(
								eventDict,
								_List_fromArray(
									[
										$author$project$Replicated$Object$UnknownReference(ref)
									])));
					} else {
						var opID = _v2.a;
						var $temp$ref = opID,
							$temp$eventDict = eventDict,
							$temp$opDict = opDict;
						ref = $temp$ref;
						eventDict = $temp$eventDict;
						opDict = $temp$opDict;
						continue revertEventHelper;
					}
				}
			}
		}
	});
var $author$project$Replicated$Object$applyOp = F3(
	function (opDict, newOp, _v0) {
		var oldObject = _v0.a;
		var oldWarnings = _v0.b;
		var opPayloadToEventPayload = function (opPayload) {
			if (opPayload.b && (!opPayload.b.b)) {
				var singleAtom = opPayload.a;
				return $author$project$Replicated$Op$Op$atomToJsonValue(singleAtom);
			} else {
				var multipleAtoms = opPayload;
				return A2($elm$json$Json$Encode$list, $author$project$Replicated$Op$Op$atomToJsonValue, multipleAtoms);
			}
		};
		var _v1 = $author$project$Replicated$Op$Op$reference(newOp);
		if (_v1.$ === 'OpReference') {
			var ref = _v1.a;
			var _v2 = _Utils_eq(
				$author$project$Replicated$Op$Op$pattern(newOp),
				$author$project$Replicated$Op$Op$DeletionOp) ? A3($author$project$Replicated$Object$revertEventHelper, ref, oldObject.events, opDict) : _Utils_Tuple2(
				A3(
					$turboMaCk$any_dict$Dict$Any$insert,
					$author$project$Replicated$Op$Op$id(newOp),
					$author$project$Replicated$Object$Event(
						{
							payload: $author$project$Replicated$Op$Op$payload(newOp),
							referencedOp: ref,
							reverted: false
						}),
					oldObject.events),
				_List_Nil);
			var newEventDict = _v2.a;
			var newWarnings = _v2.b;
			return _Utils_Tuple2(
				{
					aliases: oldObject.aliases,
					creation: oldObject.creation,
					events: newEventDict,
					included: oldObject.included,
					reducer: oldObject.reducer,
					version: $author$project$Replicated$Op$Op$id(newOp)
				},
				_Utils_ap(oldWarnings, newWarnings));
		} else {
			var reducerID = _v1.a;
			return _Utils_Tuple2(
				_Utils_update(
					oldObject,
					{
						aliases: A2(
							$elm$core$List$cons,
							$author$project$Replicated$Op$Op$id(newOp),
							oldObject.aliases)
					}),
				oldWarnings);
		}
	});
var $author$project$Replicated$Object$buildSavedObject = function (opDict) {
	var _v0 = $turboMaCk$any_dict$Dict$Any$values(opDict);
	if (!_v0.b) {
		return _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			_List_fromArray(
				[$author$project$Replicated$Object$NoHeader]));
	} else {
		var firstOp = _v0.a;
		var moreOps = _v0.b;
		var base = {
			aliases: _List_Nil,
			creation: $author$project$Replicated$Op$Op$object(firstOp),
			events: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives),
			included: $author$project$Replicated$Object$All,
			reducer: $author$project$Replicated$Op$Op$reducer(firstOp),
			version: $author$project$Replicated$Op$Op$id(firstOp)
		};
		var _v1 = A3(
			$elm$core$List$foldl,
			$author$project$Replicated$Object$applyOp(opDict),
			_Utils_Tuple2(base, _List_Nil),
			moreOps);
		var outputObject = _v1.a;
		var outputWarnings = _v1.b;
		return _Utils_Tuple2(
			$elm$core$Maybe$Just(outputObject),
			outputWarnings);
	}
};
var $author$project$Log$crashInDevProse = function (prose) {
	return $author$project$Log$crashInDev(
		$author$project$Log$proseToString(prose));
};
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $turboMaCk$any_dict$Dict$Any$filter = F2(
	function (f, _v0) {
		var inner = _v0.a;
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A2(
						$elm$core$Dict$filter,
						F2(
							function (_v1, _v2) {
								var k = _v2.a;
								var v = _v2.b;
								return A2(f, k, v);
							}),
						inner.dict)
				}));
	});
var $author$project$Log$int = function (i) {
	return $elm$core$String$fromInt(i);
};
var $turboMaCk$any_dict$Dict$Any$size = function (_v0) {
	var dict = _v0.a.dict;
	return $elm$core$Dict$size(dict);
};
var $author$project$Replicated$Op$OpID$toInt = function (opID) {
	var _v0 = $author$project$Replicated$Op$OpID$toStamp(opID);
	var clock = _v0.clock;
	var origin = _v0.origin;
	var reversion = _v0.reversion;
	return clock;
};
var $author$project$Replicated$Node$Node$getObject = function (_v0) {
	var node = _v0.node;
	var cutoff = _v0.cutoff;
	var foundIDs = _v0.foundIDs;
	var parent = _v0.parent;
	var reducer = _v0.reducer;
	var position = _v0.position;
	var uninitializedObject = $author$project$Replicated$Object$Unsaved(
		{parent: parent, position: position, reducer: reducer});
	if (!foundIDs.b) {
		return uninitializedObject;
	} else {
		var foundSome = foundIDs;
		var correctObject = function (op) {
			return A2(
				$elm$core$List$member,
				$author$project$Replicated$Op$Op$object(op),
				foundSome);
		};
		var beforeCutoff = function (opID) {
			if (cutoff.$ === 'Nothing') {
				return true;
			} else {
				var cutoffMoment = cutoff.a;
				return _Utils_cmp(
					$author$project$SmartTime$Moment$toSmartInt(cutoffMoment),
					$author$project$Replicated$Op$OpID$toInt(opID)) > 0;
			}
		};
		var matchingOp = F2(
			function (opID, op) {
				var _v4 = _Utils_Tuple2(
					beforeCutoff(opID) && correctObject(op),
					_Utils_eq(
						$author$project$Replicated$Op$Op$reducer(op),
						reducer));
				if (!_v4.a) {
					return false;
				} else {
					if (_v4.b) {
						return true;
					} else {
						return A2(
							$author$project$Log$crashInDev,
							'Node.getObject: I was told [' + (A2(
								$elm$core$String$join,
								', ',
								A2($elm$core$List$map, $author$project$Replicated$Op$OpID$toString, foundIDs)) + ('] were aliases to look for when building ' + ($author$project$Log$dump(reducer) + (' at location ' + ($author$project$Replicated$Change$Location$toString(position) + ('. Problem is, ' + ($author$project$Replicated$Op$OpID$toString(opID) + (' is actually a ' + $author$project$Log$dump(
								$author$project$Replicated$Op$Op$reducer(op)))))))))),
							false);
					}
				}
			});
		var findMatchingOps = A2($turboMaCk$any_dict$Dict$Any$filter, matchingOp, node.ops);
		var _v2 = $author$project$Replicated$Object$buildSavedObject(findMatchingOps);
		if (_v2.a.$ === 'Just') {
			if (!_v2.b.b) {
				var finalObject = _v2.a.a;
				return $author$project$Replicated$Object$Saved(finalObject);
			} else {
				var finalObject = _v2.a.a;
				var warnings = _v2.b;
				return A2(
					$author$project$Log$crashInDev,
					'object builder produced warnings!',
					$author$project$Replicated$Object$Saved(finalObject));
			}
		} else {
			var _v3 = _v2.a;
			var warnings = _v2.b;
			return A2(
				$author$project$Log$crashInDevProse,
				_List_fromArray(
					[
						_List_fromArray(
						['Node.getObject:']),
						_List_fromArray(
						['object builder was tasked with building an object that should exist but found nothing. The existing object(s) supposedly had ID(s):']),
						_List_fromArray(
						[
							$author$project$Log$dump(foundSome)
						]),
						_List_fromArray(
						[
							'Matched',
							$author$project$Log$int(
							$turboMaCk$any_dict$Dict$Any$size(findMatchingOps)),
							'out of',
							$author$project$Log$int(
							$turboMaCk$any_dict$Dict$Any$size(node.ops)),
							'total ops (correct object and pre-cutoff).'
						]),
						_List_fromArray(
						['The builder produced these warnings:']),
						_List_fromArray(
						[
							$author$project$Log$dump(warnings)
						])
					]),
				uninitializedObject);
		}
	}
};
var $author$project$Replicated$Change$ExistingID = F2(
	function (reducer, object) {
		return {object: object, reducer: reducer};
	});
var $author$project$Replicated$Change$Location$newSingle = function (reasonForNew) {
	return $author$project$Replicated$Change$Location$AncestryBackwards(
		_List_fromArray(
			[
				$author$project$Replicated$Change$Location$NestSingle(reasonForNew)
			]));
};
var $elm_community$maybe_extra$Maybe$Extra$toList = function (m) {
	if (m.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var x = m.a;
		return _List_fromArray(
			[x]);
	}
};
var $author$project$Replicated$Change$newPointer = function (_v0) {
	var parent = _v0.parent;
	var position = _v0.position;
	var reducerID = _v0.reducerID;
	if (parent.a.$ === 'ExistingObjectPointer') {
		var object = parent.a.a.object;
		var childInstallerMaybe = parent.b;
		var newPendingID = {
			myLocation: position,
			parentLocation: $elm$core$Maybe$Just(
				$author$project$Replicated$Change$Location$newSingle(
					$author$project$Replicated$Op$OpID$toString(object))),
			reducer: reducerID
		};
		var childInstallChanges = $elm_community$maybe_extra$Maybe$Extra$toList(
			A2(
				$elm$core$Maybe$map,
				function (f) {
					return f(newPendingID);
				},
				childInstallerMaybe));
		return A2($author$project$Replicated$Change$PlaceholderPointer, newPendingID, childInstallChanges);
	} else {
		var _v2 = parent.a;
		var parentPendingID = _v2.a;
		var ancestorInstallChanges = _v2.b;
		var childInstallerMaybe = parent.b;
		var newPendingID = {
			myLocation: position,
			parentLocation: $elm$core$Maybe$Just(
				$author$project$Replicated$Change$pendingObjectGlobalLocation(parentPendingID)),
			reducer: reducerID
		};
		var childInstallChangeMaybe = A2(
			$elm$core$Maybe$map,
			function (f) {
				return f(newPendingID);
			},
			childInstallerMaybe);
		var finalInstallChanges = function () {
			if (childInstallChangeMaybe.$ === 'Just') {
				var childInstallChange = childInstallChangeMaybe.a;
				return _Utils_ap(
					ancestorInstallChanges,
					_List_fromArray(
						[childInstallChange]));
			} else {
				return ancestorInstallChanges;
			}
		}();
		return A2($author$project$Replicated$Change$PlaceholderPointer, newPendingID, finalInstallChanges);
	}
};
var $author$project$Replicated$Object$getPointer = function (object) {
	if (object.$ === 'Saved') {
		var savedObject = object.a;
		return $author$project$Replicated$Change$ExistingObjectPointer(
			A2($author$project$Replicated$Change$ExistingID, savedObject.reducer, savedObject.creation));
	} else {
		var unsavedObject = object.a;
		return $author$project$Replicated$Change$newPointer(
			{parent: unsavedObject.parent, position: unsavedObject.position, reducerID: unsavedObject.reducer});
	}
};
var $author$project$Replicated$Change$changeObjectWithExternal = function (_v0) {
	var target = _v0.target;
	var objectChanges = _v0.objectChanges;
	var externalUpdates = _v0.externalUpdates;
	var withExternalChanges = function (thisSet) {
		return A2($author$project$Replicated$Change$mergeChanges, externalUpdates, thisSet);
	};
	var skippable = $elm$core$List$isEmpty(objectChanges) && $author$project$Replicated$Change$isEmptyChangeSet(externalUpdates);
	var finalChangeSet = function () {
		if (target.$ === 'ExistingObjectPointer') {
			var existingID = target.a;
			return withExternalChanges(
				$author$project$Replicated$Change$ChangeSet(
					{
						delayed: _List_Nil,
						existingObjectChanges: A3($turboMaCk$any_dict$Dict$Any$singleton, existingID, objectChanges, $author$project$Replicated$Change$existingIDToComparable),
						objectsToCreate: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$pendingIDToComparable),
						opsToRepeat: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives)
					}));
		} else {
			var pendingID = target.a;
			var ancestorsInstallChanges = target.b;
			return withExternalChanges(
				$author$project$Replicated$Change$ChangeSet(
					{
						delayed: ancestorsInstallChanges,
						existingObjectChanges: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Change$existingIDToComparable),
						objectsToCreate: A3($turboMaCk$any_dict$Dict$Any$singleton, pendingID, objectChanges, $author$project$Replicated$Change$pendingIDToComparable),
						opsToRepeat: $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives)
					}));
		}
	}();
	return {changeSet: finalChangeSet, skippable: skippable, toReference: target};
};
var $author$project$Replicated$Change$changeObject = function (_v0) {
	var target = _v0.target;
	var objectChanges = _v0.objectChanges;
	return $author$project$Replicated$Change$changeObjectWithExternal(
		{externalUpdates: $author$project$Replicated$Change$emptyChangeSet, objectChanges: objectChanges, target: target});
};
var $author$project$Replicated$Reducer$Register$registerReducerID = 'lww';
var $author$project$Replicated$Change$QuoteNestedObject = function (a) {
	return {$: 'QuoteNestedObject', a: a};
};
var $author$project$Replicated$Change$complexFromSolo = function (solo) {
	return $mgold$elm_nonempty_list$List$Nonempty$singleton(
		$author$project$Replicated$Change$QuoteNestedObject(solo));
};
var $author$project$Replicated$Codec$soloOut = function (soloObject) {
	return {
		complex: $author$project$Replicated$Change$complexFromSolo(soloObject),
		nested: soloObject
	};
};
var $author$project$Replicated$Codec$recordNodeEncoder = F2(
	function (_v0, _v1) {
		var allFieldsCodec = _v0.a;
		var node = _v1.node;
		var thingToEncode = _v1.thingToEncode;
		var mode = _v1.mode;
		var parent = _v1.parent;
		var position = _v1.position;
		var fallbackObject = function (foundIDs) {
			return $author$project$Replicated$Node$Node$getObject(
				{cutoff: $elm$core$Maybe$Nothing, foundIDs: foundIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		};
		var _v2 = function () {
			if (thingToEncode.$ === 'EncodeThis') {
				var nakedRecord = thingToEncode.a;
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(nakedRecord),
					fallbackObject(_List_Nil));
			} else {
				var objectIDs = thingToEncode.a;
				var nakedRecord = thingToEncode.b;
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(nakedRecord),
					fallbackObject(
						$mgold$elm_nonempty_list$List$Nonempty$toList(objectIDs)));
			}
		}();
		var recordMaybe = _v2.a;
		var object = _v2.b;
		var registerPointer = $author$project$Replicated$Object$getPointer(object);
		var subChanges = function () {
			var asObjectChanges = function (subEncoderOutput) {
				if (subEncoderOutput.$ === 'EncodeThisField') {
					var objChange = subEncoderOutput.a;
					return $elm$core$Maybe$Just(objChange);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			};
			var runSubEncoder = function (subEncoderFunction) {
				return asObjectChanges(
					subEncoderFunction(
						{
							existingValMaybe: recordMaybe,
							history: $author$project$Replicated$Codec$buildRegisterFieldDictionary(object),
							mode: mode,
							node: node,
							regPointer: registerPointer
						}));
			};
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					A2($elm$core$List$map, runSubEncoder, allFieldsCodec.nodeEncoders)));
		}();
		return $author$project$Replicated$Codec$soloOut(
			$author$project$Replicated$Change$changeObject(
				{objectChanges: subChanges, target: registerPointer}));
	});
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $author$project$Replicated$Codec$finishSeededRecord = function (partial) {
	var allFieldsCodec = partial.a;
	var nodeEncoder = function (inputs) {
		return A2($author$project$Replicated$Codec$recordNodeEncoder, partial, inputs);
	};
	var nodeDecoder = function (_v7) {
		var node = _v7.node;
		var parent = _v7.parent;
		var position = _v7.position;
		var cutoff = _v7.cutoff;
		var nakedRegisterDecoder = function (objectIDs) {
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: cutoff, foundIDs: objectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
			var regPointer = $author$project$Replicated$Object$getPointer(object);
			var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
			var regToRecordByDecoding = function (givenCutoff) {
				var _v6 = allFieldsCodec.nodeDecoder(
					{cutoff: givenCutoff, history: history, node: node, regPointer: regPointer});
				if (!_v6.b.b) {
					var success = _v6.a;
					return success;
				} else {
					var recovered = _v6.a;
					var errors = _v6.b;
					return A2(
						$author$project$Log$crashInDev,
						'regToRecordByDecoding returned errors!' + $author$project$Log$dump(errors),
						recovered);
				}
			};
			var regToRecord = F2(
				function (regCanBeBuilt, givenCutoff) {
					var _v5 = regToRecordByDecoding(givenCutoff);
					if (_v5.$ === 'Just') {
						var recordDecoded = _v5.a;
						return recordDecoded;
					} else {
						return regCanBeBuilt;
					}
				});
			var wrongCutoffRegToRecordByDecoding = function () {
				var _v4 = allFieldsCodec.nodeDecoder(
					{cutoff: $elm$core$Maybe$Nothing, history: history, node: node, regPointer: regPointer});
				if (!_v4.b.b) {
					var success = _v4.a;
					return success;
				} else {
					var recovered = _v4.a;
					var errors = _v4.b;
					return A2(
						$author$project$Log$crashInDev,
						'regToRecordByDecoding returned errors!' + $author$project$Log$dump(errors),
						recovered);
				}
			}();
			if (wrongCutoffRegToRecordByDecoding.$ === 'Just') {
				var regCanBeBuilt = wrongCutoffRegToRecordByDecoding.a;
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(
						A2(regToRecord, regCanBeBuilt, $elm$core$Maybe$Nothing)));
			} else {
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted));
			}
		};
		return A2($elm$json$Json$Decode$andThen, nakedRegisterDecoder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	var jsonDecoder = allFieldsCodec.jsonArrayDecoder;
	var encodeEntryInDictList = F2(
		function (fullRecord, _v2) {
			var fieldKey = _v2.a;
			var entryValueEncoder = _v2.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string(fieldKey),
						entryValueEncoder(fullRecord)
					]));
		});
	var encodeAsJsonObject = function (nakedRecord) {
		var fullRecord = nakedRecord;
		var passFullRecordToFieldEncoder = function (_v1) {
			var fieldKey = _v1.a;
			var fieldEncoder = _v1.b;
			return _Utils_Tuple2(
				fieldKey,
				fieldEncoder(fullRecord));
		};
		return $elm$json$Json$Encode$object(
			A2($elm$core$List$map, passFullRecordToFieldEncoder, allFieldsCodec.jsonEncoders));
	};
	var encodeAsDictList = function (fullRecord) {
		return A2(
			$elm$json$Json$Encode$list,
			encodeEntryInDictList(fullRecord),
			allFieldsCodec.jsonEncoders);
	};
	var emptyRegister = function (_v0) {
		var parent = _v0.parent;
		var position = _v0.position;
		var seed = _v0.seed;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		return A2(
			allFieldsCodec.nodeInitializer,
			seed,
			$author$project$Replicated$Object$getPointer(object));
	};
	var bytesDecoder = allFieldsCodec.bytesDecoder;
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: bytesDecoder,
			bytesEncoder: A2(
				$elm$core$Basics$composeR,
				allFieldsCodec.bytesEncoder,
				A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence)),
			jsonDecoder: jsonDecoder,
			jsonEncoder: encodeAsJsonObject,
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: emptyRegister
		});
};
var $elm$bytes$Bytes$Decode$andThen = F2(
	function (callback, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var newOffset = _v1.a;
					var a = _v1.b;
					var _v2 = callback(a);
					var decodeB = _v2.a;
					return A2(decodeB, bites, newOffset);
				}));
	});
var $elm$bytes$Bytes$BE = {$: 'BE'};
var $author$project$Replicated$Codec$endian = $elm$bytes$Bytes$BE;
var $author$project$Replicated$Codec$flatInit = function (_v0) {
	var seed = _v0.seed;
	return seed;
};
var $author$project$ID$IDFromExisting = function (a) {
	return {$: 'IDFromExisting', a: a};
};
var $author$project$ID$IDFromPlaceholder = function (a) {
	return {$: 'IDFromPlaceholder', a: a};
};
var $author$project$ID$fromPointer = function (pointer) {
	if (pointer.$ === 'ExistingObjectPointer') {
		var existingID = pointer.a;
		return $author$project$ID$IDFromExisting(existingID.object);
	} else {
		var pendingID = pointer.a;
		return $author$project$ID$IDFromPlaceholder(pendingID);
	}
};
var $author$project$Replicated$Op$OpID$fromRonPointerString = function (inString) {
	return $author$project$Replicated$Op$OpID$fromString(
		A2($elm$core$String$dropLeft, 1, inString));
};
var $author$project$Replicated$Op$OpID$fromStringForced = function (string) {
	return $author$project$Replicated$Op$OpID$OpID(string);
};
var $author$project$Replicated$Codec$getEncodedPrimitive = function (thingToEncode) {
	if (thingToEncode.$ === 'EncodeThis') {
		var thing = thingToEncode.a;
		return thing;
	} else {
		var thing = thingToEncode.b;
		return A2($author$project$Log$crashInDev, 'primitive encoder was passed an objectID to encode?', thing);
	}
};
var $author$project$ID$getObjectID = function (givenID) {
	if (givenID.$ === 'IDFromExisting') {
		var objectID = givenID.a;
		return $elm$core$Maybe$Just(objectID);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$string = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_string(n));
};
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $author$project$ID$toPointer = F2(
	function (reducer, givenID) {
		if (givenID.$ === 'IDFromExisting') {
			var objectID = givenID.a;
			return $author$project$Replicated$Change$ExistingObjectPointer(
				A2($author$project$Replicated$Change$ExistingID, reducer, objectID));
		} else {
			var pendingID = givenID.a;
			return A2($author$project$Replicated$Change$PlaceholderPointer, pendingID, _List_Nil);
		}
	});
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm$bytes$Bytes$Encode$U32 = F2(
	function (a, b) {
		return {$: 'U32', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $author$project$Replicated$Codec$id = function () {
	var toObjectID = function (givenID) {
		var _v5 = $author$project$ID$getObjectID(givenID);
		if (_v5.$ === 'Just') {
			var objectID = _v5.a;
			return objectID;
		} else {
			return A3(
				$author$project$Log$crashInDev,
				'ID should always be ObjectID before serializing. Tried to serialize the ID ' + $author$project$Log$dump(givenID),
				$author$project$Replicated$Op$OpID$fromStringForced,
				'Uninitialized! ' + $author$project$Log$dump(givenID));
		}
	};
	var toString = function (givenID) {
		return $author$project$Replicated$Op$OpID$toString(
			toObjectID(givenID));
	};
	var toChangeAtom = function (givenID) {
		var _v4 = A2($author$project$ID$toPointer, 'bogus reducer unused', givenID);
		if (_v4.$ === 'ExistingObjectPointer') {
			var existingID = _v4.a;
			return $author$project$Replicated$Change$ExistingObjectReferenceAtom(existingID.object);
		} else {
			var pendingID = _v4.a;
			return $author$project$Replicated$Change$PendingObjectReferenceAtom(pendingID);
		}
	};
	var nodeEncoder = function (inputs) {
		return {
			complex: $mgold$elm_nonempty_list$List$Nonempty$singleton(
				toChangeAtom(
					$author$project$Replicated$Codec$getEncodedPrimitive(inputs.thingToEncode)))
		};
	};
	var fromString = F2(
		function (nodeMaybe, asString) {
			var opID = function () {
				var _v3 = $author$project$Replicated$Op$OpID$fromRonPointerString(asString);
				if (_v3.$ === 'Just') {
					var goodOpID = _v3.a;
					return goodOpID;
				} else {
					return A3($author$project$Log$crashInDev, 'Failed to sucessfully un-serialize OpID ' + (asString + ', is it in ron pointer form?'), $author$project$Replicated$Op$OpID$fromStringForced, asString);
				}
			}();
			var finalPointer = function (reducerID) {
				return $author$project$ID$fromPointer(
					$author$project$Replicated$Change$ExistingObjectPointer(
						A2($author$project$Replicated$Change$ExistingID, reducerID, opID)));
			};
			if (nodeMaybe.$ === 'Nothing') {
				return finalPointer('');
			} else {
				var node = nodeMaybe.a;
				var _v1 = A2($author$project$Replicated$Node$Node$lookupObject, node, opID);
				if (_v1.$ === 'Err') {
					return A3(
						$author$project$Log$crashInDev,
						'Un-serializing an ID ' + (asString + ' but I couldn\'t find the object referenced in the node!'),
						$author$project$ID$fromPointer,
						$author$project$Replicated$Change$ExistingObjectPointer(
							A2($author$project$Replicated$Change$ExistingID, 'error', opID)));
				} else {
					var _v2 = _v1.a;
					var reducerID = _v2.a;
					var objectID = _v2.b;
					return $author$project$ID$fromPointer(
						$author$project$Replicated$Change$ExistingObjectPointer(
							A2($author$project$Replicated$Change$ExistingID, reducerID, objectID)));
				}
			}
		});
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: A2(
				$elm$bytes$Bytes$Decode$andThen,
				function (charCount) {
					return A2(
						$elm$bytes$Bytes$Decode$map,
						A2(
							$elm$core$Basics$composeR,
							fromString($elm$core$Maybe$Nothing),
							$elm$core$Result$Ok),
						$elm$bytes$Bytes$Decode$string(charCount));
				},
				$elm$bytes$Bytes$Decode$unsignedInt32($author$project$Replicated$Codec$endian)),
			bytesEncoder: function (i) {
				return $elm$bytes$Bytes$Encode$sequence(
					_List_fromArray(
						[
							A2(
							$elm$bytes$Bytes$Encode$unsignedInt32,
							$author$project$Replicated$Codec$endian,
							$elm$bytes$Bytes$Encode$getStringWidth(
								toString(i))),
							$elm$bytes$Bytes$Encode$string(
							toString(i))
						]));
			},
			jsonDecoder: A2(
				$elm$json$Json$Decode$map,
				A2(
					$elm$core$Basics$composeR,
					fromString($elm$core$Maybe$Nothing),
					$elm$core$Result$Ok),
				$elm$json$Json$Decode$string),
			jsonEncoder: A2($elm$core$Basics$composeR, toString, $elm$json$Json$Encode$string),
			nodeDecoder: function (inputs) {
				return A2(
					$elm$json$Json$Decode$map,
					A2(
						$elm$core$Basics$composeR,
						fromString(
							$elm$core$Maybe$Just(inputs.node)),
						$elm$core$Result$Ok),
					$elm$json$Json$Decode$string);
			},
			nodeEncoder: nodeEncoder,
			nodePlaceholder: $author$project$Replicated$Codec$flatInit
		});
}();
var $author$project$Activity$Activity$BuiltInActivityID = function (a) {
	return {$: 'BuiltInActivityID', a: a};
};
var $author$project$Activity$Activity$CustomActivityID = F2(
	function (a, b) {
		return {$: 'CustomActivityID', a: a, b: b};
	});
var $author$project$Activity$Template$DillyDally = {$: 'DillyDally'};
var $author$project$Activity$Template$Apparel = {$: 'Apparel'};
var $author$project$Activity$Template$Bedward = {$: 'Bedward'};
var $author$project$Activity$Template$BrainTrain = {$: 'BrainTrain'};
var $author$project$Activity$Template$Broadcast = {$: 'Broadcast'};
var $author$project$Activity$Template$Browse = {$: 'Browse'};
var $author$project$Activity$Template$Call = {$: 'Call'};
var $author$project$Activity$Template$Children = {$: 'Children'};
var $author$project$Activity$Template$Chores = {$: 'Chores'};
var $author$project$Activity$Template$Cinema = {$: 'Cinema'};
var $author$project$Activity$Template$Configure = {$: 'Configure'};
var $author$project$Activity$Template$Course = {$: 'Course'};
var $author$project$Activity$Template$Create = {$: 'Create'};
var $author$project$Activity$Template$Driving = {$: 'Driving'};
var $author$project$Activity$Template$Email = {$: 'Email'};
var $author$project$Activity$Template$Fiction = {$: 'Fiction'};
var $author$project$Activity$Template$FilmWatching = {$: 'FilmWatching'};
var $author$project$Activity$Template$Finance = {$: 'Finance'};
var $author$project$Activity$Template$Flight = {$: 'Flight'};
var $author$project$Activity$Template$Floss = {$: 'Floss'};
var $author$project$Activity$Template$Grooming = {$: 'Grooming'};
var $author$project$Activity$Template$Homework = {$: 'Homework'};
var $author$project$Activity$Template$Housekeeping = {$: 'Housekeeping'};
var $author$project$Activity$Template$Laundry = {$: 'Laundry'};
var $author$project$Activity$Template$Learning = {$: 'Learning'};
var $author$project$Activity$Template$Lover = {$: 'Lover'};
var $author$project$Activity$Template$Meal = {$: 'Meal'};
var $author$project$Activity$Template$MealPrep = {$: 'MealPrep'};
var $author$project$Activity$Template$Meditate = {$: 'Meditate'};
var $author$project$Activity$Template$Meeting = {$: 'Meeting'};
var $author$project$Activity$Template$Messaging = {$: 'Messaging'};
var $author$project$Activity$Template$Music = {$: 'Music'};
var $author$project$Activity$Template$Networking = {$: 'Networking'};
var $author$project$Activity$Template$Pacing = {$: 'Pacing'};
var $author$project$Activity$Template$Parents = {$: 'Parents'};
var $author$project$Activity$Template$Pet = {$: 'Pet'};
var $author$project$Activity$Template$Plan = {$: 'Plan'};
var $author$project$Activity$Template$Prepare = {$: 'Prepare'};
var $author$project$Activity$Template$Presentation = {$: 'Presentation'};
var $author$project$Activity$Template$Projects = {$: 'Projects'};
var $author$project$Activity$Template$Research = {$: 'Research'};
var $author$project$Activity$Template$Restroom = {$: 'Restroom'};
var $author$project$Activity$Template$Riding = {$: 'Riding'};
var $author$project$Activity$Template$Series = {$: 'Series'};
var $author$project$Activity$Template$Shopping = {$: 'Shopping'};
var $author$project$Activity$Template$Shower = {$: 'Shower'};
var $author$project$Activity$Template$Sleep = {$: 'Sleep'};
var $author$project$Activity$Template$SocialMedia = {$: 'SocialMedia'};
var $author$project$Activity$Template$Sport = {$: 'Sport'};
var $author$project$Activity$Template$Supplements = {$: 'Supplements'};
var $author$project$Activity$Template$Theatre = {$: 'Theatre'};
var $author$project$Activity$Template$Toothbrush = {$: 'Toothbrush'};
var $author$project$Activity$Template$VideoGaming = {$: 'VideoGaming'};
var $author$project$Activity$Template$Wakeup = {$: 'Wakeup'};
var $author$project$Activity$Template$Work = {$: 'Work'};
var $author$project$Activity$Template$Workout = {$: 'Workout'};
var $author$project$Activity$Template$allExceptDillyDally = _List_fromArray(
	[$author$project$Activity$Template$Apparel, $author$project$Activity$Template$Messaging, $author$project$Activity$Template$Restroom, $author$project$Activity$Template$Grooming, $author$project$Activity$Template$Meal, $author$project$Activity$Template$Supplements, $author$project$Activity$Template$Workout, $author$project$Activity$Template$Shower, $author$project$Activity$Template$Toothbrush, $author$project$Activity$Template$Floss, $author$project$Activity$Template$Wakeup, $author$project$Activity$Template$Sleep, $author$project$Activity$Template$Plan, $author$project$Activity$Template$Configure, $author$project$Activity$Template$Email, $author$project$Activity$Template$Work, $author$project$Activity$Template$Call, $author$project$Activity$Template$Chores, $author$project$Activity$Template$Parents, $author$project$Activity$Template$Prepare, $author$project$Activity$Template$Lover, $author$project$Activity$Template$Driving, $author$project$Activity$Template$Riding, $author$project$Activity$Template$SocialMedia, $author$project$Activity$Template$Pacing, $author$project$Activity$Template$Sport, $author$project$Activity$Template$Finance, $author$project$Activity$Template$Laundry, $author$project$Activity$Template$Bedward, $author$project$Activity$Template$Browse, $author$project$Activity$Template$Fiction, $author$project$Activity$Template$Learning, $author$project$Activity$Template$BrainTrain, $author$project$Activity$Template$Music, $author$project$Activity$Template$Create, $author$project$Activity$Template$Children, $author$project$Activity$Template$Meeting, $author$project$Activity$Template$Cinema, $author$project$Activity$Template$FilmWatching, $author$project$Activity$Template$Series, $author$project$Activity$Template$Broadcast, $author$project$Activity$Template$Theatre, $author$project$Activity$Template$Shopping, $author$project$Activity$Template$VideoGaming, $author$project$Activity$Template$Housekeeping, $author$project$Activity$Template$MealPrep, $author$project$Activity$Template$Networking, $author$project$Activity$Template$Meditate, $author$project$Activity$Template$Homework, $author$project$Activity$Template$Flight, $author$project$Activity$Template$Course, $author$project$Activity$Template$Pet, $author$project$Activity$Template$Presentation, $author$project$Activity$Template$Projects, $author$project$Activity$Template$Research]);
var $author$project$Replicated$Codec$buildNestableCodec = F6(
	function (encoder_, decoder_, jsonEncoder, jsonDecoder, ronEncoder, ronDecoder) {
		return $author$project$Replicated$Codec$Codec(
			{bytesDecoder: decoder_, bytesEncoder: encoder_, jsonDecoder: jsonDecoder, jsonEncoder: jsonEncoder, nodeDecoder: ronDecoder, nodeEncoder: ronEncoder, nodePlaceholder: $author$project$Replicated$Codec$flatInit});
	});
var $author$project$Replicated$Codec$findIndexHelp = F3(
	function (index, predicate, list_) {
		findIndexHelp:
		while (true) {
			if (!list_.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list_.a;
				var xs = list_.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list_ = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list_ = $temp$list_;
					continue findIndexHelp;
				}
			}
		}
	});
var $author$project$Replicated$Codec$findIndex = $author$project$Replicated$Codec$findIndexHelp(0);
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$Replicated$Codec$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$Replicated$Codec$singlePrimitiveOut = function (singlePrimitiveAtom) {
	return {
		complex: $mgold$elm_nonempty_list$List$Nonempty$singleton(
			$author$project$Replicated$Change$FromPrimitiveAtom(singlePrimitiveAtom)),
		primitive: $mgold$elm_nonempty_list$List$Nonempty$singleton(singlePrimitiveAtom)
	};
};
var $author$project$Replicated$Codec$quickEnum = F2(
	function (defaultItem, items) {
		var getItem = function (index) {
			return (index < 0) ? $elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted) : ((_Utils_cmp(
				index,
				$elm$core$List$length(items)) > 0) ? $elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted) : $elm$core$Result$Ok(
				A2(
					$elm$core$Maybe$withDefault,
					defaultItem,
					A2($author$project$Replicated$Codec$getAt, index - 1, items))));
		};
		var getIndex = function (value) {
			return 1 + A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$author$project$Replicated$Codec$findIndex,
					$elm$core$Basics$eq(value),
					items));
		};
		var intNodeEncoder = function (_v1) {
			var thingToEncode = _v1.thingToEncode;
			return $author$project$Replicated$Codec$singlePrimitiveOut(
				$author$project$Replicated$Change$IntegerAtom(
					getIndex(
						$author$project$Replicated$Codec$getEncodedPrimitive(thingToEncode))));
		};
		return A6(
			$author$project$Replicated$Codec$buildNestableCodec,
			A2(
				$elm$core$Basics$composeR,
				getIndex,
				$elm$bytes$Bytes$Encode$unsignedInt32($author$project$Replicated$Codec$endian)),
			A2(
				$elm$bytes$Bytes$Decode$map,
				getItem,
				$elm$bytes$Bytes$Decode$unsignedInt32($author$project$Replicated$Codec$endian)),
			A2($elm$core$Basics$composeR, getIndex, $elm$json$Json$Encode$int),
			A2($elm$json$Json$Decode$map, getItem, $elm$json$Json$Decode$int),
			intNodeEncoder,
			function (_v0) {
				return A2($elm$json$Json$Decode$map, getItem, $elm$json$Json$Decode$int);
			});
	});
var $author$project$Activity$Template$codec = A2($author$project$Replicated$Codec$quickEnum, $author$project$Activity$Template$DillyDally, $author$project$Activity$Template$allExceptDillyDally);
var $author$project$Replicated$Codec$CustomTypeCodec = function (a) {
	return {$: 'CustomTypeCodec', a: a};
};
var $author$project$Replicated$Codec$customType = function (matcher) {
	var noMatchFound = F2(
		function (givenTagNum, orElse) {
			return orElse;
		});
	return $author$project$Replicated$Codec$CustomTypeCodec(
		{bytesDecoder: noMatchFound, bytesMatcher: matcher, idCounter: 0, jsonDecoder: noMatchFound, jsonMatcher: matcher, nodeDecoder: noMatchFound, nodeMatcher: matcher});
};
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $elm$bytes$Bytes$Decode$unsignedInt16 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u16(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $author$project$Replicated$Codec$finishCustomType = function (_v0) {
	var priorVariants = _v0.a;
	var nodeEncoder = function (nodeEncoderInputs) {
		var nodeMatcher = priorVariants.nodeMatcher(
			$author$project$Replicated$Codec$getEncodedPrimitive(nodeEncoderInputs.thingToEncode));
		var newInputs = {mode: nodeEncoderInputs.mode, node: nodeEncoderInputs.node, parent: nodeEncoderInputs.parent, position: nodeEncoderInputs.position};
		var getNodeVariantEncoder = function (_v4) {
			var encoders = _v4.a;
			return encoders.node(newInputs);
		};
		return {
			complex: getNodeVariantEncoder(nodeMatcher)
		};
	};
	var nodeDecoder = function (inputs) {
		var getTagNum = function (tag) {
			return A2(
				$elm$core$Maybe$withDefault,
				-1,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					$elm_community$list_extra$List$Extra$last(
						A2($elm$core$String$split, '_', tag))));
		};
		var checkTag = function (tag) {
			return A3(
				priorVariants.nodeDecoder,
				getTagNum(tag),
				function (_v3) {
					return $elm$json$Json$Decode$succeed(
						$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted));
				},
				inputs);
		};
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$andThen,
					checkTag,
					A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string)),
					A2($elm$json$Json$Decode$andThen, checkTag, $elm$json$Json$Decode$string)
				]));
	};
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: A2(
				$elm$bytes$Bytes$Decode$andThen,
				function (tag) {
					return A2(
						priorVariants.bytesDecoder,
						tag,
						$elm$bytes$Bytes$Decode$succeed(
							$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted)));
				},
				$elm$bytes$Bytes$Decode$unsignedInt16($author$project$Replicated$Codec$endian)),
			bytesEncoder: A2(
				$elm$core$Basics$composeR,
				priorVariants.bytesMatcher,
				function (_v1) {
					var encoders = _v1.a;
					return encoders.bytes;
				}),
			jsonDecoder: A2(
				$elm$json$Json$Decode$andThen,
				function (tag) {
					return A2(
						priorVariants.jsonDecoder,
						tag,
						$elm$json$Json$Decode$succeed(
							$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted)));
				},
				A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int)),
			jsonEncoder: A2(
				$elm$core$Basics$composeR,
				priorVariants.jsonMatcher,
				function (_v2) {
					var encoders = _v2.a;
					return encoders.json;
				}),
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: function (inputs) {
				return inputs.seed;
			}
		});
};
var $author$project$Replicated$Change$Location$nest = F3(
	function (_v0, layerName, layerIndex) {
		var backwardsLayerList = _v0.a;
		return $author$project$Replicated$Change$Location$AncestryBackwards(
			A2(
				$elm$core$List$cons,
				A2($author$project$Replicated$Change$Location$NestMultiple, layerName, layerIndex),
				backwardsLayerList));
	});
var $author$project$Replicated$Codec$getNodeEncoderModifiedForVariants = F3(
	function (index, codec, thingToEncode) {
		var finishInputs = function (modifiedEncoder) {
			return {
				mode: modifiedEncoder.mode,
				node: modifiedEncoder.node,
				parent: modifiedEncoder.parent,
				position: A3($author$project$Replicated$Change$Location$nest, modifiedEncoder.position, 'piece', index),
				thingToEncode: $author$project$Replicated$Codec$EncodeThis(thingToEncode)
			};
		};
		return function (altInputs) {
			return A2(
				$author$project$Replicated$Codec$getNodeEncoder,
				codec,
				finishInputs(altInputs)).complex;
		};
	});
var $author$project$Replicated$Change$becomeInstantParent = function (pointer) {
	return A2($author$project$Replicated$Change$Parent, pointer, $elm$core$Maybe$Nothing);
};
var $author$project$Replicated$Codec$passNDInputs = F2(
	function (pieceNum, inputsND) {
		return _Utils_update(
			inputsND,
			{
				parent: $author$project$Replicated$Change$becomeInstantParent(
					$author$project$Replicated$Change$newPointer(
						{
							parent: inputsND.parent,
							position: A3($author$project$Replicated$Change$Location$nest, inputsND.position, 'piece', pieceNum),
							reducerID: 'variant'
						})),
				position: A3($author$project$Replicated$Change$Location$nest, inputsND.position, 'piece', pieceNum)
			});
	});
var $author$project$Replicated$Codec$result1 = F2(
	function (ctor, value) {
		if (value.$ === 'Ok') {
			var ok = value.a;
			return $elm$core$Result$Ok(
				ctor(ok));
		} else {
			var err = value.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Replicated$Codec$VariantEncoder = function (a) {
	return {$: 'VariantEncoder', a: a};
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$bytes$Bytes$Encode$U16 = F2(
	function (a, b) {
		return {$: 'U16', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt16 = $elm$bytes$Bytes$Encode$U16;
var $author$project$Replicated$Codec$variantBuilder = F8(
	function (_v0, piecesBytesEncoder, piecesJsonEncoder, piecesNodeEncoder, piecesBytesDecoder, piecesJsonDecoder, piecesNodeDecoder, _v1) {
		var tagNum = _v0.a;
		var tagName = _v0.b;
		var priorVariants = _v1.a;
		var unwrapND = F2(
			function (tagNumToDecode, orElse) {
				return _Utils_eq(tagNumToDecode, tagNum) ? piecesNodeDecoder : A2(priorVariants.nodeDecoder, tagNumToDecode, orElse);
			});
		var unwrapJD = F2(
			function (tagNumToDecode, orElse) {
				return _Utils_eq(tagNumToDecode, tagNum) ? piecesJsonDecoder : A2(priorVariants.jsonDecoder, tagNumToDecode, orElse);
			});
		var unwrapBD = F2(
			function (tagNumToDecode, orElse) {
				return _Utils_eq(tagNumToDecode, tagNum) ? piecesBytesDecoder : A2(priorVariants.bytesDecoder, tagNumToDecode, orElse);
			});
		var nodeTag = $author$project$Replicated$Change$FromPrimitiveAtom(
			$author$project$Replicated$Change$NakedStringAtom(
				tagName + ('_' + $elm$core$String$fromInt(tagNum))));
		var wrapBE = function (variantPieces) {
			return $author$project$Replicated$Codec$VariantEncoder(
				{
					bytes: $elm$bytes$Bytes$Encode$sequence(
						A2(
							$elm$core$List$cons,
							A2($elm$bytes$Bytes$Encode$unsignedInt16, $author$project$Replicated$Codec$endian, tagNum),
							variantPieces)),
					json: $elm$json$Json$Encode$null,
					node: function (_v3) {
						return $mgold$elm_nonempty_list$List$Nonempty$singleton(
							$author$project$Replicated$Change$NestedAtoms(
								$mgold$elm_nonempty_list$List$Nonempty$singleton(nodeTag)));
					}
				});
		};
		var wrapJE = function (variantPieces) {
			return $author$project$Replicated$Codec$VariantEncoder(
				{
					bytes: $elm$bytes$Bytes$Encode$sequence(_List_Nil),
					json: A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						A2(
							$elm$core$List$cons,
							$elm$json$Json$Encode$string(
								$elm$core$String$fromInt(tagNum) + ('_' + tagName)),
							variantPieces)),
					node: function (_v2) {
						return $mgold$elm_nonempty_list$List$Nonempty$singleton(
							$author$project$Replicated$Change$NestedAtoms(
								$mgold$elm_nonempty_list$List$Nonempty$singleton(nodeTag)));
					}
				});
		};
		var wrapNE = function (variantEncoders) {
			var applyIndexedInputs = F3(
				function (inputs, index, encoderFunction) {
					return encoderFunction(
						_Utils_update(
							inputs,
							{
								position: A3(
									$author$project$Replicated$Change$Location$nest,
									inputs.position,
									tagName + ('(' + ($elm$core$String$fromInt(tagNum) + ')')),
									index)
							}));
				});
			var piecesApplied = function (inputs) {
				return A2(
					$elm$core$List$concatMap,
					$mgold$elm_nonempty_list$List$Nonempty$toList,
					A2(
						$elm$core$List$indexedMap,
						applyIndexedInputs(inputs),
						variantEncoders));
			};
			return $author$project$Replicated$Codec$VariantEncoder(
				{
					bytes: $elm$bytes$Bytes$Encode$sequence(_List_Nil),
					json: $elm$json$Json$Encode$null,
					node: function (inputs) {
						return $mgold$elm_nonempty_list$List$Nonempty$singleton(
							$author$project$Replicated$Change$NestedAtoms(
								A2(
									$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
									nodeTag,
									piecesApplied(inputs))));
					}
				});
		};
		return $author$project$Replicated$Codec$CustomTypeCodec(
			{
				bytesDecoder: unwrapBD,
				bytesMatcher: priorVariants.bytesMatcher(
					piecesBytesEncoder(wrapBE)),
				idCounter: priorVariants.idCounter + 1,
				jsonDecoder: unwrapJD,
				jsonMatcher: priorVariants.jsonMatcher(
					piecesJsonEncoder(wrapJE)),
				nodeDecoder: unwrapND,
				nodeMatcher: priorVariants.nodeMatcher(
					piecesNodeEncoder(wrapNE))
			});
	});
var $author$project$Replicated$Codec$variant1 = F3(
	function (tag, ctor, codec1) {
		return A7(
			$author$project$Replicated$Codec$variantBuilder,
			tag,
			F2(
				function (wrapper, v) {
					return wrapper(
						_List_fromArray(
							[
								A2($author$project$Replicated$Codec$getBytesEncoder, codec1, v)
							]));
				}),
			F2(
				function (wrapper, v) {
					return wrapper(
						_List_fromArray(
							[
								A2($author$project$Replicated$Codec$getJsonEncoder, codec1, v)
							]));
				}),
			F2(
				function (wrapper, v) {
					return wrapper(
						_List_fromArray(
							[
								A3($author$project$Replicated$Codec$getNodeEncoderModifiedForVariants, 1, codec1, v)
							]));
				}),
			A2(
				$elm$bytes$Bytes$Decode$map,
				$author$project$Replicated$Codec$result1(ctor),
				$author$project$Replicated$Codec$getBytesDecoder(codec1)),
			A2(
				$elm$json$Json$Decode$map,
				$author$project$Replicated$Codec$result1(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Replicated$Codec$getJsonDecoder(codec1))),
			function (inputsND) {
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Replicated$Codec$result1(ctor),
					A2(
						$elm$json$Json$Decode$index,
						1,
						A2(
							$author$project$Replicated$Codec$getNodeDecoder,
							codec1,
							A2($author$project$Replicated$Codec$passNDInputs, 1, inputsND))));
			});
	});
var $author$project$Replicated$Codec$result2 = F3(
	function (ctor, v1, v2) {
		var _v0 = _Utils_Tuple2(v1, v2);
		if (_v0.a.$ === 'Ok') {
			if (_v0.b.$ === 'Ok') {
				var ok1 = _v0.a.a;
				var ok2 = _v0.b.a;
				return $elm$core$Result$Ok(
					A2(ctor, ok1, ok2));
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Replicated$Codec$variant2 = F4(
	function (tag, ctor, codec1, codec2) {
		return A7(
			$author$project$Replicated$Codec$variantBuilder,
			tag,
			F3(
				function (wrapper, v1, v2) {
					return wrapper(
						_List_fromArray(
							[
								A2($author$project$Replicated$Codec$getBytesEncoder, codec1, v1),
								A2($author$project$Replicated$Codec$getBytesEncoder, codec2, v2)
							]));
				}),
			F3(
				function (wrapper, v1, v2) {
					return wrapper(
						_List_fromArray(
							[
								A2($author$project$Replicated$Codec$getJsonEncoder, codec1, v1),
								A2($author$project$Replicated$Codec$getJsonEncoder, codec2, v2)
							]));
				}),
			F3(
				function (wrapper, v1, v2) {
					return wrapper(
						_List_fromArray(
							[
								A3($author$project$Replicated$Codec$getNodeEncoderModifiedForVariants, 1, codec1, v1),
								A3($author$project$Replicated$Codec$getNodeEncoderModifiedForVariants, 2, codec2, v2)
							]));
				}),
			A3(
				$elm$bytes$Bytes$Decode$map2,
				$author$project$Replicated$Codec$result2(ctor),
				$author$project$Replicated$Codec$getBytesDecoder(codec1),
				$author$project$Replicated$Codec$getBytesDecoder(codec2)),
			A3(
				$elm$json$Json$Decode$map2,
				$author$project$Replicated$Codec$result2(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$author$project$Replicated$Codec$getJsonDecoder(codec1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$author$project$Replicated$Codec$getJsonDecoder(codec2))),
			function (inputsND) {
				return A3(
					$elm$json$Json$Decode$map2,
					$author$project$Replicated$Codec$result2(ctor),
					A2(
						$elm$json$Json$Decode$index,
						1,
						A2(
							$author$project$Replicated$Codec$getNodeDecoder,
							codec1,
							A2($author$project$Replicated$Codec$passNDInputs, 1, inputsND))),
					A2(
						$elm$json$Json$Decode$index,
						2,
						A2(
							$author$project$Replicated$Codec$getNodeDecoder,
							codec2,
							A2($author$project$Replicated$Codec$passNDInputs, 2, inputsND))));
			});
	});
var $author$project$Activity$Activity$idCodec = $author$project$Replicated$Codec$finishCustomType(
	A5(
		$author$project$Replicated$Codec$variant2,
		_Utils_Tuple2(2, 'CustomActivity'),
		$author$project$Activity$Activity$CustomActivityID,
		$author$project$Activity$Template$codec,
		$author$project$Replicated$Codec$id,
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(1, 'BuiltInActivity'),
			$author$project$Activity$Activity$BuiltInActivityID,
			$author$project$Activity$Template$codec,
			$author$project$Replicated$Codec$customType(
				F3(
					function (builtInActivity, customActivity, value) {
						if (value.$ === 'BuiltInActivityID') {
							var template = value.a;
							return builtInActivity(template);
						} else {
							var template = value.a;
							var customActivityID = value.b;
							return A2(customActivity, template, customActivityID);
						}
					})))));
var $author$project$Replicated$Codec$NodeEncoderInputs = F5(
	function (node, mode, thingToEncode, parent, position) {
		return {mode: mode, node: node, parent: parent, position: position, thingToEncode: thingToEncode};
	});
var $author$project$Replicated$Codec$PlaceholderInputs = F3(
	function (parent, position, seed) {
		return {parent: parent, position: position, seed: seed};
	});
var $author$project$Replicated$Codec$map = F3(
	function (fromAtoB, fromBtoA, codec) {
		var wrappedInitializer = function (inputs) {
			return fromAtoB(
				A2(
					$author$project$Replicated$Codec$getInitializer,
					codec,
					A3(
						$author$project$Replicated$Codec$PlaceholderInputs,
						inputs.parent,
						inputs.position,
						fromBtoA(inputs.seed))));
		};
		var mapThingToEncode = function (original) {
			if (original.$ === 'EncodeThis') {
				var a = original.a;
				return $author$project$Replicated$Codec$EncodeThis(
					fromBtoA(a));
			} else {
				var objectIDs = original.a;
				var fieldVal = original.b;
				return A2(
					$author$project$Replicated$Codec$EncodeObjectOrThis,
					objectIDs,
					fromBtoA(fieldVal));
			}
		};
		var mapNodeEncoderInputs = function (inputs) {
			return A5(
				$author$project$Replicated$Codec$NodeEncoderInputs,
				inputs.node,
				inputs.mode,
				mapThingToEncode(inputs.thingToEncode),
				inputs.parent,
				inputs.position);
		};
		var fromResultData = function (value) {
			if (value.$ === 'Ok') {
				var ok = value.a;
				return $elm$core$Result$Ok(
					fromAtoB(ok));
			} else {
				var err = value.a;
				return $elm$core$Result$Err(err);
			}
		};
		var wrappedNodeDecoder = function (inputs) {
			return A2(
				$elm$json$Json$Decode$map,
				fromResultData,
				A2($author$project$Replicated$Codec$getNodeDecoder, codec, inputs));
		};
		return $author$project$Replicated$Codec$Codec(
			{
				bytesDecoder: A2(
					$elm$bytes$Bytes$Decode$map,
					fromResultData,
					$author$project$Replicated$Codec$getBytesDecoder(codec)),
				bytesEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getBytesEncoder,
						codec,
						fromBtoA(v));
				},
				jsonDecoder: A2(
					$elm$json$Json$Decode$map,
					fromResultData,
					$author$project$Replicated$Codec$getJsonDecoder(codec)),
				jsonEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getJsonEncoder,
						codec,
						fromBtoA(v));
				},
				nodeDecoder: wrappedNodeDecoder,
				nodeEncoder: function (inputs) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						codec,
						mapNodeEncoderInputs(inputs));
				},
				nodePlaceholder: wrappedInitializer
			});
	});
var $author$project$Replicated$Codec$variant0 = F2(
	function (tag, ctor) {
		return A7(
			$author$project$Replicated$Codec$variantBuilder,
			tag,
			function (wrapper) {
				return wrapper(_List_Nil);
			},
			function (wrapper) {
				return wrapper(_List_Nil);
			},
			function (wrapper) {
				return wrapper(_List_Nil);
			},
			$elm$bytes$Bytes$Decode$succeed(
				$elm$core$Result$Ok(ctor)),
			$elm$json$Json$Decode$succeed(
				$elm$core$Result$Ok(ctor)),
			function (_v0) {
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(ctor));
			});
	});
var $author$project$Replicated$Codec$maybe = function (justCodec) {
	return $author$project$Replicated$Codec$finishCustomType(
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(1, 'Just'),
			$elm$core$Maybe$Just,
			justCodec,
			A3(
				$author$project$Replicated$Codec$variant0,
				_Utils_Tuple2(0, 'Nothing'),
				$elm$core$Maybe$Nothing,
				$author$project$Replicated$Codec$customType(
					F3(
						function (nothingEncoder, justEncoder, value) {
							if (value.$ === 'Nothing') {
								return nothingEncoder;
							} else {
								var value_ = value.a;
								return justEncoder(value_);
							}
						})))));
};
var $elm$bytes$Bytes$Decode$float64 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_f64(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm$bytes$Bytes$Encode$F64 = F2(
	function (a, b) {
		return {$: 'F64', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$float64 = $elm$bytes$Bytes$Encode$F64;
var $author$project$Replicated$Codec$int = A6(
	$author$project$Replicated$Codec$buildNestableCodec,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Basics$toFloat,
		$elm$bytes$Bytes$Encode$float64($author$project$Replicated$Codec$endian)),
	A2(
		$elm$bytes$Bytes$Decode$map,
		A2($elm$core$Basics$composeR, $elm$core$Basics$round, $elm$core$Result$Ok),
		$elm$bytes$Bytes$Decode$float64($author$project$Replicated$Codec$endian)),
	$elm$json$Json$Encode$int,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$int),
	function (_v0) {
		var thingToEncode = _v0.thingToEncode;
		return $author$project$Replicated$Codec$singlePrimitiveOut(
			$author$project$Replicated$Change$IntegerAtom(
				$author$project$Replicated$Codec$getEncodedPrimitive(thingToEncode)));
	},
	function (_v1) {
		return A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$int);
	});
var $author$project$ExtraCodecs$moment = A3($author$project$Replicated$Codec$map, $author$project$SmartTime$Moment$fromSmartInt, $author$project$SmartTime$Moment$toSmartInt, $author$project$Replicated$Codec$int);
var $author$project$Replicated$Codec$record = function (remainingConstructor) {
	return $author$project$Replicated$Codec$PartialRegister(
		{
			bytesDecoder: $elm$bytes$Bytes$Decode$succeed(
				$elm$core$Result$Ok(remainingConstructor)),
			bytesEncoder: function (_v0) {
				return _List_Nil;
			},
			fieldIndex: 0,
			jsonArrayDecoder: $elm$json$Json$Decode$succeed(
				$elm$core$Result$Ok(remainingConstructor)),
			jsonEncoders: _List_Nil,
			nodeDecoder: function (_v1) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(remainingConstructor),
					_List_Nil);
			},
			nodeEncoders: _List_Nil,
			nodeInitializer: F2(
				function (_v2, _v3) {
					return remainingConstructor;
				})
		});
};
var $author$project$Replicated$Codec$DefaultAndInitWithParentSeed = F2(
	function (a, b) {
		return {$: 'DefaultAndInitWithParentSeed', a: a, b: b};
	});
var $author$project$Replicated$Codec$seededR = F6(
	function (fieldID, fieldGetter, fieldCodec, _default, seeder, recordBuilt) {
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			fieldCodec,
			A2($author$project$Replicated$Codec$DefaultAndInitWithParentSeed, _default, seeder),
			recordBuilt);
	});
var $author$project$Activity$Session$codec = A3(
	$author$project$Replicated$Codec$map,
	$author$project$Activity$Session$Session,
	function (_v0) {
		var skel = _v0.a;
		return skel;
	},
	$author$project$Replicated$Codec$finishSeededRecord(
		A6(
			$author$project$Replicated$Codec$seededR,
			_Utils_Tuple2(4, 'action'),
			function ($) {
				return $.action;
			},
			$author$project$Replicated$Codec$maybe($author$project$Replicated$Codec$id),
			$elm$core$Maybe$Nothing,
			function ($) {
				return $.action;
			},
			A5(
				$author$project$Replicated$Codec$coreR,
				_Utils_Tuple2(3, 'activity'),
				function ($) {
					return $.activity;
				},
				$author$project$Activity$Activity$idCodec,
				function ($) {
					return $.activity;
				},
				A5(
					$author$project$Replicated$Codec$coreR,
					_Utils_Tuple2(2, 'end'),
					function ($) {
						return $.end;
					},
					$author$project$ExtraCodecs$moment,
					function ($) {
						return $.end;
					},
					A5(
						$author$project$Replicated$Codec$coreR,
						_Utils_Tuple2(1, 'start'),
						function ($) {
							return $.start;
						},
						$author$project$ExtraCodecs$moment,
						function ($) {
							return $.start;
						},
						$author$project$Replicated$Codec$record($author$project$Activity$Session$SessionSkel)))))));
var $author$project$Activity$Timeline$CurrentSession = F3(
	function (start, activity, action) {
		return {action: action, activity: activity, start: start};
	});
var $author$project$Activity$Timeline$currentSessionCodec = $author$project$Replicated$Codec$finishSeededRecord(
	A5(
		$author$project$Replicated$Codec$coreR,
		_Utils_Tuple2(3, 'action'),
		function ($) {
			return $.action;
		},
		$author$project$Replicated$Codec$maybe($author$project$Replicated$Codec$id),
		function ($) {
			return $.action;
		},
		A5(
			$author$project$Replicated$Codec$coreR,
			_Utils_Tuple2(2, 'activity'),
			function ($) {
				return $.activity;
			},
			$author$project$Activity$Activity$idCodec,
			function ($) {
				return $.activity;
			},
			A5(
				$author$project$Replicated$Codec$coreR,
				_Utils_Tuple2(1, 'start'),
				function ($) {
					return $.start;
				},
				$author$project$ExtraCodecs$moment,
				function ($) {
					return $.start;
				},
				$author$project$Replicated$Codec$record($author$project$Activity$Timeline$CurrentSession)))));
var $author$project$Replicated$Codec$PlaceholderDefault = function (a) {
	return {$: 'PlaceholderDefault', a: a};
};
var $author$project$Replicated$Change$NewPayloadWithRef = function (a) {
	return {$: 'NewPayloadWithRef', a: a};
};
var $author$project$Replicated$Reducer$RepList$Handle = function (a) {
	return {$: 'Handle', a: a};
};
var $author$project$Replicated$Reducer$RepList$RepList = function (a) {
	return {$: 'RepList', a: a};
};
var $author$project$Replicated$Object$eventPayloadAsJson = function (_v0) {
	var event = _v0.a;
	var _v1 = A2($elm$core$List$map, $author$project$Replicated$Op$Op$atomToJsonValue, event.payload);
	if (!_v1.b) {
		return $elm$json$Json$Encode$null;
	} else {
		if (!_v1.b.b) {
			var single = _v1.a;
			return single;
		} else {
			var multiple = _v1;
			return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, multiple);
		}
	}
};
var $author$project$Replicated$Object$eventReference = function (_v0) {
	var event = _v0.a;
	return event.referencedOp;
};
var $author$project$Replicated$Object$eventReverted = function (_v0) {
	var event = _v0.a;
	return event.reverted;
};
var $author$project$Replicated$Object$getIncluded = function (object) {
	if (object.$ === 'Saved') {
		var initializedObject = object.a;
		return initializedObject.included;
	} else {
		var uninitializedObject = object.a;
		return $author$project$Replicated$Object$All;
	}
};
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Replicated$Reducer$RepList$buildFromReplicaDb = F4(
	function (targetObject, payloadToMember, memberAdder, init) {
		var eventToItem = function (_v5) {
			var eventID = _v5.a;
			var event = _v5.b;
			var _v4 = _Utils_Tuple2(
				payloadToMember(
					$author$project$Replicated$Object$eventPayloadAsJson(event)),
				$author$project$Replicated$Object$eventReverted(event));
			if ((_v4.a.$ === 'Just') && (!_v4.b)) {
				var item = _v4.a.a;
				return $elm$core$Maybe$Just(
					{
						handle: $author$project$Replicated$Reducer$RepList$Handle(eventID),
						value: item
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var compareEvents = F2(
			function (_v2, _v3) {
				var eventIDA = _v2.a;
				var eventA = _v2.b;
				var eventIDB = _v3.a;
				var eventB = _v3.b;
				var _v0 = A2(
					$elm$core$Basics$compare,
					$author$project$Replicated$Op$OpID$toSortablePrimitives(
						$author$project$Replicated$Object$eventReference(eventA)),
					$author$project$Replicated$Op$OpID$toSortablePrimitives(
						$author$project$Replicated$Object$eventReference(eventB)));
				switch (_v0.$) {
					case 'GT':
						return $elm$core$Basics$GT;
					case 'LT':
						return $elm$core$Basics$LT;
					default:
						var _v1 = A2(
							$elm$core$Basics$compare,
							$author$project$Replicated$Op$OpID$toSortablePrimitives(eventIDA),
							$author$project$Replicated$Op$OpID$toSortablePrimitives(eventIDB));
						switch (_v1.$) {
							case 'GT':
								return $elm$core$Basics$LT;
							case 'LT':
								return $elm$core$Basics$GT;
							default:
								return $elm$core$Basics$EQ;
						}
				}
			});
		var sortedEventsAsItems = function () {
			var sortedEvents = A2(
				$elm$core$List$sortWith,
				compareEvents,
				$turboMaCk$any_dict$Dict$Any$toList(
					$author$project$Replicated$Object$getEvents(targetObject)));
			return A2($elm$core$List$filterMap, eventToItem, sortedEvents);
		}();
		return $author$project$Replicated$Reducer$RepList$RepList(
			{
				included: $author$project$Replicated$Object$getIncluded(targetObject),
				memberAdder: memberAdder,
				members: sortedEventsAsItems,
				pointer: $author$project$Replicated$Object$getPointer(targetObject),
				startWith: init
			});
	});
var $elm$bytes$Bytes$Decode$fail = $elm$bytes$Bytes$Decode$Decoder(_Bytes_decodeFailure);
var $author$project$Replicated$Reducer$RepList$getInit = function (repList) {
	var record = repList.a;
	return A2(
		$author$project$Replicated$Change$collapseChangesToChangeSet,
		'RepListInit',
		record.startWith(repList));
};
var $author$project$Replicated$Reducer$RepList$getPointer = function (_v0) {
	var repSet = _v0.a;
	return repSet.pointer;
};
var $author$project$Replicated$Codec$justInit = function (placeholderPointer) {
	var soloObject = {changeSet: $author$project$Replicated$Change$emptyChangeSet, skippable: true, toReference: placeholderPointer};
	return {
		complex: $author$project$Replicated$Change$complexFromSolo(soloObject),
		nested: soloObject
	};
};
var $author$project$Replicated$Codec$listEncode = F2(
	function (encoder_, list_) {
		return $elm$bytes$Bytes$Encode$sequence(
			A2(
				$elm$core$List$cons,
				A2(
					$elm$bytes$Bytes$Encode$unsignedInt32,
					$author$project$Replicated$Codec$endian,
					$elm$core$List$length(list_)),
				A2($elm$core$List$map, encoder_, list_)));
	});
var $author$project$Replicated$Reducer$RepList$listValues = function (_v0) {
	var repSetRecord = _v0.a;
	return A2(
		$elm$core$List$map,
		function ($) {
			return $.value;
		},
		repSetRecord.members);
};
var $author$project$Replicated$Reducer$RepList$reducerID = 'replist';
var $author$project$Replicated$Codec$repList = function (memberCodec) {
	var repListRonEncoder = function (details) {
		var node = details.node;
		var thingToEncode = details.thingToEncode;
		var mode = details.mode;
		var parent = details.parent;
		var position = details.position;
		if (thingToEncode.$ === 'EncodeThis') {
			var givenRepList = thingToEncode.a;
			var externalChanges = $author$project$Replicated$Reducer$RepList$getInit(givenRepList);
			return $author$project$Replicated$Codec$soloOut(
				$author$project$Replicated$Change$changeObjectWithExternal(
					{
						externalUpdates: externalChanges,
						objectChanges: _List_Nil,
						target: $author$project$Replicated$Reducer$RepList$getPointer(givenRepList)
					}));
		} else {
			var repListPointer = $author$project$Replicated$Change$newPointer(
				{parent: parent, position: position, reducerID: $author$project$Replicated$Reducer$RepList$reducerID});
			return $author$project$Replicated$Codec$justInit(repListPointer);
		}
	};
	var normalJsonDecoder = $elm$json$Json$Decode$fail('no replist');
	var memberRonDecoder = F2(
		function (_v5, encodedMember) {
			var node = _v5.node;
			var parent = _v5.parent;
			var cutoff = _v5.cutoff;
			var _v4 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2(
					$author$project$Replicated$Codec$getNodeDecoder,
					memberCodec,
					{
						cutoff: cutoff,
						node: node,
						parent: parent,
						position: $author$project$Replicated$Change$Location$newSingle('repListContainer')
					}),
				encodedMember);
			if ((_v4.$ === 'Ok') && (_v4.a.$ === 'Ok')) {
				var member = _v4.a.a;
				return $elm$core$Maybe$Just(member);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
	var memberChanger = F4(
		function (_v3, memberIndex, newMemberValue, newRefMaybe) {
			var node = _v3.node;
			var modeMaybe = _v3.modeMaybe;
			var parent = _v3.parent;
			var memberNodeEncoded = A2(
				$author$project$Replicated$Codec$getNodeEncoder,
				memberCodec,
				{
					mode: A2($elm$core$Maybe$withDefault, $author$project$Replicated$Codec$defaultEncodeMode, modeMaybe),
					node: node,
					parent: parent,
					position: memberIndex,
					thingToEncode: $author$project$Replicated$Codec$EncodeThis(newMemberValue)
				}).complex;
			if (newRefMaybe.$ === 'Just') {
				var givenRef = newRefMaybe.a;
				return $author$project$Replicated$Change$NewPayloadWithRef(
					{payload: memberNodeEncoded, ref: givenRef});
			} else {
				return $author$project$Replicated$Change$NewPayload(memberNodeEncoded);
			}
		});
	var repListRonDecoder = function (_v1) {
		var node = _v1.node;
		var parent = _v1.parent;
		var cutoff = _v1.cutoff;
		var position = _v1.position;
		var repListBuilder = function (foundObjectIDs) {
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: cutoff, foundIDs: foundObjectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepList$reducerID});
			var repListPointer = $author$project$Replicated$Object$getPointer(object);
			var repListAsParent = $author$project$Replicated$Change$becomeInstantParent(repListPointer);
			var finalPayloadToMember = memberRonDecoder(
				{cutoff: cutoff, node: node, parent: repListAsParent});
			var finalMemberChanger = memberChanger(
				{modeMaybe: $elm$core$Maybe$Nothing, node: node, parent: repListAsParent});
			return $elm$core$Result$Ok(
				A4($author$project$Replicated$Reducer$RepList$buildFromReplicaDb, object, finalPayloadToMember, finalMemberChanger, $author$project$Replicated$Codec$nonChanger));
		};
		return A2($elm$json$Json$Decode$map, repListBuilder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	var jsonEncoder = function (input) {
		return A2(
			$elm$json$Json$Encode$list,
			$author$project$Replicated$Codec$getJsonEncoder(memberCodec),
			$author$project$Replicated$Reducer$RepList$listValues(input));
	};
	var initializer = function (_v0) {
		var parent = _v0.parent;
		var position = _v0.position;
		var seed = _v0.seed;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepList$reducerID});
		var repListAsParent = $author$project$Replicated$Change$becomeInstantParent(
			$author$project$Replicated$Object$getPointer(object));
		var finalPayloadToMember = memberRonDecoder(
			{cutoff: $elm$core$Maybe$Nothing, node: $author$project$Replicated$Node$Node$testNode, parent: repListAsParent});
		var finalMemberChanger = memberChanger(
			{modeMaybe: $elm$core$Maybe$Nothing, node: $author$project$Replicated$Node$Node$testNode, parent: repListAsParent});
		var repListBuilder = A4($author$project$Replicated$Reducer$RepList$buildFromReplicaDb, object, finalPayloadToMember, finalMemberChanger, seed);
		return repListBuilder;
	};
	var bytesEncoder = function (input) {
		return A2(
			$author$project$Replicated$Codec$listEncode,
			$author$project$Replicated$Codec$getBytesEncoder(memberCodec),
			$author$project$Replicated$Reducer$RepList$listValues(input));
	};
	return $author$project$Replicated$Codec$Codec(
		{bytesDecoder: $elm$bytes$Bytes$Decode$fail, bytesEncoder: bytesEncoder, jsonDecoder: normalJsonDecoder, jsonEncoder: jsonEncoder, nodeDecoder: repListRonDecoder, nodeEncoder: repListRonEncoder, nodePlaceholder: initializer});
};
var $author$project$Replicated$Codec$fieldList = F4(
	function (fieldID, fieldGetter, fieldCodec, recordBuilt) {
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			$author$project$Replicated$Codec$repList(fieldCodec),
			$author$project$Replicated$Codec$PlaceholderDefault($author$project$Replicated$Codec$nonChanger),
			recordBuilt);
	});
var $author$project$Replicated$Codec$finishRecord = function (partial) {
	var allFieldsCodec = partial.a;
	var nodeEncoder = function (inputs) {
		return A2($author$project$Replicated$Codec$recordNodeEncoder, partial, inputs);
	};
	var nodeDecoder = function (_v5) {
		var node = _v5.node;
		var parent = _v5.parent;
		var position = _v5.position;
		var cutoff = _v5.cutoff;
		var nakedRegisterDecoder = function (objectIDs) {
			var regToRecordByInit = allFieldsCodec.nodeInitializer;
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: cutoff, foundIDs: objectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
			var regPointer = $author$project$Replicated$Object$getPointer(object);
			var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
			var regToRecordByDecodingMaybe = function () {
				var _v4 = allFieldsCodec.nodeDecoder(
					{cutoff: cutoff, history: history, node: node, regPointer: regPointer});
				if (!_v4.b.b) {
					var success = _v4.a;
					return success;
				} else {
					var recovered = _v4.a;
					var errors = _v4.b;
					return A2(
						$author$project$Log$log,
						'regToRecordByDecoding returned errors! ' + ($author$project$Log$dump(errors) + (' while decoding record at ' + $author$project$Replicated$Change$Location$toString(position))),
						recovered);
				}
			}();
			var finalRecord = function () {
				if (regToRecordByDecodingMaybe.$ === 'Just') {
					var recordDecoded = regToRecordByDecodingMaybe.a;
					return recordDecoded;
				} else {
					return A2(
						$author$project$Log$crashInDev,
						'nakedRegisterDecoder decoded nothing!',
						A2(regToRecordByInit, _Utils_Tuple0, regPointer));
				}
			}();
			return $elm$json$Json$Decode$succeed(
				$elm$core$Result$Ok(finalRecord));
		};
		return A2($elm$json$Json$Decode$andThen, nakedRegisterDecoder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	var jsonDecoder = allFieldsCodec.jsonArrayDecoder;
	var encodeEntryInDictList = F2(
		function (fullRecord, _v2) {
			var fieldKey = _v2.a;
			var entryValueEncoder = _v2.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string(fieldKey),
						entryValueEncoder(fullRecord)
					]));
		});
	var encodeAsJsonObject = function (nakedRecord) {
		var fullRecord = nakedRecord;
		var passFullRecordToFieldEncoder = function (_v1) {
			var fieldKey = _v1.a;
			var fieldEncoder = _v1.b;
			return _Utils_Tuple2(
				fieldKey,
				fieldEncoder(fullRecord));
		};
		return $elm$json$Json$Encode$object(
			A2($elm$core$List$map, passFullRecordToFieldEncoder, allFieldsCodec.jsonEncoders));
	};
	var encodeAsDictList = function (fullRecord) {
		return A2(
			$elm$json$Json$Encode$list,
			encodeEntryInDictList(fullRecord),
			allFieldsCodec.jsonEncoders);
	};
	var emptyRegister = function (_v0) {
		var parent = _v0.parent;
		var position = _v0.position;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		return A2(
			allFieldsCodec.nodeInitializer,
			_Utils_Tuple0,
			$author$project$Replicated$Object$getPointer(object));
	};
	var bytesDecoder = allFieldsCodec.bytesDecoder;
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: bytesDecoder,
			bytesEncoder: A2(
				$elm$core$Basics$composeR,
				allFieldsCodec.bytesEncoder,
				A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence)),
			jsonDecoder: jsonDecoder,
			jsonEncoder: encodeAsJsonObject,
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: emptyRegister
		});
};
var $author$project$Replicated$Codec$makeOpaque = F3(
	function (fromAtoB, fromBtoA, codec) {
		var wrappedInitializer = function (inputs) {
			return fromAtoB(
				A2(
					$author$project$Replicated$Codec$getInitializer,
					codec,
					A3($author$project$Replicated$Codec$PlaceholderInputs, inputs.parent, inputs.position, inputs.seed)));
		};
		var mapThingToEncode = function (original) {
			if (original.$ === 'EncodeThis') {
				var a = original.a;
				return $author$project$Replicated$Codec$EncodeThis(
					fromBtoA(a));
			} else {
				var objectIDs = original.a;
				var fieldVal = original.b;
				return A2(
					$author$project$Replicated$Codec$EncodeObjectOrThis,
					objectIDs,
					fromBtoA(fieldVal));
			}
		};
		var mapNodeEncoderInputs = function (inputs) {
			return A5(
				$author$project$Replicated$Codec$NodeEncoderInputs,
				inputs.node,
				inputs.mode,
				mapThingToEncode(inputs.thingToEncode),
				inputs.parent,
				inputs.position);
		};
		var fromResultData = function (value) {
			if (value.$ === 'Ok') {
				var ok = value.a;
				return $elm$core$Result$Ok(
					fromAtoB(ok));
			} else {
				var err = value.a;
				return $elm$core$Result$Err(err);
			}
		};
		var wrappedNodeDecoder = function (inputs) {
			return A2(
				$elm$json$Json$Decode$map,
				fromResultData,
				A2($author$project$Replicated$Codec$getNodeDecoder, codec, inputs));
		};
		return $author$project$Replicated$Codec$Codec(
			{
				bytesDecoder: A2(
					$elm$bytes$Bytes$Decode$map,
					fromResultData,
					$author$project$Replicated$Codec$getBytesDecoder(codec)),
				bytesEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getBytesEncoder,
						codec,
						fromBtoA(v));
				},
				jsonDecoder: A2(
					$elm$json$Json$Decode$map,
					fromResultData,
					$author$project$Replicated$Codec$getJsonDecoder(codec)),
				jsonEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getJsonEncoder,
						codec,
						fromBtoA(v));
				},
				nodeDecoder: wrappedNodeDecoder,
				nodeEncoder: function (inputs) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						codec,
						mapNodeEncoderInputs(inputs));
				},
				nodePlaceholder: wrappedInitializer
			});
	});
var $author$project$Replicated$Codec$HardcodedDefault = function (a) {
	return {$: 'HardcodedDefault', a: a};
};
var $author$project$Replicated$Change$WithFrameIndex = function (a) {
	return {$: 'WithFrameIndex', a: a};
};
var $author$project$Replicated$Codec$buildRW = F4(
	function (targetObject, _v0, nestedRonEncoder, latestValue) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		var nestedChange = function (newValue) {
			return A2(
				$author$project$Replicated$Codec$encodeFieldPayloadAsObjectPayload,
				_Utils_Tuple2(fieldSlot, fieldName),
				nestedRonEncoder(newValue).complex);
		};
		var setter = function (setValue) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: _List_fromArray(
						[
							$author$project$Replicated$Change$NewPayload(
							nestedChange(setValue))
						]),
					target: targetObject
				}).changeSet;
		};
		return {
			get: latestValue,
			set: function (setValue) {
				return $author$project$Replicated$Change$WithFrameIndex(
					function (_v1) {
						return setter(setValue);
					});
			}
		};
	});
var $author$project$Replicated$Codec$registerWritableFieldDecoder = F6(
	function (index, fieldIdentifier, fallback, isDelayable, fieldCodec, inputs) {
		var fieldSlot = fieldIdentifier.a;
		var fieldName = fieldIdentifier.b;
		var regAsParent = isDelayable ? A2(
			$author$project$Replicated$Change$becomeDelayedParent,
			inputs.regPointer,
			A2(
				$author$project$Replicated$Codec$updateRegisterPostChildInit,
				inputs.regPointer,
				_Utils_Tuple2(fieldSlot, fieldName))) : $author$project$Replicated$Change$becomeInstantParent(inputs.regPointer);
		var fieldEncoder = function (newValue) {
			return A2(
				$author$project$Replicated$Codec$getNodeEncoder,
				fieldCodec,
				{
					mode: $author$project$Replicated$Codec$defaultEncodeMode,
					node: inputs.node,
					parent: regAsParent,
					position: A2(
						$author$project$Replicated$Change$Location$new,
						A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
						index),
					thingToEncode: $author$project$Replicated$Codec$EncodeThis(newValue)
				});
		};
		var wrapRW = F2(
			function (targetObject, head) {
				return A4($author$project$Replicated$Codec$buildRW, targetObject, fieldIdentifier, fieldEncoder, head);
			});
		var _v0 = A5($author$project$Replicated$Codec$registerReadOnlyFieldDecoder, index, fieldIdentifier, fallback, fieldCodec, inputs);
		if (_v0.a.$ === 'Just') {
			var thingToWrap = _v0.a.a;
			var errorsSoFar = _v0.b;
			return _Utils_Tuple2(
				$elm$core$Maybe$Just(
					A2(wrapRW, inputs.regPointer, thingToWrap)),
				errorsSoFar);
		} else {
			var previousShowstopper = _v0.a;
			var errorsSoFar = _v0.b;
			return _Utils_Tuple2($elm$core$Maybe$Nothing, errorsSoFar);
		}
	});
var $author$project$Replicated$Codec$writableHelper = F6(
	function (_v0, fieldGetter, fieldCodec, fallback, isDelayable, _v1) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		var recordCodecSoFar = _v1.a;
		var newFieldIndex = recordCodecSoFar.fieldIndex + 1;
		var nodeDecoder = function (inputs) {
			var _v3 = A6(
				$author$project$Replicated$Codec$registerWritableFieldDecoder,
				newFieldIndex,
				_Utils_Tuple2(fieldSlot, fieldName),
				fallback,
				isDelayable,
				fieldCodec,
				inputs);
			var thisFieldValueMaybe = _v3.a;
			var thisFieldErrors = _v3.b;
			var _v4 = recordCodecSoFar.nodeDecoder(inputs);
			var remainingRecordConstructorMaybe = _v4.a;
			var soFarErrors = _v4.b;
			var updatedConstructorMaybe = function () {
				var _v5 = _Utils_Tuple2(thisFieldValueMaybe, remainingRecordConstructorMaybe);
				if (_v5.a.$ === 'Just') {
					if (_v5.b.$ === 'Just') {
						var thisFieldValue = _v5.a.a;
						var remainingRecordConstructor = _v5.b.a;
						return $elm$core$Maybe$Just(
							remainingRecordConstructor(thisFieldValue));
					} else {
						var _v7 = _v5.b;
						return A2($author$project$Log$crashInDev, 'Codec.writableHelper.nodeDecoder:' + (fieldName + ' field was missing prior constructor..'), $elm$core$Maybe$Nothing);
					}
				} else {
					var _v6 = _v5.a;
					return A2(
						$author$project$Log$crashInDev,
						'Codec.writableHelper.nodeDecoder: \'' + (fieldName + ('\' field decoded to nothing.. error was ' + ($elm$core$Debug$toString(thisFieldErrors) + (' for the object at ' + ($elm$core$Debug$toString(inputs.regPointer) + (' with history ' + $elm$core$Debug$toString(
							A2($elm$core$Dict$get, fieldSlot, inputs.history)))))))),
						$elm$core$Maybe$Nothing);
				}
			}();
			return _Utils_Tuple2(
				updatedConstructorMaybe,
				_Utils_ap(soFarErrors, thisFieldErrors));
		};
		var nodeEncoderEntry = function (inputs) {
			var inputsWithSpecificFieldValue = {
				existingValMaybe: A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						fieldGetter,
						function ($) {
							return $.get;
						}),
					inputs.existingValMaybe),
				history: inputs.history,
				mode: inputs.mode,
				node: inputs.node,
				regPointer: inputs.regPointer
			};
			return A5(
				$author$project$Replicated$Codec$newRegisterFieldEncoderEntry,
				newFieldIndex,
				_Utils_Tuple2(fieldSlot, fieldName),
				fallback,
				fieldCodec,
				inputsWithSpecificFieldValue);
		};
		var jsonObjectFieldKey = _Utils_ap(
			fieldName,
			$elm$core$String$fromInt(fieldSlot));
		var asParent = function (regPointer) {
			return isDelayable ? A2(
				$author$project$Replicated$Change$becomeDelayedParent,
				regPointer,
				A2(
					$author$project$Replicated$Codec$updateRegisterPostChildInit,
					regPointer,
					_Utils_Tuple2(fieldSlot, fieldName))) : $author$project$Replicated$Change$becomeInstantParent(regPointer);
		};
		var nodeInitializer = F2(
			function (parentSeed, regPointer) {
				var fieldInit = function (seed) {
					return A2(
						$author$project$Replicated$Codec$getInitializer,
						fieldCodec,
						{
							parent: asParent(regPointer),
							position: A2(
								$author$project$Replicated$Change$Location$new,
								A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
								newFieldIndex),
							seed: seed
						});
				};
				var fieldValue = function () {
					switch (fallback.$) {
						case 'HardcodedDefault':
							var fieldType = fallback.a;
							return fieldType;
						case 'PlaceholderDefault':
							var fieldSeed = fallback.a;
							return fieldInit(fieldSeed);
						case 'InitWithParentSeed':
							var parentSeedToFieldSeed = fallback.a;
							return fieldInit(
								parentSeedToFieldSeed(parentSeed));
						case 'DefaultFromParentSeed':
							var parentSeedToFieldDefault = fallback.a;
							return parentSeedToFieldDefault(parentSeed);
						default:
							var _default = fallback.a;
							var parentSeedToFieldSeed = fallback.b;
							return fieldInit(
								parentSeedToFieldSeed(parentSeed));
					}
				}();
				var fieldEncoder = function (newValue) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						fieldCodec,
						{
							mode: $author$project$Replicated$Codec$defaultEncodeMode,
							node: $author$project$Replicated$Node$Node$testNode,
							parent: asParent(regPointer),
							position: A2(
								$author$project$Replicated$Change$Location$new,
								A2($author$project$Replicated$Codec$fieldLocationLabel, fieldName, fieldSlot),
								newFieldIndex),
							thingToEncode: $author$project$Replicated$Codec$EncodeThis(newValue)
						});
				};
				var wrapRW = function (head) {
					return A4(
						$author$project$Replicated$Codec$buildRW,
						regPointer,
						_Utils_Tuple2(fieldSlot, fieldName),
						fieldEncoder,
						head);
				};
				var applyToRemaining = A2(recordCodecSoFar.nodeInitializer, parentSeed, regPointer);
				return applyToRemaining(
					wrapRW(fieldValue));
			});
		var addToPartialJsonEncoderList = A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				jsonObjectFieldKey,
				A2(
					$elm$core$Basics$composeL,
					$author$project$Replicated$Codec$getJsonEncoder(fieldCodec),
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.get;
						},
						fieldGetter))),
			recordCodecSoFar.jsonEncoders);
		var addToPartialBytesEncoderList = function (existingRecord) {
			return A2(
				$elm$core$List$cons,
				A2(
					$author$project$Replicated$Codec$getBytesEncoder,
					fieldCodec,
					function ($) {
						return $.get;
					}(
						fieldGetter(existingRecord))),
				recordCodecSoFar.bytesEncoder(existingRecord));
		};
		return $author$project$Replicated$Codec$PartialRegister(
			{
				bytesDecoder: $elm$bytes$Bytes$Decode$fail,
				bytesEncoder: addToPartialBytesEncoderList,
				fieldIndex: newFieldIndex,
				jsonArrayDecoder: $elm$json$Json$Decode$fail('Can\'t use RW wrapper with JSON decoding'),
				jsonEncoders: addToPartialJsonEncoderList,
				nodeDecoder: nodeDecoder,
				nodeEncoders: A2($elm$core$List$cons, nodeEncoderEntry, recordCodecSoFar.nodeEncoders),
				nodeInitializer: nodeInitializer
			});
	});
var $author$project$Replicated$Codec$maybeRW = F4(
	function (fieldIdentifier, fieldGetter, fieldCodec, soFar) {
		return A6(
			$author$project$Replicated$Codec$writableHelper,
			fieldIdentifier,
			fieldGetter,
			$author$project$Replicated$Codec$maybe(fieldCodec),
			$author$project$Replicated$Codec$HardcodedDefault($elm$core$Maybe$Nothing),
			false,
			soFar);
	});
var $author$project$Activity$Timeline$codec = A3(
	$author$project$Replicated$Codec$makeOpaque,
	$author$project$Activity$Timeline$Timeline,
	function (_v0) {
		var skel = _v0.a;
		return skel;
	},
	$author$project$Replicated$Codec$finishRecord(
		A4(
			$author$project$Replicated$Codec$fieldList,
			_Utils_Tuple2(2, 'history'),
			function ($) {
				return $.history;
			},
			$author$project$Activity$Session$codec,
			A4(
				$author$project$Replicated$Codec$maybeRW,
				_Utils_Tuple2(1, 'current'),
				function ($) {
					return $.current;
				},
				$author$project$Activity$Timeline$currentSessionCodec,
				$author$project$Replicated$Codec$record($author$project$Activity$Timeline$TimelineSkel)))));
var $author$project$Task$ActionClass$ActionClassSkel = function (title) {
	return function (activity) {
		return function (completionUnits) {
			return function (minEffort) {
				return function (predictedEffort) {
					return function (maxEffort) {
						return function (defaultExternalDeadline) {
							return function (defaultStartBy) {
								return function (defaultFinishBy) {
									return function (defaultRelevanceStarts) {
										return function (defaultRelevanceEnds) {
											return function (importance) {
												return function (extra) {
													return {activity: activity, completionUnits: completionUnits, defaultExternalDeadline: defaultExternalDeadline, defaultFinishBy: defaultFinishBy, defaultRelevanceEnds: defaultRelevanceEnds, defaultRelevanceStarts: defaultRelevanceStarts, defaultStartBy: defaultStartBy, extra: extra, importance: importance, maxEffort: maxEffort, minEffort: minEffort, predictedEffort: predictedEffort, title: title};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Task$Progress$Percent = {$: 'Percent'};
var $author$project$Replicated$Codec$coreRW = F5(
	function (fieldID, fieldGetter, fieldCodec, seeder, recordBuilt) {
		return A6(
			$author$project$Replicated$Codec$writableHelper,
			fieldID,
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$InitWithParentSeed(seeder),
			false,
			recordBuilt);
	});
var $author$project$ExtraCodecs$duration = A3($author$project$Replicated$Codec$map, $author$project$SmartTime$Duration$fromInt, $author$project$SmartTime$Duration$inMs, $author$project$Replicated$Codec$int);
var $author$project$Replicated$Reducer$RepDict$Cleared = function (a) {
	return {$: 'Cleared', a: a};
};
var $author$project$Replicated$Reducer$RepDict$Present = F2(
	function (a, b) {
		return {$: 'Present', a: a, b: b};
	});
var $author$project$Replicated$Reducer$RepDict$RepDict = function (a) {
	return {$: 'RepDict', a: a};
};
var $author$project$Replicated$Change$RevertOp = function (a) {
	return {$: 'RevertOp', a: a};
};
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $turboMaCk$any_dict$Dict$Any$fromList = F2(
	function (f, xs) {
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var k = _v0.a;
							var v = _v0.b;
							return _Utils_Tuple2(
								f(k),
								_Utils_Tuple2(k, v));
						},
						xs)),
				toKey: f
			});
	});
var $author$project$Replicated$Object$getCreationID = function (object) {
	if (object.$ === 'Saved') {
		var initializedObject = object.a;
		return $elm$core$Maybe$Just(initializedObject.creation);
	} else {
		var uninitializedObject = object.a;
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Replicated$Reducer$RepDict$reducerID = 'replist';
var $author$project$Replicated$Reducer$RepDict$buildFromReplicaDb = F5(
	function (targetObject, payloadToEntry, memberAdder, keyToString, initChanger) {
		var remover = F2(
			function (containerExistingID, inclusionEventID) {
				return $author$project$Replicated$Change$changeObject(
					{
						objectChanges: _List_fromArray(
							[
								$author$project$Replicated$Change$RevertOp(inclusionEventID)
							]),
						target: $author$project$Replicated$Change$ExistingObjectPointer(containerExistingID)
					}).changeSet;
			});
		var eventToMemberPair = F2(
			function (containerExistingID, _v3) {
				var eventID = _v3.a;
				var event = _v3.b;
				var _v1 = _Utils_Tuple2(
					payloadToEntry(
						$author$project$Replicated$Object$eventPayloadAsJson(event)),
					$author$project$Replicated$Object$eventReverted(event));
				if (((_v1.a.$ === 'Just') && (_v1.a.a.$ === 'Present')) && (!_v1.b)) {
					var _v2 = _v1.a.a;
					var key = _v2.a;
					var val = _v2.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							key,
							{
								remove: A2(remover, containerExistingID, eventID),
								value: val
							}));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
		var eventsAsMemberPairs = function () {
			var _v0 = $author$project$Replicated$Object$getCreationID(targetObject);
			if (_v0.$ === 'Just') {
				var objectID = _v0.a;
				return A2(
					$elm$core$List$filterMap,
					eventToMemberPair(
						A2($author$project$Replicated$Change$ExistingID, $author$project$Replicated$Reducer$RepDict$reducerID, objectID)),
					$turboMaCk$any_dict$Dict$Any$toList(
						$author$project$Replicated$Object$getEvents(targetObject)));
			} else {
				return _List_Nil;
			}
		}();
		return $author$project$Replicated$Reducer$RepDict$RepDict(
			{
				included: $author$project$Replicated$Object$getIncluded(targetObject),
				memberAdder: memberAdder,
				members: A2($turboMaCk$any_dict$Dict$Any$fromList, keyToString, eventsAsMemberPairs),
				pointer: $author$project$Replicated$Object$getPointer(targetObject),
				startWith: initChanger
			});
	});
var $author$project$Replicated$Reducer$RepDict$getInit = function (repDict) {
	var record = repDict.a;
	return A2(
		$author$project$Replicated$Change$collapseChangesToChangeSet,
		'RepDictInit',
		record.startWith(repDict));
};
var $author$project$Replicated$Reducer$RepDict$getPointer = function (_v0) {
	var repDict = _v0.a;
	return repDict.pointer;
};
var $mgold$elm_nonempty_list$List$Nonempty$indexedMap = F2(
	function (f, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		var wrapped = F2(
			function (i, d) {
				return A2(f, i + 1, d);
			});
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			A2(f, 0, x),
			A2($elm$core$List$indexedMap, wrapped, xs));
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$Replicated$Codec$listStep = F2(
	function (decoder_, _v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed(
			$elm$bytes$Bytes$Decode$Done(
				$elm$core$Result$Ok(
					$elm$core$List$reverse(xs)))) : A2(
			$elm$bytes$Bytes$Decode$map,
			function (x) {
				if (x.$ === 'Ok') {
					var ok = x.a;
					return $elm$bytes$Bytes$Decode$Loop(
						_Utils_Tuple2(
							n - 1,
							A2($elm$core$List$cons, ok, xs)));
				} else {
					var err = x.a;
					return $elm$bytes$Bytes$Decode$Done(
						$elm$core$Result$Err(err));
				}
			},
			decoder_);
	});
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $author$project$Replicated$Codec$list = function (codec) {
	var normalJsonDecoder = A2(
		$elm$json$Json$Decode$map,
		A2(
			$elm$core$List$foldr,
			F2(
				function (value, state) {
					var _v3 = _Utils_Tuple2(value, state);
					if (_v3.b.$ === 'Err') {
						return state;
					} else {
						if (_v3.a.$ === 'Ok') {
							var ok = _v3.a.a;
							var okState = _v3.b.a;
							return $elm$core$Result$Ok(
								A2($elm$core$List$cons, ok, okState));
						} else {
							var error = _v3.a.a;
							return $elm$core$Result$Err(error);
						}
					}
				}),
			$elm$core$Result$Ok(_List_Nil)),
		$elm$json$Json$Decode$list(
			$author$project$Replicated$Codec$getJsonDecoder(codec)));
	var nodeEncoder = function (inputs) {
		var _v2 = $author$project$Replicated$Codec$getEncodedPrimitive(inputs.thingToEncode);
		if (!_v2.b) {
			return {
				complex: $mgold$elm_nonempty_list$List$Nonempty$singleton(
					$author$project$Replicated$Change$FromPrimitiveAtom(
						$author$project$Replicated$Change$NakedStringAtom('[]')))
			};
		} else {
			var headItem = _v2.a;
			var moreItems = _v2.b;
			var memberNodeEncoded = F2(
				function (index, item) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						codec,
						{
							mode: inputs.mode,
							node: inputs.node,
							parent: inputs.parent,
							position: A2($author$project$Replicated$Change$Location$new, 'primitiveListItem', index),
							thingToEncode: $author$project$Replicated$Codec$EncodeThis(item)
						}).complex;
				});
			return {
				complex: $mgold$elm_nonempty_list$List$Nonempty$concat(
					A2(
						$mgold$elm_nonempty_list$List$Nonempty$indexedMap,
						memberNodeEncoded,
						A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, headItem, moreItems)))
			};
		}
	};
	var nodeDecoder = function (_v1) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$andThen,
					function (v) {
						return (v === '[]') ? $elm$json$Json$Decode$succeed(
							$elm$core$Result$Ok(_List_Nil)) : $elm$json$Json$Decode$fail('Not empty');
					},
					$elm$json$Json$Decode$string),
					normalJsonDecoder
				]));
	};
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: A2(
				$elm$bytes$Bytes$Decode$andThen,
				function (length) {
					return A2(
						$elm$bytes$Bytes$Decode$loop,
						_Utils_Tuple2(length, _List_Nil),
						$author$project$Replicated$Codec$listStep(
							$author$project$Replicated$Codec$getBytesDecoder(codec)));
				},
				$elm$bytes$Bytes$Decode$unsignedInt32($author$project$Replicated$Codec$endian)),
			bytesEncoder: $author$project$Replicated$Codec$listEncode(
				$author$project$Replicated$Codec$getBytesEncoder(codec)),
			jsonDecoder: normalJsonDecoder,
			jsonEncoder: $elm$json$Json$Encode$list(
				$author$project$Replicated$Codec$getJsonEncoder(codec)),
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: function (_v0) {
				var seed = _v0.seed;
				return seed;
			}
		});
};
var $author$project$Replicated$Reducer$RepDict$listMembers = function (_v0) {
	var repSetRecord = _v0.a;
	return $turboMaCk$any_dict$Dict$Any$toList(repSetRecord.members);
};
var $author$project$Replicated$Reducer$RepDict$list = function (repDict) {
	return A2(
		$elm$core$List$map,
		function (_v0) {
			var k = _v0.a;
			var v = _v0.b;
			return _Utils_Tuple2(k, v.value);
		},
		$author$project$Replicated$Reducer$RepDict$listMembers(repDict));
};
var $author$project$Replicated$Codec$pair = F2(
	function (codecFirst, codecSecond) {
		return $author$project$Replicated$Codec$finishCustomType(
			A5(
				$author$project$Replicated$Codec$variant2,
				_Utils_Tuple2(2, 'Pair'),
				$elm$core$Tuple$pair,
				codecFirst,
				codecSecond,
				$author$project$Replicated$Codec$customType(
					F2(
						function (pairEncoder, _v0) {
							var a = _v0.a;
							var b = _v0.b;
							return A2(pairEncoder, a, b);
						}))));
	});
var $author$project$Replicated$Reducer$RepDb$reducerID = 'replist';
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Replicated$Codec$repDict = F2(
	function (keyCodec, valueCodec) {
		var repDictRonEncoder = function (details) {
			var node = details.node;
			var thingToEncode = details.thingToEncode;
			var mode = details.mode;
			var parent = details.parent;
			var position = details.position;
			if (thingToEncode.$ === 'EncodeThis') {
				var givenRepDict = thingToEncode.a;
				var externalChanges = $author$project$Replicated$Reducer$RepDict$getInit(givenRepDict);
				return $author$project$Replicated$Codec$soloOut(
					$author$project$Replicated$Change$changeObjectWithExternal(
						{
							externalUpdates: externalChanges,
							objectChanges: _List_Nil,
							target: $author$project$Replicated$Reducer$RepDict$getPointer(givenRepDict)
						}));
			} else {
				return $author$project$Replicated$Codec$justInit(
					$author$project$Replicated$Change$newPointer(
						{parent: parent, position: position, reducerID: $author$project$Replicated$Reducer$RepDict$reducerID}));
			}
		};
		var keyToString = function (key) {
			return A2(
				$elm$json$Json$Encode$encode,
				0,
				A2($author$project$Replicated$Codec$getJsonEncoder, keyCodec, key));
		};
		var flatDictListCodec = $author$project$Replicated$Codec$list(
			A2($author$project$Replicated$Codec$pair, keyCodec, valueCodec));
		var jsonEncoder = function (input) {
			return A2(
				$author$project$Replicated$Codec$getJsonEncoder,
				flatDictListCodec,
				$author$project$Replicated$Reducer$RepDict$list(input));
		};
		var entryRonEncoder = F5(
			function (node, encodeModeMaybe, parent, entryPosition, newEntry) {
				var valueEncoder = function (givenValue) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						valueCodec,
						{
							mode: A2($elm$core$Maybe$withDefault, $author$project$Replicated$Codec$defaultEncodeMode, encodeModeMaybe),
							node: node,
							parent: $author$project$Replicated$Change$becomeInstantParent(parent),
							position: A2($author$project$Replicated$Change$Location$nestSingle, entryPosition, 'repDictVal'),
							thingToEncode: $author$project$Replicated$Codec$EncodeThis(givenValue)
						});
				};
				var keyEncoder = function (givenKey) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						keyCodec,
						{
							mode: A2($elm$core$Maybe$withDefault, $author$project$Replicated$Codec$defaultEncodeMode, encodeModeMaybe),
							node: node,
							parent: $author$project$Replicated$Change$becomeInstantParent(parent),
							position: A2(
								$author$project$Replicated$Change$Location$nestSingle,
								entryPosition,
								'repDictKey(' + (keyToString(givenKey) + ')')),
							thingToEncode: $author$project$Replicated$Codec$EncodeThis(givenKey)
						});
				};
				if (newEntry.$ === 'Cleared') {
					var key = newEntry.a;
					return keyEncoder(key).complex;
				} else {
					var key = newEntry.a;
					var value = newEntry.b;
					return A2(
						$mgold$elm_nonempty_list$List$Nonempty$append,
						keyEncoder(key).complex,
						valueEncoder(value).complex);
				}
			});
		var entryRonDecoder = F4(
			function (node, parent, cutoff, encodedEntry) {
				var decodeValue = F2(
					function (key, encodedValue) {
						return A2(
							$elm$json$Json$Decode$decodeValue,
							A2(
								$author$project$Replicated$Codec$getNodeDecoder,
								valueCodec,
								{
									cutoff: cutoff,
									node: node,
									parent: $author$project$Replicated$Change$becomeInstantParent(parent),
									position: $author$project$Replicated$Change$Location$newSingle(
										keyToString(key))
								}),
							encodedValue);
					});
				var decodeKey = function (encodedKey) {
					return A2(
						$elm$json$Json$Decode$decodeValue,
						A2(
							$author$project$Replicated$Codec$getNodeDecoder,
							keyCodec,
							{
								cutoff: cutoff,
								node: node,
								parent: $author$project$Replicated$Change$becomeInstantParent(parent),
								position: $author$project$Replicated$Change$Location$newSingle('repDictKey')
							}),
						encodedKey);
				};
				var _v2 = A2(
					$elm$json$Json$Decode$decodeValue,
					$elm$json$Json$Decode$list($elm$json$Json$Decode$value),
					encodedEntry);
				_v2$2:
				while (true) {
					if ((_v2.$ === 'Ok') && _v2.a.b) {
						if (_v2.a.b.b) {
							if (!_v2.a.b.b.b) {
								var _v3 = _v2.a;
								var keyEncoded = _v3.a;
								var _v4 = _v3.b;
								var valueEncoded = _v4.a;
								var _v5 = decodeKey(keyEncoded);
								if ((_v5.$ === 'Ok') && (_v5.a.$ === 'Ok')) {
									var key = _v5.a.a;
									var _v6 = A2(decodeValue, key, valueEncoded);
									if ((_v6.$ === 'Ok') && (_v6.a.$ === 'Ok')) {
										var value = _v6.a.a;
										return $elm$core$Maybe$Just(
											A2($author$project$Replicated$Reducer$RepDict$Present, key, value));
									} else {
										return A2(
											$author$project$Log$crashInDev,
											'entryRonDecoder : found key ' + (keyToString(key) + ' and decoded it, but not able to decode the value'),
											$elm$core$Maybe$Nothing);
									}
								} else {
									return A2($author$project$Log$crashInDev, 'entryRonDecoder : found key and value but not able to decode them?', $elm$core$Maybe$Nothing);
								}
							} else {
								break _v2$2;
							}
						} else {
							var _v7 = _v2.a;
							var keyEncoded = _v7.a;
							var _v8 = decodeKey(keyEncoded);
							if ((_v8.$ === 'Ok') && (_v8.a.$ === 'Ok')) {
								var key = _v8.a.a;
								return $elm$core$Maybe$Just(
									$author$project$Replicated$Reducer$RepDict$Cleared(key));
							} else {
								return A2($author$project$Log$crashInDev, 'entryRonDecoder : found just key alone but not able to decode it', $elm$core$Maybe$Nothing);
							}
						}
					} else {
						break _v2$2;
					}
				}
				var other = _v2;
				return A2($author$project$Log$crashInDev, 'entryRonDecoder : the dict entry wasn\'t in the expected shape', $elm$core$Maybe$Nothing);
			});
		var entryChanger = F5(
			function (node, encodeModeMaybe, parent, entryPosition, newEntry) {
				return $author$project$Replicated$Change$NewPayload(
					A5(entryRonEncoder, node, encodeModeMaybe, parent, entryPosition, newEntry));
			});
		var initializer = function (_v1) {
			var parent = _v1.parent;
			var position = _v1.position;
			var seed = _v1.seed;
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepDb$reducerID});
			var repDbPointer = $author$project$Replicated$Object$getPointer(object);
			return A5(
				$author$project$Replicated$Reducer$RepDict$buildFromReplicaDb,
				object,
				A3(entryRonDecoder, $author$project$Replicated$Node$Node$testNode, repDbPointer, $elm$core$Maybe$Nothing),
				A3(entryChanger, $author$project$Replicated$Node$Node$testNode, $elm$core$Maybe$Nothing, repDbPointer),
				keyToString,
				seed);
		};
		var repDictRonDecoder = function (details) {
			var node = details.node;
			var parent = details.parent;
			var position = details.position;
			var cutoff = details.cutoff;
			var object = function (foundObjectIDs) {
				return $author$project$Replicated$Node$Node$getObject(
					{cutoff: cutoff, foundIDs: foundObjectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepDict$reducerID});
			};
			var repDictBuilder = function (foundObjects) {
				var repDictObject = object(foundObjects);
				var repDictPointer = $author$project$Replicated$Object$getPointer(repDictObject);
				return $elm$core$Result$Ok(
					A5(
						$author$project$Replicated$Reducer$RepDict$buildFromReplicaDb,
						repDictObject,
						A3(entryRonDecoder, node, repDictPointer, cutoff),
						A3(entryChanger, node, $elm$core$Maybe$Nothing, repDictPointer),
						keyToString,
						function (_v0) {
							return _List_Nil;
						}));
			};
			return A2($elm$json$Json$Decode$map, repDictBuilder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
		};
		var bytesEncoder = function (input) {
			return A2(
				$author$project$Replicated$Codec$getBytesEncoder,
				flatDictListCodec,
				$author$project$Replicated$Reducer$RepDict$list(input));
		};
		return $author$project$Replicated$Codec$Codec(
			{
				bytesDecoder: $elm$bytes$Bytes$Decode$fail,
				bytesEncoder: bytesEncoder,
				jsonDecoder: $elm$json$Json$Decode$fail('no repdict'),
				jsonEncoder: jsonEncoder,
				nodeDecoder: repDictRonDecoder,
				nodeEncoder: repDictRonEncoder,
				nodePlaceholder: initializer
			});
	});
var $author$project$Replicated$Codec$fieldDict = F4(
	function (fieldID, fieldGetter, _v0, recordBuilt) {
		var keyCodec = _v0.a;
		var valueCodec = _v0.b;
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			A2($author$project$Replicated$Codec$repDict, keyCodec, valueCodec),
			$author$project$Replicated$Codec$PlaceholderDefault($author$project$Replicated$Codec$nonChanger),
			recordBuilt);
	});
var $author$project$Replicated$Codec$fieldRW = F5(
	function (fieldIdentifier, fieldGetter, fieldCodec, fieldDefault, soFar) {
		return A6(
			$author$project$Replicated$Codec$writableHelper,
			fieldIdentifier,
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$HardcodedDefault(fieldDefault),
			false,
			soFar);
	});
var $author$project$Replicated$Reducer$Register$Register = function (a) {
	return {$: 'Register', a: a};
};
var $author$project$Replicated$Reducer$Register$latest = function (_v0) {
	var registerDetails = _v0.a;
	return registerDetails.latest;
};
var $author$project$Replicated$Codec$registerNodeEncoder = F2(
	function (_v0, _v1) {
		var allFieldsCodec = _v0.a;
		var node = _v1.node;
		var thingToEncode = _v1.thingToEncode;
		var mode = _v1.mode;
		var parent = _v1.parent;
		var position = _v1.position;
		var fallbackObject = function (foundIDs) {
			return $author$project$Replicated$Node$Node$getObject(
				{cutoff: $elm$core$Maybe$Nothing, foundIDs: foundIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		};
		var _v2 = function () {
			if (thingToEncode.$ === 'EncodeThis') {
				var reg = thingToEncode.a;
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(reg),
					$elm$core$Maybe$Just(
						$author$project$Replicated$Reducer$Register$latest(reg)));
			} else {
				var objectIDs = thingToEncode.a;
				var reg = thingToEncode.b;
				return _Utils_Tuple2(
					$elm$core$Maybe$Just(reg),
					$elm$core$Maybe$Just(
						$author$project$Replicated$Reducer$Register$latest(reg)));
			}
		}();
		var regMaybe = _v2.a;
		var recordMaybe = _v2.b;
		var _v4 = function () {
			if (regMaybe.$ === 'Just') {
				var reg = regMaybe.a;
				var regDetails = reg.a;
				return _Utils_Tuple3(
					regDetails.pointer,
					regDetails.history,
					regDetails.init(reg));
			} else {
				return _Utils_Tuple3(
					$author$project$Replicated$Object$getPointer(
						fallbackObject(_List_Nil)),
					$elm$core$Dict$empty,
					_List_Nil);
			}
		}();
		var registerPointer = _v4.a;
		var history = _v4.b;
		var initChanges = _v4.c;
		var subChanges = function () {
			var asObjectChanges = function (subEncoderOutput) {
				if (subEncoderOutput.$ === 'EncodeThisField') {
					var objChange = subEncoderOutput.a;
					return $elm$core$Maybe$Just(objChange);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			};
			var runSubEncoder = function (subEncoderFunction) {
				return asObjectChanges(
					subEncoderFunction(
						{existingValMaybe: recordMaybe, history: history, mode: mode, node: node, regPointer: registerPointer}));
			};
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					A2($elm$core$List$map, runSubEncoder, allFieldsCodec.nodeEncoders)));
		}();
		var allObjectChanges = subChanges;
		return $author$project$Replicated$Codec$soloOut(
			$author$project$Replicated$Change$changeObjectWithExternal(
				{
					externalUpdates: A2($author$project$Replicated$Change$collapseChangesToChangeSet, 'registerInit', initChanges),
					objectChanges: allObjectChanges,
					target: registerPointer
				}));
	});
var $author$project$Replicated$Codec$finishSeededRegister = function (partialRegister) {
	var allFieldsCodec = partialRegister.a;
	var nodeEncoder = function (inputs) {
		return A2($author$project$Replicated$Codec$registerNodeEncoder, partialRegister, inputs);
	};
	var nodeDecoder = function (_v8) {
		var node = _v8.node;
		var parent = _v8.parent;
		var position = _v8.position;
		var cutoff = _v8.cutoff;
		var registerDecoder = function (objectIDs) {
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: cutoff, foundIDs: objectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
			var regPointer = $author$project$Replicated$Object$getPointer(object);
			var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
			var regToRecordByDecoding = function (givenCutoff) {
				return allFieldsCodec.nodeDecoder(
					{cutoff: givenCutoff, history: history, node: node, regPointer: regPointer}).a;
			};
			var regToRecord = F2(
				function (regCanBeBuilt, givenCutoff) {
					var _v7 = regToRecordByDecoding(givenCutoff);
					if (_v7.$ === 'Just') {
						var recordDecoded = _v7.a;
						return recordDecoded;
					} else {
						return regCanBeBuilt;
					}
				});
			var wrongCutoffRegToRecordByDecoding = allFieldsCodec.nodeDecoder(
				{cutoff: $elm$core$Maybe$Nothing, history: history, node: node, regPointer: regPointer}).a;
			if (wrongCutoffRegToRecordByDecoding.$ === 'Just') {
				var regCanBeBuilt = wrongCutoffRegToRecordByDecoding.a;
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(
						$author$project$Replicated$Reducer$Register$Register(
							{
								history: history,
								included: $author$project$Replicated$Object$All,
								init: $author$project$Replicated$Codec$nonChanger,
								latest: A2(regToRecord, regCanBeBuilt, $elm$core$Maybe$Nothing),
								older: A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$Just,
									regToRecord(regCanBeBuilt)),
								pointer: regPointer
							})));
			} else {
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted));
			}
		};
		return A2($elm$json$Json$Decode$andThen, registerDecoder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	var jsonDecoder = $elm$json$Json$Decode$fail('Need to add decoder to reptype');
	var encodeEntryInDictList = F2(
		function (fullRecord, _v5) {
			var fieldKey = _v5.a;
			var entryValueEncoder = _v5.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string(fieldKey),
						entryValueEncoder(fullRecord)
					]));
		});
	var encodeAsJsonObject = function (_v4) {
		var regDetails = _v4.a;
		var fullRecord = regDetails.latest;
		var passFullRecordToFieldEncoder = function (_v3) {
			var fieldKey = _v3.a;
			var fieldEncoder = _v3.b;
			return _Utils_Tuple2(
				fieldKey,
				fieldEncoder(fullRecord));
		};
		return $elm$json$Json$Encode$object(
			A2($elm$core$List$map, passFullRecordToFieldEncoder, allFieldsCodec.jsonEncoders));
	};
	var encodeAsDictList = function (fullRecord) {
		return A2(
			$elm$json$Json$Encode$list,
			encodeEntryInDictList(fullRecord),
			allFieldsCodec.jsonEncoders);
	};
	var emptyRegister = function (_v2) {
		var parent = _v2.parent;
		var position = _v2.position;
		var seed = _v2.seed;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		var regPointer = $author$project$Replicated$Object$getPointer(object);
		var regToRecord = A2(allFieldsCodec.nodeInitializer, seed.a, regPointer);
		var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
		return $author$project$Replicated$Reducer$Register$Register(
			{
				history: history,
				included: $author$project$Replicated$Object$All,
				init: seed.b,
				latest: regToRecord,
				older: function (_v1) {
					return regToRecord;
				},
				pointer: regPointer
			});
	};
	var bytesDecoder = $elm$bytes$Bytes$Decode$fail;
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: bytesDecoder,
			bytesEncoder: function (_v0) {
				var regDetails = _v0.a;
				return A2(
					$elm$core$Basics$composeR,
					allFieldsCodec.bytesEncoder,
					A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence))(regDetails.latest);
			},
			jsonDecoder: jsonDecoder,
			jsonEncoder: encodeAsJsonObject,
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: emptyRegister
		});
};
var $author$project$Replicated$Change$FloatAtom = function (a) {
	return {$: 'FloatAtom', a: a};
};
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $author$project$Replicated$Codec$float = A6(
	$author$project$Replicated$Codec$buildNestableCodec,
	$elm$bytes$Bytes$Encode$float64($author$project$Replicated$Codec$endian),
	A2(
		$elm$bytes$Bytes$Decode$map,
		$elm$core$Result$Ok,
		$elm$bytes$Bytes$Decode$float64($author$project$Replicated$Codec$endian)),
	$elm$json$Json$Encode$float,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$float),
	function (_v0) {
		var thingToEncode = _v0.thingToEncode;
		return $author$project$Replicated$Codec$singlePrimitiveOut(
			$author$project$Replicated$Change$FloatAtom(
				$author$project$Replicated$Codec$getEncodedPrimitive(thingToEncode)));
	},
	function (_v1) {
		return A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$float);
	});
var $author$project$Task$ActionClass$FromDeadline = function (a) {
	return {$: 'FromDeadline', a: a};
};
var $author$project$Task$ActionClass$FromToday = function (a) {
	return {$: 'FromToday', a: a};
};
var $author$project$Task$ActionClass$relativeTimingCodec = $author$project$Replicated$Codec$finishCustomType(
	A4(
		$author$project$Replicated$Codec$variant1,
		_Utils_Tuple2(2, 'FromToday'),
		$author$project$Task$ActionClass$FromToday,
		$author$project$ExtraCodecs$duration,
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(1, 'FromDeadline'),
			$author$project$Task$ActionClass$FromDeadline,
			$author$project$ExtraCodecs$duration,
			$author$project$Replicated$Codec$customType(
				F3(
					function (fromDeadline, fromToday, value) {
						if (value.$ === 'FromDeadline') {
							var duration = value.a;
							return fromDeadline(duration);
						} else {
							var duration = value.a;
							return fromToday(duration);
						}
					})))));
var $author$project$Replicated$Change$StringAtom = function (a) {
	return {$: 'StringAtom', a: a};
};
var $author$project$Replicated$Codec$string = function () {
	var nodeEncoder = function (inputs) {
		return $author$project$Replicated$Codec$singlePrimitiveOut(
			$author$project$Replicated$Change$StringAtom(
				$author$project$Replicated$Codec$getEncodedPrimitive(inputs.thingToEncode)));
	};
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: A2(
				$elm$bytes$Bytes$Decode$andThen,
				function (charCount) {
					return A2(
						$elm$bytes$Bytes$Decode$map,
						$elm$core$Result$Ok,
						$elm$bytes$Bytes$Decode$string(charCount));
				},
				$elm$bytes$Bytes$Decode$unsignedInt32($author$project$Replicated$Codec$endian)),
			bytesEncoder: function (text) {
				return $elm$bytes$Bytes$Encode$sequence(
					_List_fromArray(
						[
							A2(
							$elm$bytes$Bytes$Encode$unsignedInt32,
							$author$project$Replicated$Codec$endian,
							$elm$bytes$Bytes$Encode$getStringWidth(text)),
							$elm$bytes$Bytes$Encode$string(text)
						]));
			},
			jsonDecoder: A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$string),
			jsonEncoder: $elm$json$Json$Encode$string,
			nodeDecoder: function (_v0) {
				return A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$string);
			},
			nodeEncoder: nodeEncoder,
			nodePlaceholder: $author$project$Replicated$Codec$flatInit
		});
}();
var $author$project$Task$Progress$CustomUnit = F2(
	function (a, b) {
		return {$: 'CustomUnit', a: a, b: b};
	});
var $author$project$Task$Progress$Minute = function (a) {
	return {$: 'Minute', a: a};
};
var $author$project$Task$Progress$Permille = {$: 'Permille'};
var $author$project$Task$Progress$Word = function (a) {
	return {$: 'Word', a: a};
};
var $author$project$Task$Progress$unitCodec = $author$project$Replicated$Codec$finishCustomType(
	A5(
		$author$project$Replicated$Codec$variant2,
		_Utils_Tuple2(3, 'CustomUnit'),
		$author$project$Task$Progress$CustomUnit,
		A2($author$project$Replicated$Codec$pair, $author$project$Replicated$Codec$string, $author$project$Replicated$Codec$string),
		$author$project$Replicated$Codec$int,
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(3, 'Minute'),
			$author$project$Task$Progress$Minute,
			$author$project$Replicated$Codec$int,
			A4(
				$author$project$Replicated$Codec$variant1,
				_Utils_Tuple2(3, 'Word'),
				$author$project$Task$Progress$Word,
				$author$project$Replicated$Codec$int,
				A3(
					$author$project$Replicated$Codec$variant0,
					_Utils_Tuple2(2, 'Permille'),
					$author$project$Task$Progress$Permille,
					A3(
						$author$project$Replicated$Codec$variant0,
						_Utils_Tuple2(1, 'Percent'),
						$author$project$Task$Progress$Percent,
						$author$project$Replicated$Codec$customType(
							F6(
								function (percent, permille, word, minute, customUnit, value) {
									switch (value.$) {
										case 'Percent':
											return percent;
										case 'Permille':
											return permille;
										case 'Word':
											var _int = value.a;
											return word(_int);
										case 'Minute':
											var _int = value.a;
											return minute(_int);
										default:
											var _v1 = value.a;
											var string1 = _v1.a;
											var string2 = _v1.b;
											var _int = value.b;
											return A2(
												customUnit,
												_Utils_Tuple2(string1, string2),
												_int);
									}
								}))))))));
var $author$project$SmartTime$Duration$zero = $author$project$SmartTime$Duration$Duration(0);
var $author$project$Task$ActionClass$codec = $author$project$Replicated$Codec$finishSeededRegister(
	A4(
		$author$project$Replicated$Codec$fieldDict,
		_Utils_Tuple2(13, 'extra'),
		function ($) {
			return $.extra;
		},
		_Utils_Tuple2($author$project$Replicated$Codec$string, $author$project$Replicated$Codec$string),
		A5(
			$author$project$Replicated$Codec$fieldRW,
			_Utils_Tuple2(12, 'importance'),
			function ($) {
				return $.importance;
			},
			$author$project$Replicated$Codec$float,
			1,
			A4(
				$author$project$Replicated$Codec$fieldList,
				_Utils_Tuple2(11, 'defaultRelevanceEnds'),
				function ($) {
					return $.defaultRelevanceEnds;
				},
				$author$project$Task$ActionClass$relativeTimingCodec,
				A4(
					$author$project$Replicated$Codec$fieldList,
					_Utils_Tuple2(10, 'defaultRelevanceStarts'),
					function ($) {
						return $.defaultRelevanceStarts;
					},
					$author$project$Task$ActionClass$relativeTimingCodec,
					A4(
						$author$project$Replicated$Codec$fieldList,
						_Utils_Tuple2(9, 'defaultFinishBy'),
						function ($) {
							return $.defaultFinishBy;
						},
						$author$project$Task$ActionClass$relativeTimingCodec,
						A4(
							$author$project$Replicated$Codec$fieldList,
							_Utils_Tuple2(8, 'defaultStartBy'),
							function ($) {
								return $.defaultStartBy;
							},
							$author$project$Task$ActionClass$relativeTimingCodec,
							A4(
								$author$project$Replicated$Codec$fieldList,
								_Utils_Tuple2(7, 'defaultExternalDeadline'),
								function ($) {
									return $.defaultExternalDeadline;
								},
								$author$project$Task$ActionClass$relativeTimingCodec,
								A5(
									$author$project$Replicated$Codec$fieldRW,
									_Utils_Tuple2(6, 'maxEffort'),
									function ($) {
										return $.maxEffort;
									},
									$author$project$ExtraCodecs$duration,
									$author$project$SmartTime$Duration$zero,
									A5(
										$author$project$Replicated$Codec$fieldRW,
										_Utils_Tuple2(5, 'predictedEffort'),
										function ($) {
											return $.predictedEffort;
										},
										$author$project$ExtraCodecs$duration,
										$author$project$SmartTime$Duration$zero,
										A5(
											$author$project$Replicated$Codec$fieldRW,
											_Utils_Tuple2(4, 'minEffort'),
											function ($) {
												return $.minEffort;
											},
											$author$project$ExtraCodecs$duration,
											$author$project$SmartTime$Duration$zero,
											A5(
												$author$project$Replicated$Codec$fieldRW,
												_Utils_Tuple2(3, 'completionUnits'),
												function ($) {
													return $.completionUnits;
												},
												$author$project$Task$Progress$unitCodec,
												$author$project$Task$Progress$Percent,
												A4(
													$author$project$Replicated$Codec$maybeRW,
													_Utils_Tuple2(2, 'activity'),
													function ($) {
														return $.activity;
													},
													$author$project$Activity$Activity$idCodec,
													A5(
														$author$project$Replicated$Codec$coreRW,
														_Utils_Tuple2(1, 'title'),
														function ($) {
															return $.title;
														},
														$author$project$Replicated$Codec$string,
														$elm$core$Basics$identity,
														$author$project$Replicated$Codec$record($author$project$Task$ActionClass$ActionClassSkel)))))))))))))));
var $author$project$Task$AssignedAction$AssignedActionSkel = function (classID) {
	return function (memberOfSeries) {
		return function (completion) {
			return function (externalDeadline) {
				return function (startBy) {
					return function (finishBy) {
						return function (plannedSessions) {
							return function (relevanceStarts) {
								return function (relevanceEnds) {
									return function (extra) {
										return {classID: classID, completion: completion, externalDeadline: externalDeadline, extra: extra, finishBy: finishBy, memberOfSeries: memberOfSeries, plannedSessions: plannedSessions, relevanceEnds: relevanceEnds, relevanceStarts: relevanceStarts, startBy: startBy};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$SmartTime$Human$Moment$DateOnly = function (a) {
	return {$: 'DateOnly', a: a};
};
var $author$project$SmartTime$Human$Moment$Floating = function (a) {
	return {$: 'Floating', a: a};
};
var $author$project$SmartTime$Human$Moment$Global = function (a) {
	return {$: 'Global', a: a};
};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $author$project$SmartTime$Human$Calendar$Month$lastDay = F2(
	function (givenYear, givenMonth) {
		switch (givenMonth.$) {
			case 'Jan':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Feb':
				return $author$project$SmartTime$Human$Calendar$Year$isLeapYear(givenYear) ? $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(29) : $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(28);
			case 'Mar':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Apr':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(30);
			case 'May':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Jun':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(30);
			case 'Jul':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Aug':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Sep':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(30);
			case 'Oct':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
			case 'Nov':
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(30);
			default:
				return $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(31);
		}
	});
var $author$project$SmartTime$Human$Calendar$Month$dayOfMonthValidFor = F3(
	function (givenYear, givenMonth, day) {
		var maxValidDay = $author$project$SmartTime$Human$Calendar$Month$dayToInt(
			A2($author$project$SmartTime$Human$Calendar$Month$lastDay, givenYear, givenMonth));
		return ((day > 0) && (!_Utils_eq(
			A2($elm$core$Basics$compare, day, maxValidDay),
			$elm$core$Basics$GT))) ? $elm$core$Maybe$Just(
			$author$project$SmartTime$Human$Calendar$Month$DayOfMonth(day)) : $elm$core$Maybe$Nothing;
	});
var $author$project$SmartTime$Human$Calendar$Month$toName = function (m) {
	switch (m.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $author$project$SmartTime$Human$Calendar$Year$isBeforeCommonEra = function (_v0) {
	var y = _v0.a;
	return y <= 0;
};
var $author$project$SmartTime$Human$Calendar$Year$toBCEYear = function (_v0) {
	var negativeYear = _v0.a;
	return (-negativeYear) + 1;
};
var $author$project$SmartTime$Human$Calendar$Year$toString = function (year) {
	var yearInt = year.a;
	return $author$project$SmartTime$Human$Calendar$Year$isBeforeCommonEra(year) ? ($elm$core$String$fromInt(
		$author$project$SmartTime$Human$Calendar$Year$toBCEYear(year)) + ' BCE') : $elm$core$String$fromInt(yearInt);
};
var $author$project$SmartTime$Human$Calendar$fromParts = function (given) {
	var _v0 = given.day;
	var dayInt = _v0.a;
	var _v1 = A3($author$project$SmartTime$Human$Calendar$Month$dayOfMonthValidFor, given.year, given.month, dayInt);
	if (_v1.$ === 'Just') {
		return $elm$core$Result$Ok(
			$author$project$SmartTime$Human$Calendar$fromPartsTrusted(given));
	} else {
		var dayString = $elm$core$String$fromInt(dayInt);
		var _v2 = given.day;
		var rawDay = _v2.a;
		return (dayInt < 1) ? $elm$core$Result$Err('You gave me a DayOfMonth of ' + (dayString + '. Non-positive values for DayOfMonth are never valid! The day should be between 1 and 31.')) : ((dayInt > 31) ? $elm$core$Result$Err('You gave me a DayOfMonth of ' + (dayString + '. No months have more than 31 days!')) : ((_Utils_eq(given.month, $author$project$SmartTime$Human$Calendar$Month$Feb) && ((dayInt === 29) && (!$author$project$SmartTime$Human$Calendar$Year$isLeapYear(given.year)))) ? $elm$core$Result$Err(
			'Sorry, but ' + ($author$project$SmartTime$Human$Calendar$Year$toString(given.year) + ' isn\'t a leap year, so that February doesn\'t have 29 days!')) : ((_Utils_cmp(
			dayInt,
			A2($author$project$SmartTime$Human$Calendar$Month$length, given.year, given.month)) > 0) ? $elm$core$Result$Err(
			'You gave me a DayOfMonth of ' + (dayString + (', but ' + ($author$project$SmartTime$Human$Calendar$Month$toName(given.month) + (' only has ' + ($elm$core$String$fromInt(
				A2($author$project$SmartTime$Human$Calendar$Month$length, given.year, given.month)) + ' days!')))))) : $elm$core$Result$Err('The date was invalid, but I\'m not sure why. Please report this issue!'))));
	}
};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $author$project$ParserExtra$problemToString = function (p) {
	switch (p.$) {
		case 'Expecting':
			var s = p.a;
			return 'expecting \'' + (s + '\'');
		case 'ExpectingInt':
			return 'expecting int';
		case 'ExpectingHex':
			return 'expecting hex';
		case 'ExpectingOctal':
			return 'expecting octal';
		case 'ExpectingBinary':
			return 'expecting binary';
		case 'ExpectingFloat':
			return 'expecting float';
		case 'ExpectingNumber':
			return 'expecting number';
		case 'ExpectingVariable':
			return 'expecting variable';
		case 'ExpectingSymbol':
			var s = p.a;
			return 'expecting symbol \'' + (s + '\'');
		case 'ExpectingKeyword':
			var s = p.a;
			return 'expecting keyword \'' + (s + '\'');
		case 'ExpectingEnd':
			return 'expecting end';
		case 'UnexpectedChar':
			return 'unexpected char';
		case 'Problem':
			var s = p.a;
			return 'Problem parsing: ' + s;
		default:
			return 'bad repeat';
	}
};
var $author$project$ParserExtra$deadEndToString = function (deadend) {
	return $author$project$ParserExtra$problemToString(deadend.problem) + (' at row ' + ($elm$core$String$fromInt(deadend.row) + (', col ' + $elm$core$String$fromInt(deadend.col))));
};
var $author$project$ParserExtra$deadEndsToString = function (deadEnds) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			'; ',
			A2($elm$core$List$map, $author$project$ParserExtra$deadEndToString, deadEnds)));
};
var $author$project$ParserExtra$realDeadEndsToString = $author$project$ParserExtra$deadEndsToString;
var $author$project$SmartTime$Human$Calendar$Parts = F3(
	function (year, month, day) {
		return {day: day, month: month, year: year};
	});
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $author$project$ParserExtra$impossibleIntFailure = $elm$parser$Parser$problem('This should be impossible: a string of digits (verified with Char.isDigit) could not be converted to a valid `Int` (with String.fromInt).');
var $author$project$ParserExtra$digitStringToInt = function (numbers) {
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$ParserExtra$impossibleIntFailure,
		A2(
			$elm$core$Maybe$map,
			$elm$parser$Parser$succeed,
			$elm$core$String$toInt(numbers)));
};
var $author$project$ParserExtra$strictPaddedInt = function (minLength) {
	var checkSize = function (digits) {
		return (_Utils_cmp(
			$elm$core$String$length(digits),
			minLength) > -1) ? $elm$parser$Parser$succeed(digits) : $elm$parser$Parser$problem(
			'Found number: ' + (digits + (' but it was not padded to a minimum of ' + ($elm$core$String$fromInt(minLength) + ' digits long.'))));
	};
	return A2(
		$elm$parser$Parser$andThen,
		$author$project$ParserExtra$digitStringToInt,
		A2(
			$elm$parser$Parser$andThen,
			checkSize,
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompWhile($elm$core$Char$isDigit))));
};
var $author$project$SmartTime$Human$Calendar$Year$parse4DigitYear = function () {
	var toYearNum = function (num) {
		return $elm$parser$Parser$succeed(
			$author$project$SmartTime$Human$Calendar$Year$Year(num));
	};
	return A2(
		$elm$parser$Parser$andThen,
		toYearNum,
		$author$project$ParserExtra$strictPaddedInt(4));
}();
var $author$project$ParserExtra$possiblyPaddedInt = A2(
	$elm$parser$Parser$andThen,
	$author$project$ParserExtra$digitStringToInt,
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $author$project$SmartTime$Human$Calendar$Month$parseDayOfMonth = A2($elm$parser$Parser$map, $author$project$SmartTime$Human$Calendar$Month$DayOfMonth, $author$project$ParserExtra$possiblyPaddedInt);
var $author$project$SmartTime$Human$Calendar$Month$fromInt = function (n) {
	var _v0 = A2($elm$core$Basics$max, 1, n);
	switch (_v0) {
		case 1:
			return $author$project$SmartTime$Human$Calendar$Month$Jan;
		case 2:
			return $author$project$SmartTime$Human$Calendar$Month$Feb;
		case 3:
			return $author$project$SmartTime$Human$Calendar$Month$Mar;
		case 4:
			return $author$project$SmartTime$Human$Calendar$Month$Apr;
		case 5:
			return $author$project$SmartTime$Human$Calendar$Month$May;
		case 6:
			return $author$project$SmartTime$Human$Calendar$Month$Jun;
		case 7:
			return $author$project$SmartTime$Human$Calendar$Month$Jul;
		case 8:
			return $author$project$SmartTime$Human$Calendar$Month$Aug;
		case 9:
			return $author$project$SmartTime$Human$Calendar$Month$Sep;
		case 10:
			return $author$project$SmartTime$Human$Calendar$Month$Oct;
		case 11:
			return $author$project$SmartTime$Human$Calendar$Month$Nov;
		default:
			return $author$project$SmartTime$Human$Calendar$Month$Dec;
	}
};
var $author$project$SmartTime$Human$Calendar$Month$parseMonthInt = function () {
	var checkMonth = function (givenInt) {
		return ((givenInt >= 1) && (givenInt <= 12)) ? $elm$parser$Parser$succeed(
			$author$project$SmartTime$Human$Calendar$Month$fromInt(givenInt)) : $elm$parser$Parser$problem(
			'A month number should be from 1 to 12, but I got ' + ($elm$core$String$fromInt(givenInt) + ' instead?'));
	};
	return A2($elm$parser$Parser$andThen, checkMonth, $author$project$ParserExtra$possiblyPaddedInt);
}();
var $author$project$SmartTime$Human$Calendar$separatedYMD = function (separator) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$SmartTime$Human$Calendar$Parts),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$backtrackable($author$project$SmartTime$Human$Calendar$Year$parse4DigitYear),
					$elm$parser$Parser$symbol(separator))),
			A2(
				$elm$parser$Parser$ignorer,
				$author$project$SmartTime$Human$Calendar$Month$parseMonthInt,
				$elm$parser$Parser$symbol(separator))),
		$author$project$SmartTime$Human$Calendar$Month$parseDayOfMonth);
};
var $author$project$SmartTime$Human$Calendar$fromNumberString = function (input) {
	var parserResult = A2(
		$elm$parser$Parser$run,
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$author$project$SmartTime$Human$Calendar$separatedYMD('-'),
					$author$project$SmartTime$Human$Calendar$separatedYMD('/'),
					$author$project$SmartTime$Human$Calendar$separatedYMD('.'),
					$author$project$SmartTime$Human$Calendar$separatedYMD(' ')
				])),
		input);
	var stringErrorResult = A2($elm$core$Result$mapError, $author$project$ParserExtra$realDeadEndsToString, parserResult);
	return A2($elm$core$Result$andThen, $author$project$SmartTime$Human$Calendar$fromParts, stringErrorResult);
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$SmartTime$Human$Moment$fromStringHelper = F2(
	function (givenParser, input) {
		var parserResult = A2($elm$parser$Parser$run, givenParser, input);
		var withNiceErrors = A2($elm$core$Result$mapError, $author$project$ParserExtra$realDeadEndsToString, parserResult);
		var combiner = F2(
			function (d, t) {
				return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, $author$project$SmartTime$Human$Moment$utc, d, t);
			});
		var fromAll = function (_v0) {
			var dateparts = _v0.a;
			var time = _v0.b;
			return A2(
				$elm$core$Result$map,
				function (d) {
					return A2(combiner, d, time);
				},
				$author$project$SmartTime$Human$Calendar$fromParts(dateparts));
		};
		return A2($elm$core$Result$andThen, fromAll, withNiceErrors);
	});
var $author$project$ParserExtra$strictLengthInt = F2(
	function (minLength, maxLength) {
		var checkSize = function (digits) {
			return (_Utils_cmp(
				$elm$core$String$length(digits),
				minLength) > -1) ? ((_Utils_cmp(
				$elm$core$String$length(digits),
				maxLength) < 1) ? $elm$parser$Parser$succeed(digits) : $elm$parser$Parser$problem(
				'Found number: ' + (digits + (' but it exceeded the maximum of ' + ($elm$core$String$fromInt(maxLength) + ' digits long.'))))) : $elm$parser$Parser$problem(
				'Found number: ' + (digits + (' but it was not padded to a minimum of ' + ($elm$core$String$fromInt(minLength) + ' digits long.'))));
		};
		return A2(
			$elm$parser$Parser$andThen,
			$author$project$ParserExtra$digitStringToInt,
			A2(
				$elm$parser$Parser$andThen,
				checkSize,
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompWhile($elm$core$Char$isDigit))));
	});
var $author$project$SmartTime$Human$Clock$parseHMS = function () {
	var secsFracToMs = function (frac) {
		return $elm$core$Basics$round(frac * 1000);
	};
	var decimalOptional = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$float,
				$elm$parser$Parser$succeed(0)
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed($author$project$SmartTime$Human$Clock$clock),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$backtrackable($author$project$ParserExtra$possiblyPaddedInt),
						$elm$parser$Parser$symbol(':'))),
				A2(
					$elm$parser$Parser$ignorer,
					A2($author$project$ParserExtra$strictLengthInt, 2, 2),
					$elm$parser$Parser$symbol(':'))),
			A2($author$project$ParserExtra$strictLengthInt, 2, 2)),
		A2($elm$parser$Parser$map, secsFracToMs, decimalOptional));
}();
var $author$project$SmartTime$Human$Moment$fromStandardString = function (input) {
	var combinedParser = A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2(
				$elm$parser$Parser$ignorer,
				$author$project$SmartTime$Human$Calendar$separatedYMD('-'),
				$elm$parser$Parser$symbol('T'))),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$author$project$SmartTime$Human$Clock$parseHMS,
				$elm$parser$Parser$symbol('Z')),
			$elm$parser$Parser$end));
	return A2($author$project$SmartTime$Human$Moment$fromStringHelper, combinedParser, input);
};
var $author$project$SmartTime$Human$Moment$fromStandardStringLoose = function (input) {
	var combinedParser = A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2(
				$elm$parser$Parser$ignorer,
				$author$project$SmartTime$Human$Calendar$separatedYMD('-'),
				$elm$parser$Parser$symbol('T'))),
		$author$project$SmartTime$Human$Clock$parseHMS);
	return A2($author$project$SmartTime$Human$Moment$fromStringHelper, combinedParser, input);
};
var $author$project$SmartTime$Duration$fromDays = function (_float) {
	return $author$project$SmartTime$Duration$Duration(
		$elm$core$Basics$round(_float * $author$project$SmartTime$Duration$dayLength));
};
var $author$project$SmartTime$Human$Calendar$fromRataDie = $author$project$SmartTime$Human$Calendar$CalendarDate;
var $author$project$SmartTime$Duration$inWholeDays = function (duration) {
	return ($author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$dayLength) | 0;
};
var $author$project$SmartTime$Moment$utcFromLinear = function (momentAsDur) {
	return A2(
		$author$project$SmartTime$Duration$subtract,
		momentAsDur,
		$author$project$SmartTime$Moment$utcOffset(momentAsDur));
};
var $author$project$SmartTime$Moment$toInt = F3(
	function (_v0, timeScale, _v1) {
		var inputTAI = _v0.a;
		var epochDur = _v1.a;
		var newScale = function () {
			switch (timeScale.$) {
				case 'TAI':
					return inputTAI;
				case 'UTC':
					return $author$project$SmartTime$Moment$utcFromLinear(inputTAI);
				case 'GPS':
					return A2(
						$author$project$SmartTime$Duration$subtract,
						inputTAI,
						$author$project$SmartTime$Duration$fromSeconds(19));
				default:
					return A2(
						$author$project$SmartTime$Duration$subtract,
						inputTAI,
						$author$project$SmartTime$Duration$fromMs(32184));
			}
		}();
		return $author$project$SmartTime$Duration$inMs(
			A2($author$project$SmartTime$Duration$subtract, newScale, epochDur));
	});
var $author$project$SmartTime$Human$Moment$toUTCAndLocalize = F2(
	function (zone, moment) {
		var momentAsDur = $author$project$SmartTime$Duration$fromInt(
			A3($author$project$SmartTime$Moment$toInt, moment, $author$project$SmartTime$Moment$UTC, $author$project$SmartTime$Moment$commonEraStart));
		return A2(
			$author$project$SmartTime$Duration$add,
			momentAsDur,
			A2($author$project$SmartTime$Human$Moment$getOffset, moment, zone));
	});
var $author$project$SmartTime$Human$Moment$humanize = F2(
	function (zone, moment) {
		var localMomentDur = A2($author$project$SmartTime$Human$Moment$toUTCAndLocalize, zone, moment);
		var daysSinceEpoch = $author$project$SmartTime$Duration$inWholeDays(localMomentDur);
		var remaining = A2(
			$author$project$SmartTime$Duration$subtract,
			localMomentDur,
			$author$project$SmartTime$Duration$fromDays(daysSinceEpoch));
		return _Utils_Tuple2(
			$author$project$SmartTime$Human$Calendar$fromRataDie(daysSinceEpoch),
			remaining);
	});
var $author$project$SmartTime$Human$Moment$fuzzyFromString = function (givenString) {
	return A2($elm$core$String$endsWith, 'Z', givenString) ? A2(
		$elm$core$Result$map,
		$author$project$SmartTime$Human$Moment$Global,
		$author$project$SmartTime$Human$Moment$fromStandardString(givenString)) : (A2($elm$core$String$contains, 'T', givenString) ? A2(
		$elm$core$Result$map,
		A2(
			$elm$core$Basics$composeL,
			$author$project$SmartTime$Human$Moment$Floating,
			$author$project$SmartTime$Human$Moment$humanize($author$project$SmartTime$Human$Moment$utc)),
		$author$project$SmartTime$Human$Moment$fromStandardStringLoose(givenString)) : A2(
		$elm$core$Result$map,
		$author$project$SmartTime$Human$Moment$DateOnly,
		$author$project$SmartTime$Human$Calendar$fromNumberString(givenString)));
};
var $author$project$SmartTime$Human$Clock$midnight = $author$project$SmartTime$Duration$zero;
var $author$project$SmartTime$Human$Moment$fromDate = F2(
	function (zone, date) {
		return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, date, $author$project$SmartTime$Human$Clock$midnight);
	});
var $author$project$SmartTime$Human$Moment$fromFuzzy = F2(
	function (zone, fuzzy) {
		switch (fuzzy.$) {
			case 'DateOnly':
				var date = fuzzy.a;
				return A2($author$project$SmartTime$Human$Moment$fromDate, zone, date);
			case 'Floating':
				var _v1 = fuzzy.a;
				var date = _v1.a;
				var time = _v1.b;
				return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, date, time);
			default:
				var moment = fuzzy.a;
				return moment;
		}
	});
var $author$project$SmartTime$Human$Calendar$Month$next = function (givenMonth) {
	switch (givenMonth.$) {
		case 'Jan':
			return $author$project$SmartTime$Human$Calendar$Month$Feb;
		case 'Feb':
			return $author$project$SmartTime$Human$Calendar$Month$Mar;
		case 'Mar':
			return $author$project$SmartTime$Human$Calendar$Month$Apr;
		case 'Apr':
			return $author$project$SmartTime$Human$Calendar$Month$May;
		case 'May':
			return $author$project$SmartTime$Human$Calendar$Month$Jun;
		case 'Jun':
			return $author$project$SmartTime$Human$Calendar$Month$Jul;
		case 'Jul':
			return $author$project$SmartTime$Human$Calendar$Month$Aug;
		case 'Aug':
			return $author$project$SmartTime$Human$Calendar$Month$Sep;
		case 'Sep':
			return $author$project$SmartTime$Human$Calendar$Month$Oct;
		case 'Oct':
			return $author$project$SmartTime$Human$Calendar$Month$Nov;
		case 'Nov':
			return $author$project$SmartTime$Human$Calendar$Month$Dec;
		default:
			return $author$project$SmartTime$Human$Calendar$Month$Jan;
	}
};
var $author$project$SmartTime$Human$Calendar$calculate = F3(
	function (givenYear, givenMonth, dayCounter) {
		calculate:
		while (true) {
			var monthsLeftToGo = !_Utils_eq(givenMonth, $author$project$SmartTime$Human$Calendar$Month$Dec);
			var monthSize = A2($author$project$SmartTime$Human$Calendar$Month$length, givenYear, givenMonth);
			var monthOverFlow = _Utils_cmp(dayCounter, monthSize) > 0;
			if (monthsLeftToGo && monthOverFlow) {
				var remainingDaysToCount = dayCounter - monthSize;
				var nextMonthToCheck = $author$project$SmartTime$Human$Calendar$Month$next(givenMonth);
				var $temp$givenYear = givenYear,
					$temp$givenMonth = nextMonthToCheck,
					$temp$dayCounter = remainingDaysToCount;
				givenYear = $temp$givenYear;
				givenMonth = $temp$givenMonth;
				dayCounter = $temp$dayCounter;
				continue calculate;
			} else {
				return {
					day: $author$project$SmartTime$Human$Calendar$Month$DayOfMonth(dayCounter),
					month: givenMonth,
					year: givenYear
				};
			}
		}
	});
var $author$project$SmartTime$Human$Calendar$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			(a / b) | 0,
			A2($elm$core$Basics$modBy, b, a));
	});
var $author$project$SmartTime$Human$Calendar$year = function (_v0) {
	var givenDays = _v0.a;
	var daysInYear = 365;
	var daysInLeapCycle = 146097;
	var daysInFourYears = 1461;
	var daysInCentury = 36524;
	var _v1 = A2($author$project$SmartTime$Human$Calendar$divWithRemainder, givenDays, daysInLeapCycle);
	var leapCyclesPassed = _v1.a;
	var daysWithoutLeapCycles = _v1.b;
	var yearsFromLeapCycles = leapCyclesPassed * 400;
	var _v2 = A2($author$project$SmartTime$Human$Calendar$divWithRemainder, daysWithoutLeapCycles, daysInCentury);
	var centuriesPassed = _v2.a;
	var daysWithoutCenturies = _v2.b;
	var yearsFromCenturies = centuriesPassed * 100;
	var _v3 = A2($author$project$SmartTime$Human$Calendar$divWithRemainder, daysWithoutCenturies, daysInFourYears);
	var fourthYearsPassed = _v3.a;
	var daysWithoutFourthYears = _v3.b;
	var _v4 = A2($author$project$SmartTime$Human$Calendar$divWithRemainder, daysWithoutFourthYears, daysInYear);
	var wholeYears = _v4.a;
	var daysWithoutYears = _v4.b;
	var newYear = (!daysWithoutYears) ? 0 : 1;
	var yearsFromFourYearBlocks = fourthYearsPassed * 4;
	var totalYears = (((yearsFromLeapCycles + yearsFromCenturies) + yearsFromFourYearBlocks) + wholeYears) + newYear;
	return $author$project$SmartTime$Human$Calendar$Year$Year(totalYears);
};
var $author$project$SmartTime$Human$Calendar$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var givenYear = $author$project$SmartTime$Human$Calendar$year(
		$author$project$SmartTime$Human$Calendar$CalendarDate(rd));
	return {
		ordinalDay: rd - $author$project$SmartTime$Human$Calendar$Year$daysBefore(givenYear),
		year: givenYear
	};
};
var $author$project$SmartTime$Human$Calendar$toParts = function (_v0) {
	var rd = _v0.a;
	var date = $author$project$SmartTime$Human$Calendar$toOrdinalDate(
		$author$project$SmartTime$Human$Calendar$CalendarDate(rd));
	return A3($author$project$SmartTime$Human$Calendar$calculate, date.year, $author$project$SmartTime$Human$Calendar$Month$Jan, date.ordinalDay);
};
var $author$project$SmartTime$Human$Calendar$dayOfMonth = A2(
	$elm$core$Basics$composeR,
	$author$project$SmartTime$Human$Calendar$toParts,
	function ($) {
		return $.day;
	});
var $author$project$SmartTime$Human$Calendar$month = A2(
	$elm$core$Basics$composeR,
	$author$project$SmartTime$Human$Calendar$toParts,
	function ($) {
		return $.month;
	});
var $author$project$SmartTime$Human$Calendar$padNumber = F2(
	function (targetLength, numString) {
		var minLength = A3($elm$core$Basics$clamp, 1, targetLength, targetLength);
		var zerosToAdd = minLength - $elm$core$String$length(numString);
		return _Utils_ap(
			A2($elm$core$String$repeat, zerosToAdd, '0'),
			numString);
	});
var $author$project$SmartTime$Human$Calendar$Year$toAstronomicalString = function (year) {
	var yearInt = year.a;
	return $elm$core$String$fromInt(yearInt);
};
var $author$project$SmartTime$Human$Calendar$Month$toInt = function (givenMonth) {
	switch (givenMonth.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $author$project$SmartTime$Human$Calendar$toStandardString = function (givenDate) {
	var yearPart = A2(
		$author$project$SmartTime$Human$Calendar$padNumber,
		4,
		$author$project$SmartTime$Human$Calendar$Year$toAstronomicalString(
			$author$project$SmartTime$Human$Calendar$year(givenDate)));
	var monthPart = A2(
		$author$project$SmartTime$Human$Calendar$padNumber,
		2,
		$elm$core$String$fromInt(
			$author$project$SmartTime$Human$Calendar$Month$toInt(
				$author$project$SmartTime$Human$Calendar$month(givenDate))));
	var dayPart = A2(
		$author$project$SmartTime$Human$Calendar$padNumber,
		2,
		$elm$core$String$fromInt(
			$author$project$SmartTime$Human$Calendar$Month$dayToInt(
				$author$project$SmartTime$Human$Calendar$dayOfMonth(givenDate))));
	return yearPart + ('-' + (monthPart + ('-' + dayPart)));
};
var $author$project$SmartTime$Duration$breakdown = function (duration) {
	var all = $author$project$SmartTime$Duration$inMs(duration);
	var days = (all / $author$project$SmartTime$Duration$dayLength) | 0;
	var withoutDays = all - (days * $author$project$SmartTime$Duration$dayLength);
	var hours = (withoutDays / $author$project$SmartTime$Duration$hourLength) | 0;
	var withoutHours = withoutDays - (hours * $author$project$SmartTime$Duration$hourLength);
	var minutes = (withoutHours / $author$project$SmartTime$Duration$minuteLength) | 0;
	var withoutMinutes = withoutHours - (minutes * $author$project$SmartTime$Duration$minuteLength);
	var seconds = (withoutMinutes / $author$project$SmartTime$Duration$secondLength) | 0;
	var withoutSeconds = withoutMinutes - (seconds * $author$project$SmartTime$Duration$secondLength);
	return {days: days, hours: hours, milliseconds: withoutSeconds, minutes: minutes, seconds: seconds};
};
var $author$project$SmartTime$Duration$inWholeHours = function (duration) {
	return ($author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$hourLength) | 0;
};
var $author$project$SmartTime$Human$Duration$breakdownHMSM = function (duration) {
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var days = _v0.days;
	var hours = _v0.hours;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var milliseconds = _v0.milliseconds;
	return _List_fromArray(
		[
			$author$project$SmartTime$Human$Duration$Hours(
			$author$project$SmartTime$Duration$inWholeHours(duration)),
			$author$project$SmartTime$Human$Duration$Minutes(minutes),
			$author$project$SmartTime$Human$Duration$Seconds(seconds),
			$author$project$SmartTime$Human$Duration$Milliseconds(milliseconds)
		]);
};
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$init = function (items) {
	if (!items.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var nonEmptyList = items;
		return A2(
			$elm$core$Maybe$map,
			$elm$core$List$reverse,
			$elm$core$List$tail(
				$elm$core$List$reverse(nonEmptyList)));
	}
};
var $author$project$SmartTime$Human$Duration$padNumber = F2(
	function (targetLength, numString) {
		var minLength = A3($elm$core$Basics$clamp, 1, targetLength, targetLength);
		var zerosToAdd = minLength - $elm$core$String$length(numString);
		return _Utils_ap(
			A2($elm$core$String$repeat, zerosToAdd, '0'),
			numString);
	});
var $author$project$SmartTime$Human$Duration$justNumberPadded = function (unit) {
	switch (unit.$) {
		case 'Milliseconds':
			var _int = unit.a;
			return A2(
				$author$project$SmartTime$Human$Duration$padNumber,
				3,
				$elm$core$String$fromInt(_int));
		case 'Seconds':
			var _int = unit.a;
			return A2(
				$author$project$SmartTime$Human$Duration$padNumber,
				2,
				$elm$core$String$fromInt(_int));
		case 'Minutes':
			var _int = unit.a;
			return A2(
				$author$project$SmartTime$Human$Duration$padNumber,
				2,
				$elm$core$String$fromInt(_int));
		case 'Hours':
			var _int = unit.a;
			return A2(
				$author$project$SmartTime$Human$Duration$padNumber,
				2,
				$elm$core$String$fromInt(_int));
		default:
			var _int = unit.a;
			return A2(
				$author$project$SmartTime$Human$Duration$padNumber,
				2,
				$elm$core$String$fromInt(_int));
	}
};
var $author$project$SmartTime$Human$Duration$colonSeparated = function (breakdownList) {
	var separate = function (list) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$intersperse,
				':',
				A2($elm$core$List$map, $author$project$SmartTime$Human$Duration$justNumberPadded, list)));
	};
	var _v0 = $elm_community$list_extra$List$Extra$last(breakdownList);
	if ((_v0.$ === 'Just') && (_v0.a.$ === 'Milliseconds')) {
		var ms = _v0.a.a;
		var withoutLast = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$elm_community$list_extra$List$Extra$init(breakdownList));
		return separate(withoutLast) + ('.' + A2(
			$author$project$SmartTime$Human$Duration$padNumber,
			3,
			$elm$core$String$fromInt(ms)));
	} else {
		return separate(breakdownList);
	}
};
var $author$project$SmartTime$Human$Clock$toStandardString = function (timeOfDay) {
	return $author$project$SmartTime$Human$Duration$colonSeparated(
		$author$project$SmartTime$Human$Duration$breakdownHMSM(timeOfDay));
};
var $author$project$SmartTime$Human$Moment$toStandardString = function (moment) {
	var _v0 = A2($author$project$SmartTime$Human$Moment$humanize, $author$project$SmartTime$Human$Moment$utc, moment);
	var date = _v0.a;
	var time = _v0.b;
	return $author$project$SmartTime$Human$Calendar$toStandardString(date) + ('T' + ($author$project$SmartTime$Human$Clock$toStandardString(time) + 'Z'));
};
var $author$project$SmartTime$Human$Moment$fuzzyToString = function (fuzzyMoment) {
	switch (fuzzyMoment.$) {
		case 'Global':
			var moment = fuzzyMoment.a;
			return $author$project$SmartTime$Human$Moment$toStandardString(moment);
		case 'Floating':
			return A2(
				$elm$core$String$dropRight,
				1,
				$author$project$SmartTime$Human$Moment$toStandardString(
					A2($author$project$SmartTime$Human$Moment$fromFuzzy, $author$project$SmartTime$Human$Moment$utc, fuzzyMoment)));
		default:
			var date = fuzzyMoment.a;
			return $author$project$SmartTime$Human$Calendar$toStandardString(date);
	}
};
var $author$project$Replicated$Codec$CustomError = function (a) {
	return {$: 'CustomError', a: a};
};
var $author$project$Replicated$Codec$mapValid = F3(
	function (fromBytes_, toBytes_, codec) {
		var wrapCustomError = function (value) {
			if (value.$ === 'Ok') {
				var ok = value.a;
				return A2(
					$elm$core$Result$mapError,
					$author$project$Replicated$Codec$CustomError,
					fromBytes_(ok));
			} else {
				var err = value.a;
				return $elm$core$Result$Err(err);
			}
		};
		var wrappedNodeDecoder = function (inputs) {
			return A2(
				$elm$json$Json$Decode$map,
				wrapCustomError,
				A2($author$project$Replicated$Codec$getNodeDecoder, codec, inputs));
		};
		var mapThingToEncode = function (original) {
			if (original.$ === 'EncodeThis') {
				var a = original.a;
				return $author$project$Replicated$Codec$EncodeThis(
					toBytes_(a));
			} else {
				var objectIDs = original.a;
				var fieldVal = original.b;
				return A2(
					$author$project$Replicated$Codec$EncodeObjectOrThis,
					objectIDs,
					toBytes_(fieldVal));
			}
		};
		var mapNodeEncoderInputs = function (inputs) {
			return A5(
				$author$project$Replicated$Codec$NodeEncoderInputs,
				inputs.node,
				inputs.mode,
				mapThingToEncode(inputs.thingToEncode),
				inputs.parent,
				inputs.position);
		};
		return $author$project$Replicated$Codec$Codec(
			{
				bytesDecoder: A2(
					$elm$bytes$Bytes$Decode$map,
					wrapCustomError,
					$author$project$Replicated$Codec$getBytesDecoder(codec)),
				bytesEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getBytesEncoder,
						codec,
						toBytes_(v));
				},
				jsonDecoder: A2(
					$elm$json$Json$Decode$map,
					wrapCustomError,
					$author$project$Replicated$Codec$getJsonDecoder(codec)),
				jsonEncoder: function (v) {
					return A2(
						$author$project$Replicated$Codec$getJsonEncoder,
						codec,
						toBytes_(v));
				},
				nodeDecoder: wrappedNodeDecoder,
				nodeEncoder: function (inputs) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						codec,
						mapNodeEncoderInputs(inputs));
				},
				nodePlaceholder: $author$project$Replicated$Codec$flatInit
			});
	});
var $author$project$ExtraCodecs$fuzzyMoment = A3($author$project$Replicated$Codec$mapValid, $author$project$SmartTime$Human$Moment$fuzzyFromString, $author$project$SmartTime$Human$Moment$fuzzyToString, $author$project$Replicated$Codec$string);
var $author$project$Task$SessionSkel$codec = A2($author$project$Replicated$Codec$pair, $author$project$ExtraCodecs$fuzzyMoment, $author$project$ExtraCodecs$duration);
var $author$project$Replicated$Codec$maybeR = F4(
	function (fieldID, fieldGetter, fieldCodec, recordBuilt) {
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			$author$project$Replicated$Codec$maybe(fieldCodec),
			$author$project$Replicated$Codec$HardcodedDefault($elm$core$Maybe$Nothing),
			recordBuilt);
	});
var $author$project$Task$AssignedAction$codec = $author$project$Replicated$Codec$finishSeededRegister(
	A4(
		$author$project$Replicated$Codec$fieldDict,
		_Utils_Tuple2(10, 'extra'),
		function ($) {
			return $.extra;
		},
		_Utils_Tuple2($author$project$Replicated$Codec$string, $author$project$Replicated$Codec$string),
		A4(
			$author$project$Replicated$Codec$maybeRW,
			_Utils_Tuple2(9, 'relevanceEnds'),
			function ($) {
				return $.relevanceEnds;
			},
			$author$project$ExtraCodecs$fuzzyMoment,
			A4(
				$author$project$Replicated$Codec$maybeRW,
				_Utils_Tuple2(8, 'relevanceStarts'),
				function ($) {
					return $.relevanceStarts;
				},
				$author$project$ExtraCodecs$fuzzyMoment,
				A4(
					$author$project$Replicated$Codec$fieldList,
					_Utils_Tuple2(7, 'plannedSessions'),
					function ($) {
						return $.plannedSessions;
					},
					$author$project$Task$SessionSkel$codec,
					A4(
						$author$project$Replicated$Codec$maybeRW,
						_Utils_Tuple2(6, 'finishBy'),
						function ($) {
							return $.finishBy;
						},
						$author$project$ExtraCodecs$fuzzyMoment,
						A4(
							$author$project$Replicated$Codec$maybeRW,
							_Utils_Tuple2(5, 'startBy'),
							function ($) {
								return $.startBy;
							},
							$author$project$ExtraCodecs$fuzzyMoment,
							A4(
								$author$project$Replicated$Codec$maybeRW,
								_Utils_Tuple2(4, 'externalDeadline'),
								function ($) {
									return $.externalDeadline;
								},
								$author$project$ExtraCodecs$fuzzyMoment,
								A5(
									$author$project$Replicated$Codec$fieldRW,
									_Utils_Tuple2(3, 'completion'),
									function ($) {
										return $.completion;
									},
									$author$project$Replicated$Codec$int,
									0,
									A4(
										$author$project$Replicated$Codec$maybeR,
										_Utils_Tuple2(2, 'memberOfSeries'),
										function ($) {
											return $.memberOfSeries;
										},
										$author$project$Replicated$Codec$int,
										A5(
											$author$project$Replicated$Codec$coreRW,
											_Utils_Tuple2(1, 'classID'),
											function ($) {
												return $.classID;
											},
											$author$project$Replicated$Codec$id,
											$elm$core$Basics$identity,
											$author$project$Replicated$Codec$record($author$project$Task$AssignedAction$AssignedActionSkel))))))))))));
var $author$project$Task$Entry$AssignableIsDeeper = function (a) {
	return {$: 'AssignableIsDeeper', a: a};
};
var $author$project$Task$Entry$AssignableIsHere = function (a) {
	return {$: 'AssignableIsHere', a: a};
};
var $author$project$Task$Entry$ContainerOfAssignables = F2(
	function (properties, children) {
		return {children: children, properties: properties};
	});
var $author$project$Task$Entry$Assignable = F3(
	function (properties, recurrenceRules, children) {
		return {children: children, properties: properties, recurrenceRules: recurrenceRules};
	});
var $author$project$Task$Series$Series = {$: 'Series'};
var $author$project$Replicated$Codec$fieldReg = F4(
	function (_v0, fieldGetter, fieldCodec, soFar) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			_Utils_Tuple2(fieldSlot, fieldName),
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$PlaceholderDefault($author$project$Replicated$Codec$nonChanger),
			soFar);
	});
var $author$project$Replicated$Codec$finishRegister = function (partialRegister) {
	var allFieldsCodec = partialRegister.a;
	var nodeEncoder = function (inputs) {
		return A2($author$project$Replicated$Codec$registerNodeEncoder, partialRegister, inputs);
	};
	var nodeDecoder = function (_v8) {
		var node = _v8.node;
		var parent = _v8.parent;
		var position = _v8.position;
		var cutoff = _v8.cutoff;
		var registerDecoder = function (objectIDs) {
			var regToRecordByInit = allFieldsCodec.nodeInitializer;
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: cutoff, foundIDs: objectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
			var regPointer = $author$project$Replicated$Object$getPointer(object);
			var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
			var regToRecordByDecoding = function (givenCutoff) {
				var _v7 = allFieldsCodec.nodeDecoder(
					{cutoff: givenCutoff, history: history, node: node, regPointer: regPointer});
				if (!_v7.b.b) {
					var success = _v7.a;
					return success;
				} else {
					var recovered = _v7.a;
					var errors = _v7.b;
					return A2(
						$author$project$Log$crashInDev,
						'regToRecordByDecoding returned errors!' + $author$project$Log$dump(errors),
						recovered);
				}
			};
			var regToRecord = function (givenCutoff) {
				var _v6 = regToRecordByDecoding(givenCutoff);
				if (_v6.$ === 'Just') {
					var recordDecoded = _v6.a;
					return recordDecoded;
				} else {
					return A2(regToRecordByInit, _Utils_Tuple0, regPointer);
				}
			};
			return $elm$json$Json$Decode$succeed(
				$elm$core$Result$Ok(
					$author$project$Replicated$Reducer$Register$Register(
						{
							history: history,
							included: $author$project$Replicated$Object$All,
							init: $author$project$Replicated$Codec$nonChanger,
							latest: regToRecord($elm$core$Maybe$Nothing),
							older: A2($elm$core$Basics$composeR, $elm$core$Maybe$Just, regToRecord),
							pointer: regPointer
						})));
		};
		return A2($elm$json$Json$Decode$andThen, registerDecoder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	var encodeEntryInDictList = F2(
		function (fullRecord, _v5) {
			var fieldKey = _v5.a;
			var entryValueEncoder = _v5.b;
			return A2(
				$elm$json$Json$Encode$list,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						$elm$json$Json$Encode$string(fieldKey),
						entryValueEncoder(fullRecord)
					]));
		});
	var encodeAsJsonObject = function (_v4) {
		var regDetails = _v4.a;
		var fullRecord = regDetails.latest;
		var passFullRecordToFieldEncoder = function (_v3) {
			var fieldKey = _v3.a;
			var fieldEncoder = _v3.b;
			return _Utils_Tuple2(
				fieldKey,
				fieldEncoder(fullRecord));
		};
		return $elm$json$Json$Encode$object(
			A2($elm$core$List$map, passFullRecordToFieldEncoder, allFieldsCodec.jsonEncoders));
	};
	var encodeAsDictList = function (fullRecord) {
		return A2(
			$elm$json$Json$Encode$list,
			encodeEntryInDictList(fullRecord),
			allFieldsCodec.jsonEncoders);
	};
	var emptyRegister = function (_v2) {
		var parent = _v2.parent;
		var position = _v2.position;
		var seed = _v2.seed;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$Register$registerReducerID});
		var regToRecord = A2(
			allFieldsCodec.nodeInitializer,
			_Utils_Tuple0,
			$author$project$Replicated$Object$getPointer(object));
		var history = $author$project$Replicated$Codec$buildRegisterFieldDictionary(object);
		return $author$project$Replicated$Reducer$Register$Register(
			{
				history: history,
				included: $author$project$Replicated$Object$All,
				init: seed,
				latest: regToRecord,
				older: function (_v1) {
					return regToRecord;
				},
				pointer: $author$project$Replicated$Object$getPointer(object)
			});
	};
	var tempEmpty = emptyRegister(
		{
			parent: $author$project$Replicated$Change$genesisParent('flatTodo'),
			position: $author$project$Replicated$Change$Location$none,
			seed: $author$project$Replicated$Codec$nonChanger
		});
	var jsonDecoder = $elm$json$Json$Decode$succeed(
		$elm$core$Result$Ok(tempEmpty));
	var bytesDecoder = $elm$bytes$Bytes$Decode$succeed(
		$elm$core$Result$Ok(tempEmpty));
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: bytesDecoder,
			bytesEncoder: function (_v0) {
				var regDetails = _v0.a;
				return A2(
					$elm$core$Basics$composeR,
					allFieldsCodec.bytesEncoder,
					A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence))(regDetails.latest);
			},
			jsonDecoder: jsonDecoder,
			jsonEncoder: encodeAsJsonObject,
			nodeDecoder: nodeDecoder,
			nodeEncoder: nodeEncoder,
			nodePlaceholder: emptyRegister
		});
};
var $author$project$Task$Entry$ActionIsDeeper = function (a) {
	return {$: 'ActionIsDeeper', a: a};
};
var $author$project$Task$Entry$ActionIsHere = function (a) {
	return {$: 'ActionIsHere', a: a};
};
var $author$project$Task$Entry$ContainerOfActions = F2(
	function (properties, children) {
		return {children: children, properties: properties};
	});
var $author$project$Replicated$Codec$lazy = function (f) {
	var lazyNodeEncoder = function (inputs) {
		return A2(
			$author$project$Replicated$Codec$getNodeEncoder,
			f(_Utils_Tuple0),
			inputs);
	};
	var lazyNodeDecoder = function (inputs) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v2) {
				return A2(
					$author$project$Replicated$Codec$getNodeDecoder,
					f(_Utils_Tuple0),
					inputs);
			},
			$elm$json$Json$Decode$succeed(_Utils_Tuple0));
	};
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: A2(
				$elm$bytes$Bytes$Decode$andThen,
				function (_v0) {
					return $author$project$Replicated$Codec$getBytesDecoder(
						f(_Utils_Tuple0));
				},
				$elm$bytes$Bytes$Decode$succeed(_Utils_Tuple0)),
			bytesEncoder: function (value) {
				return A2(
					$author$project$Replicated$Codec$getBytesEncoder,
					f(_Utils_Tuple0),
					value);
			},
			jsonDecoder: A2(
				$elm$json$Json$Decode$andThen,
				function (_v1) {
					return $author$project$Replicated$Codec$getJsonDecoder(
						f(_Utils_Tuple0));
				},
				$elm$json$Json$Decode$succeed(_Utils_Tuple0)),
			jsonEncoder: function (value) {
				return A2(
					$author$project$Replicated$Codec$getJsonEncoder,
					f(_Utils_Tuple0),
					value);
			},
			nodeDecoder: lazyNodeDecoder,
			nodeEncoder: lazyNodeEncoder,
			nodePlaceholder: function (inputs) {
				return A2(
					$author$project$Replicated$Codec$getInitializer,
					f(_Utils_Tuple0),
					inputs);
			}
		});
};
var $author$project$Task$ActionClass$ParentProperties = function (title) {
	return {title: title};
};
var $author$project$Task$ActionClass$parentPropertiesCodec = $author$project$Replicated$Codec$finishRegister(
	A5(
		$author$project$Replicated$Codec$fieldRW,
		_Utils_Tuple2(1, 'title'),
		function ($) {
			return $.title;
		},
		$author$project$Replicated$Codec$maybe($author$project$Replicated$Codec$string),
		$elm$core$Maybe$Just('fake title - set me back to Nothing'),
		$author$project$Replicated$Codec$record($author$project$Task$ActionClass$ParentProperties)));
function $author$project$Task$Entry$cyclic$containerOfActionsCodec() {
	return $author$project$Replicated$Codec$finishRecord(
		A4(
			$author$project$Replicated$Codec$fieldList,
			_Utils_Tuple2(2, 'children'),
			function ($) {
				return $.children;
			},
			$author$project$Task$Entry$cyclic$nestedOrActionCodec(),
			A4(
				$author$project$Replicated$Codec$fieldReg,
				_Utils_Tuple2(1, 'properties'),
				function ($) {
					return $.properties;
				},
				$author$project$Task$ActionClass$parentPropertiesCodec,
				$author$project$Replicated$Codec$record($author$project$Task$Entry$ContainerOfActions))));
}
function $author$project$Task$Entry$cyclic$nestedOrActionCodec() {
	return $author$project$Replicated$Codec$finishCustomType(
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(2, 'ActionIsDeeper'),
			$author$project$Task$Entry$ActionIsDeeper,
			$author$project$Replicated$Codec$lazy(
				function (_v1) {
					return $author$project$Task$Entry$cyclic$containerOfActionsCodec();
				}),
			A4(
				$author$project$Replicated$Codec$variant1,
				_Utils_Tuple2(1, 'ActionIsHere'),
				$author$project$Task$Entry$ActionIsHere,
				$author$project$Task$ActionClass$codec,
				$author$project$Replicated$Codec$customType(
					F3(
						function (singleton, nested, value) {
							if (value.$ === 'ActionIsHere') {
								var action = value.a;
								return singleton(action);
							} else {
								var followerParent = value.a;
								return nested(followerParent);
							}
						})))));
}
try {
	var $author$project$Task$Entry$containerOfActionsCodec = $author$project$Task$Entry$cyclic$containerOfActionsCodec();
	$author$project$Task$Entry$cyclic$containerOfActionsCodec = function () {
		return $author$project$Task$Entry$containerOfActionsCodec;
	};
	var $author$project$Task$Entry$nestedOrActionCodec = $author$project$Task$Entry$cyclic$nestedOrActionCodec();
	$author$project$Task$Entry$cyclic$nestedOrActionCodec = function () {
		return $author$project$Task$Entry$nestedOrActionCodec;
	};
} catch ($) {
	throw 'Some top-level definitions from `Task.Entry` are causing infinite recursion:\n\n  ┌─────┐\n  │    containerOfActionsCodec\n  │     ↓\n  │    nestedOrActionCodec\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Task$Entry$assignableCodec = $author$project$Replicated$Codec$finishRegister(
	A4(
		$author$project$Replicated$Codec$fieldList,
		_Utils_Tuple2(3, 'children'),
		function ($) {
			return $.children;
		},
		$author$project$Task$Entry$nestedOrActionCodec,
		A5(
			$author$project$Replicated$Codec$fieldRW,
			_Utils_Tuple2(2, 'recurrenceRules'),
			function ($) {
				return $.recurrenceRules;
			},
			$author$project$Replicated$Codec$maybe(
				A2($author$project$Replicated$Codec$quickEnum, $author$project$Task$Series$Series, _List_Nil)),
			$elm$core$Maybe$Nothing,
			A4(
				$author$project$Replicated$Codec$fieldReg,
				_Utils_Tuple2(1, 'properties'),
				function ($) {
					return $.properties;
				},
				$author$project$Task$ActionClass$parentPropertiesCodec,
				$author$project$Replicated$Codec$record($author$project$Task$Entry$Assignable)))));
function $author$project$Task$Entry$cyclic$containerOfAssignablesCodec() {
	return $author$project$Replicated$Codec$finishRecord(
		A4(
			$author$project$Replicated$Codec$fieldList,
			_Utils_Tuple2(2, 'children'),
			function ($) {
				return $.children;
			},
			$author$project$Task$Entry$cyclic$nestedOrAssignableCodec(),
			A4(
				$author$project$Replicated$Codec$fieldReg,
				_Utils_Tuple2(1, 'properties'),
				function ($) {
					return $.properties;
				},
				$author$project$Task$ActionClass$parentPropertiesCodec,
				$author$project$Replicated$Codec$record($author$project$Task$Entry$ContainerOfAssignables))));
}
function $author$project$Task$Entry$cyclic$nestedOrAssignableCodec() {
	return $author$project$Replicated$Codec$finishCustomType(
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(2, 'AssignableIsHere'),
			$author$project$Task$Entry$AssignableIsHere,
			$author$project$Task$Entry$assignableCodec,
			A4(
				$author$project$Replicated$Codec$variant1,
				_Utils_Tuple2(1, 'AssignableIsDeeper'),
				$author$project$Task$Entry$AssignableIsDeeper,
				$author$project$Replicated$Codec$lazy(
					function (_v1) {
						return $author$project$Task$Entry$cyclic$containerOfAssignablesCodec();
					}),
				$author$project$Replicated$Codec$customType(
					F3(
						function (leaderIsDeeper, leaderIsHere, value) {
							if (value.$ === 'AssignableIsDeeper') {
								var wrapperParent = value.a;
								return leaderIsDeeper(wrapperParent);
							} else {
								var leaderParent = value.a;
								return leaderIsHere(leaderParent);
							}
						})))));
}
try {
	var $author$project$Task$Entry$containerOfAssignablesCodec = $author$project$Task$Entry$cyclic$containerOfAssignablesCodec();
	$author$project$Task$Entry$cyclic$containerOfAssignablesCodec = function () {
		return $author$project$Task$Entry$containerOfAssignablesCodec;
	};
	var $author$project$Task$Entry$nestedOrAssignableCodec = $author$project$Task$Entry$cyclic$nestedOrAssignableCodec();
	$author$project$Task$Entry$cyclic$nestedOrAssignableCodec = function () {
		return $author$project$Task$Entry$nestedOrAssignableCodec;
	};
} catch ($) {
	throw 'Some top-level definitions from `Task.Entry` are causing infinite recursion:\n\n  ┌─────┐\n  │    containerOfAssignablesCodec\n  │     ↓\n  │    nestedOrAssignableCodec\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Task$Entry$codec = $author$project$Task$Entry$nestedOrAssignableCodec;
var $author$project$TimeBlock$TimeBlock$TimeBlock = F4(
	function (focus, date, startTime, duration) {
		return {date: date, duration: duration, focus: focus, startTime: startTime};
	});
var $author$project$ExtraCodecs$calendarDate = A3($author$project$Replicated$Codec$map, $author$project$SmartTime$Human$Calendar$fromRataDie, $author$project$SmartTime$Human$Calendar$toRataDie, $author$project$Replicated$Codec$int);
var $author$project$TimeBlock$TimeBlock$Activity = function (a) {
	return {$: 'Activity', a: a};
};
var $author$project$TimeBlock$TimeBlock$Tag = function (a) {
	return {$: 'Tag', a: a};
};
var $author$project$TimeBlock$TimeBlock$focusCodec = $author$project$Replicated$Codec$finishCustomType(
	A4(
		$author$project$Replicated$Codec$variant1,
		_Utils_Tuple2(1, 'Tag'),
		$author$project$TimeBlock$TimeBlock$Tag,
		$author$project$Replicated$Codec$string,
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(0, 'Activity'),
			$author$project$TimeBlock$TimeBlock$Activity,
			$author$project$Activity$Activity$idCodec,
			$author$project$Replicated$Codec$customType(
				F3(
					function (activityEncoder, tagEncoder, value) {
						if (value.$ === 'Activity') {
							var activityID = value.a;
							return activityEncoder(activityID);
						} else {
							var tagID = value.a;
							return tagEncoder(tagID);
						}
					})))));
var $author$project$SmartTime$Human$Clock$parseHM = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed($author$project$SmartTime$Human$Clock$clock),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$backtrackable($author$project$ParserExtra$possiblyPaddedInt),
					$elm$parser$Parser$symbol(':'))),
			A2($author$project$ParserExtra$strictLengthInt, 2, 2)),
		$elm$parser$Parser$succeed(0)),
	$elm$parser$Parser$succeed(0));
var $author$project$SmartTime$Human$Clock$fromStandardString = function (input) {
	var parserHMSResult = A2($elm$parser$Parser$run, $author$project$SmartTime$Human$Clock$parseHMS, input);
	var parserHMResult = A2($elm$parser$Parser$run, $author$project$SmartTime$Human$Clock$parseHM, input);
	var bestResult = function () {
		if (parserHMSResult.$ === 'Ok') {
			return parserHMSResult;
		} else {
			return parserHMResult;
		}
	}();
	return A2($elm$core$Result$mapError, $author$project$ParserExtra$realDeadEndsToString, bestResult);
};
var $author$project$ExtraCodecs$timeOfDay = A3($author$project$Replicated$Codec$mapValid, $author$project$SmartTime$Human$Clock$fromStandardString, $author$project$SmartTime$Human$Clock$toStandardString, $author$project$Replicated$Codec$string);
var $author$project$TimeBlock$TimeBlock$codec = $author$project$Replicated$Codec$finishSeededRecord(
	A5(
		$author$project$Replicated$Codec$coreRW,
		_Utils_Tuple2(4, 'duration'),
		function ($) {
			return $.duration;
		},
		$author$project$ExtraCodecs$duration,
		function ($) {
			return $.duration;
		},
		A5(
			$author$project$Replicated$Codec$coreRW,
			_Utils_Tuple2(3, 'startTime'),
			function ($) {
				return $.startTime;
			},
			$author$project$ExtraCodecs$timeOfDay,
			function ($) {
				return $.startTime;
			},
			A5(
				$author$project$Replicated$Codec$coreRW,
				_Utils_Tuple2(2, 'date'),
				function ($) {
					return $.date;
				},
				$author$project$ExtraCodecs$calendarDate,
				function ($) {
					return $.date;
				},
				A5(
					$author$project$Replicated$Codec$coreRW,
					_Utils_Tuple2(1, 'focus'),
					function ($) {
						return $.focus;
					},
					$author$project$TimeBlock$TimeBlock$focusCodec,
					function ($) {
						return $.focus;
					},
					$author$project$Replicated$Codec$record($author$project$TimeBlock$TimeBlock$TimeBlock))))));
var $author$project$Replicated$Reducer$RepDb$RepDb = function (a) {
	return {$: 'RepDb', a: a};
};
var $author$project$Replicated$Object$extractOpIDFromEventPayload = function (_v0) {
	var event = _v0.a;
	var _v1 = event.payload;
	if ((_v1.b && (_v1.a.$ === 'IDPointerAtom')) && (!_v1.b.b)) {
		var opID = _v1.a.a;
		return $elm$core$Maybe$Just(opID);
	} else {
		var other = _v1;
		return A2(
			$author$project$Log$crashInDev,
			'item was supposed to be a single OpID pointer, but instead found ' + $elm$core$Debug$toString(other),
			$elm$core$Maybe$Nothing);
	}
};
var $author$project$ID$fromObjectID = function (objectID) {
	return $author$project$ID$IDFromExisting(objectID);
};
var $author$project$Replicated$Reducer$RepDb$buildFromReplicaDb = F4(
	function (object, payloadToMember, memberAdder, init) {
		var remover = F2(
			function (containerObjectID, inclusionEventID) {
				return $author$project$Replicated$Change$changeObject(
					{
						objectChanges: _List_fromArray(
							[
								$author$project$Replicated$Change$RevertOp(inclusionEventID)
							]),
						target: $author$project$Replicated$Change$ExistingObjectPointer(containerObjectID)
					}).changeSet;
			});
		var addMemberFromEvent = F4(
			function (containerExistingID, inclusionEventID, event, accumulatedDict) {
				var _v1 = _Utils_Tuple2(
					$author$project$Replicated$Object$extractOpIDFromEventPayload(event),
					payloadToMember(
						$author$project$Replicated$Object$eventPayloadAsJson(event)));
				if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
					var memberObjectID = _v1.a.a;
					var memberValue = _v1.b.a;
					return A3(
						$turboMaCk$any_dict$Dict$Any$insert,
						memberObjectID,
						{
							id: $author$project$ID$fromObjectID(memberObjectID),
							remove: $author$project$Replicated$Change$WithFrameIndex(
								function (_v2) {
									return A2(remover, containerExistingID, inclusionEventID);
								}),
							value: memberValue
						},
						accumulatedDict);
				} else {
					return accumulatedDict;
				}
			});
		var memberDict = function () {
			var _v0 = $author$project$Replicated$Object$getCreationID(object);
			if (_v0.$ === 'Just') {
				var objectID = _v0.a;
				return A3(
					$turboMaCk$any_dict$Dict$Any$foldl,
					addMemberFromEvent(
						A2($author$project$Replicated$Change$ExistingID, $author$project$Replicated$Reducer$RepDb$reducerID, objectID)),
					$turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives),
					$author$project$Replicated$Object$getEvents(object));
			} else {
				return $turboMaCk$any_dict$Dict$Any$empty($author$project$Replicated$Op$OpID$toSortablePrimitives);
			}
		}();
		return $author$project$Replicated$Reducer$RepDb$RepDb(
			{
				included: $author$project$Replicated$Object$getIncluded(object),
				memberAdder: memberAdder,
				members: memberDict,
				pointer: $author$project$Replicated$Object$getPointer(object),
				startWith: init
			});
	});
var $author$project$Replicated$Reducer$RepDb$getInit = function (repDb) {
	var record = repDb.a;
	return A2(
		$author$project$Replicated$Change$collapseChangesToChangeSet,
		'repDbInitFrame',
		record.startWith(repDb));
};
var $author$project$Replicated$Reducer$RepDb$getPointer = function (_v0) {
	var repSet = _v0.a;
	return repSet.pointer;
};
var $author$project$Replicated$Reducer$RepDb$listValues = function (_v0) {
	var repSetRecord = _v0.a;
	return A2(
		$elm$core$List$map,
		function ($) {
			return $.value;
		},
		$turboMaCk$any_dict$Dict$Any$values(repSetRecord.members));
};
var $author$project$Replicated$Codec$repDb = function (memberCodec) {
	var repDbNodeEncoder = function (details) {
		var node = details.node;
		var thingToEncode = details.thingToEncode;
		var mode = details.mode;
		var parent = details.parent;
		var position = details.position;
		if (thingToEncode.$ === 'EncodeThis') {
			var givenRepDb = thingToEncode.a;
			var externalChanges = $author$project$Replicated$Reducer$RepDb$getInit(givenRepDb);
			return $author$project$Replicated$Codec$soloOut(
				$author$project$Replicated$Change$changeObjectWithExternal(
					{
						externalUpdates: externalChanges,
						objectChanges: _List_Nil,
						target: $author$project$Replicated$Reducer$RepDb$getPointer(givenRepDb)
					}));
		} else {
			return $author$project$Replicated$Codec$justInit(
				$author$project$Replicated$Change$newPointer(
					{parent: parent, position: position, reducerID: $author$project$Replicated$Reducer$RepDb$reducerID}));
		}
	};
	var memberRonDecoder = F2(
		function (_v4, encodedMember) {
			var node = _v4.node;
			var asParent = _v4.asParent;
			var cutoff = _v4.cutoff;
			var _v3 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2(
					$author$project$Replicated$Codec$getNodeDecoder,
					memberCodec,
					{
						cutoff: cutoff,
						node: node,
						parent: asParent,
						position: $author$project$Replicated$Change$Location$newSingle('repDbMember')
					}),
				encodedMember);
			if ((_v3.$ === 'Ok') && (_v3.a.$ === 'Ok')) {
				var member = _v3.a.a;
				return $elm$core$Maybe$Just(member);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		});
	var memberChanger = F2(
		function (_v2, newValue) {
			var node = _v2.node;
			var modeMaybe = _v2.modeMaybe;
			var asParent = _v2.asParent;
			return $author$project$Replicated$Change$NewPayload(
				A2(
					$author$project$Replicated$Codec$getNodeEncoder,
					memberCodec,
					{
						mode: A2($elm$core$Maybe$withDefault, $author$project$Replicated$Codec$defaultEncodeMode, modeMaybe),
						node: node,
						parent: asParent,
						position: $author$project$Replicated$Change$Location$newSingle('repDbContainer'),
						thingToEncode: $author$project$Replicated$Codec$EncodeThis(newValue)
					}).complex);
		});
	var childInstaller = F2(
		function (myPointer, childPendingID) {
			return A2(
				$author$project$Replicated$Change$delayedChangeObject,
				myPointer,
				$author$project$Replicated$Change$NewPayload(
					$mgold$elm_nonempty_list$List$Nonempty$singleton(
						$author$project$Replicated$Change$PendingObjectReferenceAtom(childPendingID))));
		});
	var initializer = function (_v1) {
		var parent = _v1.parent;
		var position = _v1.position;
		var seed = _v1.seed;
		var object = $author$project$Replicated$Node$Node$getObject(
			{cutoff: $elm$core$Maybe$Nothing, foundIDs: _List_Nil, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepDb$reducerID});
		var repDbPointer = $author$project$Replicated$Object$getPointer(object);
		var repDbAsParent = A2(
			$author$project$Replicated$Change$becomeDelayedParent,
			repDbPointer,
			childInstaller(repDbPointer));
		var finalPayloadToMember = memberRonDecoder(
			{asParent: repDbAsParent, cutoff: $elm$core$Maybe$Nothing, node: $author$project$Replicated$Node$Node$testNode});
		var finalMemberChanger = memberChanger(
			{asParent: repDbAsParent, modeMaybe: $elm$core$Maybe$Nothing, node: $author$project$Replicated$Node$Node$testNode});
		return A4($author$project$Replicated$Reducer$RepDb$buildFromReplicaDb, object, finalPayloadToMember, finalMemberChanger, seed);
	};
	var repDbNodeDecoder = function (_v0) {
		var node = _v0.node;
		var parent = _v0.parent;
		var position = _v0.position;
		var cutoff = _v0.cutoff;
		var repDbBuilder = function (foundObjectIDs) {
			var object = $author$project$Replicated$Node$Node$getObject(
				{cutoff: $elm$core$Maybe$Nothing, foundIDs: foundObjectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepDb$reducerID});
			var repDbPointer = $author$project$Replicated$Object$getPointer(object);
			var repDbAsParent = A2(
				$author$project$Replicated$Change$becomeDelayedParent,
				repDbPointer,
				childInstaller(repDbPointer));
			return $elm$core$Result$Ok(
				A4(
					$author$project$Replicated$Reducer$RepDb$buildFromReplicaDb,
					object,
					memberRonDecoder(
						{asParent: repDbAsParent, cutoff: cutoff, node: node}),
					memberChanger(
						{asParent: repDbAsParent, modeMaybe: $elm$core$Maybe$Nothing, node: node}),
					$author$project$Replicated$Codec$nonChanger));
		};
		return A2($elm$json$Json$Decode$map, repDbBuilder, $author$project$Replicated$Codec$concurrentObjectIDsDecoder);
	};
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: $elm$bytes$Bytes$Decode$fail,
			bytesEncoder: function (input) {
				return A2(
					$author$project$Replicated$Codec$listEncode,
					$author$project$Replicated$Codec$getBytesEncoder(memberCodec),
					$author$project$Replicated$Reducer$RepDb$listValues(input));
			},
			jsonDecoder: $elm$json$Json$Decode$fail('no repdb'),
			jsonEncoder: function (input) {
				return A2(
					$elm$json$Json$Encode$list,
					$author$project$Replicated$Codec$getJsonEncoder(memberCodec),
					$author$project$Replicated$Reducer$RepDb$listValues(input));
			},
			nodeDecoder: repDbNodeDecoder,
			nodeEncoder: repDbNodeEncoder,
			nodePlaceholder: initializer
		});
};
var $author$project$Replicated$Codec$fieldDb = F4(
	function (fieldID, fieldGetter, fieldCodec, recordBuilt) {
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			fieldID,
			fieldGetter,
			$author$project$Replicated$Codec$repDb(fieldCodec),
			$author$project$Replicated$Codec$PlaceholderDefault($author$project$Replicated$Codec$nonChanger),
			recordBuilt);
	});
var $author$project$Replicated$Codec$fieldRec = F4(
	function (_v0, fieldGetter, fieldCodec, soFar) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			_Utils_Tuple2(fieldSlot, fieldName),
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$PlaceholderDefault($author$project$Replicated$Codec$nonChanger),
			soFar);
	});
var $author$project$Activity$Activity$BuiltInActivitySkel = F9(
	function (names, icon, excusable, taskOptional, evidence, backgroundable, maxTime, hidden, externalIDs) {
		return {backgroundable: backgroundable, evidence: evidence, excusable: excusable, externalIDs: externalIDs, hidden: hidden, icon: icon, maxTime: maxTime, names: names, taskOptional: taskOptional};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $elm$bytes$Bytes$Encode$U8 = function (a) {
	return {$: 'U8', a: a};
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $author$project$Replicated$Codec$bool = function () {
	var stringToBool = function (givenString) {
		switch (givenString) {
			case 'true':
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(true));
			case 'false':
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(false));
			case 'True':
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(true));
			case 'False':
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Ok(false));
			default:
				return $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted));
		}
	};
	var boolNodeEncoder = function (_v2) {
		var thingToEncode = _v2.thingToEncode;
		return $author$project$Replicated$Codec$getEncodedPrimitive(thingToEncode) ? $author$project$Replicated$Codec$singlePrimitiveOut(
			$author$project$Replicated$Change$NakedStringAtom('true')) : $author$project$Replicated$Codec$singlePrimitiveOut(
			$author$project$Replicated$Change$NakedStringAtom('false'));
	};
	var boolNodeDecoder = function (_v1) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$bool),
					A2($elm$json$Json$Decode$andThen, stringToBool, $elm$json$Json$Decode$string)
				]));
	};
	return A6(
		$author$project$Replicated$Codec$buildNestableCodec,
		function (value) {
			return value ? $elm$bytes$Bytes$Encode$unsignedInt8(1) : $elm$bytes$Bytes$Encode$unsignedInt8(0);
		},
		A2(
			$elm$bytes$Bytes$Decode$map,
			function (value) {
				switch (value) {
					case 0:
						return $elm$core$Result$Ok(false);
					case 1:
						return $elm$core$Result$Ok(true);
					default:
						return $elm$core$Result$Err($author$project$Replicated$Codec$DataCorrupted);
				}
			},
			$elm$bytes$Bytes$Decode$unsignedInt8),
		$elm$json$Json$Encode$bool,
		A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$bool),
		boolNodeEncoder,
		boolNodeDecoder);
}();
var $author$project$Activity$Evidence$StepCountPace = function (a) {
	return {$: 'StepCountPace', a: a};
};
var $author$project$Activity$Evidence$UsingApp = F2(
	function (a, b) {
		return {$: 'UsingApp', a: a, b: b};
	});
var $author$project$Activity$Evidence$AppDescriptor = F2(
	function (_package, name) {
		return {name: name, _package: _package};
	});
var $author$project$Activity$Evidence$appDescriptorCodec = $author$project$Replicated$Codec$finishSeededRecord(
	A5(
		$author$project$Replicated$Codec$coreR,
		_Utils_Tuple2(2, 'name'),
		function ($) {
			return $.name;
		},
		$author$project$Replicated$Codec$string,
		function (_v1) {
			var p = _v1.a;
			var n = _v1.b;
			return n;
		},
		A5(
			$author$project$Replicated$Codec$coreR,
			_Utils_Tuple2(1, 'package'),
			function ($) {
				return $._package;
			},
			$author$project$Replicated$Codec$string,
			function (_v0) {
				var p = _v0.a;
				var n = _v0.b;
				return p;
			},
			$author$project$Replicated$Codec$record($author$project$Activity$Evidence$AppDescriptor))));
var $author$project$Activity$Evidence$codec = $author$project$Replicated$Codec$finishCustomType(
	A4(
		$author$project$Replicated$Codec$variant1,
		_Utils_Tuple2(2, 'StepCountPace'),
		$author$project$Activity$Evidence$StepCountPace,
		$author$project$Replicated$Codec$int,
		A5(
			$author$project$Replicated$Codec$variant2,
			_Utils_Tuple2(1, 'UsingApp'),
			$author$project$Activity$Evidence$UsingApp,
			$author$project$Activity$Evidence$appDescriptorCodec,
			$author$project$Replicated$Codec$maybe($author$project$Replicated$Codec$string),
			$author$project$Replicated$Codec$customType(
				F3(
					function (usingApp, stepCountPace, value) {
						if (value.$ === 'UsingApp') {
							var appDescriptor = value.a;
							var deviceMaybe = value.b;
							return A2(usingApp, appDescriptor, deviceMaybe);
						} else {
							var stepsPerMinute = value.a;
							return stepCountPace(stepsPerMinute);
						}
					})))));
var $author$project$SmartTime$Human$Duration$dur = $author$project$SmartTime$Human$Duration$toDuration;
var $author$project$SmartTime$Human$Duration$Days = function (a) {
	return {$: 'Days', a: a};
};
var $author$project$SmartTime$Human$Duration$breakdownDHMSM = function (duration) {
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var days = _v0.days;
	var hours = _v0.hours;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var milliseconds = _v0.milliseconds;
	return _List_fromArray(
		[
			$author$project$SmartTime$Human$Duration$Days(days),
			$author$project$SmartTime$Human$Duration$Hours(hours),
			$author$project$SmartTime$Human$Duration$Minutes(minutes),
			$author$project$SmartTime$Human$Duration$Seconds(seconds),
			$author$project$SmartTime$Human$Duration$Milliseconds(milliseconds)
		]);
};
var $author$project$SmartTime$Duration$inWholeMinutes = function (duration) {
	return ($author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$minuteLength) | 0;
};
var $author$project$SmartTime$Duration$inWholeSeconds = function (duration) {
	return ($author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$secondLength) | 0;
};
var $author$project$SmartTime$Human$Duration$inLargestExactUnits = function (duration) {
	var smallestPartMaybe = $elm_community$list_extra$List$Extra$last(
		$author$project$SmartTime$Human$Duration$breakdownDHMSM(duration));
	var smallestPart = A2(
		$elm$core$Maybe$withDefault,
		$author$project$SmartTime$Human$Duration$Milliseconds(0),
		smallestPartMaybe);
	switch (smallestPart.$) {
		case 'Days':
			var days = smallestPart.a;
			return $author$project$SmartTime$Human$Duration$Days(days);
		case 'Hours':
			var hours = smallestPart.a;
			return $author$project$SmartTime$Human$Duration$Hours(
				$author$project$SmartTime$Duration$inWholeHours(duration));
		case 'Minutes':
			var minutes = smallestPart.a;
			return $author$project$SmartTime$Human$Duration$Minutes(
				$author$project$SmartTime$Duration$inWholeMinutes(duration));
		case 'Seconds':
			var seconds = smallestPart.a;
			return $author$project$SmartTime$Human$Duration$Seconds(
				$author$project$SmartTime$Duration$inWholeSeconds(duration));
		default:
			var milliseconds = smallestPart.a;
			return $author$project$SmartTime$Human$Duration$Milliseconds(
				$author$project$SmartTime$Duration$inMs(duration));
	}
};
var $author$project$ExtraCodecs$humanDuration = function () {
	var convertAndNormalize = function (durationAsInt) {
		return $author$project$SmartTime$Human$Duration$inLargestExactUnits(
			$author$project$SmartTime$Duration$fromInt(durationAsInt));
	};
	return A3(
		$author$project$Replicated$Codec$map,
		convertAndNormalize,
		function (hd) {
			return $author$project$SmartTime$Duration$inMs(
				$author$project$SmartTime$Human$Duration$dur(hd));
		},
		$author$project$Replicated$Codec$int);
}();
var $author$project$Activity$Activity$durationPerPeriodCodec = A2($author$project$Replicated$Codec$pair, $author$project$ExtraCodecs$humanDuration, $author$project$ExtraCodecs$humanDuration);
var $author$project$Activity$Activity$IndefinitelyExcused = {$: 'IndefinitelyExcused'};
var $author$project$Activity$Activity$NeverExcused = {$: 'NeverExcused'};
var $author$project$Activity$Activity$TemporarilyExcused = function (a) {
	return {$: 'TemporarilyExcused', a: a};
};
var $author$project$Activity$Activity$excusableCodec = $author$project$Replicated$Codec$finishCustomType(
	A3(
		$author$project$Replicated$Codec$variant0,
		_Utils_Tuple2(3, 'IndefinitelyExcused'),
		$author$project$Activity$Activity$IndefinitelyExcused,
		A4(
			$author$project$Replicated$Codec$variant1,
			_Utils_Tuple2(2, 'TemporarilyExcused'),
			$author$project$Activity$Activity$TemporarilyExcused,
			$author$project$Activity$Activity$durationPerPeriodCodec,
			A3(
				$author$project$Replicated$Codec$variant0,
				_Utils_Tuple2(1, 'NeverExcused'),
				$author$project$Activity$Activity$NeverExcused,
				$author$project$Replicated$Codec$customType(
					F4(
						function (neverExcused, temporarilyExcused, indefinitelyExcused, value) {
							switch (value.$) {
								case 'NeverExcused':
									return neverExcused;
								case 'TemporarilyExcused':
									var dpp = value.a;
									return temporarilyExcused(dpp);
								default:
									return indefinitelyExcused;
							}
						}))))));
var $author$project$Activity$Activity$Emoji = function (a) {
	return {$: 'Emoji', a: a};
};
var $author$project$Activity$Activity$File = function (a) {
	return {$: 'File', a: a};
};
var $author$project$Activity$Activity$Ion = {$: 'Ion'};
var $author$project$Activity$Activity$Other = {$: 'Other'};
var $author$project$Activity$Activity$iconCodec = $author$project$Replicated$Codec$finishCustomType(
	A4(
		$author$project$Replicated$Codec$variant1,
		_Utils_Tuple2(4, 'Emoji'),
		$author$project$Activity$Activity$Emoji,
		$author$project$Replicated$Codec$string,
		A3(
			$author$project$Replicated$Codec$variant0,
			_Utils_Tuple2(3, 'Other'),
			$author$project$Activity$Activity$Other,
			A3(
				$author$project$Replicated$Codec$variant0,
				_Utils_Tuple2(2, 'Ion'),
				$author$project$Activity$Activity$Ion,
				A4(
					$author$project$Replicated$Codec$variant1,
					_Utils_Tuple2(1, 'File'),
					$author$project$Activity$Activity$File,
					$author$project$Replicated$Codec$string,
					$author$project$Replicated$Codec$customType(
						F5(
							function (file, ion, other, emoji, value) {
								switch (value.$) {
									case 'File':
										var svgpath = value.a;
										return file(svgpath);
									case 'Ion':
										return ion;
									case 'Other':
										return other;
									default:
										var emojiString = value.a;
										return emoji(emojiString);
								}
							})))))));
var $author$project$Activity$Activity$builtInActivitySkelCodec = $author$project$Replicated$Codec$finishRecord(
	A4(
		$author$project$Replicated$Codec$fieldDict,
		_Utils_Tuple2(12, 'externalIDs'),
		function ($) {
			return $.externalIDs;
		},
		_Utils_Tuple2($author$project$Replicated$Codec$string, $author$project$Replicated$Codec$string),
		A5(
			$author$project$Replicated$Codec$fieldRW,
			_Utils_Tuple2(9, 'hidden'),
			function ($) {
				return $.hidden;
			},
			$author$project$Replicated$Codec$bool,
			false,
			A4(
				$author$project$Replicated$Codec$maybeRW,
				_Utils_Tuple2(8, 'maxTime'),
				function ($) {
					return $.maxTime;
				},
				$author$project$Activity$Activity$durationPerPeriodCodec,
				A4(
					$author$project$Replicated$Codec$maybeRW,
					_Utils_Tuple2(7, 'backgroundable'),
					function ($) {
						return $.backgroundable;
					},
					$author$project$Replicated$Codec$bool,
					A4(
						$author$project$Replicated$Codec$fieldList,
						_Utils_Tuple2(5, 'evidence'),
						function ($) {
							return $.evidence;
						},
						$author$project$Activity$Evidence$codec,
						A4(
							$author$project$Replicated$Codec$maybeRW,
							_Utils_Tuple2(4, 'taskOptional'),
							function ($) {
								return $.taskOptional;
							},
							$author$project$Replicated$Codec$bool,
							A4(
								$author$project$Replicated$Codec$maybeRW,
								_Utils_Tuple2(3, 'excusable'),
								function ($) {
									return $.excusable;
								},
								$author$project$Activity$Activity$excusableCodec,
								A4(
									$author$project$Replicated$Codec$maybeRW,
									_Utils_Tuple2(2, 'icon'),
									function ($) {
										return $.icon;
									},
									$author$project$Activity$Activity$iconCodec,
									A4(
										$author$project$Replicated$Codec$fieldList,
										_Utils_Tuple2(1, 'names'),
										function ($) {
											return $.names;
										},
										$author$project$Replicated$Codec$string,
										$author$project$Replicated$Codec$record($author$project$Activity$Activity$BuiltInActivitySkel)))))))))));
var $author$project$Activity$Activity$CustomActivitySkel = function (template) {
	return function (names) {
		return function (icon) {
			return function (excusable) {
				return function (taskOptional) {
					return function (evidence) {
						return function (backgroundable) {
							return function (maxTime) {
								return function (hidden) {
									return function (externalIDs) {
										return {backgroundable: backgroundable, evidence: evidence, excusable: excusable, externalIDs: externalIDs, hidden: hidden, icon: icon, maxTime: maxTime, names: names, taskOptional: taskOptional, template: template};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Activity$Activity$customActivitySkelCodec = $author$project$Replicated$Codec$finishSeededRecord(
	A4(
		$author$project$Replicated$Codec$fieldDict,
		_Utils_Tuple2(12, 'externalIDs'),
		function ($) {
			return $.externalIDs;
		},
		_Utils_Tuple2($author$project$Replicated$Codec$string, $author$project$Replicated$Codec$string),
		A5(
			$author$project$Replicated$Codec$fieldRW,
			_Utils_Tuple2(9, 'hidden'),
			function ($) {
				return $.hidden;
			},
			$author$project$Replicated$Codec$bool,
			false,
			A4(
				$author$project$Replicated$Codec$maybeRW,
				_Utils_Tuple2(8, 'maxTime'),
				function ($) {
					return $.maxTime;
				},
				$author$project$Activity$Activity$durationPerPeriodCodec,
				A4(
					$author$project$Replicated$Codec$maybeRW,
					_Utils_Tuple2(7, 'backgroundable'),
					function ($) {
						return $.backgroundable;
					},
					$author$project$Replicated$Codec$bool,
					A4(
						$author$project$Replicated$Codec$fieldList,
						_Utils_Tuple2(5, 'evidence'),
						function ($) {
							return $.evidence;
						},
						$author$project$Activity$Evidence$codec,
						A4(
							$author$project$Replicated$Codec$maybeRW,
							_Utils_Tuple2(4, 'taskOptional'),
							function ($) {
								return $.taskOptional;
							},
							$author$project$Replicated$Codec$bool,
							A4(
								$author$project$Replicated$Codec$maybeRW,
								_Utils_Tuple2(3, 'excusable'),
								function ($) {
									return $.excusable;
								},
								$author$project$Activity$Activity$excusableCodec,
								A4(
									$author$project$Replicated$Codec$maybeRW,
									_Utils_Tuple2(2, 'icon'),
									function ($) {
										return $.icon;
									},
									$author$project$Activity$Activity$iconCodec,
									A4(
										$author$project$Replicated$Codec$fieldList,
										_Utils_Tuple2(1, 'names'),
										function ($) {
											return $.names;
										},
										$author$project$Replicated$Codec$string,
										A5(
											$author$project$Replicated$Codec$coreR,
											_Utils_Tuple2(0, 'template'),
											function ($) {
												return $.template;
											},
											$author$project$Activity$Template$codec,
											$elm$core$Basics$identity,
											$author$project$Replicated$Codec$record($author$project$Activity$Activity$CustomActivitySkel))))))))))));
var $author$project$Replicated$Reducer$RepStore$RepStoreEntry = F2(
	function (a, b) {
		return {$: 'RepStoreEntry', a: a, b: b};
	});
var $author$project$Replicated$Reducer$RepStore$Store = function (a) {
	return {$: 'Store', a: a};
};
var $author$project$Replicated$Reducer$RepStore$buildFromReplicaDb = function (_v0) {
	var object = _v0.object;
	var fetcher = _v0.fetcher;
	var start = _v0.start;
	return $author$project$Replicated$Reducer$RepStore$Store(
		{
			entryFetcher: fetcher,
			included: $author$project$Replicated$Object$getIncluded(object),
			pointer: $author$project$Replicated$Object$getPointer(object),
			startWith: start
		});
};
var $author$project$Replicated$Reducer$RepStore$getInit = function (store) {
	var record = store.a;
	return A2(
		$author$project$Replicated$Change$collapseChangesToChangeSet,
		'RepStoreInit',
		record.startWith(store));
};
var $author$project$Replicated$Reducer$RepStore$getPointer = function (_v0) {
	var store = _v0.a;
	return store.pointer;
};
var $author$project$Replicated$Codec$getPrimitiveNodeEncoder = F2(
	function (_v0, primitiveToEncode) {
		var m = _v0.a;
		var bogusInputs = A5(
			$author$project$Replicated$Codec$NodeEncoderInputs,
			$author$project$Replicated$Node$Node$testNode,
			$author$project$Replicated$Codec$defaultEncodeMode,
			$author$project$Replicated$Codec$EncodeThis(primitiveToEncode),
			$author$project$Replicated$Change$genesisParent('getPrimitiveNodeEncoder - never used'),
			$author$project$Replicated$Change$Location$none);
		return m.nodeEncoder(bogusInputs);
	});
var $author$project$Replicated$Reducer$RepStore$listModified = function (_v0) {
	var store = _v0.a;
	return _Debug_todo(
		'Replicated.Reducer.RepStore',
		{
			start: {line: 64, column: 5},
			end: {line: 64, column: 15}
		})('List store entries?');
};
var $author$project$Replicated$Reducer$RepStore$reducerID = 'store';
var $turboMaCk$any_dict$Dict$Any$update = F3(
	function (k, f, _v0) {
		var inner = _v0.a;
		var updateDict = A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$Maybe$map(
					function (b) {
						return _Utils_Tuple2(k, b);
					}),
				f),
			$elm$core$Maybe$map($elm$core$Tuple$second));
		return $turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						$elm$core$Dict$update,
						inner.toKey(k),
						updateDict,
						inner.dict)
				}));
	});
var $author$project$Replicated$Codec$repStore = F2(
	function (keyCodec, valueCodec) {
		var repStoreNodeEncoder = function (_v10) {
			var thingToEncode = _v10.thingToEncode;
			var parent = _v10.parent;
			var position = _v10.position;
			if (thingToEncode.$ === 'EncodeThis') {
				var givenRepStore = thingToEncode.a;
				return $author$project$Replicated$Codec$soloOut(
					$author$project$Replicated$Change$changeObjectWithExternal(
						{
							externalUpdates: $author$project$Replicated$Reducer$RepStore$getInit(givenRepStore),
							objectChanges: _List_Nil,
							target: $author$project$Replicated$Reducer$RepStore$getPointer(givenRepStore)
						}));
			} else {
				return $author$project$Replicated$Codec$justInit(
					$author$project$Replicated$Change$newPointer(
						{parent: parent, position: position, reducerID: $author$project$Replicated$Reducer$RepStore$reducerID}));
			}
		};
		var keyToString = function (key) {
			return A2(
				$elm$core$String$join,
				'_',
				$mgold$elm_nonempty_list$List$Nonempty$toList(
					A2(
						$mgold$elm_nonempty_list$List$Nonempty$map,
						$author$project$Replicated$Change$primitiveAtomToString,
						A2($author$project$Replicated$Codec$getPrimitiveNodeEncoder, keyCodec, key).primitive)));
		};
		var flatDictListCodec = $author$project$Replicated$Codec$list(
			A2($author$project$Replicated$Codec$pair, keyCodec, valueCodec));
		var jsonEncoder = function (input) {
			return A2(
				$author$project$Replicated$Codec$getJsonEncoder,
				flatDictListCodec,
				$author$project$Replicated$Reducer$RepStore$listModified(input));
		};
		var entryNodeEncodeWrapper = F6(
			function (node, encodeModeMaybe, parent, entryPosition, keyToSet, childPendingID) {
				var keyEncoder = function (givenKey) {
					return A2(
						$author$project$Replicated$Codec$getNodeEncoder,
						keyCodec,
						{
							mode: A2($elm$core$Maybe$withDefault, $author$project$Replicated$Codec$defaultEncodeMode, encodeModeMaybe),
							node: node,
							parent: parent,
							position: A2(
								$author$project$Replicated$Change$Location$nestSingle,
								entryPosition,
								keyToString(keyToSet)),
							thingToEncode: $author$project$Replicated$Codec$EncodeThis(givenKey)
						});
				};
				return A2(
					$mgold$elm_nonempty_list$List$Nonempty$append,
					keyEncoder(keyToSet).complex,
					$mgold$elm_nonempty_list$List$Nonempty$singleton(
						$author$project$Replicated$Change$PendingObjectReferenceAtom(childPendingID)));
			});
		var entryNodeDecoder = F4(
			function (node, parent, cutoff, encodedEntry) {
				var decodeValue = F2(
					function (key, encodedValue) {
						return A2(
							$elm$json$Json$Decode$decodeValue,
							A2(
								$author$project$Replicated$Codec$getNodeDecoder,
								valueCodec,
								{
									cutoff: cutoff,
									node: node,
									parent: parent,
									position: $author$project$Replicated$Change$Location$newSingle(
										keyToString(key))
								}),
							encodedValue);
					});
				var decodeKey = function (encodedKey) {
					return A2(
						$elm$json$Json$Decode$decodeValue,
						A2(
							$author$project$Replicated$Codec$getNodeDecoder,
							keyCodec,
							{
								cutoff: cutoff,
								node: node,
								parent: parent,
								position: $author$project$Replicated$Change$Location$newSingle('key')
							}),
						encodedKey);
				};
				var _v4 = A2(
					$elm$json$Json$Decode$decodeValue,
					$elm$json$Json$Decode$list($elm$json$Json$Decode$value),
					encodedEntry);
				if ((((_v4.$ === 'Ok') && _v4.a.b) && _v4.a.b.b) && (!_v4.a.b.b.b)) {
					var _v5 = _v4.a;
					var keyEncoded = _v5.a;
					var _v6 = _v5.b;
					var valueEncoded = _v6.a;
					var _v7 = decodeKey(keyEncoded);
					if ((_v7.$ === 'Ok') && (_v7.a.$ === 'Ok')) {
						var key = _v7.a.a;
						var _v8 = A2(decodeValue, key, valueEncoded);
						if ((_v8.$ === 'Ok') && (_v8.a.$ === 'Ok')) {
							var value = _v8.a.a;
							return $elm$core$Maybe$Just(
								A2($author$project$Replicated$Reducer$RepStore$RepStoreEntry, key, value));
						} else {
							return A2(
								$author$project$Log$crashInDev,
								'storeEntryNodeDecoder : found key ' + (keyToString(key) + ' and value but not able to decode the value'),
								$elm$core$Maybe$Nothing);
						}
					} else {
						return A2($author$project$Log$crashInDev, 'storeEntryNodeDecoder : found key and value but not able to decode them?', $elm$core$Maybe$Nothing);
					}
				} else {
					return A2($author$project$Log$crashInDev, 'storeEntryNodeDecoder : the store entry wasn\'t in the expected shape', $elm$core$Maybe$Nothing);
				}
			});
		var repStoreBuilder = F3(
			function (_v3, changer, foundObjects) {
				var node = _v3.node;
				var parent = _v3.parent;
				var position = _v3.position;
				var cutoff = _v3.cutoff;
				var updateEntry = F2(
					function (newVal, oldValMaybe) {
						if (oldValMaybe.$ === 'Nothing') {
							return $elm$core$Maybe$Just(
								_List_fromArray(
									[newVal]));
						} else {
							if (!oldValMaybe.a.b) {
								return $elm$core$Maybe$Just(
									_List_fromArray(
										[newVal]));
							} else {
								var prevEntries = oldValMaybe.a;
								return $elm$core$Maybe$Just(
									A2($elm$core$List$cons, newVal, prevEntries));
							}
						}
					});
				var object = function (foundObjectIDs) {
					return $author$project$Replicated$Node$Node$getObject(
						{cutoff: cutoff, foundIDs: foundObjectIDs, node: node, parent: parent, position: position, reducer: $author$project$Replicated$Reducer$RepDict$reducerID});
				};
				var repStoreObject = object(foundObjects);
				var repStorePointer = $author$project$Replicated$Object$getPointer(repStoreObject);
				var repStoreAsParent = $author$project$Replicated$Change$becomeInstantParent(repStorePointer);
				var wrapNewPendingChild = F2(
					function (key, pendingChild) {
						return A2(
							$author$project$Replicated$Change$delayedChangeObject,
							repStorePointer,
							$author$project$Replicated$Change$NewPayload(
								A6(
									entryNodeEncodeWrapper,
									node,
									$elm$core$Maybe$Nothing,
									repStoreAsParent,
									$author$project$Replicated$Change$Location$newSingle('repStoreVal'),
									key,
									pendingChild)));
					});
				var createObjectAt = function (key) {
					return A2(
						$author$project$Replicated$Codec$new,
						valueCodec,
						A2(
							$author$project$Replicated$Change$Context,
							$author$project$Replicated$Change$Location$newSingle('repStoreNew'),
							A2(
								$author$project$Replicated$Change$becomeDelayedParent,
								repStorePointer,
								wrapNewPendingChild(key))));
				};
				var allEntries = A2(
					$elm$core$List$filterMap,
					function (event) {
						return A4(
							entryNodeDecoder,
							node,
							repStoreAsParent,
							$elm$core$Maybe$Nothing,
							$author$project$Replicated$Object$eventPayloadAsJson(event));
					},
					$turboMaCk$any_dict$Dict$Any$values(
						$author$project$Replicated$Object$getEvents(repStoreObject)));
				var entriesDict = function () {
					var addEntryToDict = F2(
						function (_v1, dictSoFar) {
							var k = _v1.a;
							var v = _v1.b;
							return A3(
								$turboMaCk$any_dict$Dict$Any$update,
								k,
								updateEntry(v),
								dictSoFar);
						});
					return A3(
						$elm$core$List$foldl,
						addEntryToDict,
						$turboMaCk$any_dict$Dict$Any$empty(keyToString),
						allEntries);
				}();
				var fetcher = function (key) {
					return A2(
						$elm$core$Maybe$withDefault,
						createObjectAt(key),
						A2(
							$elm$core$Maybe$andThen,
							$elm$core$List$head,
							A2($turboMaCk$any_dict$Dict$Any$get, key, entriesDict)));
				};
				return $author$project$Replicated$Reducer$RepStore$buildFromReplicaDb(
					{fetcher: fetcher, object: repStoreObject, start: changer});
			});
		var initializer = function (_v0) {
			var parent = _v0.parent;
			var position = _v0.position;
			var seed = _v0.seed;
			return A3(
				repStoreBuilder,
				{cutoff: $elm$core$Maybe$Nothing, node: $author$project$Replicated$Node$Node$testNode, parent: parent, position: position},
				seed,
				_List_Nil);
		};
		var repStoreNodeDecoder = function (details) {
			return A2(
				$elm$json$Json$Decode$map,
				A2(
					$elm$core$Basics$composeR,
					A2(repStoreBuilder, details, $author$project$Replicated$Codec$nonChanger),
					$elm$core$Result$Ok),
				$author$project$Replicated$Codec$concurrentObjectIDsDecoder);
		};
		var bytesEncoder = function (input) {
			return A2(
				$author$project$Replicated$Codec$getBytesEncoder,
				flatDictListCodec,
				$author$project$Replicated$Reducer$RepStore$listModified(input));
		};
		return $author$project$Replicated$Codec$Codec(
			{
				bytesDecoder: $elm$bytes$Bytes$Decode$fail,
				bytesEncoder: bytesEncoder,
				jsonDecoder: $elm$json$Json$Decode$fail('no repstore'),
				jsonEncoder: jsonEncoder,
				nodeDecoder: repStoreNodeDecoder,
				nodeEncoder: repStoreNodeEncoder,
				nodePlaceholder: initializer
			});
	});
var $author$project$Replicated$Codec$seedlessPair = F2(
	function (codecFirst, codecSecond) {
		return $author$project$Replicated$Codec$finishRecord(
			A4(
				$author$project$Replicated$Codec$fieldReg,
				_Utils_Tuple2(2, 'second'),
				$elm$core$Tuple$second,
				codecSecond,
				A4(
					$author$project$Replicated$Codec$fieldReg,
					_Utils_Tuple2(1, 'first'),
					$elm$core$Tuple$first,
					codecFirst,
					$author$project$Replicated$Codec$record($elm$core$Tuple$pair))));
	});
var $author$project$Activity$Activity$storeCodec = A2(
	$author$project$Replicated$Codec$seedlessPair,
	A2($author$project$Replicated$Codec$repStore, $author$project$Activity$Template$codec, $author$project$Activity$Activity$builtInActivitySkelCodec),
	$author$project$Replicated$Codec$repDb($author$project$Activity$Activity$customActivitySkelCodec));
var $author$project$Profile$TodoistIntegrationData = F3(
	function (cache, parentProjectID, activityProjectIDs) {
		return {activityProjectIDs: activityProjectIDs, cache: cache, parentProjectID: parentProjectID};
	});
var $author$project$Incubator$Todoist$Cache = F4(
	function (nextSync, items, projects, pendingCommands) {
		return {items: items, nextSync: nextSync, pendingCommands: pendingCommands, projects: projects};
	});
var $author$project$Incubator$Todoist$IncrementalSyncToken = function (a) {
	return {$: 'IncrementalSyncToken', a: a};
};
var $elm_community$intdict$IntDict$Empty = {$: 'Empty'};
var $elm_community$intdict$IntDict$empty = $elm_community$intdict$IntDict$Empty;
var $author$project$Replicated$Codec$field = F5(
	function (_v0, fieldGetter, fieldCodec, fieldDefault, soFar) {
		var fieldSlot = _v0.a;
		var fieldName = _v0.b;
		return A5(
			$author$project$Replicated$Codec$readableHelper,
			_Utils_Tuple2(fieldSlot, fieldName),
			fieldGetter,
			fieldCodec,
			$author$project$Replicated$Codec$HardcodedDefault(fieldDefault),
			soFar);
	});
var $author$project$Replicated$Codec$todo = function (bogusValue) {
	return $author$project$Replicated$Codec$Codec(
		{
			bytesDecoder: $elm$bytes$Bytes$Decode$fail,
			bytesEncoder: function (_v0) {
				return $elm$bytes$Bytes$Encode$unsignedInt8(9);
			},
			jsonDecoder: $elm$json$Json$Decode$fail('TODO'),
			jsonEncoder: function (_v1) {
				return $elm$json$Json$Encode$null;
			},
			nodeDecoder: function (_v2) {
				return $elm$json$Json$Decode$fail('TODO');
			},
			nodeEncoder: function (_v3) {
				return $author$project$Replicated$Codec$singlePrimitiveOut(
					$author$project$Replicated$Change$StringAtom('TODO'));
			},
			nodePlaceholder: function (_v4) {
				return bogusValue;
			}
		});
};
var $author$project$Incubator$Todoist$cacheCodec = $author$project$Replicated$Codec$finishRecord(
	A5(
		$author$project$Replicated$Codec$field,
		_Utils_Tuple2(4, 'pendingCommands'),
		function ($) {
			return $.pendingCommands;
		},
		$author$project$Replicated$Codec$list($author$project$Replicated$Codec$string),
		_List_Nil,
		A5(
			$author$project$Replicated$Codec$field,
			_Utils_Tuple2(3, 'projects'),
			function ($) {
				return $.projects;
			},
			$author$project$Replicated$Codec$todo($elm_community$intdict$IntDict$empty),
			$elm_community$intdict$IntDict$empty,
			A5(
				$author$project$Replicated$Codec$field,
				_Utils_Tuple2(2, 'items'),
				function ($) {
					return $.items;
				},
				$author$project$Replicated$Codec$todo($elm_community$intdict$IntDict$empty),
				$elm_community$intdict$IntDict$empty,
				A5(
					$author$project$Replicated$Codec$field,
					_Utils_Tuple2(1, 'nextSync'),
					function ($) {
						return $.nextSync;
					},
					A3(
						$author$project$Replicated$Codec$map,
						$author$project$Incubator$Todoist$IncrementalSyncToken,
						function (_v0) {
							var t = _v0.a;
							return t;
						},
						$author$project$Replicated$Codec$string),
					$author$project$Incubator$Todoist$IncrementalSyncToken('*'),
					$author$project$Replicated$Codec$record($author$project$Incubator$Todoist$Cache))))));
var $elm_community$intdict$IntDict$Inner = function (a) {
	return {$: 'Inner', a: a};
};
var $elm_community$intdict$IntDict$size = function (dict) {
	switch (dict.$) {
		case 'Empty':
			return 0;
		case 'Leaf':
			return 1;
		default:
			var i = dict.a;
			return i.size;
	}
};
var $elm_community$intdict$IntDict$inner = F3(
	function (p, l, r) {
		var _v0 = _Utils_Tuple2(l, r);
		if (_v0.a.$ === 'Empty') {
			var _v1 = _v0.a;
			return r;
		} else {
			if (_v0.b.$ === 'Empty') {
				var _v2 = _v0.b;
				return l;
			} else {
				return $elm_community$intdict$IntDict$Inner(
					{
						left: l,
						prefix: p,
						right: r,
						size: $elm_community$intdict$IntDict$size(l) + $elm_community$intdict$IntDict$size(r)
					});
			}
		}
	});
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm_community$intdict$IntDict$highestBitSet = function (n) {
	var shiftOr = F2(
		function (i, shift) {
			return i | (i >>> shift);
		});
	var n1 = A2(shiftOr, n, 1);
	var n2 = A2(shiftOr, n1, 2);
	var n3 = A2(shiftOr, n2, 4);
	var n4 = A2(shiftOr, n3, 8);
	var n5 = A2(shiftOr, n4, 16);
	return n5 & (~(n5 >>> 1));
};
var $elm_community$intdict$IntDict$signBit = $elm_community$intdict$IntDict$highestBitSet(-1);
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm_community$intdict$IntDict$isBranchingBitSet = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Bitwise$xor($elm_community$intdict$IntDict$signBit),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Bitwise$and(p.branchingBit),
			$elm$core$Basics$neq(0)));
};
var $elm_community$intdict$IntDict$higherBitMask = function (branchingBit) {
	return branchingBit ^ (~(branchingBit - 1));
};
var $elm_community$intdict$IntDict$lcp = F2(
	function (x, y) {
		var branchingBit = $elm_community$intdict$IntDict$highestBitSet(x ^ y);
		var mask = $elm_community$intdict$IntDict$higherBitMask(branchingBit);
		var prefixBits = x & mask;
		return {branchingBit: branchingBit, prefixBits: prefixBits};
	});
var $elm_community$intdict$IntDict$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm_community$intdict$IntDict$leaf = F2(
	function (k, v) {
		return $elm_community$intdict$IntDict$Leaf(
			{key: k, value: v});
	});
var $elm_community$intdict$IntDict$prefixMatches = F2(
	function (p, n) {
		return _Utils_eq(
			n & $elm_community$intdict$IntDict$higherBitMask(p.branchingBit),
			p.prefixBits);
	});
var $elm_community$intdict$IntDict$update = F3(
	function (key, alter, dict) {
		var join = F2(
			function (_v2, _v3) {
				var k1 = _v2.a;
				var l = _v2.b;
				var k2 = _v3.a;
				var r = _v3.b;
				var prefix = A2($elm_community$intdict$IntDict$lcp, k1, k2);
				return A2($elm_community$intdict$IntDict$isBranchingBitSet, prefix, k2) ? A3($elm_community$intdict$IntDict$inner, prefix, l, r) : A3($elm_community$intdict$IntDict$inner, prefix, r, l);
			});
		var alteredNode = function (mv) {
			var _v1 = alter(mv);
			if (_v1.$ === 'Just') {
				var v = _v1.a;
				return A2($elm_community$intdict$IntDict$leaf, key, v);
			} else {
				return $elm_community$intdict$IntDict$empty;
			}
		};
		switch (dict.$) {
			case 'Empty':
				return alteredNode($elm$core$Maybe$Nothing);
			case 'Leaf':
				var l = dict.a;
				return _Utils_eq(l.key, key) ? alteredNode(
					$elm$core$Maybe$Just(l.value)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(l.key, dict));
			default:
				var i = dict.a;
				return A2($elm_community$intdict$IntDict$prefixMatches, i.prefix, key) ? (A2($elm_community$intdict$IntDict$isBranchingBitSet, i.prefix, key) ? A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					i.left,
					A3($elm_community$intdict$IntDict$update, key, alter, i.right)) : A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					A3($elm_community$intdict$IntDict$update, key, alter, i.left),
					i.right)) : A2(
					join,
					_Utils_Tuple2(
						key,
						alteredNode($elm$core$Maybe$Nothing)),
					_Utils_Tuple2(i.prefix.prefixBits, dict));
		}
	});
var $elm_community$intdict$IntDict$insert = F3(
	function (key, value, dict) {
		return A3(
			$elm_community$intdict$IntDict$update,
			key,
			$elm$core$Basics$always(
				$elm$core$Maybe$Just(value)),
			dict);
	});
var $elm_community$intdict$IntDict$fromList = function (pairs) {
	return A3(
		$elm$core$List$foldl,
		function (_v0) {
			var a = _v0.a;
			var b = _v0.b;
			return A2($elm_community$intdict$IntDict$insert, a, b);
		},
		$elm_community$intdict$IntDict$empty,
		pairs);
};
var $elm_community$intdict$IntDict$foldr = F3(
	function (f, acc, dict) {
		foldr:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var l = dict.a;
					return A3(f, l.key, l.value, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($elm_community$intdict$IntDict$foldr, f, acc, i.right),
						$temp$dict = i.left;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldr;
			}
		}
	});
var $elm_community$intdict$IntDict$toList = function (dict) {
	return A3(
		$elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $author$project$ExtraCodecs$intDict = function (valueCodec) {
	var keyValuePairCodec = A2($author$project$Replicated$Codec$pair, $author$project$Replicated$Codec$int, valueCodec);
	return A3(
		$author$project$Replicated$Codec$map,
		$elm_community$intdict$IntDict$fromList,
		$elm_community$intdict$IntDict$toList,
		$author$project$Replicated$Codec$list(keyValuePairCodec));
};
var $author$project$Profile$todoistIntegrationDataCodec = $author$project$Replicated$Codec$finishRecord(
	A5(
		$author$project$Replicated$Codec$field,
		_Utils_Tuple2(3, 'activityProjectIDs'),
		function ($) {
			return $.activityProjectIDs;
		},
		$author$project$ExtraCodecs$intDict($author$project$Activity$Activity$idCodec),
		$elm_community$intdict$IntDict$empty,
		A4(
			$author$project$Replicated$Codec$maybeR,
			_Utils_Tuple2(2, 'parentProjectID'),
			function ($) {
				return $.parentProjectID;
			},
			$author$project$Replicated$Codec$int,
			A4(
				$author$project$Replicated$Codec$fieldReg,
				_Utils_Tuple2(1, 'cache'),
				function ($) {
					return $.cache;
				},
				$author$project$Replicated$Codec$lazy(
					function (_v0) {
						return $author$project$Incubator$Todoist$cacheCodec;
					}),
				$author$project$Replicated$Codec$record($author$project$Profile$TodoistIntegrationData)))));
var $author$project$Profile$codec = $author$project$Replicated$Codec$finishRecord(
	A4(
		$author$project$Replicated$Codec$fieldList,
		_Utils_Tuple2(8, 'timeBlocks'),
		function ($) {
			return $.timeBlocks;
		},
		$author$project$TimeBlock$TimeBlock$codec,
		A4(
			$author$project$Replicated$Codec$fieldReg,
			_Utils_Tuple2(7, 'todoist'),
			function ($) {
				return $.todoist;
			},
			$author$project$Replicated$Codec$lazy(
				function (_v0) {
					return $author$project$Profile$todoistIntegrationDataCodec;
				}),
			A4(
				$author$project$Replicated$Codec$fieldRec,
				_Utils_Tuple2(6, 'timeline'),
				function ($) {
					return $.timeline;
				},
				$author$project$Activity$Timeline$codec,
				A4(
					$author$project$Replicated$Codec$fieldRec,
					_Utils_Tuple2(5, 'activities'),
					function ($) {
						return $.activities;
					},
					$author$project$Activity$Activity$storeCodec,
					A4(
						$author$project$Replicated$Codec$fieldDb,
						_Utils_Tuple2(4, 'taskInstances'),
						function ($) {
							return $.taskInstances;
						},
						$author$project$Task$AssignedAction$codec,
						A4(
							$author$project$Replicated$Codec$fieldDb,
							_Utils_Tuple2(3, 'taskClasses'),
							function ($) {
								return $.taskClasses;
							},
							$author$project$Task$ActionClass$codec,
							A4(
								$author$project$Replicated$Codec$fieldList,
								_Utils_Tuple2(2, 'taskEntries'),
								function ($) {
									return $.taskEntries;
								},
								$author$project$Task$Entry$codec,
								A4(
									$author$project$Replicated$Codec$fieldList,
									_Utils_Tuple2(1, 'errors'),
									function ($) {
										return $.errors;
									},
									$author$project$Replicated$Codec$string,
									$author$project$Replicated$Codec$record($author$project$Profile$Profile))))))))));
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Main$incomingFramesFromElsewhere = _Platform_incomingPort('incomingFramesFromElsewhere', $elm$json$Json$Decode$string);
var $author$project$Main$HomePage = {$: 'HomePage'};
var $mdgriffith$elm_ui$Element$Phone = {$: 'Phone'};
var $author$project$Main$ResizeViewport = F2(
	function (a, b) {
		return {$: 'ResizeViewport', a: a, b: b};
	});
var $elm$browser$Browser$Events$Visible = {$: 'Visible'};
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $author$project$Main$ClearErrors = {$: 'ClearErrors'};
var $author$project$Main$Marvin = {$: 'Marvin'};
var $author$project$Main$TaskListMsg = function (a) {
	return {$: 'TaskListMsg', a: a};
};
var $author$project$Main$ThirdPartySync = function (a) {
	return {$: 'ThirdPartySync', a: a};
};
var $author$project$Main$TimeTrackerMsg = function (a) {
	return {$: 'TimeTrackerMsg', a: a};
};
var $author$project$Main$Todoist = {$: 'Todoist'};
var $author$project$Main$bypassFakeFragment = function (url) {
	return {
		fragment: $elm$core$Maybe$Nothing,
		host: url.host,
		path: A2($elm$core$Maybe$withDefault, '/', url.fragment),
		port_: url.port_,
		protocol: url.protocol,
		query: url.query
	};
};
var $elm$url$Url$Parser$Internal$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$Query$custom = F2(
	function (key, func) {
		return $elm$url$Url$Parser$Internal$Parser(
			function (dict) {
				return func(
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, key, dict)));
			});
	});
var $elm$url$Url$Parser$Query$enum = F2(
	function (key, dict) {
		return A2(
			$elm$url$Url$Parser$Query$custom,
			key,
			function (stringList) {
				if (stringList.b && (!stringList.b.b)) {
					var str = stringList.a;
					return A2($elm$core$Dict$get, str, dict);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			});
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $elm$url$Url$Parser$query = function (_v0) {
	var queryParser = _v0.a;
	return $elm$url$Url$Parser$Parser(
		function (_v1) {
			var visited = _v1.visited;
			var unvisited = _v1.unvisited;
			var params = _v1.params;
			var frag = _v1.frag;
			var value = _v1.value;
			return _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					visited,
					unvisited,
					params,
					frag,
					value(
						queryParser(params)))
				]);
		});
};
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$External$Tasker$flash = _Platform_outgoingPort('flash', $elm$json$Json$Encode$string);
var $author$project$External$Commands$toast = function (message) {
	return $author$project$External$Tasker$flash(message);
};
var $author$project$TaskList$StartTracking = F2(
	function (a, b) {
		return {$: 'StartTracking', a: a, b: b};
	});
var $author$project$TaskList$StopTracking = function (a) {
	return {$: 'StopTracking', a: a};
};
var $author$project$TaskList$UpdateProgress = F2(
	function (a, b) {
		return {$: 'UpdateProgress', a: a, b: b};
	});
var $author$project$Task$AssignedAction$getActivityID = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).activity.get;
};
var $author$project$Task$AssignedAction$getID = function (ins) {
	return ins.instanceID;
};
var $author$project$Task$AssignedAction$getProgress = function (instance) {
	return _Utils_Tuple2(
		$author$project$Replicated$Reducer$Register$latest(instance.instance).completion.get,
		$author$project$Replicated$Reducer$Register$latest(instance._class).completionUnits.get);
};
var $author$project$Task$Progress$unitMax = function (unit) {
	switch (unit.$) {
		case 'Percent':
			return 100;
		case 'Permille':
			return 1000;
		case 'Word':
			var wordTarget = unit.a;
			return wordTarget;
		case 'Minute':
			var minuteTarget = unit.a;
			return minuteTarget;
		default:
			var _v1 = unit.a;
			var customTarget = unit.b;
			return customTarget;
	}
};
var $author$project$Task$Progress$getWhole = function (_v0) {
	var unit = _v0.b;
	return $author$project$Task$Progress$unitMax(unit);
};
var $author$project$Replicated$Reducer$Register$getPointer = function (_v0) {
	var register = _v0.a;
	return register.pointer;
};
var $author$project$Task$ActionClass$makeFullActionClass = F3(
	function (parentPropsRegList, recurrenceRules, action) {
		return {
			_class: action,
			classID: $author$project$ID$fromPointer(
				$author$project$Replicated$Reducer$Register$getPointer(action)),
			parents: parentPropsRegList,
			recurrence: recurrenceRules
		};
	});
var $author$project$Task$Entry$insideContainerOfActions = F3(
	function (accumulator, recurrenceRules, child) {
		if (child.$ === 'ActionIsHere') {
			var action = child.a;
			return $elm$core$List$singleton(
				A3($author$project$Task$ActionClass$makeFullActionClass, accumulator, recurrenceRules, action));
		} else {
			var followerParent = child.a;
			return A3(
				$author$project$Task$Entry$traverseContainerOfActions,
				A2($elm$core$List$cons, followerParent.properties, accumulator),
				recurrenceRules,
				followerParent);
		}
	});
var $author$project$Task$Entry$traverseContainerOfActions = F3(
	function (accumulator, recurrenceRules, _class) {
		return A2(
			$elm$core$List$concatMap,
			A2($author$project$Task$Entry$insideContainerOfActions, accumulator, recurrenceRules),
			$author$project$Replicated$Reducer$RepList$listValues(_class.children));
	});
var $author$project$Task$Entry$traverseAssignable = F2(
	function (accumulator, leaderParent) {
		return A2(
			$elm$core$List$concatMap,
			A2(
				$author$project$Task$Entry$insideContainerOfActions,
				accumulator,
				$author$project$Replicated$Reducer$Register$latest(leaderParent).recurrenceRules.get),
			$author$project$Replicated$Reducer$RepList$listValues(
				$author$project$Replicated$Reducer$Register$latest(leaderParent).children));
	});
var $author$project$Task$Entry$insideContainerOfAssignables = F2(
	function (accumulator, child) {
		if (child.$ === 'AssignableIsDeeper') {
			var parent = child.a;
			return A2(
				$author$project$Task$Entry$traverseContainerOfAssignables,
				A2($elm$core$List$cons, parent.properties, accumulator),
				parent);
		} else {
			var leaderClass = child.a;
			return A2(
				$author$project$Task$Entry$traverseAssignable,
				A2(
					$elm$core$List$cons,
					$author$project$Replicated$Reducer$Register$latest(leaderClass).properties,
					accumulator),
				leaderClass);
		}
	});
var $author$project$Task$Entry$traverseContainerOfAssignables = F2(
	function (accumulator, parent) {
		return A2(
			$elm$core$List$concatMap,
			$author$project$Task$Entry$insideContainerOfAssignables(accumulator),
			$author$project$Replicated$Reducer$RepList$listValues(parent.children));
	});
var $author$project$Task$Entry$traverseEntries = function (entry) {
	return A2($author$project$Task$Entry$insideContainerOfAssignables, _List_Nil, entry);
};
var $author$project$Task$Entry$flattenEntriesToActions = function (entries) {
	return A2(
		$elm$core$List$concatMap,
		$author$project$Task$Entry$traverseEntries,
		$author$project$Replicated$Reducer$RepList$listValues(entries));
};
var $author$project$ZoneHistory$ZoneHistory = F2(
	function (a, b) {
		return {$: 'ZoneHistory', a: a, b: b};
	});
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $author$project$ZoneHistory$init = F2(
	function (now, nowZone) {
		return A2(
			$author$project$ZoneHistory$ZoneHistory,
			nowZone,
			A2(
				$elm$core$Dict$singleton,
				$author$project$SmartTime$Moment$toSmartInt(now),
				nowZone));
	});
var $author$project$SmartTime$Period$Period = F2(
	function (a, b) {
		return {$: 'Period', a: a, b: b};
	});
var $author$project$SmartTime$Period$instantaneous = function (moment) {
	return A2($author$project$SmartTime$Period$Period, moment, moment);
};
var $author$project$Task$AssignedAction$fillSeries = F3(
	function (_v0, fullClass, seriesRule) {
		var zoneHistory = _v0.a;
		var relevantPeriod = _v0.b;
		return _List_Nil;
	});
var $author$project$Replicated$Reducer$RepDb$members = function (_v0) {
	var repSetRecord = _v0.a;
	return $turboMaCk$any_dict$Dict$Any$values(repSetRecord.members);
};
var $author$project$Task$AssignedAction$assignedActionsOfClass = F3(
	function (_v0, instanceDb, fullClass) {
		var zoneHistory = _v0.a;
		var relevantPeriod = _v0.b;
		var toFull = F2(
			function (indexFromZero, instanceSkelMember) {
				return {_class: fullClass._class, classID: fullClass.classID, index: indexFromZero + 1, instance: instanceSkelMember.value, instanceID: instanceSkelMember.id, parents: fullClass.parents, remove: instanceSkelMember.remove};
			});
		var savedInstancesWithMatchingClass = A2(
			$elm$core$List$filter,
			function (member) {
				return _Utils_eq(
					$author$project$Replicated$Reducer$Register$latest(member.value).classID.get,
					fullClass.classID);
			},
			$author$project$Replicated$Reducer$RepDb$members(instanceDb));
		var savedInstancesFull = A2($elm$core$List$indexedMap, toFull, savedInstancesWithMatchingClass);
		var relevantSeriesMembers = A3(
			$author$project$Task$AssignedAction$fillSeries,
			_Utils_Tuple2(zoneHistory, relevantPeriod),
			fullClass,
			fullClass.recurrence);
		var isRelevant = function (savedInstance) {
			return true;
		};
		var relevantSavedInstances = A2($elm$core$List$filter, isRelevant, savedInstancesFull);
		return _Utils_ap(relevantSavedInstances, relevantSeriesMembers);
	});
var $author$project$Task$AssignedAction$listAllAssignedActions = F3(
	function (fullClasses, instanceDb, timeData) {
		return A2(
			$elm$core$List$concatMap,
			A2($author$project$Task$AssignedAction$assignedActionsOfClass, timeData, instanceDb),
			fullClasses);
	});
var $author$project$Profile$instanceListNow = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var zoneHistory = A2($author$project$ZoneHistory$init, time, timeZone);
		var rightNow = $author$project$SmartTime$Period$instantaneous(time);
		var fullClasses = $author$project$Task$Entry$flattenEntriesToActions(profile.taskEntries);
		return A3(
			$author$project$Task$AssignedAction$listAllAssignedActions,
			fullClasses,
			profile.taskInstances,
			_Utils_Tuple2(zoneHistory, rightNow));
	});
var $author$project$ID$toString = function (givenID) {
	if (givenID.$ === 'IDFromExisting') {
		var objectID = givenID.a;
		return $author$project$Replicated$Op$OpID$toString(objectID);
	} else {
		return A2($author$project$Log$crashInDev, 'Supposed to be impossible: toString called on an ID when the wrapped pointer was for a placeholder. All IDs should represent existing Objects with ObjectIDs', 'Placeholder Pointer: Object Not Yet Initialized');
	}
};
var $author$project$TaskList$urlTriggers = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var startTriggerEntry = function (fullInstance) {
			var _v3 = $author$project$Task$AssignedAction$getActivityID(fullInstance);
			if (_v3.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var hasActivityID = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple3(
						$author$project$ID$toString(
							$author$project$Task$AssignedAction$getID(fullInstance)),
						A2(
							$author$project$TaskList$StartTracking,
							$author$project$Task$AssignedAction$getID(fullInstance),
							hasActivityID),
						$author$project$TaskList$StopTracking(
							$author$project$Task$AssignedAction$getID(fullInstance))));
			}
		};
		var fullTaskInstances = A2(
			$author$project$Profile$instanceListNow,
			profile,
			_Utils_Tuple2(time, timeZone));
		var taskIDsWithStartMsg = A2(
			$elm$core$List$map,
			function (_v2) {
				var entryID = _v2.a;
				var entryStart = _v2.b;
				return _Utils_Tuple2(entryID, entryStart);
			},
			A2($elm$core$List$filterMap, startTriggerEntry, fullTaskInstances));
		var taskIDsWithStopMsg = A2(
			$elm$core$List$map,
			function (_v1) {
				var entryID = _v1.a;
				var entryStop = _v1.c;
				return _Utils_Tuple2(entryID, entryStop);
			},
			A2($elm$core$List$filterMap, startTriggerEntry, fullTaskInstances));
		var doneTriggerEntry = function (fullInstance) {
			return _Utils_Tuple2(
				$author$project$ID$toString(
					$author$project$Task$AssignedAction$getID(fullInstance)),
				A2(
					$author$project$TaskList$UpdateProgress,
					fullInstance,
					$author$project$Task$Progress$getWhole(
						$author$project$Task$AssignedAction$getProgress(fullInstance))));
		};
		var tasksIDsWithDoneMsg = A2($elm$core$List$map, doneTriggerEntry, fullTaskInstances);
		return _List_fromArray(
			[
				_Utils_Tuple2(
				'complete',
				$elm$core$Dict$fromList(tasksIDsWithDoneMsg)),
				_Utils_Tuple2(
				'startTask',
				$elm$core$Dict$fromList(taskIDsWithStartMsg)),
				_Utils_Tuple2(
				'stopTask',
				$elm$core$Dict$fromList(taskIDsWithStopMsg))
			]);
	});
var $author$project$TimeTracker$ExportVM = {$: 'ExportVM'};
var $author$project$TimeTracker$StartTracking = function (a) {
	return {$: 'StartTracking', a: a};
};
var $author$project$Activity$Template$all = A2($elm$core$List$cons, $author$project$Activity$Template$DillyDally, $author$project$Activity$Template$allExceptDillyDally);
var $author$project$Activity$Activity$BuiltIn = F2(
	function (a, b) {
		return {$: 'BuiltIn', a: a, b: b};
	});
var $author$project$Activity$Activity$Custom = F3(
	function (a, b, c) {
		return {$: 'Custom', a: a, b: b, c: c};
	});
var $author$project$Replicated$Reducer$RepDb$get = F2(
	function (givenID, _v0) {
		var repDbRecord = _v0.a;
		var _v1 = $author$project$ID$getObjectID(givenID);
		if (_v1.$ === 'Just') {
			var objectID = _v1.a;
			return A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2($turboMaCk$any_dict$Dict$Any$get, objectID, repDbRecord.members));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Replicated$Reducer$RepStore$get = F2(
	function (key, _v0) {
		var store = _v0.a;
		return store.entryFetcher(key);
	});
var $author$project$Activity$Activity$getByID = F2(
	function (activityID, _v0) {
		var builtins = _v0.a;
		var customs = _v0.b;
		if (activityID.$ === 'BuiltInActivityID') {
			var template = activityID.a;
			return A2(
				$author$project$Activity$Activity$BuiltIn,
				template,
				A2($author$project$Replicated$Reducer$RepStore$get, template, builtins));
		} else {
			var template = activityID.a;
			var customSkelID = activityID.b;
			var _v2 = A2($author$project$Replicated$Reducer$RepDb$get, customSkelID, customs);
			if (_v2.$ === 'Just') {
				var foundCustom = _v2.a;
				return A3($author$project$Activity$Activity$Custom, template, foundCustom, customSkelID);
			} else {
				return _Debug_todo(
					'Activity.Activity',
					{
						start: {line: 1278, column: 21},
						end: {line: 1278, column: 31}
					})('tried to access an activity that was deleted/corrupted/unknown!');
			}
		}
	});
var $author$project$Activity$Activity$getAllIncludingHidden = function (store) {
	var customs = _List_Nil;
	var builtIns = A2($elm$core$List$map, $author$project$Activity$Activity$BuiltInActivityID, $author$project$Activity$Template$all);
	return A2(
		$elm$core$List$map,
		function (a) {
			return A2($author$project$Activity$Activity$getByID, a, store);
		},
		_Utils_ap(builtIns, customs));
};
var $author$project$Activity$Activity$isHidden = function (act) {
	if (act.$ === 'BuiltIn') {
		var builtInSkel = act.b;
		return builtInSkel.hidden.get;
	} else {
		var customSkel = act.b;
		return customSkel.hidden.get;
	}
};
var $author$project$Activity$Activity$isShowing = function (act) {
	return !$author$project$Activity$Activity$isHidden(act);
};
var $author$project$Activity$Activity$allUnhidden = function (store) {
	return A2(
		$elm$core$List$filter,
		$author$project$Activity$Activity$isShowing,
		$author$project$Activity$Activity$getAllIncludingHidden(store));
};
var $author$project$Activity$Activity$getID = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		return $author$project$Activity$Activity$BuiltInActivityID(template);
	} else {
		var template = act.a;
		var customActivitySkelID = act.c;
		return A2($author$project$Activity$Activity$CustomActivityID, template, customActivitySkelID);
	}
};
var $author$project$Activity$Activity$Communication = {$: 'Communication'};
var $author$project$Activity$Activity$Hygiene = {$: 'Hygiene'};
var $author$project$Activity$Activity$Slacking = {$: 'Slacking'};
var $author$project$Activity$Activity$Transit = {$: 'Transit'};
var $author$project$Activity$Activity$defaults = function (startWith) {
	switch (startWith.$) {
		case 'DillyDally':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$File('shrugging-attempt.svg'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Minutes(0),
					$author$project$SmartTime$Human$Duration$Hours(1)),
				names: _List_fromArray(
					['Nothing', 'Dilly-dally', 'Distracted']),
				taskOptional: true
			};
		case 'Apparel':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Hygiene,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(5),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$File('shirt.svg'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Appareling', 'Dressing', 'Getting Dressed', 'Dressing Up']),
				taskOptional: true
			};
		case 'Messaging':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Communication,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(7),
						$author$project$SmartTime$Human$Duration$Minutes(30))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$File('messaging.svg'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Hours(5)),
				names: _List_fromArray(
					['Messaging', 'Texting', 'Chatting', 'Text Messaging']),
				taskOptional: true
			};
		case 'Restroom':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(15),
						$author$project$SmartTime$Human$Duration$Hours(2))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🚽'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Minutes(20),
					$author$project$SmartTime$Human$Duration$Hours(2)),
				names: _List_fromArray(
					['Restroom', 'Toilet', 'WC', 'Washroom', 'Latrine', 'Lavatory', 'Water Closet', 'Bathroom']),
				taskOptional: true
			};
		case 'Grooming':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💈'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Grooming', 'Tending', 'Groom', 'Personal Care']),
				taskOptional: true
			};
		case 'Meal':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(40),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🍽'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Meal', 'Eating', 'Food', 'Lunch', 'Dinner', 'Breakfast']),
				taskOptional: true
			};
		case 'Supplements':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💊'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Supplements', 'Pills', 'Medication']),
				taskOptional: true
			};
		case 'Workout':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(12),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💪'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Workout', 'Working Out', 'Work Out']),
				taskOptional: true
			};
		case 'Shower':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(25),
						$author$project$SmartTime$Human$Duration$Hours(18))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🚿'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Shower', 'Bathing', 'Showering']),
				taskOptional: true
			};
		case 'Toothbrush':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('\uD83E\uDEA5'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Toothbrush', 'Teeth', 'Brushing Teeth', 'Teethbrushing']),
				taskOptional: true
			};
		case 'Floss':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🦷'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Floss', 'Flossing']),
				taskOptional: true
			};
		case 'Wakeup':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(12),
						$author$project$SmartTime$Human$Duration$Hours(15))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🥱'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Wakeup', 'Waking Up', 'Wakeup Walk']),
				taskOptional: true
			};
		case 'Sleep':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Hours(10),
						$author$project$SmartTime$Human$Duration$Hours(20))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💤'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Sleep', 'Sleeping']),
				taskOptional: true
			};
		case 'Plan':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(20),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📅'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Plan', 'Planning', 'Plans']),
				taskOptional: true
			};
		case 'Configure':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(15),
						$author$project$SmartTime$Human$Duration$Hours(5))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🔧'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Configure', 'Configuring', 'Configuration']),
				taskOptional: true
			};
		case 'Email':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(15),
						$author$project$SmartTime$Human$Duration$Hours(4))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📧'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Email', 'E-Mail', 'E-mail', 'Emailing', 'E-mails', 'Emails', 'E-mailing']),
				taskOptional: true
			};
		case 'Work':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Hours(1),
						$author$project$SmartTime$Human$Duration$Hours(12))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💼'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(8),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Work', 'Working', 'Listings Work']),
				taskOptional: true
			};
		case 'Call':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(35),
						$author$project$SmartTime$Human$Duration$Hours(4))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🗣'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Call', 'Calling', 'Phone Call', 'Phone', 'Phone Calls', 'Calling', 'Voice Call', 'Voice Chat', 'Video Call']),
				taskOptional: true
			};
		case 'Chores':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(25),
						$author$project$SmartTime$Human$Duration$Hours(4))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🧹'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Chore', 'Chores']),
				taskOptional: true
			};
		case 'Parents':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Hours(1),
						$author$project$SmartTime$Human$Duration$Hours(12))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('👫'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Parents', 'Parent']),
				taskOptional: true
			};
		case 'Prepare':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🧳'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Minutes(30),
					$author$project$SmartTime$Human$Duration$Hours(24)),
				names: _List_fromArray(
					['Prepare', 'Preparing', 'Preparation']),
				taskOptional: false
			};
		case 'Lover':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Hours(2),
						$author$project$SmartTime$Human$Duration$Hours(8))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💋'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Lover', 'S.O.', 'Partner']),
				taskOptional: true
			};
		case 'Driving':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Transit,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Hours(1),
						$author$project$SmartTime$Human$Duration$Hours(6))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🚗'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Driving', 'Drive']),
				taskOptional: true
			};
		case 'Riding':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(30),
						$author$project$SmartTime$Human$Duration$Hours(8))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💺'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Minutes(30),
					$author$project$SmartTime$Human$Duration$Hours(5)),
				names: _List_fromArray(
					['Riding', 'Ride', 'Passenger']),
				taskOptional: true
			};
		case 'SocialMedia':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(20),
						$author$project$SmartTime$Human$Duration$Hours(4))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('👁'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Social Media']),
				taskOptional: true
			};
		case 'Pacing':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🚶'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Pacing', 'Pace']),
				taskOptional: true
			};
		case 'Sport':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(20),
						$author$project$SmartTime$Human$Duration$Hours(8))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('⛹'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Sport', 'Sports', 'Playing Sports']),
				taskOptional: true
			};
		case 'Finance':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(20),
						$author$project$SmartTime$Human$Duration$Hours(16))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💸'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Finance', 'Financial', 'Finances']),
				taskOptional: true
			};
		case 'Laundry':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('👕'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Laundry']),
				taskOptional: true
			};
		case 'Bedward':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🛏'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Bedward', 'Bedward-bound', 'Going to Bed']),
				taskOptional: true
			};
		case 'Browse':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📑'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Browse', 'Browsing']),
				taskOptional: true
			};
		case 'Fiction':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🐉'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Fiction', 'Reading Fiction']),
				taskOptional: true
			};
		case 'Learning':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(15),
						$author$project$SmartTime$Human$Duration$Hours(10))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🧠'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Learn', 'Learning', 'Reading', 'Read', 'Book', 'Books']),
				taskOptional: true
			};
		case 'BrainTrain':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(30),
						$author$project$SmartTime$Human$Duration$Hours(20))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('💡'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Brain Training', 'Braining', 'Brain Train', 'Mental Math Practice']),
				taskOptional: true
			};
		case 'Music':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🎧'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Music', 'Music Listening']),
				taskOptional: true
			};
		case 'Create':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(35),
						$author$project$SmartTime$Human$Duration$Hours(16))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🛠'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Create', 'Creating', 'Creation', 'Making']),
				taskOptional: true
			};
		case 'Children':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: true,
				icon: $author$project$Activity$Activity$Emoji('🚸'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Children', 'Kids']),
				taskOptional: true
			};
		case 'Meeting':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(35),
						$author$project$SmartTime$Human$Duration$Hours(8))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('👥'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(8),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Meeting', 'Meet', 'Meetings']),
				taskOptional: true
			};
		case 'Cinema':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🎟'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(3),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Cinema', 'Movies', 'Movie Theatre', 'Movie Theater']),
				taskOptional: true
			};
		case 'FilmWatching':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🎞'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Films', 'Film Watching', 'Watching Movies']),
				taskOptional: true
			};
		case 'Series':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📺'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Series', 'TV Shows', 'TV Series']),
				taskOptional: true
			};
		case 'Broadcast':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📻'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Broadcast']),
				taskOptional: true
			};
		case 'Theatre':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🎭'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Theatre', 'Play', 'Play/Musical', 'Drama']),
				taskOptional: true
			};
		case 'Shopping':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🛍'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Shopping', 'Shop']),
				taskOptional: true
			};
		case 'VideoGaming':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🎮'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Video', 'Video Gaming', 'Gaming']),
				taskOptional: true
			};
		case 'Housekeeping':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(20),
						$author$project$SmartTime$Human$Duration$Hours(6))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🏠'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Housekeeping']),
				taskOptional: true
			};
		case 'MealPrep':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(45),
						$author$project$SmartTime$Human$Duration$Hours(6))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🍳'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Meal Prep', 'Cooking', 'Food making']),
				taskOptional: true
			};
		case 'Networking':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🤝'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Networking']),
				taskOptional: true
			};
		case 'Meditate':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🧘'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Meditate', 'Meditation', 'Meditating']),
				taskOptional: true
			};
		case 'Homework':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📝'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Homework', 'Schoolwork']),
				taskOptional: true
			};
		case 'Flight':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('✈'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Flight', 'Aviation', 'Flying', 'Airport']),
				taskOptional: true
			};
		case 'Course':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📔'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Course', 'Courses', 'Classes', 'Class']),
				taskOptional: true
			};
		case 'Pet':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🐶'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Pet', 'Pets', 'Pet Care']),
				taskOptional: true
			};
		case 'Presentation':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$NeverExcused,
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('📊'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Presentation', 'Presenting', 'Present']),
				taskOptional: true
			};
		case 'Projects':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(40),
						$author$project$SmartTime$Human$Duration$Hours(4))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🌟'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(2),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Project', 'Projects', 'Project Work', 'Fun Project']),
				taskOptional: true
			};
		case 'Research':
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(10),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🤓'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(6),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Research', 'Researching', 'Looking Stuff Up', 'Evaluating']),
				taskOptional: true
			};
		default:
			return {
				backgroundable: false,
				category: $author$project$Activity$Activity$Slacking,
				evidence: _List_Nil,
				excusable: $author$project$Activity$Activity$TemporarilyExcused(
					_Utils_Tuple2(
						$author$project$SmartTime$Human$Duration$Minutes(10),
						$author$project$SmartTime$Human$Duration$Hours(3))),
				externalIDs: $elm$core$Dict$empty,
				hidden: false,
				icon: $author$project$Activity$Activity$Emoji('🔧'),
				id: $author$project$Activity$Activity$BuiltInActivityID(startWith),
				maxTime: _Utils_Tuple2(
					$author$project$SmartTime$Human$Duration$Hours(8),
					$author$project$SmartTime$Human$Duration$Days(1)),
				names: _List_fromArray(
					['Repair', 'Fix', 'Fixing', 'Fixing stuff']),
				taskOptional: true
			};
	}
};
var $author$project$Activity$Activity$getNames = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		var builtInSkel = act.b;
		return _Utils_ap(
			$author$project$Replicated$Reducer$RepList$listValues(builtInSkel.names),
			$author$project$Activity$Activity$defaults(template).names);
	} else {
		var template = act.a;
		var customSkel = act.b;
		return _Utils_ap(
			$author$project$Replicated$Reducer$RepList$listValues(customSkel.names),
			$author$project$Activity$Activity$defaults(template).names);
	}
};
var $elm$core$String$toLower = _String_toLower;
var $author$project$Activity$Activity$unknown = $author$project$Activity$Activity$BuiltInActivityID($author$project$Activity$Template$DillyDally);
var $author$project$TimeTracker$urlTriggers = function (app) {
	var entriesPerActivity = function (activity) {
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				function (nm) {
					return _Utils_Tuple2(
						nm,
						$author$project$TimeTracker$StartTracking(
							$author$project$Activity$Activity$getID(activity)));
				},
				$author$project$Activity$Activity$getNames(activity)),
			A2(
				$elm$core$List$map,
				function (nm) {
					return _Utils_Tuple2(
						$elm$core$String$toLower(nm),
						$author$project$TimeTracker$StartTracking(
							$author$project$Activity$Activity$getID(activity)));
				},
				$author$project$Activity$Activity$getNames(activity)));
	};
	var activitiesWithNames = $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			entriesPerActivity,
			$author$project$Activity$Activity$allUnhidden(app.activities)));
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'start',
			$elm$core$Dict$fromList(activitiesWithNames)),
			_Utils_Tuple2(
			'stop',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stop',
						$author$project$TimeTracker$StartTracking($author$project$Activity$Activity$unknown))
					]))),
			_Utils_Tuple2(
			'export',
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2('all', $author$project$TimeTracker$ExportVM)
					])))
		]);
};
var $author$project$Main$handleUrlTriggers = F3(
	function (rawUrl, replica, temp) {
		var wrapMsgs = F2(
			function (tagger, _v16) {
				var key = _v16.a;
				var dict = _v16.b;
				return _Utils_Tuple2(
					key,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v15, msg) {
								return tagger(msg);
							}),
						dict));
			});
		var url = $author$project$Main$bypassFakeFragment(rawUrl);
		var removeTriggersFromUrl = function () {
			var _v14 = temp.environment.navkey;
			if (_v14.$ === 'Just') {
				var navkey = _v14.a;
				return A2(
					$elm$browser$Browser$Navigation$replaceUrl,
					navkey,
					$elm$url$Url$toString(
						_Utils_update(
							url,
							{query: $elm$core$Maybe$Nothing})));
			} else {
				return $elm$core$Platform$Cmd$none;
			}
		}();
		var normalizedUrl = _Utils_update(
			url,
			{path: ''});
		var fancyRecursiveParse = function (checkList) {
			fancyRecursiveParse:
			while (true) {
				if (checkList.b) {
					var _v1 = checkList.a;
					var triggerName = _v1.a;
					var triggerValues = _v1.b;
					var rest = checkList.b;
					var _v2 = A2(
						$elm$url$Url$Parser$parse,
						$elm$url$Url$Parser$query(
							A2($elm$url$Url$Parser$Query$enum, triggerName, triggerValues)),
						normalizedUrl);
					if (_v2.$ === 'Nothing') {
						var $temp$checkList = rest;
						checkList = $temp$checkList;
						continue fancyRecursiveParse;
					} else {
						if (_v2.a.$ === 'Nothing') {
							var _v3 = _v2.a;
							var $temp$checkList = rest;
							checkList = $temp$checkList;
							continue fancyRecursiveParse;
						} else {
							var match = _v2.a;
							return $elm$core$Maybe$Just(match);
						}
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		};
		var createQueryParsers = function (_v13) {
			var key = _v13.a;
			var values = _v13.b;
			return A2($elm$url$Url$Parser$Query$enum, key, values);
		};
		var allTriggers = _Utils_ap(
			A2(
				$elm$core$List$map,
				wrapMsgs($author$project$Main$TaskListMsg),
				A2(
					$author$project$TaskList$urlTriggers,
					replica,
					_Utils_Tuple2(temp.environment.time, temp.environment.timeZone))),
			_Utils_ap(
				A2(
					$elm$core$List$map,
					wrapMsgs($author$project$Main$TimeTrackerMsg),
					$author$project$TimeTracker$urlTriggers(replica)),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sync',
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'todoist',
									$author$project$Main$ThirdPartySync($author$project$Main$Todoist)),
									_Utils_Tuple2(
									'marvin',
									$author$project$Main$ThirdPartySync($author$project$Main$Marvin))
								]))),
						_Utils_Tuple2(
						'clearerrors',
						$elm$core$Dict$fromList(
							_List_fromArray(
								[
									_Utils_Tuple2('clearerrors', $author$project$Main$ClearErrors)
								])))
					])));
		var parseList = A2(
			$elm$core$List$map,
			$elm$url$Url$Parser$query,
			A2($elm$core$List$map, createQueryParsers, allTriggers));
		var _v4 = A2(
			$elm$url$Url$Parser$parse,
			$elm$url$Url$Parser$oneOf(parseList),
			normalizedUrl);
		var _v5 = fancyRecursiveParse(allTriggers);
		if (_v5.$ === 'Just') {
			var parsedUrlSuccessfully = _v5.a;
			var _v6 = _Utils_Tuple2(parsedUrlSuccessfully, normalizedUrl.query);
			if (_v6.a.$ === 'Just') {
				if (_v6.b.$ === 'Just') {
					var triggerMsg = _v6.a.a;
					return $elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$perform,
								function (_v7) {
									return triggerMsg;
								},
								$elm$core$Task$succeed(_Utils_Tuple0)),
								removeTriggersFromUrl
							]));
				} else {
					var _v9 = _v6.b;
					var problemText = 'Handle URL Triggers: impossible situation. No query (Nothing) but we still successfully parsed it!';
					return $author$project$External$Commands$toast(problemText);
				}
			} else {
				if (_v6.b.$ === 'Just') {
					var _v8 = _v6.a;
					var query = _v6.b.a;
					var problemText = 'Handle URL Triggers: none of  ' + ($elm$core$String$fromInt(
						$elm$core$List$length(parseList)) + (' parsers matched key and value: ' + query));
					return $author$project$External$Commands$toast(problemText);
				} else {
					var _v10 = _v6.a;
					var _v11 = _v6.b;
					return $elm$core$Platform$Cmd$none;
				}
			}
		} else {
			var _v12 = normalizedUrl.query;
			if (_v12.$ === 'Nothing') {
				return $elm$core$Platform$Cmd$none;
			} else {
				var queriesPresent = _v12.a;
				var problemText = 'URL: not sure what to do with: ' + (queriesPresent + ', so I just left it there. Is the trigger misspelled?');
				return $author$project$External$Commands$toast(problemText);
			}
		}
	});
var $hariroshan$elm_native$Native$Frame$init = function (currentPage) {
	return {current: currentPage, encodedNavigationOptions: $elm$json$Json$Encode$null, history: _List_Nil, popStack: false};
};
var $author$project$Timeflow$Refresh = {$: 'Refresh'};
var $author$project$Main$TimeflowMsg = function (a) {
	return {$: 'TimeflowMsg', a: a};
};
var $author$project$Main$UnopenedPanel = {$: 'UnopenedPanel'};
var $author$project$Main$emptyViewState = {devTools: $author$project$Main$UnopenedPanel, taskList: $author$project$Main$UnopenedPanel, timeTracker: $author$project$Main$UnopenedPanel, timeflow: $author$project$Main$UnopenedPanel};
var $author$project$Main$FullScreen = {$: 'FullScreen'};
var $author$project$Main$OpenPanel = F2(
	function (a, b) {
		return {$: 'OpenPanel', a: a, b: b};
	});
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $author$project$DevTools$ViewState = function (ron) {
	return {ron: ron};
};
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $author$project$DevTools$routeView = A2(
	$elm$url$Url$Parser$map,
	$author$project$DevTools$ViewState(''),
	$elm$url$Url$Parser$s('devtools'));
var $author$project$TaskList$AllRelevantTasks = {$: 'AllRelevantTasks'};
var $author$project$TaskList$Normal = F3(
	function (a, b, c) {
		return {$: 'Normal', a: a, b: b, c: c};
	});
var $author$project$TaskList$routeView = A2(
	$elm$url$Url$Parser$map,
	A3(
		$author$project$TaskList$Normal,
		_List_fromArray(
			[$author$project$TaskList$AllRelevantTasks]),
		$elm$core$Maybe$Nothing,
		''),
	$elm$url$Url$Parser$s('projects'));
var $author$project$TimeTracker$Normal = {$: 'Normal'};
var $author$project$TimeTracker$routeView = A2(
	$elm$url$Url$Parser$map,
	$author$project$TimeTracker$Normal,
	$elm$url$Url$Parser$s('timetracker'));
var $author$project$Timeflow$routeView = A2(
	$elm$url$Url$Parser$map,
	$elm$core$Maybe$Nothing,
	$elm$url$Url$Parser$s('timeflow'));
var $author$project$Main$routeParser = function () {
	var openTimeflow = function (subViewMaybe) {
		return _Utils_update(
			$author$project$Main$emptyViewState,
			{
				timeflow: A2($author$project$Main$OpenPanel, $author$project$Main$FullScreen, subViewMaybe)
			});
	};
	var openTimeTracker = function (subView) {
		return _Utils_update(
			$author$project$Main$emptyViewState,
			{
				timeTracker: A2($author$project$Main$OpenPanel, $author$project$Main$FullScreen, subView)
			});
	};
	var openTaskList = function (subView) {
		return _Utils_update(
			$author$project$Main$emptyViewState,
			{
				taskList: A2($author$project$Main$OpenPanel, $author$project$Main$FullScreen, subView)
			});
	};
	var openDevTools = function (subView) {
		return _Utils_update(
			$author$project$Main$emptyViewState,
			{
				devTools: A2($author$project$Main$OpenPanel, $author$project$Main$FullScreen, subView)
			});
	};
	return $elm$url$Url$Parser$oneOf(
		_List_fromArray(
			[
				A2($elm$url$Url$Parser$map, openTaskList, $author$project$TaskList$routeView),
				A2($elm$url$Url$Parser$map, openTimeTracker, $author$project$TimeTracker$routeView),
				A2($elm$url$Url$Parser$map, openTimeflow, $author$project$Timeflow$routeView),
				A2($elm$url$Url$Parser$map, openDevTools, $author$project$DevTools$routeView)
			]));
}();
var $author$project$Main$navigate = function (url) {
	var finalUrl = $author$project$Main$bypassFakeFragment(url);
	var finalViewState = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Main$emptyViewState,
		A2($elm$url$Url$Parser$parse, $author$project$Main$routeParser, finalUrl));
	var panelOpenCmds = A2(
		$elm$core$List$filterMap,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				function () {
				var _v0 = finalViewState.timeflow;
				if (_v0.$ === 'OpenPanel') {
					return $elm$core$Maybe$Just(
						A2(
							$elm$core$Task$perform,
							function (_v1) {
								return $author$project$Main$TimeflowMsg($author$project$Timeflow$Refresh);
							},
							$elm$core$Task$succeed(_Utils_Tuple0)));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}()
			]));
	return _Utils_Tuple2(
		finalViewState,
		$elm$core$Platform$Cmd$batch(panelOpenCmds));
};
var $author$project$NativeScript$Notification$encodeAction = function (v) {
	return $elm$json$Json$Encode$object(
		_Utils_ap(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(v.id)),
					_Utils_Tuple2(
					'launch',
					$elm$json$Json$Encode$bool(v.launch))
				]),
			function () {
				var _v0 = v.button;
				if (_v0.$ === 'Button') {
					var label = _v0.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('button')),
							_Utils_Tuple2(
							'title',
							$elm$json$Json$Encode$string(label))
						]);
				} else {
					var input = _v0.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('input')),
							_Utils_Tuple2(
							'title',
							$elm$json$Json$Encode$string(input.title)),
							_Utils_Tuple2(
							'placeholder',
							$elm$json$Json$Encode$string(input.placeholder)),
							_Utils_Tuple2(
							'choices',
							A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, input.choices)),
							_Utils_Tuple2(
							'allowGeneratedReplies',
							$elm$json$Json$Encode$bool(input.autoReplies))
						]);
				}
			}()));
};
var $author$project$NativeScript$Notification$encodeExpiresAfter = function (dur) {
	return $elm$json$Json$Encode$int(
		$author$project$SmartTime$Duration$inMs(dur));
};
var $author$project$NativeScript$Notification$encodeImportance = function (v) {
	switch (v.$) {
		case 'Default':
			return $elm$json$Json$Encode$int(0);
		case 'Low':
			return $elm$json$Json$Encode$int(-1);
		case 'High':
			return $elm$json$Json$Encode$int(1);
		case 'Min':
			return $elm$json$Json$Encode$int(-2);
		default:
			return $elm$json$Json$Encode$int(2);
	}
};
var $author$project$NativeScript$Notification$encodeMediaInfo = function (v) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				$elm$json$Json$Encode$string(v.title))
			]));
};
var $author$project$Helpers$encodeObjectWithoutNothings = A2(
	$elm$core$Basics$composeL,
	$elm$json$Json$Encode$object,
	$elm$core$List$filterMap($elm$core$Basics$identity));
var $author$project$NativeScript$Notification$encodeProgress = function (v) {
	if (v.$ === 'Indeterminate') {
		return $elm$json$Json$Encode$int(0);
	} else {
		var current = v.a;
		return $elm$json$Json$Encode$int(current);
	}
};
var $author$project$NativeScript$Notification$encodeProgressMax = function (v) {
	if (v.$ === 'Indeterminate') {
		return $elm$json$Json$Encode$null;
	} else {
		var progressMax = v.b;
		return $elm$json$Json$Encode$int(progressMax);
	}
};
var $author$project$NativeScript$Notification$encodeRepeatEvery = function (v) {
	switch (v.$) {
		case 'Second':
			return $elm$json$Json$Encode$string('second');
		case 'Minute':
			return $elm$json$Json$Encode$string('minute');
		case 'Hour':
			return $elm$json$Json$Encode$string('hour');
		case 'Day':
			return $elm$json$Json$Encode$string('day');
		case 'Week':
			return $elm$json$Json$Encode$string('week');
		case 'Month':
			return $elm$json$Json$Encode$string('month');
		default:
			return $elm$json$Json$Encode$string('year');
	}
};
var $author$project$NativeScript$Notification$encodeSound = function (v) {
	switch (v.$) {
		case 'DefaultSound':
			return $elm$json$Json$Encode$string('default');
		case 'Silent':
			return $elm$json$Json$Encode$null;
		default:
			var path = v.a;
			return $elm$json$Json$Encode$string(path);
	}
};
var $author$project$NativeScript$Notification$encodeThumbnail = function (v) {
	switch (v.$) {
		case 'UsePicture':
			return $elm$json$Json$Encode$bool(true);
		case 'FromResource':
			var link = v.a;
			return $elm$json$Json$Encode$string(link);
		default:
			var link = v.a;
			return $elm$json$Json$Encode$string(link);
	}
};
var $author$project$NativeScript$Notification$encodevibratePattern = function (durs) {
	var unbundlePair = function (_v0) {
		var silence = _v0.a;
		var vibration = _v0.b;
		return _List_fromArray(
			[silence, vibration]);
	};
	var flattenedList = $elm$core$List$concat(
		A2($elm$core$List$map, unbundlePair, durs));
	var intList = A2($elm$core$List$map, $author$project$SmartTime$Duration$inMs, flattenedList);
	return A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$int, intList);
};
var $author$project$NativeScript$Notification$encodeVibrationSetting = function (v) {
	switch (v.$) {
		case 'NoVibration':
			return $elm$json$Json$Encode$null;
		case 'Vibrate':
			return $elm$json$Json$Encode$bool(true);
		default:
			var pattern = v.a;
			return $author$project$NativeScript$Notification$encodevibratePattern(pattern);
	}
};
var $author$project$Helpers$normal = $elm$core$Maybe$Just;
var $author$project$Helpers$omittable = function (_v0) {
	var name = _v0.a;
	var encoder = _v0.b;
	var fieldToCheck = _v0.c;
	return A2(
		$elm$core$Maybe$map,
		function (field) {
			return _Utils_Tuple2(
				name,
				encoder(field));
		},
		fieldToCheck);
};
var $elm_community$maybe_extra$Maybe$Extra$filter = F2(
	function (f, m) {
		if (m.$ === 'Just') {
			var a = m.a;
			return f(a) ? m : $elm$core$Maybe$Nothing;
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Helpers$omittableList = function (_v0) {
	var name = _v0.a;
	var encoder = _v0.b;
	var fieldToCheck = _v0.c;
	var listToCheck = A2(
		$elm_community$maybe_extra$Maybe$Extra$filter,
		A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty),
		$elm$core$Maybe$Just(fieldToCheck));
	return A2(
		$elm$core$Maybe$map,
		function (field) {
			return _Utils_Tuple2(
				name,
				A2($elm$json$Json$Encode$list, encoder, field));
		},
		listToCheck);
};
var $author$project$SmartTime$Moment$toJSTime = function (givenMoment) {
	return A3($author$project$SmartTime$Moment$toInt, givenMoment, $author$project$SmartTime$Moment$UTC, $author$project$SmartTime$Moment$unixEpoch);
};
var $author$project$NativeScript$Notification$encode = function (v) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$omittable(
				_Utils_Tuple3('id', $elm$json$Json$Encode$int, v.id)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3(
					'at',
					A2($elm$core$Basics$composeL, $elm$json$Json$Encode$float, $author$project$SmartTime$Moment$toJSTime),
					v.at)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('ongoing', $elm$json$Json$Encode$bool, v.ongoing)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('expiresAfter', $author$project$NativeScript$Notification$encodeExpiresAfter, v.expiresAfter)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('priority', $author$project$NativeScript$Notification$encodeImportance, v.channel.importance)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('progress', $author$project$NativeScript$Notification$encodeProgress, v.progress)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('progressMax', $author$project$NativeScript$Notification$encodeProgressMax, v.progress)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3(
					'when',
					A2($elm$core$Basics$composeL, $elm$json$Json$Encode$float, $author$project$SmartTime$Moment$toJSTime),
					v.when)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('showWhen', $elm$json$Json$Encode$bool, v.showWhen)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('sortKey', $elm$json$Json$Encode$string, v.sortKey)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('title', $elm$json$Json$Encode$string, v.title)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('title_expanded', $elm$json$Json$Encode$string, v.title_expanded)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('bigTextStyle', $elm$json$Json$Encode$bool, v.bigTextStyle)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('subtitle', $elm$json$Json$Encode$string, v.subtitle)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('ticker', $elm$json$Json$Encode$string, v.ticker)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('icon', $elm$json$Json$Encode$string, v.icon)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('status_icon', $elm$json$Json$Encode$string, v.status_icon)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('status_text_size', $elm$json$Json$Encode$int, v.status_text_size)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('color', $elm$json$Json$Encode$string, v.accentColor)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('color_from_media', $elm$json$Json$Encode$bool, v.color_from_media)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('badge', $elm$json$Json$Encode$int, v.badge)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('image', $elm$json$Json$Encode$string, v.image)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('picture_skip_cache', $elm$json$Json$Encode$bool, v.picture_skip_cache)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('picture_expanded_icon', $elm$json$Json$Encode$string, v.picture_expanded_icon)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('media_layout', $elm$json$Json$Encode$bool, v.media_layout)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('media', $author$project$NativeScript$Notification$encodeMediaInfo, v.media)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('url', $elm$json$Json$Encode$string, v.url)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('on_create', $elm$json$Json$Encode$string, v.on_create)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('on_touch', $elm$json$Json$Encode$string, v.on_touch)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('on_dismiss', $elm$json$Json$Encode$string, v.on_dismiss)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('autoCancel', $elm$json$Json$Encode$bool, v.autoCancel)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('chronometer', $elm$json$Json$Encode$bool, v.chronometer)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('countdown', $elm$json$Json$Encode$bool, v.countdown)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('notificationLed', $elm$json$Json$Encode$string, v.channel.led)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('sound', $author$project$NativeScript$Notification$encodeSound, v.channel.sound)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('vibratePattern', $author$project$NativeScript$Notification$encodeVibrationSetting, v.channel.vibrate)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('phone_only', $elm$json$Json$Encode$bool, v.phone_only)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3(
					'groupedMessages',
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					v.groupedMessages)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3(
					'group',
					function (_v0) {
						var s = _v0.a;
						return $elm$json$Json$Encode$string(s);
					},
					v.group)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('interval', $author$project$NativeScript$Notification$encodeRepeatEvery, v.interval)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('icon', $elm$json$Json$Encode$string, v.icon)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('silhouetteIcon', $elm$json$Json$Encode$string, v.silhouetteIcon)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('thumbnail', $author$project$NativeScript$Notification$encodeThumbnail, v.thumbnail)),
				$author$project$Helpers$omittableList(
				_Utils_Tuple3('actions', $author$project$NativeScript$Notification$encodeAction, v.actions)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('body', $elm$json$Json$Encode$string, v.body)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'channel',
					$elm$json$Json$Encode$string(v.channel.name))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('channelDescription', $elm$json$Json$Encode$string, v.channel.description)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('channelGroup', $elm$json$Json$Encode$string, v.channel.group)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('allowSystemGeneratedContextualActions', $elm$json$Json$Encode$bool, v.allowSystemGeneratedContextualActions)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('maxMinutesLate', $elm$json$Json$Encode$int, v.maxMinutesLate))
			]));
};
var $author$project$NativeScript$Commands$ns_notify = _Platform_outgoingPort('ns_notify', $elm$core$Basics$identity);
var $author$project$NativeScript$Commands$notify = function (notification) {
	return $author$project$NativeScript$Commands$ns_notify(
		A2($elm$json$Json$Encode$list, $author$project$NativeScript$Notification$encode, notification));
};
var $author$project$SmartTime$Moment$zero = $author$project$SmartTime$Moment$Moment($author$project$SmartTime$Duration$zero);
var $author$project$Environment$preInit = function (maybeKey) {
	return {launchTime: $author$project$SmartTime$Moment$zero, navkey: maybeKey, time: $author$project$SmartTime$Moment$zero, timeZone: $author$project$SmartTime$Human$Moment$utc};
};
var $author$project$NativeScript$Notification$basicChannel = function (name) {
	return {description: $elm$core$Maybe$Nothing, group: $elm$core$Maybe$Nothing, id: name, importance: $elm$core$Maybe$Nothing, led: $elm$core$Maybe$Nothing, name: name, sound: $elm$core$Maybe$Nothing, vibrate: $elm$core$Maybe$Nothing};
};
var $author$project$NativeScript$Notification$build = function (channel) {
	return {accentColor: $elm$core$Maybe$Nothing, actions: _List_Nil, allowSystemGeneratedContextualActions: $elm$core$Maybe$Nothing, at: $elm$core$Maybe$Nothing, autoCancel: $elm$core$Maybe$Nothing, background_color: $elm$core$Maybe$Nothing, badge: $elm$core$Maybe$Nothing, bigTextStyle: $elm$core$Maybe$Nothing, body: $elm$core$Maybe$Nothing, body_expanded: $elm$core$Maybe$Nothing, channel: channel, chronometer: $elm$core$Maybe$Nothing, color_from_media: $elm$core$Maybe$Nothing, countdown: $elm$core$Maybe$Nothing, detail: $elm$core$Maybe$Nothing, expiresAfter: $elm$core$Maybe$Nothing, group: $elm$core$Maybe$Nothing, groupAlertBehavior: $elm$core$Maybe$Nothing, groupedMessages: $elm$core$Maybe$Nothing, icon: $elm$core$Maybe$Nothing, id: $elm$core$Maybe$Nothing, image: $elm$core$Maybe$Nothing, interval: $elm$core$Maybe$Nothing, isGroupSummary: $elm$core$Maybe$Nothing, maxMinutesLate: $elm$core$Maybe$Nothing, media: $elm$core$Maybe$Nothing, media_layout: $elm$core$Maybe$Nothing, on_create: $elm$core$Maybe$Nothing, on_dismiss: $elm$core$Maybe$Nothing, on_touch: $elm$core$Maybe$Nothing, ongoing: $elm$core$Maybe$Nothing, phone_only: $elm$core$Maybe$Nothing, picture_expanded_icon: $elm$core$Maybe$Nothing, picture_skip_cache: $elm$core$Maybe$Nothing, privacy: $elm$core$Maybe$Nothing, progress: $elm$core$Maybe$Nothing, showWhen: $elm$core$Maybe$Nothing, silhouetteIcon: $elm$core$Maybe$Nothing, sortKey: $elm$core$Maybe$Nothing, status_icon: $elm$core$Maybe$Nothing, status_text_size: $elm$core$Maybe$Nothing, subtitle: $elm$core$Maybe$Nothing, thumbnail: $elm$core$Maybe$Nothing, ticker: $elm$core$Maybe$Nothing, title: $elm$core$Maybe$Nothing, title_expanded: $elm$core$Maybe$Nothing, update: $elm$core$Maybe$Nothing, url: $elm$core$Maybe$Nothing, useHTML: $elm$core$Maybe$Nothing, when: $elm$core$Maybe$Nothing};
};
var $author$project$NativeScript$Notification$test = function (title) {
	var testChannel = $author$project$NativeScript$Notification$basicChannel('Test Notifications');
	var base = $author$project$NativeScript$Notification$build(testChannel);
	return _Utils_update(
		base,
		{
			title: $elm$core$Maybe$Just(title)
		});
};
var $elm$core$Basics$truncate = _Basics_truncate;
var $author$project$Main$init = F3(
	function (url, maybeKey, replica) {
		var setViewport = function (newViewport) {
			return A2($author$project$Main$ResizeViewport, newViewport.viewport.width | 0, newViewport.viewport.height | 0);
		};
		var initNotif = $author$project$NativeScript$Commands$notify(
			_List_fromArray(
				[
					$author$project$NativeScript$Notification$test('We have taken over Android, woo!')
				]));
		var getViewport = A2($elm$core$Task$perform, setViewport, $elm$browser$Browser$Dom$getViewport);
		var _v0 = $author$project$Main$navigate(url);
		var state = _v0.a;
		var panelOpenCmds = _v0.b;
		var initialTemp = {
			environment: $author$project$Environment$preInit(maybeKey),
			rootFrame: $hariroshan$elm_native$Native$Frame$init($author$project$Main$HomePage),
			viewState: state,
			viewportSize: {height: 0, width: 0},
			viewportSizeClass: $mdgriffith$elm_ui$Element$Phone,
			windowVisibility: $elm$browser$Browser$Events$Visible
		};
		var cmdsFromUrl = A3($author$project$Main$handleUrlTriggers, url, replica, initialTemp);
		return _Utils_Tuple3(
			_List_Nil,
			initialTemp,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[cmdsFromUrl, panelOpenCmds, initNotif, getViewport])));
	});
var $author$project$Main$initGraphical = F3(
	function (url, key, flags) {
		return A2(
			$author$project$Main$init,
			url,
			$elm$core$Maybe$Just(key));
	});
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $author$project$Main$setStorage = _Platform_outgoingPort('setStorage', $elm$json$Json$Encode$string);
var $author$project$Main$MouseMoved = F2(
	function (a, b) {
		return {$: 'MouseMoved', a: a, b: b};
	});
var $author$project$Main$NoOp = {$: 'NoOp'};
var $author$project$Main$VisibilityChanged = function (a) {
	return {$: 'VisibilityChanged', a: a};
};
var $author$project$Main$decodeButtons = A2(
	$elm$json$Json$Decode$field,
	'buttons',
	A2(
		$elm$json$Json$Decode$map,
		function (buttons) {
			return buttons === 1;
		},
		$elm$json$Json$Decode$int));
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $author$project$Main$decodeFraction = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Basics$fdiv,
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'defaultView', 'innerWidth']),
		$elm$json$Json$Decode$float));
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 'Every', a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {processes: processes, taggers: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 'Nothing') {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.processes;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(_Utils_Tuple0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.taggers);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$SmartTime$Moment$every = F2(
	function (interval, tagger) {
		var convertedTagger = function (elmTime) {
			return tagger(
				$author$project$SmartTime$Moment$fromElmTime(elmTime));
		};
		return A2(
			$elm$time$Time$every,
			$author$project$SmartTime$Duration$inMs(interval),
			convertedTagger);
	});
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mousemove');
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $elm$browser$Browser$Events$Hidden = {$: 'Hidden'};
var $elm$browser$Browser$Events$withHidden = F2(
	function (func, isHidden) {
		return func(
			isHidden ? $elm$browser$Browser$Events$Hidden : $elm$browser$Browser$Events$Visible);
	});
var $elm$browser$Browser$Events$onVisibilityChange = function (func) {
	var info = _Browser_visibilityInfo(_Utils_Tuple0);
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Document,
		info.change,
		A2(
			$elm$json$Json$Decode$map,
			$elm$browser$Browser$Events$withHidden(func),
			A2(
				$elm$json$Json$Decode$field,
				'target',
				A2($elm$json$Json$Decode$field, info.hidden, $elm$json$Json$Decode$bool))));
};
var $author$project$Timeflow$WidgetMsg = F2(
	function (a, b) {
		return {$: 'WidgetMsg', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$WidgetResize = function (a) {
	return {$: 'WidgetResize', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$subscriptions = $elm$browser$Browser$Events$onResize(
	F2(
		function (_v0, _v1) {
			return $MacCASOutreach$graphicsvg$GraphicSVG$Widget$WidgetResize($elm$core$Maybe$Nothing);
		}));
var $author$project$Timeflow$subscriptions = F3(
	function (profile, env, vState) {
		return $elm$core$Platform$Sub$batch(
			A2(
				$elm$core$List$map,
				function (id) {
					return A2(
						$elm$core$Platform$Sub$map,
						$author$project$Timeflow$WidgetMsg(id),
						$MacCASOutreach$graphicsvg$GraphicSVG$Widget$subscriptions);
				},
				$elm$core$Dict$keys(vState.widgets)));
	});
var $author$project$Main$subscriptions = function (_v0) {
	var replica = _v0.replica;
	var temp = _v0.temp;
	return $elm$core$Platform$Sub$batch(
		_Utils_ap(
			_List_fromArray(
				[
					$elm$browser$Browser$Events$onVisibilityChange($author$project$Main$VisibilityChanged),
					$elm$browser$Browser$Events$onResize(
					F2(
						function (width, height) {
							return A2($author$project$Main$ResizeViewport, width, height);
						})),
					$elm$browser$Browser$Events$onMouseMove(
					A3($elm$json$Json$Decode$map2, $author$project$Main$MouseMoved, $author$project$Main$decodeButtons, $author$project$Main$decodeFraction)),
					A2(
					$author$project$SmartTime$Moment$every,
					$author$project$SmartTime$Duration$fromSeconds(1 / 5),
					function (_v1) {
						return $author$project$Main$NoOp;
					})
				]),
			function () {
				var _v2 = temp.viewState.timeflow;
				if ((_v2.$ === 'OpenPanel') && (_v2.b.$ === 'Just')) {
					var subState = _v2.b.a;
					return _List_fromArray(
						[
							A2(
							$elm$core$Platform$Sub$map,
							$author$project$Main$TimeflowMsg,
							A3($author$project$Timeflow$subscriptions, replica, temp.environment, subState))
						]);
				} else {
					return _List_Nil;
				}
			}()));
};
var $author$project$Main$DevToolsMsg = function (a) {
	return {$: 'DevToolsMsg', a: a};
};
var $author$project$NativeScript$Notification$GroupKey = function (a) {
	return {$: 'GroupKey', a: a};
};
var $author$project$NativeScript$Notification$High = {$: 'High'};
var $author$project$Main$MarvinServer = function (a) {
	return {$: 'MarvinServer', a: a};
};
var $author$project$NativeScript$Notification$Min = {$: 'Min'};
var $author$project$Main$ThirdPartyServerResponded = function (a) {
	return {$: 'ThirdPartyServerResponded', a: a};
};
var $author$project$Main$TodoistServer = function (a) {
	return {$: 'TodoistServer', a: a};
};
var $mdgriffith$elm_ui$Element$BigDesktop = {$: 'BigDesktop'};
var $mdgriffith$elm_ui$Element$Desktop = {$: 'Desktop'};
var $mdgriffith$elm_ui$Element$Landscape = {$: 'Landscape'};
var $mdgriffith$elm_ui$Element$Portrait = {$: 'Portrait'};
var $mdgriffith$elm_ui$Element$Tablet = {$: 'Tablet'};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Element$classifyDevice = function (window) {
	return {
		_class: function () {
			var shortSide = A2($elm$core$Basics$min, window.width, window.height);
			var longSide = A2($elm$core$Basics$max, window.width, window.height);
			return (shortSide < 600) ? $mdgriffith$elm_ui$Element$Phone : ((longSide <= 1200) ? $mdgriffith$elm_ui$Element$Tablet : (((longSide > 1200) && (longSide <= 1920)) ? $mdgriffith$elm_ui$Element$Desktop : $mdgriffith$elm_ui$Element$BigDesktop));
		}(),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? $mdgriffith$elm_ui$Element$Portrait : $mdgriffith$elm_ui$Element$Landscape
	};
};
var $author$project$TaskList$defaultView = A3(
	$author$project$TaskList$Normal,
	_List_fromArray(
		[$author$project$TaskList$AllRelevantTasks]),
	$elm$core$Maybe$Nothing,
	'');
var $author$project$TimeTracker$defaultView = $author$project$TimeTracker$Normal;
var $author$project$Incubator$Todoist$Items = {$: 'Items'};
var $author$project$Incubator$Todoist$Projects = {$: 'Projects'};
var $author$project$Integrations$Todoist$devSecret = '0bdc5149510737ab941485bace8135c60e2d812b';
var $author$project$Incubator$Todoist$SyncResponded = function (a) {
	return {$: 'SyncResponded', a: a};
};
var $author$project$Incubator$Todoist$Response = F5(
	function (sync_token, sync_status, full_sync, items, projects) {
		return {full_sync: full_sync, items: items, projects: projects, sync_status: sync_status, sync_token: sync_token};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TBool = {$: 'TBool'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Expected = F2(
	function (a, b) {
		return {$: 'Expected', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here = function (a) {
	return {$: 'Here', a: a};
};
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$encode = function (v) {
	switch (v.$) {
		case 'String':
			var val = v.b;
			return $elm$json$Json$Encode$string(val);
		case 'Number':
			var val = v.b;
			return $elm$json$Json$Encode$float(val);
		case 'Bool':
			var val = v.b;
			return $elm$json$Json$Encode$bool(val);
		case 'Null':
			return $elm$json$Json$Encode$null;
		case 'Array':
			var values = v.b;
			return A2($elm$json$Json$Encode$list, $zwilias$json_decode_exploration$Json$Decode$Exploration$encode, values);
		default:
			var kvPairs = v.b;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					$elm$core$Tuple$mapSecond($zwilias$json_decode_exploration$Json$Decode$Exploration$encode),
					kvPairs));
	}
};
var $mgold$elm_nonempty_list$List$Nonempty$fromElement = $mgold$elm_nonempty_list$List$Nonempty$singleton;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expected = F2(
	function (expectedType, json) {
		return $elm$core$Result$Err(
			$mgold$elm_nonempty_list$List$Nonempty$fromElement(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
					A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Expected,
						expectedType,
						$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Array = F2(
	function (a, b) {
		return {$: 'Array', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Bool = F2(
	function (a, b) {
		return {$: 'Bool', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Null = function (a) {
	return {$: 'Null', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Number = F2(
	function (a, b) {
		return {$: 'Number', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Object = F2(
	function (a, b) {
		return {$: 'Object', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$String = F2(
	function (a, b) {
		return {$: 'String', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed = function (annotatedValue) {
	switch (annotatedValue.$) {
		case 'String':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$String, true, val);
		case 'Number':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Number, true, val);
		case 'Bool':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Bool, true, val);
		case 'Null':
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$Null(true);
		case 'Array':
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array,
				true,
				A2($elm$core$List$map, $zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed, values));
		default:
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object,
				true,
				A2(
					$elm$core$List$map,
					$elm$core$Tuple$mapSecond($zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed),
					values));
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$ok = F2(
	function (json, val) {
		return $elm$core$Result$Ok(
			{json: json, value: val, warnings: _List_Nil});
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$bool = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'Bool') {
			var val = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				val);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TBool, json);
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed = function (val) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$ok, json, val);
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode = $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$andThen = F2(
	function (toDecoderB, _v0) {
		var decoderFnA = _v0.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				var _v1 = decoderFnA(json);
				if (_v1.$ === 'Ok') {
					var accA = _v1.a;
					var _v2 = toDecoderB(accA.value);
					var decoderFnB = _v2.a;
					return A2(
						$elm$core$Result$map,
						function (accB) {
							return _Utils_update(
								accB,
								{
									warnings: _Utils_ap(accA.warnings, accB.warnings)
								});
						},
						decoderFnB(accA.json));
				} else {
					var e = _v1.a;
					return $elm$core$Result$Err(e);
				}
			});
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$fail = function (message) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			return $elm$core$Result$Err(
				$mgold$elm_nonempty_list$List$Nonempty$fromElement(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Failure,
							message,
							$elm$core$Maybe$Just(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json))))));
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$check = F3(
	function (checkDecoder, expectedVal, actualDecoder) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andThen,
			function (actual) {
				return _Utils_eq(actual, expectedVal) ? actualDecoder : $zwilias$json_decode_exploration$Json$Decode$Exploration$fail('Verification failed');
			},
			checkDecoder);
	});
var $author$project$Incubator$Todoist$Command$CommandError = F2(
	function (error_code, error) {
		return {error: error, error_code: error_code};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt = {$: 'TInt'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$int = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'Number') {
			var val = json.b;
			return _Utils_eq(
				$elm$core$Basics$round(val),
				val) ? A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				$elm$core$Basics$round(val)) : A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt, json);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt, json);
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField = F2(
	function (a, b) {
		return {$: 'InField', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject = {$: 'TObject'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField = function (a) {
	return {$: 'TObjectField', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$field = F2(
	function (fieldName, _v0) {
		var decoderFn = _v0.a;
		var finalize = F2(
			function (json, _v6) {
				var values = _v6.a;
				var warnings = _v6.b;
				var res = _v6.c;
				if (res.$ === 'Nothing') {
					return A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$expected,
						$zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField(fieldName),
						json);
				} else {
					if (res.a.$ === 'Err') {
						var e = res.a.a;
						return $elm$core$Result$Err(e);
					} else {
						var v = res.a.a;
						return $elm$core$Result$Ok(
							{
								json: A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values),
								value: v,
								warnings: warnings
							});
					}
				}
			});
		var accumulate = F2(
			function (_v3, _v4) {
				var key = _v3.a;
				var val = _v3.b;
				var acc = _v4.a;
				var warnings = _v4.b;
				var result = _v4.c;
				if (_Utils_eq(key, fieldName)) {
					var _v2 = decoderFn(val);
					if (_v2.$ === 'Err') {
						var e = _v2.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, val),
								acc),
							warnings,
							$elm$core$Maybe$Just(
								$elm$core$Result$Err(
									$mgold$elm_nonempty_list$List$Nonempty$fromElement(
										A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField, key, e)))));
					} else {
						var res = _v2.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, res.json),
								acc),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$mgold$elm_nonempty_list$List$Nonempty$fromElement,
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField(key)),
									res.warnings),
								warnings),
							$elm$core$Maybe$Just(
								$elm$core$Result$Ok(res.value)));
					}
				} else {
					return _Utils_Tuple3(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(key, val),
							acc),
						warnings,
						result);
				}
			});
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				if (json.$ === 'Object') {
					var kvPairs = json.b;
					return A2(
						finalize,
						json,
						A3(
							$elm$core$List$foldr,
							accumulate,
							_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
							kvPairs));
				} else {
					return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject, json);
				}
			});
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$BadOneOf = function (a) {
	return {$: 'BadOneOf', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOfHelp = F3(
	function (decoders, val, errorAcc) {
		oneOfHelp:
		while (true) {
			if (!decoders.b) {
				return $elm$core$Result$Err(
					$mgold$elm_nonempty_list$List$Nonempty$fromElement(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$BadOneOf(
								$elm$core$List$reverse(errorAcc)))));
			} else {
				var decoderFn = decoders.a.a;
				var rest = decoders.b;
				var _v1 = decoderFn(val);
				if (_v1.$ === 'Ok') {
					var res = _v1.a;
					return $elm$core$Result$Ok(res);
				} else {
					var e = _v1.a;
					var $temp$decoders = rest,
						$temp$val = val,
						$temp$errorAcc = A2($elm$core$List$cons, e, errorAcc);
					decoders = $temp$decoders;
					val = $temp$val;
					errorAcc = $temp$errorAcc;
					continue oneOfHelp;
				}
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf = function (decoders) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			return A3($zwilias$json_decode_exploration$Json$Decode$Exploration$oneOfHelp, decoders, json, _List_Nil);
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$value = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
			$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json));
	});
var $author$project$Helpers$optionalIgnored = F2(
	function (field, pipeline) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andThen,
			function (_v0) {
				return pipeline;
			},
			$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
				_List_fromArray(
					[
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, field, $zwilias$json_decode_exploration$Json$Decode$Exploration$value),
						$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$json$Json$Encode$null)
					])));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map2 = F3(
	function (f, _v0, _v1) {
		var decoderFnA = _v0.a;
		var decoderFnB = _v1.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				var _v2 = decoderFnA(json);
				if (_v2.$ === 'Ok') {
					var accA = _v2.a;
					var _v3 = decoderFnB(accA.json);
					if (_v3.$ === 'Ok') {
						var accB = _v3.a;
						return $elm$core$Result$Ok(
							{
								json: accB.json,
								value: A2(f, accA.value, accB.value),
								warnings: _Utils_ap(accA.warnings, accB.warnings)
							});
					} else {
						var e = _v3.a;
						return $elm$core$Result$Err(e);
					}
				} else {
					var e = _v2.a;
					var _v4 = decoderFnB(json);
					if (_v4.$ === 'Ok') {
						return $elm$core$Result$Err(e);
					} else {
						var e2 = _v4.a;
						return $elm$core$Result$Err(
							A2($mgold$elm_nonempty_list$List$Nonempty$append, e, e2));
					}
				}
			});
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$andMap = $zwilias$json_decode_exploration$Json$Decode$Exploration$map2($elm$core$Basics$apR);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andMap,
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, key, valDecoder),
			decoder);
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TString = {$: 'TString'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$string = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'String') {
			var val = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				val);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TString, json);
		}
	});
var $author$project$Incubator$Todoist$Command$decodeCommandError = A2(
	$author$project$Helpers$optionalIgnored,
	'error_extra',
	A2(
		$author$project$Helpers$optionalIgnored,
		'http_code',
		A2(
			$author$project$Helpers$optionalIgnored,
			'error_tag',
			A3(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
				'error',
				$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
				A3(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
					'error_code',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode($author$project$Incubator$Todoist$Command$CommandError))))));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc = F2(
	function (f, acc) {
		return {
			json: acc.json,
			value: f(acc.value),
			warnings: acc.warnings
		};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map = F2(
	function (f, _v0) {
		var decoderFn = _v0.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				return A2(
					$elm$core$Result$map,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc(f),
					decoderFn(json));
			});
	});
var $author$project$Incubator$Todoist$Command$decodeCommandResult = $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
	_List_fromArray(
		[
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
			'ok',
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
				$elm$core$Result$Ok(_Utils_Tuple0))),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $elm$core$Result$Err, $author$project$Incubator$Todoist$Command$decodeCommandError)
		]));
var $author$project$Incubator$Todoist$decodeIncrementalSyncToken = A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $author$project$Incubator$Todoist$IncrementalSyncToken, $zwilias$json_decode_exploration$Json$Decode$Exploration$string);
var $author$project$Incubator$Todoist$Item$Item = function (id) {
	return function (user_id) {
		return function (project_id) {
			return function (content) {
				return function (due) {
					return function (priority) {
						return function (parent_id) {
							return function (child_order) {
								return function (day_order) {
									return function (collapsed) {
										return function (children) {
											return function (assigned_by_uid) {
												return function (responsible_uid) {
													return function (checked) {
														return function (in_history) {
															return function (is_deleted) {
																return function (is_archived) {
																	return function (date_added) {
																		return {assigned_by_uid: assigned_by_uid, checked: checked, child_order: child_order, children: children, collapsed: collapsed, content: content, date_added: date_added, day_order: day_order, due: due, id: id, in_history: in_history, is_archived: is_archived, is_deleted: is_deleted, parent_id: parent_id, priority: priority, project_id: project_id, responsible_uid: responsible_uid, user_id: user_id};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Helpers$decodeBoolFromInt = $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
	_List_fromArray(
		[
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			1,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(true)),
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			0,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(false))
		]));
var $author$project$Incubator$Todoist$Item$Due = F5(
	function (date, timezone, string, lang, isRecurring) {
		return {date: date, isRecurring: isRecurring, lang: lang, string: string, timezone: timezone};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TNull = {$: 'TNull'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$null = function (val) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			if (json.$ === 'Null') {
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Null(true),
					val);
			} else {
				return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TNull, json);
			}
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$nullable = function (decoder) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
		_List_fromArray(
			[
				$zwilias$json_decode_exploration$Json$Decode$Exploration$null($elm$core$Maybe$Nothing),
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$Incubator$Todoist$Item$decodeDue = A3(
	$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
	'is_recurring',
	$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
	A3(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
		'lang',
		$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
		A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
			'string',
			$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
			A3(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
				'timezone',
				$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
				A3(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
					'date',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode($author$project$Incubator$Todoist$Item$Due))))));
var $author$project$Incubator$Todoist$Item$Priority = function (a) {
	return {$: 'Priority', a: a};
};
var $author$project$Incubator$Todoist$Item$decodePriority = $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
	_List_fromArray(
		[
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			4,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
				$author$project$Incubator$Todoist$Item$Priority(1))),
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			3,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
				$author$project$Incubator$Todoist$Item$Priority(2))),
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			2,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
				$author$project$Incubator$Todoist$Item$Priority(3))),
			A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
			1,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
				$author$project$Incubator$Todoist$Item$Priority(4)))
		]));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex = F2(
	function (a, b) {
		return {$: 'AtIndex', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray = {$: 'TArray'};
var $mgold$elm_nonempty_list$List$Nonempty$cons = F2(
	function (y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$list = function (_v0) {
	var decoderFn = _v0.a;
	var finalize = function (_v5) {
		var json = _v5.a;
		var warnings = _v5.b;
		var values = _v5.c;
		return {
			json: A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, json),
			value: values,
			warnings: warnings
		};
	};
	var accumulate = F2(
		function (val, _v4) {
			var idx = _v4.a;
			var acc = _v4.b;
			var _v2 = _Utils_Tuple2(
				acc,
				decoderFn(val));
			if (_v2.a.$ === 'Err') {
				if (_v2.b.$ === 'Err') {
					var errors = _v2.a.a;
					var newErrors = _v2.b.a;
					return _Utils_Tuple2(
						idx - 1,
						$elm$core$Result$Err(
							A2(
								$mgold$elm_nonempty_list$List$Nonempty$cons,
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, newErrors),
								errors)));
				} else {
					var errors = _v2.a.a;
					return _Utils_Tuple2(
						idx - 1,
						$elm$core$Result$Err(errors));
				}
			} else {
				if (_v2.b.$ === 'Err') {
					var errors = _v2.b.a;
					return _Utils_Tuple2(
						idx - 1,
						$elm$core$Result$Err(
							$mgold$elm_nonempty_list$List$Nonempty$fromElement(
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, errors))));
				} else {
					var _v3 = _v2.a.a;
					var jsonAcc = _v3.a;
					var warnAcc = _v3.b;
					var valAcc = _v3.c;
					var res = _v2.b.a;
					return _Utils_Tuple2(
						idx - 1,
						$elm$core$Result$Ok(
							_Utils_Tuple3(
								A2($elm$core$List$cons, res.json, jsonAcc),
								_Utils_ap(res.warnings, warnAcc),
								A2($elm$core$List$cons, res.value, valAcc))));
				}
			}
		});
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			if (json.$ === 'Array') {
				var values = json.b;
				return A2(
					$elm$core$Result$map,
					finalize,
					A3(
						$elm$core$List$foldr,
						accumulate,
						_Utils_Tuple2(
							$elm$core$List$length(values) - 1,
							$elm$core$Result$Ok(
								_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil))),
						values).b);
			} else {
				return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray, json);
			}
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$isObject = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'Object') {
			var pairs = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, pairs),
				_Utils_Tuple0);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject, json);
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$resolve = $zwilias$json_decode_exploration$Json$Decode$Exploration$andThen($elm$core$Basics$identity);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optionalField = F3(
	function (field, decoder, fallback) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andThen,
			function (_v0) {
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$resolve(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
						_List_fromArray(
							[
								A2(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$field,
								field,
								$zwilias$json_decode_exploration$Json$Decode$Exploration$null(
									$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(fallback))),
								A2(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$field,
								field,
								$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
									A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, field, decoder))),
								$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(fallback))
							])));
			},
			$zwilias$json_decode_exploration$Json$Decode$Exploration$isObject);
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andMap,
			A3($zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optionalField, key, valDecoder, fallback),
			decoder);
	});
var $author$project$Incubator$Todoist$Item$decodeItem = A2(
	$author$project$Helpers$optionalIgnored,
	'added_by_uid',
	A2(
		$author$project$Helpers$optionalIgnored,
		'due_is_recurring',
		A2(
			$author$project$Helpers$optionalIgnored,
			'section_id',
			A2(
				$author$project$Helpers$optionalIgnored,
				'has_more_notes',
				A2(
					$author$project$Helpers$optionalIgnored,
					'date_completed',
					A2(
						$author$project$Helpers$optionalIgnored,
						'sync_id',
						A2(
							$author$project$Helpers$optionalIgnored,
							'legacy_parent_id',
							A2(
								$author$project$Helpers$optionalIgnored,
								'legacy_project_id',
								A2(
									$author$project$Helpers$optionalIgnored,
									'legacy_id',
									A2(
										$author$project$Helpers$optionalIgnored,
										'indent',
										A3(
											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
											'date_added',
											$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
											A4(
												$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
												'is_archived',
												$author$project$Helpers$decodeBoolFromInt,
												false,
												A3(
													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
													'is_deleted',
													$author$project$Helpers$decodeBoolFromInt,
													A3(
														$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
														'in_history',
														$author$project$Helpers$decodeBoolFromInt,
														A3(
															$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
															'checked',
															$author$project$Helpers$decodeBoolFromInt,
															A3(
																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																'responsible_uid',
																$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$int),
																A4(
																	$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																	'assigned_by_uid',
																	$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																	0,
																	A2(
																		$author$project$Helpers$optionalIgnored,
																		'labels',
																		A4(
																			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																			'children',
																			$zwilias$json_decode_exploration$Json$Decode$Exploration$list($zwilias$json_decode_exploration$Json$Decode$Exploration$int),
																			_List_Nil,
																			A3(
																				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																				'collapsed',
																				$author$project$Helpers$decodeBoolFromInt,
																				A3(
																					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																					'day_order',
																					$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																					A3(
																						$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																						'child_order',
																						$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																						A3(
																							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																							'parent_id',
																							$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$int),
																							A3(
																								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																								'priority',
																								$author$project$Incubator$Todoist$Item$decodePriority,
																								A3(
																									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																									'due',
																									$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Incubator$Todoist$Item$decodeDue),
																									A3(
																										$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																										'content',
																										$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																										A3(
																											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																											'project_id',
																											$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																											A3(
																												$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																												'user_id',
																												$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																												A3(
																													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																													'id',
																													$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode($author$project$Incubator$Todoist$Item$Item))))))))))))))))))))))))))))));
var $author$project$Incubator$Todoist$Project$Project = function (id) {
	return function (name) {
		return function (color) {
			return function (parent_id) {
				return function (child_order) {
					return function (collapsed) {
						return function (shared) {
							return function (is_deleted) {
								return function (is_archived) {
									return function (is_favorite) {
										return function (inbox_project) {
											return function (team_inbox) {
												return {child_order: child_order, collapsed: collapsed, color: color, id: id, inbox_project: inbox_project, is_archived: is_archived, is_deleted: is_deleted, is_favorite: is_favorite, name: name, parent_id: parent_id, shared: shared, team_inbox: team_inbox};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Incubator$Todoist$Project$decodeProject = A2(
	$author$project$Helpers$optionalIgnored,
	'sync_id',
	A2(
		$author$project$Helpers$optionalIgnored,
		'has_more_notes',
		A2(
			$author$project$Helpers$optionalIgnored,
			'legacy_id',
			A2(
				$author$project$Helpers$optionalIgnored,
				'legacy_parent_id',
				A4(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
					'team_inbox',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
					false,
					A4(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
						'inbox_project',
						$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
						false,
						A3(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
							'is_favorite',
							$author$project$Helpers$decodeBoolFromInt,
							A3(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
								'is_archived',
								$author$project$Helpers$decodeBoolFromInt,
								A3(
									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
									'is_deleted',
									$author$project$Helpers$decodeBoolFromInt,
									A3(
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
										'shared',
										$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
										A3(
											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
											'collapsed',
											$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
											A3(
												$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
												'child_order',
												$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
												A3(
													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
													'parent_id',
													$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$int),
													A3(
														$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
														'color',
														$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
														A3(
															$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
															'name',
															$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
															A3(
																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																'id',
																$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode($author$project$Incubator$Todoist$Project$Project)))))))))))))))));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$keyValuePairs = function (_v0) {
	var decoderFn = _v0.a;
	var finalize = function (_v5) {
		var json = _v5.a;
		var warnings = _v5.b;
		var val = _v5.c;
		return {
			json: A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, json),
			value: val,
			warnings: warnings
		};
	};
	var accumulate = F2(
		function (_v4, acc) {
			var key = _v4.a;
			var val = _v4.b;
			var _v2 = _Utils_Tuple2(
				acc,
				decoderFn(val));
			if (_v2.a.$ === 'Err') {
				if (_v2.b.$ === 'Err') {
					var e = _v2.a.a;
					var _new = _v2.b.a;
					return $elm$core$Result$Err(
						A2(
							$mgold$elm_nonempty_list$List$Nonempty$cons,
							A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField, key, _new),
							e));
				} else {
					var e = _v2.a.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				if (_v2.b.$ === 'Err') {
					var e = _v2.b.a;
					return $elm$core$Result$Err(
						$mgold$elm_nonempty_list$List$Nonempty$fromElement(
							A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField, key, e)));
				} else {
					var _v3 = _v2.a.a;
					var jsonAcc = _v3.a;
					var warningsAcc = _v3.b;
					var accAcc = _v3.c;
					var res = _v2.b.a;
					return $elm$core$Result$Ok(
						_Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, res.json),
								jsonAcc),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$mgold$elm_nonempty_list$List$Nonempty$fromElement,
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField(key)),
									res.warnings),
								warningsAcc),
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, res.value),
								accAcc)));
				}
			}
		});
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			if (json.$ === 'Object') {
				var kvPairs = json.b;
				return A2(
					$elm$core$Result$map,
					finalize,
					A3(
						$elm$core$List$foldr,
						accumulate,
						$elm$core$Result$Ok(
							_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil)),
						kvPairs));
			} else {
				return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject, json);
			}
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$dict = function (decoder) {
	return A2(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$map,
		$elm$core$Dict$fromList,
		$zwilias$json_decode_exploration$Json$Decode$Exploration$keyValuePairs(decoder));
};
var $author$project$Incubator$Todoist$decodeResponse = A2(
	$author$project$Helpers$optionalIgnored,
	'tooltips',
	A2(
		$author$project$Helpers$optionalIgnored,
		'locations',
		A2(
			$author$project$Helpers$optionalIgnored,
			'stats',
			A2(
				$author$project$Helpers$optionalIgnored,
				'incomplete_item_ids',
				A2(
					$author$project$Helpers$optionalIgnored,
					'incomplete_project_ids',
					A2(
						$author$project$Helpers$optionalIgnored,
						'day_orders_timestamp',
						A2(
							$author$project$Helpers$optionalIgnored,
							'due_exceptions',
							A2(
								$author$project$Helpers$optionalIgnored,
								'sections',
								A2(
									$author$project$Helpers$optionalIgnored,
									'user_settings',
									A2(
										$author$project$Helpers$optionalIgnored,
										'user',
										A2(
											$author$project$Helpers$optionalIgnored,
											'temp_id_mapping',
											A2(
												$author$project$Helpers$optionalIgnored,
												'settings_notifications',
												A2(
													$author$project$Helpers$optionalIgnored,
													'reminders',
													A2(
														$author$project$Helpers$optionalIgnored,
														'project_notes',
														A2(
															$author$project$Helpers$optionalIgnored,
															'notes',
															A2(
																$author$project$Helpers$optionalIgnored,
																'live_notifications_last_read_id',
																A2(
																	$author$project$Helpers$optionalIgnored,
																	'live_notifications',
																	A2(
																		$author$project$Helpers$optionalIgnored,
																		'labels',
																		A2(
																			$author$project$Helpers$optionalIgnored,
																			'filters',
																			A2(
																				$author$project$Helpers$optionalIgnored,
																				'day_orders',
																				A2(
																					$author$project$Helpers$optionalIgnored,
																					'collaborator_states',
																					A2(
																						$author$project$Helpers$optionalIgnored,
																						'collaborators',
																						A4(
																							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																							'projects',
																							$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Incubator$Todoist$Project$decodeProject),
																							_List_Nil,
																							A4(
																								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																								'items',
																								$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Incubator$Todoist$Item$decodeItem),
																								_List_Nil,
																								A3(
																									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																									'full_sync',
																									$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																									A4(
																										$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																										'sync_status',
																										$zwilias$json_decode_exploration$Json$Decode$Exploration$dict($author$project$Incubator$Todoist$Command$decodeCommandResult),
																										$elm$core$Dict$empty,
																										A4(
																											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																											'sync_token',
																											A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $elm$core$Maybe$Just, $author$project$Incubator$Todoist$decodeIncrementalSyncToken),
																											$elm$core$Maybe$Nothing,
																											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$decode($author$project$Incubator$Todoist$Response))))))))))))))))))))))))))));
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$crossOrigin = F3(
	function (prePath, pathSegments, parameters) {
		return prePath + ('/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters)));
	});
var $author$project$Helpers$encodeTuple2 = F3(
	function (firstEncoder, secondEncoder, _v0) {
		var first = _v0.a;
		var second = _v0.b;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					firstEncoder(first),
					secondEncoder(second)
				]));
	});
var $author$project$Helpers$encodeIntDict = F2(
	function (valueEncoder, dict) {
		return A2(
			$elm$json$Json$Encode$list,
			A2($author$project$Helpers$encodeTuple2, $elm$json$Json$Encode$int, valueEncoder),
			$elm_community$intdict$IntDict$toList(dict));
	});
var $author$project$Helpers$encodeBoolToInt = function (bool) {
	if (bool) {
		return $elm$json$Json$Encode$int(1);
	} else {
		return $elm$json$Json$Encode$int(0);
	}
};
var $elm_community$json_extra$Json$Encode$Extra$maybe = function (encoder) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(encoder),
		$elm$core$Maybe$withDefault($elm$json$Json$Encode$null));
};
var $author$project$Incubator$Todoist$Item$encodeDue = function (record) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$string(record.date)),
				_Utils_Tuple2(
				'timezone',
				A2($elm_community$json_extra$Json$Encode$Extra$maybe, $elm$json$Json$Encode$string, record.timezone)),
				_Utils_Tuple2(
				'string',
				$elm$json$Json$Encode$string(record.string)),
				_Utils_Tuple2(
				'lang',
				$elm$json$Json$Encode$string(record.lang)),
				_Utils_Tuple2(
				'is_recurring',
				$elm$json$Json$Encode$bool(record.isRecurring))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeItemID = function (realOrTemp) {
	if (realOrTemp.$ === 'RealItem') {
		var intID = realOrTemp.a;
		return $elm$json$Json$Encode$int(intID);
	} else {
		var tempID = realOrTemp.a;
		return $elm$json$Json$Encode$string(tempID);
	}
};
var $author$project$Incubator$Todoist$Item$encodePriority = function (priority) {
	switch (priority.a) {
		case 1:
			return $elm$json$Json$Encode$int(4);
		case 2:
			return $elm$json$Json$Encode$int(3);
		case 3:
			return $elm$json$Json$Encode$int(2);
		default:
			return $elm$json$Json$Encode$int(1);
	}
};
var $author$project$Incubator$Todoist$Command$encodeItemChanges = function (item) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'id',
					$author$project$Incubator$Todoist$Command$encodeItemID(item.id))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('content', $elm$json$Json$Encode$string, item.content)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('due', $author$project$Incubator$Todoist$Item$encodeDue, item.due)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('priority', $author$project$Incubator$Todoist$Item$encodePriority, item.priority)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('day_order', $elm$json$Json$Encode$int, item.day_order)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('collapsed', $author$project$Helpers$encodeBoolToInt, item.collapsed))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeItemCompletion = function (item) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'id',
					$author$project$Incubator$Todoist$Command$encodeItemID(item.id))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('date_completed', $elm$json$Json$Encode$string, item.date_completed)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'force_history',
					$elm$json$Json$Encode$bool(item.force_history)))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeItemOrder = function (order) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$elm$json$Json$Encode$int(order.id)),
				_Utils_Tuple2(
				'child_order',
				$elm$json$Json$Encode$int(order.child_order))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeProjectID = function (realOrTemp) {
	if (realOrTemp.$ === 'RealProject') {
		var intID = realOrTemp.a;
		return $elm$json$Json$Encode$int(intID);
	} else {
		var tempID = realOrTemp.a;
		return $elm$json$Json$Encode$string(tempID);
	}
};
var $author$project$Incubator$Todoist$Command$encodeNewItem = function (_new) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$omittable(
				_Utils_Tuple3('temp_id', $elm$json$Json$Encode$string, _new.temp_id)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(_new.content))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('project_id', $author$project$Incubator$Todoist$Command$encodeProjectID, _new.project_id)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('due', $author$project$Incubator$Todoist$Item$encodeDue, _new.due)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'priority',
					$author$project$Incubator$Todoist$Item$encodePriority(_new.priority))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('parent_id', $author$project$Incubator$Todoist$Command$encodeItemID, _new.parent_id)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('child_order', $elm$json$Json$Encode$int, _new.child_order)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('day_order', $elm$json$Json$Encode$int, _new.day_order)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('collapsed', $author$project$Helpers$encodeBoolToInt, _new.collapsed)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('auto_reminder', $elm$json$Json$Encode$bool, _new.auto_reminder))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeNewProject = function (_new) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$omittable(
				_Utils_Tuple3('temp_id', $elm$json$Json$Encode$string, _new.temp_id)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(_new.name))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('color', $elm$json$Json$Encode$int, _new.color)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('parent_id', $elm$json$Json$Encode$int, _new.parent_id)),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('child_order', $elm$json$Json$Encode$int, _new.child_order)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'is_favorite',
					$elm$json$Json$Encode$bool(_new.is_favorite)))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeProjectChanges = function (_new) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$omittable(
				_Utils_Tuple3('temp_id', $elm$json$Json$Encode$string, _new.temp_id)),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(_new.name))),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'color',
					$elm$json$Json$Encode$int(_new.color))),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'collapsed',
					$elm$json$Json$Encode$bool(_new.collapsed))),
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'is_favorite',
					$elm$json$Json$Encode$bool(_new.is_favorite)))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeProjectOrder = function (v) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$elm$json$Json$Encode$int(v.id)),
				_Utils_Tuple2(
				'child_order',
				$elm$json$Json$Encode$int(v.child_order))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeRecurringItemCompletion = function (item) {
	return $author$project$Helpers$encodeObjectWithoutNothings(
		_List_fromArray(
			[
				$author$project$Helpers$normal(
				_Utils_Tuple2(
					'id',
					$author$project$Incubator$Todoist$Command$encodeItemID(item.id))),
				$author$project$Helpers$omittable(
				_Utils_Tuple3('due', $elm$json$Json$Encode$string, item.due))
			]));
};
var $author$project$Incubator$Todoist$Command$encodeCommandInstance = function (_v0) {
	var uuid = _v0.a;
	var command = _v0.b;
	var encodeWrapper = F2(
		function (typeName, args) {
			return $author$project$Helpers$encodeObjectWithoutNothings(
				_List_fromArray(
					[
						$author$project$Helpers$normal(
						_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string(typeName))),
						$author$project$Helpers$normal(
						_Utils_Tuple2('args', args)),
						$author$project$Helpers$normal(
						_Utils_Tuple2(
							'uuid',
							$elm$json$Json$Encode$string(uuid))),
						$author$project$Helpers$omittable(
						_Utils_Tuple3('temp_id', $elm$json$Json$Encode$string, $elm$core$Maybe$Nothing))
					]));
		});
	switch (command.$) {
		case 'ProjectAdd':
			var _new = command.a;
			return A2(
				encodeWrapper,
				'project_add',
				$author$project$Incubator$Todoist$Command$encodeNewProject(_new));
		case 'ProjectUpdate':
			var _new = command.a;
			return A2(
				encodeWrapper,
				'project_update',
				$author$project$Incubator$Todoist$Command$encodeProjectChanges(_new));
		case 'ProjectMove':
			var id = command.a;
			var newParent = command.b;
			return A2(
				encodeWrapper,
				'project_move',
				$author$project$Helpers$encodeObjectWithoutNothings(
					_List_fromArray(
						[
							$author$project$Helpers$normal(
							_Utils_Tuple2(
								'id',
								$author$project$Incubator$Todoist$Command$encodeProjectID(id))),
							$author$project$Helpers$omittable(
							_Utils_Tuple3('parent_id', $author$project$Incubator$Todoist$Command$encodeProjectID, newParent))
						])));
		case 'ProjectDelete':
			var id = command.a;
			return A2(
				encodeWrapper,
				'project_delete',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeProjectID(id))
						])));
		case 'ReorderProjects':
			var orderList = command.a;
			return A2(
				encodeWrapper,
				'project_reorder',
				A2($elm$json$Json$Encode$list, $author$project$Incubator$Todoist$Command$encodeProjectOrder, orderList));
		case 'DayOrdersUpdate':
			var dayOrdersDict = command.a;
			return A2(
				encodeWrapper,
				'item_update_day_orders',
				A2($author$project$Helpers$encodeIntDict, $elm$json$Json$Encode$int, dayOrdersDict));
		case 'ItemAdd':
			var _new = command.a;
			return A2(
				encodeWrapper,
				'item_add',
				$author$project$Incubator$Todoist$Command$encodeNewItem(_new));
		case 'ItemSwitchProject':
			var id = command.a;
			var newProject = command.b;
			return A2(
				encodeWrapper,
				'item_move',
				$author$project$Helpers$encodeObjectWithoutNothings(
					_List_fromArray(
						[
							$author$project$Helpers$normal(
							_Utils_Tuple2(
								'id',
								$author$project$Incubator$Todoist$Command$encodeItemID(id))),
							$author$project$Helpers$omittable(
							_Utils_Tuple3('parent_id', $author$project$Incubator$Todoist$Command$encodeProjectID, newProject))
						])));
		case 'ItemSwitchParent':
			var id = command.a;
			var newParentItem = command.b;
			return A2(
				encodeWrapper,
				'item_move',
				$author$project$Helpers$encodeObjectWithoutNothings(
					_List_fromArray(
						[
							$author$project$Helpers$normal(
							_Utils_Tuple2(
								'id',
								$author$project$Incubator$Todoist$Command$encodeItemID(id))),
							$author$project$Helpers$omittable(
							_Utils_Tuple3('project_id', $author$project$Incubator$Todoist$Command$encodeItemID, newParentItem))
						])));
		case 'ItemDelete':
			var id = command.a;
			return A2(
				encodeWrapper,
				'item_delete',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeItemID(id))
						])));
		case 'ItemClose':
			var id = command.a;
			return A2(
				encodeWrapper,
				'item_close',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeItemID(id))
						])));
		case 'ItemComplete':
			var completionDetails = command.a;
			return A2(
				encodeWrapper,
				'item_complete',
				$author$project$Incubator$Todoist$Command$encodeItemCompletion(completionDetails));
		case 'ItemCompleteRecurring':
			var completionDetails = command.a;
			return A2(
				encodeWrapper,
				'item_update_date_complete',
				$author$project$Incubator$Todoist$Command$encodeRecurringItemCompletion(completionDetails));
		case 'ItemUncomplete':
			var id = command.a;
			return A2(
				encodeWrapper,
				'item_uncomplete',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeItemID(id))
						])));
		case 'ItemArchive':
			var id = command.a;
			return A2(
				encodeWrapper,
				'item_archive',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeItemID(id))
						])));
		case 'ItemUnarchive':
			var id = command.a;
			return A2(
				encodeWrapper,
				'item_unarchive',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'id',
							$author$project$Incubator$Todoist$Command$encodeItemID(id))
						])));
		case 'ItemUpdate':
			var changes = command.a;
			return A2(
				encodeWrapper,
				'item_update',
				$author$project$Incubator$Todoist$Command$encodeItemChanges(changes));
		default:
			var orderList = command.a;
			return A2(
				encodeWrapper,
				'item_reorder',
				A2($elm$json$Json$Encode$list, $author$project$Incubator$Todoist$Command$encodeItemOrder, orderList));
	}
};
var $author$project$Incubator$Todoist$encodeResources = function (resource) {
	switch (resource.$) {
		case 'Projects':
			return $elm$json$Json$Encode$string('projects');
		case 'Items':
			return $elm$json$Json$Encode$string('items');
		default:
			return $elm$json$Json$Encode$string('user');
	}
};
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 'QueryParameter', a: a, b: b};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$Incubator$Todoist$serverUrl = F4(
	function (secret, resourceList, commandList, _v0) {
		var syncToken = _v0.a;
		var resources = A2($elm$json$Json$Encode$list, $author$project$Incubator$Todoist$encodeResources, resourceList);
		var withRead = ($elm$core$List$length(resourceList) > 0) ? _List_fromArray(
			[
				A2($elm$url$Url$Builder$string, 'sync_token', syncToken),
				A2(
				$elm$url$Url$Builder$string,
				'resource_types',
				A2($elm$json$Json$Encode$encode, 0, resources))
			]) : _List_Nil;
		var commands = A2($elm$json$Json$Encode$list, $author$project$Incubator$Todoist$Command$encodeCommandInstance, commandList);
		var withWrite = ($elm$core$List$length(commandList) > 0) ? _List_fromArray(
			[
				A2(
				$elm$url$Url$Builder$string,
				'commands',
				A2($elm$json$Json$Encode$encode, 0, commands))
			]) : _List_Nil;
		var chosenResources = '[%22items%22,%22projects%22]';
		return A3(
			$elm$url$Url$Builder$crossOrigin,
			'https://todoist.com',
			_List_fromArray(
				['api', 'v8', 'sync']),
			_Utils_ap(
				_List_fromArray(
					[
						A2($elm$url$Url$Builder$string, 'token', secret)
					]),
				_Utils_ap(withRead, withWrite)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson = {$: 'BadJson'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors = function (a) {
	return {$: 'Errors', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Success = function (a) {
	return {$: 'Success', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings = F2(
	function (a, b) {
		return {$: 'WithWarnings', a: a, b: b};
	});
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
function $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$String(false),
				$elm$json$Json$Decode$string),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Number(false),
				$elm$json$Json$Decode$float),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Bool(false),
				$elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$null(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Null(false)),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array(false),
				$elm$json$Json$Decode$list(
					$elm$json$Json$Decode$lazy(
						function (_v0) {
							return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
						}))),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object(false),
				$elm$json$Json$Decode$keyValuePairs(
					$elm$json$Json$Decode$lazy(
						function (_v1) {
							return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
						})))
			]));
}
try {
	var $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder = $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
	$zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder = function () {
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `Json.Decode.Exploration` are causing infinite recursion:\n\n  ┌─────┐\n  │    annotatedDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decode = $elm$json$Json$Decode$decodeValue($zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue = function (a) {
	return {$: 'UnusedValue', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings = function (json) {
	_v0$8:
	while (true) {
		switch (json.$) {
			case 'String':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Number':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Bool':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Null':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Array':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var values = json.b;
					return $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (idx, val) {
									var _v1 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
									if (!_v1.b) {
										return _List_Nil;
									} else {
										var x = _v1.a;
										var xs = _v1.b;
										return _List_fromArray(
											[
												A2(
												$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex,
												idx,
												A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
											]);
									}
								}),
							values));
				}
			default:
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var kvPairs = json.b;
					return A2(
						$elm$core$List$concatMap,
						function (_v2) {
							var key = _v2.a;
							var val = _v2.b;
							var _v3 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
							if (!_v3.b) {
								return _List_Nil;
							} else {
								var x = _v3.a;
								var xs = _v3.b;
								return _List_fromArray(
									[
										A2(
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField,
										key,
										A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
									]);
							}
						},
						kvPairs);
				}
		}
	}
	return _List_Nil;
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue = F2(
	function (_v0, val) {
		var decoderFn = _v0.a;
		var _v1 = $zwilias$json_decode_exploration$Json$Decode$Exploration$decode(val);
		if (_v1.$ === 'Err') {
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson;
		} else {
			var json = _v1.a;
			var _v2 = decoderFn(json);
			if (_v2.$ === 'Err') {
				var errors = _v2.a;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors(errors);
			} else {
				var acc = _v2.a;
				var _v3 = _Utils_ap(
					acc.warnings,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(acc.json));
				if (!_v3.b) {
					return $zwilias$json_decode_exploration$Json$Decode$Exploration$Success(acc.value);
				} else {
					var x = _v3.a;
					var xs = _v3.b;
					return A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings,
						A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs),
						acc.value);
				}
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString = function (expectedType) {
	switch (expectedType.$) {
		case 'TString':
			return 'a string';
		case 'TInt':
			return 'an integer number';
		case 'TNumber':
			return 'a number';
		case 'TNull':
			return 'null';
		case 'TBool':
			return 'a boolean';
		case 'TArray':
			return 'an array';
		case 'TObject':
			return 'an object';
		case 'TArrayIndex':
			var idx = expectedType.a;
			return 'an array with index ' + $elm$core$String$fromInt(idx);
		default:
			var aField = expectedType.a;
			return 'an object with a field \'' + (aField + '\'');
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$indent = $elm$core$List$map(
	$elm$core$Basics$append('  '));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap = F3(
	function (sep, toList, xs) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				A2($elm$core$List$map, toList, xs)));
	});
var $elm$core$String$lines = _String_lines;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$encode(2),
	$elm$core$String$lines);
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten = function (located) {
	switch (located.$) {
		case 'Here':
			var v = located.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'',
					_List_fromArray(
						[v]))
				]);
		case 'InField':
			var s = located.a;
			var vals = located.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '/' + s, vals);
		default:
			var i = located.a;
			var vals = located.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather,
				'/' + $elm$core$String$fromInt(i),
				vals);
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather = F2(
	function (prefix, _v0) {
		var first = _v0.a;
		var rest = _v0.b;
		return A2(
			$elm$core$List$map,
			$elm$core$Tuple$mapFirst(
				$elm$core$Basics$append(prefix)),
			A2(
				$elm$core$List$concatMap,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten,
				A2($elm$core$List$cons, first, rest)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate = F2(
	function (sep, lists) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				lists));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent = $elm$core$Basics$append('  ');
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render = F3(
	function (itemToString, path, errors) {
		var formattedErrors = A2(
			$elm$core$List$map,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent,
			A2($elm$core$List$concatMap, itemToString, errors));
		return $elm$core$String$isEmpty(path) ? formattedErrors : A2(
			$elm$core$List$cons,
			'At path ' + path,
			A2($elm$core$List$cons, '', formattedErrors));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString = F2(
	function (itemToString, locatedItems) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					var x = _v0.a;
					var vals = _v0.b;
					return A3($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render, itemToString, x, vals);
				},
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '', locatedItems)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString = function (error) {
	switch (error.$) {
		case 'Failure':
			var failure = error.a;
			var json = error.b;
			if (json.$ === 'Just') {
				var val = json.a;
				return A2(
					$elm$core$List$cons,
					failure,
					A2(
						$elm$core$List$cons,
						'',
						$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(val))));
			} else {
				return _List_fromArray(
					[failure]);
			}
		case 'Expected':
			var expectedType = error.a;
			var actualValue = error.b;
			return A2(
				$elm$core$List$cons,
				'I expected ' + ($zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString(expectedType) + ' here, but instead found this value:'),
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(actualValue))));
		default:
			var errors = error.a;
			if (!errors.b) {
				return _List_fromArray(
					['I encountered a `oneOf` without any options.']);
			} else {
				return A2(
					$elm$core$List$cons,
					'I encountered multiple issues:',
					A2(
						$elm$core$List$cons,
						'',
						A3($zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap, '', $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings, errors)));
			}
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings = function (errors) {
	return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString, $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString, errors);
};
var $elm$core$String$trimRight = _String_trimRight;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString = function (errors) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$elm$core$String$trimRight,
			A2(
				$elm$core$List$cons,
				'I encountered some errors while decoding this JSON:',
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings(errors)))));
};
var $elm_community$json_extra$Json$Decode$Extra$fromResult = function (result) {
	if (result.$ === 'Ok') {
		var successValue = result.a;
		return $elm$json$Json$Decode$succeed(successValue);
	} else {
		var errorMessage = result.a;
		return $elm$json$Json$Decode$fail(errorMessage);
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$map = F2(
	function (op, located) {
		switch (located.$) {
			case 'InField':
				var f = located.a;
				var val = located.b;
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField,
					f,
					A2(
						$mgold$elm_nonempty_list$List$Nonempty$map,
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$map(op),
						val));
			case 'AtIndex':
				var i = located.a;
				var val = located.b;
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex,
					i,
					A2(
						$mgold$elm_nonempty_list$List$Nonempty$map,
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$map(op),
						val));
			default:
				var v = located.a;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
					op(v));
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$warningToError = function (warning) {
	if (warning.$ === 'UnusedValue') {
		var v = warning.a;
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Failure,
			'Unused value',
			$elm$core$Maybe$Just(v));
	} else {
		var w = warning.a;
		var v = warning.b;
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Failure,
			w,
			$elm$core$Maybe$Just(v));
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$warningsToErrors = $mgold$elm_nonempty_list$List$Nonempty$map(
	$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$map($zwilias$json_decode_exploration$Json$Decode$Exploration$warningToError));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$strict = function (res) {
	switch (res.$) {
		case 'Errors':
			var e = res.a;
			return $elm$core$Result$Err(e);
		case 'BadJson':
			return $elm$core$Result$Err(
				$mgold$elm_nonempty_list$List$Nonempty$fromElement(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Failure, 'Invalid JSON', $elm$core$Maybe$Nothing))));
		case 'WithWarnings':
			var w = res.a;
			return $elm$core$Result$Err(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$warningsToErrors(w));
		default:
			var v = res.a;
			return $elm$core$Result$Ok(v);
	}
};
var $author$project$Helpers$toClassic = function (decoder) {
	var runRealDecoder = function (value) {
		return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue, decoder, value);
	};
	var convertToNormalResult = function (fancyResult) {
		return A2($elm$core$Result$mapError, $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString, fancyResult);
	};
	var asResult = function (value) {
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$strict(
			runRealDecoder(value));
	};
	var _final = function (value) {
		return convertToNormalResult(
			asResult(value));
	};
	return A2(
		$elm$json$Json$Decode$andThen,
		A2($elm$core$Basics$composeL, $elm_community$json_extra$Json$Decode$Extra$fromResult, _final),
		$elm$json$Json$Decode$value);
};
var $author$project$Incubator$Todoist$sync = F4(
	function (cache, secret, resourceList, commandList) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2(
					$elm$http$Http$expectJson,
					$author$project$Incubator$Todoist$SyncResponded,
					$author$project$Helpers$toClassic($author$project$Incubator$Todoist$decodeResponse)),
				url: A4($author$project$Incubator$Todoist$serverUrl, secret, resourceList, commandList, cache.nextSync)
			});
	});
var $author$project$Integrations$Todoist$fetchUpdates = function (localData) {
	return A4(
		$author$project$Incubator$Todoist$sync,
		localData.cache,
		$author$project$Integrations$Todoist$devSecret,
		_List_fromArray(
			[$author$project$Incubator$Todoist$Items, $author$project$Incubator$Todoist$Projects]),
		_List_Nil);
};
var $author$project$Integrations$Marvin$GotLabels = function (a) {
	return {$: 'GotLabels', a: a};
};
var $author$project$Integrations$Marvin$MarvinItem$MarvinLabel = F3(
	function (id, title, color) {
		return {color: color, id: id, title: title};
	});
var $author$project$Integrations$Marvin$MarvinItem$decodeMarvinLabel = A2(
	$author$project$Helpers$optionalIgnored,
	'_rev',
	A4(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
		'color',
		$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
		'',
		A3(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
			'title',
			$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
			A3(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
				'_id',
				$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($author$project$Integrations$Marvin$MarvinItem$MarvinLabel)))));
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $author$project$Integrations$Marvin$marvinEndpointURL = function (endpoint) {
	return A3(
		$elm$url$Url$Builder$crossOrigin,
		'https://serv.amazingmarvin.com',
		_List_fromArray(
			['api', endpoint]),
		_List_Nil);
};
var $author$project$Helpers$toClassicLoose = function (decoder) {
	var runRealDecoder = function (value) {
		return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue, decoder, value);
	};
	var asResult = function (value) {
		var _v0 = runRealDecoder(value);
		switch (_v0.$) {
			case 'BadJson':
				return $elm$core$Result$Err('Bad JSON');
			case 'Errors':
				var errors = _v0.a;
				return $elm$core$Result$Err(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString(errors));
			case 'WithWarnings':
				var result = _v0.b;
				return $elm$core$Result$Ok(result);
			default:
				var result = _v0.a;
				return $elm$core$Result$Ok(result);
		}
	};
	var _final = function (value) {
		return asResult(value);
	};
	return A2(
		$elm$json$Json$Decode$andThen,
		A2($elm$core$Basics$composeL, $elm_community$json_extra$Json$Decode$Extra$fromResult, _final),
		$elm$json$Json$Decode$value);
};
var $author$project$Integrations$Marvin$getLabels = function (secret) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$emptyBody,
			expect: A2(
				$elm$http$Http$expectJson,
				$author$project$Integrations$Marvin$GotLabels,
				$author$project$Helpers$toClassicLoose(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Integrations$Marvin$MarvinItem$decodeMarvinLabel))),
			headers: _List_fromArray(
				[
					A2($elm$http$Http$header, 'X-API-Token', secret)
				]),
			method: 'GET',
			timeout: $elm$core$Maybe$Just(10000),
			tracker: $elm$core$Maybe$Nothing,
			url: $author$project$Integrations$Marvin$marvinEndpointURL('labels')
		});
};
var $author$project$Integrations$Marvin$partialAccessToken = 'm47dqHEwdJy56/j8tyAcXARlADg=';
var $author$project$Integrations$Marvin$getLabelsCmd = $elm$core$Platform$Cmd$batch(
	_List_fromArray(
		[
			$author$project$Integrations$Marvin$getLabels($author$project$Integrations$Marvin$partialAccessToken)
		]));
var $author$project$Main$getPanelViewState = F2(
	function (panel, _default) {
		switch (panel.$) {
			case 'OpenPanel':
				var position = panel.a;
				var state = panel.b;
				return _Utils_Tuple2(state, position);
			case 'ClosedPanel':
				var position = panel.a;
				var state = panel.b;
				return _Utils_Tuple2(state, position);
			default:
				return _Utils_Tuple2(_default, $author$project$Main$FullScreen);
		}
	});
var $author$project$Replicated$Reducer$RepList$Last = {$: 'Last'};
var $author$project$Integrations$Marvin$TrackTruthItem = F2(
	function (task, times) {
		return {task: task, times: times};
	});
var $author$project$Activity$Timeline$backfill = F2(
	function (wrappedTimeline, periodsToAdd) {
		var timeline = wrappedTimeline.a;
		return _Debug_todo(
			'Activity.Timeline',
			{
				start: {line: 272, column: 5},
				end: {line: 272, column: 15}
			})('fix backfill');
	});
var $author$project$Activity$Timeline$currentInstanceID = function (wrappedTimeline) {
	var timeline = wrappedTimeline.a;
	return A2(
		$elm$core$Maybe$andThen,
		function ($) {
			return $.action;
		},
		timeline.current.get);
};
var $author$project$Integrations$Marvin$describeError = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var msg = error.a;
			return 'For some reason we were told the URL is bad. This should never happen, it\'s a perfectly tested working URL! The error: ' + msg;
		case 'Timeout':
			return 'Timed out. Try again later?';
		case 'NetworkError':
			return 'Are you offline? I couldn\'t get on the network, but it could also be your system blocking me.';
		case 'BadStatus':
			var status = error.a;
			switch (status) {
				case 400:
					return '400 Bad Request: The request was incorrect.';
				case 401:
					return '401 Unauthorized: Authentication is required, and has failed, or has not yet been provided. Maybe your API credentials are messed up?';
				case 403:
					return '403 Forbidden: The request was valid, but for something that is forbidden.';
				case 404:
					return '404 Not Found! That should never happen, because I definitely used the right URL. Is your system or proxy blocking or messing with internet requests? Is it many years in future, where the API has been deprecated, obsoleted, and then discontinued? Or maybe it\'s far enough in the future that the service doesn\'t exist anymore but for some reason you\'re still using this version of the software?';
				case 429:
					return '429 Too Many Requests: Slow down, cowboy! Check out the API Docs for Usage Limits.';
				case 500:
					return '500 Internal Server Error: They got the message, and it got confused';
				case 502:
					return '502 Bad Gateway: I was trying to reach the server but I got stopped along the way. If you\'re definitely connected, it\'s probably a temporary hiccup on their side -- but if you see this a lot, check that your DNS is resolving (try amazingmarvin.com) and any proxy setup you have is working.';
				case 503:
					return '503 Service Unavailable: Not my fault! The service must be bogged down today, or perhaps experiencing a DDoS attack. :O';
				default:
					var other = status;
					return 'Got HTTP Error code ' + ($elm$core$String$fromInt(other) + ', not sure what that means in this case. Sorry!');
			}
		default:
			var string = error.a;
			return 'I successfully talked with the servers, but the response had some weird parts I was never trained for. Either Marvin changed something recently, or you\'ve found a weird edge case the developer didn\'t know about. Either way, please report this! \n' + string;
	}
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $author$project$SmartTime$Duration$difference = F2(
	function (_v0, _v1) {
		var int1 = _v0.a;
		var int2 = _v1.a;
		return $author$project$SmartTime$Duration$Duration(
			$elm$core$Basics$abs(int1 - int2));
	});
var $author$project$SmartTime$Moment$difference = F2(
	function (_v0, _v1) {
		var time1 = _v0.a;
		var time2 = _v1.a;
		return A2($author$project$SmartTime$Duration$difference, time1, time2);
	});
var $author$project$Replicated$Reducer$RepDict$getMember = F2(
	function (key, repDict) {
		var record = repDict.a;
		return A2($turboMaCk$any_dict$Dict$Any$get, key, record.members);
	});
var $author$project$Replicated$Reducer$RepDict$get = F2(
	function (key, repDict) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.value;
			},
			A2($author$project$Replicated$Reducer$RepDict$getMember, key, repDict));
	});
var $author$project$Task$AssignedAction$getExtra = F2(
	function (key, instance) {
		return A2(
			$author$project$Replicated$Reducer$RepDict$get,
			key,
			$author$project$Replicated$Reducer$Register$latest(instance.instance).extra);
	});
var $author$project$Profile$getInstanceByID = F3(
	function (profile, _v0, instanceID) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (i) {
					return _Utils_eq(
						$author$project$Task$AssignedAction$getID(i),
						instanceID);
				},
				A2(
					$author$project$Profile$instanceListNow,
					profile,
					_Utils_Tuple2(time, timeZone))));
	});
var $author$project$Integrations$Marvin$GotTimeBlockAssignments = function (a) {
	return {$: 'GotTimeBlockAssignments', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $zwilias$json_decode_exploration$Json$Decode$Exploration$field, decoder, fields);
	});
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $danfishgold$base64_bytes$Decode$lowest6BitsMask = 63;
var $elm$core$Char$fromCode = _Char_fromCode;
var $danfishgold$base64_bytes$Decode$unsafeToChar = function (n) {
	if (n <= 25) {
		return $elm$core$Char$fromCode(65 + n);
	} else {
		if (n <= 51) {
			return $elm$core$Char$fromCode(97 + (n - 26));
		} else {
			if (n <= 61) {
				return $elm$core$Char$fromCode(48 + (n - 52));
			} else {
				switch (n) {
					case 62:
						return _Utils_chr('+');
					case 63:
						return _Utils_chr('/');
					default:
						return _Utils_chr('\u0000');
				}
			}
		}
	}
};
var $danfishgold$base64_bytes$Decode$bitsToChars = F2(
	function (bits, missing) {
		var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 18);
		switch (missing) {
			case 0:
				return A2(
					$elm$core$String$cons,
					p,
					A2(
						$elm$core$String$cons,
						q,
						A2(
							$elm$core$String$cons,
							r,
							$elm$core$String$fromChar(s))));
			case 1:
				return A2(
					$elm$core$String$cons,
					p,
					A2(
						$elm$core$String$cons,
						q,
						A2($elm$core$String$cons, r, '=')));
			case 2:
				return A2(
					$elm$core$String$cons,
					p,
					A2($elm$core$String$cons, q, '=='));
			default:
				return '';
		}
	});
var $danfishgold$base64_bytes$Decode$bitsToCharSpecialized = F4(
	function (bits1, bits2, bits3, accum) {
		var z = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var y = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var x = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 18);
		var w = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 18);
		var d = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var c = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var b = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var a = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 18);
		return A2(
			$elm$core$String$cons,
			x,
			A2(
				$elm$core$String$cons,
				y,
				A2(
					$elm$core$String$cons,
					z,
					A2(
						$elm$core$String$cons,
						w,
						A2(
							$elm$core$String$cons,
							a,
							A2(
								$elm$core$String$cons,
								b,
								A2(
									$elm$core$String$cons,
									c,
									A2(
										$elm$core$String$cons,
										d,
										A2(
											$elm$core$String$cons,
											p,
											A2(
												$elm$core$String$cons,
												q,
												A2(
													$elm$core$String$cons,
													r,
													A2($elm$core$String$cons, s, accum))))))))))));
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $danfishgold$base64_bytes$Decode$decode18Help = F5(
	function (a, b, c, d, e) {
		var combined6 = ((255 & d) << 16) | e;
		var combined5 = d >>> 8;
		var combined4 = 16777215 & c;
		var combined3 = ((65535 & b) << 8) | (c >>> 24);
		var combined2 = ((255 & a) << 16) | (b >>> 16);
		var combined1 = a >>> 8;
		return A4(
			$danfishgold$base64_bytes$Decode$bitsToCharSpecialized,
			combined3,
			combined2,
			combined1,
			A4($danfishgold$base64_bytes$Decode$bitsToCharSpecialized, combined6, combined5, combined4, ''));
	});
var $elm$bytes$Bytes$Decode$map5 = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		var decodeD = _v3.a;
		var decodeE = _v4.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v5 = A2(decodeA, bites, offset);
					var aOffset = _v5.a;
					var a = _v5.b;
					var _v6 = A2(decodeB, bites, aOffset);
					var bOffset = _v6.a;
					var b = _v6.b;
					var _v7 = A2(decodeC, bites, bOffset);
					var cOffset = _v7.a;
					var c = _v7.b;
					var _v8 = A2(decodeD, bites, cOffset);
					var dOffset = _v8.a;
					var d = _v8.b;
					var _v9 = A2(decodeE, bites, dOffset);
					var eOffset = _v9.a;
					var e = _v9.b;
					return _Utils_Tuple2(
						eOffset,
						A5(func, a, b, c, d, e));
				}));
	});
var $danfishgold$base64_bytes$Decode$u16BE = $elm$bytes$Bytes$Decode$unsignedInt16($elm$bytes$Bytes$BE);
var $danfishgold$base64_bytes$Decode$u32BE = $elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE);
var $danfishgold$base64_bytes$Decode$decode18Bytes = A6($elm$bytes$Bytes$Decode$map5, $danfishgold$base64_bytes$Decode$decode18Help, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u16BE);
var $elm$bytes$Bytes$Decode$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v3 = A2(decodeA, bites, offset);
					var aOffset = _v3.a;
					var a = _v3.b;
					var _v4 = A2(decodeB, bites, aOffset);
					var bOffset = _v4.a;
					var b = _v4.b;
					var _v5 = A2(decodeC, bites, bOffset);
					var cOffset = _v5.a;
					var c = _v5.b;
					return _Utils_Tuple2(
						cOffset,
						A3(func, a, b, c));
				}));
	});
var $danfishgold$base64_bytes$Decode$loopHelp = function (_v0) {
	var remaining = _v0.remaining;
	var string = _v0.string;
	if (remaining >= 18) {
		return A2(
			$elm$bytes$Bytes$Decode$map,
			function (result) {
				return $elm$bytes$Bytes$Decode$Loop(
					{
						remaining: remaining - 18,
						string: _Utils_ap(string, result)
					});
			},
			$danfishgold$base64_bytes$Decode$decode18Bytes);
	} else {
		if (remaining >= 3) {
			var helper = F3(
				function (a, b, c) {
					var combined = ((a << 16) | (b << 8)) | c;
					return $elm$bytes$Bytes$Decode$Loop(
						{
							remaining: remaining - 3,
							string: _Utils_ap(
								string,
								A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 0))
						});
				});
			return A4($elm$bytes$Bytes$Decode$map3, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
		} else {
			if (!remaining) {
				return $elm$bytes$Bytes$Decode$succeed(
					$elm$bytes$Bytes$Decode$Done(string));
			} else {
				if (remaining === 2) {
					var helper = F2(
						function (a, b) {
							var combined = (a << 16) | (b << 8);
							return $elm$bytes$Bytes$Decode$Done(
								_Utils_ap(
									string,
									A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 1)));
						});
					return A3($elm$bytes$Bytes$Decode$map2, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
				} else {
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (a) {
							return $elm$bytes$Bytes$Decode$Done(
								_Utils_ap(
									string,
									A2($danfishgold$base64_bytes$Decode$bitsToChars, a << 16, 2)));
						},
						$elm$bytes$Bytes$Decode$unsignedInt8);
				}
			}
		}
	}
};
var $danfishgold$base64_bytes$Decode$decoder = function (width) {
	return A2(
		$elm$bytes$Bytes$Decode$loop,
		{remaining: width, string: ''},
		$danfishgold$base64_bytes$Decode$loopHelp);
};
var $elm$bytes$Bytes$width = _Bytes_width;
var $danfishgold$base64_bytes$Decode$fromBytes = function (bytes) {
	return A2(
		$elm$bytes$Bytes$Decode$decode,
		$danfishgold$base64_bytes$Decode$decoder(
			$elm$bytes$Bytes$width(bytes)),
		bytes);
};
var $danfishgold$base64_bytes$Base64$fromBytes = $danfishgold$base64_bytes$Decode$fromBytes;
var $author$project$Integrations$Marvin$buildAuthorizationToken = F2(
	function (username, password) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			$danfishgold$base64_bytes$Base64$fromBytes(
				$elm$bytes$Bytes$Encode$encode(
					$elm$bytes$Bytes$Encode$string(username + (':' + password)))));
	});
var $author$project$Integrations$Marvin$buildAuthorizationHeader = F2(
	function (username, password) {
		return A2(
			$elm$http$Http$header,
			'Authorization',
			'Basic ' + A2($author$project$Integrations$Marvin$buildAuthorizationToken, username, password));
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $author$project$Integrations$Marvin$marvinCloudantDatabaseUrl = F2(
	function (directories, params) {
		return A3($elm$url$Url$Builder$crossOrigin, 'https://512940bf-6e0c-4d7b-884b-9fc66185836b-bluemix.cloudant.com', directories, params);
	});
var $author$project$Integrations$Marvin$syncDatabase = 'u32410002';
var $author$project$Integrations$Marvin$syncPassword = '3c749548fd996396c2bfefdb44bd140fc9d25de8';
var $author$project$Integrations$Marvin$syncUser = 'tuddereartheirceirleacco';
var $author$project$Integrations$Marvin$getTimeBlockAssignments = function () {
	var stripPrefix = function (settingIDString) {
		return A2($elm$core$String$dropLeft, 35, settingIDString);
	};
	var decodeAssignmentValue = $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
		_List_fromArray(
			[
				A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
				_List_fromArray(
					['val', 'parentId', 'val']),
				$zwilias$json_decode_exploration$Json$Decode$Exploration$string),
				A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
				_List_fromArray(
					['val', 'goalId', 'val']),
				$zwilias$json_decode_exploration$Json$Decode$Exploration$string),
				A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
				_List_fromArray(
					['val', 'labelIds', 'val']),
				$zwilias$json_decode_exploration$Json$Decode$Exploration$string)
			]));
	var decodeAssignmentName = A2(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$field,
		'_id',
		A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, stripPrefix, $zwilias$json_decode_exploration$Json$Decode$Exploration$string));
	var decodeAssignment = A3($zwilias$json_decode_exploration$Json$Decode$Exploration$map2, $elm$core$Tuple$pair, decodeAssignmentName, decodeAssignmentValue);
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$jsonBody(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'selector',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'db',
										$elm$json$Json$Encode$string('ProfileItems')),
										_Utils_Tuple2(
										'_id',
										$elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'$regex',
													$elm$json$Json$Encode$string('^strategySettings.plannerSmartLists'))
												])))
									]))),
							_Utils_Tuple2(
							'fields',
							A2(
								$elm$json$Json$Encode$list,
								$elm$json$Json$Encode$string,
								_List_fromArray(
									['val', '_id'])))
						]))),
			expect: A2(
				$elm$http$Http$expectJson,
				$author$project$Integrations$Marvin$GotTimeBlockAssignments,
				$author$project$Helpers$toClassicLoose(
					A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
						_List_fromArray(
							['docs']),
						A2(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$map,
							$elm$core$Dict$fromList,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$list(decodeAssignment))))),
			headers: _List_fromArray(
				[
					A2($elm$http$Http$header, 'Accept', 'application/json'),
					A2($author$project$Integrations$Marvin$buildAuthorizationHeader, $author$project$Integrations$Marvin$syncUser, $author$project$Integrations$Marvin$syncPassword)
				]),
			method: 'POST',
			timeout: $elm$core$Maybe$Just(10000),
			tracker: $elm$core$Maybe$Nothing,
			url: A2(
				$author$project$Integrations$Marvin$marvinCloudantDatabaseUrl,
				_List_fromArray(
					[$author$project$Integrations$Marvin$syncDatabase, '_find']),
				_List_Nil)
		});
}();
var $author$project$Integrations$Marvin$GotTimeBlocks = F2(
	function (a, b) {
		return {$: 'GotTimeBlocks', a: a, b: b};
	});
var $author$project$Integrations$Marvin$MarvinItem$MarvinTimeBlock = F7(
	function (title, date, time, duration, isSection, cancelDates, recurrence) {
		return {cancelDates: cancelDates, date: date, duration: duration, isSection: isSection, recurrence: recurrence, time: time, title: title};
	});
var $author$project$Helpers$customDecoder = F2(
	function (primitiveDecoder, customDecoderFunction) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$andThen,
			function (a) {
				var _v0 = customDecoderFunction(a);
				if (_v0.$ === 'Ok') {
					var b = _v0.a;
					return $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(b);
				} else {
					var err = _v0.a;
					return $zwilias$json_decode_exploration$Json$Decode$Exploration$fail(err);
				}
			},
			primitiveDecoder);
	});
var $author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder = A2($author$project$Helpers$customDecoder, $zwilias$json_decode_exploration$Json$Decode$Exploration$string, $author$project$SmartTime$Human$Calendar$fromNumberString);
var $author$project$Integrations$Marvin$MarvinItem$decodeCancelDates = function () {
	var kvPairToDate = function (_v1) {
		var datestring = _v1.a;
		var canceled = _v1.b;
		var _v0 = _Utils_Tuple2(
			$author$project$SmartTime$Human$Calendar$fromNumberString(datestring),
			canceled);
		if ((_v0.a.$ === 'Ok') && _v0.b) {
			var date = _v0.a.a;
			return $elm$core$Maybe$Just(date);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var convertDictionary = function (dict) {
		return A2(
			$elm$core$List$filterMap,
			kvPairToDate,
			$elm$core$Dict$toList(dict));
	};
	return A2(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$map,
		convertDictionary,
		$zwilias$json_decode_exploration$Json$Decode$Exploration$dict($zwilias$json_decode_exploration$Json$Decode$Exploration$bool));
}();
var $author$project$Helpers$decodeDuration = A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $author$project$SmartTime$Duration$fromInt, $zwilias$json_decode_exploration$Json$Decode$Exploration$int);
var $author$project$Integrations$Marvin$MarvinItem$decodeRecurrencePattern = function () {
	var interpreted = function (string) {
		return $elm$core$Result$Err('NYI');
	};
	return A2($author$project$Helpers$customDecoder, $zwilias$json_decode_exploration$Json$Decode$Exploration$string, interpreted);
}();
var $author$project$Integrations$Marvin$MarvinItem$timeOfDayDecoder = A2($author$project$Helpers$customDecoder, $zwilias$json_decode_exploration$Json$Decode$Exploration$string, $author$project$SmartTime$Human$Clock$fromStandardString);
var $author$project$Integrations$Marvin$MarvinItem$decodeMarvinTimeBlock = A2(
	$author$project$Helpers$optionalIgnored,
	'_rev',
	A4(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
		'recurrence',
		$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Integrations$Marvin$MarvinItem$decodeRecurrencePattern),
		_List_Nil,
		A4(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
			'cancelDates',
			$author$project$Integrations$Marvin$MarvinItem$decodeCancelDates,
			_List_Nil,
			A2(
				$author$project$Helpers$optionalIgnored,
				'exceptions',
				A4(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
					'isSection',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
					true,
					A3(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
						'duration',
						$author$project$Helpers$decodeDuration,
						A3(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
							'time',
							$author$project$Integrations$Marvin$MarvinItem$timeOfDayDecoder,
							A3(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
								'date',
								$author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder,
								A3(
									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
									'title',
									$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
									$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($author$project$Integrations$Marvin$MarvinItem$MarvinTimeBlock))))))))));
var $author$project$Integrations$Marvin$getTimeBlocks = function (assignments) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$jsonBody(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'selector',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'db',
										$elm$json$Json$Encode$string('PlannerItems'))
									]))),
							_Utils_Tuple2(
							'fields',
							A2(
								$elm$json$Json$Encode$list,
								$elm$json$Json$Encode$string,
								_List_fromArray(
									['title', 'date', 'time', 'duration', 'cancelDates', 'exceptions'])))
						]))),
			expect: A2(
				$elm$http$Http$expectJson,
				$author$project$Integrations$Marvin$GotTimeBlocks(assignments),
				$author$project$Helpers$toClassicLoose(
					A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
						_List_fromArray(
							['docs']),
						$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Integrations$Marvin$MarvinItem$decodeMarvinTimeBlock)))),
			headers: _List_fromArray(
				[
					A2($elm$http$Http$header, 'Accept', 'application/json'),
					A2($author$project$Integrations$Marvin$buildAuthorizationHeader, $author$project$Integrations$Marvin$syncUser, $author$project$Integrations$Marvin$syncPassword)
				]),
			method: 'POST',
			timeout: $elm$core$Maybe$Just(5000),
			tracker: $elm$core$Maybe$Nothing,
			url: A2(
				$author$project$Integrations$Marvin$marvinCloudantDatabaseUrl,
				_List_fromArray(
					[$author$project$Integrations$Marvin$syncDatabase, '_find']),
				_List_Nil)
		});
};
var $author$project$Integrations$Marvin$GotItems = function (a) {
	return {$: 'GotItems', a: a};
};
var $author$project$Integrations$Marvin$MarvinItem$Essential = {$: 'Essential'};
var $author$project$Integrations$Marvin$MarvinItem$MarvinItem = function (id) {
	return function (rev) {
		return function (done) {
			return function (day) {
				return function (title) {
					return function (parentId) {
						return function (labelIds) {
							return function (firstScheduled) {
								return function (rank) {
									return function (dailySection) {
										return function (bonusSection) {
											return function (customSection) {
												return function (timeBlockSection) {
													return function (note) {
														return function (dueDate) {
															return function (timeEstimate) {
																return function (isReward) {
																	return function (isStarred) {
																		return function (isFrogged) {
																			return function (plannedWeek) {
																				return function (plannedMonth) {
																					return function (rewardPoints) {
																						return function (rewardId) {
																							return function (backburner) {
																								return function (reviewDate) {
																									return function (itemSnoozeTime) {
																										return function (permaSnoozeTime) {
																											return function (timeZoneOffset) {
																												return function (startDate) {
																													return function (endDate) {
																														return function (db) {
																															return function (times) {
																																return function (taskTime) {
																																	return function (pinId) {
																																		return function (recurringTaskId) {
																																			return function (masterRank) {
																																				return function (createdAt) {
																																					return function (doneAt) {
																																						return function (updatedAt) {
																																							return function (fieldUpdates) {
																																								return {backburner: backburner, bonusSection: bonusSection, createdAt: createdAt, customSection: customSection, dailySection: dailySection, day: day, db: db, done: done, doneAt: doneAt, dueDate: dueDate, endDate: endDate, fieldUpdates: fieldUpdates, firstScheduled: firstScheduled, id: id, isFrogged: isFrogged, isReward: isReward, isStarred: isStarred, itemSnoozeTime: itemSnoozeTime, labelIds: labelIds, masterRank: masterRank, note: note, parentId: parentId, permaSnoozeTime: permaSnoozeTime, pinId: pinId, plannedMonth: plannedMonth, plannedWeek: plannedWeek, rank: rank, recurringTaskId: recurringTaskId, rev: rev, reviewDate: reviewDate, rewardId: rewardId, rewardPoints: rewardPoints, startDate: startDate, taskTime: taskTime, timeBlockSection: timeBlockSection, timeEstimate: timeEstimate, timeZoneOffset: timeZoneOffset, times: times, title: title, updatedAt: updatedAt};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Helpers$decodeUnixTimestamp = A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $author$project$SmartTime$Moment$fromElmInt, $zwilias$json_decode_exploration$Json$Decode$Exploration$int);
var $author$project$Integrations$Marvin$MarvinItem$Bonus = {$: 'Bonus'};
var $author$project$Integrations$Marvin$MarvinItem$essentialOrBonusDecoder = function () {
	var get = function (id) {
		switch (id) {
			case 'Essential':
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($author$project$Integrations$Marvin$MarvinItem$Essential);
			case 'Bonus':
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($author$project$Integrations$Marvin$MarvinItem$Bonus);
			default:
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$fail('unknown value for EssentialOrBonus: ' + id);
		}
	};
	return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$andThen, get, $zwilias$json_decode_exploration$Json$Decode$Exploration$string);
}();
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TNumber = {$: 'TNumber'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$float = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'Number') {
			var val = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				val);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TNumber, json);
		}
	});
var $author$project$Integrations$Marvin$MarvinItem$monthDecoder = function () {
	var toYearAndMonth = function (date) {
		return _Utils_Tuple2(
			$author$project$SmartTime$Human$Calendar$year(date),
			$author$project$SmartTime$Human$Calendar$month(date));
	};
	var fakeDate = function (twoPartString) {
		return $author$project$SmartTime$Human$Calendar$fromNumberString(twoPartString + '-01');
	};
	var output = function (input) {
		return A2(
			$elm$core$Result$map,
			toYearAndMonth,
			fakeDate(input));
	};
	return A2($author$project$Helpers$customDecoder, $zwilias$json_decode_exploration$Json$Decode$Exploration$string, output);
}();
var $author$project$Integrations$Marvin$MarvinItem$decodeMarvinItem = A2(
	$author$project$Helpers$optionalIgnored,
	'rank_43f625b3-1d08-4f0f-b21e-d0a8d2f707ea',
	A2(
		$author$project$Helpers$optionalIgnored,
		'priority',
		A2(
			$author$project$Helpers$optionalIgnored,
			'ackedDeps',
			A2(
				$author$project$Helpers$optionalIgnored,
				'dependsOn',
				A2(
					$author$project$Helpers$optionalIgnored,
					'',
					A2(
						$author$project$Helpers$optionalIgnored,
						'newRecurringProject',
						A2(
							$author$project$Helpers$optionalIgnored,
							'workedOnAt',
							A2(
								$author$project$Helpers$optionalIgnored,
								'imported',
								A2(
									$author$project$Helpers$optionalIgnored,
									'sectionid',
									A2(
										$author$project$Helpers$optionalIgnored,
										'sectionId',
										A2(
											$author$project$Helpers$optionalIgnored,
											'generatedAt',
											A2(
												$author$project$Helpers$optionalIgnored,
												'createdAt',
												A2(
													$author$project$Helpers$optionalIgnored,
													'recurring',
													A2(
														$author$project$Helpers$optionalIgnored,
														'echoId',
														A2(
															$author$project$Helpers$optionalIgnored,
															'remindAt',
															A2(
																$author$project$Helpers$optionalIgnored,
																'reminder',
																A2(
																	$author$project$Helpers$optionalIgnored,
																	'echo',
																	A2(
																		$author$project$Helpers$optionalIgnored,
																		'remind',
																		A2(
																			$author$project$Helpers$optionalIgnored,
																			'completedAt',
																			A2(
																				$author$project$Helpers$optionalIgnored,
																				'duration',
																				A2(
																					$author$project$Helpers$optionalIgnored,
																					'echoedAt',
																					A2(
																						$author$project$Helpers$optionalIgnored,
																						'rank_fbfe2f43-3ed1-472a-bea7-d1bc2185ccf6',
																						A2(
																							$author$project$Helpers$optionalIgnored,
																							'fixParentId',
																							A2(
																								$author$project$Helpers$optionalIgnored,
																								'reminderOffset',
																								A2(
																									$author$project$Helpers$optionalIgnored,
																									'snooze',
																									A2(
																										$author$project$Helpers$optionalIgnored,
																										'autoSnooze',
																										A2(
																											$author$project$Helpers$optionalIgnored,
																											'reminderTime',
																											A2(
																												$author$project$Helpers$optionalIgnored,
																												'subtasks',
																												A4(
																													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																													'fieldUpdates',
																													$zwilias$json_decode_exploration$Json$Decode$Exploration$dict($author$project$Helpers$decodeUnixTimestamp),
																													$elm$core$Dict$empty,
																													A4(
																														$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																														'updatedAt',
																														$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Helpers$decodeUnixTimestamp),
																														$elm$core$Maybe$Nothing,
																														A4(
																															$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																															'doneAt',
																															$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Helpers$decodeUnixTimestamp),
																															$elm$core$Maybe$Nothing,
																															A3(
																																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																																'createdAt',
																																$author$project$Helpers$decodeUnixTimestamp,
																																A4(
																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																	'masterRank',
																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$float,
																																	0,
																																	A4(
																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																		'recurringTaskId',
																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																		$elm$core$Maybe$Nothing,
																																		A4(
																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																			'pinID',
																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																			$elm$core$Maybe$Nothing,
																																			A4(
																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																				'taskTime',
																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$timeOfDayDecoder),
																																				$elm$core$Maybe$Nothing,
																																				A4(
																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																					'times',
																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Helpers$decodeUnixTimestamp),
																																					_List_Nil,
																																					A4(
																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																						'db',
																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																						'',
																																						A4(
																																							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																							'endDate',
																																							$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder),
																																							$elm$core$Maybe$Nothing,
																																							A4(
																																								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																								'startDate',
																																								$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder),
																																								$elm$core$Maybe$Nothing,
																																								A4(
																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																									'timeZoneOffset',
																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$int),
																																									$elm$core$Maybe$Nothing,
																																									A4(
																																										$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																										'permaSnoozeTime',
																																										$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$timeOfDayDecoder),
																																										$elm$core$Maybe$Nothing,
																																										A4(
																																											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																											'itemSnoozeTime',
																																											$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Helpers$decodeUnixTimestamp),
																																											$elm$core$Maybe$Nothing,
																																											A4(
																																												$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																												'reviewDate',
																																												$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder),
																																												$elm$core$Maybe$Nothing,
																																												A4(
																																													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																													'backburner',
																																													$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																																													false,
																																													A4(
																																														$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																														'rewardId',
																																														$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																														$elm$core$Maybe$Nothing,
																																														A4(
																																															$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																															'rewardPoints',
																																															$zwilias$json_decode_exploration$Json$Decode$Exploration$float,
																																															0,
																																															A4(
																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																'plannedMonth',
																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$monthDecoder),
																																																$elm$core$Maybe$Nothing,
																																																A4(
																																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																	'plannedWeek',
																																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder),
																																																	$elm$core$Maybe$Nothing,
																																																	A4(
																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																		'isFrogged',
																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																			_List_fromArray(
																																																				[
																																																					A3(
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																																																					false,
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(0)),
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$int
																																																				])),
																																																		0,
																																																		A4(
																																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																			'isStarred',
																																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																				_List_fromArray(
																																																					[
																																																						A3(
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																																																						false,
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(0)),
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$int
																																																					])),
																																																			0,
																																																			A4(
																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																				'isReward',
																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																																																				false,
																																																				A4(
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																					'timeEstimate',
																																																					$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Helpers$decodeDuration),
																																																					$elm$core$Maybe$Nothing,
																																																					A4(
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																						'dueDate',
																																																						$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																							_List_fromArray(
																																																								[
																																																									A3(
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																									'',
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$core$Maybe$Nothing)),
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder)
																																																								])),
																																																						$elm$core$Maybe$Nothing,
																																																						A4(
																																																							$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																							'note',
																																																							$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																																							$elm$core$Maybe$Nothing,
																																																							A4(
																																																								$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																								'timeBlockSection',
																																																								$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																																								$elm$core$Maybe$Nothing,
																																																								A4(
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																									'customSection',
																																																									$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																																									$elm$core$Maybe$Nothing,
																																																									A4(
																																																										$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																										'bonusSection',
																																																										$author$project$Integrations$Marvin$MarvinItem$essentialOrBonusDecoder,
																																																										$author$project$Integrations$Marvin$MarvinItem$Essential,
																																																										A4(
																																																											$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																											'dailySection',
																																																											$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																																											$elm$core$Maybe$Nothing,
																																																											A4(
																																																												$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																												'rank',
																																																												$zwilias$json_decode_exploration$Json$Decode$Exploration$int,
																																																												0,
																																																												A4(
																																																													$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																													'firstScheduled',
																																																													$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																														_List_fromArray(
																																																															[
																																																																A3(
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																'unassigned',
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$core$Maybe$Nothing)),
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder)
																																																															])),
																																																													$elm$core$Maybe$Nothing,
																																																													A4(
																																																														$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																														'labelIds',
																																																														$zwilias$json_decode_exploration$Json$Decode$Exploration$list($zwilias$json_decode_exploration$Json$Decode$Exploration$string),
																																																														_List_Nil,
																																																														A4(
																																																															$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																															'parentId',
																																																															$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																																_List_fromArray(
																																																																	[
																																																																		A3(
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																		'unassigned',
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$core$Maybe$Nothing)),
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($zwilias$json_decode_exploration$Json$Decode$Exploration$string)
																																																																	])),
																																																															$elm$core$Maybe$Nothing,
																																																															A3(
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																																																																'title',
																																																																$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																A4(
																																																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																																	'day',
																																																																	$zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
																																																																		_List_fromArray(
																																																																			[
																																																																				A3(
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$check,
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																				'unassigned',
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$core$Maybe$Nothing)),
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$nullable($author$project$Integrations$Marvin$MarvinItem$calendarDateDecoder)
																																																																			])),
																																																																	$elm$core$Maybe$Nothing,
																																																																	A4(
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																																		'done',
																																																																		$zwilias$json_decode_exploration$Json$Decode$Exploration$bool,
																																																																		false,
																																																																		A4(
																																																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$optional,
																																																																			'_rev',
																																																																			$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																			'unknown',
																																																																			A3(
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$Pipeline$required,
																																																																				'_id',
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$string,
																																																																				$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($author$project$Integrations$Marvin$MarvinItem$MarvinItem)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
var $author$project$Integrations$Marvin$getTodayItems = function (secret) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$emptyBody,
			expect: A2(
				$elm$http$Http$expectJson,
				$author$project$Integrations$Marvin$GotItems,
				$author$project$Helpers$toClassicLoose(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Integrations$Marvin$MarvinItem$decodeMarvinItem))),
			headers: _List_fromArray(
				[
					A2($elm$http$Http$header, 'X-API-Token', secret)
				]),
			method: 'GET',
			timeout: $elm$core$Maybe$Just(10000),
			tracker: $elm$core$Maybe$Nothing,
			url: $author$project$Integrations$Marvin$marvinEndpointURL('todayItems')
		});
};
var $author$project$Integrations$Marvin$GotTrackedItem = function (a) {
	return {$: 'GotTrackedItem', a: a};
};
var $author$project$Integrations$Marvin$getTrackedItem = function (secret) {
	return $elm$http$Http$request(
		{
			body: $elm$http$Http$emptyBody,
			expect: A2(
				$elm$http$Http$expectJson,
				$author$project$Integrations$Marvin$GotTrackedItem,
				$author$project$Helpers$toClassicLoose(
					A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$at,
						_List_fromArray(
							['_id']),
						$zwilias$json_decode_exploration$Json$Decode$Exploration$string))),
			headers: _List_fromArray(
				[
					A2($elm$http$Http$header, 'X-API-Token', secret)
				]),
			method: 'GET',
			timeout: $elm$core$Maybe$Just(5000),
			tracker: $elm$core$Maybe$Nothing,
			url: $author$project$Integrations$Marvin$marvinEndpointURL('trackedItem')
		});
};
var $author$project$Replicated$Reducer$RepDict$update = F3(
	function (key, updater, repDict) {
		var record = repDict.a;
		var oldValueMaybe = A2($author$project$Replicated$Reducer$RepDict$get, key, repDict);
		var updatedEntry = function () {
			var _v0 = updater(oldValueMaybe);
			if (_v0.$ === 'Just') {
				var newValue = _v0.a;
				return A2($author$project$Replicated$Reducer$RepDict$Present, key, newValue);
			} else {
				return $author$project$Replicated$Reducer$RepDict$Cleared(key);
			}
		}();
		var newMemberAsObjectChange = function (frameIndex) {
			return A2(
				record.memberAdder,
				A2($author$project$Replicated$Change$Location$nestSingle, frameIndex, 'update'),
				updatedEntry);
		};
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: _List_fromArray(
						[
							newMemberAsObjectChange(frameIndex)
						]),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$Activity$Activity$setExternalID = F3(
	function (key, value, act) {
		if (act.$ === 'BuiltIn') {
			var builtInSkel = act.b;
			return A3(
				$author$project$Replicated$Reducer$RepDict$update,
				key,
				function (_v1) {
					return $elm$core$Maybe$Just(value);
				},
				builtInSkel.externalIDs);
		} else {
			var customSkel = act.b;
			return A3(
				$author$project$Replicated$Reducer$RepDict$update,
				key,
				function (_v2) {
					return $elm$core$Maybe$Just(value);
				},
				customSkel.externalIDs);
		}
	});
var $author$project$Integrations$Marvin$MarvinItem$projectToDocketActivity = F2(
	function (activities, marvinCategory) {
		var nameMatch = function (act) {
			return A2(
				$elm$core$List$member,
				marvinCategory.title,
				$author$project$Activity$Activity$getNames(act));
		};
		var matchingActivities = A2(
			$elm$core$List$filter,
			nameMatch,
			$author$project$Activity$Activity$allUnhidden(activities));
		var activityChanges = function () {
			var _v0 = $elm$core$List$head(matchingActivities);
			if (_v0.$ === 'Just') {
				var activity = _v0.a;
				return _List_fromArray(
					[
						A3($author$project$Activity$Activity$setExternalID, 'marvinCategory', marvinCategory.id, activity)
					]);
			} else {
				return _List_Nil;
			}
		}();
		return activityChanges;
	});
var $author$project$Replicated$Reducer$RepDb$addNew = F2(
	function (newMemberCreator, _v0) {
		var record = _v0.a;
		var newMember = function (index) {
			return newMemberCreator(
				A2(
					$author$project$Replicated$Change$Context,
					index,
					$author$project$Replicated$Change$becomeInstantParent(record.pointer)));
		};
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: _List_fromArray(
						[
							record.memberAdder(
							newMember(frameIndex))
						]),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$Replicated$Change$getPointerObjectID = function (pointer) {
	if (pointer.$ === 'PlaceholderPointer') {
		return $elm$core$Maybe$Nothing;
	} else {
		var existingID = pointer.a;
		return $elm$core$Maybe$Just(existingID.object);
	}
};
var $author$project$Replicated$Reducer$RepList$attachmentPointHelper = F2(
	function (containerPointer, insertionPoint) {
		switch (insertionPoint.$) {
			case 'Last':
				return $elm$core$Maybe$Nothing;
			case 'After':
				var opID = insertionPoint.a.a;
				return $elm$core$Maybe$Just(opID);
			default:
				return $author$project$Replicated$Change$getPointerObjectID(containerPointer);
		}
	});
var $author$project$Replicated$Reducer$RepList$append = F3(
	function (insertionPoint, newItems, _v0) {
		var record = _v0.a;
		var newItemToObjectChange = F3(
			function (frameIndex, newIndex, newItem) {
				return A3(
					record.memberAdder,
					A3($author$project$Replicated$Change$Location$nest, frameIndex, 'append', newIndex),
					newItem,
					A2($author$project$Replicated$Reducer$RepList$attachmentPointHelper, record.pointer, insertionPoint));
			});
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: A2(
						$elm$core$List$indexedMap,
						newItemToObjectChange(frameIndex),
						newItems),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$Replicated$Reducer$RepDict$bulkInsert = F2(
	function (newItems, _v0) {
		var record = _v0.a;
		var newItemToObjectChange = F3(
			function (frameIndex, myIndex, _v1) {
				var newKey = _v1.a;
				var newValue = _v1.b;
				return A2(
					record.memberAdder,
					A3($author$project$Replicated$Change$Location$nest, frameIndex, 'bulkInsert', myIndex),
					A2($author$project$Replicated$Reducer$RepDict$Present, newKey, newValue));
			});
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: A2(
						$elm$core$List$indexedMap,
						newItemToObjectChange(frameIndex),
						newItems),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$Activity$Activity$getExternalID = F2(
	function (key, act) {
		if (act.$ === 'BuiltIn') {
			var builtInSkel = act.b;
			return A2($author$project$Replicated$Reducer$RepDict$get, key, builtInSkel.externalIDs);
		} else {
			var customSkel = act.b;
			return A2($author$project$Replicated$Reducer$RepDict$get, key, customSkel.externalIDs);
		}
	});
var $author$project$Integrations$Marvin$MarvinItem$determineClassActivity = F2(
	function (marvinItem, activities) {
		var _v0 = _Utils_Tuple2(marvinItem.parentId, marvinItem.labelIds);
		if ((_v0.a.$ === 'Just') && (!_v0.b.b)) {
			var someParent = _v0.a.a;
			var pairActivityIDWithMaybeMarvinID = function (activity) {
				return _Utils_Tuple2(
					$author$project$Activity$Activity$getID(activity),
					A2($author$project$Activity$Activity$getExternalID, 'marvinCategory', activity));
			};
			var activitiesWithMarvinCategories = A2(
				$elm$core$List$map,
				pairActivityIDWithMaybeMarvinID,
				$author$project$Activity$Activity$allUnhidden(activities));
			var matchingActivities = A2(
				$elm$core$List$filterMap,
				function (_v1) {
					var id = _v1.a;
					var actCat = _v1.b;
					return _Utils_eq(
						A2($elm$core$Maybe$withDefault, 'nope', actCat),
						someParent) ? $elm$core$Maybe$Just(id) : $elm$core$Maybe$Nothing;
				},
				activitiesWithMarvinCategories);
			return $elm$core$List$head(matchingActivities);
		} else {
			var labels = _v0.b;
			var pairActivityIDWithMaybeMarvinID = function (activity) {
				return _Utils_Tuple2(
					$author$project$Activity$Activity$getID(activity),
					A2($author$project$Activity$Activity$getExternalID, 'marvinLabel', activity));
			};
			var activitiesWithMarvinLabels = A2(
				$elm$core$List$map,
				pairActivityIDWithMaybeMarvinID,
				$author$project$Activity$Activity$allUnhidden(activities));
			var matchingActivities = A2(
				$elm$core$List$filterMap,
				function (_v2) {
					var id = _v2.a;
					var associatedLabelMaybe = _v2.b;
					if (associatedLabelMaybe.$ === 'Just') {
						var associatedLabel = associatedLabelMaybe.a;
						return A2($elm$core$List$member, associatedLabel, labels) ? $elm$core$Maybe$Just(id) : $elm$core$Maybe$Nothing;
					} else {
						return $elm$core$Maybe$Nothing;
					}
				},
				activitiesWithMarvinLabels);
			return $elm$core$List$head(matchingActivities);
		}
	});
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var $author$project$Integrations$Marvin$MarvinItem$encodeEssentialOrBonus = function (essentialOrBonus) {
	if (essentialOrBonus.$ === 'Essential') {
		return $elm$json$Json$Encode$string('Essential');
	} else {
		return $elm$json$Json$Encode$string('Bonus');
	}
};
var $author$project$SmartTime$Moment$toElmInt = function (givenMoment) {
	return A3($author$project$SmartTime$Moment$toInt, givenMoment, $author$project$SmartTime$Moment$UTC, $author$project$SmartTime$Moment$unixEpoch);
};
var $author$project$Helpers$encodeUnixTimestamp = function (dur) {
	return $elm$json$Json$Encode$int(
		$author$project$SmartTime$Moment$toElmInt(dur));
};
var $author$project$SmartTime$Human$Clock$endOfDay = $author$project$SmartTime$Duration$aDay;
var $author$project$Replicated$Reducer$RepList$insert = F3(
	function (insertionPoint, newItem, _v0) {
		var repSetRecord = _v0.a;
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: _List_fromArray(
						[
							A3(
							repSetRecord.memberAdder,
							A2($author$project$Replicated$Change$Location$nestSingle, frameIndex, 'insert'),
							newItem,
							A2($author$project$Replicated$Reducer$RepList$attachmentPointHelper, repSetRecord.pointer, insertionPoint))
						]),
					target: repSetRecord.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$Replicated$Codec$newWithChanges = F3(
	function (_v0, context, changer) {
		var codecDetails = _v0.a;
		return codecDetails.nodePlaceholder(
			{
				parent: $author$project$Replicated$Change$getContextParent(context),
				position: A2(
					$author$project$Replicated$Change$Location$nestSingle,
					$author$project$Replicated$Change$getContextLocation(context),
					'newWC'),
				seed: changer
			});
	});
var $author$project$Replicated$Change$reuseContext = F2(
	function (uniqueString, _v0) {
		var location = _v0.a;
		var parent = _v0.b;
		return A2(
			$author$project$Replicated$Change$Context,
			A2($author$project$Replicated$Change$Location$nestSingle, location, uniqueString),
			parent);
	});
var $author$project$Task$Entry$initWithClass = F2(
	function (actionSkelReg, entryListParent) {
		var taskClassChildrenChanger = function (newChildren) {
			return _List_fromArray(
				[
					A3(
					$author$project$Replicated$Reducer$RepList$insert,
					$author$project$Replicated$Reducer$RepList$Last,
					$author$project$Task$Entry$ActionIsHere(actionSkelReg),
					newChildren)
				]);
		};
		var parentPropertiesChanger = function (newParentProperties) {
			return _List_fromArray(
				[
					$author$project$Replicated$Reducer$Register$latest(newParentProperties).title.set(
					$elm$core$Maybe$Just('Entry title'))
				]);
		};
		var assignableChanger = function (newAssignable) {
			return taskClassChildrenChanger(
				$author$project$Replicated$Reducer$Register$latest(newAssignable).children);
		};
		return $author$project$Task$Entry$AssignableIsHere(
			A3(
				$author$project$Replicated$Codec$newWithChanges,
				$author$project$Task$Entry$assignableCodec,
				A2($author$project$Replicated$Change$reuseContext, 'AssignableIsHere', entryListParent),
				assignableChanger));
	});
var $author$project$Replicated$Codec$seededNew = F3(
	function (_v0, context, seed) {
		var codecDetails = _v0.a;
		return codecDetails.nodePlaceholder(
			{
				parent: $author$project$Replicated$Change$getContextParent(context),
				position: A2(
					$author$project$Replicated$Change$Location$nestSingle,
					$author$project$Replicated$Change$getContextLocation(context),
					'sNew'),
				seed: seed
			});
	});
var $author$project$Task$AssignedAction$initWithClassAndChanges = F3(
	function (actionClassID, changer, context) {
		return A3(
			$author$project$Replicated$Codec$seededNew,
			$author$project$Task$AssignedAction$codec,
			context,
			_Utils_Tuple2(actionClassID, changer));
	});
var $author$project$Replicated$Reducer$RepList$insertNew = F3(
	function (insertionPoint, newItemCreators, _v0) {
		var record = _v0.a;
		var refMaybe = A2($author$project$Replicated$Reducer$RepList$attachmentPointHelper, record.pointer, insertionPoint);
		var newItem = F3(
			function (frameIndex, index, creator) {
				return creator(
					A2(
						$author$project$Replicated$Change$Context,
						A3($author$project$Replicated$Change$Location$nest, frameIndex, 'repListInsertNew', index),
						$author$project$Replicated$Change$becomeInstantParent(record.pointer)));
			});
		var newItems = function (frameIndex) {
			return A2(
				$elm$core$List$indexedMap,
				newItem(frameIndex),
				newItemCreators);
		};
		var memberToObjectChange = F2(
			function (frameIndex, item) {
				return A3(
					record.memberAdder,
					A2($author$project$Replicated$Change$Location$nestSingle, frameIndex, 'insertNew'),
					item,
					refMaybe);
			});
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: A2(
						$elm$core$List$map,
						memberToObjectChange(frameIndex),
						newItems(frameIndex)),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$SmartTime$Duration$isPositive = function (_v0) {
	var _int = _v0.a;
	return _int > 0;
};
var $author$project$Replicated$Codec$seededNewWithChanges = F4(
	function (_v0, context, seed, changer) {
		var codecDetails = _v0.a;
		return codecDetails.nodePlaceholder(
			{
				parent: $author$project$Replicated$Change$getContextParent(context),
				position: A2(
					$author$project$Replicated$Change$Location$nestSingle,
					$author$project$Replicated$Change$getContextLocation(context),
					'sNewWC'),
				seed: _Utils_Tuple2(seed, changer)
			});
	});
var $author$project$Task$ActionClass$newActionClassSkel = F3(
	function (c, title, changer) {
		return A4($author$project$Replicated$Codec$seededNewWithChanges, $author$project$Task$ActionClass$codec, c, title, changer);
	});
var $author$project$Integrations$Marvin$MarvinItem$toDocketTask = F2(
	function (profile, marvinItem) {
		var plannedSessionList = function () {
			var _v4 = _Utils_Tuple2(
				A2($elm$core$Maybe$map, $author$project$SmartTime$Duration$isPositive, marvinItem.timeEstimate),
				marvinItem.timeEstimate);
			_v4$2:
			while (true) {
				if (_v4.a.$ === 'Just') {
					if (_v4.a.a) {
						if (_v4.b.$ === 'Just') {
							var plannedDuration = _v4.b.a;
							var _v5 = _Utils_Tuple2(marvinItem.taskTime, marvinItem.day);
							if (_v5.a.$ === 'Just') {
								if (_v5.b.$ === 'Just') {
									var plannedTime = _v5.a.a;
									var plannedDay = _v5.b.a;
									return $elm$core$List$singleton(
										_Utils_Tuple2(
											$author$project$SmartTime$Human$Moment$Floating(
												_Utils_Tuple2(plannedDay, plannedTime)),
											plannedDuration));
								} else {
									var _v6 = _v5.b;
									return _List_Nil;
								}
							} else {
								if (_v5.b.$ === 'Just') {
									var _v7 = _v5.a;
									var plannedDay = _v5.b.a;
									return $elm$core$List$singleton(
										_Utils_Tuple2(
											$author$project$SmartTime$Human$Moment$Floating(
												_Utils_Tuple2(plannedDay, $author$project$SmartTime$Human$Clock$endOfDay)),
											plannedDuration));
								} else {
									var _v8 = _v5.a;
									var _v9 = _v5.b;
									return _List_Nil;
								}
							}
						} else {
							break _v4$2;
						}
					} else {
						return _List_Nil;
					}
				} else {
					break _v4$2;
				}
			}
			return _List_Nil;
		}();
		var pairInstanceWithMarvinIDMaybe = function (member) {
			var _v3 = A2(
				$author$project$Replicated$Reducer$RepDict$get,
				'marvinID',
				$author$project$Replicated$Reducer$Register$latest(member.value).extra);
			if (_v3.$ === 'Just') {
				var marvinID = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(marvinID, member.id));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var pairClassWithMarvinIDMaybe = function (_class) {
			var _v2 = A2(
				$author$project$Replicated$Reducer$RepDict$get,
				'marvinGeneratorID',
				$author$project$Replicated$Reducer$Register$latest(_class._class).extra);
			if (_v2.$ === 'Just') {
				var marvinID = _v2.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(marvinID, _class.classID));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var marvinGeneratorIDMaybe = A2($elm_community$maybe_extra$Maybe$Extra$or, marvinItem.recurringTaskId, marvinItem.pinId);
		var existingInstancesWithMarvinLink = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				pairInstanceWithMarvinIDMaybe,
				$author$project$Replicated$Reducer$RepDb$members(profile.taskInstances)));
		var existingInstanceIDMaybe = A2($elm$core$Dict$get, marvinItem.id, existingInstancesWithMarvinLink);
		var existingClasses = $author$project$Task$Entry$flattenEntriesToActions(profile.taskEntries);
		var existingClassesWithMarvinLink = $elm$core$Dict$fromList(
			A2($elm$core$List$filterMap, pairClassWithMarvinIDMaybe, existingClasses));
		var derivedMarvinGeneratorID = $elm_community$list_extra$List$Extra$last(
			A2($elm$core$String$split, '_', marvinItem.id));
		var marvinGeneratorID = A2(
			$elm$core$Maybe$withDefault,
			marvinItem.id,
			A2($elm_community$maybe_extra$Maybe$Extra$or, marvinGeneratorIDMaybe, derivedMarvinGeneratorID));
		var existingClassIDMaybe = A2($elm$core$Dict$get, marvinGeneratorID, existingClassesWithMarvinLink);
		var boolAsString = function (bool) {
			return bool ? 'True' : 'False';
		};
		var addInstanceExtras = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					_Utils_Tuple2('marvinCouchdbRev', marvinItem.rev)),
					$elm$core$Maybe$Just(
					_Utils_Tuple2('marvinID', marvinItem.id)),
					A2(
					$elm$core$Maybe$map,
					function (n) {
						return _Utils_Tuple2('marvinNote', n);
					},
					marvinItem.note),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinDay',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.day),
					A2(
					$elm$core$Maybe$map,
					function (p) {
						return _Utils_Tuple2('marvinParentID', p);
					},
					marvinItem.parentId),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinFirstScheduled',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.firstScheduled),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinRank',
						$elm$core$String$fromInt(marvinItem.rank))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinLabels',
						A2($elm$core$String$join, ' ', marvinItem.labelIds))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinEssentialOrBonus',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							$author$project$Integrations$Marvin$MarvinItem$encodeEssentialOrBonus(marvinItem.bonusSection)))),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2('marvinCustomSection', d);
					},
					marvinItem.customSection),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2('marvinTimeBlockSection', d);
					},
					marvinItem.timeBlockSection),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinDueDate',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.dueDate),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinIsReward',
						boolAsString(marvinItem.isReward))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinIsStarred',
						$elm$core$String$fromInt(marvinItem.isStarred))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinIsFrogged',
						$elm$core$String$fromInt(marvinItem.isFrogged))),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2('marvinRewardID', d);
					},
					marvinItem.rewardId),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinBackburner',
						boolAsString(marvinItem.backburner))),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinReviewDate',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.reviewDate),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinItemSnoozeTime',
							$author$project$SmartTime$Human$Moment$toStandardString(d));
					},
					marvinItem.itemSnoozeTime),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinPermaSnoozeTime',
							$author$project$SmartTime$Human$Clock$toStandardString(d));
					},
					marvinItem.permaSnoozeTime),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinTimeZoneOffset',
							$elm$core$String$fromInt(d));
					},
					marvinItem.timeZoneOffset),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinStartDate',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.startDate),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinEndDate',
							$author$project$SmartTime$Human$Calendar$toStandardString(d));
					},
					marvinItem.endDate),
					$elm$core$Maybe$Just(
					_Utils_Tuple2('marvinDb', marvinItem.db)),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinTaskTime',
							$author$project$SmartTime$Human$Clock$toStandardString(d));
					},
					marvinItem.taskTime),
					A2(
					$elm$core$Maybe$map,
					function (p) {
						return _Utils_Tuple2('marvinPinID', p);
					},
					marvinItem.pinId),
					A2(
					$elm$core$Maybe$map,
					function (p) {
						return _Utils_Tuple2('marvinRecurringTaskID', p);
					},
					marvinItem.recurringTaskId),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinMasterRank',
						$elm$core$String$fromFloat(marvinItem.masterRank))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinCreatedAt',
						$author$project$SmartTime$Human$Moment$toStandardString(marvinItem.createdAt))),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'marvinDoneAt',
							$author$project$SmartTime$Human$Moment$toStandardString(d));
					},
					marvinItem.doneAt),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinFieldUpdates',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $author$project$Helpers$encodeUnixTimestamp, marvinItem.fieldUpdates)))),
					$elm$core$Maybe$Just(
					_Utils_Tuple2(
						'marvinTimes',
						A2(
							$elm$json$Json$Encode$encode,
							0,
							A2($elm$json$Json$Encode$list, $author$project$Helpers$encodeUnixTimestamp, marvinItem.times))))
				]));
		var instanceChanges = function (assignment) {
			var instance = $author$project$Replicated$Reducer$Register$latest(assignment);
			return _List_fromArray(
				[
					instance.completion.set(
					marvinItem.done ? 100 : 0),
					instance.externalDeadline.set(
					A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.dueDate)),
					instance.startBy.set(
					A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.startDate)),
					instance.finishBy.set(
					A2(
						$elm_community$maybe_extra$Maybe$Extra$or,
						A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.endDate),
						A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.day))),
					A3($author$project$Replicated$Reducer$RepList$append, $author$project$Replicated$Reducer$RepList$Last, plannedSessionList, instance.plannedSessions),
					instance.relevanceStarts.set(
					$elm_community$maybe_extra$Maybe$Extra$isJust(marvinItem.recurringTaskId) ? A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.day) : $elm$core$Maybe$Nothing),
					instance.relevanceEnds.set(
					$elm_community$maybe_extra$Maybe$Extra$isJust(marvinItem.recurringTaskId) ? A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Moment$DateOnly, marvinItem.day) : $elm$core$Maybe$Nothing),
					A2($author$project$Replicated$Reducer$RepDict$bulkInsert, addInstanceExtras, instance.extra)
				]);
		};
		var finalInstanceChanges = function () {
			var _v1 = A2(
				$elm$core$Maybe$andThen,
				function (instanceID) {
					return A2($author$project$Replicated$Reducer$RepDb$get, instanceID, profile.taskInstances);
				},
				existingInstanceIDMaybe);
			if (_v1.$ === 'Just') {
				var existingInstance = _v1.a;
				return A2(
					$elm$core$Debug$log,
					'It thinks we have an existing instance!!',
					instanceChanges(existingInstance));
			} else {
				return _List_Nil;
			}
		}();
		var addClassExtras = _List_fromArray(
			[
				_Utils_Tuple2('marvinID', marvinItem.id),
				_Utils_Tuple2('marvinGeneratorID', marvinGeneratorID)
			]);
		var classChanges = function (_class) {
			return _List_fromArray(
				[
					_class.predictedEffort.set(
					A2($elm$core$Maybe$withDefault, $author$project$SmartTime$Duration$zero, marvinItem.timeEstimate)),
					_class.importance.set(marvinItem.isStarred),
					_class.activity.set(
					A2($author$project$Integrations$Marvin$MarvinItem$determineClassActivity, marvinItem, profile.activities)),
					A2($author$project$Replicated$Reducer$RepDict$bulkInsert, addClassExtras, _class.extra)
				]);
		};
		var finalEntryAndClassChanges = function () {
			var _v0 = A2(
				$elm$core$Maybe$andThen,
				function (classID) {
					return A2($author$project$Replicated$Reducer$RepDb$get, classID, profile.taskClasses);
				},
				existingClassIDMaybe);
			if (_v0.$ === 'Just') {
				var existingClass = _v0.a;
				return A2(
					$elm$core$Debug$log,
					'it thinks we already have an existing taskClass!!',
					classChanges(
						$author$project$Replicated$Reducer$Register$latest(existingClass)));
			} else {
				var newAction = function (c) {
					var newClassChanger = function (newClass) {
						return A2(
							$elm$core$List$cons,
							A2(
								$author$project$Replicated$Reducer$RepDb$addNew,
								function (c2) {
									return A3(
										$author$project$Task$AssignedAction$initWithClassAndChanges,
										$author$project$ID$fromPointer(
											$author$project$Replicated$Reducer$Register$getPointer(newClass)),
										instanceChanges,
										A2($author$project$Replicated$Change$reuseContext, marvinItem.id, c2));
								},
								profile.taskInstances),
							classChanges(
								$author$project$Replicated$Reducer$Register$latest(newClass)));
					};
					return A3(
						$author$project$Task$ActionClass$newActionClassSkel,
						A2($author$project$Replicated$Change$reuseContext, marvinItem.id, c),
						marvinItem.title,
						newClassChanger);
				};
				var newEntry = function (c) {
					return A2(
						$author$project$Task$Entry$initWithClass,
						newAction(
							A2($author$project$Replicated$Change$reuseContext, 'action', c)),
						c);
				};
				return _List_fromArray(
					[
						A3(
						$author$project$Replicated$Reducer$RepList$insertNew,
						$author$project$Replicated$Reducer$RepList$Last,
						_List_fromArray(
							[newEntry]),
						profile.taskEntries)
					]);
			}
		}();
		return _Utils_ap(finalInstanceChanges, finalEntryAndClassChanges);
	});
var $author$project$Integrations$Marvin$MarvinItem$toDocketItem = F2(
	function (profile, marvinItem) {
		var _v0 = marvinItem.db;
		if (_v0 === 'Tasks') {
			return A2($author$project$Integrations$Marvin$MarvinItem$toDocketTask, profile, marvinItem);
		} else {
			return A2($author$project$Integrations$Marvin$MarvinItem$projectToDocketActivity, profile.activities, marvinItem);
		}
	});
var $author$project$Integrations$Marvin$importItems = F2(
	function (profile, itemList) {
		return A2(
			$elm$core$List$concatMap,
			$author$project$Integrations$Marvin$MarvinItem$toDocketItem(profile),
			itemList);
	});
var $elm$core$String$trim = _String_trim;
var $author$project$Integrations$Marvin$MarvinItem$labelToDocketActivity = F2(
	function (activities, label) {
		var nameMatch = function (activity) {
			return A2(
				$elm$core$List$member,
				label.title,
				$author$project$Activity$Activity$getNames(activity)) || A2(
				$elm$core$List$member,
				$elm$core$String$toLower(label.title),
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeL, $elm$core$String$toLower, $elm$core$String$trim),
					$author$project$Activity$Activity$getNames(activity)));
		};
		var matchingActivities = A2(
			$elm$core$List$filter,
			nameMatch,
			$author$project$Activity$Activity$allUnhidden(activities));
		var firstActivityMatch = $elm$core$List$head(matchingActivities);
		var toChanges = function () {
			if (firstActivityMatch.$ === 'Just') {
				var activity = firstActivityMatch.a;
				return _List_fromArray(
					[
						A3($author$project$Activity$Activity$setExternalID, 'marvinLabel', label.id, activity)
					]);
			} else {
				return _List_Nil;
			}
		}();
		return toChanges;
	});
var $author$project$Integrations$Marvin$importLabels = F2(
	function (profile, labels) {
		return A2(
			$elm$core$List$concatMap,
			$author$project$Integrations$Marvin$MarvinItem$labelToDocketActivity(profile.activities),
			labels);
	});
var $author$project$TimeBlock$TimeBlock$TimeBlockSeed = F4(
	function (focus, date, startTime, duration) {
		return {date: date, duration: duration, focus: focus, startTime: startTime};
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Integrations$Marvin$MarvinItem$marvinTimeBlockToDocketTimeBlock = F3(
	function (profile, assignments, marvinBlock) {
		var normalizeRegex = A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString('[\\s-_]|[^\\x20\\x2D0-9A-Z\\x5Fa-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF]'));
		var normalizeTitle = function (title) {
			return A3(
				$elm$regex$Regex$replace,
				normalizeRegex,
				function (_v3) {
					return '';
				},
				title);
		};
		var logGood = $elm$core$String$concat(
			_List_fromArray(
				[
					'Found label for time block ',
					marvinBlock.title,
					'! normalized as ',
					normalizeTitle(marvinBlock.title)
				]));
		var logBad = $elm$core$String$concat(
			_List_fromArray(
				[
					'Could not find a label for ',
					marvinBlock.title,
					', normalized as ',
					normalizeTitle(marvinBlock.title)
				]));
		var labelMaybe = A2(
			$elm$core$Dict$get,
			normalizeTitle(marvinBlock.title),
			assignments);
		var createActivityLookupEntry = function (activity) {
			var _v2 = A2($author$project$Activity$Activity$getExternalID, 'marvinLabel', activity);
			if (_v2.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var marvinLabelID = _v2.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(
						marvinLabelID,
						$author$project$Activity$Activity$getID(activity)));
			}
		};
		var buildWithTag = F2(
			function (tag, context) {
				return A3(
					$author$project$Replicated$Codec$seededNew,
					$author$project$TimeBlock$TimeBlock$codec,
					context,
					A4(
						$author$project$TimeBlock$TimeBlock$TimeBlockSeed,
						$author$project$TimeBlock$TimeBlock$Tag(tag),
						marvinBlock.date,
						marvinBlock.time,
						marvinBlock.duration));
			});
		var buildWithActivity = F2(
			function (activityFound, context) {
				return A3(
					$author$project$Replicated$Codec$seededNew,
					$author$project$TimeBlock$TimeBlock$codec,
					context,
					A4(
						$author$project$TimeBlock$TimeBlock$TimeBlockSeed,
						$author$project$TimeBlock$TimeBlock$Activity(activityFound),
						marvinBlock.date,
						marvinBlock.time,
						marvinBlock.duration));
			});
		var activityLookup = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				createActivityLookupEntry,
				$author$project$Activity$Activity$allUnhidden(profile.activities)));
		if (labelMaybe.$ === 'Nothing') {
			return _List_Nil;
		} else {
			var foundAssignment = labelMaybe.a;
			var _v1 = A2($elm$core$Dict$get, foundAssignment, activityLookup);
			if (_v1.$ === 'Nothing') {
				return _List_fromArray(
					[
						A3(
						$author$project$Replicated$Reducer$RepList$insertNew,
						$author$project$Replicated$Reducer$RepList$Last,
						_List_fromArray(
							[
								buildWithTag(foundAssignment)
							]),
						profile.timeBlocks)
					]);
			} else {
				var foundActivity = _v1.a;
				return _List_fromArray(
					[
						A3(
						$author$project$Replicated$Reducer$RepList$insertNew,
						$author$project$Replicated$Reducer$RepList$Last,
						_List_fromArray(
							[
								buildWithActivity(foundActivity)
							]),
						profile.timeBlocks)
					]);
			}
		}
	});
var $author$project$Integrations$Marvin$importTimeBlocks = F3(
	function (profile, assignments, marvinBlocks) {
		return A2(
			$elm$core$List$concatMap,
			A2($author$project$Integrations$Marvin$MarvinItem$marvinTimeBlockToDocketTimeBlock, profile, assignments),
			marvinBlocks);
	});
var $author$project$Replicated$Change$none = $author$project$Replicated$Change$Frame(
	{changes: $author$project$Replicated$Change$emptyChangeSet, description: 'Empty Frame'});
var $author$project$Activity$Timeline$currentActivityID = function (wrappedTimeline) {
	var timeline = wrappedTimeline.a;
	var _v0 = timeline.current.get;
	if (_v0.$ === 'Just') {
		var currentSession = _v0.a;
		return currentSession.activity;
	} else {
		return $author$project$Activity$Activity$unknown;
	}
};
var $author$project$Profile$currentActivityID = function (profile) {
	return $author$project$Activity$Timeline$currentActivityID(profile.timeline);
};
var $author$project$Refocus$Distraction = function (a) {
	return {$: 'Distraction', a: a};
};
var $author$project$Refocus$Excused = function (a) {
	return {$: 'Excused', a: a};
};
var $author$project$Refocus$Free = {$: 'Free'};
var $author$project$Refocus$NotExcused = {$: 'NotExcused'};
var $author$project$Refocus$Traction = function (a) {
	return {$: 'Traction', a: a};
};
var $author$project$SmartTime$Duration$combine = function (durationList) {
	return A3(
		$elm$core$List$foldl,
		$author$project$SmartTime$Duration$add,
		$author$project$SmartTime$Duration$Duration(0),
		durationList);
};
var $author$project$SmartTime$Period$length = function (_v0) {
	var startMoment = _v0.a;
	var endMoment = _v0.b;
	return A2($author$project$SmartTime$Moment$difference, startMoment, endMoment);
};
var $author$project$SmartTime$Period$fromPair = function (_v0) {
	var moment1 = _v0.a;
	var moment2 = _v0.b;
	return _Utils_eq(
		A2($author$project$SmartTime$Moment$compare, moment1, moment2),
		$author$project$SmartTime$Moment$Later) ? A2($author$project$SmartTime$Period$Period, moment2, moment1) : A2($author$project$SmartTime$Period$Period, moment1, moment2);
};
var $author$project$Activity$Timeline$currentAsPeriod = F2(
	function (now, wrappedTimeline) {
		var timeline = wrappedTimeline.a;
		var currentSessionStarted = A2(
			$elm$core$Maybe$withDefault,
			now,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.start;
				},
				timeline.current.get));
		return $author$project$SmartTime$Period$fromPair(
			_Utils_Tuple2(currentSessionStarted, now));
	});
var $author$project$Activity$Session$getPeriod = function (_v0) {
	var session = _v0.a;
	return $author$project$SmartTime$Period$fromPair(
		_Utils_Tuple2(session.start, session.end));
};
var $author$project$Activity$Session$listAsPeriods = function (sessionList) {
	return A2($elm$core$List$map, $author$project$Activity$Session$getPeriod, sessionList);
};
var $author$project$Activity$Session$activityMatches = F2(
	function (givenActivity, _v0) {
		var givenSession = _v0.a;
		return _Utils_eq(givenActivity, givenSession.activity);
	});
var $author$project$SmartTime$Period$end = function (_v0) {
	var endMoment = _v0.b;
	return endMoment;
};
var $author$project$Activity$Session$getActivityID = function (_v0) {
	var activity = _v0.a.activity;
	return activity;
};
var $author$project$Activity$Session$getEnd = function (_v0) {
	var end = _v0.a.end;
	return end;
};
var $author$project$Activity$Session$getInstanceID = function (_v0) {
	var action = _v0.a.action;
	return action;
};
var $author$project$Activity$Session$getStart = function (_v0) {
	var start = _v0.a.start;
	return start;
};
var $author$project$SmartTime$Period$isWithin = F2(
	function (_v0, testMoment) {
		var startMoment = _v0.a;
		var endMoment = _v0.b;
		return (!_Utils_eq(
			A2($author$project$SmartTime$Moment$compare, testMoment, startMoment),
			$author$project$SmartTime$Moment$Earlier)) && (!_Utils_eq(
			A2($author$project$SmartTime$Moment$compare, testMoment, endMoment),
			$author$project$SmartTime$Moment$Later));
	});
var $author$project$Activity$Session$new = function (sessionDetails) {
	return $author$project$Activity$Session$Session(sessionDetails);
};
var $author$project$SmartTime$Period$start = function (_v0) {
	var startMoment = _v0.a;
	return startMoment;
};
var $author$project$Activity$Timeline$limitedHistory = F2(
	function (_v0, filterPeriod) {
		var timeline = _v0.a;
		var withinFilter = function (givenMoment) {
			return A2($author$project$SmartTime$Period$isWithin, filterPeriod, givenMoment);
		};
		var keepWithinLimits = function (sesh) {
			var _v1 = _Utils_Tuple2(
				withinFilter(
					$author$project$Activity$Session$getStart(sesh)),
				withinFilter(
					$author$project$Activity$Session$getEnd(sesh)));
			if (_v1.a) {
				if (_v1.b) {
					return $elm$core$Maybe$Just(sesh);
				} else {
					return $elm$core$Maybe$Just(
						$author$project$Activity$Session$new(
							{
								action: $author$project$Activity$Session$getInstanceID(sesh),
								activity: $author$project$Activity$Session$getActivityID(sesh),
								end: $author$project$SmartTime$Period$end(filterPeriod),
								start: $author$project$Activity$Session$getStart(sesh)
							}));
				}
			} else {
				if (_v1.b) {
					return $elm$core$Maybe$Just(
						$author$project$Activity$Session$new(
							{
								action: $author$project$Activity$Session$getInstanceID(sesh),
								activity: $author$project$Activity$Session$getActivityID(sesh),
								end: $author$project$Activity$Session$getEnd(sesh),
								start: $author$project$SmartTime$Period$start(filterPeriod)
							}));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		};
		return A2(
			$elm$core$List$filterMap,
			keepWithinLimits,
			$author$project$Replicated$Reducer$RepList$listValues(timeline.history));
	});
var $author$project$Activity$Timeline$sessionsOfActivity = F3(
	function (filterPeriod, wrappedTimeline, activityId) {
		var timeline = wrappedTimeline.a;
		return A2(
			$elm$core$List$filter,
			$author$project$Activity$Session$activityMatches(activityId),
			A2($author$project$Activity$Timeline$limitedHistory, wrappedTimeline, filterPeriod));
	});
var $author$project$Activity$Timeline$periodsOfActivity = F3(
	function (filterPeriod, wrappedTimeline, activityID) {
		var timeline = wrappedTimeline.a;
		return $author$project$Activity$Session$listAsPeriods(
			A3($author$project$Activity$Timeline$sessionsOfActivity, filterPeriod, wrappedTimeline, activityID));
	});
var $author$project$Activity$Timeline$periodsOfActivityLive = F4(
	function (filterPeriod, now, wrappedTimeline, activityID) {
		var timeline = wrappedTimeline.a;
		var historyPeriods = A3($author$project$Activity$Timeline$periodsOfActivity, filterPeriod, wrappedTimeline, activityID);
		return _Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.activity;
				},
				timeline.current.get),
			$elm$core$Maybe$Just(activityID)) ? A2(
			$elm$core$List$cons,
			A2($author$project$Activity$Timeline$currentAsPeriod, now, wrappedTimeline),
			historyPeriods) : historyPeriods;
	});
var $author$project$Activity$Timeline$activityTotalDurationLive = F4(
	function (filterPeriod, now, wrappedTimeline, activityID) {
		var timeline = wrappedTimeline.a;
		return $author$project$SmartTime$Duration$combine(
			A2(
				$elm$core$List$map,
				$author$project$SmartTime$Period$length,
				A4($author$project$Activity$Timeline$periodsOfActivityLive, filterPeriod, now, wrappedTimeline, activityID)));
	});
var $author$project$SmartTime$Period$between = F2(
	function (moment1, moment2) {
		return _Utils_eq(
			A2($author$project$SmartTime$Moment$compare, moment1, moment2),
			$author$project$SmartTime$Moment$Later) ? A2($author$project$SmartTime$Period$Period, moment2, moment1) : A2($author$project$SmartTime$Period$Period, moment1, moment2);
	});
var $author$project$Activity$Activity$getExcusable = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		var builtInSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).excusable,
			builtInSkel.excusable.get);
	} else {
		var template = act.a;
		var customSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).excusable,
			customSkel.excusable.get);
	}
};
var $author$project$Activity$Activity$excusableRatio = function (act) {
	var _v0 = $author$project$Activity$Activity$getExcusable(act);
	switch (_v0.$) {
		case 'NeverExcused':
			return _Utils_Tuple2(
				$author$project$SmartTime$Human$Duration$Minutes(0),
				$author$project$SmartTime$Human$Duration$Minutes(0));
		case 'TemporarilyExcused':
			var durationPerPeriod = _v0.a;
			return durationPerPeriod;
		default:
			return _Utils_Tuple2(
				$author$project$SmartTime$Human$Duration$Hours(24),
				$author$project$SmartTime$Human$Duration$Hours(24));
	}
};
var $author$project$Activity$Timeline$excusableLimit = function (activity) {
	return $author$project$SmartTime$Human$Duration$dur(
		$author$project$Activity$Activity$excusableRatio(activity).a);
};
var $author$project$SmartTime$Moment$past = F2(
	function (_v0, duration) {
		var time = _v0.a;
		return $author$project$SmartTime$Moment$Moment(
			A2($author$project$SmartTime$Duration$subtract, time, duration));
	});
var $author$project$SmartTime$Period$fromEnd = F2(
	function (endMoment, duration) {
		return A2(
			$author$project$SmartTime$Period$between,
			A2($author$project$SmartTime$Moment$past, endMoment, duration),
			endMoment);
	});
var $author$project$Activity$Timeline$excusedUsage = F3(
	function (wrappedTimeline, now, _v0) {
		var timeline = wrappedTimeline.a;
		var activityID = _v0.a;
		var activity = _v0.b;
		return A4(
			$author$project$Activity$Timeline$activityTotalDurationLive,
			A2(
				$author$project$SmartTime$Period$fromEnd,
				now,
				$author$project$SmartTime$Human$Duration$dur(
					$author$project$Activity$Activity$excusableRatio(activity).a)),
			now,
			wrappedTimeline,
			activityID);
	});
var $author$project$Activity$Timeline$excusedLeft = F3(
	function (wrappedTimeline, now, _v0) {
		var timeline = wrappedTimeline.a;
		var activityID = _v0.a;
		var activity = _v0.b;
		return A2(
			$author$project$SmartTime$Duration$difference,
			$author$project$Activity$Timeline$excusableLimit(activity),
			A3(
				$author$project$Activity$Timeline$excusedUsage,
				wrappedTimeline,
				now,
				_Utils_Tuple2(activityID, activity)));
	});
var $author$project$SmartTime$Moment$future = F2(
	function (_v0, duration) {
		var time = _v0.a;
		return $author$project$SmartTime$Moment$Moment(
			A2($author$project$SmartTime$Duration$add, time, duration));
	});
var $author$project$Profile$getActivityByID = F2(
	function (profile, activityID) {
		return A2($author$project$Activity$Activity$getByID, activityID, profile.activities);
	});
var $author$project$Refocus$Gentle = {$: 'Gentle'};
var $author$project$Task$Progress$getPortion = function (_v0) {
	var part = _v0.a;
	return part;
};
var $author$project$Task$Progress$isMax = function (progress) {
	return _Utils_eq(
		$author$project$Task$Progress$getPortion(progress),
		$author$project$Task$Progress$getWhole(progress));
};
var $author$project$Task$AssignedAction$completed = function (instance) {
	return $author$project$Task$Progress$isMax(
		_Utils_Tuple2(
			$author$project$Replicated$Reducer$Register$latest(instance.instance).completion.get,
			$author$project$Replicated$Reducer$Register$latest(instance._class).completionUnits.get));
};
var $author$project$SmartTime$Human$Calendar$compareLateness = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return A2($elm$core$Basics$compare, a, b);
	});
var $author$project$SmartTime$Moment$compareLateness = F2(
	function (_v0, _v1) {
		var time1 = _v0.a;
		var time2 = _v1.a;
		return A2(
			$elm$core$Basics$compare,
			$author$project$SmartTime$Duration$inMs(time1),
			$author$project$SmartTime$Duration$inMs(time2));
	});
var $author$project$SmartTime$Human$Moment$fromFuzzyWithDefaultTime = F3(
	function (zone, defaultTime, fuzzy) {
		switch (fuzzy.$) {
			case 'DateOnly':
				var date = fuzzy.a;
				return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, date, defaultTime);
			case 'Floating':
				var _v1 = fuzzy.a;
				var date = _v1.a;
				var time = _v1.b;
				return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, date, time);
			default:
				var moment = fuzzy.a;
				return moment;
		}
	});
var $author$project$SmartTime$Human$Moment$compareFuzzyLateness = F4(
	function (zone, defaultTime, fuzzyA, fuzzyB) {
		var _v0 = _Utils_Tuple2(fuzzyA, fuzzyB);
		if ((_v0.a.$ === 'DateOnly') && (_v0.b.$ === 'DateOnly')) {
			var dateA = _v0.a.a;
			var dateB = _v0.b.a;
			return A2($author$project$SmartTime$Human$Calendar$compareLateness, dateA, dateB);
		} else {
			return A2(
				$author$project$SmartTime$Moment$compareLateness,
				A3($author$project$SmartTime$Human$Moment$fromFuzzyWithDefaultTime, zone, defaultTime, fuzzyA),
				A3($author$project$SmartTime$Human$Moment$fromFuzzyWithDefaultTime, zone, defaultTime, fuzzyB));
		}
	});
var $author$project$Task$AssignedAction$compareSoonness = F3(
	function (zone, taskA, taskB) {
		var _v0 = _Utils_Tuple2(
			$author$project$Replicated$Reducer$Register$latest(taskA.instance).externalDeadline.get,
			$author$project$Replicated$Reducer$Register$latest(taskB.instance).externalDeadline.get);
		if (_v0.a.$ === 'Just') {
			if (_v0.b.$ === 'Just') {
				var fuzzyMomentA = _v0.a.a;
				var fuzzyMomentB = _v0.b.a;
				return A4($author$project$SmartTime$Human$Moment$compareFuzzyLateness, zone, $author$project$SmartTime$Human$Clock$endOfDay, fuzzyMomentA, fuzzyMomentB);
			} else {
				var _v3 = _v0.b;
				return $elm$core$Basics$LT;
			}
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $elm$core$Basics$EQ;
			} else {
				var _v4 = _v0.a;
				return $elm$core$Basics$GT;
			}
		}
	});
var $author$project$Task$AssignedAction$deepSort = F2(
	function (compareFuncs, listToSort) {
		var deepCompare = F3(
			function (funcs, a, b) {
				deepCompare:
				while (true) {
					if (!funcs.b) {
						return $elm$core$Basics$EQ;
					} else {
						var nextCompareFunc = funcs.a;
						var laterCompareFuncs = funcs.b;
						var check = A2(nextCompareFunc, a, b);
						if (_Utils_eq(check, $elm$core$Basics$EQ)) {
							var $temp$funcs = laterCompareFuncs,
								$temp$a = a,
								$temp$b = b;
							funcs = $temp$funcs;
							a = $temp$a;
							b = $temp$b;
							continue deepCompare;
						} else {
							return check;
						}
					}
				}
			});
		return A2(
			$elm$core$List$sortWith,
			deepCompare(compareFuncs),
			listToSort);
	});
var $author$project$Task$AssignedAction$prioritize = F3(
	function (now, zone, taskList) {
		var comparePropInverted = F3(
			function (prop, a, b) {
				return A2(
					$elm$core$Basics$compare,
					prop(b),
					prop(a));
			});
		var compareProp = F3(
			function (prop, a, b) {
				return A2(
					$elm$core$Basics$compare,
					prop(a),
					prop(b));
			});
		return A2(
			$author$project$Task$AssignedAction$deepSort,
			_List_fromArray(
				[
					$author$project$Task$AssignedAction$compareSoonness(zone)
				]),
			taskList);
	});
var $author$project$Refocus$prioritizeTasks = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A3(
			$author$project$Task$AssignedAction$prioritize,
			time,
			timeZone,
			A2(
				$elm$core$List$filter,
				A2($elm$core$Basics$composeR, $author$project$Task$AssignedAction$completed, $elm$core$Basics$not),
				A2(
					$author$project$Profile$instanceListNow,
					profile,
					_Utils_Tuple2(time, timeZone))));
	});
var $author$project$Refocus$whatsImportantNow = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var prioritized = A2(
			$elm$core$List$filter,
			function (i) {
				return !_Utils_eq(
					$author$project$Replicated$Reducer$Register$latest(i._class).activity.get,
					$elm$core$Maybe$Nothing);
			},
			A2(
				$author$project$Refocus$prioritizeTasks,
				profile,
				_Utils_Tuple2(time, timeZone)));
		var topPickMaybe = $elm$core$List$head(prioritized);
		var topPickActivityMaybe = A2(
			$elm$core$Maybe$map,
			$author$project$Profile$getActivityByID(profile),
			A2($elm$core$Maybe$andThen, $author$project$Task$AssignedAction$getActivityID, topPickMaybe));
		var _v1 = _Utils_Tuple2(topPickActivityMaybe, topPickMaybe);
		if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
			var topPickActivity = _v1.a.a;
			var topPick = _v1.b.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					_Utils_Tuple2(
						topPickActivity,
						$elm$core$Maybe$Just(topPick)),
					$author$project$Refocus$Gentle));
		} else {
			var somethingelse = _v1;
			return A3($author$project$Log$logSeparate, 'top pick', somethingelse, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$SmartTime$Human$Duration$breakdownHMS = function (duration) {
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	return _List_fromArray(
		[
			$author$project$SmartTime$Human$Duration$Hours(
			$author$project$SmartTime$Duration$inWholeHours(duration)),
			$author$project$SmartTime$Human$Duration$Minutes(minutes),
			$author$project$SmartTime$Human$Duration$Seconds(seconds)
		]);
};
var $author$project$SmartTime$Human$Duration$withLetter = function (unit) {
	switch (unit.$) {
		case 'Milliseconds':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'ms';
		case 'Seconds':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 's';
		case 'Minutes':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'm';
		case 'Hours':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'h';
		default:
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'd';
	}
};
var $author$project$SmartTime$Human$Duration$singleLetterSpaced = function (humanDurationList) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			' ',
			A2($elm$core$List$map, $author$project$SmartTime$Human$Duration$withLetter, humanDurationList)));
};
var $elm_community$list_extra$List$Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$dropWhileRight = function (p) {
	return A2(
		$elm$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && $elm$core$List$isEmpty(xs)) ? _List_Nil : A2($elm$core$List$cons, x, xs);
			}),
		_List_Nil);
};
var $author$project$SmartTime$Human$Duration$trim = function (humanDurationList) {
	var isZero = function (humanDuration) {
		_v0$5:
		while (true) {
			switch (humanDuration.$) {
				case 'Days':
					if (!humanDuration.a) {
						return true;
					} else {
						break _v0$5;
					}
				case 'Hours':
					if (!humanDuration.a) {
						return true;
					} else {
						break _v0$5;
					}
				case 'Minutes':
					if (!humanDuration.a) {
						return true;
					} else {
						break _v0$5;
					}
				case 'Seconds':
					if (!humanDuration.a) {
						return true;
					} else {
						break _v0$5;
					}
				default:
					if (!humanDuration.a) {
						return true;
					} else {
						break _v0$5;
					}
			}
		}
		return false;
	};
	return A2(
		$elm_community$list_extra$List$Extra$dropWhileRight,
		isZero,
		A2($elm_community$list_extra$List$Extra$dropWhile, isZero, humanDurationList));
};
var $author$project$SmartTime$Human$Duration$trimToSmall = function (humanDurationList) {
	var trimmed = $author$project$SmartTime$Human$Duration$trim(humanDurationList);
	if ($elm$core$List$isEmpty(trimmed)) {
		var smallestUnit = $elm_community$list_extra$List$Extra$last(humanDurationList);
		var singletonList = A2($elm$core$Maybe$map, $elm$core$List$singleton, smallestUnit);
		return A2($elm$core$Maybe$withDefault, _List_Nil, singletonList);
	} else {
		return trimmed;
	}
};
var $author$project$Refocus$writeDur = function (givenDur) {
	return $author$project$SmartTime$Human$Duration$singleLetterSpaced(
		$author$project$SmartTime$Human$Duration$trimToSmall(
			$author$project$SmartTime$Human$Duration$breakdownHMS(givenDur)));
};
var $author$project$Refocus$determineNewStatus = F3(
	function (_v0, oldProfile, _v1) {
		var newActivityID = _v0.a;
		var newInstanceIDMaybe = _v0.b;
		var time = _v1.a;
		var timeZone = _v1.b;
		var oldInstanceIDMaybe = $author$project$Activity$Timeline$currentInstanceID(oldProfile.timeline);
		var oldActivityID = $author$project$Profile$currentActivityID(oldProfile);
		var oldActivity = A2($author$project$Profile$getActivityByID, oldProfile, oldActivityID);
		var newActivity = A2($author$project$Profile$getActivityByID, oldProfile, newActivityID);
		var filterPeriod = A2($author$project$SmartTime$Period$between, $author$project$SmartTime$Moment$zero, time);
		var statusDetails = {
			lastSession: $author$project$SmartTime$Period$length(
				A2($author$project$Activity$Timeline$currentAsPeriod, time, oldProfile.timeline)),
			newActivity: newActivity,
			newActivityTodayTotal: A4($author$project$Activity$Timeline$activityTotalDurationLive, filterPeriod, time, oldProfile.timeline, newActivityID),
			newInstanceMaybe: A2(
				$elm$core$Maybe$andThen,
				A2(
					$author$project$Profile$getInstanceByID,
					oldProfile,
					_Utils_Tuple2(time, timeZone)),
				newInstanceIDMaybe),
			now: time,
			oldActivity: oldActivity,
			oldInstanceMaybe: A2(
				$elm$core$Maybe$andThen,
				A2(
					$author$project$Profile$getInstanceByID,
					oldProfile,
					_Utils_Tuple2(time, timeZone)),
				oldInstanceIDMaybe),
			zone: timeZone
		};
		var allTasks = A2(
			$author$project$Profile$instanceListNow,
			oldProfile,
			_Utils_Tuple2(time, timeZone));
		var trackingTask = function () {
			if (newInstanceIDMaybe.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var instanceID = newInstanceIDMaybe.a;
				return $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.instanceID;
							},
							$elm$core$Basics$eq(instanceID)),
						allTasks));
			}
		}();
		var _v2 = A2(
			$author$project$Refocus$whatsImportantNow,
			oldProfile,
			_Utils_Tuple2(time, timeZone));
		if (_v2.$ === 'Nothing') {
			return _Utils_Tuple2(statusDetails, $author$project$Refocus$Free);
		} else {
			var _v3 = _v2.a;
			var win = _v3.a;
			var nextActivity = win.a;
			var nextInstanceMaybe = win.b;
			var urgency = _v3.b;
			var newInstanceMaybe = A2(
				$elm$core$Maybe$andThen,
				A2(
					$author$project$Profile$getInstanceByID,
					oldProfile,
					_Utils_Tuple2(time, timeZone)),
				newInstanceIDMaybe);
			var isThisTheRightNextTask = function () {
				var _v5 = _Utils_Tuple2(
					newInstanceIDMaybe,
					A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getID, nextInstanceMaybe));
				if ((_v5.a.$ === 'Just') && (_v5.b.$ === 'Just')) {
					var newInstanceID = _v5.a.a;
					var nextInstanceID = _v5.b.a;
					return _Utils_eq(newInstanceID, nextInstanceID);
				} else {
					return false;
				}
			}();
			var excusedUsage = A3(
				$author$project$Activity$Timeline$excusedUsage,
				oldProfile.timeline,
				time,
				_Utils_Tuple2(newActivityID, newActivity));
			var excusedUsageString = $author$project$Refocus$writeDur(excusedUsage);
			var excusedLeft = A3(
				$author$project$Activity$Timeline$excusedLeft,
				oldProfile.timeline,
				time,
				_Utils_Tuple2(newActivityID, newActivity));
			var _v4 = _Utils_Tuple3(
				newInstanceMaybe,
				isThisTheRightNextTask,
				_Utils_eq(nextActivity, newActivity));
			if ((_v4.a.$ === 'Just') && _v4.b) {
				var newInstance = _v4.a.a;
				var timeSpent = A4($author$project$Activity$Timeline$activityTotalDurationLive, filterPeriod, time, oldProfile.timeline, newActivityID);
				var remainingToTarget = A2(
					$author$project$SmartTime$Duration$subtract,
					$author$project$Replicated$Reducer$Register$latest(newInstance._class).predictedEffort.get,
					timeSpent);
				var maxTimeRemaining = A2(
					$author$project$SmartTime$Duration$subtract,
					$author$project$Replicated$Reducer$Register$latest(newInstance._class).maxEffort.get,
					timeSpent);
				var intendToFinishDuringThisSession = true;
				var targetIfApplicable = intendToFinishDuringThisSession ? $elm$core$Maybe$Just(
					A2($author$project$SmartTime$Moment$future, time, remainingToTarget)) : $elm$core$Maybe$Nothing;
				var tractionDetails = {
					limit: maxTimeRemaining,
					remaining: intendToFinishDuringThisSession ? maxTimeRemaining : remainingToTarget,
					spent: timeSpent,
					target: targetIfApplicable,
					until: A2($author$project$SmartTime$Moment$future, time, maxTimeRemaining),
					urgency: urgency,
					win: win
				};
				return _Utils_Tuple2(
					statusDetails,
					$author$project$Refocus$Traction(tractionDetails));
			} else {
				if ($author$project$SmartTime$Duration$isPositive(excusedLeft)) {
					var excusedDetails = {
						limit: $author$project$Activity$Timeline$excusableLimit(newActivity),
						remaining: excusedLeft,
						until: A2($author$project$SmartTime$Moment$future, statusDetails.now, excusedLeft),
						urgency: urgency,
						used: excusedUsage,
						win: win
					};
					return _Utils_Tuple2(
						statusDetails,
						$author$project$Refocus$Excused(excusedDetails));
				} else {
					var determineDistractionReason = $author$project$Refocus$NotExcused;
					var distractionDetails = {reason: determineDistractionReason, urgency: urgency, win: win};
					return _Utils_Tuple2(
						statusDetails,
						$author$project$Refocus$Distraction(distractionDetails));
				}
			}
		}
	});
var $author$project$NativeScript$Commands$ns_notify_cancel = _Platform_outgoingPort('ns_notify_cancel', $elm$core$Basics$identity);
var $author$project$NativeScript$Commands$notifyCancel = function (id) {
	return $author$project$NativeScript$Commands$ns_notify_cancel(
		$elm$json$Json$Encode$int(id));
};
var $author$project$Refocus$cancelAll = function (idList) {
	return $elm$core$Platform$Cmd$batch(
		A2($elm$core$List$map, $author$project$NativeScript$Commands$notifyCancel, idList));
};
var $author$project$Refocus$distractionReminderIDs = _List_fromArray(
	[700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711]);
var $author$project$NativeScript$Notification$Button = function (a) {
	return {$: 'Button', a: a};
};
var $author$project$NativeScript$Notification$Progress = F2(
	function (a, b) {
		return {$: 'Progress', a: a, b: b};
	});
var $author$project$Replicated$Reducer$RepList$headValue = function (_v0) {
	var repList = _v0.a;
	return A2(
		$elm$core$Maybe$map,
		function ($) {
			return $.value;
		},
		$elm$core$List$head(repList.members));
};
var $author$project$Activity$Activity$getName = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		var builtInSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			'untitled built-in activity',
			A2(
				$elm_community$maybe_extra$Maybe$Extra$or,
				$elm$core$List$head(
					$author$project$Activity$Activity$defaults(template).names),
				$author$project$Replicated$Reducer$RepList$headValue(builtInSkel.names)));
	} else {
		var template = act.a;
		var customSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			'untitled custom activity',
			A2(
				$elm_community$maybe_extra$Maybe$Extra$or,
				$elm$core$List$head(
					$author$project$Activity$Activity$defaults(template).names),
				$author$project$Replicated$Reducer$RepList$headValue(customSkel.names)));
	}
};
var $author$project$Task$AssignedAction$getTitle = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).title.get;
};
var $author$project$NativeScript$Notification$Input = function (a) {
	return {$: 'Input', a: a};
};
var $author$project$Refocus$stickyID = 42;
var $author$project$Refocus$stickyBase = function () {
	var statusChannel = {
		description: $elm$core$Maybe$Just('The current activity, task and more.'),
		group: $elm$core$Maybe$Nothing,
		id: 'activity',
		importance: $elm$core$Maybe$Just($author$project$NativeScript$Notification$High),
		led: $elm$core$Maybe$Nothing,
		name: 'Tracking Status',
		sound: $elm$core$Maybe$Nothing,
		vibrate: $elm$core$Maybe$Nothing
	};
	var defaultActions = _List_fromArray(
		[
			{
			button: $author$project$NativeScript$Notification$Button('Go'),
			id: 'start=next',
			launch: true
		},
			{
			button: $author$project$NativeScript$Notification$Input(
				{autoReplies: false, choices: _List_Nil, editable: true, placeholder: 'Quickly add a draft', title: 'Capture'}),
			id: 'addTask',
			launch: false
		},
			{
			button: $author$project$NativeScript$Notification$Button('Sync Marvin'),
			id: 'sync=marvin',
			launch: false
		}
		]);
	var blank = $author$project$NativeScript$Notification$build(statusChannel);
	return _Utils_update(
		blank,
		{
			actions: defaultActions,
			autoCancel: $elm$core$Maybe$Just(false),
			bigTextStyle: $elm$core$Maybe$Just(true),
			chronometer: $elm$core$Maybe$Just(true),
			group: $elm$core$Maybe$Just(
				$author$project$NativeScript$Notification$GroupKey('status')),
			id: $elm$core$Maybe$Just($author$project$Refocus$stickyID),
			ongoing: $elm$core$Maybe$Just(true),
			showWhen: $elm$core$Maybe$Just(true)
		});
}();
var $author$project$Refocus$summarizeFocusItem = function (_v0) {
	var winActivity = _v0.a;
	var winInstanceMaybe = _v0.b;
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$Activity$Activity$getName(winActivity),
		A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getTitle, winInstanceMaybe));
};
var $author$project$Refocus$distractionSticky = F3(
	function (status, distraction, elapsed) {
		var title = A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getTitle, status.newInstanceMaybe);
		var sessionTotal = A2($author$project$SmartTime$Duration$add, status.newActivityTodayTotal, elapsed);
		var notifTime = A2($author$project$SmartTime$Moment$future, status.now, elapsed);
		var actionsIfTaskPresent = function (instance) {
			return _List_fromArray(
				[
					{
					button: $author$project$NativeScript$Notification$Button('Stop'),
					id: 'stopTask=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				},
					{
					button: $author$project$NativeScript$Notification$Button('Complete'),
					id: 'complete=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				}
				]);
		};
		var _final = _Utils_update(
			$author$project$Refocus$stickyBase,
			{
				accentColor: $elm$core$Maybe$Just('red'),
				actions: function () {
					var _v0 = status.newInstanceMaybe;
					if (_v0.$ === 'Just') {
						var instance = _v0.a;
						return _Utils_ap(
							$author$project$Refocus$stickyBase.actions,
							actionsIfTaskPresent(instance));
					} else {
						return $author$project$Refocus$stickyBase.actions;
					}
				}(),
				at: $elm$core$Maybe$Just(notifTime),
				body: $elm$core$Maybe$Just(
					'What\'s Important Now: \n' + $author$project$Refocus$summarizeFocusItem(distraction.win)),
				progress: function () {
					var _v1 = status.newInstanceMaybe;
					if (_v1.$ === 'Just') {
						var task = _v1.a;
						return $elm$core$Maybe$Just(
							A2(
								$author$project$NativeScript$Notification$Progress,
								$author$project$Task$Progress$getPortion(
									$author$project$Task$AssignedAction$getProgress(task)),
								$author$project$Task$Progress$getWhole(
									$author$project$Task$AssignedAction$getProgress(task))));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}(),
				subtitle: $elm$core$Maybe$Just(
					'Off Task (' + ($author$project$Activity$Activity$getName(status.newActivity) + ')')),
				title: title,
				when: $elm$core$Maybe$Just(
					A2($author$project$SmartTime$Moment$past, notifTime, sessionTotal))
			});
		return _List_fromArray(
			[_final]);
	});
var $author$project$Refocus$excusedReminderIDs = _List_fromArray(
	[100]);
var $author$project$Refocus$distractionActions = _List_fromArray(
	[
		{
		button: $author$project$NativeScript$Notification$Button('Snooze'),
		id: 'SnoozeButton',
		launch: false
	},
		{
		button: $author$project$NativeScript$Notification$Button('Go'),
		id: 'LaunchButton',
		launch: true
	},
		{
		button: $author$project$NativeScript$Notification$Button('Zap'),
		id: 'ZapButton',
		launch: false
	}
	]);
var $author$project$NativeScript$Notification$CustomSound = function (a) {
	return {$: 'CustomSound', a: a};
};
var $author$project$NativeScript$Notification$Max = {$: 'Max'};
var $author$project$NativeScript$Notification$CustomVibration = function (a) {
	return {$: 'CustomVibration', a: a};
};
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Refocus$urgentVibe = function (count) {
	return $author$project$NativeScript$Notification$CustomVibration(
		A2(
			$elm$core$List$repeat,
			count,
			_Utils_Tuple2(
				$author$project$SmartTime$Duration$fromMs(100),
				$author$project$SmartTime$Duration$fromMs(100))));
};
var $author$project$Refocus$distractionChannel = function (step) {
	var channelName = function () {
		switch (step) {
			case 1:
				return 'Off Task, First Warning';
			case 2:
				return 'Off Task! Second Warning';
			case 3:
				return 'Off Task! Third Warning';
			default:
				return 'Off Task Warnings';
		}
	}();
	return {
		description: $elm$core$Maybe$Just('These reminders are meant to be-in-your-face and annoying, so you don\'t ignore them.'),
		group: $elm$core$Maybe$Just('Reminders'),
		id: 'Off Task Warnings',
		importance: $elm$core$Maybe$Just($author$project$NativeScript$Notification$Max),
		led: $elm$core$Maybe$Nothing,
		name: channelName,
		sound: $elm$core$Maybe$Just(
			$author$project$NativeScript$Notification$CustomSound('eek')),
		vibrate: $elm$core$Maybe$Just(
			$author$project$Refocus$urgentVibe(5 + step))
	};
};
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0.a;
		return generator(seed);
	});
var $elm$random$Random$addOne = function (value) {
	return _Utils_Tuple2(1, value);
};
var $elm$random$Random$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 'Seed', a: a, b: b};
	});
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$float = F2(
	function (a, b) {
		return $elm$random$Random$Generator(
			function (seed0) {
				var seed1 = $elm$random$Random$next(seed0);
				var range = $elm$core$Basics$abs(b - a);
				var n1 = $elm$random$Random$peel(seed1);
				var n0 = $elm$random$Random$peel(seed0);
				var lo = (134217727 & n1) * 1.0;
				var hi = (67108863 & n0) * 1.0;
				var val = ((hi * 134217728.0) + lo) / 9007199254740992.0;
				var scaled = (val * range) + a;
				return _Utils_Tuple2(
					scaled,
					$elm$random$Random$next(seed1));
			});
	});
var $elm$random$Random$getByWeight = F3(
	function (_v0, others, countdown) {
		getByWeight:
		while (true) {
			var weight = _v0.a;
			var value = _v0.b;
			if (!others.b) {
				return value;
			} else {
				var second = others.a;
				var otherOthers = others.b;
				if (_Utils_cmp(
					countdown,
					$elm$core$Basics$abs(weight)) < 1) {
					return value;
				} else {
					var $temp$_v0 = second,
						$temp$others = otherOthers,
						$temp$countdown = countdown - $elm$core$Basics$abs(weight);
					_v0 = $temp$_v0;
					others = $temp$others;
					countdown = $temp$countdown;
					continue getByWeight;
				}
			}
		}
	});
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0.a;
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v1 = genA(seed0);
				var a = _v1.a;
				var seed1 = _v1.b;
				return _Utils_Tuple2(
					func(a),
					seed1);
			});
	});
var $elm$random$Random$weighted = F2(
	function (first, others) {
		var normalize = function (_v0) {
			var weight = _v0.a;
			return $elm$core$Basics$abs(weight);
		};
		var total = normalize(first) + $elm$core$List$sum(
			A2($elm$core$List$map, normalize, others));
		return A2(
			$elm$random$Random$map,
			A2($elm$random$Random$getByWeight, first, others),
			A2($elm$random$Random$float, 0, total));
	});
var $elm$random$Random$uniform = F2(
	function (value, valueList) {
		return A2(
			$elm$random$Random$weighted,
			$elm$random$Random$addOne(value),
			A2($elm$core$List$map, $elm$random$Random$addOne, valueList));
	});
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $author$project$SmartTime$Moment$useAsRandomSeed = function (givenMoment) {
	return $elm$random$Random$initialSeed(
		$author$project$SmartTime$Moment$toSmartInt(givenMoment));
};
var $author$project$Refocus$pickEncouragementMessage = function (time) {
	var encouragementMessages = A2(
		$elm$random$Random$uniform,
		'Do this later',
		_List_fromArray(
			['You have important goals to meet!', 'Why not put this in your task list for later?', 'This was not part of the plan', 'Get back on task now!']));
	return A2(
		$elm$random$Random$step,
		encouragementMessages,
		$author$project$SmartTime$Moment$useAsRandomSeed(time)).a;
};
var $author$project$Refocus$reminderDistance = function (reminderNum) {
	return $author$project$SmartTime$Duration$fromSeconds(60 * reminderNum);
};
var $author$project$Refocus$distractionReminder = F3(
	function (status, distraction, reminderNum) {
		var reminderStart = A2(
			$author$project$SmartTime$Moment$future,
			status.now,
			$author$project$Refocus$reminderDistance(reminderNum));
		var base = $author$project$NativeScript$Notification$build(
			$author$project$Refocus$distractionChannel(reminderNum));
		return _Utils_update(
			base,
			{
				accentColor: $elm$core$Maybe$Just('red'),
				actions: $author$project$Refocus$distractionActions,
				at: $elm$core$Maybe$Just(reminderStart),
				body: $elm$core$Maybe$Just(
					$author$project$Refocus$pickEncouragementMessage(reminderStart)),
				chronometer: $elm$core$Maybe$Just(true),
				countdown: $elm$core$Maybe$Just(false),
				expiresAfter: $elm$core$Maybe$Just(
					$author$project$Refocus$reminderDistance(3)),
				id: $elm$core$Maybe$Just(700 + reminderNum),
				maxMinutesLate: $elm$core$Maybe$Just(0),
				subtitle: $elm$core$Maybe$Just(
					'Off Task! Warning #' + $elm$core$String$fromInt(reminderNum + 1)),
				when: $elm$core$Maybe$Just(status.now)
			});
	});
var $author$project$SmartTime$Duration$fromHours = function (_float) {
	return $author$project$SmartTime$Duration$Duration(
		$elm$core$Basics$round(_float * $author$project$SmartTime$Duration$hourLength));
};
var $author$project$SmartTime$Period$fromStart = F2(
	function (startMoment, duration) {
		return A2(
			$author$project$SmartTime$Period$between,
			startMoment,
			A2($author$project$SmartTime$Moment$future, startMoment, duration));
	});
var $author$project$Refocus$stopAfterCount = 10;
var $author$project$Refocus$giveUpNotif = function (fireTime) {
	var reminderPeriod = A2(
		$author$project$SmartTime$Period$fromStart,
		fireTime,
		$author$project$Refocus$reminderDistance($author$project$Refocus$stopAfterCount));
	var giveUpChannel = {
		description: $elm$core$Maybe$Just('Lets you know when a previous reminder has exceeded the maximum number of attempts to catch your attention.'),
		group: $elm$core$Maybe$Just('Status'),
		id: 'Gave Up Trying To Alert You',
		importance: $elm$core$Maybe$Nothing,
		led: $elm$core$Maybe$Nothing,
		name: 'Gave Up Trying To Alert You',
		sound: $elm$core$Maybe$Just(
			$author$project$NativeScript$Notification$CustomSound('eek')),
		vibrate: $elm$core$Maybe$Nothing
	};
	var base = $author$project$NativeScript$Notification$build(giveUpChannel);
	return _Utils_update(
		base,
		{
			accentColor: $elm$core$Maybe$Just('brown'),
			at: $elm$core$Maybe$Just(
				$author$project$SmartTime$Period$end(reminderPeriod)),
			body: $elm$core$Maybe$Just(
				'Gave up after ' + $elm$core$String$fromInt($author$project$Refocus$stopAfterCount)),
			chronometer: $elm$core$Maybe$Just(false),
			countdown: $elm$core$Maybe$Just(false),
			expiresAfter: $elm$core$Maybe$Just(
				$author$project$SmartTime$Duration$fromHours(8)),
			id: $elm$core$Maybe$Just($author$project$Refocus$stopAfterCount + 701),
			subtitle: $elm$core$Maybe$Just('Off Task warnings have failed.'),
			when: $elm$core$Maybe$Just(
				$author$project$SmartTime$Period$end(reminderPeriod))
		});
};
var $author$project$Refocus$scheduleDistractionReminders = F2(
	function (status, distraction) {
		var title = function () {
			var _v0 = distraction.win;
			if (_v0.b.$ === 'Just') {
				var winInstance = _v0.b.a;
				return $elm$core$Maybe$Just(
					'Do now: ' + $author$project$Task$AssignedAction$getTitle(winInstance));
			} else {
				var winActivity = _v0.a;
				var _v1 = _v0.b;
				return $elm$core$Maybe$Just(
					'Do now: ' + $author$project$Activity$Activity$getName(winActivity));
			}
		}();
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				A2($author$project$Refocus$distractionReminder, status, distraction),
				A2($elm$core$List$range, 0, $author$project$Refocus$stopAfterCount)),
			_List_fromArray(
				[
					$author$project$Refocus$giveUpNotif(status.now)
				]));
	});
var $elm_community$list_extra$List$Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, pred),
			list);
	});
var $author$project$Helpers$multiline = function (inputListOfLists) {
	var unWords = function (wordsList) {
		return $elm$core$String$concat(
			A2($elm$core$List$intersperse, ' ', wordsList));
	};
	var unLines = function (linesList) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$intersperse,
				'\n',
				A2($elm_community$list_extra$List$Extra$filterNot, $elm$core$String$isEmpty, linesList)));
	};
	return unLines(
		A2($elm$core$List$map, unWords, inputListOfLists));
};
var $author$project$Refocus$multiLineToast = function (message) {
	return $author$project$External$Commands$toast(
		$author$project$Helpers$multiline(message));
};
var $author$project$Refocus$sessionToast = F2(
	function (status, addedText) {
		return $author$project$Refocus$multiLineToast(
			_List_fromArray(
				[
					_List_fromArray(
					[
						$author$project$Activity$Activity$getName(status.oldActivity),
						'stopped after',
						$author$project$Refocus$writeDur(status.lastSession)
					]),
					_List_fromArray(
					[
						$author$project$Activity$Activity$getName(status.oldActivity),
						'➤',
						$author$project$Activity$Activity$getName(status.newActivity)
					]),
					_List_fromArray(
					[
						$author$project$Refocus$writeDur(status.newActivityTodayTotal),
						'today'
					]),
					_List_fromArray(
					[addedText])
				]));
	});
var $author$project$Refocus$tractionReminderIDs = _List_fromArray(
	[200, 201, 202, 203, 204]);
var $author$project$Refocus$newlyDistractionReaction = F3(
	function (isExtrapolated, status, distraction) {
		var realTimeOnly = (!isExtrapolated) ? _List_fromArray(
			[
				A2($author$project$Refocus$sessionToast, status, '❌ Not W.I.N. '),
				$author$project$Refocus$cancelAll(
				_Utils_ap(
					$author$project$Refocus$distractionReminderIDs,
					_Utils_ap($author$project$Refocus$tractionReminderIDs, $author$project$Refocus$excusedReminderIDs)))
			]) : _List_Nil;
		return $elm$core$Platform$Cmd$batch(
			_Utils_ap(
				realTimeOnly,
				_List_fromArray(
					[
						$author$project$NativeScript$Commands$notify(
						_Utils_ap(
							A3($author$project$Refocus$distractionSticky, status, distraction, $author$project$SmartTime$Duration$zero),
							A2($author$project$Refocus$scheduleDistractionReminders, status, distraction)))
					])));
	});
var $author$project$SmartTime$Human$Duration$withAbbreviation = function (unit) {
	switch (unit.$) {
		case 'Milliseconds':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'ms';
		case 'Seconds':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'sec';
		case 'Minutes':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'min';
		case 'Hours':
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'hr';
		default:
			var _int = unit.a;
			return $elm$core$String$fromInt(_int) + 'd';
	}
};
var $author$project$SmartTime$Human$Duration$abbreviatedSpaced = function (humanDurationList) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			' ',
			A2($elm$core$List$map, $author$project$SmartTime$Human$Duration$withAbbreviation, humanDurationList)));
};
var $author$project$SmartTime$Human$Duration$breakdownNonzero = function (duration) {
	var makeOptional = function (_v1) {
		var tagger = _v1.a;
		var amount = _v1.b;
		return (amount > 0) ? $elm$core$Maybe$Just(
			tagger(amount)) : $elm$core$Maybe$Nothing;
	};
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var days = _v0.days;
	var hours = _v0.hours;
	var minutes = _v0.minutes;
	var seconds = _v0.seconds;
	var milliseconds = _v0.milliseconds;
	var maybeList = A2(
		$elm$core$List$map,
		makeOptional,
		_List_fromArray(
			[
				_Utils_Tuple2($author$project$SmartTime$Human$Duration$Days, days),
				_Utils_Tuple2($author$project$SmartTime$Human$Duration$Hours, hours),
				_Utils_Tuple2($author$project$SmartTime$Human$Duration$Minutes, minutes),
				_Utils_Tuple2($author$project$SmartTime$Human$Duration$Seconds, seconds),
				_Utils_Tuple2($author$project$SmartTime$Human$Duration$Milliseconds, milliseconds)
			]));
	return A2($elm$core$List$filterMap, $elm$core$Basics$identity, maybeList);
};
var $author$project$SmartTime$Human$Moment$describeGapVsNow = F3(
	function (zone, now, moment) {
		var gap = A2($author$project$SmartTime$Moment$difference, now, moment);
		var breakdown = $author$project$SmartTime$Human$Duration$breakdownNonzero(gap);
		var _v0 = A2($author$project$SmartTime$Human$Moment$humanize, zone, moment);
		var date = _v0.a;
		var time = _v0.b;
		var _v1 = A2($author$project$SmartTime$Moment$compare, moment, now);
		switch (_v1.$) {
			case 'Coincident':
				return 'now';
			case 'Earlier':
				return $author$project$SmartTime$Human$Duration$abbreviatedSpaced(breakdown) + ' ago';
			default:
				return 'in ' + $author$project$SmartTime$Human$Duration$abbreviatedSpaced(breakdown);
		}
	});
var $author$project$SmartTime$Moment$isEarlier = F2(
	function (_v0, _v1) {
		var time1 = _v0.a;
		var time2 = _v1.a;
		return _Utils_cmp(
			$author$project$SmartTime$Duration$inMs(time1),
			$author$project$SmartTime$Duration$inMs(time2)) < 0;
	});
var $author$project$Refocus$notifUpdateSpacing = $author$project$SmartTime$Duration$fromSeconds(30);
var $author$project$Refocus$excusedSticky = F3(
	function (status, excused, elapsed) {
		var title = A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getTitle, status.newInstanceMaybe);
		var sessionTotal = A2($author$project$SmartTime$Duration$add, status.newActivityTodayTotal, elapsed);
		var remaining = A2($author$project$SmartTime$Duration$subtract, excused.remaining, elapsed);
		var notifTime = A2($author$project$SmartTime$Moment$future, status.now, elapsed);
		var nextUpdateMoment = A2($author$project$SmartTime$Moment$future, notifTime, $author$project$Refocus$notifUpdateSpacing);
		var moreUpdates = A2($author$project$SmartTime$Moment$isEarlier, nextUpdateMoment, excused.until);
		var lifetime = A2($author$project$SmartTime$Moment$difference, notifTime, excused.until);
		var laterUpdates = moreUpdates ? $elm$core$List$reverse(
			A3(
				$author$project$Refocus$excusedSticky,
				status,
				excused,
				A2($author$project$SmartTime$Duration$add, $author$project$Refocus$notifUpdateSpacing, elapsed))) : _List_Nil;
		var body = $author$project$Helpers$multiline(
			_List_fromArray(
				[
					_List_fromArray(
					['What\'s Important Now:']),
					_List_fromArray(
					[
						$author$project$Refocus$summarizeFocusItem(excused.win)
					]),
					_List_fromArray(
					[
						'Status changed',
						A3($author$project$SmartTime$Human$Moment$describeGapVsNow, status.zone, notifTime, status.now)
					])
				]));
		var actionsIfTaskPresent = function (instance) {
			return _List_fromArray(
				[
					{
					button: $author$project$NativeScript$Notification$Button('Stop'),
					id: 'stopTask=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				},
					{
					button: $author$project$NativeScript$Notification$Button('Complete'),
					id: 'complete=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				}
				]);
		};
		var _final = _Utils_update(
			$author$project$Refocus$stickyBase,
			{
				accentColor: $elm$core$Maybe$Just('yellow'),
				actions: function () {
					var _v1 = status.newInstanceMaybe;
					if (_v1.$ === 'Just') {
						var instance = _v1.a;
						return _Utils_ap(
							$author$project$Refocus$stickyBase.actions,
							actionsIfTaskPresent(instance));
					} else {
						return $author$project$Refocus$stickyBase.actions;
					}
				}(),
				at: $elm$core$Maybe$Just(notifTime),
				body: $elm$core$Maybe$Just(body),
				chronometer: $elm$core$Maybe$Just(true),
				countdown: $elm$core$Maybe$Just(true),
				expiresAfter: $elm$core$Maybe$Just(lifetime),
				maxMinutesLate: $elm$core$Maybe$Just(0),
				progress: function () {
					var _v2 = status.newInstanceMaybe;
					if (_v2.$ === 'Just') {
						var task = _v2.a;
						return $elm$core$Maybe$Just(
							A2(
								$author$project$NativeScript$Notification$Progress,
								$author$project$Task$Progress$getPortion(
									$author$project$Task$AssignedAction$getProgress(task)),
								$author$project$Task$Progress$getWhole(
									$author$project$Task$AssignedAction$getProgress(task))));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}(),
				subtitle: $elm$core$Maybe$Just(
					$author$project$Activity$Activity$getName(status.newActivity) + (' (excused up to ' + ($author$project$Refocus$writeDur(excused.limit) + ')'))),
				title: title,
				when: $elm$core$Maybe$Just(excused.until)
			});
		var _v0 = excused.win;
		var winActivity = _v0.a;
		var winInstanceMaybe = _v0.b;
		return _List_fromArray(
			[_final]);
	});
var $author$project$SmartTime$Duration$compare = F2(
	function (_v0, _v1) {
		var int1 = _v0.a;
		var int2 = _v1.a;
		return A2($elm$core$Basics$compare, int1, int2);
	});
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $author$project$Refocus$scheduleExcusedReminders = F2(
	function (status, excused) {
		var write = function (durLeft) {
			return $author$project$SmartTime$Human$Duration$abbreviatedSpaced(
				$author$project$SmartTime$Human$Duration$breakdownNonzero(durLeft));
		};
		var halfLeftThisSession = A2($author$project$SmartTime$Duration$scale, excused.remaining, 1 / 2);
		var firstIsLess = F2(
			function (first, last) {
				return _Utils_eq(
					A2($author$project$SmartTime$Duration$compare, first, last),
					$elm$core$Basics$LT);
			});
		var firstIsGreater = F2(
			function (first, last) {
				return _Utils_eq(
					A2($author$project$SmartTime$Duration$compare, first, last),
					$elm$core$Basics$GT);
			});
		var gettingCloseList = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			firstIsGreater(halfLeftThisSession),
			_List_fromArray(
				[
					$author$project$SmartTime$Duration$zero,
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(1)),
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(2)),
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(3)),
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(5)),
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(10)),
					$author$project$SmartTime$Human$Duration$dur(
					$author$project$SmartTime$Human$Duration$Minutes(30))
				]));
		var substantialTimeLeft = A2(
			firstIsGreater,
			excused.remaining,
			$author$project$SmartTime$Duration$fromSeconds(30.0));
		var excusedChannel = {
			description: $elm$core$Maybe$Nothing,
			group: $elm$core$Maybe$Just('Reminders'),
			id: 'Excused Reminders',
			importance: $elm$core$Maybe$Nothing,
			led: $elm$core$Maybe$Nothing,
			name: 'Excused Reminders',
			sound: $elm$core$Maybe$Nothing,
			vibrate: $elm$core$Maybe$Nothing
		};
		var scratch = $author$project$NativeScript$Notification$build(excusedChannel);
		var encouragementMessages = A2(
			$elm$random$Random$uniform,
			'Get back on task as soon as possible - do this later!',
			_List_fromArray(
				['You have important goals to meet!', 'Why not put this in your task list for later?']));
		var beforeTimesUp = function (timeBefore) {
			return A2($author$project$SmartTime$Moment$past, excused.until, timeBefore);
		};
		var actions = _List_fromArray(
			[
				{
				button: $author$project$NativeScript$Notification$Button('OK I\'m Ready'),
				id: 'BackOnTask',
				launch: false
			}
			]);
		var base = _Utils_update(
			scratch,
			{
				accentColor: $elm$core$Maybe$Just('gold'),
				actions: actions,
				channel: excusedChannel,
				chronometer: $elm$core$Maybe$Just(true),
				countdown: $elm$core$Maybe$Just(true),
				id: $elm$core$Maybe$Just(100),
				maxMinutesLate: $elm$core$Maybe$Just(0),
				when: $elm$core$Maybe$Just(excused.until)
			});
		var buildGettingCloseReminder = function (amountLeft) {
			return _Utils_update(
				base,
				{
					at: $elm$core$Maybe$Just(
						beforeTimesUp(amountLeft)),
					progress: $elm$core$Maybe$Just(
						A2(
							$author$project$NativeScript$Notification$Progress,
							$author$project$SmartTime$Duration$inMs(amountLeft),
							$author$project$SmartTime$Duration$inMs(excused.limit))),
					subtitle: $elm$core$Maybe$Just(
						'Excused for up to ' + write(excused.limit)),
					title: $elm$core$Maybe$Just(
						'Finish up! Only ' + (write(amountLeft) + ' left!'))
				});
		};
		var interimReminders = _List_fromArray(
			[
				_Utils_update(
				base,
				{
					at: $elm$core$Maybe$Just(
						A2(
							$author$project$SmartTime$Moment$future,
							status.now,
							$author$project$SmartTime$Human$Duration$dur(
								$author$project$SmartTime$Human$Duration$Minutes(10)))),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$pickEncouragementMessage(
							A2(
								$author$project$SmartTime$Moment$future,
								status.now,
								$author$project$SmartTime$Human$Duration$dur(
									$author$project$SmartTime$Human$Duration$Minutes(10))))),
					title: $elm$core$Maybe$Just('Distraction taken care of?')
				}),
				_Utils_update(
				base,
				{
					at: $elm$core$Maybe$Just(
						A2(
							$author$project$SmartTime$Moment$future,
							status.now,
							$author$project$SmartTime$Human$Duration$dur(
								$author$project$SmartTime$Human$Duration$Minutes(20)))),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$pickEncouragementMessage(
							A2(
								$author$project$SmartTime$Moment$future,
								status.now,
								$author$project$SmartTime$Human$Duration$dur(
									$author$project$SmartTime$Human$Duration$Minutes(20))))),
					title: $elm$core$Maybe$Just('Ready to get back on task?')
				}),
				_Utils_update(
				base,
				{
					at: $elm$core$Maybe$Just(
						A2(
							$author$project$SmartTime$Moment$future,
							status.now,
							$author$project$SmartTime$Human$Duration$dur(
								$author$project$SmartTime$Human$Duration$Minutes(30)))),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$pickEncouragementMessage(
							A2(
								$author$project$SmartTime$Moment$future,
								status.now,
								$author$project$SmartTime$Human$Duration$dur(
									$author$project$SmartTime$Human$Duration$Minutes(30))))),
					title: $elm$core$Maybe$Just('Can this wait?')
				})
			]);
		return substantialTimeLeft ? A2($elm$core$List$map, buildGettingCloseReminder, gettingCloseList) : _List_Nil;
	});
var $author$project$Refocus$newlyExcusedReaction = F3(
	function (isExtrapolated, status, excused) {
		return $elm$core$Platform$Cmd$batch(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$NativeScript$Commands$notify(
						_Utils_ap(
							A3($author$project$Refocus$excusedSticky, status, excused, $author$project$SmartTime$Duration$zero),
							A2($author$project$Refocus$scheduleExcusedReminders, status, excused)))
					]),
				(!isExtrapolated) ? _List_fromArray(
					[
						A2($author$project$Refocus$sessionToast, status, '❌ Not W.I.N. Excused.'),
						$author$project$Refocus$cancelAll(
						_Utils_ap($author$project$Refocus$distractionReminderIDs, $author$project$Refocus$tractionReminderIDs))
					]) : _List_Nil));
	});
var $author$project$Refocus$freeSticky = function (status) {
	var title = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Activity$Activity$getName(status.newActivity) + ' (no task)',
		A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getTitle, status.newInstanceMaybe));
	var actionsIfTaskPresent = function (instance) {
		return _List_fromArray(
			[
				{
				button: $author$project$NativeScript$Notification$Button('Stop'),
				id: 'stopTask=' + $author$project$ID$toString(
					$author$project$Task$AssignedAction$getID(instance)),
				launch: false
			},
				{
				button: $author$project$NativeScript$Notification$Button('Complete'),
				id: 'complete=' + $author$project$ID$toString(
					$author$project$Task$AssignedAction$getID(instance)),
				launch: false
			}
			]);
	};
	var _final = _Utils_update(
		$author$project$Refocus$stickyBase,
		{
			accentColor: $elm$core$Maybe$Nothing,
			actions: function () {
				var _v0 = status.newInstanceMaybe;
				if (_v0.$ === 'Just') {
					var instance = _v0.a;
					return _Utils_ap(
						$author$project$Refocus$stickyBase.actions,
						actionsIfTaskPresent(instance));
				} else {
					return $author$project$Refocus$stickyBase.actions;
				}
			}(),
			at: $elm$core$Maybe$Just(status.now),
			body: A2(
				$elm$core$Maybe$map,
				function (nt) {
					return 'What\'s Important Now: ' + $author$project$Replicated$Reducer$Register$latest(nt._class).title.get;
				},
				status.newInstanceMaybe),
			ongoing: $elm$core$Maybe$Just(false),
			progress: function () {
				var _v1 = status.newInstanceMaybe;
				if (_v1.$ === 'Just') {
					var task = _v1.a;
					return $elm$core$Maybe$Just(
						A2(
							$author$project$NativeScript$Notification$Progress,
							$author$project$Task$Progress$getPortion(
								$author$project$Task$AssignedAction$getProgress(task)),
							$author$project$Task$Progress$getWhole(
								$author$project$Task$AssignedAction$getProgress(task))));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
			subtitle: $elm$core$Maybe$Just(
				$author$project$Activity$Activity$getName(status.newActivity) + ' (no other plans)'),
			title: $elm$core$Maybe$Just(title),
			when: $elm$core$Maybe$Just(
				A2($author$project$SmartTime$Moment$past, status.now, status.newActivityTodayTotal))
		});
	return _List_fromArray(
		[_final]);
};
var $author$project$Refocus$newlyFreeReaction = function (status) {
	return $elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				A2($author$project$Refocus$sessionToast, status, 'Liesure time'),
				$author$project$NativeScript$Commands$notify(
				$author$project$Refocus$freeSticky(status)),
				$author$project$Refocus$cancelAll(
				_Utils_ap($author$project$Refocus$distractionReminderIDs, $author$project$Refocus$tractionReminderIDs))
			]));
};
var $author$project$Refocus$tractionChannel = {
	description: $elm$core$Maybe$Just('Reminders of time passing, as well as progress reports, while on task.'),
	group: $elm$core$Maybe$Just('Reminders'),
	id: 'Task Progress',
	importance: $elm$core$Maybe$Just($author$project$NativeScript$Notification$High),
	led: $elm$core$Maybe$Nothing,
	name: 'Task Progress',
	sound: $elm$core$Maybe$Nothing,
	vibrate: $elm$core$Maybe$Nothing
};
var $author$project$Refocus$scheduleTractionReminders = F2(
	function (status, traction) {
		var fractionLeft = function (denom) {
			return A2(
				$author$project$SmartTime$Moment$future,
				status.now,
				A2(
					$author$project$SmartTime$Duration$subtract,
					traction.remaining,
					A2($author$project$SmartTime$Duration$scale, traction.remaining, 1 / denom)));
		};
		var blank = $author$project$NativeScript$Notification$build($author$project$Refocus$tractionChannel);
		var reminderBase = _Utils_update(
			blank,
			{
				accentColor: $elm$core$Maybe$Just('green'),
				expiresAfter: $elm$core$Maybe$Just(
					$author$project$SmartTime$Duration$fromMinutes(1)),
				maxMinutesLate: $elm$core$Maybe$Just(0),
				when: $elm$core$Maybe$Just(
					A2($author$project$SmartTime$Moment$future, status.now, traction.remaining))
			});
		return _List_fromArray(
			[
				_Utils_update(
				reminderBase,
				{
					at: $elm$core$Maybe$Just(
						fractionLeft(2)),
					body: $elm$core$Maybe$Just('1/2 time left for this task.'),
					id: $elm$core$Maybe$Just(201),
					progress: $elm$core$Maybe$Just(
						A2($author$project$NativeScript$Notification$Progress, 1, 2)),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$summarizeFocusItem(traction.win)),
					title: $elm$core$Maybe$Just('Half-way done!')
				}),
				_Utils_update(
				reminderBase,
				{
					at: $elm$core$Maybe$Just(
						fractionLeft(3)),
					body: $elm$core$Maybe$Just('1/3 time left for this task.'),
					id: $elm$core$Maybe$Just(202),
					progress: $elm$core$Maybe$Just(
						A2($author$project$NativeScript$Notification$Progress, 2, 3)),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$summarizeFocusItem(traction.win)),
					title: $elm$core$Maybe$Just('Two-thirds done!')
				}),
				_Utils_update(
				reminderBase,
				{
					at: $elm$core$Maybe$Just(
						fractionLeft(4)),
					body: $elm$core$Maybe$Just('1/4 time left for this task.'),
					id: $elm$core$Maybe$Just(203),
					progress: $elm$core$Maybe$Just(
						A2($author$project$NativeScript$Notification$Progress, 3, 4)),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$summarizeFocusItem(traction.win)),
					title: $elm$core$Maybe$Just('Three-quarters done!')
				}),
				_Utils_update(
				reminderBase,
				{
					at: $elm$core$Maybe$Just(
						A2($author$project$SmartTime$Moment$future, status.now, traction.remaining)),
					body: $elm$core$Maybe$Just('You have spent all of the time reserved for this task.'),
					id: $elm$core$Maybe$Just(204),
					subtitle: $elm$core$Maybe$Just(
						$author$project$Refocus$summarizeFocusItem(traction.win)),
					title: $elm$core$Maybe$Just('Time\'s up!')
				})
			]);
	});
var $author$project$Refocus$tractionSticky = F3(
	function (status, traction, elapsed) {
		var title = A2($elm$core$Maybe$map, $author$project$Task$AssignedAction$getTitle, status.newInstanceMaybe);
		var sessionTotal = A2($author$project$SmartTime$Duration$add, status.newActivityTodayTotal, elapsed);
		var notifTime = A2($author$project$SmartTime$Moment$future, status.now, elapsed);
		var nextUpdateMoment = A2($author$project$SmartTime$Moment$future, notifTime, $author$project$Refocus$notifUpdateSpacing);
		var lifetime = A2($author$project$SmartTime$Moment$difference, notifTime, traction.until);
		var laterUpdates = A2($author$project$SmartTime$Moment$isEarlier, nextUpdateMoment, traction.until) ? A3(
			$author$project$Refocus$tractionSticky,
			status,
			traction,
			A2($author$project$SmartTime$Duration$add, $author$project$Refocus$notifUpdateSpacing, elapsed)) : _List_Nil;
		var actionsIfTaskPresent = function (instance) {
			return _List_fromArray(
				[
					{
					button: $author$project$NativeScript$Notification$Button('Stop'),
					id: 'stopTask=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				},
					{
					button: $author$project$NativeScript$Notification$Button('Complete'),
					id: 'complete=' + $author$project$ID$toString(
						$author$project$Task$AssignedAction$getID(instance)),
					launch: false
				}
				]);
		};
		var _final = _Utils_update(
			$author$project$Refocus$stickyBase,
			{
				accentColor: $elm$core$Maybe$Just('green'),
				actions: function () {
					var _v0 = status.newInstanceMaybe;
					if (_v0.$ === 'Just') {
						var instance = _v0.a;
						return _Utils_ap(
							$author$project$Refocus$stickyBase.actions,
							actionsIfTaskPresent(instance));
					} else {
						return $author$project$Refocus$stickyBase.actions;
					}
				}(),
				at: $elm$core$Maybe$Just(notifTime),
				body: $elm$core$Maybe$Just(
					'Doing what\'s important now: ' + $author$project$Refocus$summarizeFocusItem(traction.win)),
				progress: function () {
					var _v1 = status.newInstanceMaybe;
					if (_v1.$ === 'Just') {
						var task = _v1.a;
						return $elm$core$Maybe$Just(
							A2(
								$author$project$NativeScript$Notification$Progress,
								$author$project$Task$Progress$getPortion(
									$author$project$Task$AssignedAction$getProgress(task)),
								$author$project$Task$Progress$getWhole(
									$author$project$Task$AssignedAction$getProgress(task))));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}(),
				subtitle: $elm$core$Maybe$Just(
					'On Task (' + ($author$project$Activity$Activity$getName(status.newActivity) + ')')),
				title: title,
				when: $elm$core$Maybe$Just(
					A2($author$project$SmartTime$Moment$past, notifTime, sessionTotal))
			});
		return _List_fromArray(
			[_final]);
	});
var $author$project$Refocus$newlyTractionReaction = F2(
	function (status, traction) {
		return $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($author$project$Refocus$sessionToast, status, '✔️'),
					$author$project$NativeScript$Commands$notify(
					_Utils_ap(
						A3($author$project$Refocus$tractionSticky, status, traction, $author$project$SmartTime$Duration$zero),
						A2($author$project$Refocus$scheduleTractionReminders, status, traction))),
					$author$project$Refocus$cancelAll(
					_Utils_ap($author$project$Refocus$distractionReminderIDs, $author$project$Refocus$excusedReminderIDs))
				]));
	});
var $author$project$Refocus$reactToStatusChange = F3(
	function (isExtrapolated, status, focusStatus) {
		switch (focusStatus.$) {
			case 'Free':
				return _Utils_Tuple2(
					$author$project$Refocus$newlyFreeReaction(status),
					$elm$core$Maybe$Nothing);
			case 'Distraction':
				var distraction = focusStatus.a;
				return _Utils_Tuple2(
					A3($author$project$Refocus$newlyDistractionReaction, isExtrapolated, status, distraction),
					$elm$core$Maybe$Nothing);
			case 'Excused':
				var excused = focusStatus.a;
				return _Utils_Tuple2(
					A3($author$project$Refocus$newlyExcusedReaction, isExtrapolated, status, excused),
					$elm$core$Maybe$Just(excused.until));
			default:
				var traction = focusStatus.a;
				return _Utils_Tuple2(
					A2($author$project$Refocus$newlyTractionReaction, status, traction),
					$elm$core$Maybe$Just(traction.until));
		}
	});
var $author$project$Task$AssignedAction$partiallyCompleted = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance.instance).completion.get > 0;
};
var $author$project$NativeScript$Notification$Default = {$: 'Default'};
var $author$project$Refocus$suggestedTasksChannel = {
	description: $elm$core$Maybe$Just('Other tasks you could start right now.'),
	group: $elm$core$Maybe$Just('Actionable'),
	id: 'Suggested Tasks',
	importance: $elm$core$Maybe$Just($author$project$NativeScript$Notification$Default),
	led: $elm$core$Maybe$Nothing,
	name: 'Suggested Tasks',
	sound: $elm$core$Maybe$Nothing,
	vibrate: $elm$core$Maybe$Nothing
};
var $author$project$Refocus$suggestedTasksGroup = $author$project$NativeScript$Notification$GroupKey('suggestions');
var $author$project$ID$toInt = function (givenID) {
	if (givenID.$ === 'IDFromExisting') {
		var objectID = givenID.a;
		return $author$project$Replicated$Op$OpID$toInt(objectID);
	} else {
		return A2($author$project$Log$crashInDev, 'Supposed to be impossible: toString called on an ID when the wrapped pointer was for a placeholder. All IDs should represent existing Objects with ObjectIDs', 42);
	}
};
var $author$project$Refocus$taskClassNotifID = function (classID) {
	return $author$project$ID$toInt(classID);
};
var $author$project$Refocus$suggestedTaskNotif = F2(
	function (now, _v0) {
		var taskInstance = _v0.a;
		var taskActivityID = _v0.b;
		var base = $author$project$NativeScript$Notification$build($author$project$Refocus$suggestedTasksChannel);
		var actions = _List_fromArray(
			[
				{
				button: $author$project$NativeScript$Notification$Button('Start'),
				id: 'startTask=' + $author$project$ID$toString(
					$author$project$Task$AssignedAction$getID(taskInstance)),
				launch: false
			}
			]);
		return _Utils_update(
			base,
			{
				actions: actions,
				at: $elm$core$Maybe$Just(now),
				body: $elm$core$Maybe$Nothing,
				chronometer: $elm$core$Maybe$Just(false),
				countdown: $elm$core$Maybe$Just(false),
				expiresAfter: $elm$core$Maybe$Just(
					$author$project$SmartTime$Duration$fromHours(1)),
				group: $elm$core$Maybe$Just($author$project$Refocus$suggestedTasksGroup),
				id: $elm$core$Maybe$Just(
					$author$project$Refocus$taskClassNotifID(taskInstance.classID)),
				progress: $author$project$Task$AssignedAction$partiallyCompleted(taskInstance) ? $elm$core$Maybe$Just(
					A2(
						$author$project$NativeScript$Notification$Progress,
						$author$project$Task$Progress$getPortion(
							$author$project$Task$AssignedAction$getProgress(taskInstance)),
						$author$project$Task$Progress$getWhole(
							$author$project$Task$AssignedAction$getProgress(taskInstance)))) : $elm$core$Maybe$Nothing,
				showWhen: $elm$core$Maybe$Just(false),
				subtitle: $elm$core$Maybe$Just('Suggested'),
				title: $elm$core$Maybe$Just(
					$author$project$Replicated$Reducer$Register$latest(taskInstance._class).title.get),
				when: $elm$core$Maybe$Nothing
			});
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Refocus$suggestedTasks = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var withActivityID = function (task) {
			var _v1 = $author$project$Task$AssignedAction$getActivityID(task);
			if (_v1.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var hasActivityID = _v1.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(task, hasActivityID));
			}
		};
		var actionableTasks = A2(
			$elm$core$List$filterMap,
			withActivityID,
			A2(
				$author$project$Refocus$prioritizeTasks,
				profile,
				_Utils_Tuple2(time, timeZone)));
		return A2(
			$elm$core$List$map,
			$author$project$Refocus$suggestedTaskNotif(time),
			A2($elm$core$List$take, 3, actionableTasks));
	});
var $author$project$Refocus$reactToNewSession = F4(
	function (newActivityID, newInstanceIDMaybe, _v0, oldProfile) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var suggestions = A2(
			$author$project$Refocus$suggestedTasks,
			oldProfile,
			_Utils_Tuple2(time, timeZone));
		var _v1 = A3(
			$author$project$Refocus$determineNewStatus,
			_Utils_Tuple2(newActivityID, newInstanceIDMaybe),
			oldProfile,
			_Utils_Tuple2(time, timeZone));
		var newStatusDetails = _v1.a;
		var newFocusStatus = _v1.b;
		var _v2 = A3($author$project$Refocus$reactToStatusChange, false, newStatusDetails, newFocusStatus);
		var reactionNow = _v2.a;
		var checkbackTimeMaybe = _v2.b;
		var reactionWhenExpired = function () {
			if (checkbackTimeMaybe.$ === 'Nothing') {
				return $elm$core$Platform$Cmd$none;
			} else {
				var checkbackTime = checkbackTimeMaybe.a;
				var _v4 = A3(
					$author$project$Refocus$determineNewStatus,
					_Utils_Tuple2(newActivityID, newInstanceIDMaybe),
					oldProfile,
					_Utils_Tuple2(checkbackTime, timeZone));
				var futureStatusDetails = _v4.a;
				var futureFocusStatus = _v4.b;
				return A3($author$project$Refocus$reactToStatusChange, true, futureStatusDetails, futureFocusStatus).a;
			}
		}();
		return _Utils_Tuple2(
			_List_Nil,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						reactionNow,
						A2($elm$core$Debug$log, 'FUTURE REACTION', reactionWhenExpired),
						$author$project$NativeScript$Commands$notify(suggestions)
					])));
	});
var $author$project$Activity$Timeline$currentAsFakeHistorySession = F2(
	function (now, wrappedTimeline) {
		var timeline = wrappedTimeline.a;
		var fake = function (currentSesh) {
			return $author$project$Activity$Session$new(
				{action: currentSesh.action, activity: currentSesh.activity, end: now, start: currentSesh.start});
		};
		return A2($elm$core$Maybe$map, fake, timeline.current.get);
	});
var $author$project$Activity$Timeline$currentToHistory = F2(
	function (wrappedTimeline, now) {
		var timeline = wrappedTimeline.a;
		var _v0 = A2($author$project$Activity$Timeline$currentAsFakeHistorySession, now, wrappedTimeline);
		if (_v0.$ === 'Nothing') {
			return _List_Nil;
		} else {
			var currentSesh = _v0.a;
			return _List_fromArray(
				[
					A3($author$project$Replicated$Reducer$RepList$insert, $author$project$Replicated$Reducer$RepList$Last, currentSesh, timeline.history)
				]);
		}
	});
var $author$project$Activity$Timeline$startActivity = F3(
	function (now, newActivityID, wrappedTimeline) {
		var timeline = wrappedTimeline.a;
		var newCurrent = {action: $elm$core$Maybe$Nothing, activity: newActivityID, start: now};
		return A2(
			$elm$core$List$cons,
			timeline.current.set(
				$elm$core$Maybe$Just(newCurrent)),
			A2($author$project$Activity$Timeline$currentToHistory, wrappedTimeline, now));
	});
var $author$project$Activity$Timeline$startTask = F4(
	function (now, newActivityID, instanceID, wrappedTimeline) {
		var timeline = wrappedTimeline.a;
		var newCurrent = {
			action: $elm$core$Maybe$Just(instanceID),
			activity: newActivityID,
			start: now
		};
		return A2(
			$elm$core$List$cons,
			timeline.current.set(
				$elm$core$Maybe$Just(newCurrent)),
			A2($author$project$Activity$Timeline$currentToHistory, wrappedTimeline, now));
	});
var $author$project$Refocus$switchTracking = F4(
	function (newActivityID, newInstanceIDMaybe, profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var switchChanges = function () {
			if (newInstanceIDMaybe.$ === 'Just') {
				var newInstanceID = newInstanceIDMaybe.a;
				return A4($author$project$Activity$Timeline$startTask, time, newActivityID, newInstanceID, profile.timeline);
			} else {
				return A3($author$project$Activity$Timeline$startActivity, time, newActivityID, profile.timeline);
			}
		}();
		var oldInstanceIDMaybe = $author$project$Activity$Timeline$currentInstanceID(profile.timeline);
		if (_Utils_eq(
			$author$project$Profile$currentActivityID(profile),
			newActivityID) && _Utils_eq(newInstanceIDMaybe, oldInstanceIDMaybe)) {
			return _Utils_Tuple2(_List_Nil, $elm$core$Platform$Cmd$none);
		} else {
			var _v1 = A4(
				$author$project$Refocus$reactToNewSession,
				newActivityID,
				newInstanceIDMaybe,
				_Utils_Tuple2(time, timeZone),
				profile);
			var reactionChanges = _v1.a;
			var reactionCmds = _v1.b;
			return _Utils_Tuple2(
				_Utils_ap(switchChanges, reactionChanges),
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[reactionCmds])));
		}
	});
var $author$project$Refocus$refreshTracking = F2(
	function (profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A4(
			$author$project$Refocus$switchTracking,
			$author$project$Profile$currentActivityID(profile),
			$author$project$Activity$Timeline$currentInstanceID(profile.timeline),
			profile,
			_Utils_Tuple2(time, timeZone));
	});
var $author$project$SmartTime$Human$Duration$withDefault = F2(
	function (fallback, humanDurationList) {
		return $elm$core$List$isEmpty(humanDurationList) ? _List_fromArray(
			[fallback]) : humanDurationList;
	});
var $author$project$SmartTime$Human$Duration$say = function (duration) {
	return $author$project$SmartTime$Human$Duration$abbreviatedSpaced(
		A2(
			$author$project$SmartTime$Human$Duration$withDefault,
			$author$project$SmartTime$Human$Duration$Seconds(0),
			$author$project$SmartTime$Human$Duration$breakdownNonzero(duration)));
};
var $author$project$Integrations$Marvin$GotTrackTruth = function (a) {
	return {$: 'GotTrackTruth', a: a};
};
var $author$project$Integrations$Marvin$decodeTrackTruthItem = A3(
	$zwilias$json_decode_exploration$Json$Decode$Exploration$map2,
	$author$project$Integrations$Marvin$TrackTruthItem,
	A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, 'taskId', $zwilias$json_decode_exploration$Json$Decode$Exploration$string),
	A2(
		$zwilias$json_decode_exploration$Json$Decode$Exploration$field,
		'times',
		$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Helpers$decodeUnixTimestamp)));
var $author$project$Integrations$Marvin$trackTruth = F2(
	function (secret, taskID) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$jsonBody(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'taskIds',
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									_List_fromArray(
										[taskID])))
							]))),
				expect: A2(
					$elm$http$Http$expectJson,
					$author$project$Integrations$Marvin$GotTrackTruth,
					$author$project$Helpers$toClassicLoose(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$list($author$project$Integrations$Marvin$decodeTrackTruthItem))),
				headers: _List_fromArray(
					[
						A2($elm$http$Http$header, 'X-API-Token', secret)
					]),
				method: 'POST',
				timeout: $elm$core$Maybe$Just(5000),
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Integrations$Marvin$marvinEndpointURL('tracks')
			});
	});
var $author$project$Integrations$Marvin$trackTruthToTimelineSessions = F3(
	function (profile, _v0, truthItem) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var keepEvenOdd = F2(
			function (modNum, _v4) {
				var i = _v4.a;
				var v = _v4.b;
				return _Utils_eq(
					A2($elm$core$Basics$modBy, 2, i),
					modNum) ? $elm$core$Maybe$Just(v) : $elm$core$Maybe$Nothing;
			});
		var isCorrectInstance = function (instance) {
			return _Utils_eq(
				$elm$core$Maybe$Just(truthItem.task),
				A2($author$project$Task$AssignedAction$getExtra, 'marvinID', instance));
		};
		var matchingInstance = A2(
			$elm_community$list_extra$List$Extra$find,
			isCorrectInstance,
			A2(
				$author$project$Profile$instanceListNow,
				profile,
				_Utils_Tuple2(time, timeZone)));
		var indexedTimes = A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, truthItem.times);
		var startsList = A2(
			$elm$core$List$map,
			function (m) {
				return A2(
					$author$project$SmartTime$Moment$future,
					m,
					$author$project$SmartTime$Duration$fromSeconds(5));
			},
			A2(
				$elm$core$List$filterMap,
				keepEvenOdd(0),
				indexedTimes));
		var stopsList = function () {
			var _v3 = !A2(
				$elm$core$Basics$modBy,
				2,
				$elm$core$List$length(truthItem.times));
			if (_v3) {
				return A2(
					$elm$core$List$filterMap,
					keepEvenOdd(1),
					indexedTimes);
			} else {
				return A2(
					$elm$core$List$filterMap,
					keepEvenOdd(1),
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						_Utils_ap(
							truthItem.times,
							_List_fromArray(
								[time]))));
			}
		}();
		if (matchingInstance.$ === 'Nothing') {
			return A2($author$project$Log$logMessageOnly, 'no matching instance when constructing timeline sessions from marvin data!', _List_Nil);
		} else {
			var instance = matchingInstance.a;
			var _v2 = $author$project$Task$AssignedAction$getActivityID(instance);
			if (_v2.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var activity = _v2.a;
				var toSession = F2(
					function (moment1, moment2) {
						return _Utils_Tuple3(
							activity,
							$elm$core$Maybe$Just(
								$author$project$Task$AssignedAction$getID(instance)),
							$author$project$SmartTime$Period$fromPair(
								_Utils_Tuple2(moment1, moment2)));
					});
				return A3($elm$core$List$map2, toSession, startsList, stopsList);
			}
		}
	});
var $author$project$Integrations$Marvin$handle = F4(
	function (classCounter, profile, _v0, response) {
		var time = _v0.a;
		var timeZone = _v0.b;
		switch (response.$) {
			case 'TestResult':
				var result = response.a;
				if (result.$ === 'Ok') {
					var serversays = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Logging Marvin changes',
							_List_fromArray(
								[
									A3($author$project$Replicated$Reducer$RepList$insert, $author$project$Replicated$Reducer$RepList$Last, 'Marvin TestResult: ' + serversays, profile.errors)
								])),
						serversays,
						$elm$core$Platform$Cmd$none);
				} else {
					var err = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Logging Marvin error',
							_List_fromArray(
								[
									A3(
									$author$project$Replicated$Reducer$RepList$insert,
									$author$project$Replicated$Reducer$RepList$Last,
									$elm$core$Debug$toString(err),
									profile.errors)
								])),
						$author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'AuthResult':
				var result = response.a;
				if (result.$ === 'Ok') {
					var serversays = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Logging Marvin changes',
							_List_fromArray(
								[
									A3($author$project$Replicated$Reducer$RepList$insert, $author$project$Replicated$Reducer$RepList$Last, 'Marvin AuthResult: ' + serversays, profile.errors)
								])),
						serversays,
						$elm$core$Platform$Cmd$none);
				} else {
					var err = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Logging Marvin error',
							_List_fromArray(
								[
									A3(
									$author$project$Replicated$Reducer$RepList$insert,
									$author$project$Replicated$Reducer$RepList$Last,
									$elm$core$Debug$toString(err),
									profile.errors)
								])),
						$author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotItems':
				var result = response.a;
				if (result.$ === 'Ok') {
					var itemList = result.a;
					var changes = A2($author$project$Integrations$Marvin$importItems, profile, itemList);
					return _Utils_Tuple3(
						A2($author$project$Replicated$Change$saveChanges, 'Imported Marvin Items', changes),
						'Fetched items: ' + $elm$core$Debug$toString(itemList),
						$author$project$Integrations$Marvin$getTimeBlockAssignments);
				} else {
					var err = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Logging Marvin error',
							_List_fromArray(
								[
									A3(
									$author$project$Replicated$Reducer$RepList$insert,
									$author$project$Replicated$Reducer$RepList$Last,
									$elm$core$Debug$toString(err),
									profile.errors)
								])),
						'when getting items: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotLabels':
				var result = response.a;
				if (result.$ === 'Ok') {
					var labelList = result.a;
					var changes = A2($author$project$Integrations$Marvin$importLabels, profile, labelList);
					return _Utils_Tuple3(
						A2($author$project$Replicated$Change$saveChanges, 'Imported Marvin Labels', changes),
						'Fetched labels: ' + $elm$core$Debug$toString(labelList),
						$author$project$Integrations$Marvin$getTodayItems($author$project$Integrations$Marvin$partialAccessToken));
				} else {
					var err = result.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'when getting labels: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotTimeBlocks':
				var assignments = response.a;
				var result = response.b;
				if (result.$ === 'Ok') {
					var timeBlockList = result.a;
					return _Utils_Tuple3(
						A2(
							$author$project$Replicated$Change$saveChanges,
							'Imported Marvin Timeblocks',
							A3($author$project$Integrations$Marvin$importTimeBlocks, profile, assignments, timeBlockList)),
						'Fetched timeblocks: ' + $elm$core$Debug$toString(timeBlockList),
						$author$project$Integrations$Marvin$getTrackedItem($author$project$Integrations$Marvin$partialAccessToken));
				} else {
					var err = result.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'when getting time blocks: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotTimeBlockAssignments':
				var assignmentsResult = response.a;
				if (assignmentsResult.$ === 'Ok') {
					var assignmentDict = assignmentsResult.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'Fetched timeblock assignments: ' + $elm$core$Debug$toString(assignmentDict),
						$author$project$Integrations$Marvin$getTimeBlocks(assignmentDict));
				} else {
					var err = assignmentsResult.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'when getting time block assignments: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotTrackTruth':
				var trackTruthResult = response.a;
				if (trackTruthResult.$ === 'Ok') {
					var timesList = trackTruthResult.a;
					var updatedTimeline = A2(
						$author$project$Activity$Timeline$backfill,
						profile.timeline,
						A2(
							$elm$core$List$concatMap,
							A2(
								$author$project$Integrations$Marvin$trackTruthToTimelineSessions,
								profile,
								_Utils_Tuple2(time, timeZone)),
							timesList));
					var updatedProfile = profile;
					var _v9 = A2(
						$author$project$Refocus$refreshTracking,
						updatedProfile,
						_Utils_Tuple2(time, timeZone));
					var refocusChanges = _v9.a;
					var refocusCmds = _v9.b;
					return _Utils_Tuple3(
						A2($author$project$Replicated$Change$saveChanges, 'Backfilled timeline with Marvin data', refocusChanges),
						'Fetched canonical timetrack timing tables: ' + $elm$core$Debug$toString(timesList),
						refocusCmds);
				} else {
					var err = trackTruthResult.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'when getting canonical timetrack timing tables: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotTrackAck':
				var ackResult = response.a;
				if (ackResult.$ === 'Ok') {
					var ack = ackResult.a;
					var timesList = (_Utils_cmp(
						$elm$core$List$length(ack.startTimes),
						$elm$core$List$length(ack.stopTimes)) > -1) ? ack.startTimes : ack.stopTimes;
					var newestReport = function (givenTime) {
						return $author$project$SmartTime$Human$Duration$say(
							A2($author$project$SmartTime$Moment$difference, time, givenTime));
					};
					var logMsg = 'got timetrack acknowledgement at ' + ($author$project$SmartTime$Human$Moment$toStandardString(time) + (' my time, newest marvin time was off by ' + A2(
						$elm$core$Maybe$withDefault,
						'none',
						A2(
							$elm$core$Maybe$map,
							newestReport,
							$elm_community$list_extra$List$Extra$last(timesList)))));
					var itemIDMaybe = A2($elm_community$maybe_extra$Maybe$Extra$or, ack.startID, ack.stopID);
					var asSessions = function () {
						if (itemIDMaybe.$ === 'Just') {
							var itemID = itemIDMaybe.a;
							return A3(
								$author$project$Integrations$Marvin$trackTruthToTimelineSessions,
								profile,
								_Utils_Tuple2(time, timeZone),
								A2($author$project$Integrations$Marvin$TrackTruthItem, itemID, timesList));
						} else {
							return A2($author$project$Log$crashInDev, 'wha??? no task?? ', _List_Nil);
						}
					}();
					var updateTimeline = A2($author$project$Activity$Timeline$backfill, profile.timeline, asSessions);
					return _Utils_Tuple3(
						A2($author$project$Replicated$Change$saveChanges, 'Got Marvin tracking acknowledgement', updateTimeline),
						logMsg,
						$elm$core$Platform$Cmd$none);
				} else {
					var err = ackResult.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'when sending start/stop timetracking signal: ' + $author$project$Integrations$Marvin$describeError(err),
						$elm$core$Platform$Cmd$none);
				}
			default:
				var result = response.a;
				if (result.$ === 'Ok') {
					var itemID = result.a;
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						'',
						A2($author$project$Integrations$Marvin$trackTruth, $author$project$Integrations$Marvin$partialAccessToken, itemID));
				} else {
					if (result.a.$ === 'BadBody') {
						var activeInstanceIDMaybe = $author$project$Activity$Timeline$currentInstanceID(profile.timeline);
						var activeInstanceMaybe = A2(
							$elm$core$Maybe$andThen,
							A2(
								$author$project$Profile$getInstanceByID,
								profile,
								_Utils_Tuple2(time, timeZone)),
							activeInstanceIDMaybe);
						var activeMarvinIDMaybe = A2(
							$elm$core$Maybe$andThen,
							$author$project$Task$AssignedAction$getExtra('marvinID'),
							activeInstanceMaybe);
						return _Utils_Tuple3(
							$author$project$Replicated$Change$none,
							'',
							A2(
								$elm$core$Maybe$withDefault,
								$elm$core$Platform$Cmd$none,
								A2(
									$elm$core$Maybe$map,
									$author$project$Integrations$Marvin$trackTruth($author$project$Integrations$Marvin$partialAccessToken),
									activeMarvinIDMaybe)));
					} else {
						var err = result.a;
						return _Utils_Tuple3(
							$author$project$Replicated$Change$none,
							$author$project$Integrations$Marvin$describeError(err),
							$elm$core$Platform$Cmd$none);
					}
				}
		}
	});
var $author$project$Incubator$Todoist$describeError = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var msg = error.a;
			return 'For some reason we were told the URL is bad. This should never happen, it\'s a perfectly tested working URL! The error: ' + msg;
		case 'Timeout':
			return 'Timed out. Try again later?';
		case 'NetworkError':
			return 'Couldn\'t get on the network. Are you offline?';
		case 'BadStatus':
			var status = error.a;
			switch (status) {
				case 400:
					return '400 Bad Request: The request was incorrect.';
				case 401:
					return '401 Unauthorized: Authentication is required, and has failed, or has not yet been provided. Maybe your API credentials are messed up?';
				case 403:
					return '403 Forbidden: The request was valid, but for something that is forbidden.';
				case 404:
					return '404 Not Found! That should never happen, because I definitely used the right URL. Is your system or proxy blocking or messing with internet requests? Is it many years in future, where Todoist API v8 has been deprecated, obseleted, and then discontinued? Or maybe it\'s far enough in the future that Todoist doesn\'t exist anymore but for some reason you\'re still using this library?';
				case 429:
					return '429 Too Many Requests: Slow down, cowboy! Check out the Todoist API Docs for Usage Limits. Maybe try batching more requests into one?';
				case 500:
					return '500 Internal Server Error: Not my fault! Todoist must be having a bad day.';
				case 502:
					return '502 Bad Gateway: I was trying to reach the Todoist server but I got stopped along the way. If you\'re definitely connected, it\'s probably a temporary hiccup on their side -- but if you see this a lot, check that your DNS is resolving (try todoist.com) and any proxy setup you have is working.';
				case 503:
					return '503 Service Unavailable: Not my fault! Todoist must be bogged down today, or perhaps experiencing a DDoS attack. :O';
				default:
					var other = status;
					return 'Got HTTP Error code ' + ($elm$core$String$fromInt(other) + ', not sure what that means in this case. Sorry!');
			}
		default:
			var string = error.a;
			return 'I successfully talked with Todoist servers, but the response had some weird parts I was never trained for. Either Todoist changed something recently, or you\'ve found a weird edge case the developer didn\'t know about. Either way, please report this! \n' + string;
	}
};
var $author$project$Integrations$Todoist$describeSuccess = function (report) {
	var _v0 = _Utils_Tuple3(
		$elm$core$Set$size(report.projectsAdded),
		$elm$core$Set$size(report.projectsDeleted),
		$elm$core$Set$size(report.projectsChanged));
	var projectsAdded = _v0.a;
	var projectsDeleted = _v0.b;
	var projectsModified = _v0.c;
	var totalProjectChanges = (projectsAdded + projectsDeleted) + projectsModified;
	var projectReport = (totalProjectChanges > 0) ? $elm$core$Maybe$Just(
		$elm$core$String$fromInt(totalProjectChanges) + (' projects updated (' + ($elm$core$String$fromInt(projectsAdded) + (' created, ' + ($elm$core$String$fromInt(projectsDeleted) + ' deleted)'))))) : $elm$core$Maybe$Nothing;
	var _v1 = _Utils_Tuple3(
		$elm$core$Set$size(report.itemsAdded),
		$elm$core$Set$size(report.itemsDeleted),
		$elm$core$Set$size(report.itemsChanged));
	var itemsAdded = _v1.a;
	var itemsDeleted = _v1.b;
	var itemsModified = _v1.c;
	var totalItemChanges = (itemsAdded + itemsDeleted) + itemsModified;
	var itemReport = (totalItemChanges > 0) ? $elm$core$Maybe$Just(
		$elm$core$String$fromInt(totalItemChanges) + (' items updated (' + ($elm$core$String$fromInt(itemsAdded) + (' created, ' + ($elm$core$String$fromInt(itemsDeleted) + ' deleted)'))))) : $elm$core$Maybe$Nothing;
	var reportList = A2(
		$elm$core$List$filterMap,
		$elm$core$Basics$identity,
		_List_fromArray(
			[itemReport, projectReport]));
	return 'Todoist sync complete: ' + ((!(totalProjectChanges + totalItemChanges)) ? 'Nothing changed since last sync.' : ($elm$core$String$concat(
		A2($elm$core$List$intersperse, ' and ', reportList)) + '.'));
};
var $elm_community$intdict$IntDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return acc;
				case 'Leaf':
					var l = dict.a;
					return A3(f, l.key, l.value, acc);
				default:
					var i = dict.a;
					var $temp$f = f,
						$temp$acc = A3($elm_community$intdict$IntDict$foldl, f, acc, i.left),
						$temp$dict = i.right;
					f = $temp$f;
					acc = $temp$acc;
					dict = $temp$dict;
					continue foldl;
			}
		}
	});
var $author$project$Incubator$IntDict$Extra$filterMap = F2(
	function (f, dict) {
		return A3(
			$elm_community$intdict$IntDict$foldl,
			F3(
				function (k, v, acc) {
					var _v0 = A2(f, k, v);
					if (_v0.$ === 'Just') {
						var newVal = _v0.a;
						return A3($elm_community$intdict$IntDict$insert, k, newVal, acc);
					} else {
						return acc;
					}
				}),
			$elm_community$intdict$IntDict$empty,
			dict);
	});
var $author$project$Integrations$Todoist$filterActivityProjects = F2(
	function (projects, activities) {
		var matchToID = F2(
			function (nameToTest, _v0) {
				var activityID = _v0.a;
				var nameList = _v0.b;
				return A2($elm$core$List$member, nameToTest, nameList) ? $elm$core$Maybe$Just(activityID) : $elm$core$Maybe$Nothing;
			});
		var activityIDsWithNames = A2(
			$elm$core$List$map,
			function (act) {
				return _Utils_Tuple2(
					$author$project$Activity$Activity$getID(act),
					$author$project$Activity$Activity$getNames(act));
			},
			$author$project$Activity$Activity$allUnhidden(activities));
		var activityNameMatches = function (nameToTest) {
			return A2(
				$elm$core$List$filterMap,
				matchToID(nameToTest),
				activityIDsWithNames);
		};
		var pickFirstMatch = function (nameToTest) {
			return $elm$core$List$head(
				activityNameMatches(nameToTest));
		};
		return A2(
			$author$project$Incubator$IntDict$Extra$filterMap,
			F2(
				function (i, p) {
					return pickFirstMatch(p.name);
				}),
			projects);
	});
var $elm_community$intdict$IntDict$filter = F2(
	function (predicate, dict) {
		var add = F3(
			function (k, v, d) {
				return A2(predicate, k, v) ? A3($elm_community$intdict$IntDict$insert, k, v, d) : d;
			});
		return A3($elm_community$intdict$IntDict$foldl, add, $elm_community$intdict$IntDict$empty, dict);
	});
var $author$project$Incubator$IntDict$Extra$filterValues = F2(
	function (func, dict) {
		return A2(
			$elm_community$intdict$IntDict$filter,
			F2(
				function (_v0, v) {
					return func(v);
				}),
			dict);
	});
var $elm_community$intdict$IntDict$Disjunct = F2(
	function (a, b) {
		return {$: 'Disjunct', a: a, b: b};
	});
var $elm_community$intdict$IntDict$Left = {$: 'Left'};
var $elm_community$intdict$IntDict$Parent = F2(
	function (a, b) {
		return {$: 'Parent', a: a, b: b};
	});
var $elm_community$intdict$IntDict$Right = {$: 'Right'};
var $elm_community$intdict$IntDict$SamePrefix = {$: 'SamePrefix'};
var $elm_community$intdict$IntDict$combineBits = F3(
	function (a, b, mask) {
		return (a & (~mask)) | (b & mask);
	});
var $elm_community$intdict$IntDict$mostSignificantBranchingBit = F2(
	function (a, b) {
		return (_Utils_eq(a, $elm_community$intdict$IntDict$signBit) || _Utils_eq(b, $elm_community$intdict$IntDict$signBit)) ? $elm_community$intdict$IntDict$signBit : A2($elm$core$Basics$max, a, b);
	});
var $elm_community$intdict$IntDict$determineBranchRelation = F2(
	function (l, r) {
		var rp = r.prefix;
		var lp = l.prefix;
		var mask = $elm_community$intdict$IntDict$highestBitSet(
			A2($elm_community$intdict$IntDict$mostSignificantBranchingBit, lp.branchingBit, rp.branchingBit));
		var modifiedRightPrefix = A3($elm_community$intdict$IntDict$combineBits, rp.prefixBits, ~lp.prefixBits, mask);
		var prefix = A2($elm_community$intdict$IntDict$lcp, lp.prefixBits, modifiedRightPrefix);
		var childEdge = F2(
			function (branchPrefix, c) {
				return A2($elm_community$intdict$IntDict$isBranchingBitSet, branchPrefix, c.prefix.prefixBits) ? $elm_community$intdict$IntDict$Right : $elm_community$intdict$IntDict$Left;
			});
		return _Utils_eq(lp, rp) ? $elm_community$intdict$IntDict$SamePrefix : (_Utils_eq(prefix, lp) ? A2(
			$elm_community$intdict$IntDict$Parent,
			$elm_community$intdict$IntDict$Left,
			A2(childEdge, l.prefix, r)) : (_Utils_eq(prefix, rp) ? A2(
			$elm_community$intdict$IntDict$Parent,
			$elm_community$intdict$IntDict$Right,
			A2(childEdge, r.prefix, l)) : A2(
			$elm_community$intdict$IntDict$Disjunct,
			prefix,
			A2(childEdge, prefix, l))));
	});
var $elm_community$intdict$IntDict$uniteWith = F3(
	function (merger, l, r) {
		var mergeWith = F3(
			function (key, left, right) {
				var _v14 = _Utils_Tuple2(left, right);
				if (_v14.a.$ === 'Just') {
					if (_v14.b.$ === 'Just') {
						var l2 = _v14.a.a;
						var r2 = _v14.b.a;
						return $elm$core$Maybe$Just(
							A3(merger, key, l2, r2));
					} else {
						return left;
					}
				} else {
					if (_v14.b.$ === 'Just') {
						return right;
					} else {
						var _v15 = _v14.a;
						var _v16 = _v14.b;
						return $elm$core$Maybe$Nothing;
					}
				}
			});
		var _v0 = _Utils_Tuple2(l, r);
		_v0$1:
		while (true) {
			_v0$2:
			while (true) {
				switch (_v0.a.$) {
					case 'Empty':
						var _v1 = _v0.a;
						return r;
					case 'Leaf':
						switch (_v0.b.$) {
							case 'Empty':
								break _v0$1;
							case 'Leaf':
								break _v0$2;
							default:
								break _v0$2;
						}
					default:
						switch (_v0.b.$) {
							case 'Empty':
								break _v0$1;
							case 'Leaf':
								var r2 = _v0.b.a;
								return A3(
									$elm_community$intdict$IntDict$update,
									r2.key,
									function (l_) {
										return A3(
											mergeWith,
											r2.key,
											l_,
											$elm$core$Maybe$Just(r2.value));
									},
									l);
							default:
								var il = _v0.a.a;
								var ir = _v0.b.a;
								var _v3 = A2($elm_community$intdict$IntDict$determineBranchRelation, il, ir);
								switch (_v3.$) {
									case 'SamePrefix':
										return A3(
											$elm_community$intdict$IntDict$inner,
											il.prefix,
											A3($elm_community$intdict$IntDict$uniteWith, merger, il.left, ir.left),
											A3($elm_community$intdict$IntDict$uniteWith, merger, il.right, ir.right));
									case 'Parent':
										if (_v3.a.$ === 'Left') {
											if (_v3.b.$ === 'Right') {
												var _v4 = _v3.a;
												var _v5 = _v3.b;
												return A3(
													$elm_community$intdict$IntDict$inner,
													il.prefix,
													il.left,
													A3($elm_community$intdict$IntDict$uniteWith, merger, il.right, r));
											} else {
												var _v8 = _v3.a;
												var _v9 = _v3.b;
												return A3(
													$elm_community$intdict$IntDict$inner,
													il.prefix,
													A3($elm_community$intdict$IntDict$uniteWith, merger, il.left, r),
													il.right);
											}
										} else {
											if (_v3.b.$ === 'Right') {
												var _v6 = _v3.a;
												var _v7 = _v3.b;
												return A3(
													$elm_community$intdict$IntDict$inner,
													ir.prefix,
													ir.left,
													A3($elm_community$intdict$IntDict$uniteWith, merger, l, ir.right));
											} else {
												var _v10 = _v3.a;
												var _v11 = _v3.b;
												return A3(
													$elm_community$intdict$IntDict$inner,
													ir.prefix,
													A3($elm_community$intdict$IntDict$uniteWith, merger, l, ir.left),
													ir.right);
											}
										}
									default:
										if (_v3.b.$ === 'Left') {
											var parentPrefix = _v3.a;
											var _v12 = _v3.b;
											return A3($elm_community$intdict$IntDict$inner, parentPrefix, l, r);
										} else {
											var parentPrefix = _v3.a;
											var _v13 = _v3.b;
											return A3($elm_community$intdict$IntDict$inner, parentPrefix, r, l);
										}
								}
						}
				}
			}
			var l2 = _v0.a.a;
			return A3(
				$elm_community$intdict$IntDict$update,
				l2.key,
				function (r_) {
					return A3(
						mergeWith,
						l2.key,
						$elm$core$Maybe$Just(l2.value),
						r_);
				},
				r);
		}
		var _v2 = _v0.b;
		return l;
	});
var $elm_community$intdict$IntDict$union = $elm_community$intdict$IntDict$uniteWith(
	F3(
		function (key, old, _new) {
			return old;
		}));
var $elm_community$maybe_extra$Maybe$Extra$unwrap = F3(
	function (_default, f, m) {
		if (m.$ === 'Nothing') {
			return _default;
		} else {
			var a = m.a;
			return f(a);
		}
	});
var $author$project$Integrations$Todoist$detectActivityProjects = F3(
	function (maybeParent, app, cache) {
		if (maybeParent.$ === 'Nothing') {
			return $elm_community$intdict$IntDict$empty;
		} else {
			var parentProjectID = maybeParent.a;
			var oldActivityLookupTable = app.todoist.activityProjectIDs;
			var hasTimetrackAsParent = function (p) {
				return A3(
					$elm_community$maybe_extra$Maybe$Extra$unwrap,
					false,
					$elm$core$Basics$eq(parentProjectID),
					p.parent_id);
			};
			var validActivityProjects = A2($author$project$Incubator$IntDict$Extra$filterValues, hasTimetrackAsParent, cache.projects);
			var newActivityLookupTable = A2($author$project$Integrations$Todoist$filterActivityProjects, validActivityProjects, app.activities);
			return A2($elm_community$intdict$IntDict$union, newActivityLookupTable, oldActivityLookupTable);
		}
	});
var $author$project$Incubator$IntDict$Extra$filterMapValues = F2(
	function (f, dict) {
		return A3(
			$elm_community$intdict$IntDict$foldl,
			F3(
				function (k, v, acc) {
					var _v0 = f(v);
					if (_v0.$ === 'Just') {
						var newVal = _v0.a;
						return A3($elm_community$intdict$IntDict$insert, k, newVal, acc);
					} else {
						return acc;
					}
				}),
			$elm_community$intdict$IntDict$empty,
			dict);
	});
var $author$project$Incubator$Todoist$pruneDeleted = function (items) {
	return A2(
		$author$project$Incubator$IntDict$Extra$filterValues,
		A2(
			$elm$core$Basics$composeL,
			$elm$core$Basics$not,
			function ($) {
				return $.is_deleted;
			}),
		items);
};
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$diff, dict1, dict2));
	});
var $elm$core$Set$filter = F2(
	function (isGood, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2(
				$elm$core$Dict$filter,
				F2(
					function (key, _v1) {
						return isGood(key);
					}),
				dict));
	});
var $elm_community$intdict$IntDict$get = F2(
	function (key, dict) {
		get:
		while (true) {
			switch (dict.$) {
				case 'Empty':
					return $elm$core$Maybe$Nothing;
				case 'Leaf':
					var l = dict.a;
					return _Utils_eq(l.key, key) ? $elm$core$Maybe$Just(l.value) : $elm$core$Maybe$Nothing;
				default:
					var i = dict.a;
					if (!A2($elm_community$intdict$IntDict$prefixMatches, i.prefix, key)) {
						return $elm$core$Maybe$Nothing;
					} else {
						if (A2($elm_community$intdict$IntDict$isBranchingBitSet, i.prefix, key)) {
							var $temp$key = key,
								$temp$dict = i.right;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						} else {
							var $temp$key = key,
								$temp$dict = i.left;
							key = $temp$key;
							dict = $temp$dict;
							continue get;
						}
					}
			}
		}
	});
var $elm_community$intdict$IntDict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm_community$intdict$IntDict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $author$project$Incubator$Todoist$summarizeChanges = F2(
	function (oldCache, _new) {
		var toIDSet = function (list) {
			return $elm$core$Set$fromList(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.id;
					},
					list));
		};
		var _v0 = _Utils_Tuple2(
			toIDSet(
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.is_deleted;
					},
					_new.items)),
			toIDSet(
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.is_deleted;
					},
					_new.projects)));
		var deletedItemIDs = _v0.a;
		var deletedProjectIDs = _v0.b;
		var _v1 = _Utils_Tuple2(
			toIDSet(_new.items),
			toIDSet(_new.projects));
		var allChangedItemIDs = _v1.a;
		var allChangedProjectIDs = _v1.b;
		var _v2 = _Utils_Tuple2(
			A2(
				$elm$core$Set$filter,
				function (id) {
					return !A2($elm_community$intdict$IntDict$member, id, oldCache.items);
				},
				allChangedItemIDs),
			A2(
				$elm$core$Set$filter,
				function (id) {
					return !A2($elm_community$intdict$IntDict$member, id, oldCache.projects);
				},
				allChangedProjectIDs));
		var newlyAddedItemIDs = _v2.a;
		var newlyAddedProjectIDs = _v2.b;
		var _v3 = _Utils_Tuple2(
			A2(
				$elm$core$Set$diff,
				allChangedItemIDs,
				A2($elm$core$Set$union, newlyAddedItemIDs, deletedItemIDs)),
			A2(
				$elm$core$Set$diff,
				allChangedProjectIDs,
				A2($elm$core$Set$union, newlyAddedProjectIDs, deletedProjectIDs)));
		var remainingItemIDs = _v3.a;
		var remainingProjectIDs = _v3.b;
		return {itemsAdded: newlyAddedItemIDs, itemsChanged: remainingItemIDs, itemsDeleted: deletedItemIDs, projectsAdded: newlyAddedProjectIDs, projectsChanged: remainingProjectIDs, projectsDeleted: deletedProjectIDs};
	});
var $author$project$Incubator$Todoist$handleResponse = F2(
	function (_v0, oldCache) {
		var response = _v0.a;
		if (response.$ === 'Ok') {
			var newStuff = response.a;
			var prune = function (inputDict) {
				return (!newStuff.full_sync) ? $author$project$Incubator$Todoist$pruneDeleted(inputDict) : inputDict;
			};
			var _v2 = _Utils_Tuple2(
				$elm_community$intdict$IntDict$fromList(
					A2(
						$elm$core$List$map,
						function (i) {
							return _Utils_Tuple2(i.id, i);
						},
						newStuff.items)),
				$elm_community$intdict$IntDict$fromList(
					A2(
						$elm$core$List$map,
						function (p) {
							return _Utils_Tuple2(p.id, p);
						},
						newStuff.projects)));
			var itemsDict = _v2.a;
			var projectsDict = _v2.b;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					{
						items: prune(
							A2($elm_community$intdict$IntDict$union, itemsDict, oldCache.items)),
						nextSync: A2($elm$core$Maybe$withDefault, oldCache.nextSync, newStuff.sync_token),
						pendingCommands: _List_Nil,
						projects: prune(
							A2($elm_community$intdict$IntDict$union, projectsDict, oldCache.projects))
					},
					A2($author$project$Incubator$Todoist$summarizeChanges, oldCache, newStuff)));
		} else {
			var err = response.a;
			return $elm$core$Result$Err(err);
		}
	});
var $elm_community$intdict$IntDict$map = F2(
	function (f, dict) {
		switch (dict.$) {
			case 'Empty':
				return $elm_community$intdict$IntDict$empty;
			case 'Leaf':
				var l = dict.a;
				return A2(
					$elm_community$intdict$IntDict$leaf,
					l.key,
					A2(f, l.key, l.value));
			default:
				var i = dict.a;
				return A3(
					$elm_community$intdict$IntDict$inner,
					i.prefix,
					A2($elm_community$intdict$IntDict$map, f, i.left),
					A2($elm_community$intdict$IntDict$map, f, i.right));
		}
	});
var $author$project$Incubator$IntDict$Extra$mapValues = F2(
	function (func, dict) {
		return A2(
			$elm_community$intdict$IntDict$map,
			F2(
				function (_v0, v) {
					return func(v);
				}),
			dict);
	});
var $author$project$Profile$saveError = F2(
	function (appData, error) {
		return A3(
			$author$project$Replicated$Reducer$RepList$append,
			$author$project$Replicated$Reducer$RepList$Last,
			_List_fromArray(
				[error]),
			appData.errors);
	});
var $author$project$Integrations$Todoist$itemToTask = F2(
	function (activityID, item) {
		return _Debug_todo(
			'Integrations.Todoist',
			{
				start: {line: 283, column: 5},
				end: {line: 283, column: 15}
			})('todoist items need to use changers');
	});
var $author$project$Integrations$Todoist$timetrackItemToTask = F2(
	function (lookup, item) {
		var _v0 = A2($elm_community$intdict$IntDict$get, item.project_id, lookup);
		if (_v0.$ === 'Just') {
			var act = _v0.a;
			return $elm$core$Maybe$Just(
				A2($author$project$Integrations$Todoist$itemToTask, act, item));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm_community$intdict$IntDict$keys = function (dict) {
	return A3(
		$elm_community$intdict$IntDict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Integrations$Todoist$tryGetTimetrackParentProject = F2(
	function (localData, cache) {
		var _v0 = localData.parentProjectID;
		if (_v0.$ === 'Just') {
			var parentProjectID = _v0.a;
			return $elm$core$Maybe$Just(parentProjectID);
		} else {
			return $elm$core$List$head(
				$elm_community$intdict$IntDict$keys(
					A2(
						$elm_community$intdict$IntDict$filter,
						F2(
							function (_v1, p) {
								return p.name === 'Timetrack';
							}),
						cache.projects)));
		}
	});
var $author$project$Integrations$Todoist$handle = F2(
	function (msg, app) {
		var _v0 = A2($author$project$Incubator$Todoist$handleResponse, msg, app.todoist.cache);
		if (_v0.$ === 'Ok') {
			var _v1 = _v0.a;
			var newCache = _v1.a;
			var changes = _v1.b;
			var newMaybeParent = A2($author$project$Integrations$Todoist$tryGetTimetrackParentProject, app.todoist, newCache);
			var projectToActivityMapping = A3($author$project$Integrations$Todoist$detectActivityProjects, newMaybeParent, app, newCache);
			var newTodoistData = {activityProjectIDs: projectToActivityMapping, cache: newCache, parentProjectID: newMaybeParent};
			var finalChanges = _List_Nil;
			var convertItemsToTasks = A2(
				$author$project$Incubator$IntDict$Extra$filterMapValues,
				$author$project$Integrations$Todoist$timetrackItemToTask(projectToActivityMapping),
				newCache.items);
			var _v2 = _Utils_Tuple2(
				A2($author$project$Incubator$IntDict$Extra$mapValues, $elm$core$Tuple$first, convertItemsToTasks),
				A2($author$project$Incubator$IntDict$Extra$mapValues, $elm$core$Tuple$second, convertItemsToTasks));
			var newClasses = _v2.a;
			var newInstances = _v2.b;
			return _Utils_Tuple2(
				A2($author$project$Replicated$Change$saveChanges, '', finalChanges),
				$author$project$Integrations$Todoist$describeSuccess(changes));
		} else {
			var err = _v0.a;
			var description = $author$project$Incubator$Todoist$describeError(err);
			return _Utils_Tuple2(
				A2(
					$author$project$Replicated$Change$saveChanges,
					'',
					_List_fromArray(
						[
							A2($author$project$Profile$saveError, app, description)
						])),
				description);
		}
	});
var $hariroshan$elm_native$Native$Frame$handleBack = F2(
	function (isBackNavigation, model) {
		if (!isBackNavigation) {
			return model;
		} else {
			var _v0 = model.history;
			if (!_v0.b) {
				return model;
			} else {
				var cur = _v0.a;
				var rest = _v0.b;
				return _Utils_update(
					model,
					{current: cur, history: rest, popStack: false});
			}
		}
	});
var $author$project$DevTools$init = F3(
	function (profile, environment, ron) {
		return _Utils_Tuple2(
			$author$project$DevTools$ViewState(ron),
			$elm$core$Platform$Cmd$none);
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$getContainerSize = function (id) {
	return A2(
		$elm$core$Task$attempt,
		function (rvp) {
			if (rvp.$ === 'Ok') {
				var vp = rvp.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$Widget$WidgetResize(
					$elm$core$Maybe$Just(
						_Utils_Tuple2(vp.viewport.width, vp.viewport.height)));
			} else {
				return $MacCASOutreach$graphicsvg$GraphicSVG$Widget$WidgetResize(
					$elm$core$Maybe$Just(
						_Utils_Tuple2(0, 0)));
			}
		},
		$elm$browser$Browser$Dom$getViewportOf(id));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$init = F3(
	function (w, h, id) {
		return _Utils_Tuple2(
			{ch: h, cw: w, id: id, wh: 0, ww: 0},
			$MacCASOutreach$graphicsvg$GraphicSVG$Widget$getContainerSize(id));
	});
var $author$project$SmartTime$Human$Calendar$Week$Sun = {$: 'Sun'};
var $author$project$SmartTime$Human$Moment$setTime = F3(
	function (newTime, zone, moment) {
		var _v0 = A2($author$project$SmartTime$Human$Moment$humanize, zone, moment);
		var oldDate = _v0.a;
		return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, oldDate, newTime);
	});
var $author$project$SmartTime$Human$Moment$clockTurnBack = F3(
	function (timeOfDay, zone, moment) {
		var newMoment = A3($author$project$SmartTime$Human$Moment$setTime, timeOfDay, zone, moment);
		return _Utils_eq(
			A2($author$project$SmartTime$Moment$compare, newMoment, moment),
			$author$project$SmartTime$Moment$Earlier) ? newMoment : A2($author$project$SmartTime$Moment$past, newMoment, $author$project$SmartTime$Duration$aDay);
	});
var $author$project$SmartTime$Human$Moment$clockTurnForward = F3(
	function (timeOfDay, zone, moment) {
		var newMoment = A3($author$project$SmartTime$Human$Moment$setTime, timeOfDay, zone, moment);
		return _Utils_eq(
			A2($author$project$SmartTime$Moment$compare, newMoment, moment),
			$author$project$SmartTime$Moment$Later) ? newMoment : A2($author$project$SmartTime$Moment$future, newMoment, $author$project$SmartTime$Duration$aDay);
	});
var $author$project$SmartTime$Period$divide = F2(
	function (chunkLength, givenPeriod) {
		var addRemaining = F2(
			function (lastEnd, currentList) {
				var nextEnd = A2($author$project$SmartTime$Moment$future, lastEnd, chunkLength);
				var finalEnd = $author$project$SmartTime$Period$end(givenPeriod);
				var nextVsFinal = A2($author$project$SmartTime$Moment$compare, nextEnd, finalEnd);
				switch (nextVsFinal.$) {
					case 'Earlier':
						return A2(
							addRemaining,
							nextEnd,
							_Utils_ap(
								currentList,
								_List_fromArray(
									[
										A2($author$project$SmartTime$Period$Period, lastEnd, nextEnd)
									])));
					case 'Coincident':
						return _Utils_ap(
							currentList,
							_List_fromArray(
								[
									A2($author$project$SmartTime$Period$Period, lastEnd, nextEnd)
								]));
					default:
						return currentList;
				}
			});
		return A2(
			addRemaining,
			$author$project$SmartTime$Period$start(givenPeriod),
			_List_Nil);
	});
var $author$project$SmartTime$Human$Moment$extractDate = F2(
	function (zone, moment) {
		return A2($author$project$SmartTime$Human$Moment$humanize, zone, moment).a;
	});
var $author$project$SmartTime$Human$Calendar$Week$Fri = {$: 'Fri'};
var $author$project$SmartTime$Human$Calendar$Week$Mon = {$: 'Mon'};
var $author$project$SmartTime$Human$Calendar$Week$Sat = {$: 'Sat'};
var $author$project$SmartTime$Human$Calendar$Week$Thu = {$: 'Thu'};
var $author$project$SmartTime$Human$Calendar$Week$Tue = {$: 'Tue'};
var $author$project$SmartTime$Human$Calendar$Week$Wed = {$: 'Wed'};
var $author$project$SmartTime$Human$Calendar$Week$numberToDay = function (n) {
	var _v0 = A2($elm$core$Basics$max, 1, n);
	switch (_v0) {
		case 1:
			return $author$project$SmartTime$Human$Calendar$Week$Mon;
		case 2:
			return $author$project$SmartTime$Human$Calendar$Week$Tue;
		case 3:
			return $author$project$SmartTime$Human$Calendar$Week$Wed;
		case 4:
			return $author$project$SmartTime$Human$Calendar$Week$Thu;
		case 5:
			return $author$project$SmartTime$Human$Calendar$Week$Fri;
		case 6:
			return $author$project$SmartTime$Human$Calendar$Week$Sat;
		default:
			return $author$project$SmartTime$Human$Calendar$Week$Sun;
	}
};
var $author$project$SmartTime$Human$Calendar$dayOfWeek = function (_v0) {
	var rd = _v0.a;
	var dayNum = function () {
		var _v1 = A2($elm$core$Basics$modBy, 7, rd);
		if (!_v1) {
			return 7;
		} else {
			var n = _v1;
			return n;
		}
	}();
	return $author$project$SmartTime$Human$Calendar$Week$numberToDay(dayNum);
};
var $author$project$SmartTime$Human$Calendar$Week$dayToInt = function (d) {
	switch (d.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $author$project$SmartTime$Human$Calendar$daysSincePrevious = F2(
	function (givenDoW, givenDate) {
		var dayOfWeekAsInt = $author$project$SmartTime$Human$Calendar$Week$dayToInt(
			$author$project$SmartTime$Human$Calendar$dayOfWeek(givenDate));
		return A2(
			$elm$core$Basics$modBy,
			7,
			(dayOfWeekAsInt + 7) - $author$project$SmartTime$Human$Calendar$Week$dayToInt(givenDoW));
	});
var $author$project$SmartTime$Human$Calendar$toPrevious = F2(
	function (givenDoW, givenDate) {
		var _v0 = givenDate;
		var givenDateRD = _v0.a;
		return $author$project$SmartTime$Human$Calendar$CalendarDate(
			givenDateRD - A2($author$project$SmartTime$Human$Calendar$daysSincePrevious, givenDoW, givenDate));
	});
var $author$project$SmartTime$Human$Calendar$toNext = F2(
	function (givenDoW, givenDate) {
		var _v0 = givenDate;
		var givenDateRD = _v0.a;
		return A2(
			$author$project$SmartTime$Human$Calendar$toPrevious,
			givenDoW,
			$author$project$SmartTime$Human$Calendar$CalendarDate(givenDateRD + 7));
	});
var $author$project$Timeflow$updateViewSettings = F2(
	function (profile, env) {
		var timePerRow = $author$project$SmartTime$Duration$fromMinutes(30);
		var rowHeight = 3;
		var chosenDayCutoffTime = $author$project$SmartTime$Human$Duration$build(
			_List_fromArray(
				[
					$author$project$SmartTime$Human$Duration$Hours(3)
				]));
		var today = $author$project$SmartTime$Period$fromPair(
			_Utils_Tuple2(
				A3($author$project$SmartTime$Human$Moment$clockTurnBack, chosenDayCutoffTime, env.timeZone, env.time),
				A3($author$project$SmartTime$Human$Moment$clockTurnForward, chosenDayCutoffTime, env.timeZone, env.time)));
		var week = $author$project$SmartTime$Period$fromPair(
			_Utils_Tuple2(
				A3(
					$author$project$SmartTime$Human$Moment$fromDateAndTime,
					env.timeZone,
					A2(
						$author$project$SmartTime$Human$Calendar$toPrevious,
						$author$project$SmartTime$Human$Calendar$Week$Sun,
						A2($author$project$SmartTime$Human$Moment$extractDate, env.timeZone, env.time)),
					chosenDayCutoffTime),
				A3(
					$author$project$SmartTime$Human$Moment$fromDateAndTime,
					env.timeZone,
					A2(
						$author$project$SmartTime$Human$Calendar$toNext,
						$author$project$SmartTime$Human$Calendar$Week$Sun,
						A2($author$project$SmartTime$Human$Moment$extractDate, env.timeZone, env.time)),
					chosenDayCutoffTime)));
		var chosenPeriod = week;
		var rowCount = $elm$core$List$length(
			A2($author$project$SmartTime$Period$divide, timePerRow, chosenPeriod)) * rowHeight;
		return {
			flowRenderPeriod: chosenPeriod,
			hourRowSize: timePerRow,
			pivotMoment: A3($author$project$SmartTime$Human$Moment$clockTurnBack, chosenDayCutoffTime, env.timeZone, env.time),
			rowHeight: rowHeight,
			rows: rowCount
		};
	});
var $author$project$Timeflow$init = F2(
	function (profile, environment) {
		var initialSettings = A2($author$project$Timeflow$updateViewSettings, profile, environment);
		var initialWidgetHeight = initialSettings.rowHeight * initialSettings.rows;
		var _v0 = A3($MacCASOutreach$graphicsvg$GraphicSVG$Widget$init, 100, 1000, '0');
		var widget1state = _v0.a;
		var widget1init = _v0.b;
		return _Utils_Tuple2(
			{
				dragging: $elm$core$Maybe$Nothing,
				pointer: {x: 0.0, y: 0.0},
				settings: initialSettings,
				widgets: $elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'0',
							_Utils_Tuple2(widget1state, widget1init))
						]))
			},
			A2(
				$elm$core$Platform$Cmd$map,
				$author$project$Timeflow$WidgetMsg('0'),
				widget1init));
	});
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $author$project$NativeScript$Notification$setAccentColor = F2(
	function (accentColor, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				accentColor: $elm$core$Maybe$Just(accentColor)
			});
	});
var $author$project$NativeScript$Notification$setBigTextStyle = F2(
	function (bigTextStyle, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				bigTextStyle: $elm$core$Maybe$Just(bigTextStyle)
			});
	});
var $author$project$NativeScript$Notification$setBody = F2(
	function (body, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				body: $elm$core$Maybe$Just(body)
			});
	});
var $author$project$NativeScript$Notification$setChannelDescription = F2(
	function (text, givenChannel) {
		return _Utils_update(
			givenChannel,
			{
				description: $elm$core$Maybe$Just(text)
			});
	});
var $author$project$NativeScript$Notification$setChannelGroup = F2(
	function (text, givenChannel) {
		return _Utils_update(
			givenChannel,
			{
				group: $elm$core$Maybe$Just(text)
			});
	});
var $author$project$NativeScript$Notification$setChannelImportance = F2(
	function (givenImportance, givenChannel) {
		return _Utils_update(
			givenChannel,
			{
				importance: $elm$core$Maybe$Just(givenImportance)
			});
	});
var $author$project$NativeScript$Notification$setExpiresAfter = F2(
	function (expiresAfter, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				expiresAfter: $elm$core$Maybe$Just(expiresAfter)
			});
	});
var $author$project$NativeScript$Notification$setGroup = F2(
	function (group, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				group: $elm$core$Maybe$Just(group)
			});
	});
var $author$project$NativeScript$Notification$setID = F2(
	function (id, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				id: $elm$core$Maybe$Just(id)
			});
	});
var $author$project$NativeScript$Notification$setSubtitle = F2(
	function (subtitle, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				subtitle: $elm$core$Maybe$Just(subtitle)
			});
	});
var $author$project$NativeScript$Notification$setTitle = F2(
	function (title, givenNotif) {
		return _Utils_update(
			givenNotif,
			{
				title: $elm$core$Maybe$Just(title)
			});
	});
var $author$project$Replicated$Reducer$RepDb$size = function (_v0) {
	var record = _v0.a;
	return $turboMaCk$any_dict$Dict$Any$size(record.members);
};
var $author$project$DevTools$update = F4(
	function (msg, state, _v0, _v1) {
		var change = msg.a;
		return _Utils_Tuple3(
			state,
			A2(
				$author$project$Replicated$Change$saveChanges,
				'Simple change',
				_List_fromArray(
					[change])),
			$elm$core$Platform$Cmd$none);
	});
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $author$project$Task$AssignedAction$initWithClass = F2(
	function (actionClassID, context) {
		return A3(
			$author$project$Replicated$Codec$seededNew,
			$author$project$Task$AssignedAction$codec,
			context,
			_Utils_Tuple2(
				actionClassID,
				function (_v0) {
					return _List_Nil;
				}));
	});
var $author$project$Task$ActionClass$normalizeTitle = function (newTaskTitle) {
	return $elm$core$String$trim(newTaskTitle);
};
var $author$project$TaskList$update = F4(
	function (msg, state, profile, env) {
		switch (msg.$) {
			case 'Add':
				if (state.c === '') {
					var filters = state.a;
					return _Utils_Tuple3(
						A3($author$project$TaskList$Normal, filters, $elm$core$Maybe$Nothing, ''),
						$author$project$Replicated$Change$none,
						$elm$core$Platform$Cmd$none);
				} else {
					var filters = state.a;
					var newTaskTitle = state.c;
					var newAction = function (c) {
						var newClassChanger = function (newClass) {
							return _List_fromArray(
								[
									A2(
									$author$project$Replicated$Reducer$RepDb$addNew,
									$author$project$Task$AssignedAction$initWithClass(
										$author$project$ID$fromPointer(
											$author$project$Replicated$Reducer$Register$getPointer(newClass))),
									profile.taskInstances)
								]);
						};
						return A3(
							$author$project$Task$ActionClass$newActionClassSkel,
							c,
							$author$project$Task$ActionClass$normalizeTitle('Action: ' + newTaskTitle),
							newClassChanger);
					};
					var frameDescription = 'Added new task class: ' + newTaskTitle;
					var finalChanges = _List_fromArray(
						[
							A3($author$project$Replicated$Reducer$RepList$insert, $author$project$Replicated$Reducer$RepList$Last, 'Added item: ' + newTaskTitle, profile.errors),
							A3(
							$author$project$Replicated$Reducer$RepList$insertNew,
							$author$project$Replicated$Reducer$RepList$Last,
							_List_fromArray(
								[
									function (c) {
									return A2(
										$author$project$Task$Entry$initWithClass,
										newAction(
											A2($author$project$Replicated$Change$reuseContext, 'action', c)),
										c);
								}
								]),
							profile.taskEntries)
						]);
					return _Utils_Tuple3(
						A3($author$project$TaskList$Normal, filters, $elm$core$Maybe$Nothing, ''),
						A2($author$project$Replicated$Change$saveChanges, frameDescription, finalChanges),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateNewEntryField':
				var typedSoFar = msg.a;
				return _Utils_Tuple3(
					function () {
						var _v2 = state;
						var filters = _v2.a;
						var expanded = _v2.b;
						return A3($author$project$TaskList$Normal, filters, expanded, typedSoFar);
					}(),
					$author$project$Replicated$Change$none,
					$elm$core$Platform$Cmd$none);
			case 'EditingTitle':
				var _class = msg.a;
				var isEditing = msg.b;
				var updateTask = function (t) {
					return t;
				};
				var focus = $elm$browser$Browser$Dom$focus(
					'task-' + $author$project$ID$toString(_class.classID));
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 919, column: 13},
						end: {line: 919, column: 23}
					})('editing title');
			case 'UpdateTitle':
				var _class = msg.a;
				var task = msg.b;
				var updateTitle = function (t) {
					return _Utils_update(
						t,
						{title: task});
				};
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 930, column: 13},
						end: {line: 930, column: 23}
					})('UpdateTitle');
			case 'UpdateTaskDate':
				var id = msg.a;
				var field = msg.b;
				var date = msg.c;
				var updateTask = function (t) {
					return _Utils_update(
						t,
						{externalDeadline: date});
				};
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 941, column: 13},
						end: {line: 941, column: 23}
					})('UpdateTaskDate');
			case 'Delete':
				var id = msg.a;
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 948, column: 13},
						end: {line: 948, column: 23}
					})('Delete');
			case 'DeleteComplete':
				return _Utils_Tuple3(state, $author$project$Replicated$Change$none, $elm$core$Platform$Cmd$none);
			case 'UpdateProgress':
				var givenTask = msg.a;
				var newCompletion = msg.b;
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 1008, column: 13},
						end: {line: 1008, column: 23}
					})('completion update');
			case 'FocusSlider':
				var task = msg.a;
				var focused = msg.b;
				return _Utils_Tuple3(state, $author$project$Replicated$Change$none, $elm$core$Platform$Cmd$none);
			case 'NoOp':
				return _Utils_Tuple3(state, $author$project$Replicated$Change$none, $elm$core$Platform$Cmd$none);
			case 'TodoistServerResponse':
				var response = msg.a;
				var _v3 = A2($author$project$Integrations$Todoist$handle, response, profile);
				var todoistChanges = _v3.a;
				var whatHappened = _v3.b;
				return _Utils_Tuple3(
					state,
					todoistChanges,
					$author$project$External$Commands$toast(whatHappened));
			case 'MarvinServerResponse':
				var response = msg.a;
				return _Utils_Tuple3(state, $author$project$Replicated$Change$none, $elm$core$Platform$Cmd$none);
			case 'Refilter':
				var newList = msg.a;
				return _Utils_Tuple3(
					function () {
						var filterList = state.a;
						var expandedTaskMaybe = state.b;
						var newTaskField = state.c;
						return A3($author$project$TaskList$Normal, newList, expandedTaskMaybe, newTaskField);
					}(),
					$author$project$Replicated$Change$none,
					$elm$core$Platform$Cmd$none);
			case 'StartTracking':
				var instanceID = msg.a;
				var activityID = msg.b;
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 1059, column: 13},
						end: {line: 1059, column: 23}
					})('start tracking');
			case 'StopTracking':
				var instanceID = msg.a;
				return _Debug_todo(
					'TaskList',
					{
						start: {line: 1079, column: 13},
						end: {line: 1079, column: 23}
					})('stop tracking');
			default:
				var change = msg.a;
				return _Utils_Tuple3(
					state,
					A2(
						$author$project$Replicated$Change$saveChanges,
						'Simple change',
						_List_fromArray(
							[change])),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Activity$Activity$getMaxTime = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		var builtInSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).maxTime,
			builtInSkel.maxTime.get);
	} else {
		var template = act.a;
		var customSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).maxTime,
			customSkel.maxTime.get);
	}
};
var $author$project$SmartTime$Duration$inMinutesRounded = function (duration) {
	return $elm$core$Basics$round(
		$author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$minuteLength);
};
var $author$project$TimeTracker$writeActivityUsage = F3(
	function (app, _v0, activity) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var maxTimeDenominator = $author$project$Activity$Activity$getMaxTime(activity).b;
		var lastPeriod = A2(
			$author$project$SmartTime$Period$fromEnd,
			time,
			$author$project$SmartTime$Human$Duration$dur(maxTimeDenominator));
		var total = A4(
			$author$project$Activity$Timeline$activityTotalDurationLive,
			lastPeriod,
			time,
			app.timeline,
			$author$project$Activity$Activity$getID(activity));
		var totalMinutes = $author$project$SmartTime$Duration$inMinutesRounded(total);
		return ($author$project$SmartTime$Duration$inMs(total) > 0) ? ($elm$core$String$fromInt(totalMinutes) + ('/' + ($elm$core$String$fromInt(
			$author$project$SmartTime$Duration$inMinutesRounded(
				$author$project$SmartTime$Human$Duration$toDuration(maxTimeDenominator))) + 'm'))) : '';
	});
var $author$project$TimeTracker$exportActivityViewModel = F2(
	function (appData, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var encodeActivityVM = function (activity) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(
							$author$project$Activity$Activity$getName(activity))),
						_Utils_Tuple2(
						'excusedUsage',
						$elm$json$Json$Encode$string(
							A3(
								$author$project$TimeTracker$writeActivityUsage,
								appData,
								_Utils_Tuple2(time, timeZone),
								activity))),
						_Utils_Tuple2(
						'totalToday',
						$elm$json$Json$Encode$string(
							A3(
								$author$project$TimeTracker$writeActivityUsage,
								appData,
								_Utils_Tuple2(time, timeZone),
								activity)))
					]));
		};
		return A2(
			$elm$json$Json$Encode$list,
			encodeActivityVM,
			A2(
				$elm$core$List$filter,
				$author$project$Activity$Activity$isShowing,
				$author$project$Activity$Activity$allUnhidden(appData.activities)));
	});
var $author$project$Refocus$switchActivity = F3(
	function (newActivityID, profile, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A4(
			$author$project$Refocus$switchTracking,
			newActivityID,
			$elm$core$Maybe$Nothing,
			profile,
			_Utils_Tuple2(time, timeZone));
	});
var $author$project$External$Tasker$variableOut = _Platform_outgoingPort(
	'variableOut',
	function ($) {
		var a = $.a;
		var b = $.b;
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$string(a),
					$elm$json$Json$Encode$string(b)
				]));
	});
var $author$project$TimeTracker$update = F4(
	function (msg, state, app, _v0) {
		var time = _v0.a;
		var timeZone = _v0.b;
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple3($author$project$Replicated$Change$none, state, $elm$core$Platform$Cmd$none);
			case 'StartTracking':
				var activityId = msg.a;
				var _v2 = A3(
					$author$project$Refocus$switchActivity,
					activityId,
					app,
					_Utils_Tuple2(time, timeZone));
				var changes = _v2.a;
				var cmds = _v2.b;
				return _Utils_Tuple3(
					A2($author$project$Replicated$Change$saveChanges, 'Started tracking', changes),
					state,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[cmds])));
			default:
				return _Utils_Tuple3(
					$author$project$Replicated$Change$none,
					state,
					$author$project$External$Tasker$variableOut(
						_Utils_Tuple2(
							'activities',
							A2(
								$elm$json$Json$Encode$encode,
								0,
								A2(
									$author$project$TimeTracker$exportActivityViewModel,
									app,
									_Utils_Tuple2(time, timeZone))))));
		}
	});
var $author$project$Timeflow$DraggingStarted = function (a) {
	return {$: 'DraggingStarted', a: a};
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $author$project$Timeflow$blockBrokenCoord = function (coord) {
	return ($elm$core$Basics$isInfinite(coord) || $elm$core$Basics$isNaN(coord)) ? 0 : coord;
};
var $author$project$Timeflow$MouseUp = {$: 'MouseUp'};
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Timeflow$scrollToCenterCmd = function () {
	var outcomeToMsg = function (result) {
		if (result.$ === 'Ok') {
			return $author$project$Timeflow$MouseUp;
		} else {
			var err = result.a;
			return _Utils_Tuple2(
				A2($author$project$Log$log, 'problem scrolling to center!', err),
				$author$project$Timeflow$MouseUp).b;
		}
	};
	return A2(
		$elm$core$Task$attempt,
		outcomeToMsg,
		A2(
			$elm$core$Task$andThen,
			function (info) {
				return A3($elm$browser$Browser$Dom$setViewportOf, 'page-viewport', 0, info.scene.height * 0.384);
			},
			$elm$browser$Browser$Dom$getViewportOf('page-viewport')));
}();
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$update = F2(
	function (msg, model) {
		var mWH = msg.a;
		if (mWH.$ === 'Just') {
			var _v2 = mWH.a;
			var w = _v2.a;
			var h = _v2.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{wh: h, ww: w}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(
				model,
				$MacCASOutreach$graphicsvg$GraphicSVG$Widget$getContainerSize(model.id));
		}
	});
var $author$project$Timeflow$update = F4(
	function (msg, stateMaybe, profile, env) {
		if (stateMaybe.$ === 'Just') {
			var state = stateMaybe.a;
			switch (msg.$) {
				case 'ChangeTimeWindow':
					var newStart = msg.a;
					var newFinish = msg.b;
					var withoutNewPeriodToRender = A2($author$project$Timeflow$updateViewSettings, profile, env);
					var withNewPeriodToRender = _Utils_update(
						withoutNewPeriodToRender,
						{
							flowRenderPeriod: $author$project$SmartTime$Period$fromPair(
								_Utils_Tuple2(newStart, newFinish))
						});
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						_Utils_update(
							state,
							{settings: withNewPeriodToRender}),
						$elm$core$Platform$Cmd$none);
				case 'WidgetMsg':
					var widgetID = msg.a;
					var widgetMsg = msg.b;
					var _v2 = A2($elm$core$Dict$get, widgetID, state.widgets);
					if (_v2.$ === 'Nothing') {
						return _Debug_todo(
							'Timeflow',
							{
								start: {line: 1007, column: 29},
								end: {line: 1007, column: 39}
							})('Tried to update a widget that has no stored state');
					} else {
						var _v3 = _v2.a;
						var oldWidgetState = _v3.a;
						var widgetInitCmd = _v3.b;
						var _v4 = A2($MacCASOutreach$graphicsvg$GraphicSVG$Widget$update, widgetMsg, oldWidgetState);
						var newWidgetState = _v4.a;
						var widgetOutCmds = _v4.b;
						var newWidgetDict = A3(
							$elm$core$Dict$insert,
							widgetID,
							_Utils_Tuple2(newWidgetState, widgetInitCmd),
							state.widgets);
						return _Utils_Tuple3(
							$author$project$Replicated$Change$none,
							_Utils_update(
								state,
								{widgets: newWidgetDict}),
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Timeflow$WidgetMsg(widgetID),
								widgetOutCmds));
					}
				case 'PointerMove':
					var _v5 = msg.a;
					var x = _v5.a;
					var y = _v5.b;
					var oldPointer = state.pointer;
					var newPointer = _Utils_update(
						oldPointer,
						{
							x: $author$project$Timeflow$blockBrokenCoord(x),
							y: $author$project$Timeflow$blockBrokenCoord(y)
						});
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						_Utils_update(
							state,
							{pointer: newPointer}),
						$elm$core$Platform$Cmd$none);
				case 'MouseDownAt':
					var itemID = msg.a;
					var startPoint = msg.b;
					var dragState = $author$project$Timeflow$DraggingStarted(
						{current: startPoint, id: itemID, start: startPoint});
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						_Utils_update(
							state,
							{
								dragging: $elm$core$Maybe$Just(dragState)
							}),
						$elm$core$Platform$Cmd$none);
				case 'MouseUp':
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						_Utils_update(
							state,
							{dragging: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple3(
						$author$project$Replicated$Change$none,
						_Utils_update(
							state,
							{dragging: $elm$core$Maybe$Nothing}),
						$author$project$Timeflow$scrollToCenterCmd);
			}
		} else {
			var _v6 = A2($author$project$Timeflow$init, profile, env);
			var initState = _v6.a;
			var initCmd = _v6.b;
			return _Utils_Tuple3(
				$author$project$Replicated$Change$none,
				initState,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[initCmd, $author$project$Timeflow$scrollToCenterCmd])));
		}
	});
var $author$project$Main$update = F2(
	function (msg, _v0) {
		var temp = _v0.temp;
		var replica = _v0.replica;
		var now = _v0.now;
		var viewState = temp.viewState;
		var noOp = _Utils_Tuple3(_List_Nil, temp, $elm$core$Platform$Cmd$none);
		var justSetEnv = function (newEnv) {
			return _Utils_Tuple3(
				_List_Nil,
				_Utils_update(
					temp,
					{environment: newEnv}),
				$elm$core$Platform$Cmd$none);
		};
		var environment = function () {
			var oldEnv = temp.environment;
			return _Utils_update(
				oldEnv,
				{time: now});
		}();
		var newTemp = _Utils_update(
			temp,
			{environment: environment});
		var justRunCommand = function (command) {
			return _Utils_Tuple3(_List_Nil, newTemp, command);
		};
		switch (msg.$) {
			case 'ResizeViewport':
				var newWidth = msg.a;
				var newHeight = msg.b;
				return _Utils_Tuple3(
					_List_Nil,
					_Utils_update(
						newTemp,
						{
							viewportSize: {height: newHeight, width: newWidth},
							viewportSizeClass: $mdgriffith$elm_ui$Element$classifyDevice(
								{height: newHeight, width: newWidth})._class
						}),
					$elm$core$Platform$Cmd$none);
			case 'VisibilityChanged':
				var newVisibility = msg.a;
				return _Utils_Tuple3(
					_List_Nil,
					_Utils_update(
						newTemp,
						{windowVisibility: newVisibility}),
					$elm$core$Platform$Cmd$none);
			case 'MouseMoved':
				return _Utils_Tuple3(_List_Nil, newTemp, $elm$core$Platform$Cmd$none);
			case 'NoOp':
				return _Utils_Tuple3(_List_Nil, newTemp, $elm$core$Platform$Cmd$none);
			case 'ClearErrors':
				return _Utils_Tuple3(_List_Nil, newTemp, $elm$core$Platform$Cmd$none);
			case 'ThirdPartySync':
				var service = msg.a;
				if (service.$ === 'Todoist') {
					return justRunCommand(
						A2(
							$elm$core$Platform$Cmd$map,
							$author$project$Main$ThirdPartyServerResponded,
							A2(
								$elm$core$Platform$Cmd$map,
								$author$project$Main$TodoistServer,
								$author$project$Integrations$Todoist$fetchUpdates(replica.todoist))));
				} else {
					return justRunCommand(
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$ThirdPartyServerResponded,
									A2($elm$core$Platform$Cmd$map, $author$project$Main$MarvinServer, $author$project$Integrations$Marvin$getLabelsCmd)),
									$author$project$External$Commands$toast('Reached out to Marvin server...')
								])));
				}
			case 'ThirdPartyServerResponded':
				if (msg.a.$ === 'TodoistServer') {
					var response = msg.a.a;
					var syncStatusChannel = A2(
						$author$project$NativeScript$Notification$setChannelImportance,
						$author$project$NativeScript$Notification$High,
						A2(
							$author$project$NativeScript$Notification$setChannelDescription,
							'Lets you know what happened the last time we tried to sync with online servers.',
							$author$project$NativeScript$Notification$basicChannel('Sync Status')));
					var _v3 = A2($author$project$Integrations$Todoist$handle, response, replica);
					var marvinChangeFrame = _v3.a;
					var whatHappened = _v3.b;
					var notification = A2(
						$author$project$NativeScript$Notification$setBigTextStyle,
						true,
						A2(
							$author$project$NativeScript$Notification$setBody,
							whatHappened,
							A2(
								$author$project$NativeScript$Notification$setSubtitle,
								'Sync Status',
								A2(
									$author$project$NativeScript$Notification$setTitle,
									'Todoist Response',
									A2(
										$author$project$NativeScript$Notification$setExpiresAfter,
										$author$project$SmartTime$Duration$fromMinutes(1),
										A2(
											$author$project$NativeScript$Notification$setID,
											23,
											$author$project$NativeScript$Notification$build(syncStatusChannel)))))));
					return _Utils_Tuple3(
						_List_fromArray(
							[marvinChangeFrame]),
						newTemp,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$NativeScript$Commands$notify(
									_List_fromArray(
										[notification])),
									$author$project$External$Commands$toast(whatHappened)
								])));
				} else {
					var response = msg.a.a;
					var syncStatusChannel = A2(
						$author$project$NativeScript$Notification$setChannelGroup,
						'Status',
						A2(
							$author$project$NativeScript$Notification$setChannelImportance,
							$author$project$NativeScript$Notification$Min,
							A2(
								$author$project$NativeScript$Notification$setChannelDescription,
								'Lets you know what happened the last time we tried to sync with online servers.',
								$author$project$NativeScript$Notification$basicChannel('Sync Status'))));
					var _v4 = A4(
						$author$project$Integrations$Marvin$handle,
						$author$project$Replicated$Reducer$RepDb$size(replica.taskClasses) + 1000,
						replica,
						_Utils_Tuple2(environment.time, environment.timeZone),
						response);
					var marvinChanges = _v4.a;
					var whatHappened = _v4.b;
					var nextStep = _v4.c;
					var notification = A2(
						$author$project$NativeScript$Notification$setGroup,
						$author$project$NativeScript$Notification$GroupKey('marvin'),
						A2(
							$author$project$NativeScript$Notification$setAccentColor,
							'green',
							A2(
								$author$project$NativeScript$Notification$setBigTextStyle,
								true,
								A2(
									$author$project$NativeScript$Notification$setBody,
									whatHappened,
									A2(
										$author$project$NativeScript$Notification$setSubtitle,
										'Sync Status',
										A2(
											$author$project$NativeScript$Notification$setTitle,
											'Marvin Response',
											A2(
												$author$project$NativeScript$Notification$setExpiresAfter,
												$author$project$SmartTime$Duration$fromMinutes(1),
												$author$project$NativeScript$Notification$build(syncStatusChannel))))))));
					var _v5 = A2($author$project$Profile$saveError, replica, 'Synced with Marvin: \n' + whatHappened);
					return _Utils_Tuple3(
						_List_fromArray(
							[
								marvinChanges,
								A2(
								$author$project$Replicated$Change$saveChanges,
								'Log it temporarily',
								_List_fromArray(
									[
										A2($author$project$Profile$saveError, replica, 'Synced with Marvin: \n' + whatHappened)
									]))
							]),
						newTemp,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Platform$Cmd$map,
									$author$project$Main$ThirdPartyServerResponded,
									A2($elm$core$Platform$Cmd$map, $author$project$Main$MarvinServer, nextStep)),
									$author$project$NativeScript$Commands$notify(
									_List_fromArray(
										[notification])),
									$author$project$External$Commands$toast(whatHappened)
								])));
				}
			case 'Link':
				var urlRequest = msg.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					var _v7 = environment.navkey;
					if (_v7.$ === 'Just') {
						var navkey = _v7.a;
						return justRunCommand(
							A2(
								$elm$browser$Browser$Navigation$pushUrl,
								navkey,
								$elm$url$Url$toString(url)));
					} else {
						return noOp;
					}
				} else {
					var href = urlRequest.a;
					return justRunCommand(
						$elm$browser$Browser$Navigation$load(href));
				}
			case 'NewUrl':
				var url = msg.a;
				var effectsAfter = A3($author$project$Main$handleUrlTriggers, url, replica, temp);
				var _v8 = $author$project$Main$navigate(url);
				var newViewState = _v8.a;
				var panelOpenCmds = _v8.b;
				return _Utils_Tuple3(
					_List_Nil,
					_Utils_update(
						newTemp,
						{viewState: newViewState}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[panelOpenCmds, effectsAfter])));
			case 'InternalLink':
				var path = msg.a;
				var _v9 = environment.navkey;
				if (_v9.$ === 'Just') {
					var navkey = _v9.a;
					return justRunCommand(
						A2($elm$browser$Browser$Navigation$pushUrl, navkey, path));
				} else {
					return noOp;
				}
			case 'SyncNSFrame':
				var bool = msg.a;
				return _Utils_Tuple3(
					_List_Nil,
					_Utils_update(
						newTemp,
						{
							rootFrame: A2($hariroshan$elm_native$Native$Frame$handleBack, bool, temp.rootFrame)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TaskListMsg':
				var subMsg = msg.a;
				if (subMsg.$ === 'MarvinServerResponse') {
					var subSubMsg = subMsg.a;
					return justRunCommand(
						A2(
							$elm$core$Task$perform,
							function (_v11) {
								return $author$project$Main$ThirdPartyServerResponded(
									$author$project$Main$MarvinServer(subSubMsg));
							},
							$elm$core$Task$succeed(_Utils_Tuple0)));
				} else {
					var _v12 = A2($author$project$Main$getPanelViewState, viewState.taskList, $author$project$TaskList$defaultView);
					var oldPanelState = _v12.a;
					var position = _v12.b;
					var _v13 = A4($author$project$TaskList$update, subMsg, oldPanelState, replica, environment);
					var newPanelState = _v13.a;
					var newFrame = _v13.b;
					var newCommand = _v13.c;
					var newViewState = _Utils_update(
						viewState,
						{
							taskList: A2($author$project$Main$OpenPanel, position, newPanelState)
						});
					return _Utils_Tuple3(
						_List_fromArray(
							[newFrame]),
						_Utils_update(
							newTemp,
							{viewState: newViewState}),
						A2($elm$core$Platform$Cmd$map, $author$project$Main$TaskListMsg, newCommand));
				}
			case 'TimeTrackerMsg':
				var subMsg = msg.a;
				var _v14 = A2($author$project$Main$getPanelViewState, viewState.timeTracker, $author$project$TimeTracker$defaultView);
				var oldPanelState = _v14.a;
				var position = _v14.b;
				var _v15 = A4(
					$author$project$TimeTracker$update,
					subMsg,
					oldPanelState,
					replica,
					_Utils_Tuple2(environment.time, environment.timeZone));
				var newFrame = _v15.a;
				var newPanelState = _v15.b;
				var newCommand = _v15.c;
				var newViewState = _Utils_update(
					viewState,
					{
						timeTracker: A2($author$project$Main$OpenPanel, position, newPanelState)
					});
				return _Utils_Tuple3(
					_List_fromArray(
						[newFrame]),
					_Utils_update(
						newTemp,
						{viewState: newViewState}),
					A2($elm$core$Platform$Cmd$map, $author$project$Main$TimeTrackerMsg, newCommand));
			case 'TimeflowMsg':
				var subMsg = msg.a;
				var _v16 = function () {
					var _v17 = viewState.timeflow;
					_v17$2:
					while (true) {
						switch (_v17.$) {
							case 'OpenPanel':
								if (_v17.b.$ === 'Just') {
									var oldPosition = _v17.a;
									var oldState = _v17.b.a;
									return _Utils_Tuple3(oldState, oldPosition, $elm$core$Platform$Cmd$none);
								} else {
									break _v17$2;
								}
							case 'ClosedPanel':
								if (_v17.b.$ === 'Just') {
									var oldPosition = _v17.a;
									var oldState = _v17.b.a;
									return _Utils_Tuple3(oldState, oldPosition, $elm$core$Platform$Cmd$none);
								} else {
									break _v17$2;
								}
							default:
								break _v17$2;
						}
					}
					var _v18 = A2($author$project$Timeflow$init, replica, environment);
					var freshState = _v18.a;
					var initCmds = _v18.b;
					return _Utils_Tuple3(freshState, $author$project$Main$FullScreen, initCmds);
				}();
				var panelState = _v16.a;
				var position = _v16.b;
				var initCmdIfNeeded = _v16.c;
				var _v19 = A4(
					$author$project$Timeflow$update,
					subMsg,
					$elm$core$Maybe$Just(panelState),
					replica,
					environment);
				var newFrame = _v19.a;
				var newPanelState = _v19.b;
				var newCommand = _v19.c;
				var newViewState = _Utils_update(
					viewState,
					{
						timeflow: A2(
							$author$project$Main$OpenPanel,
							position,
							$elm$core$Maybe$Just(newPanelState))
					});
				return _Utils_Tuple3(
					_List_fromArray(
						[newFrame]),
					_Utils_update(
						newTemp,
						{viewState: newViewState}),
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$Main$TimeflowMsg,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[initCmdIfNeeded, newCommand]))));
			default:
				var subMsg = msg.a;
				var _v20 = function () {
					var _v21 = viewState.devTools;
					switch (_v21.$) {
						case 'OpenPanel':
							var oldPosition = _v21.a;
							var oldState = _v21.b;
							return _Utils_Tuple3(oldState, oldPosition, $elm$core$Platform$Cmd$none);
						case 'ClosedPanel':
							var oldPosition = _v21.a;
							var oldState = _v21.b;
							return _Utils_Tuple3(oldState, oldPosition, $elm$core$Platform$Cmd$none);
						default:
							var _v22 = A3($author$project$DevTools$init, replica, environment, 'not wired yet');
							var freshState = _v22.a;
							var initCmds = _v22.b;
							return _Utils_Tuple3(freshState, $author$project$Main$FullScreen, initCmds);
					}
				}();
				var panelState = _v20.a;
				var position = _v20.b;
				var initCmdsIfNeeded = _v20.c;
				var _v23 = A4($author$project$DevTools$update, subMsg, panelState, replica, environment);
				var newPanelState = _v23.a;
				var newFrame = _v23.b;
				var newCommand = _v23.c;
				var newViewState = _Utils_update(
					viewState,
					{
						devTools: A2($author$project$Main$OpenPanel, position, newPanelState)
					});
				return _Utils_Tuple3(
					_List_fromArray(
						[newFrame]),
					_Utils_update(
						newTemp,
						{viewState: newViewState}),
					A2(
						$elm$core$Platform$Cmd$map,
						$author$project$Main$DevToolsMsg,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[initCmdsIfNeeded, newCommand]))));
		}
	});
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $author$project$Ion$App$app = function (children) {
	return A3($elm$html$Html$node, 'ion-app', _List_Nil, children);
};
var $author$project$TaskList$NoOp = {$: 'NoOp'};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$Ion$Tab$bar = F2(
	function (attributes, children) {
		return A3($elm$html$Html$node, 'ion-tab-bar', attributes, children);
	});
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty('name');
var $author$project$Ion$Icon$basic = function (iconName) {
	return A3(
		$elm$html$Html$node,
		'ion-icon',
		_List_fromArray(
			[
				$elm$html$Html$Attributes$name(iconName)
			]),
		_List_Nil);
};
var $author$project$Ion$Tab$labeledIconButton = F3(
	function (attributes, label, iconName) {
		return A3(
			$elm$html$Html$node,
			'ion-tab-button',
			attributes,
			_List_fromArray(
				[
					$author$project$Ion$Icon$basic(iconName),
					A3(
					$elm$html$Html$node,
					'ion-label',
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$semiBold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textSemiBold);
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $author$project$Main$selectedTabs = function (panelStatusAndLinks) {
	var applyOpenPanelStyle = function (_v0) {
		var isOpen = _v0.a;
		var givenLink = _v0.b;
		return isOpen ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba255, 255, 255, 255, 0.3)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$semiBold,
					$mdgriffith$elm_ui$Element$Border$rounded(7),
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5)
				]),
			givenLink) : givenLink;
	};
	var panelsList = A2($elm$core$List$map, applyOpenPanelStyle, panelStatusAndLinks);
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5)
			]),
		panelsList);
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $author$project$Activity$Timeline$currentActivity = F2(
	function (store, timeline) {
		return A2(
			$author$project$Activity$Activity$getByID,
			$author$project$Activity$Timeline$currentActivityID(timeline),
			store);
	});
var $author$project$SmartTime$Human$Duration$inLargestWholeUnits = function (duration) {
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$SmartTime$Human$Duration$Milliseconds(0),
		$elm$core$List$head(
			$author$project$SmartTime$Human$Duration$breakdownNonzero(duration)));
};
var $author$project$Ion$Button$justIcon = function (iconName) {
	return A3(
		$elm$html$Html$node,
		'ion-button',
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Ion$Icon$basic(iconName)
			]));
};
var $author$project$Task$AssignedAction$getCompletionInt = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance.instance).completion.get;
};
var $author$project$Task$AssignedAction$getProgressMaxInt = function (instance) {
	return $author$project$Task$Progress$unitMax(
		$author$project$Replicated$Reducer$Register$latest(instance._class).completionUnits.get);
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Height') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Width') {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 'Nothing') {
					if (_v8.b.$ === 'Nothing') {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((_v8.a.a.$ === 'Px') && (_v8.b.$ === 'Just')) {
						switch (_v8.b.a.$) {
							case 'Px':
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 'Fill':
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.value - input.min) / (input.max - input.min);
		var _v0 = input.thumb;
		var thumbAttributes = _v0.a;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 'Nothing') {
				return '20px';
			} else {
				if (height.a.$ === 'Px') {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 'Nothing') {
				return '20px';
			} else {
				if (width.a.$ === 'Px') {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (trackWidth.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (trackHeight.a.$ === 'Px') {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.label,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' ui-slide-bar focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 'Nothing') {
											return input.onChange(0);
										} else {
											var val = _v4.a;
											return input.onChange(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.step;
										if (_v5.$ === 'Nothing') {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.min))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.max))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.value))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3(
												$mdgriffith$elm_ui$Element$Input$viewVerticalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackWidth) : A3(
												$mdgriffith$elm_ui$Element$Input$viewHorizontalThumb,
												factor,
												A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable-thumb'),
													thumbAttributes),
												trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $mdgriffith$elm_ui$Element$Input$Thumb = function (a) {
	return {$: 'Thumb', a: a};
};
var $mdgriffith$elm_ui$Element$Input$thumb = $mdgriffith$elm_ui$Element$Input$Thumb;
var $author$project$Main$trackingTaskCompletionSlider = function (instance) {
	var _v0 = A3($mdgriffith$elm_ui$Element$rgb255, 238, 238, 238);
	return A2(
		$mdgriffith$elm_ui$Element$Input$slider,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(30)),
				$mdgriffith$elm_ui$Element$behindContent(
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$fillPortion(
										$author$project$Task$AssignedAction$getCompletionInt(instance))),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Background$color(
									A4($mdgriffith$elm_ui$Element$rgba, 0, 1, 0, 0.5)),
									$mdgriffith$elm_ui$Element$Border$rounded(2)
								]),
							$mdgriffith$elm_ui$Element$none),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$fillPortion(
										$author$project$Task$AssignedAction$getProgressMaxInt(instance) - $author$project$Task$AssignedAction$getCompletionInt(instance))),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Background$color(
									A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
									$mdgriffith$elm_ui$Element$Border$rounded(2)
								]),
							$mdgriffith$elm_ui$Element$none)
						])))
			]),
		{
			label: $mdgriffith$elm_ui$Element$Input$labelHidden('Task Progress'),
			max: $author$project$Task$AssignedAction$getProgressMaxInt(instance),
			min: 0,
			onChange: function (input) {
				return $author$project$Main$TaskListMsg(
					A2(
						$author$project$TaskList$UpdateProgress,
						instance,
						$elm$core$Basics$round(input)));
			},
			step: $elm$core$Maybe$Just(1),
			thumb: $mdgriffith$elm_ui$Element$Input$thumb(_List_Nil),
			value: $author$project$Task$AssignedAction$getCompletionInt(instance)
		});
};
var $author$project$Main$trackingDisplay = F4(
	function (replica, time, launchTime, timeZone) {
		var tracking_for_string = F2(
			function (thing, givenTime) {
				return 'Tracking ' + (thing + (' for ' + $author$project$SmartTime$Human$Duration$singleLetterSpaced(
					_List_fromArray(
						[
							$author$project$SmartTime$Human$Duration$inLargestWholeUnits(givenTime)
						]))));
			});
		var timeSinceSession = $author$project$SmartTime$Period$length(
			A2($author$project$Activity$Timeline$currentAsPeriod, time, replica.timeline));
		var currentInstanceIDMaybe = $author$project$Activity$Timeline$currentInstanceID(replica.timeline);
		var currentActivity = A2($author$project$Activity$Timeline$currentActivity, replica.activities, replica.timeline);
		var allInstances = A2(
			$author$project$Profile$instanceListNow,
			replica,
			_Utils_Tuple2(launchTime, timeZone));
		var currentInstanceMaybe = function (currentInstanceID) {
			return $elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (t) {
						return _Utils_eq(
							$author$project$Task$AssignedAction$getID(t),
							currentInstanceID);
					},
					allInstances));
		};
		var _v0 = A2($elm$core$Maybe$andThen, currentInstanceMaybe, currentInstanceIDMaybe);
		if (_v0.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$fillPortion(1)),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('O')),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$text(
							A2(
								tracking_for_string,
								$author$project$Activity$Activity$getName(currentActivity),
								timeSinceSession))),
						$mdgriffith$elm_ui$Element$html(
						$author$project$Ion$Button$justIcon('stop-circle-outline'))
					]));
		} else {
			var currentInstance = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$fillPortion(1)),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
						$mdgriffith$elm_ui$Element$behindContent(
						A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('O')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX]),
									$mdgriffith$elm_ui$Element$text(
										A2(
											tracking_for_string,
											$author$project$Task$AssignedAction$getTitle(currentInstance),
											timeSinceSession)))
								])))
					]),
				_List_fromArray(
					[
						$author$project$Main$trackingTaskCompletionSlider(currentInstance)
					]));
		}
	});
var $author$project$Main$globalLayout = F4(
	function (viewState, replica, env, innerStuff) {
		var timetrackerLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			{
				label: $mdgriffith$elm_ui$Element$text('Timetracker'),
				url: '#/timetracker'
			});
		var timeflowLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			{
				label: $mdgriffith$elm_ui$Element$text('Timeflow'),
				url: '#/timeflow'
			});
		var readyLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			{
				label: $mdgriffith$elm_ui$Element$text('Ready'),
				url: '#/ready'
			});
		var projectsLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$Main$TaskListMsg($author$project$TaskList$NoOp))
				]),
			{
				label: $mdgriffith$elm_ui$Element$text('Projects'),
				url: '#/projects'
			});
		var isPanelOpen = function (panelStatus) {
			if (panelStatus.$ === 'OpenPanel') {
				return true;
			} else {
				return false;
			}
		};
		var elmUIOptions = {options: _List_Nil};
		var devToolsLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			{
				label: $mdgriffith$elm_ui$Element$text('Dev'),
				url: '#/devtools'
			});
		var dashLink = A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			{
				label: $mdgriffith$elm_ui$Element$text('Dashboard'),
				url: '#/dash'
			});
		var footerLinks = $author$project$Main$selectedTabs(
			_List_fromArray(
				[
					_Utils_Tuple2(
					isPanelOpen(viewState.taskList),
					projectsLink),
					_Utils_Tuple2(false, readyLink),
					_Utils_Tuple2(
					isPanelOpen(viewState.timeflow),
					timeflowLink),
					_Utils_Tuple2(
					isPanelOpen(viewState.timeTracker),
					timetrackerLink),
					_Utils_Tuple2(false, dashLink),
					_Utils_Tuple2(
					isPanelOpen(viewState.devTools),
					devToolsLink)
				]));
		return A3(
			$mdgriffith$elm_ui$Element$layoutWith,
			elmUIOptions,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'max-height', '100vh'))
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$fillPortion(1)),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignLeft]),
								$mdgriffith$elm_ui$Element$text(
									$author$project$SmartTime$Human$Moment$toStandardString(env.time))),
								A2(
								$mdgriffith$elm_ui$Element$link,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								{
									label: $mdgriffith$elm_ui$Element$text('Minder (prototype)'),
									url: 'https://erudition.github.io/minder-preview/Erudition/Minder/branch/master/'
								}),
								A2(
								$mdgriffith$elm_ui$Element$link,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight]),
								{
									label: $mdgriffith$elm_ui$Element$text('Marvin'),
									url: '?sync=marvin'
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$fillPortion(20)),
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$scrollbarY,
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id('page-viewport'))
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(innerStuff)
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2(
									$author$project$Ion$Tab$bar,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'width', '100%')
										]),
									_List_fromArray(
										[
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$disabled(true)
												]),
											'Home',
											'albums-outline'),
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$disabled(true)
												]),
											'Cares',
											'heart-circle-outline'),
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$href('#/projects'),
													$elm$html$Html$Attributes$selected(
													isPanelOpen(viewState.taskList))
												]),
											'Projects',
											'list-outline'),
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$href('#/timeflow'),
													$elm$html$Html$Attributes$selected(
													isPanelOpen(viewState.timeflow))
												]),
											'Timeflow',
											'hourglass-outline'),
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$href('#/timetracker'),
													$elm$html$Html$Attributes$selected(
													isPanelOpen(viewState.timeTracker))
												]),
											'Activities',
											'stopwatch-outline'),
											A3(
											$author$project$Ion$Tab$labeledIconButton,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$href('#/devtools'),
													$elm$html$Html$Attributes$selected(
													isPanelOpen(viewState.devTools))
												]),
											'Dev',
											'code-working-outline')
										])))
							])),
						A4($author$project$Main$trackingDisplay, replica, env.time, env.launchTime, env.timeZone)
					])));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNode = F3(
	function (a, b, c) {
		return {$: 'KeyedNode', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS = F4(
	function (a, b, c, d) {
		return {$: 'KeyedNodeNS', a: a, b: b, c: c, d: d};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$Node = F3(
	function (a, b, c) {
		return {$: 'Node', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$NodeNS = F4(
	function (a, b, c, d) {
		return {$: 'NodeNS', a: a, b: b, c: c, d: d};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$Attribute = F3(
	function (a, b, c) {
		return {$: 'Attribute', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$mapAttribute = F2(
	function (transform, _v0) {
		var prop = _v0.a;
		var styles = _v0.b;
		var classname = _v0.c;
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$mapAttribute, transform, prop),
			styles,
			classname);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$map = F2(
	function (transform, vdomNode) {
		switch (vdomNode.$) {
			case 'Node':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$Node,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'NodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$NodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'KeyedNode':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNode,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var key = _v1.a;
							var child = _v1.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			case 'KeyedNodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v2) {
							var key = _v2.a;
							var child = _v2.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			default:
				var vdom = vdomNode.a;
				return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
					A2($elm$virtual_dom$VirtualDom$map, transform, vdom));
		}
	});
var $rtfeldman$elm_css$Html$Styled$map = $rtfeldman$elm_css$VirtualDom$Styled$map;
var $rtfeldman$elm_css$VirtualDom$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$Node;
var $rtfeldman$elm_css$Html$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$node;
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles = F2(
	function (_v0, styles) {
		var newStyles = _v0.b;
		var classname = _v0.c;
		return $elm$core$List$isEmpty(newStyles) ? styles : A3($elm$core$Dict$insert, classname, newStyles, styles);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute = function (_v0) {
	var val = _v0.a;
	return val;
};
var $elm$virtual_dom$VirtualDom$keyedNodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_keyedNodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml = F2(
	function (_v6, _v7) {
		var key = _v6.a;
		var html = _v6.b;
		var pairs = _v7.a;
		var styles = _v7.b;
		switch (html.$) {
			case 'Unstyled':
				var vdom = html.a;
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v9 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v9.a;
				var finalStyles = _v9.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v10 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v10.a;
				var finalStyles = _v10.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v11 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v11.a;
				var finalStyles = _v11.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v12 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v12.a;
				var finalStyles = _v12.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml = F2(
	function (html, _v0) {
		var nodes = _v0.a;
		var styles = _v0.b;
		switch (html.$) {
			case 'Unstyled':
				var vdomNode = html.a;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v2 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v2.a;
				var finalStyles = _v2.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v3 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v3.a;
				var finalStyles = _v3.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v4 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v4.a;
				var finalStyles = _v4.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v5 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v5.a;
				var finalStyles = _v5.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp = F2(
	function (candidate, properties) {
		stylesFromPropertiesHelp:
		while (true) {
			if (!properties.b) {
				return candidate;
			} else {
				var _v1 = properties.a;
				var styles = _v1.b;
				var classname = _v1.c;
				var rest = properties.b;
				if ($elm$core$String$isEmpty(classname)) {
					var $temp$candidate = candidate,
						$temp$properties = rest;
					candidate = $temp$candidate;
					properties = $temp$properties;
					continue stylesFromPropertiesHelp;
				} else {
					var $temp$candidate = $elm$core$Maybe$Just(
						_Utils_Tuple2(classname, styles)),
						$temp$properties = rest;
					candidate = $temp$candidate;
					properties = $temp$properties;
					continue stylesFromPropertiesHelp;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties = function (properties) {
	var _v0 = A2($rtfeldman$elm_css$VirtualDom$Styled$stylesFromPropertiesHelp, $elm$core$Maybe$Nothing, properties);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var _v1 = _v0.a;
		var classname = _v1.a;
		var styles = _v1.b;
		return A2($elm$core$Dict$singleton, classname, styles);
	}
};
var $rtfeldman$elm_css$Css$Structure$compactHelp = F2(
	function (declaration, _v0) {
		var keyframesByName = _v0.a;
		var declarations = _v0.b;
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var _v2 = declaration.a;
				var properties = _v2.c;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'MediaRule':
				var styleBlocks = declaration.b;
				return A2(
					$elm$core$List$all,
					function (_v3) {
						var properties = _v3.c;
						return $elm$core$List$isEmpty(properties);
					},
					styleBlocks) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'SupportsRule':
				var otherDeclarations = declaration.b;
				return $elm$core$List$isEmpty(otherDeclarations) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'DocumentRule':
				return _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'PageRule':
				var properties = declaration.b;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'FontFace':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'Keyframes':
				var record = declaration.a;
				return $elm$core$String$isEmpty(record.declaration) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					A3($elm$core$Dict$insert, record.name, record.declaration, keyframesByName),
					declarations);
			case 'Viewport':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'CounterStyle':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			default:
				var tuples = declaration.a;
				return A2(
					$elm$core$List$all,
					function (_v4) {
						var properties = _v4.b;
						return $elm$core$List$isEmpty(properties);
					},
					tuples) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
		}
	});
var $rtfeldman$elm_css$Css$Structure$Keyframes = function (a) {
	return {$: 'Keyframes', a: a};
};
var $rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations = F2(
	function (keyframesByName, compactedDeclarations) {
		return A2(
			$elm$core$List$append,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					var decl = _v0.b;
					return $rtfeldman$elm_css$Css$Structure$Keyframes(
						{declaration: decl, name: name});
				},
				$elm$core$Dict$toList(keyframesByName)),
			compactedDeclarations);
	});
var $rtfeldman$elm_css$Css$Structure$compactStylesheet = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	var _v1 = A3(
		$elm$core$List$foldr,
		$rtfeldman$elm_css$Css$Structure$compactHelp,
		_Utils_Tuple2($elm$core$Dict$empty, _List_Nil),
		declarations);
	var keyframesByName = _v1.a;
	var compactedDeclarations = _v1.b;
	var finalDeclarations = A2($rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations, keyframesByName, compactedDeclarations);
	return {charset: charset, declarations: finalDeclarations, imports: imports, namespaces: namespaces};
};
var $rtfeldman$elm_css$Css$Structure$Output$charsetToString = function (charset) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			function (str) {
				return '@charset \"' + (str + '\"');
			},
			charset));
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString = function (expression) {
	return '(' + (expression.feature + (A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			$elm$core$Basics$append(': '),
			expression.value)) + ')'));
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString = function (mediaType) {
	switch (mediaType.$) {
		case 'Print':
			return 'print';
		case 'Screen':
			return 'screen';
		default:
			return 'speech';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString = function (mediaQuery) {
	var prefixWith = F3(
		function (str, mediaType, expressions) {
			return str + (' ' + A2(
				$elm$core$String$join,
				' and ',
				A2(
					$elm$core$List$cons,
					$rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString(mediaType),
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions))));
		});
	switch (mediaQuery.$) {
		case 'AllQuery':
			var expressions = mediaQuery.a;
			return A2(
				$elm$core$String$join,
				' and ',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions));
		case 'OnlyQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'only', mediaType, expressions);
		case 'NotQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'not', mediaType, expressions);
		default:
			var str = mediaQuery.a;
			return str;
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString = F2(
	function (name, mediaQuery) {
		return '@import \"' + (name + ($rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString(mediaQuery) + '\"'));
	});
var $rtfeldman$elm_css$Css$Structure$Output$importToString = function (_v0) {
	var name = _v0.a;
	var mediaQueries = _v0.b;
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString(name),
			mediaQueries));
};
var $rtfeldman$elm_css$Css$Structure$Output$namespaceToString = function (_v0) {
	var prefix = _v0.a;
	var str = _v0.b;
	return '@namespace ' + (prefix + ('\"' + (str + '\"')));
};
var $rtfeldman$elm_css$Css$Structure$Output$spaceIndent = '    ';
var $rtfeldman$elm_css$Css$Structure$Output$indent = function (str) {
	return _Utils_ap($rtfeldman$elm_css$Css$Structure$Output$spaceIndent, str);
};
var $rtfeldman$elm_css$Css$Structure$Output$noIndent = '';
var $rtfeldman$elm_css$Css$Structure$Output$emitProperty = function (str) {
	return str + ';';
};
var $rtfeldman$elm_css$Css$Structure$Output$emitProperties = function (properties) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $rtfeldman$elm_css$Css$Structure$Output$indent, $rtfeldman$elm_css$Css$Structure$Output$emitProperty),
			properties));
};
var $elm$core$String$append = _String_append;
var $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString = function (_v0) {
	var str = _v0.a;
	return '::' + str;
};
var $rtfeldman$elm_css$Css$Structure$Output$combinatorToString = function (combinator) {
	switch (combinator.$) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	switch (repeatableSimpleSelector.$) {
		case 'ClassSelector':
			var str = repeatableSimpleSelector.a;
			return '.' + str;
		case 'IdSelector':
			var str = repeatableSimpleSelector.a;
			return '#' + str;
		case 'PseudoClassSelector':
			var str = repeatableSimpleSelector.a;
			return ':' + str;
		default:
			var str = repeatableSimpleSelector.a;
			return '[' + (str + ']');
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	switch (simpleSelectorSequence.$) {
		case 'TypeSelectorSequence':
			var str = simpleSelectorSequence.a.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$cons,
					str,
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));
		case 'UniversalSelectorSequence':
			var repeatableSimpleSelectors = simpleSelectorSequence.a;
			return $elm$core$List$isEmpty(repeatableSimpleSelectors) ? '*' : A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors));
		default:
			var str = simpleSelectorSequence.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$cons,
					str,
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, repeatableSimpleSelectors)));
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString = function (_v0) {
	var combinator = _v0.a;
	var sequence = _v0.b;
	return A2(
		$elm$core$String$join,
		' ',
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Structure$Output$combinatorToString(combinator),
				$rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(sequence)
			]));
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorToString = function (_v0) {
	var simpleSelectorSequence = _v0.a;
	var chain = _v0.b;
	var pseudoElement = _v0.c;
	var segments = A2(
		$elm$core$List$cons,
		$rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(simpleSelectorSequence),
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString, chain));
	var pseudoElementsString = A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			[
				A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Maybe$map, $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString, pseudoElement))
			]));
	return A2(
		$elm$core$String$append,
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$filter,
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
				segments)),
		pseudoElementsString);
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock = F2(
	function (indentLevel, _v0) {
		var firstSelector = _v0.a;
		var otherSelectors = _v0.b;
		var properties = _v0.c;
		var selectorStr = A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Css$Structure$Output$selectorToString,
				A2($elm$core$List$cons, firstSelector, otherSelectors)));
		return A2(
			$elm$core$String$join,
			'',
			_List_fromArray(
				[
					selectorStr,
					' {\n',
					indentLevel,
					$rtfeldman$elm_css$Css$Structure$Output$emitProperties(properties),
					'\n',
					indentLevel,
					'}'
				]));
	});
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration = function (decl) {
	switch (decl.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = decl.a;
			return A2($rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock, $rtfeldman$elm_css$Css$Structure$Output$noIndent, styleBlock);
		case 'MediaRule':
			var mediaQueries = decl.a;
			var styleBlocks = decl.b;
			var query = A2(
				$elm$core$String$join,
				',\n',
				A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString, mediaQueries));
			var blocks = A2(
				$elm$core$String$join,
				'\n\n',
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						$rtfeldman$elm_css$Css$Structure$Output$indent,
						$rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock($rtfeldman$elm_css$Css$Structure$Output$spaceIndent)),
					styleBlocks));
			return '@media ' + (query + (' {\n' + (blocks + '\n}')));
		case 'SupportsRule':
			return 'TODO';
		case 'DocumentRule':
			return 'TODO';
		case 'PageRule':
			return 'TODO';
		case 'FontFace':
			return 'TODO';
		case 'Keyframes':
			var name = decl.a.name;
			var declaration = decl.a.declaration;
			return '@keyframes ' + (name + (' {\n' + (declaration + '\n}')));
		case 'Viewport':
			return 'TODO';
		case 'CounterStyle':
			return 'TODO';
		default:
			return 'TODO';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrint = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$Output$charsetToString(charset),
					A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$importToString, imports)),
					A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$namespaceToString, namespaces)),
					A2(
					$elm$core$String$join,
					'\n\n',
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration, declarations))
				])));
};
var $rtfeldman$elm_css$Css$Structure$CounterStyle = function (a) {
	return {$: 'CounterStyle', a: a};
};
var $rtfeldman$elm_css$Css$Structure$FontFace = function (a) {
	return {$: 'FontFace', a: a};
};
var $rtfeldman$elm_css$Css$Structure$PageRule = F2(
	function (a, b) {
		return {$: 'PageRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$Selector = F3(
	function (a, b, c) {
		return {$: 'Selector', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$Css$Structure$SupportsRule = F2(
	function (a, b) {
		return {$: 'SupportsRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$Viewport = function (a) {
	return {$: 'Viewport', a: a};
};
var $rtfeldman$elm_css$Css$Structure$MediaRule = F2(
	function (a, b) {
		return {$: 'MediaRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$mapLast = F2(
	function (update, list) {
		if (!list.b) {
			return list;
		} else {
			if (!list.b.b) {
				var only = list.a;
				return _List_fromArray(
					[
						update(only)
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$mapLast, update, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$withPropertyAppended = F2(
	function (property, _v0) {
		var firstSelector = _v0.a;
		var otherSelectors = _v0.b;
		var properties = _v0.c;
		return A3(
			$rtfeldman$elm_css$Css$Structure$StyleBlock,
			firstSelector,
			otherSelectors,
			_Utils_ap(
				properties,
				_List_fromArray(
					[property])));
	});
var $rtfeldman$elm_css$Css$Structure$appendProperty = F2(
	function (property, declarations) {
		if (!declarations.b) {
			return declarations;
		} else {
			if (!declarations.b.b) {
				switch (declarations.a.$) {
					case 'StyleBlockDeclaration':
						var styleBlock = declarations.a.a;
						return _List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
								A2($rtfeldman$elm_css$Css$Structure$withPropertyAppended, property, styleBlock))
							]);
					case 'MediaRule':
						var _v1 = declarations.a;
						var mediaQueries = _v1.a;
						var styleBlocks = _v1.b;
						return _List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Css$Structure$MediaRule,
								mediaQueries,
								A2(
									$rtfeldman$elm_css$Css$Structure$mapLast,
									$rtfeldman$elm_css$Css$Structure$withPropertyAppended(property),
									styleBlocks))
							]);
					default:
						return declarations;
				}
			} else {
				var first = declarations.a;
				var rest = declarations.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		if (!styleBlock.b.b) {
			var only = styleBlock.a;
			var properties = styleBlock.c;
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, only, _List_Nil, properties),
					A3(
					$rtfeldman$elm_css$Css$Structure$StyleBlock,
					f(only),
					_List_Nil,
					_List_Nil)
				]);
		} else {
			var first = styleBlock.a;
			var rest = styleBlock.b;
			var properties = styleBlock.c;
			var newRest = A2($elm$core$List$map, f, rest);
			var newFirst = f(first);
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, rest, properties),
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, newFirst, newRest, _List_Nil)
				]);
		}
	});
var $rtfeldman$elm_css$Css$Structure$applyPseudoElement = F2(
	function (pseudo, _v0) {
		var sequence = _v0.a;
		var selectors = _v0.b;
		return A3(
			$rtfeldman$elm_css$Css$Structure$Selector,
			sequence,
			selectors,
			$elm$core$Maybe$Just(pseudo));
	});
var $rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Structure$CustomSelector = F2(
	function (a, b) {
		return {$: 'CustomSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {$: 'TypeSelectorSequence', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence = function (a) {
	return {$: 'UniversalSelectorSequence', a: a};
};
var $rtfeldman$elm_css$Css$Structure$appendRepeatable = F2(
	function (selector, sequence) {
		switch (sequence.$) {
			case 'TypeSelectorSequence':
				var typeSelector = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$TypeSelectorSequence,
					typeSelector,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			case 'UniversalSelectorSequence':
				var list = sequence.a;
				return $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			default:
				var str = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$CustomSelector,
					str,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			if (!list.b.b) {
				var _v1 = list.a;
				var combinator = _v1.a;
				var sequence = _v1.b;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						combinator,
						A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, selector, sequence))
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, selector, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		if (!selector.b.b) {
			var sequence = selector.a;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, repeatableSimpleSelector, sequence),
				_List_Nil,
				pseudoElement);
		} else {
			var firstSelector = selector.a;
			var tuples = selector.b;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				firstSelector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, tuples),
				pseudoElement);
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		if (!declarations.b) {
			return _List_Nil;
		} else {
			if (declarations.a.$ === 'StyleBlockDeclaration') {
				var _v1 = declarations.a.a;
				var firstSelector = _v1.a;
				var otherSelectors = _v1.b;
				var rest = declarations.b;
				return _Utils_ap(
					A2($elm$core$List$cons, firstSelector, otherSelectors),
					$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(rest));
			} else {
				var rest = declarations.b;
				var $temp$declarations = rest;
				declarations = $temp$declarations;
				continue collectSelectors;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {$: 'DocumentRule', a: a, b: b, c: c, d: d, e: e};
	});
var $rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		_v0$12:
		while (true) {
			if (!declarations.b) {
				return declarations;
			} else {
				if (!declarations.b.b) {
					switch (declarations.a.$) {
						case 'StyleBlockDeclaration':
							var styleBlock = declarations.a.a;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration,
								update(styleBlock));
						case 'MediaRule':
							if (declarations.a.b.b) {
								if (!declarations.a.b.b.b) {
									var _v1 = declarations.a;
									var mediaQueries = _v1.a;
									var _v2 = _v1.b;
									var styleBlock = _v2.a;
									return _List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$Structure$MediaRule,
											mediaQueries,
											update(styleBlock))
										]);
								} else {
									var _v3 = declarations.a;
									var mediaQueries = _v3.a;
									var _v4 = _v3.b;
									var first = _v4.a;
									var rest = _v4.b;
									var _v5 = A2(
										$rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock,
										update,
										_List_fromArray(
											[
												A2($rtfeldman$elm_css$Css$Structure$MediaRule, mediaQueries, rest)
											]));
									if ((_v5.b && (_v5.a.$ === 'MediaRule')) && (!_v5.b.b)) {
										var _v6 = _v5.a;
										var newMediaQueries = _v6.a;
										var newStyleBlocks = _v6.b;
										return _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Css$Structure$MediaRule,
												newMediaQueries,
												A2($elm$core$List$cons, first, newStyleBlocks))
											]);
									} else {
										var newDeclarations = _v5;
										return newDeclarations;
									}
								}
							} else {
								break _v0$12;
							}
						case 'SupportsRule':
							var _v7 = declarations.a;
							var str = _v7.a;
							var nestedDeclarations = _v7.b;
							return _List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$Structure$SupportsRule,
									str,
									A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, nestedDeclarations))
								]);
						case 'DocumentRule':
							var _v8 = declarations.a;
							var str1 = _v8.a;
							var str2 = _v8.b;
							var str3 = _v8.c;
							var str4 = _v8.d;
							var styleBlock = _v8.e;
							return A2(
								$elm$core$List$map,
								A4($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4),
								update(styleBlock));
						case 'PageRule':
							var _v9 = declarations.a;
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v0$12;
				}
			}
		}
		var first = declarations.a;
		var rest = declarations.b;
		return A2(
			$elm$core$List$cons,
			first,
			A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, rest));
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1 = 3432918353;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$c2 = 461845907;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize = function (data) {
	var acc = (!(!data.hash)) ? (data.seed ^ A2(
		$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
		$rtfeldman$elm_css$ElmCssVendor$Murmur3$c2,
		A2(
			$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
			15,
			A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
			5,
			A2(
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy,
					$rtfeldman$elm_css$ElmCssVendor$Murmur3$c2,
					A2(
						$rtfeldman$elm_css$ElmCssVendor$Murmur3$rotlBy,
						15,
						A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$multiplyBy, $rtfeldman$elm_css$ElmCssVendor$Murmur3$c1, k1))))) + 3864292196;
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & $elm$core$Char$toCode(c)) << data.shift);
		var _v0 = data.shift;
		if (_v0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var $rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString = F2(
	function (seed, str) {
		return $rtfeldman$elm_css$ElmCssVendor$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$hashFold,
				A4($rtfeldman$elm_css$ElmCssVendor$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $rtfeldman$elm_css$Hash$murmurSeed = 15739;
var $elm$core$String$fromList = _String_fromList;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			_Utils_chr('-'),
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $rtfeldman$elm_css$Hash$fromString = function (str) {
	return A2(
		$elm$core$String$cons,
		_Utils_chr('_'),
		$rtfeldman$elm_hex$Hex$toString(
			A2($rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString, $rtfeldman$elm_css$Hash$murmurSeed, str)));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$last = function (list) {
	last:
	while (true) {
		if (!list.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!list.b.b) {
				var singleton = list.a;
				return $elm$core$Maybe$Just(singleton);
			} else {
				var rest = list.b;
				var $temp$list = rest;
				list = $temp$list;
				continue last;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		if (!declarations.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!declarations.b.b) {
				var x = declarations.a;
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[x]));
			} else {
				var xs = declarations.b;
				var $temp$declarations = xs;
				declarations = $temp$declarations;
				continue lastDeclaration;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		if (!maybes.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var maybe = maybes.a;
			var rest = maybes.b;
			if (maybe.$ === 'Nothing') {
				var $temp$maybes = rest;
				maybes = $temp$maybes;
				continue oneOf;
			} else {
				return maybe;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$FontFeatureValues = function (a) {
	return {$: 'FontFeatureValues', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		if (!tuplesToExpand.b) {
			return _List_Nil;
		} else {
			var properties = tuplesToExpand.a;
			var rest = tuplesToExpand.b;
			return A2(
				$elm$core$List$cons,
				properties,
				expandTuples(rest));
		}
	};
	var newTuples = expandTuples(tuples);
	return _List_fromArray(
		[
			$rtfeldman$elm_css$Css$Structure$FontFeatureValues(newTuples)
		]);
};
var $rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule = F2(
	function (mediaQueries, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var styleBlock = declaration.a;
			return A2(
				$rtfeldman$elm_css$Css$Structure$MediaRule,
				mediaQueries,
				_List_fromArray(
					[styleBlock]));
		} else {
			return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var structureStyleBlock = declaration.a;
			return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
		} else {
			return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var structureStyleBlock = declaration.a;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					mediaQueries,
					_List_fromArray(
						[structureStyleBlock]));
			case 'MediaRule':
				var newMediaQueries = declaration.a;
				var structureStyleBlocks = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					_Utils_ap(mediaQueries, newMediaQueries),
					structureStyleBlocks);
			case 'SupportsRule':
				var str = declaration.a;
				var declarations = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$SupportsRule,
					str,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
						declarations));
			case 'DocumentRule':
				var str1 = declaration.a;
				var str2 = declaration.b;
				var str3 = declaration.c;
				var str4 = declaration.d;
				var structureStyleBlock = declaration.e;
				return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet = function (_v0) {
	var declarations = _v0.a;
	return declarations;
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast = F4(
	function (nestedStyles, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$elm$core$List$tail(decls));
		};
		var nextResult = A2(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
			rest,
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _v14 = _Utils_Tuple2(
				$elm$core$List$head(nextResult),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$last(declarations));
			if ((_v14.a.$ === 'Just') && (_v14.b.$ === 'Just')) {
				var nextResultParent = _v14.a.a;
				var originalParent = _v14.b.a;
				return _Utils_ap(
					A2(
						$elm$core$List$take,
						$elm$core$List$length(declarations) - 1,
						declarations),
					_List_fromArray(
						[
							(!_Utils_eq(originalParent, nextResultParent)) ? nextResultParent : originalParent
						]));
			} else {
				return declarations;
			}
		}();
		var insertStylesToNestedDecl = function (lastDecl) {
			return $elm$core$List$concat(
				A2(
					$rtfeldman$elm_css$Css$Structure$mapLast,
					$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles(nestedStyles),
					A2(
						$elm$core$List$map,
						$elm$core$List$singleton,
						A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				insertStylesToNestedDecl,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		return _Utils_ap(
			newDeclarations,
			_Utils_ap(
				withoutParent(initialResult),
				withoutParent(nextResult)));
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles = F2(
	function (styles, declarations) {
		if (!styles.b) {
			return declarations;
		} else {
			switch (styles.a.$) {
				case 'AppendProperty':
					var property = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, declarations));
				case 'ExtendSelector':
					var _v4 = styles.a;
					var selector = _v4.a;
					var nestedStyles = _v4.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector(selector),
						declarations);
				case 'NestSnippet':
					var _v5 = styles.a;
					var selectorCombinator = _v5.a;
					var snippets = _v5.b;
					var rest = styles.b;
					var chain = F2(
						function (_v9, _v10) {
							var originalSequence = _v9.a;
							var originalTuples = _v9.b;
							var originalPseudoElement = _v9.c;
							var newSequence = _v10.a;
							var newTuples = _v10.b;
							var newPseudoElement = _v10.c;
							return A3(
								$rtfeldman$elm_css$Css$Structure$Selector,
								originalSequence,
								_Utils_ap(
									originalTuples,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(selectorCombinator, newSequence),
										newTuples)),
								$rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf(
									_List_fromArray(
										[newPseudoElement, originalPseudoElement])));
						});
					var expandDeclaration = function (declaration) {
						switch (declaration.$) {
							case 'StyleBlockDeclaration':
								var _v7 = declaration.a;
								var firstSelector = _v7.a;
								var otherSelectors = _v7.b;
								var nestedStyles = _v7.c;
								var newSelectors = A2(
									$elm$core$List$concatMap,
									function (originalSelector) {
										return A2(
											$elm$core$List$map,
											chain(originalSelector),
											A2($elm$core$List$cons, firstSelector, otherSelectors));
									},
									$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations));
								var newDeclarations = function () {
									if (!newSelectors.b) {
										return _List_Nil;
									} else {
										var first = newSelectors.a;
										var remainder = newSelectors.b;
										return _List_fromArray(
											[
												$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
												A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, remainder, _List_Nil))
											]);
									}
								}();
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, nestedStyles, newDeclarations);
							case 'MediaRule':
								var mediaQueries = declaration.a;
								var styleBlocks = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
							case 'SupportsRule':
								var str = declaration.a;
								var otherSnippets = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, otherSnippets);
							case 'DocumentRule':
								var str1 = declaration.a;
								var str2 = declaration.b;
								var str3 = declaration.c;
								var str4 = declaration.d;
								var styleBlock = declaration.e;
								return A2(
									$elm$core$List$map,
									A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
									$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
							case 'PageRule':
								var str = declaration.a;
								var properties = declaration.b;
								return _List_fromArray(
									[
										A2($rtfeldman$elm_css$Css$Structure$PageRule, str, properties)
									]);
							case 'FontFace':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$FontFace(properties)
									]);
							case 'Viewport':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$Viewport(properties)
									]);
							case 'CounterStyle':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
									]);
							default:
								var tuples = declaration.a;
								return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
						}
					};
					return $elm$core$List$concat(
						_Utils_ap(
							_List_fromArray(
								[
									A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations)
								]),
							A2(
								$elm$core$List$map,
								expandDeclaration,
								A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets))));
				case 'WithPseudoElement':
					var _v11 = styles.a;
					var pseudoElement = _v11.a;
					var nestedStyles = _v11.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector(pseudoElement),
						declarations);
				case 'WithKeyframes':
					var str = styles.a.a;
					var rest = styles.b;
					var name = $rtfeldman$elm_css$Hash$fromString(str);
					var newProperty = 'animation-name:' + name;
					var newDeclarations = A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, newProperty, declarations));
					return A2(
						$elm$core$List$append,
						newDeclarations,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$Keyframes(
								{declaration: str, name: name})
							]));
				case 'WithMedia':
					var _v12 = styles.a;
					var mediaQueries = _v12.a;
					var nestedStyles = _v12.b;
					var rest = styles.b;
					var extraDeclarations = function () {
						var _v13 = $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations);
						if (!_v13.b) {
							return _List_Nil;
						} else {
							var firstSelector = _v13.a;
							var otherSelectors = _v13.b;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule(mediaQueries),
								A2(
									$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
									nestedStyles,
									$elm$core$List$singleton(
										$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
											A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil)))));
						}
					}();
					return _Utils_ap(
						A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations),
						extraDeclarations);
				default:
					var otherStyles = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						_Utils_ap(otherStyles, rest),
						declarations);
			}
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock = function (_v2) {
	var firstSelector = _v2.a;
	var otherSelectors = _v2.b;
	var styles = _v2.c;
	return A2(
		$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
		styles,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
				A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil))
			]));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$extract = function (snippetDeclarations) {
	if (!snippetDeclarations.b) {
		return _List_Nil;
	} else {
		var first = snippetDeclarations.a;
		var rest = snippetDeclarations.b;
		return _Utils_ap(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations(first),
			$rtfeldman$elm_css$Css$Preprocess$Resolve$extract(rest));
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			return A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		};
		return A2($elm$core$List$concatMap, handleStyleBlock, styleBlocks);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
			A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
		return _List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$Structure$SupportsRule, str, declarations)
			]);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations = function (snippetDeclaration) {
	switch (snippetDeclaration.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock);
		case 'MediaRule':
			var mediaQueries = snippetDeclaration.a;
			var styleBlocks = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
		case 'SupportsRule':
			var str = snippetDeclaration.a;
			var snippets = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, snippets);
		case 'DocumentRule':
			var str1 = snippetDeclaration.a;
			var str2 = snippetDeclaration.b;
			var str3 = snippetDeclaration.c;
			var str4 = snippetDeclaration.d;
			var styleBlock = snippetDeclaration.e;
			return A2(
				$elm$core$List$map,
				A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		case 'PageRule':
			var str = snippetDeclaration.a;
			var properties = snippetDeclaration.b;
			return _List_fromArray(
				[
					A2($rtfeldman$elm_css$Css$Structure$PageRule, str, properties)
				]);
		case 'FontFace':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$FontFace(properties)
				]);
		case 'Viewport':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$Viewport(properties)
				]);
		case 'CounterStyle':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
				]);
		default:
			var tuples = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var snippets = _v0.snippets;
	var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
		A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
	return {charset: charset, declarations: declarations, imports: imports, namespaces: namespaces};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp = function (sheet) {
	return $rtfeldman$elm_css$Css$Structure$Output$prettyPrint(
		$rtfeldman$elm_css$Css$Structure$compactStylesheet(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure(sheet)));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$compile = function (styles) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Preprocess$Resolve$compileHelp, styles));
};
var $rtfeldman$elm_css$Css$Structure$ClassSelector = function (a) {
	return {$: 'ClassSelector', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$Snippet = function (a) {
	return {$: 'Snippet', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$makeSnippet = F2(
	function (styles, sequence) {
		var selector = A3($rtfeldman$elm_css$Css$Structure$Selector, sequence, _List_Nil, $elm$core$Maybe$Nothing);
		return $rtfeldman$elm_css$Css$Preprocess$Snippet(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration(
					A3($rtfeldman$elm_css$Css$Preprocess$StyleBlock, selector, _List_Nil, styles))
				]));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair = function (_v0) {
	var classname = _v0.a;
	var styles = _v0.b;
	return A2(
		$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
		styles,
		$rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$ClassSelector(classname)
				])));
};
var $rtfeldman$elm_css$Css$Preprocess$stylesheet = function (snippets) {
	return {charset: $elm$core$Maybe$Nothing, imports: _List_Nil, namespaces: _List_Nil, snippets: snippets};
};
var $rtfeldman$elm_css$VirtualDom$Styled$toDeclaration = function (dict) {
	return $rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
		$elm$core$List$singleton(
			$rtfeldman$elm_css$Css$Preprocess$stylesheet(
				A2(
					$elm$core$List$map,
					$rtfeldman$elm_css$VirtualDom$Styled$snippetFromPair,
					$elm$core$Dict$toList(dict)))));
};
var $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode = function (styles) {
	return A3(
		$elm$virtual_dom$VirtualDom$node,
		'style',
		_List_Nil,
		$elm$core$List$singleton(
			$elm$virtual_dom$VirtualDom$text(
				$rtfeldman$elm_css$VirtualDom$Styled$toDeclaration(styles))));
};
var $rtfeldman$elm_css$VirtualDom$Styled$unstyle = F3(
	function (elemType, properties, children) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);
		return A3(
			$elm$virtual_dom$VirtualDom$node,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$containsKey = F2(
	function (key, pairs) {
		containsKey:
		while (true) {
			if (!pairs.b) {
				return false;
			} else {
				var _v1 = pairs.a;
				var str = _v1.a;
				var rest = pairs.b;
				if (_Utils_eq(key, str)) {
					return true;
				} else {
					var $temp$key = key,
						$temp$pairs = rest;
					key = $temp$key;
					pairs = $temp$pairs;
					continue containsKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey = F2(
	function (_default, pairs) {
		getUnusedKey:
		while (true) {
			if (!pairs.b) {
				return _default;
			} else {
				var _v1 = pairs.a;
				var firstKey = _v1.a;
				var rest = pairs.b;
				var newKey = '_' + firstKey;
				if (A2($rtfeldman$elm_css$VirtualDom$Styled$containsKey, newKey, rest)) {
					var $temp$default = newKey,
						$temp$pairs = rest;
					_default = $temp$default;
					pairs = $temp$pairs;
					continue getUnusedKey;
				} else {
					return newKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode = F2(
	function (allStyles, keyedChildNodes) {
		var styleNodeKey = A2($rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey, '_', keyedChildNodes);
		var finalNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(allStyles);
		return _Utils_Tuple2(styleNodeKey, finalNode);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed = F3(
	function (elemType, properties, keyedChildren) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);
		return A3(
			$elm$virtual_dom$VirtualDom$keyedNode,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS = F4(
	function (ns, elemType, properties, keyedChildren) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, styles, keyedChildNodes);
		return A4(
			$elm$virtual_dom$VirtualDom$keyedNodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleNS = F4(
	function (ns, elemType, properties, children) {
		var unstyledProperties = A2($elm$core$List$map, $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute, properties);
		var initialStyles = $rtfeldman$elm_css$VirtualDom$Styled$stylesFromProperties(properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode(styles);
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled = function (vdom) {
	switch (vdom.$) {
		case 'Unstyled':
			var plainNode = vdom.a;
			return plainNode;
		case 'Node':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A3($rtfeldman$elm_css$VirtualDom$Styled$unstyle, elemType, properties, children);
		case 'NodeNS':
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyleNS, ns, elemType, properties, children);
		case 'KeyedNode':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A3($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed, elemType, properties, children);
		default:
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS, ns, elemType, properties, children);
	}
};
var $rtfeldman$elm_css$Html$Styled$toUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled;
var $author$project$DevTools$SimpleChange = function (a) {
	return {$: 'SimpleChange', a: a};
};
var $author$project$Replicated$Reducer$RepList$list = function (_v0) {
	var repSetRecord = _v0.a;
	return repSetRecord.members;
};
var $author$project$Replicated$Reducer$RepList$remove = F2(
	function (_v0, _v1) {
		var itemToRemove = _v0.a;
		var record = _v1.a;
		var finalChangeSet = function (frameIndex) {
			return $author$project$Replicated$Change$changeObject(
				{
					objectChanges: _List_fromArray(
						[
							$author$project$Replicated$Change$RevertOp(itemToRemove)
						]),
					target: record.pointer
				}).changeSet;
		};
		return $author$project$Replicated$Change$WithFrameIndex(finalChangeSet);
	});
var $author$project$DevTools$errorList = function (errors) {
	var showItem = function (_v0) {
		var handle = _v0.handle;
		var value = _v0.value;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$DevTools$SimpleChange(
						A2($author$project$Replicated$Reducer$RepList$remove, handle, errors)))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(value)
				]));
	};
	var errorItems = A2(
		$elm$core$List$map,
		showItem,
		$author$project$Replicated$Reducer$RepList$list(errors));
	return A2($mdgriffith$elm_ui$Element$column, _List_Nil, errorItems);
};
var $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode = $rtfeldman$elm_css$VirtualDom$Styled$Unstyled;
var $rtfeldman$elm_css$Html$Styled$fromUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode;
var $mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet = {$: 'NoStaticStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$RenderModeOption = function (a) {
	return {$: 'RenderModeOption', a: a};
};
var $mdgriffith$elm_ui$Element$noStaticStyleSheet = $mdgriffith$elm_ui$Internal$Model$RenderModeOption($mdgriffith$elm_ui$Internal$Model$NoStaticStyleSheet);
var $author$project$DevTools$view = F3(
	function (state, profile, _v0) {
		return $rtfeldman$elm_css$Html$Styled$fromUnstyled(
			A3(
				$mdgriffith$elm_ui$Element$layoutWith,
				{
					options: _List_fromArray(
						[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
				},
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$author$project$DevTools$errorList(profile.errors),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(state.ron))
						]))));
	});
var $author$project$TaskList$AllTasks = {$: 'AllTasks'};
var $rtfeldman$elm_css$VirtualDom$Styled$property = F2(
	function (key, value) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$property, key, value),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$class = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('className');
var $rtfeldman$elm_css$VirtualDom$Styled$murmurSeed = 15739;
var $rtfeldman$elm_css$VirtualDom$Styled$getClassname = function (styles) {
	return $elm$core$List$isEmpty(styles) ? 'unstyled' : A2(
		$elm$core$String$cons,
		_Utils_chr('_'),
		$rtfeldman$elm_hex$Hex$toString(
			A2(
				$rtfeldman$elm_css$ElmCssVendor$Murmur3$hashString,
				$rtfeldman$elm_css$VirtualDom$Styled$murmurSeed,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
					$elm$core$List$singleton(
						$rtfeldman$elm_css$Css$Preprocess$stylesheet(
							$elm$core$List$singleton(
								A2(
									$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
									styles,
									$rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(_List_Nil)))))))));
};
var $rtfeldman$elm_css$Html$Styled$Internal$css = function (styles) {
	var classname = $rtfeldman$elm_css$VirtualDom$Styled$getClassname(styles);
	var classProperty = A2(
		$elm$virtual_dom$VirtualDom$property,
		'className',
		$elm$json$Json$Encode$string(classname));
	return A3($rtfeldman$elm_css$VirtualDom$Styled$Attribute, classProperty, styles, classname);
};
var $rtfeldman$elm_css$Html$Styled$Attributes$css = $rtfeldman$elm_css$Html$Styled$Internal$css;
var $rtfeldman$elm_css$Html$Styled$div = $rtfeldman$elm_css$Html$Styled$node('div');
var $rtfeldman$elm_css$Css$Structure$Compatible = {$: 'Compatible'};
var $rtfeldman$elm_css$Css$hidden = {borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, overflow: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'hidden', visibility: $rtfeldman$elm_css$Css$Structure$Compatible};
var $elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp = F2(
	function (fn, arg) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			fn(arg));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy = F2(
	function (fn, arg) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A3($elm$virtual_dom$VirtualDom$lazy2, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp, fn, arg));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy = $rtfeldman$elm_css$VirtualDom$Styled$lazy;
var $elm$virtual_dom$VirtualDom$lazy5 = _VirtualDom_lazy5;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp4 = F5(
	function (fn, arg1, arg2, arg3, arg4) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			A4(fn, arg1, arg2, arg3, arg4));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy4 = F5(
	function (fn, arg1, arg2, arg3, arg4) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A6($elm$virtual_dom$VirtualDom$lazy5, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp4, fn, arg1, arg2, arg3, arg4));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy4 = $rtfeldman$elm_css$VirtualDom$Styled$lazy4;
var $rtfeldman$elm_css$Html$Styled$section = $rtfeldman$elm_css$Html$Styled$node('section');
var $author$project$TaskList$allFullTaskInstances = F2(
	function (profile, _v0) {
		var launchTime = _v0.a;
		var zone = _v0.b;
		return A3(
			$author$project$Task$AssignedAction$prioritize,
			launchTime,
			zone,
			A2(
				$author$project$Profile$instanceListNow,
				profile,
				_Utils_Tuple2(launchTime, zone)));
	});
var $rtfeldman$elm_css$Html$Styled$footer = $rtfeldman$elm_css$Html$Styled$node('footer');
var $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$hidden = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('hidden');
var $author$project$TaskList$DeleteComplete = {$: 'DeleteComplete'};
var $rtfeldman$elm_css$Html$Styled$button = $rtfeldman$elm_css$Html$Styled$node('button');
var $rtfeldman$elm_css$VirtualDom$Styled$on = F2(
	function (eventName, handler) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$on, eventName, handler),
			_List_Nil,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Events$on = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $rtfeldman$elm_css$Html$Styled$Events$onClick = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $rtfeldman$elm_css$VirtualDom$Styled$text = function (str) {
	return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
		$elm$virtual_dom$VirtualDom$text(str));
};
var $rtfeldman$elm_css$Html$Styled$text = $rtfeldman$elm_css$VirtualDom$Styled$text;
var $author$project$TaskList$viewControlsClear = function (tasksCompleted) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$button,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$class('clear-completed'),
				$rtfeldman$elm_css$Html$Styled$Attributes$hidden(!tasksCompleted),
				$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$TaskList$DeleteComplete)
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text(
				'Clear completed (' + ($elm$core$String$fromInt(tasksCompleted) + ')'))
			]));
};
var $rtfeldman$elm_css$Html$Styled$span = $rtfeldman$elm_css$Html$Styled$node('span');
var $rtfeldman$elm_css$Html$Styled$strong = $rtfeldman$elm_css$Html$Styled$node('strong');
var $author$project$TaskList$viewControlsCount = function (tasksLeft) {
	var item_ = (tasksLeft === 1) ? ' item' : ' items';
	return A2(
		$rtfeldman$elm_css$Html$Styled$span,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$class('task-count')
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$strong,
				_List_Nil,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(
						$elm$core$String$fromInt(tasksLeft))
					])),
				$rtfeldman$elm_css$Html$Styled$text(item_ + ' left')
			]));
};
var $author$project$TaskList$AllIncompleteTasks = {$: 'AllIncompleteTasks'};
var $author$project$TaskList$CompleteTasksOnly = {$: 'CompleteTasksOnly'};
var $rtfeldman$elm_css$Html$Styled$ul = $rtfeldman$elm_css$Html$Styled$node('ul');
var $author$project$TaskList$Refilter = function (a) {
	return {$: 'Refilter', a: a};
};
var $rtfeldman$elm_css$Html$Styled$Attributes$checked = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('checked');
var $rtfeldman$elm_css$Html$Styled$Attributes$classList = function (classes) {
	return $rtfeldman$elm_css$Html$Styled$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $author$project$TaskList$filterName = function (filter) {
	switch (filter.$) {
		case 'AllTasks':
			return 'All';
		case 'CompleteTasksOnly':
			return 'Complete';
		case 'AllIncompleteTasks':
			return 'Remaining';
		default:
			return 'Doable Now';
	}
};
var $rtfeldman$elm_css$Html$Styled$Attributes$for = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('htmlFor');
var $rtfeldman$elm_css$Html$Styled$input = $rtfeldman$elm_css$Html$Styled$node('input');
var $rtfeldman$elm_css$Html$Styled$label = $rtfeldman$elm_css$Html$Styled$node('label');
var $rtfeldman$elm_css$Html$Styled$li = $rtfeldman$elm_css$Html$Styled$node('li');
var $rtfeldman$elm_css$Html$Styled$Attributes$name = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('name');
var $elm_community$list_extra$List$Extra$remove = F2(
	function (x, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var y = xs.a;
			var ys = xs.b;
			return _Utils_eq(x, y) ? ys : A2(
				$elm$core$List$cons,
				y,
				A2($elm_community$list_extra$List$Extra$remove, x, ys));
		}
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$type_ = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('type');
var $author$project$TaskList$visibilitySwap = F3(
	function (name, visibilityToDisplay, actualVisibility) {
		var isCurrent = A2($elm$core$List$member, visibilityToDisplay, actualVisibility);
		var changeList = isCurrent ? A2($elm_community$list_extra$List$Extra$remove, visibilityToDisplay, actualVisibility) : A2($elm$core$List$cons, visibilityToDisplay, actualVisibility);
		return A2(
			$rtfeldman$elm_css$Html$Styled$li,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$input,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox'),
							$rtfeldman$elm_css$Html$Styled$Attributes$checked(isCurrent),
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							$author$project$TaskList$Refilter(changeList)),
							$rtfeldman$elm_css$Html$Styled$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('selected', isCurrent)
								])),
							$rtfeldman$elm_css$Html$Styled$Attributes$name(name)
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$label,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$for(name)
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(
							$author$project$TaskList$filterName(visibilityToDisplay))
						]))
				]));
	});
var $author$project$TaskList$viewControlsFilters = function (visibilityFilters) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$ul,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$class('filters')
			]),
		_List_fromArray(
			[
				A3($author$project$TaskList$visibilitySwap, 'all', $author$project$TaskList$AllTasks, visibilityFilters),
				$rtfeldman$elm_css$Html$Styled$text(' '),
				A3($author$project$TaskList$visibilitySwap, 'active', $author$project$TaskList$AllIncompleteTasks, visibilityFilters),
				$rtfeldman$elm_css$Html$Styled$text(' '),
				A3($author$project$TaskList$visibilitySwap, 'completed', $author$project$TaskList$CompleteTasksOnly, visibilityFilters),
				$rtfeldman$elm_css$Html$Styled$text(' '),
				A3($author$project$TaskList$visibilitySwap, 'relevant', $author$project$TaskList$AllRelevantTasks, visibilityFilters)
			]));
};
var $author$project$TaskList$viewControls = F4(
	function (visibilityFilters, time, zone, profile) {
		var sortedTasks = A2(
			$author$project$TaskList$allFullTaskInstances,
			profile,
			_Utils_Tuple2(time, zone));
		var tasksCompleted = $elm$core$List$length(
			A2($elm$core$List$filter, $author$project$Task$AssignedAction$completed, sortedTasks));
		var tasksLeft = $elm$core$List$length(sortedTasks) - tasksCompleted;
		return A2(
			$rtfeldman$elm_css$Html$Styled$footer,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('footer'),
					$rtfeldman$elm_css$Html$Styled$Attributes$hidden(
					$elm$core$List$isEmpty(sortedTasks))
				]),
			_List_fromArray(
				[
					A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$TaskList$viewControlsCount, tasksLeft),
					A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$TaskList$viewControlsFilters, visibilityFilters),
					A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$TaskList$viewControlsClear, tasksCompleted)
				]));
	});
var $author$project$TaskList$Add = {$: 'Add'};
var $author$project$TaskList$UpdateNewEntryField = function (a) {
	return {$: 'UpdateNewEntryField', a: a};
};
var $rtfeldman$elm_css$Html$Styled$Attributes$autofocus = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('autofocus');
var $rtfeldman$elm_css$Html$Styled$header = $rtfeldman$elm_css$Html$Styled$node('header');
var $rtfeldman$elm_css$Html$Styled$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $author$project$TaskList$onEnter = function (msg) {
	var isEnter = function (code) {
		return (code === 13) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('not ENTER');
	};
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'keydown',
		A2($elm$json$Json$Decode$andThen, isEnter, $rtfeldman$elm_css$Html$Styled$Events$keyCode));
};
var $rtfeldman$elm_css$Html$Styled$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $rtfeldman$elm_css$Html$Styled$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $rtfeldman$elm_css$Html$Styled$Events$onInput = function (tagger) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$rtfeldman$elm_css$Html$Styled$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $rtfeldman$elm_css$Html$Styled$Events$targetValue)));
};
var $rtfeldman$elm_css$Html$Styled$Attributes$placeholder = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('placeholder');
var $rtfeldman$elm_css$Html$Styled$Attributes$value = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('value');
var $author$project$TaskList$viewInput = function (newEntryFieldContents) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$header,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$class('header')
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$input,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$class('new-task'),
						$rtfeldman$elm_css$Html$Styled$Attributes$placeholder('What needs to be done?'),
						$rtfeldman$elm_css$Html$Styled$Attributes$autofocus(true),
						$rtfeldman$elm_css$Html$Styled$Attributes$value(newEntryFieldContents),
						$rtfeldman$elm_css$Html$Styled$Attributes$name('newTask'),
						$rtfeldman$elm_css$Html$Styled$Events$onInput($author$project$TaskList$UpdateNewEntryField),
						$author$project$TaskList$onEnter($author$project$TaskList$Add)
					]),
				_List_Nil)
			]));
};
var $author$project$SmartTime$Human$Calendar$compare = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		var _v2 = A2($elm$core$Basics$compare, a, b);
		switch (_v2.$) {
			case 'EQ':
				return $author$project$SmartTime$Moment$Coincident;
			case 'LT':
				return $author$project$SmartTime$Moment$Earlier;
			default:
				return $author$project$SmartTime$Moment$Later;
		}
	});
var $author$project$SmartTime$Human$Moment$compareFuzzy = F4(
	function (zone, defaultTime, fuzzyA, fuzzyB) {
		var _v0 = _Utils_Tuple2(fuzzyA, fuzzyB);
		if ((_v0.a.$ === 'DateOnly') && (_v0.b.$ === 'DateOnly')) {
			var dateA = _v0.a.a;
			var dateB = _v0.b.a;
			return A2($author$project$SmartTime$Human$Calendar$compare, dateA, dateB);
		} else {
			return A2(
				$author$project$SmartTime$Moment$compare,
				A3($author$project$SmartTime$Human$Moment$fromFuzzyWithDefaultTime, zone, defaultTime, fuzzyA),
				A3($author$project$SmartTime$Human$Moment$fromFuzzyWithDefaultTime, zone, defaultTime, fuzzyB));
		}
	});
var $author$project$SmartTime$Human$Clock$startOfDay = $author$project$SmartTime$Duration$zero;
var $author$project$Task$AssignedAction$isRelevantNow = F3(
	function (instance, now, zone) {
		var fuzzyNow = $author$project$SmartTime$Human$Moment$Global(now);
		var start = A2(
			$elm$core$Maybe$withDefault,
			fuzzyNow,
			$author$project$Replicated$Reducer$Register$latest(instance.instance).relevanceStarts.get);
		var notBeforeStart = !_Utils_eq(
			A4($author$project$SmartTime$Human$Moment$compareFuzzy, zone, $author$project$SmartTime$Human$Clock$startOfDay, fuzzyNow, start),
			$author$project$SmartTime$Moment$Earlier);
		var end = A2(
			$elm$core$Maybe$withDefault,
			fuzzyNow,
			$author$project$Replicated$Reducer$Register$latest(instance.instance).relevanceEnds.get);
		var notAfterEnd = !_Utils_eq(
			A4($author$project$SmartTime$Human$Moment$compareFuzzy, zone, $author$project$SmartTime$Human$Clock$endOfDay, fuzzyNow, end),
			$author$project$SmartTime$Moment$Later);
		return notBeforeStart && notAfterEnd;
	});
var $rtfeldman$elm_css$VirtualDom$Styled$keyedNode = $rtfeldman$elm_css$VirtualDom$Styled$KeyedNode;
var $rtfeldman$elm_css$Html$Styled$Keyed$node = $rtfeldman$elm_css$VirtualDom$Styled$keyedNode;
var $rtfeldman$elm_css$Html$Styled$Keyed$ul = $rtfeldman$elm_css$Html$Styled$Keyed$node('ul');
var $author$project$Task$AssignedAction$getIDString = function (ins) {
	return $author$project$ID$toString(ins.instanceID);
};
var $elm$virtual_dom$VirtualDom$lazy4 = _VirtualDom_lazy4;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp3 = F4(
	function (fn, arg1, arg2, arg3) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			A3(fn, arg1, arg2, arg3));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy3 = F4(
	function (fn, arg1, arg2, arg3) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A5($elm$virtual_dom$VirtualDom$lazy4, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp3, fn, arg1, arg2, arg3));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy3 = $rtfeldman$elm_css$VirtualDom$Styled$lazy3;
var $author$project$TaskList$Delete = function (a) {
	return {$: 'Delete', a: a};
};
var $author$project$TaskList$EditingTitle = F2(
	function (a, b) {
		return {$: 'EditingTitle', a: a, b: b};
	});
var $author$project$TaskList$FocusSlider = F2(
	function (a, b) {
		return {$: 'FocusSlider', a: a, b: b};
	});
var $author$project$TaskList$UpdateTitle = F2(
	function (a, b) {
		return {$: 'UpdateTitle', a: a, b: b};
	});
var $author$project$Replicated$Codec$encodeToJsonString = F2(
	function (codec, value) {
		return A2(
			$elm$json$Json$Encode$encode,
			0,
			A2($author$project$Replicated$Codec$getJsonEncoder, codec, value));
	});
var $author$project$Activity$Activity$idToString = function (activityID) {
	return A2($author$project$Replicated$Codec$encodeToJsonString, $author$project$Activity$Activity$idCodec, activityID);
};
var $author$project$Task$AssignedAction$getActivityIDString = function (instance) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$Activity$Activity$idToString,
		$author$project$Replicated$Reducer$Register$latest(instance._class).activity.get);
};
var $rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return funcName + ('(' + (A2($elm$core$String$join, ', ', args) + ')'));
	});
var $elm$core$Basics$pi = _Basics_pi;
var $rtfeldman$elm_css$Css$degreesToRadians = function (degrees) {
	return (degrees * 180) / $elm$core$Basics$pi;
};
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $rtfeldman$elm_css$Css$fmod = F2(
	function (f, n) {
		var integer = $elm$core$Basics$floor(f);
		return (A2($elm$core$Basics$modBy, n, integer) + f) - integer;
	});
var $rtfeldman$elm_css$Css$hslToRgb = F3(
	function (hueVal, saturationVal, lightness) {
		var normHue = hueVal / $elm$core$Basics$degrees(60);
		var chroma = (1 - $elm$core$Basics$abs((2 * lightness) - 1)) * saturationVal;
		var m = lightness - (chroma / 2);
		var x = chroma * (1 - $elm$core$Basics$abs(
			A2($rtfeldman$elm_css$Css$fmod, normHue, 2) - 1));
		var _v0 = (normHue < 0) ? _Utils_Tuple3(0, 0, 0) : ((normHue < 1) ? _Utils_Tuple3(chroma, x, 0) : ((normHue < 2) ? _Utils_Tuple3(x, chroma, 0) : ((normHue < 3) ? _Utils_Tuple3(0, chroma, x) : ((normHue < 4) ? _Utils_Tuple3(0, x, chroma) : ((normHue < 5) ? _Utils_Tuple3(x, 0, chroma) : ((normHue < 6) ? _Utils_Tuple3(chroma, 0, x) : _Utils_Tuple3(0, 0, 0)))))));
		var r = _v0.a;
		var g = _v0.b;
		var b = _v0.c;
		return _Utils_Tuple3(r + m, g + m, b + m);
	});
var $rtfeldman$elm_css$Css$hslaToRgba = F5(
	function (value, hueVal, saturationVal, lightness, hslAlpha) {
		var _v0 = A3(
			$rtfeldman$elm_css$Css$hslToRgb,
			$rtfeldman$elm_css$Css$degreesToRadians(hueVal),
			saturationVal,
			lightness);
		var red = _v0.a;
		var green = _v0.b;
		var blue = _v0.c;
		return {
			alpha: hslAlpha,
			blue: $elm$core$Basics$floor(blue),
			color: $rtfeldman$elm_css$Css$Structure$Compatible,
			green: $elm$core$Basics$floor(green),
			red: $elm$core$Basics$floor(red),
			value: value
		};
	});
var $rtfeldman$elm_css$Css$numericalPercentageToString = function (value) {
	return $elm$core$String$fromFloat(value * 100) + '%';
};
var $rtfeldman$elm_css$Css$hsl = F3(
	function (hueVal, saturationVal, lightnessVal) {
		var valuesList = _List_fromArray(
			[
				$elm$core$String$fromFloat(hueVal),
				$rtfeldman$elm_css$Css$numericalPercentageToString(saturationVal),
				$rtfeldman$elm_css$Css$numericalPercentageToString(lightnessVal)
			]);
		var value = A2($rtfeldman$elm_css$Css$cssFunction, 'hsl', valuesList);
		return A5($rtfeldman$elm_css$Css$hslaToRgba, value, hueVal, saturationVal, lightnessVal, 1);
	});
var $author$project$TaskList$activityColor = function (task) {
	var activityDerivation = function (n) {
		return A2($elm$core$Basics$modBy, 360, (n + 1) * 333);
	};
	var _v0 = A2(
		$elm$core$Maybe$map,
		$elm$core$String$length,
		$author$project$Task$AssignedAction$getActivityIDString(task));
	if (_v0.$ === 'Just') {
		var activityNumber = _v0.a;
		var hue = activityDerivation(activityNumber);
		return {
			darker: A3($rtfeldman$elm_css$Css$hsl, hue, 0.5, 0.3),
			lighter: A3($rtfeldman$elm_css$Css$hsl, hue, 0.5, 0.8),
			medium: A3($rtfeldman$elm_css$Css$hsl, hue, 0.5, 0.5)
		};
	} else {
		return {
			darker: A3($rtfeldman$elm_css$Css$hsl, 0, 0, 0.3),
			lighter: A3($rtfeldman$elm_css$Css$hsl, 0, 0, 0.8),
			medium: A3($rtfeldman$elm_css$Css$hsl, 0, 0, 0.5)
		};
	}
};
var $rtfeldman$elm_css$Css$Preprocess$ApplyStyles = function (a) {
	return {$: 'ApplyStyles', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$AppendProperty = function (a) {
	return {$: 'AppendProperty', a: a};
};
var $rtfeldman$elm_css$Css$Internal$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));
	});
var $rtfeldman$elm_css$Css$Internal$getOverloadedProperty = F3(
	function (functionName, desiredKey, style) {
		getOverloadedProperty:
		while (true) {
			switch (style.$) {
				case 'AppendProperty':
					var str = style.a;
					var key = A2(
						$elm$core$Maybe$withDefault,
						'',
						$elm$core$List$head(
							A2($elm$core$String$split, ':', str)));
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, key);
				case 'ExtendSelector':
					var selector = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-selector'));
				case 'NestSnippet':
					var combinator = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-combinator'));
				case 'WithPseudoElement':
					var pseudoElement = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-pseudo-element setter'));
				case 'WithMedia':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-media-query'));
				case 'WithKeyframes':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-keyframes'));
				default:
					if (!style.a.b) {
						return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-empty-Style'));
					} else {
						if (!style.a.b.b) {
							var _v1 = style.a;
							var only = _v1.a;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = only;
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						} else {
							var _v2 = style.a;
							var first = _v2.a;
							var rest = _v2.b;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = $rtfeldman$elm_css$Css$Preprocess$ApplyStyles(rest);
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var $rtfeldman$elm_css$Css$Internal$IncompatibleUnits = {$: 'IncompatibleUnits'};
var $rtfeldman$elm_css$Css$Internal$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			absoluteLength: $rtfeldman$elm_css$Css$Structure$Compatible,
			calc: $rtfeldman$elm_css$Css$Structure$Compatible,
			flexBasis: $rtfeldman$elm_css$Css$Structure$Compatible,
			fontSize: $rtfeldman$elm_css$Css$Structure$Compatible,
			length: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
			numericValue: numericValue,
			textIndent: $rtfeldman$elm_css$Css$Structure$Compatible,
			unitLabel: unitLabel,
			units: units,
			value: _Utils_ap(
				$elm$core$String$fromFloat(numericValue),
				unitLabel)
		};
	});
var $rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty = A3($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$Internal$IncompatibleUnits, '', 0);
var $rtfeldman$elm_css$Css$alignItems = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'alignItems',
		'align-items',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(key + (':' + value));
	});
var $rtfeldman$elm_css$Css$backgroundColor = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'background-color', c.value);
};
var $rtfeldman$elm_css$Css$prop3 = F4(
	function (key, argA, argB, argC) {
		return A2(
			$rtfeldman$elm_css$Css$property,
			key,
			A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					[argA.value, argB.value, argC.value])));
	});
var $rtfeldman$elm_css$Css$border3 = $rtfeldman$elm_css$Css$prop3('border');
var $rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2($rtfeldman$elm_css$Css$property, key, arg.value);
	});
var $rtfeldman$elm_css$Css$borderRadius = $rtfeldman$elm_css$Css$prop1('border-radius');
var $rtfeldman$elm_css$Css$center = $rtfeldman$elm_css$Css$prop1('center');
var $rtfeldman$elm_css$Css$color = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'color', c.value);
};
var $rtfeldman$elm_css$Css$row = {flexDirection: $rtfeldman$elm_css$Css$Structure$Compatible, flexDirectionOrWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'row'};
var $rtfeldman$elm_css$Css$column = _Utils_update(
	$rtfeldman$elm_css$Css$row,
	{value: 'column'});
var $rtfeldman$elm_css$Css$displayFlex = A2($rtfeldman$elm_css$Css$property, 'display', 'flex');
var $rtfeldman$elm_css$Css$EmUnits = {$: 'EmUnits'};
var $rtfeldman$elm_css$Css$em = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$EmUnits, 'em');
var $rtfeldman$elm_css$Css$end = $rtfeldman$elm_css$Css$prop1('end');
var $rtfeldman$elm_css$Css$flex3 = $rtfeldman$elm_css$Css$prop3('flex');
var $rtfeldman$elm_css$Css$flexDirection = $rtfeldman$elm_css$Css$prop1('flex-direction');
var $rtfeldman$elm_css$Css$fontFamily = $rtfeldman$elm_css$Css$prop1('font-family');
var $rtfeldman$elm_css$Css$fontSize = $rtfeldman$elm_css$Css$prop1('font-size');
var $rtfeldman$elm_css$Css$fontWeight = function (_v0) {
	var value = _v0.value;
	return A2($rtfeldman$elm_css$Css$property, 'font-weight', value);
};
var $author$project$Task$AssignedAction$getImportance = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).importance.get;
};
var $author$project$Task$AssignedAction$getMaxEffort = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).maxEffort.get;
};
var $author$project$Task$AssignedAction$getMinEffort = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).minEffort.get;
};
var $author$project$Task$AssignedAction$getPredictedEffort = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance._class).predictedEffort.get;
};
var $rtfeldman$elm_css$Css$height = $rtfeldman$elm_css$Css$prop1('height');
var $rtfeldman$elm_css$Html$Styled$Attributes$id = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('id');
var $author$project$SmartTime$Duration$inMinutes = function (duration) {
	return $author$project$SmartTime$Duration$inMs(duration) / $author$project$SmartTime$Duration$minuteLength;
};
var $rtfeldman$elm_css$Css$UnitlessInteger = {$: 'UnitlessInteger'};
var $rtfeldman$elm_css$Css$int = function (val) {
	return {
		fontWeight: $rtfeldman$elm_css$Css$Structure$Compatible,
		intOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
		number: $rtfeldman$elm_css$Css$Structure$Compatible,
		numberOrInfinite: $rtfeldman$elm_css$Css$Structure$Compatible,
		numericValue: val,
		unitLabel: '',
		units: $rtfeldman$elm_css$Css$UnitlessInteger,
		value: $elm$core$String$fromInt(val)
	};
};
var $author$project$SmartTime$Duration$isZero = function (_v0) {
	var _int = _v0.a;
	return !_int;
};
var $rtfeldman$elm_css$Css$justifyContent = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'justifyContent',
		'justify-content',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$letterSpacing = $rtfeldman$elm_css$Css$prop1('letter-spacing');
var $rtfeldman$elm_css$Css$monospace = {fontFamily: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'monospace'};
var $rtfeldman$elm_css$Css$none = {backgroundImage: $rtfeldman$elm_css$Css$Structure$Compatible, blockAxisOverflow: $rtfeldman$elm_css$Css$Structure$Compatible, borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, cursor: $rtfeldman$elm_css$Css$Structure$Compatible, display: $rtfeldman$elm_css$Css$Structure$Compatible, hoverCapability: $rtfeldman$elm_css$Css$Structure$Compatible, inlineAxisOverflow: $rtfeldman$elm_css$Css$Structure$Compatible, keyframes: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible, listStyleType: $rtfeldman$elm_css$Css$Structure$Compatible, listStyleTypeOrPositionOrImage: $rtfeldman$elm_css$Css$Structure$Compatible, none: $rtfeldman$elm_css$Css$Structure$Compatible, outline: $rtfeldman$elm_css$Css$Structure$Compatible, pointerDevice: $rtfeldman$elm_css$Css$Structure$Compatible, pointerEvents: $rtfeldman$elm_css$Css$Structure$Compatible, resize: $rtfeldman$elm_css$Css$Structure$Compatible, scriptingSupport: $rtfeldman$elm_css$Css$Structure$Compatible, textDecorationLine: $rtfeldman$elm_css$Css$Structure$Compatible, textTransform: $rtfeldman$elm_css$Css$Structure$Compatible, touchAction: $rtfeldman$elm_css$Css$Structure$Compatible, transform: $rtfeldman$elm_css$Css$Structure$Compatible, updateFrequency: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'none'};
var $rtfeldman$elm_css$Css$normal = {featureTagValue: $rtfeldman$elm_css$Css$Structure$Compatible, fontStyle: $rtfeldman$elm_css$Css$Structure$Compatible, fontWeight: $rtfeldman$elm_css$Css$Structure$Compatible, overflowWrap: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'normal', whiteSpace: $rtfeldman$elm_css$Css$Structure$Compatible};
var $rtfeldman$elm_css$Css$UnitlessFloat = {$: 'UnitlessFloat'};
var $rtfeldman$elm_css$Css$num = function (val) {
	return {
		lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
		number: $rtfeldman$elm_css$Css$Structure$Compatible,
		numberOrInfinite: $rtfeldman$elm_css$Css$Structure$Compatible,
		numericValue: val,
		unitLabel: '',
		units: $rtfeldman$elm_css$Css$UnitlessFloat,
		value: $elm$core$String$fromFloat(val)
	};
};
var $rtfeldman$elm_css$Html$Styled$Events$onBlur = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $rtfeldman$elm_css$Html$Styled$Events$onDoubleClick = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'dblclick',
		$elm$json$Json$Decode$succeed(msg));
};
var $rtfeldman$elm_css$Css$opacity = $rtfeldman$elm_css$Css$prop1('opacity');
var $rtfeldman$elm_css$Css$PercentageUnits = {$: 'PercentageUnits'};
var $rtfeldman$elm_css$Css$pct = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$PercentageUnits, '%');
var $rtfeldman$elm_css$Css$borderColor = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'border-color', c.value);
};
var $rtfeldman$elm_css$Css$borderStyle = $rtfeldman$elm_css$Css$prop1('border-style');
var $rtfeldman$elm_css$Css$borderWidth = $rtfeldman$elm_css$Css$prop1('border-width');
var $author$project$SmartTime$Human$Calendar$Week$dayToName = function (d) {
	switch (d.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $author$project$SmartTime$Human$Calendar$intIsBetween = F3(
	function (a, b, x) {
		return (_Utils_cmp(a, x) < 1) && (_Utils_cmp(x, b) < 1);
	});
var $author$project$SmartTime$Human$Calendar$subtract = F2(
	function (_v0, _v1) {
		var startDate = _v0.a;
		var endDate = _v1.a;
		return startDate - endDate;
	});
var $author$project$SmartTime$Human$Calendar$describeVsToday = F2(
	function (today, describee) {
		var des = $author$project$SmartTime$Human$Calendar$toParts(describee);
		var dayDiff = A2($author$project$SmartTime$Human$Calendar$subtract, describee, today);
		var _v0 = _Utils_Tuple2(dayDiff, -dayDiff);
		_v0$2:
		while (true) {
			_v0$3:
			while (true) {
				switch (_v0.b) {
					case 1:
						return 'yesterday';
					case 0:
						switch (_v0.a) {
							case 0:
								return 'today';
							case 1:
								break _v0$2;
							default:
								break _v0$3;
						}
					default:
						if (_v0.a === 1) {
							break _v0$2;
						} else {
							break _v0$3;
						}
				}
			}
			var futureDays = _v0.a;
			var pastDays = _v0.b;
			return A3($author$project$SmartTime$Human$Calendar$intIsBetween, 0, 6, futureDays) ? ('this coming ' + $author$project$SmartTime$Human$Calendar$Week$dayToName(
				$author$project$SmartTime$Human$Calendar$dayOfWeek(describee))) : (A3($author$project$SmartTime$Human$Calendar$intIsBetween, 0, 6, pastDays) ? ('this past ' + $author$project$SmartTime$Human$Calendar$Week$dayToName(
				$author$project$SmartTime$Human$Calendar$dayOfWeek(describee))) : (_Utils_eq(
				$author$project$SmartTime$Human$Calendar$year(today),
				des.year) ? ($author$project$SmartTime$Human$Calendar$Month$toName(des.month) + (' ' + $elm$core$String$fromInt(
				$author$project$SmartTime$Human$Calendar$Month$dayToInt(des.day)))) : ($author$project$SmartTime$Human$Calendar$Month$toName(des.month) + (' ' + ($elm$core$String$fromInt(
				$author$project$SmartTime$Human$Calendar$Month$dayToInt(des.day)) + (' ' + $author$project$SmartTime$Human$Calendar$Year$toString(des.year)))))));
		}
		return 'tomorrow';
	});
var $author$project$SmartTime$Human$Moment$humanizeFuzzy = F2(
	function (zone, fuzzy) {
		var wrapTimeWithJust = function (_v2) {
			var date = _v2.a;
			var time = _v2.b;
			return _Utils_Tuple2(
				date,
				$elm$core$Maybe$Just(time));
		};
		switch (fuzzy.$) {
			case 'DateOnly':
				var date = fuzzy.a;
				return _Utils_Tuple2(date, $elm$core$Maybe$Nothing);
			case 'Floating':
				var _v1 = fuzzy.a;
				var date = _v1.a;
				var time = _v1.b;
				return _Utils_Tuple2(
					date,
					$elm$core$Maybe$Just(time));
			default:
				var moment = fuzzy.a;
				return wrapTimeWithJust(
					A2($author$project$SmartTime$Human$Moment$humanize, zone, moment));
		}
	});
var $author$project$SmartTime$Human$Duration$breakdownHM = function (duration) {
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var minutes = _v0.minutes;
	return _List_fromArray(
		[
			$author$project$SmartTime$Human$Duration$Hours(
			$author$project$SmartTime$Duration$inWholeHours(duration)),
			$author$project$SmartTime$Human$Duration$Minutes(minutes)
		]);
};
var $author$project$SmartTime$Human$Clock$toShortString = function (timeOfDay) {
	return $author$project$SmartTime$Human$Duration$colonSeparated(
		$author$project$SmartTime$Human$Duration$breakdownHM(timeOfDay));
};
var $author$project$SmartTime$Human$Moment$fuzzyDescription = F3(
	function (now, zone, fuzzyMoment) {
		var _v0 = A2($author$project$SmartTime$Human$Moment$humanizeFuzzy, zone, fuzzyMoment);
		if (_v0.b.$ === 'Nothing') {
			var date = _v0.a;
			var _v1 = _v0.b;
			return A2(
				$author$project$SmartTime$Human$Calendar$describeVsToday,
				A2($author$project$SmartTime$Human$Moment$extractDate, zone, now),
				date);
		} else {
			var date = _v0.a;
			var time = _v0.b.a;
			return A2(
				$author$project$SmartTime$Human$Calendar$describeVsToday,
				A2($author$project$SmartTime$Human$Moment$extractDate, zone, now),
				date) + (' at ' + $author$project$SmartTime$Human$Clock$toShortString(time));
		}
	});
var $author$project$Task$Session$start = function (fullSession) {
	return fullSession.session.a;
};
var $author$project$TaskList$describeTaskPlan = F2(
	function (_v0, fullSession) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A3(
			$author$project$SmartTime$Human$Moment$fuzzyDescription,
			time,
			timeZone,
			$author$project$Task$Session$start(fullSession));
	});
var $author$project$Task$Session$duration = function (fullSession) {
	return fullSession.session.b;
};
var $author$project$Task$Session$makeFullSession = F2(
	function (inherited, justSession) {
		return {_class: inherited._class, instance: inherited.instance, parents: inherited.parents, session: justSession};
	});
var $author$project$Task$Session$getFullSessions = function (fullInstance) {
	var ins = $author$project$Replicated$Reducer$Register$latest(fullInstance.instance);
	var providedSessions = $author$project$Replicated$Reducer$RepList$listValues(ins.plannedSessions);
	var _class = $author$project$Replicated$Reducer$Register$latest(fullInstance._class);
	var generatedSessions = function () {
		var taskDuration = _class.maxEffort.get;
		var sessionStart = A2($elm_community$maybe_extra$Maybe$Extra$or, ins.finishBy.get, ins.externalDeadline.get);
		if (sessionStart.$ === 'Just') {
			var foundStart = sessionStart.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(foundStart, taskDuration)
				]);
		} else {
			return _List_Nil;
		}
	}();
	var attachSession = $author$project$Task$Session$makeFullSession(fullInstance);
	return _Utils_ap(
		A2($elm$core$List$map, attachSession, providedSessions),
		A2($elm$core$List$map, attachSession, generatedSessions));
};
var $rtfeldman$elm_css$Css$overflow = $rtfeldman$elm_css$Css$prop1('overflow');
var $rtfeldman$elm_css$Css$padding = $rtfeldman$elm_css$Css$prop1('padding');
var $rtfeldman$elm_css$Css$PxUnits = {$: 'PxUnits'};
var $rtfeldman$elm_css$Css$px = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$PxUnits, 'px');
var $rtfeldman$elm_css$Css$solid = {borderStyle: $rtfeldman$elm_css$Css$Structure$Compatible, textDecorationStyle: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'solid'};
var $rtfeldman$elm_css$Css$width = $rtfeldman$elm_css$Css$prop1('width');
var $author$project$TaskList$plannedSessions = F2(
	function (env, task) {
		var durationToWidgetWidthPct = function (duration) {
			return (A3(
				$elm$core$Basics$clamp,
				20,
				120,
				$author$project$SmartTime$Duration$inMinutes(duration)) / 120) * 100;
		};
		var sessionWidget = function (fullSession) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$borderStyle($rtfeldman$elm_css$Css$solid),
								$rtfeldman$elm_css$Css$borderWidth(
								$rtfeldman$elm_css$Css$px(1)),
								$rtfeldman$elm_css$Css$borderColor(
								A3($rtfeldman$elm_css$Css$hsl, 0, 1, 0)),
								$rtfeldman$elm_css$Css$borderRadius(
								$rtfeldman$elm_css$Css$em(1)),
								$rtfeldman$elm_css$Css$padding(
								$rtfeldman$elm_css$Css$em(0.2)),
								$rtfeldman$elm_css$Css$backgroundColor(
								A3($rtfeldman$elm_css$Css$hsl, 202, 0.83, 0.86)),
								$rtfeldman$elm_css$Css$width(
								$rtfeldman$elm_css$Css$pct(
									durationToWidgetWidthPct(
										$author$project$Task$Session$duration(fullSession)))),
								$rtfeldman$elm_css$Css$overflow($rtfeldman$elm_css$Css$hidden),
								$rtfeldman$elm_css$Css$height(
								$rtfeldman$elm_css$Css$em(2))
							]))
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(
						A2($author$project$TaskList$describeTaskPlan, env, fullSession))
					]));
		};
		return A2(
			$elm$core$List$map,
			sessionWidget,
			$author$project$Task$Session$getFullSessions(task));
	});
var $rtfeldman$elm_css$Css$pointerEvents = $rtfeldman$elm_css$Css$prop1('pointer-events');
var $rtfeldman$elm_css$Css$RemUnits = {$: 'RemUnits'};
var $rtfeldman$elm_css$Css$rem = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$RemUnits, 'rem');
var $author$project$TaskList$startTrackingButton = F2(
	function (task, trackedTaskMaybe) {
		var _v0 = _Utils_Tuple2(
			$author$project$Task$AssignedAction$getActivityID(task),
			A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$eq(
					$author$project$Task$AssignedAction$getID(task)),
				trackedTaskMaybe));
		if (_v0.a.$ === 'Just') {
			if ((_v0.b.$ === 'Just') && _v0.b.a) {
				var activityID = _v0.a.a;
				return $elm$core$Maybe$Just(
					A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$class('stop-tracking-now'),
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$TaskList$StopTracking(
									$author$project$Task$AssignedAction$getID(task)))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('⏸︎')
							])));
			} else {
				var activityID = _v0.a.a;
				return $elm$core$Maybe$Just(
					A2(
						$rtfeldman$elm_css$Html$Styled$button,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$class('start-tracking-now'),
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								A2(
									$author$project$TaskList$StartTracking,
									$author$project$Task$AssignedAction$getID(task),
									activityID))
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text('▶️')
							])));
			}
		} else {
			var _v1 = _v0.a;
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Task$AssignedAction$getClassIDString = function (ins) {
	return $author$project$ID$toString(ins.classID);
};
var $author$project$Task$AssignedAction$getRelevanceEnds = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance.instance).relevanceEnds.get;
};
var $author$project$Task$AssignedAction$getRelevanceStarts = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance.instance).relevanceStarts.get;
};
var $author$project$Task$Progress$toString = function (_v0) {
	var portion = _v0.a;
	var unit = _v0.b;
	switch (unit.$) {
		case 'Percent':
			return $elm$core$String$fromInt(portion) + '%';
		case 'Permille':
			return $elm$core$String$fromInt(portion) + '‰';
		case 'Word':
			var target = unit.a;
			return $elm$core$String$fromInt(portion) + (' of ' + ($elm$core$String$fromInt(target) + ' words'));
		case 'Minute':
			var target = unit.a;
			return $elm$core$String$fromInt(portion) + ('/' + ($elm$core$String$fromInt(target) + 'min'));
		default:
			var _v2 = unit.a;
			var thing = _v2.a;
			var things = _v2.b;
			var target = unit.b;
			return $elm$core$String$fromInt(portion) + (' of ' + ($elm$core$String$fromInt(target) + ((target > 1) ? things : thing)));
	}
};
var $author$project$TaskList$taskTooltip = F2(
	function (_v0, task) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return $elm$core$String$concat(
			A2(
				$elm$core$List$intersperse,
				'\n',
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_Utils_ap(
						_List_fromArray(
							[
								$elm$core$Maybe$Just(
								'Class ID: ' + $author$project$Task$AssignedAction$getClassIDString(task)),
								$elm$core$Maybe$Just(
								'Instance ID: ' + $author$project$Task$AssignedAction$getIDString(task)),
								A2(
								$elm$core$Maybe$map,
								$elm$core$String$append('activity ID: '),
								$author$project$Task$AssignedAction$getActivityIDString(task)),
								$elm$core$Maybe$Just(
								'importance: ' + $elm$core$String$fromFloat(
									$author$project$Task$AssignedAction$getImportance(task))),
								$elm$core$Maybe$Just(
								'progress: ' + $author$project$Task$Progress$toString(
									$author$project$Task$AssignedAction$getProgress(task))),
								A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									A2($author$project$SmartTime$Human$Moment$fuzzyDescription, time, timeZone),
									$elm$core$String$append('relevance starts: ')),
								$author$project$Task$AssignedAction$getRelevanceStarts(task)),
								A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									A2($author$project$SmartTime$Human$Moment$fuzzyDescription, time, timeZone),
									$elm$core$String$append('relevance ends: ')),
								$author$project$Task$AssignedAction$getRelevanceEnds(task))
							]),
						A2(
							$elm$core$List$map,
							function (_v1) {
								var k = _v1.a;
								var v = _v1.b;
								return $elm$core$Maybe$Just('instance ' + (k + (': ' + v)));
							},
							$author$project$Replicated$Reducer$RepDict$list(
								$author$project$Replicated$Reducer$Register$latest(task.instance).extra))))));
	});
var $rtfeldman$elm_css$Css$textAlign = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'textAlign',
		'text-align',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $author$project$TaskList$UpdateTaskDate = F3(
	function (a, b, c) {
		return {$: 'UpdateTaskDate', a: a, b: b, c: c};
	});
var $author$project$SmartTime$Human$Moment$setDate = F3(
	function (newDate, zone, moment) {
		var _v0 = A2($author$project$SmartTime$Human$Moment$humanize, zone, moment);
		var oldTime = _v0.b;
		return A3($author$project$SmartTime$Human$Moment$fromDateAndTime, zone, newDate, oldTime);
	});
var $author$project$TaskList$attemptDateChange = F5(
	function (_v0, task, oldFuzzyMaybe, field, input) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var _v1 = $author$project$SmartTime$Human$Calendar$fromNumberString(input);
		if (_v1.$ === 'Ok') {
			var newDate = _v1.a;
			if (oldFuzzyMaybe.$ === 'Nothing') {
				return A3(
					$author$project$TaskList$UpdateTaskDate,
					task,
					field,
					$elm$core$Maybe$Just(
						$author$project$SmartTime$Human$Moment$DateOnly(newDate)));
			} else {
				switch (oldFuzzyMaybe.a.$) {
					case 'DateOnly':
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							field,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$DateOnly(newDate)));
					case 'Floating':
						var _v3 = oldFuzzyMaybe.a.a;
						var oldTime = _v3.b;
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							field,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$Floating(
									_Utils_Tuple2(newDate, oldTime))));
					default:
						var oldMoment = oldFuzzyMaybe.a.a;
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							field,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$Global(
									A3($author$project$SmartTime$Human$Moment$setDate, newDate, timeZone, oldMoment))));
				}
			}
		} else {
			var msg = _v1.a;
			return $author$project$TaskList$NoOp;
		}
	});
var $author$project$TaskList$attemptTimeChange = F5(
	function (_v0, task, oldFuzzyMaybe, whichTimeField, input) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var _v1 = $author$project$SmartTime$Human$Clock$fromStandardString(input);
		if (_v1.$ === 'Ok') {
			var newTime = _v1.a;
			if (oldFuzzyMaybe.$ === 'Nothing') {
				return $author$project$TaskList$NoOp;
			} else {
				switch (oldFuzzyMaybe.a.$) {
					case 'DateOnly':
						var oldDate = oldFuzzyMaybe.a.a;
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							whichTimeField,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$Floating(
									_Utils_Tuple2(oldDate, newTime))));
					case 'Floating':
						var _v3 = oldFuzzyMaybe.a.a;
						var oldDate = _v3.a;
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							whichTimeField,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$Floating(
									_Utils_Tuple2(oldDate, newTime))));
					default:
						var oldMoment = oldFuzzyMaybe.a.a;
						return A3(
							$author$project$TaskList$UpdateTaskDate,
							task,
							whichTimeField,
							$elm$core$Maybe$Just(
								$author$project$SmartTime$Human$Moment$Global(
									A3($author$project$SmartTime$Human$Moment$setTime, newTime, timeZone, oldMoment))));
				}
			}
		} else {
			return $author$project$TaskList$NoOp;
		}
	});
var $author$project$SmartTime$Human$Moment$dateFromFuzzy = F2(
	function (zone, fuzzy) {
		return A2($author$project$SmartTime$Human$Moment$humanizeFuzzy, zone, fuzzy).a;
	});
var $author$project$TaskList$describeEffort = function (task) {
	var sayEffort = function (amount) {
		return $author$project$SmartTime$Human$Duration$breakdownNonzero(amount);
	};
	var _v0 = _Utils_Tuple3(
		sayEffort(
			$author$project$Task$AssignedAction$getMinEffort(task)),
		sayEffort(
			$author$project$Task$AssignedAction$getPredictedEffort(task)),
		sayEffort(
			$author$project$Task$AssignedAction$getMaxEffort(task)));
	if (!_v0.b.b) {
		if (!_v0.a.b) {
			if (!_v0.c.b) {
				return '';
			} else {
				var givenMax = _v0.c;
				return 'up to ' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMax) + ' by ');
			}
		} else {
			if (!_v0.c.b) {
				var givenMin = _v0.a;
				return 'at least ' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMin) + ' by ');
			} else {
				var givenMin = _v0.a;
				var givenMax = _v0.c;
				return $author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMin) + (' - ' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMax) + ' by '));
			}
		}
	} else {
		if ((!_v0.a.b) && (!_v0.c.b)) {
			var predicted = _v0.b;
			return '~' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(predicted) + ' by ');
		} else {
			var givenMin = _v0.a;
			var predicted = _v0.b;
			var givenMax = _v0.c;
			return '~' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(predicted) + (' (' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMin) + ('-' + ($author$project$SmartTime$Human$Duration$abbreviatedSpaced(givenMax) + ') by ')))));
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {$: 'ExtendSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$PseudoClassSelector = function (a) {
	return {$: 'PseudoClassSelector', a: a};
};
var $rtfeldman$elm_css$Css$pseudoClass = function (_class) {
	return $rtfeldman$elm_css$Css$Preprocess$ExtendSelector(
		$rtfeldman$elm_css$Css$Structure$PseudoClassSelector(_class));
};
var $rtfeldman$elm_css$Css$hover = $rtfeldman$elm_css$Css$pseudoClass('hover');
var $rtfeldman$elm_css$Css$marginRight = $rtfeldman$elm_css$Css$prop1('margin-right');
var $rtfeldman$elm_css$Html$Styled$Attributes$pattern = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('pattern');
var $rtfeldman$elm_css$Css$textDecoration = $rtfeldman$elm_css$Css$prop1('text-decoration');
var $rtfeldman$elm_css$Css$underline = {textDecorationLine: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'underline'};
var $rtfeldman$elm_css$Css$visibility = $rtfeldman$elm_css$Css$prop1('visibility');
var $rtfeldman$elm_css$Css$zIndex = $rtfeldman$elm_css$Css$prop1('z-index');
var $author$project$TaskList$editableDateLabel = F4(
	function (_v0, uniqueName, givenDateMaybe, changeEvent) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var dateRelativeDescription = A2(
			$elm$core$Maybe$withDefault,
			'whenever',
			A2(
				$elm$core$Maybe$map,
				$author$project$SmartTime$Human$Calendar$describeVsToday(
					A2($author$project$SmartTime$Human$Moment$extractDate, timeZone, time)),
				givenDateMaybe));
		var dateFormValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Calendar$toStandardString, givenDateMaybe));
		return _List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$label,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$for(uniqueName),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$hover(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$textDecoration($rtfeldman$elm_css$Css$underline)
									]))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$input,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$type_('date'),
								$rtfeldman$elm_css$Html$Styled$Attributes$name(uniqueName),
								$rtfeldman$elm_css$Html$Styled$Attributes$id(uniqueName),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$zIndex(
										$rtfeldman$elm_css$Css$int(-1)),
										$rtfeldman$elm_css$Css$height(
										$rtfeldman$elm_css$Css$em(1)),
										$rtfeldman$elm_css$Css$width(
										$rtfeldman$elm_css$Css$em(2)),
										$rtfeldman$elm_css$Css$marginRight(
										$rtfeldman$elm_css$Css$em(-2)),
										$rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$hidden)
									])),
								$rtfeldman$elm_css$Html$Styled$Events$onInput(changeEvent),
								$rtfeldman$elm_css$Html$Styled$Attributes$pattern('[0-9]{4}-[0-9]{2}-[0-9]{2}'),
								$rtfeldman$elm_css$Html$Styled$Attributes$value(dateFormValue)
							]),
						_List_Nil),
						$rtfeldman$elm_css$Html$Styled$text(dateRelativeDescription)
					]))
			]);
	});
var $author$project$TaskList$editableTimeLabel = F4(
	function (env, uniqueName, givenTimeMaybe, changeEvent) {
		var timeFormValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Clock$toShortString, givenTimeMaybe));
		var timeDescription = A2(
			$elm$core$Maybe$withDefault,
			'(+ add time)',
			A2($elm$core$Maybe$map, $author$project$SmartTime$Human$Clock$toShortString, givenTimeMaybe));
		return _List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$label,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$for(uniqueName),
						$rtfeldman$elm_css$Html$Styled$Attributes$class('editable-time-label')
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(' at '),
						A2(
						$rtfeldman$elm_css$Html$Styled$span,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$class('time-placeholder')
							]),
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$text(timeDescription)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$input,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$type_('time'),
						$rtfeldman$elm_css$Html$Styled$Attributes$name(uniqueName),
						$rtfeldman$elm_css$Html$Styled$Attributes$id(uniqueName),
						$rtfeldman$elm_css$Html$Styled$Attributes$class('editable-time'),
						$rtfeldman$elm_css$Html$Styled$Events$onInput(changeEvent),
						$rtfeldman$elm_css$Html$Styled$Attributes$pattern('[0-9]{2}:[0-9]{2}'),
						$rtfeldman$elm_css$Html$Styled$Attributes$value(timeFormValue)
					]),
				_List_Nil)
			]);
	});
var $author$project$Task$AssignedAction$getExternalDeadline = function (instance) {
	return $author$project$Replicated$Reducer$Register$latest(instance.instance).externalDeadline.get;
};
var $author$project$SmartTime$Human$Moment$timeFromFuzzy = F2(
	function (zone, fuzzy) {
		return A2($author$project$SmartTime$Human$Moment$humanizeFuzzy, zone, fuzzy).b;
	});
var $author$project$TaskList$timingInfo = F2(
	function (_v0, task) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var uniquePrefix = 'task-' + ($author$project$ID$toString(
			$author$project$Task$AssignedAction$getID(task)) + '-');
		var timeLabelNameAndID = uniquePrefix + 'due-time-field';
		var effortDescription = $author$project$TaskList$describeEffort(task);
		var deadlineTime = function () {
			var _v1 = A2(
				$elm$core$Maybe$map,
				$author$project$SmartTime$Human$Moment$timeFromFuzzy(timeZone),
				$author$project$Task$AssignedAction$getExternalDeadline(task));
			if ((_v1.$ === 'Just') && (_v1.a.$ === 'Just')) {
				var timeOfDay = _v1.a.a;
				return $elm$core$Maybe$Just(timeOfDay);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var dueTime_editable = A4(
			$author$project$TaskList$editableTimeLabel,
			_Utils_Tuple2(time, timeZone),
			timeLabelNameAndID,
			deadlineTime,
			A4(
				$author$project$TaskList$attemptTimeChange,
				_Utils_Tuple2(time, timeZone),
				task,
				$author$project$Task$AssignedAction$getExternalDeadline(task),
				'Due'));
		var dateLabelNameAndID = uniquePrefix + 'due-date-field';
		var dueDate_editable = A4(
			$author$project$TaskList$editableDateLabel,
			_Utils_Tuple2(time, timeZone),
			dateLabelNameAndID,
			A2(
				$elm$core$Maybe$map,
				$author$project$SmartTime$Human$Moment$dateFromFuzzy(timeZone),
				$author$project$Task$AssignedAction$getExternalDeadline(task)),
			A4(
				$author$project$TaskList$attemptDateChange,
				_Utils_Tuple2(time, timeZone),
				task,
				$author$project$Task$AssignedAction$getExternalDeadline(task),
				'Due'));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('timing-info')
				]),
			_Utils_ap(
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(effortDescription)
					]),
				_Utils_ap(dueDate_editable, dueTime_editable)));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$title = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('title');
var $author$project$TaskList$viewTask = F3(
	function (_v0, trackedTaskMaybe, task) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A2(
			$rtfeldman$elm_css$Html$Styled$li,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('task-entry'),
					$rtfeldman$elm_css$Html$Styled$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'completed',
							$author$project$Task$AssignedAction$completed(task)),
							_Utils_Tuple2('editing', false)
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('view')
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('task-times'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$rem(3)),
											$rtfeldman$elm_css$Css$displayFlex,
											A3(
											$rtfeldman$elm_css$Css$flex3,
											$rtfeldman$elm_css$Css$num(0),
											$rtfeldman$elm_css$Css$num(0),
											$rtfeldman$elm_css$Css$rem(3)),
											$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$rem(0.7)),
											$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center),
											$rtfeldman$elm_css$Css$letterSpacing(
											$rtfeldman$elm_css$Css$rem(-0.1))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$class('minimum-duration'),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$end)
												]))
										]),
									_List_fromArray(
										[
											$author$project$SmartTime$Duration$isZero(
											$author$project$Task$AssignedAction$getMinEffort(task)) ? $rtfeldman$elm_css$Html$Styled$text('') : $rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(
												$elm$core$Basics$round(
													$author$project$SmartTime$Duration$inMinutes(
														$author$project$Task$AssignedAction$getPredictedEffort(task)))))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$class('task-bubble'),
											$rtfeldman$elm_css$Html$Styled$Attributes$title(
											A2(
												$author$project$TaskList$taskTooltip,
												_Utils_Tuple2(time, timeZone),
												task)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$height(
													$rtfeldman$elm_css$Css$rem(2)),
													$rtfeldman$elm_css$Css$width(
													$rtfeldman$elm_css$Css$rem(2)),
													$rtfeldman$elm_css$Css$backgroundColor(
													$author$project$TaskList$activityColor(task).lighter),
													$rtfeldman$elm_css$Css$color(
													$author$project$TaskList$activityColor(task).medium),
													A3(
													$rtfeldman$elm_css$Css$border3,
													$rtfeldman$elm_css$Css$px(2),
													$rtfeldman$elm_css$Css$solid,
													$author$project$TaskList$activityColor(task).darker),
													$rtfeldman$elm_css$Css$displayFlex,
													$rtfeldman$elm_css$Css$borderRadius(
													$rtfeldman$elm_css$Css$pct(100)),
													$rtfeldman$elm_css$Css$fontSize(
													$rtfeldman$elm_css$Css$rem(1)),
													$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$center),
													$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$center),
													$rtfeldman$elm_css$Css$fontFamily($rtfeldman$elm_css$Css$monospace),
													$rtfeldman$elm_css$Css$fontWeight($rtfeldman$elm_css$Css$normal),
													$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
												]))
										]),
									_List_fromArray(
										[
											$author$project$SmartTime$Duration$isZero(
											$author$project$Task$AssignedAction$getPredictedEffort(task)) ? $rtfeldman$elm_css$Html$Styled$text('') : $rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(
												$elm$core$Basics$round(
													$author$project$SmartTime$Duration$inMinutes(
														$author$project$Task$AssignedAction$getPredictedEffort(task)))))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$class('maximum-duration'),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$justifyContent($rtfeldman$elm_css$Css$end)
												]))
										]),
									_List_fromArray(
										[
											$author$project$SmartTime$Duration$isZero(
											$author$project$Task$AssignedAction$getMaxEffort(task)) ? $rtfeldman$elm_css$Html$Styled$text('') : $rtfeldman$elm_css$Html$Styled$text(
											$elm$core$String$fromInt(
												$elm$core$Basics$round(
													$author$project$SmartTime$Duration$inMinutes(
														$author$project$Task$AssignedAction$getPredictedEffort(task)))))
										]))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('title-and-details')
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$label,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Events$onDoubleClick(
											A2($author$project$TaskList$EditingTitle, task, true)),
											$rtfeldman$elm_css$Html$Styled$Events$onClick(
											A2($author$project$TaskList$FocusSlider, task, true)),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$rtfeldman$elm_css$Css$fontWeight(
													$rtfeldman$elm_css$Css$int(
														$elm$core$Basics$round(
															($author$project$Task$AssignedAction$getImportance(task) * 200) + 200))),
													$rtfeldman$elm_css$Css$pointerEvents($rtfeldman$elm_css$Css$none)
												])),
											$rtfeldman$elm_css$Html$Styled$Attributes$class('task-title')
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$span,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$class('task-title-text')
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(
													$author$project$Task$AssignedAction$getTitle(task))
												])),
											A2(
											$rtfeldman$elm_css$Html$Styled$span,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$rtfeldman$elm_css$Css$opacity(
															$rtfeldman$elm_css$Css$num(0.4)),
															$rtfeldman$elm_css$Css$fontSize(
															$rtfeldman$elm_css$Css$em(0.5)),
															$rtfeldman$elm_css$Css$fontWeight(
															$rtfeldman$elm_css$Css$int(200))
														]))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text(
													'#' + $elm$core$String$fromInt(task.index))
												]))
										])),
									A2(
									$author$project$TaskList$timingInfo,
									_Utils_Tuple2(time, timeZone),
									task)
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('sessions'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$rtfeldman$elm_css$Css$fontSize(
											$rtfeldman$elm_css$Css$em(0.5)),
											$rtfeldman$elm_css$Css$width(
											$rtfeldman$elm_css$Css$pct(50)),
											$rtfeldman$elm_css$Css$displayFlex,
											$rtfeldman$elm_css$Css$flexDirection($rtfeldman$elm_css$Css$column),
											$rtfeldman$elm_css$Css$alignItems($rtfeldman$elm_css$Css$end),
											$rtfeldman$elm_css$Css$textAlign($rtfeldman$elm_css$Css$center)
										]))
								]),
							A2(
								$author$project$TaskList$plannedSessions,
								_Utils_Tuple2(time, timeZone),
								task)),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('task-controls')
								]),
							A2(
								$elm$core$List$filterMap,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										A2($author$project$TaskList$startTrackingButton, task, trackedTaskMaybe),
										$elm$core$Maybe$Just(
										A2(
											$rtfeldman$elm_css$Html$Styled$button,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$class('destroy'),
													$rtfeldman$elm_css$Html$Styled$Events$onClick(
													$author$project$TaskList$Delete(
														$author$project$Task$AssignedAction$getID(task)))
												]),
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$text('×')
												])))
									])))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$input,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('edit'),
							$rtfeldman$elm_css$Html$Styled$Attributes$value(
							$author$project$Task$AssignedAction$getTitle(task)),
							$rtfeldman$elm_css$Html$Styled$Attributes$name('title'),
							$rtfeldman$elm_css$Html$Styled$Attributes$id(
							'task-' + $author$project$Task$AssignedAction$getIDString(task)),
							$rtfeldman$elm_css$Html$Styled$Events$onInput(
							$author$project$TaskList$UpdateTitle(task)),
							$rtfeldman$elm_css$Html$Styled$Events$onBlur(
							A2($author$project$TaskList$EditingTitle, task, false)),
							$author$project$TaskList$onEnter(
							A2($author$project$TaskList$EditingTitle, task, false))
						]),
					_List_Nil)
				]));
	});
var $author$project$TaskList$viewKeyedTask = F3(
	function (_v0, trackedTaskMaybe, task) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return _Utils_Tuple2(
			$author$project$Task$AssignedAction$getIDString(task),
			A4(
				$rtfeldman$elm_css$Html$Styled$Lazy$lazy3,
				$author$project$TaskList$viewTask,
				_Utils_Tuple2(time, timeZone),
				trackedTaskMaybe,
				task));
	});
var $author$project$TaskList$viewTasks = F4(
	function (time, timeZone, filter, profile) {
		var trackedTaskMaybe = $author$project$Activity$Timeline$currentInstanceID(profile.timeline);
		var sortedTasks = A2(
			$author$project$Log$logMessageOnly,
			'recalculating task list!',
			A2(
				$author$project$TaskList$allFullTaskInstances,
				profile,
				_Utils_Tuple2(time, timeZone)));
		var isVisible = function (task) {
			switch (filter.$) {
				case 'CompleteTasksOnly':
					return $author$project$Task$AssignedAction$completed(task);
				case 'AllIncompleteTasks':
					return !$author$project$Task$AssignedAction$completed(task);
				case 'AllRelevantTasks':
					return (!$author$project$Task$AssignedAction$completed(task)) && A3($author$project$Task$AssignedAction$isRelevantNow, task, time, timeZone);
				default:
					return true;
			}
		};
		var allCompleted = A2($elm$core$List$all, $author$project$Task$AssignedAction$completed, sortedTasks);
		return A2(
			$rtfeldman$elm_css$Html$Styled$section,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('main')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$input,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('toggle-all'),
							$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox'),
							$rtfeldman$elm_css$Html$Styled$Attributes$name('toggle'),
							$rtfeldman$elm_css$Html$Styled$Attributes$checked(allCompleted)
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$label,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$for('toggle-all')
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text('Mark all as complete')
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$Keyed$ul,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('task-list')
						]),
					A2(
						$elm$core$List$map,
						A2(
							$author$project$TaskList$viewKeyedTask,
							_Utils_Tuple2(time, timeZone),
							trackedTaskMaybe),
						A2($elm$core$List$filter, isVisible, sortedTasks)))
				]));
	});
var $author$project$TaskList$view = F3(
	function (state, profile, env) {
		var renderView = F4(
			function (lazyState, lazyProfile, launchTime, zone) {
				var filters = state.a;
				var expanded = state.b;
				var field = state.c;
				var activeFilter = A2(
					$elm$core$Maybe$withDefault,
					$author$project$TaskList$AllTasks,
					$elm$core$List$head(filters));
				return A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('todomvc-wrapper'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$visibility($rtfeldman$elm_css$Css$hidden)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$section,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('todoapp')
								]),
							_List_fromArray(
								[
									A2($rtfeldman$elm_css$Html$Styled$Lazy$lazy, $author$project$TaskList$viewInput, field),
									A5($rtfeldman$elm_css$Html$Styled$Lazy$lazy4, $author$project$TaskList$viewTasks, env.launchTime, env.timeZone, activeFilter, profile),
									A5($rtfeldman$elm_css$Html$Styled$Lazy$lazy4, $author$project$TaskList$viewControls, filters, env.launchTime, env.timeZone, profile)
								]))
						]));
			});
		return A5($rtfeldman$elm_css$Html$Styled$Lazy$lazy4, renderView, state, profile, env.launchTime, env.timeZone);
	});
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp2 = F3(
	function (fn, arg1, arg2) {
		return $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled(
			A2(fn, arg1, arg2));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$lazy2 = F3(
	function (fn, arg1, arg2) {
		return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
			A4($elm$virtual_dom$VirtualDom$lazy3, $rtfeldman$elm_css$VirtualDom$Styled$lazyHelp2, fn, arg1, arg2));
	});
var $rtfeldman$elm_css$Html$Styled$Lazy$lazy2 = $rtfeldman$elm_css$VirtualDom$Styled$lazy2;
var $author$project$Activity$Session$duration = function (_v0) {
	var session = _v0.a;
	return A2($author$project$SmartTime$Moment$difference, session.start, session.end);
};
var $author$project$Activity$Activity$getIcon = function (act) {
	if (act.$ === 'BuiltIn') {
		var template = act.a;
		var builtInSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).icon,
			builtInSkel.icon.get);
	} else {
		var template = act.a;
		var customSkel = act.b;
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Activity$Activity$defaults(template).icon,
			customSkel.icon.get);
	}
};
var $author$project$Activity$Timeline$inHoursMinutes = function (duration) {
	var hour = 3600000;
	var durationInMs = $author$project$SmartTime$Duration$inMs(duration);
	var wholeHours = (durationInMs / hour) | 0;
	var hoursString = $elm$core$String$fromInt(wholeHours) + 'h';
	var wholeMinutes = ((durationInMs - (wholeHours * hour)) / 60000) | 0;
	var minutesString = $elm$core$String$fromInt(wholeMinutes) + 'm';
	var _v0 = _Utils_Tuple2(wholeHours, wholeMinutes);
	if (!_v0.a) {
		if (!_v0.b) {
			return minutesString;
		} else {
			return minutesString;
		}
	} else {
		if (!_v0.b) {
			return hoursString;
		} else {
			return hoursString + (' ' + minutesString);
		}
	}
};
var $rtfeldman$elm_css$Css$float = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'float',
		'float',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Html$Styled$img = $rtfeldman$elm_css$Html$Styled$node('img');
var $rtfeldman$elm_css$Css$left = $rtfeldman$elm_css$Css$prop1('left');
var $rtfeldman$elm_css$Html$Styled$Attributes$src = function (url) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'src', url);
};
var $author$project$TimeTracker$viewIcon = function (getIcon) {
	switch (getIcon.$) {
		case 'File':
			var svgPath = getIcon.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$img,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$class('activity-icon'),
						$rtfeldman$elm_css$Html$Styled$Attributes$src('media/icons/' + svgPath),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$float($rtfeldman$elm_css$Css$left)
							]))
					]),
				_List_Nil);
		case 'Ion':
			return $rtfeldman$elm_css$Html$Styled$text('');
		case 'Other':
			return $rtfeldman$elm_css$Html$Styled$text('');
		default:
			var singleEmoji = getIcon.a;
			return $rtfeldman$elm_css$Html$Styled$text(singleEmoji);
	}
};
var $author$project$Activity$Timeline$onlyToday = function (_v0) {
	var now = _v0.a;
	var zone = _v0.b;
	var threeAM = $author$project$SmartTime$Duration$fromHours(3);
	var last3am = A3($author$project$SmartTime$Human$Moment$clockTurnBack, threeAM, zone, now);
	return A2($author$project$SmartTime$Period$between, now, last3am);
};
var $author$project$Activity$Timeline$justTodayTotal = F3(
	function (wrappedTimeline, _v0, activityID) {
		var timeline = wrappedTimeline.a;
		var time = _v0.a;
		var timeZone = _v0.b;
		return A4(
			$author$project$Activity$Timeline$activityTotalDurationLive,
			$author$project$Activity$Timeline$onlyToday(
				_Utils_Tuple2(time, timeZone)),
			time,
			wrappedTimeline,
			activityID);
	});
var $author$project$TimeTracker$writeActivityToday = F3(
	function (app, _v0, activity) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return $author$project$Activity$Timeline$inHoursMinutes(
			A3(
				$author$project$Activity$Timeline$justTodayTotal,
				app.timeline,
				_Utils_Tuple2(time, timeZone),
				$author$project$Activity$Activity$getID(activity)));
	});
var $author$project$TimeTracker$viewActivity = F3(
	function (app, _v0, activity) {
		var time = _v0.a;
		var timeZone = _v0.b;
		var filterPeriod = A2($author$project$SmartTime$Period$between, $author$project$SmartTime$Moment$zero, time);
		var describeSession = function (sesh) {
			return $author$project$Activity$Timeline$inHoursMinutes(
				$author$project$Activity$Session$duration(sesh)) + '\n';
		};
		return A2(
			$rtfeldman$elm_css$Html$Styled$li,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('activity')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$button,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('activity-button'),
							$rtfeldman$elm_css$Html$Styled$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'current',
									_Utils_eq(
										$author$project$Profile$currentActivityID(app),
										$author$project$Activity$Activity$getID(activity)))
								])),
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							$author$project$TimeTracker$StartTracking(
								$author$project$Activity$Activity$getID(activity))),
							$rtfeldman$elm_css$Html$Styled$Attributes$title(
							A3(
								$elm$core$List$foldl,
								$elm$core$Basics$append,
								'',
								A2(
									$elm$core$List$map,
									describeSession,
									A3(
										$author$project$Activity$Timeline$sessionsOfActivity,
										filterPeriod,
										app.timeline,
										$author$project$Activity$Activity$getID(activity)))))
						]),
					_List_fromArray(
						[
							$author$project$TimeTracker$viewIcon(
							$author$project$Activity$Activity$getIcon(activity)),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(
									A3(
										$author$project$TimeTracker$writeActivityUsage,
										app,
										_Utils_Tuple2(time, timeZone),
										activity))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(
									A3(
										$author$project$TimeTracker$writeActivityToday,
										app,
										_Utils_Tuple2(time, timeZone),
										activity))
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$label,
							_List_Nil,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text(
									$author$project$Activity$Activity$getName(activity))
								]))
						]))
				]));
	});
var $author$project$TimeTracker$viewActivities = F2(
	function (_v0, app) {
		var time = _v0.a;
		var timeZone = _v0.b;
		return A2(
			$rtfeldman$elm_css$Html$Styled$section,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$class('main')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$ul,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('activity-list')
						]),
					A2(
						$elm$core$List$map,
						A2(
							$author$project$TimeTracker$viewActivity,
							app,
							_Utils_Tuple2(time, timeZone)),
						$author$project$Activity$Activity$allUnhidden(app.activities)))
				]));
	});
var $author$project$TimeTracker$view = F3(
	function (state, app, env) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$section,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class('activity-screen')
						]),
					_List_fromArray(
						[
							A3(
							$rtfeldman$elm_css$Html$Styled$Lazy$lazy2,
							$author$project$TimeTracker$viewActivities,
							_Utils_Tuple2(env.time, env.timeZone),
							app)
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$section,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$rtfeldman$elm_css$Css$opacity(
									$rtfeldman$elm_css$Css$num(0.1))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text('Quite Ambitious.')
						]))
				]));
	});
var $author$project$SmartTime$Human$Duration$breakdownDH = function (duration) {
	var _v0 = $author$project$SmartTime$Duration$breakdown(duration);
	var days = _v0.days;
	var hours = _v0.hours;
	return _List_fromArray(
		[
			$author$project$SmartTime$Human$Duration$Days(days),
			$author$project$SmartTime$Human$Duration$Hours(hours)
		]);
};
var $author$project$SmartTime$Human$Moment$describeVsNow = F3(
	function (zone, now, moment) {
		var _v0 = A2($author$project$SmartTime$Human$Moment$humanize, zone, moment);
		var date = _v0.a;
		var time = _v0.b;
		return A2(
			$author$project$SmartTime$Human$Calendar$describeVsToday,
			A2($author$project$SmartTime$Human$Moment$extractDate, zone, now),
			date) + (' at ' + $author$project$SmartTime$Human$Clock$toShortString(time));
	});
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $author$project$Helpers$elementColor = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A4($mdgriffith$elm_ui$Element$rgba, red, green, blue, alpha);
};
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$grey = A4($avh4$elm_color$Color$RgbaSpace, 211 / 255, 215 / 255, 207 / 255, 1.0);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Timeflow$PointerMove = function (a) {
	return {$: 'PointerMove', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Solid = function (a) {
	return {$: 'Solid', a: a};
};
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$ssa = function (n) {
	return A3($elm$core$Basics$clamp, 0, 1, n);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$ssc = function (n) {
	return A3($elm$core$Basics$clamp, 0, 255, n);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$rgba = F4(
	function (r, g, b, a) {
		return $MacCASOutreach$graphicsvg$GraphicSVG$Solid(
			$avh4$elm_color$Color$fromRgba(
				{
					alpha: $MacCASOutreach$graphicsvg$GraphicSVG$ssa(a),
					blue: $MacCASOutreach$graphicsvg$GraphicSVG$ssc(b),
					green: $MacCASOutreach$graphicsvg$GraphicSVG$ssc(g),
					red: $MacCASOutreach$graphicsvg$GraphicSVG$ssc(r)
				}));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$black = A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 0, 0, 0, 1);
var $author$project$Timeflow$MouseDownAt = F2(
	function (a, b) {
		return {$: 'MouseDownAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask = F2(
	function (a, b) {
		return {$: 'AlphaMask', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Clip = F2(
	function (a, b) {
		return {$: 'Clip', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$EnterAt = F2(
	function (a, b) {
		return {$: 'EnterAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$EnterShape = F2(
	function (a, b) {
		return {$: 'EnterShape', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Everything = {$: 'Everything'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Exit = F2(
	function (a, b) {
		return {$: 'Exit', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ExitAt = F2(
	function (a, b) {
		return {$: 'ExitAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject = F3(
	function (a, b, c) {
		return {$: 'ForeignObject', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper = F3(
	function (a, b, c) {
		return {$: 'GraphPaper', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Group = function (a) {
	return {$: 'Group', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline = function (a) {
	return {$: 'GroupOutline', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Inked = F3(
	function (a, b, c) {
		return {$: 'Inked', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Link = F2(
	function (a, b) {
		return {$: 'Link', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseDown = F2(
	function (a, b) {
		return {$: 'MouseDown', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt = F2(
	function (a, b) {
		return {$: 'MouseDownAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseUp = F2(
	function (a, b) {
		return {$: 'MouseUp', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt = F2(
	function (a, b) {
		return {$: 'MouseUpAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt = F2(
	function (a, b) {
		return {$: 'MoveOverAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$NoLine = {$: 'NoLine'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Notathing = {$: 'Notathing'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Scale = F3(
	function (a, b, c) {
		return {$: 'Scale', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Skew = F3(
	function (a, b, c) {
		return {$: 'Skew', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Tap = F2(
	function (a, b) {
		return {$: 'Tap', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TapAt = F2(
	function (a, b) {
		return {$: 'TapAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd = F2(
	function (a, b) {
		return {$: 'TouchEnd', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt = F2(
	function (a, b) {
		return {$: 'TouchEndAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt = F2(
	function (a, b) {
		return {$: 'TouchMoveAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchStart = F2(
	function (a, b) {
		return {$: 'TouchStart', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt = F2(
	function (a, b) {
		return {$: 'TouchStartAt', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Transformed = F2(
	function (a, b) {
		return {$: 'Transformed', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$blank = A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 0, 0, 0, 0);
var $MacCASOutreach$graphicsvg$GraphicSVG$repaint = F2(
	function (color, shape) {
		switch (shape.$) {
			case 'Inked':
				if (shape.b.$ === 'Nothing') {
					var _v1 = shape.b;
					var st = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
						$elm$core$Maybe$Just(color),
						$elm$core$Maybe$Nothing,
						st);
				} else {
					var _v2 = shape.b.a;
					var lt = _v2.a;
					var st = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
						$elm$core$Maybe$Just(color),
						$elm$core$Maybe$Just(
							_Utils_Tuple2(lt, color)),
						st);
				}
			case 'Move':
				var s = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Move,
					s,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Rotate':
				var r = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
					r,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Scale':
				var sx = shape.a;
				var sy = shape.b;
				var sh = shape.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$Scale,
					sx,
					sy,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Skew':
				var skx = shape.a;
				var sky = shape.b;
				var sh = shape.c;
				return A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$Skew,
					skx,
					sky,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Transformed':
				var tm = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Transformed,
					tm,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Group':
				var shapes = shape.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$Group(
					A2(
						$elm$core$List$map,
						$MacCASOutreach$graphicsvg$GraphicSVG$repaint(color),
						shapes));
			case 'GroupOutline':
				var cmbndshp = shape.a;
				return $MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, cmbndshp));
			case 'Link':
				var s = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Link,
					s,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'AlphaMask':
				var reg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
					reg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Clip':
				var reg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Clip,
					reg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Tap':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Tap,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TapAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TapAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'EnterShape':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$EnterShape,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'EnterAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$EnterAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'Exit':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$Exit,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'ExitAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$ExitAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'MouseDown':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseDown,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'MouseDownAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'MouseUp':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseUp,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'MouseUpAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'MoveOverAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TouchStart':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchStart,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TouchEnd':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TouchStartAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TouchEndAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'TouchMoveAt':
				var userMsg = shape.a;
				var sh = shape.b;
				return A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt,
					userMsg,
					A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, color, sh));
			case 'ForeignObject':
				var w = shape.a;
				var h = shape.b;
				var htm = shape.c;
				return A3($MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject, w, h, htm);
			case 'Everything':
				return $MacCASOutreach$graphicsvg$GraphicSVG$Everything;
			case 'Notathing':
				return $MacCASOutreach$graphicsvg$GraphicSVG$Notathing;
			default:
				var s = shape.a;
				var th = shape.b;
				return A3($MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper, s, th, color);
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$subtract = F2(
	function (shape1, shape2) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask, shape1, shape2);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$addOutline = F3(
	function (style, outlineClr, shape) {
		addOutline:
		while (true) {
			var lineStyle = function () {
				if (style.$ === 'NoLine') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(style, outlineClr));
				}
			}();
			switch (shape.$) {
				case 'Inked':
					var clr = shape.a;
					var st = shape.c;
					return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, clr, lineStyle, st);
				case 'Move':
					var s = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Move,
						s,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Rotate':
					var r = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
						r,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Scale':
					var sx = shape.a;
					var sy = shape.b;
					var sh = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Scale,
						sx,
						sy,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Skew':
					var skx = shape.a;
					var sky = shape.b;
					var sh = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Skew,
						skx,
						sky,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Transformed':
					var tm = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Transformed,
						tm,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Group':
					var list = shape.a;
					var innerlist = A2(
						$elm$core$List$filterMap,
						function (shp) {
							if (shp.$ === 'GroupOutline') {
								return $elm$core$Maybe$Nothing;
							} else {
								return $elm$core$Maybe$Just(
									A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, $MacCASOutreach$graphicsvg$GraphicSVG$NoLine, $MacCASOutreach$graphicsvg$GraphicSVG$black, shp));
							}
						},
						list);
					if (!innerlist.b) {
						return $MacCASOutreach$graphicsvg$GraphicSVG$Group(_List_Nil);
					} else {
						if (!innerlist.b.b) {
							var hd = innerlist.a;
							var $temp$style = style,
								$temp$outlineClr = outlineClr,
								$temp$shape = hd;
							style = $temp$style;
							outlineClr = $temp$outlineClr;
							shape = $temp$shape;
							continue addOutline;
						} else {
							if (_Utils_eq(lineStyle, $elm$core$Maybe$Nothing)) {
								return $MacCASOutreach$graphicsvg$GraphicSVG$Group(innerlist);
							} else {
								var outlnshp = $MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(
									A2(
										$MacCASOutreach$graphicsvg$GraphicSVG$subtract,
										$MacCASOutreach$graphicsvg$GraphicSVG$Group(innerlist),
										$MacCASOutreach$graphicsvg$GraphicSVG$Group(
											A2(
												$elm$core$List$map,
												A2($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr),
												innerlist))));
								return $MacCASOutreach$graphicsvg$GraphicSVG$Group(
									_Utils_ap(
										innerlist,
										_List_fromArray(
											[outlnshp])));
							}
						}
					}
				case 'GroupOutline':
					var cmbndshp = shape.a;
					return $MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(cmbndshp);
				case 'AlphaMask':
					var reg = shape.a;
					var sh = shape.b;
					var ptrn = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, $MacCASOutreach$graphicsvg$GraphicSVG$NoLine, $MacCASOutreach$graphicsvg$GraphicSVG$black, reg);
					var inside = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, $MacCASOutreach$graphicsvg$GraphicSVG$NoLine, $MacCASOutreach$graphicsvg$GraphicSVG$black, sh);
					if (_Utils_eq(lineStyle, $elm$core$Maybe$Nothing)) {
						return A2($MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask, ptrn, inside);
					} else {
						var ptrnlnd = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, reg);
						var ptrnoutln = A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, inside, ptrnlnd);
						var newshp = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh);
						var shpoutln = A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, inside, newshp);
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
							ptrn,
							$MacCASOutreach$graphicsvg$GraphicSVG$Group(
								_List_fromArray(
									[
										inside,
										$MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(
										$MacCASOutreach$graphicsvg$GraphicSVG$Group(
											_List_fromArray(
												[shpoutln, ptrnoutln])))
									])));
					}
				case 'Clip':
					var reg = shape.a;
					var sh = shape.b;
					var ptrn = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, $MacCASOutreach$graphicsvg$GraphicSVG$NoLine, $MacCASOutreach$graphicsvg$GraphicSVG$black, reg);
					var inside = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, $MacCASOutreach$graphicsvg$GraphicSVG$NoLine, $MacCASOutreach$graphicsvg$GraphicSVG$black, sh);
					if (_Utils_eq(lineStyle, $elm$core$Maybe$Nothing)) {
						return A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, ptrn, inside);
					} else {
						var ptrnlnd = A3(
							$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
							style,
							outlineClr,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, $MacCASOutreach$graphicsvg$GraphicSVG$blank, reg));
						var ptrnoutln = A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, inside, ptrnlnd);
						var newshp = A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh);
						var shpoutln = A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, inside, newshp);
						return A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$Clip,
							ptrn,
							$MacCASOutreach$graphicsvg$GraphicSVG$Group(
								_List_fromArray(
									[
										inside,
										$MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(
										$MacCASOutreach$graphicsvg$GraphicSVG$Group(
											_List_fromArray(
												[shpoutln, ptrnoutln])))
									])));
					}
				case 'Link':
					var s = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Link,
						s,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Tap':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Tap,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TapAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TapAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'EnterShape':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$EnterShape,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'EnterAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$EnterAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'Exit':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Exit,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'ExitAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$ExitAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'MouseDown':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseDown,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'MouseDownAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'MouseUp':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseUp,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'MouseUpAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'MoveOverAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TouchStart':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchStart,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TouchEnd':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TouchStartAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TouchEndAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'TouchMoveAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt,
						userMsg,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$addOutline, style, outlineClr, sh));
				case 'ForeignObject':
					var w = shape.a;
					var h = shape.b;
					var htm = shape.c;
					return A3($MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject, w, h, htm);
				case 'Everything':
					return $MacCASOutreach$graphicsvg$GraphicSVG$Everything;
				case 'Notathing':
					return $MacCASOutreach$graphicsvg$GraphicSVG$Notathing;
				default:
					var s = shape.a;
					var th = shape.b;
					var clr = shape.c;
					return A3($MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper, s, th, clr);
			}
		}
	});
var $elm_community$list_extra$List$Extra$iterateHelp = F3(
	function (f, x, acc) {
		iterateHelp:
		while (true) {
			var _v0 = f(x);
			if (_v0.$ === 'Just') {
				var x_ = _v0.a;
				var $temp$f = f,
					$temp$x = x_,
					$temp$acc = A2($elm$core$List$cons, x, acc);
				f = $temp$f;
				x = $temp$x;
				acc = $temp$acc;
				continue iterateHelp;
			} else {
				return A2($elm$core$List$cons, x, acc);
			}
		}
	});
var $elm_community$list_extra$List$Extra$iterate = F2(
	function (f, x) {
		return $elm$core$List$reverse(
			A3($elm_community$list_extra$List$Extra$iterateHelp, f, x, _List_Nil));
	});
var $author$project$SmartTime$Moment$toDuration = F2(
	function (_v0, _v1) {
		var momentDur = _v0.a;
		var epochDur = _v1.a;
		return A2($author$project$SmartTime$Duration$subtract, momentDur, epochDur);
	});
var $author$project$SmartTime$Moment$y2k = $author$project$SmartTime$Moment$Moment(
	$author$project$SmartTime$Duration$fromInt(0));
var $author$project$Timeflow$blobToPoints = F3(
	function (displaySettings, _v0, blob) {
		var startMs = $author$project$SmartTime$Duration$inMs(
			A2(
				$author$project$SmartTime$Duration$subtract,
				A2($author$project$SmartTime$Moment$toDuration, blob.start, $author$project$SmartTime$Moment$y2k),
				A2($author$project$SmartTime$Moment$toDuration, displaySettings.pivotMoment, $author$project$SmartTime$Moment$y2k)));
		var slash = 0.2;
		var slashBottomLTR = function (_v8) {
			var x = _v8.a;
			var y = _v8.b;
			return _Utils_Tuple2(
				A3($elm$core$Basics$clamp, 0, 100, x - slash),
				y);
		};
		var slashBottomRTL = function (_v7) {
			var x = _v7.a;
			var y = _v7.b;
			return _Utils_Tuple2(
				A3($elm$core$Basics$clamp, 0, 100, x + slash),
				y);
		};
		var slashTopLTR = function (_v6) {
			var x = _v6.a;
			var y = _v6.b;
			return _Utils_Tuple2(
				A3($elm$core$Basics$clamp, 0, 100, x + slash),
				y);
		};
		var slashTopRTL = function (_v5) {
			var x = _v5.a;
			var y = _v5.b;
			return _Utils_Tuple2(
				A3($elm$core$Basics$clamp, 0, 100, x - slash),
				y);
		};
		var touchingLeftWallBy = function (_v4) {
			var x = _v4.a;
			var y = _v4.b;
			return (_Utils_cmp(x, slash) < 0) ? A2($elm$core$Debug$log, 'touching left wall portion', 1 - (x / slash)) : 0;
		};
		var touchingRightWallBy = function (_v3) {
			var x = _v3.a;
			var y = _v3.b;
			return (_Utils_cmp(100 - x, slash) < 0) ? A2($elm$core$Debug$log, 'touching right wall portion', 1 - ((100 - x) / slash)) : 0;
		};
		var reverseMaybe = F2(
			function (shouldReverse, elements) {
				return shouldReverse ? $elm$core$List$reverse(elements) : elements;
			});
		var msBetweenWalls = $author$project$SmartTime$Duration$inMs(displaySettings.hourRowSize);
		var offsetFromPriorWall = function (ms) {
			return A2($elm$core$Basics$modBy, msBetweenWalls, ms);
		};
		var startsOnWall = !offsetFromPriorWall(startMs);
		var rowNumber = function (wall) {
			return (wall / msBetweenWalls) | 0;
		};
		var startsAtPortion = offsetFromPriorWall(startMs) / msBetweenWalls;
		var isOddRow = function (startWall) {
			return A2(
				$elm$core$Basics$modBy,
				2,
				rowNumber(startWall)) === 1;
		};
		var h = displaySettings.rowHeight;
		var firstRowStartWall = startMs - offsetFromPriorWall(startMs);
		var startHeight = 0 - (rowNumber(firstRowStartWall) * h);
		var endMs = $author$project$SmartTime$Duration$inMs(
			A2(
				$author$project$SmartTime$Duration$subtract,
				A2($author$project$SmartTime$Moment$toDuration, blob.end, $author$project$SmartTime$Moment$y2k),
				A2($author$project$SmartTime$Moment$toDuration, displaySettings.pivotMoment, $author$project$SmartTime$Moment$y2k)));
		var endsAtPortion = offsetFromPriorWall(endMs) / msBetweenWalls;
		var floatingBlob = isOddRow(firstRowStartWall) ? {
			bestTextArea: _Utils_Tuple2(
				_Utils_Tuple2((100 - (endsAtPortion * 100)) + slash, startHeight),
				_Utils_Tuple2((100 - (startsAtPortion * 100)) - slash, startHeight - h)),
			endCapTL: _Utils_Tuple2((100 - (endsAtPortion * 100)) + slash, startHeight),
			shell: _List_fromArray(
				[
					slashBottomRTL(
					_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - h)),
					slashTopRTL(
					_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight)),
					slashTopRTL(
					_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight)),
					slashBottomRTL(
					_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight - h))
				]),
			startCapTL: _Utils_Tuple2(((100 - (startsAtPortion * 100)) - slash) - h, startHeight)
		} : {
			bestTextArea: _Utils_Tuple2(
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (startsAtPortion * 100) + slash),
					startHeight),
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (endsAtPortion * 100) - slash),
					startHeight - h)),
			endCapTL: _Utils_Tuple2(((endsAtPortion * 100) - slash) - h, startHeight),
			shell: _List_fromArray(
				[
					slashBottomLTR(
					_Utils_Tuple2(startsAtPortion * 100, startHeight - h)),
					slashTopLTR(
					_Utils_Tuple2(startsAtPortion * 100, startHeight)),
					slashTopLTR(
					_Utils_Tuple2(endsAtPortion * 100, startHeight)),
					slashBottomLTR(
					_Utils_Tuple2(endsAtPortion * 100, startHeight - h))
				]),
			startCapTL: _Utils_Tuple2((startsAtPortion * 100) + slash, startHeight)
		};
		var oneCrossingBlob = isOddRow(firstRowStartWall) ? {
			bestTextArea: (_Utils_cmp(startsAtPortion, endsAtPortion) > -1) ? _Utils_Tuple2(
				_Utils_Tuple2(0, startHeight),
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (100 - (startsAtPortion * 100)) - slash),
					startHeight - h)) : _Utils_Tuple2(
				_Utils_Tuple2(0, startHeight - h),
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (endsAtPortion * 100) - slash),
					startHeight - (2 * h))),
			endCapTL: _Utils_Tuple2(((endsAtPortion * 100) - slash) - h, startHeight - h),
			shell: _List_fromArray(
				[
					_Utils_Tuple2(0, startHeight - (2 * h)),
					_Utils_Tuple2(0, startHeight),
					slashTopRTL(
					_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight)),
					slashBottomRTL(
					_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight - h)),
					slashTopLTR(
					_Utils_Tuple2(endsAtPortion * 100, startHeight - h)),
					slashBottomLTR(
					_Utils_Tuple2(endsAtPortion * 100, startHeight - (2 * h)))
				]),
			startCapTL: _Utils_Tuple2(((100 - (startsAtPortion * 100)) - slash) - h, startHeight)
		} : {
			bestTextArea: (_Utils_cmp(startsAtPortion, endsAtPortion) > -1) ? _Utils_Tuple2(
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (startsAtPortion * 100) + slash),
					startHeight),
				_Utils_Tuple2(100, startHeight - h)) : _Utils_Tuple2(
				_Utils_Tuple2(
					A3($elm$core$Basics$clamp, 0, 100, (100 - (endsAtPortion * 100)) + slash),
					startHeight - h),
				_Utils_Tuple2(100, startHeight - (2 * h))),
			endCapTL: _Utils_Tuple2((100 - (endsAtPortion * 100)) + slash, startHeight - h),
			shell: _List_fromArray(
				[
					slashBottomLTR(
					_Utils_Tuple2(startsAtPortion * 100, startHeight - h)),
					slashTopLTR(
					_Utils_Tuple2(startsAtPortion * 100, startHeight)),
					_Utils_Tuple2(100, startHeight),
					_Utils_Tuple2(100, startHeight - (2 * h)),
					slashBottomRTL(
					_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - (2 * h))),
					slashTopRTL(
					_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - h))
				]),
			startCapTL: _Utils_Tuple2((startsAtPortion * 100) + slash, startHeight)
		};
		var lastRowStartWall = endMs - offsetFromPriorWall(endMs);
		var sandwichBlob = function (middlePieces) {
			var _v2 = _Utils_Tuple2(
				isOddRow(firstRowStartWall),
				isOddRow(lastRowStartWall));
			if (!_v2.a) {
				if (_v2.b) {
					return {
						bestTextArea: _Utils_Tuple2(
							_Utils_Tuple2(0, startHeight - h),
							_Utils_Tuple2(100, startHeight - ((1 + middlePieces) * h))),
						endCapTL: _Utils_Tuple2((100 - (endsAtPortion * 100)) + slash, startHeight - ((1 + middlePieces) * h)),
						shell: _List_fromArray(
							[
								slashBottomLTR(
								_Utils_Tuple2(startsAtPortion * 100, startHeight - h)),
								slashTopLTR(
								_Utils_Tuple2(startsAtPortion * 100, startHeight)),
								_Utils_Tuple2(100, startHeight),
								_Utils_Tuple2(100, startHeight - ((2 + middlePieces) * h)),
								slashBottomRTL(
								_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - ((2 + middlePieces) * h))),
								slashTopRTL(
								_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - ((1 + middlePieces) * h))),
								_Utils_Tuple2(0, startHeight - ((1 + middlePieces) * h)),
								_Utils_Tuple2(0, startHeight - h)
							]),
						startCapTL: _Utils_Tuple2((startsAtPortion * 100) + slash, startHeight)
					};
				} else {
					return {
						bestTextArea: _Utils_Tuple2(
							_Utils_Tuple2(0, startHeight - h),
							_Utils_Tuple2(100, startHeight - ((1 + middlePieces) * h))),
						endCapTL: _Utils_Tuple2(((endsAtPortion * 100) - slash) - h, startHeight - ((1 + middlePieces) * h)),
						shell: _List_fromArray(
							[
								slashBottomLTR(
								_Utils_Tuple2(startsAtPortion * 100, startHeight - h)),
								slashTopLTR(
								_Utils_Tuple2(startsAtPortion * 100, startHeight)),
								_Utils_Tuple2(100, startHeight),
								_Utils_Tuple2(100, startHeight - ((1 + middlePieces) * h)),
								slashTopLTR(
								_Utils_Tuple2(endsAtPortion * 100, startHeight - ((1 + middlePieces) * h))),
								slashBottomLTR(
								_Utils_Tuple2(endsAtPortion * 100, startHeight - ((2 + middlePieces) * h))),
								_Utils_Tuple2(0, startHeight - ((2 + middlePieces) * h)),
								_Utils_Tuple2(0, startHeight - h)
							]),
						startCapTL: _Utils_Tuple2((startsAtPortion * 100) + slash, startHeight)
					};
				}
			} else {
				if (!_v2.b) {
					return {
						bestTextArea: _Utils_Tuple2(
							_Utils_Tuple2(0, startHeight - h),
							_Utils_Tuple2(100, startHeight - ((1 + middlePieces) * h))),
						endCapTL: _Utils_Tuple2(((endsAtPortion * 100) - slash) - h, startHeight - ((1 + middlePieces) * h)),
						shell: _List_fromArray(
							[
								_Utils_Tuple2(0, startHeight - ((2 + middlePieces) * h)),
								_Utils_Tuple2(0, startHeight),
								slashTopRTL(
								_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight)),
								slashBottomRTL(
								_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight - h)),
								_Utils_Tuple2(100, startHeight - h),
								_Utils_Tuple2(100, startHeight - (h * (middlePieces + 1))),
								slashTopLTR(
								_Utils_Tuple2(endsAtPortion * 100, startHeight - (h * (middlePieces + 1)))),
								slashBottomLTR(
								_Utils_Tuple2(endsAtPortion * 100, startHeight - (h * (middlePieces + 2))))
							]),
						startCapTL: _Utils_Tuple2(((100 - (startsAtPortion * 100)) - slash) - h, startHeight)
					};
				} else {
					return {
						bestTextArea: _Utils_Tuple2(
							_Utils_Tuple2(0, startHeight - h),
							_Utils_Tuple2(100, startHeight - ((1 + middlePieces) * h))),
						endCapTL: _Utils_Tuple2((100 - (endsAtPortion * 100)) + slash, startHeight - ((1 + middlePieces) * h)),
						shell: _List_fromArray(
							[
								_Utils_Tuple2(0, startHeight - ((1 + middlePieces) * h)),
								_Utils_Tuple2(0, startHeight),
								slashTopRTL(
								_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight)),
								slashBottomRTL(
								_Utils_Tuple2(100 - (startsAtPortion * 100), startHeight - h)),
								_Utils_Tuple2(100, startHeight - h),
								_Utils_Tuple2(100, startHeight - (h * (middlePieces + 2))),
								slashBottomRTL(
								_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - (h * (middlePieces + 2)))),
								slashTopRTL(
								_Utils_Tuple2(100 - (endsAtPortion * 100), startHeight - (h * (middlePieces + 1))))
							]),
						startCapTL: _Utils_Tuple2(((100 - (startsAtPortion * 100)) - slash) - h, startHeight)
					};
				}
			}
		};
		var nextWallWithinBlob = function (ms) {
			return (_Utils_cmp(ms + msBetweenWalls, endMs) < 0) ? $elm$core$Maybe$Just(ms + msBetweenWalls) : $elm$core$Maybe$Nothing;
		};
		var distanceToNextWall = function (ms) {
			return msBetweenWalls - offsetFromPriorWall(ms);
		};
		var firstWallAfterStart = startMs + distanceToNextWall(startMs);
		var wallsCrossed = (_Utils_cmp(firstWallAfterStart, endMs) > 0) ? _List_Nil : A2($elm_community$list_extra$List$Extra$iterate, nextWallWithinBlob, firstWallAfterStart);
		var _v1 = $elm$core$List$length(wallsCrossed);
		switch (_v1) {
			case 0:
				return floatingBlob;
			case 1:
				return oneCrossingBlob;
			default:
				var x = _v1;
				return sandwichBlob(x - 1);
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$AlignCentred = {$: 'AlignCentred'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Face = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$: 'Face', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Text = F2(
	function (a, b) {
		return {$: 'Text', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$centered = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, f, $MacCASOutreach$graphicsvg$GraphicSVG$AlignCentred),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$clip = F2(
	function (shape1, shape2) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Clip, shape1, shape2);
	});
var $author$project$Timeflow$dragOffsetDur = F2(
	function (display, _v0) {
		var startX = _v0.a;
		var startY = _v0.b;
		var yOffset = startY - display.pointer.y;
		var xOffset = startX - display.pointer.x;
		var xOffsetAsPortion = xOffset / 100;
		var rowHeightInMouseCoords = display.settings.rowHeight * 1;
		var yOffsetInRows = yOffset / rowHeightInMouseCoords;
		var yOffsetInRowsRounded = yOffsetInRows;
		return A2($author$project$SmartTime$Duration$scale, display.settings.hourRowSize, yOffsetInRowsRounded - xOffsetAsPortion);
	});
var $author$project$SmartTime$Human$Moment$extractTime = F2(
	function (zone, moment) {
		return A2($author$project$SmartTime$Human$Moment$humanize, zone, moment).b;
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$filled = F2(
	function (color, stencil) {
		return A3(
			$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
			$elm$core$Maybe$Just(color),
			$elm$core$Maybe$Nothing,
			stencil);
	});
var $author$project$Helpers$graphColor = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, red * 255, green * 255, blue * 255, alpha);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$group = function (shapes) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$Group(shapes);
};
var $author$project$SmartTime$Human$Clock$hour = function (timeSinceDayStart) {
	return $author$project$SmartTime$Duration$breakdown(timeSinceDayStart).hours;
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Gradient = function (a) {
	return {$: 'Gradient', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$multAlpha = F2(
	function (color, n) {
		var colRec = $avh4$elm_color$Color$toRgba(color);
		return $avh4$elm_color$Color$fromRgba(
			_Utils_update(
				colRec,
				{alpha: colRec.alpha * n}));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent = F2(
	function (alpha, shape) {
		_v0$3:
		while (true) {
			switch (shape.$) {
				case 'Inked':
					if (shape.a.$ === 'Nothing') {
						if ((shape.b.$ === 'Just') && (shape.b.a.b.$ === 'Solid')) {
							var _v1 = shape.a;
							var _v2 = shape.b.a;
							var lineType = _v2.a;
							var colour = _v2.b.a;
							var st = shape.c;
							return A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
								$elm$core$Maybe$Nothing,
								$elm$core$Maybe$Just(
									_Utils_Tuple2(
										lineType,
										$MacCASOutreach$graphicsvg$GraphicSVG$Solid(
											A2($MacCASOutreach$graphicsvg$GraphicSVG$multAlpha, colour, alpha)))),
								st);
						} else {
							break _v0$3;
						}
					} else {
						if (shape.a.a.$ === 'Solid') {
							if (shape.b.$ === 'Just') {
								if (shape.b.a.b.$ === 'Solid') {
									var colour = shape.a.a.a;
									var _v3 = shape.b.a;
									var lineType = _v3.a;
									var sColour = _v3.b.a;
									var st = shape.c;
									return A3(
										$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
										$elm$core$Maybe$Just(
											$MacCASOutreach$graphicsvg$GraphicSVG$Solid(
												A2($MacCASOutreach$graphicsvg$GraphicSVG$multAlpha, colour, alpha))),
										$elm$core$Maybe$Just(
											_Utils_Tuple2(
												lineType,
												$MacCASOutreach$graphicsvg$GraphicSVG$Solid(
													A2($MacCASOutreach$graphicsvg$GraphicSVG$multAlpha, sColour, alpha)))),
										st);
								} else {
									break _v0$3;
								}
							} else {
								var colour = shape.a.a.a;
								var _v4 = shape.b;
								var st = shape.c;
								return A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$Inked,
									$elm$core$Maybe$Just(
										$MacCASOutreach$graphicsvg$GraphicSVG$Solid(
											A2($MacCASOutreach$graphicsvg$GraphicSVG$multAlpha, colour, alpha))),
									$elm$core$Maybe$Nothing,
									st);
							}
						} else {
							break _v0$3;
						}
					}
				case 'ForeignObject':
					var w = shape.a;
					var h = shape.b;
					var htm = shape.c;
					return A3($MacCASOutreach$graphicsvg$GraphicSVG$ForeignObject, w, h, htm);
				case 'Move':
					var s = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Move,
						s,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Rotate':
					var r = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Rotate,
						r,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Scale':
					var sx = shape.a;
					var sy = shape.b;
					var sh = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Scale,
						sx,
						sy,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Skew':
					var skx = shape.a;
					var sky = shape.b;
					var sh = shape.c;
					return A3(
						$MacCASOutreach$graphicsvg$GraphicSVG$Skew,
						skx,
						sky,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Transformed':
					var tm = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Transformed,
						tm,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Group':
					var list = shape.a;
					return $MacCASOutreach$graphicsvg$GraphicSVG$Group(
						A2(
							$elm$core$List$map,
							$MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent(alpha),
							list));
				case 'GroupOutline':
					var cmbndshp = shape.a;
					return $MacCASOutreach$graphicsvg$GraphicSVG$GroupOutline(
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, cmbndshp));
				case 'Link':
					var s = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Link,
						s,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'AlphaMask':
					var reg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$AlphaMask,
						reg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Clip':
					var reg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Clip,
						reg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Everything':
					return $MacCASOutreach$graphicsvg$GraphicSVG$Everything;
				case 'Notathing':
					return $MacCASOutreach$graphicsvg$GraphicSVG$Notathing;
				case 'Tap':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Tap,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TapAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TapAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'EnterShape':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$EnterShape,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'EnterAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$EnterAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'Exit':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$Exit,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'ExitAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$ExitAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'MouseDown':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseDown,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'MouseDownAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'MouseUp':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseUp,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'MouseUpAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MouseUpAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'MoveOverAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TouchStart':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchStart,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TouchEnd':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchEnd,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TouchStartAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchStartAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TouchEndAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchEndAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				case 'TouchMoveAt':
					var userMsg = shape.a;
					var sh = shape.b;
					return A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$TouchMoveAt,
						userMsg,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent, alpha, sh));
				default:
					if (shape.c.$ === 'Solid') {
						var s = shape.a;
						var th = shape.b;
						var colour = shape.c.a;
						return A3(
							$MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper,
							s,
							th,
							$MacCASOutreach$graphicsvg$GraphicSVG$Solid(
								A2($MacCASOutreach$graphicsvg$GraphicSVG$multAlpha, colour, alpha)));
					} else {
						var s = shape.a;
						var th = shape.b;
						var gr = shape.c.a;
						return A3(
							$MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper,
							s,
							th,
							$MacCASOutreach$graphicsvg$GraphicSVG$Gradient(gr));
					}
			}
		}
		var a = shape.a;
		var b = shape.b;
		var c = shape.c;
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$Inked, a, b, c);
	});
var $author$project$SmartTime$Human$Clock$minute = function (timeSinceDayStart) {
	return $author$project$SmartTime$Duration$breakdown(timeSinceDayStart).minutes;
};
var $MacCASOutreach$graphicsvg$GraphicSVG$move = F2(
	function (disp, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Move, disp, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MouseDownAt, msg, shape);
	});
var $author$project$SmartTime$Human$Clock$padInt = function (num) {
	return A2(
		$author$project$SmartTime$Human$Duration$padNumber,
		2,
		$elm$core$String$fromInt(num));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$rotate = F2(
	function (theta, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Rotate, theta, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Pull = F2(
	function (a, b) {
		return {$: 'Pull', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$BezierPath = F2(
	function (a, b) {
		return {$: 'BezierPath', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$curveListHelper = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	var b = _v1.b;
	var _v2 = _v0.b;
	var c = _v2.a;
	var d = _v2.b;
	return _Utils_Tuple2(
		_Utils_Tuple2(a, b),
		_Utils_Tuple2(c, d));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$curve = F2(
	function (_v0, list) {
		var a = _v0.a;
		var b = _v0.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$BezierPath,
			_Utils_Tuple2(a, b),
			A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$curveListHelper, list));
	});
var $elm_community$list_extra$List$Extra$reverseAppend = F2(
	function (list1, list2) {
		return A3($elm$core$List$foldl, $elm$core$List$cons, list2, list1);
	});
var $elm_community$list_extra$List$Extra$cycleHelp = F3(
	function (acc, n, list) {
		cycleHelp:
		while (true) {
			if (n > 0) {
				var $temp$acc = A2($elm_community$list_extra$List$Extra$reverseAppend, list, acc),
					$temp$n = n - 1,
					$temp$list = list;
				acc = $temp$acc;
				n = $temp$n;
				list = $temp$list;
				continue cycleHelp;
			} else {
				return acc;
			}
		}
	});
var $elm_community$list_extra$List$Extra$cycle = F2(
	function (len, list) {
		var cycleLength = $elm$core$List$length(list);
		return ((!cycleLength) || _Utils_eq(cycleLength, len)) ? list : ((_Utils_cmp(cycleLength, len) < 0) ? $elm$core$List$reverse(
			A2(
				$elm_community$list_extra$List$Extra$reverseAppend,
				A2($elm$core$List$take, len % cycleLength, list),
				A3($elm_community$list_extra$List$Extra$cycleHelp, _List_Nil, (len / cycleLength) | 0, list))) : A2($elm$core$List$take, len, list));
	});
var $elm_community$list_extra$List$Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var xs_ = A2($elm$core$List$drop, step, xs);
		var thisGroup = A2($elm$core$List$take, size, xs);
		var okayLength = _Utils_eq(
			size,
			$elm$core$List$length(thisGroup));
		var okayArgs = (size > 0) && (step > 0);
		return (okayArgs && okayLength) ? A2(
			$elm$core$List$cons,
			thisGroup,
			A3($elm_community$list_extra$List$Extra$groupsOfWithStep, size, step, xs_)) : _List_Nil;
	});
var $author$project$Helpers$cycleGroupWithStep = F3(
	function (groupSize, groupStep, list) {
		return A3(
			$elm_community$list_extra$List$Extra$groupsOfWithStep,
			groupSize,
			groupStep,
			A2(
				$elm_community$list_extra$List$Extra$cycle,
				$elm$core$List$length(list) + (groupSize - 1),
				list));
	});
var $elm_community$list_extra$List$Extra$groupsOf = F2(
	function (size, xs) {
		return A3($elm_community$list_extra$List$Extra$groupsOfWithStep, size, size, xs);
	});
var $author$project$Helpers$listToTuple2 = function (list) {
	if ((list.b && list.b.b) && (!list.b.b.b)) {
		var a = list.a;
		var _v1 = list.b;
		var b = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(a, b));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Helpers$listToTuple3 = function (list) {
	if (((list.b && list.b.b) && list.b.b.b) && (!list.b.b.b.b)) {
		var a = list.a;
		var _v1 = list.b;
		var b = _v1.a;
		var _v2 = _v1.b;
		var c = _v2.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(a, b, c));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Basics$atan2 = _Basics_atan2;
var $elm$core$Basics$cos = _Basics_cos;
var $elm$core$Basics$pow = _Basics_pow;
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Timeflow$distanceBetweenPoints = F2(
	function (_v0, _v1) {
		var x1 = _v0.a;
		var y1 = _v0.b;
		var x2 = _v1.a;
		var y2 = _v1.b;
		return $elm$core$Basics$sqrt(
			A2($elm$core$Basics$pow, x2 - x1, 2) + A2($elm$core$Basics$pow, y2 - y1, 2));
	});
var $elm$core$Basics$sin = _Basics_sin;
var $author$project$Timeflow$roundCorner = F4(
	function (radii, _v0, _v1, _v2) {
		var startX = _v0.a;
		var startY = _v0.b;
		var middleX = _v1.a;
		var middleY = _v1.b;
		var endX = _v2.a;
		var endY = _v2.b;
		var minRadii = A2(
			$elm$core$Basics$min,
			radii,
			A2(
				$elm$core$Basics$min,
				A2(
					$author$project$Timeflow$distanceBetweenPoints,
					_Utils_Tuple2(startX, startY),
					_Utils_Tuple2(middleX, middleY)) / 2,
				A2(
					$author$project$Timeflow$distanceBetweenPoints,
					_Utils_Tuple2(endX, endY),
					_Utils_Tuple2(middleX, middleY)) / 2));
		var midPoint = _Utils_Tuple2((startX + middleX) / 2, (startY + middleY) / 2);
		var controlPoint = _Utils_Tuple2(middleX, middleY);
		var basis2 = A2($elm$core$Basics$atan2, middleY - endY, middleX - endX) - A2($elm$core$Basics$atan2, middleY - middleY, middleX - (middleX + 1));
		var x2 = minRadii * $elm$core$Basics$cos(basis2);
		var y2 = minRadii * $elm$core$Basics$sin(basis2);
		var secondPoint = _Utils_Tuple2(middleX + x2, middleY + y2);
		var basis1 = A2($elm$core$Basics$atan2, middleY - startY, middleX - startX) - A2($elm$core$Basics$atan2, middleY - middleY, middleX - (middleX + 1));
		var x1 = minRadii * $elm$core$Basics$cos(basis1);
		var y1 = minRadii * $elm$core$Basics$sin(basis1);
		var firstPoint = _Utils_Tuple2(middleX + x1, middleY + y1);
		return _List_fromArray(
			[midPoint, firstPoint, controlPoint, secondPoint]);
	});
var $author$project$Timeflow$roundedPolygon = F2(
	function (radii, cornerList) {
		var allThePoints = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var a = _v1.a;
					var b = _v1.b;
					var c = _v1.c;
					return A4($author$project$Timeflow$roundCorner, radii, a, b, c);
				},
				A2(
					$elm$core$List$map,
					function (e) {
						return A2(
							$elm$core$Maybe$withDefault,
							_Utils_Tuple3(
								_Utils_Tuple2(0, 0),
								_Utils_Tuple2(0, 0),
								_Utils_Tuple2(0, 0)),
							$author$project$Helpers$listToTuple3(e));
					},
					A3(
						$author$project$Helpers$cycleGroupWithStep,
						3,
						1,
						A2(
							$elm_community$list_extra$List$Extra$cycle,
							$elm$core$List$length(cornerList) + 2,
							cornerList)))));
		var pullerList = A2(
			$elm$core$List$map,
			function (list) {
				var _v0 = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(
						_Utils_Tuple2(0, 0),
						_Utils_Tuple2(0, 0)),
					$author$project$Helpers$listToTuple2(list));
				var c = _v0.a;
				var d = _v0.b;
				return A2($MacCASOutreach$graphicsvg$GraphicSVG$Pull, c, d);
			},
			A2($elm_community$list_extra$List$Extra$groupsOf, 2, allThePoints));
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$curve,
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, 0),
				$elm$core$List$head(allThePoints)),
			pullerList);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$RoundRect = F3(
	function (a, b, c) {
		return {$: 'RoundRect', a: a, b: b, c: c};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$roundedRect = F3(
	function (w, h, r) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$RoundRect, w, h, r);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Sansserif = {$: 'Sansserif'};
var $MacCASOutreach$graphicsvg$GraphicSVG$sansserif = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, $MacCASOutreach$graphicsvg$GraphicSVG$Sansserif, c),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$scale = F2(
	function (s, shape) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$Scale, s, s, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$size = F2(
	function (sze, stencil) {
		if (stencil.$ === 'Text') {
			var _v1 = stencil.a;
			var si = _v1.a;
			var bo = _v1.b;
			var i = _v1.c;
			var u = _v1.d;
			var s = _v1.e;
			var sel = _v1.f;
			var f = _v1.g;
			var c = _v1.h;
			var str = stencil.b;
			return A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$Text,
				A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, sze, bo, i, u, s, sel, f, c),
				str);
		} else {
			var a = stencil;
			return a;
		}
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Unbroken = function (a) {
	return {$: 'Unbroken', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$solid = function (th) {
	return $MacCASOutreach$graphicsvg$GraphicSVG$Unbroken(th);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$AlignLeft = {$: 'AlignLeft'};
var $MacCASOutreach$graphicsvg$GraphicSVG$Serif = {$: 'Serif'};
var $MacCASOutreach$graphicsvg$GraphicSVG$text = function (str) {
	return A2(
		$MacCASOutreach$graphicsvg$GraphicSVG$Text,
		A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, 12, false, false, false, false, false, $MacCASOutreach$graphicsvg$GraphicSVG$Serif, $MacCASOutreach$graphicsvg$GraphicSVG$AlignLeft),
		str);
};
var $author$project$Timeflow$blobToShape = F3(
	function (display, env, initialBlob) {
		var textSize = display.settings.rowHeight / 2;
		var midPoint = function (_v2) {
			var _v3 = _v2.a;
			var x1 = _v3.a;
			var y1 = _v3.b;
			var _v4 = _v2.b;
			var x2 = _v4.a;
			var y2 = _v4.b;
			return _Utils_Tuple2((x1 + x2) / 2, (y1 + y2) / 2);
		};
		var capLabel = function (moment) {
			return A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent,
				0.5,
				$MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, 0),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$black,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									0.7,
									$MacCASOutreach$graphicsvg$GraphicSVG$text(
										$author$project$SmartTime$Human$Clock$padInt(
											$author$project$SmartTime$Human$Clock$hour(
												A2($author$project$SmartTime$Human$Moment$extractTime, env.timeZone, moment))))))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, -0.6),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$filled,
								$MacCASOutreach$graphicsvg$GraphicSVG$black,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$size,
									0.7,
									$MacCASOutreach$graphicsvg$GraphicSVG$text(
										$author$project$SmartTime$Human$Clock$padInt(
											$author$project$SmartTime$Human$Clock$minute(
												A2($author$project$SmartTime$Human$Moment$extractTime, env.timeZone, moment)))))))
						])));
		};
		var _v0 = function () {
			var _v1 = display.dragging;
			if (_v1.$ === 'Nothing') {
				return _Utils_Tuple2(initialBlob, false);
			} else {
				var id = _v1.a.a.id;
				var start = _v1.a.a.start;
				if (!_Utils_eq(id, initialBlob.id)) {
					return _Utils_Tuple2(initialBlob, false);
				} else {
					var offset = A2($author$project$Timeflow$dragOffsetDur, display, start);
					return _Utils_Tuple2(
						_Utils_update(
							initialBlob,
							{
								end: A2($author$project$SmartTime$Moment$future, initialBlob.end, offset),
								start: A2($author$project$SmartTime$Moment$future, initialBlob.start, offset)
							}),
						true);
				}
			}
		}();
		var blob = _v0.a;
		var isDraggingMe = _v0.b;
		var pointsOfInterest = A3($author$project$Timeflow$blobToPoints, display.settings, env, blob);
		var textAreaH = $elm$core$Basics$abs(pointsOfInterest.bestTextArea.b.b - pointsOfInterest.bestTextArea.a.b);
		var textAreaMidpoint = midPoint(pointsOfInterest.bestTextArea);
		var textAreaW = pointsOfInterest.bestTextArea.b.a - pointsOfInterest.bestTextArea.a.a;
		var rotateIfSquished = function (shape) {
			return (_Utils_cmp(textAreaW, display.settings.rowHeight) > 0) ? shape : A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$scale,
				0.5,
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$rotate,
					$elm$core$Basics$degrees(-90),
					shape));
		};
		var textAreaVisualizer = A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			textAreaMidpoint,
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent,
				0.3,
				A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$filled,
					$MacCASOutreach$graphicsvg$GraphicSVG$black,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$roundedRect, textAreaW, textAreaH, 0.5))));
		var theShell = A2($author$project$Timeflow$roundedPolygon, 0.5, pointsOfInterest.shell);
		var outlineColor = isDraggingMe ? A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 255, 255, 255, 1) : A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 255, 255, 255, 0.55);
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseDownAt,
			$author$project$Timeflow$MouseDownAt(blob.id),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$move,
				_Utils_Tuple2(-50, 0),
				$MacCASOutreach$graphicsvg$GraphicSVG$group(
					_List_fromArray(
						[
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$clip,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$filled, $MacCASOutreach$graphicsvg$GraphicSVG$black, theShell),
							A3(
								$MacCASOutreach$graphicsvg$GraphicSVG$addOutline,
								$MacCASOutreach$graphicsvg$GraphicSVG$solid(0.5),
								outlineColor,
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$filled,
									$author$project$Helpers$graphColor(blob.color),
									theShell))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$clip,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$filled, $MacCASOutreach$graphicsvg$GraphicSVG$black, theShell),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0.5, (-display.settings.rowHeight) / 2),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									pointsOfInterest.startCapTL,
									capLabel(blob.start)))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$clip,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$filled, $MacCASOutreach$graphicsvg$GraphicSVG$black, theShell),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0.6, (-display.settings.rowHeight) / 2),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									pointsOfInterest.endCapTL,
									capLabel(blob.end)))),
							A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$clip,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$filled, $MacCASOutreach$graphicsvg$GraphicSVG$black, theShell),
							A2(
								$MacCASOutreach$graphicsvg$GraphicSVG$move,
								_Utils_Tuple2(0, (-textSize) / 2),
								A2(
									$MacCASOutreach$graphicsvg$GraphicSVG$move,
									midPoint(pointsOfInterest.bestTextArea),
									rotateIfSquished(
										A2(
											$MacCASOutreach$graphicsvg$GraphicSVG$filled,
											$MacCASOutreach$graphicsvg$GraphicSVG$black,
											$MacCASOutreach$graphicsvg$GraphicSVG$centered(
												$MacCASOutreach$graphicsvg$GraphicSVG$sansserif(
													A2(
														$MacCASOutreach$graphicsvg$GraphicSVG$size,
														textSize,
														$MacCASOutreach$graphicsvg$GraphicSVG$text(blob.label)))))))))
						]))));
	});
var $author$project$SmartTime$Period$startsEarlier = F2(
	function (periodA, periodB) {
		return (!_Utils_eq(
			A2(
				$author$project$SmartTime$Moment$compare,
				$author$project$SmartTime$Period$start(periodA),
				$author$project$SmartTime$Period$start(periodB)),
			$author$project$SmartTime$Moment$Later)) ? periodA : periodB;
	});
var $author$project$SmartTime$Period$startsLater = F2(
	function (periodA, periodB) {
		return (!_Utils_eq(
			A2(
				$author$project$SmartTime$Moment$compare,
				$author$project$SmartTime$Period$start(periodA),
				$author$project$SmartTime$Period$start(periodB)),
			$author$project$SmartTime$Moment$Earlier)) ? periodA : periodB;
	});
var $author$project$SmartTime$Period$overlap = F2(
	function (periodA, periodB) {
		var comesLast = A2($author$project$SmartTime$Period$startsLater, periodA, periodB);
		var comesFirst = A2($author$project$SmartTime$Period$startsEarlier, periodA, periodB);
		return _Utils_eq(
			A2(
				$author$project$SmartTime$Moment$compare,
				$author$project$SmartTime$Period$end(comesFirst),
				$author$project$SmartTime$Period$start(comesLast)),
			$author$project$SmartTime$Moment$Later) ? A2(
			$author$project$SmartTime$Moment$difference,
			$author$project$SmartTime$Period$end(comesFirst),
			$author$project$SmartTime$Period$start(comesLast)) : $author$project$SmartTime$Duration$zero;
	});
var $author$project$SmartTime$Period$haveOverlap = F2(
	function (periodA, periodB) {
		return !$author$project$SmartTime$Duration$isZero(
			A2($author$project$SmartTime$Period$overlap, periodA, periodB));
	});
var $author$project$Activity$Timeline$historyLive = F2(
	function (now, wrappedTimeline) {
		var timeline = wrappedTimeline.a;
		var _v0 = A2($author$project$Activity$Timeline$currentAsFakeHistorySession, now, wrappedTimeline);
		if (_v0.$ === 'Nothing') {
			return $author$project$Replicated$Reducer$RepList$listValues(timeline.history);
		} else {
			var currentSesh = _v0.a;
			return A2(
				$elm$core$List$cons,
				currentSesh,
				$author$project$Replicated$Reducer$RepList$listValues(timeline.history));
		}
	});
var $author$project$Timeflow$FlowBlob = F5(
	function (start, end, color, label, id) {
		return {color: color, end: end, id: id, label: label, start: start};
	});
var $author$project$SmartTime$Duration$shortest = F2(
	function (_v0, _v1) {
		var durationA = _v0.a;
		var durationB = _v1.a;
		return $author$project$SmartTime$Duration$Duration(
			A2($elm$core$Basics$min, durationA, durationB));
	});
var $author$project$SmartTime$Moment$earliest = F2(
	function (_v0, _v1) {
		var durationA = _v0.a;
		var durationB = _v1.a;
		return $author$project$SmartTime$Moment$Moment(
			A2($author$project$SmartTime$Duration$shortest, durationA, durationB));
	});
var $author$project$SmartTime$Duration$longest = F2(
	function (_v0, _v1) {
		var durationA = _v0.a;
		var durationB = _v1.a;
		return $author$project$SmartTime$Duration$Duration(
			A2($elm$core$Basics$max, durationA, durationB));
	});
var $author$project$SmartTime$Moment$latest = F2(
	function (_v0, _v1) {
		var durationA = _v0.a;
		var durationB = _v1.a;
		return $author$project$SmartTime$Moment$Moment(
			A2($author$project$SmartTime$Duration$longest, durationA, durationB));
	});
var $author$project$SmartTime$Period$crop = F2(
	function (cropFrame, givenPeriod) {
		return A2(
			$author$project$SmartTime$Period$Period,
			A2(
				$author$project$SmartTime$Moment$latest,
				$author$project$SmartTime$Period$start(cropFrame),
				$author$project$SmartTime$Period$start(givenPeriod)),
			A2(
				$author$project$SmartTime$Moment$earliest,
				$author$project$SmartTime$Period$end(cropFrame),
				$author$project$SmartTime$Period$end(givenPeriod)));
	});
var $kuon$elm_hsluv$HSLuv$Color$HSLuv = function (a) {
	return {$: 'HSLuv', a: a};
};
var $kuon$elm_hsluv$HSLuv$hsluv = function (c) {
	return $kuon$elm_hsluv$HSLuv$Color$HSLuv(
		{alpha: c.alpha, hue: c.hue * 360, lightness: c.lightness * 100, saturation: c.saturation * 100});
};
var $kuon$elm_hsluv$HSLuv$maxF = 99.9999999;
var $kuon$elm_hsluv$HSLuv$epsilon = 0.0088564516;
var $kuon$elm_hsluv$HSLuv$kappa = 903.2962962;
var $kuon$elm_hsluv$HSLuv$m = _Utils_Tuple3(
	_Utils_Tuple3(3.240969941904521, -1.537383177570093, -0.498610760293),
	_Utils_Tuple3(-0.96924363628087, 1.87596750150772, 0.041555057407175),
	_Utils_Tuple3(0.055630079696993, -0.20397695888897, 1.056971514242878));
var $kuon$elm_hsluv$HSLuv$getBounds = function (l) {
	var sub = A2($elm$core$Basics$pow, l + 16.0, 3.0) / 1560896.0;
	var sub_ = (_Utils_cmp(sub, $kuon$elm_hsluv$HSLuv$epsilon) > 0) ? sub : (l / $kuon$elm_hsluv$HSLuv$kappa);
	var compute = F2(
		function (_v1, t) {
			var m1 = _v1.a;
			var m2 = _v1.b;
			var m3 = _v1.c;
			var top2 = (((((838422.0 * m3) + (769860.0 * m2)) + (731718.0 * m1)) * l) * sub_) - ((769860.0 * t) * l);
			var top1 = ((284517.0 * m1) - (94839.0 * m3)) * sub_;
			var bottom = (((632260.0 * m3) - (126452.0 * m2)) * sub_) + (126452.0 * t);
			return _Utils_Tuple2(top1 / bottom, top2 / bottom);
		});
	var _v0 = $kuon$elm_hsluv$HSLuv$m;
	var m1_ = _v0.a;
	var m2_ = _v0.b;
	var m3_ = _v0.c;
	return _List_fromArray(
		[
			A2(compute, m1_, 0),
			A2(compute, m1_, 1),
			A2(compute, m2_, 0),
			A2(compute, m2_, 1),
			A2(compute, m3_, 0),
			A2(compute, m3_, 1)
		]);
};
var $kuon$elm_hsluv$HSLuv$lengthOfRayUntilIntersect = F2(
	function (theta, _v0) {
		var slope = _v0.a;
		var intercept = _v0.b;
		return intercept / ($elm$core$Basics$sin(theta) - (slope * $elm$core$Basics$cos(theta)));
	});
var $kuon$elm_hsluv$HSLuv$maxSafeChromaForLH = F2(
	function (l, h) {
		var hRad = ((h / 360.0) * $elm$core$Basics$pi) * 2.0;
		var fold = F2(
			function (bound, val) {
				var length = A2($kuon$elm_hsluv$HSLuv$lengthOfRayUntilIntersect, hRad, bound);
				return (length >= 0) ? A2($elm$core$Basics$min, val, length) : val;
			});
		return A3(
			$elm$core$List$foldl,
			fold,
			1.7976931348623157e308,
			$kuon$elm_hsluv$HSLuv$getBounds(l));
	});
var $kuon$elm_hsluv$HSLuv$minF = 0.00000001;
var $kuon$elm_hsluv$HSLuv$hsluvToLch = function (_v0) {
	var h = _v0.a;
	var s = _v0.b;
	var l = _v0.c;
	return (_Utils_cmp(l, $kuon$elm_hsluv$HSLuv$maxF) > 0) ? _Utils_Tuple3(100.0, 0, h) : ((_Utils_cmp(l, $kuon$elm_hsluv$HSLuv$minF) < 0) ? _Utils_Tuple3(0.0, 0.0, h) : _Utils_Tuple3(
		l,
		(A2($kuon$elm_hsluv$HSLuv$maxSafeChromaForLH, l, h) / 100.0) * s,
		h));
};
var $kuon$elm_hsluv$HSLuv$lchToLuv = function (_v0) {
	var l = _v0.a;
	var c = _v0.b;
	var h = _v0.c;
	var hRad = ((h / 360.0) * 2.0) * $elm$core$Basics$pi;
	return _Utils_Tuple3(
		l,
		$elm$core$Basics$cos(hRad) * c,
		$elm$core$Basics$sin(hRad) * c);
};
var $kuon$elm_hsluv$HSLuv$refY = 1.0;
var $kuon$elm_hsluv$HSLuv$fInv = function (t) {
	return (t > 8) ? ($kuon$elm_hsluv$HSLuv$refY * A2($elm$core$Basics$pow, (t + 16.0) / 116.0, 3.0)) : (($kuon$elm_hsluv$HSLuv$refY * t) / $kuon$elm_hsluv$HSLuv$kappa);
};
var $kuon$elm_hsluv$HSLuv$refU = 0.19783000664283;
var $kuon$elm_hsluv$HSLuv$refV = 0.46831999493879;
var $kuon$elm_hsluv$HSLuv$luvToXyz = function (_v0) {
	var l = _v0.a;
	var u = _v0.b;
	var v = _v0.c;
	if (!l) {
		return _Utils_Tuple3(0, 0, 0);
	} else {
		var varY = $kuon$elm_hsluv$HSLuv$fInv(l);
		var y = varY * $kuon$elm_hsluv$HSLuv$refY;
		var varV = (v / (13.0 * l)) + $kuon$elm_hsluv$HSLuv$refV;
		var varU = (u / (13.0 * l)) + $kuon$elm_hsluv$HSLuv$refU;
		var x = 0.0 - (((9.0 * y) * varU) / (((varU - 4.0) * varV) - (varU * varV)));
		var z = (((9.0 * y) - ((15.0 * varV) * y)) - (varV * x)) / (3.0 * varV);
		return _Utils_Tuple3(x, y, z);
	}
};
var $kuon$elm_hsluv$HSLuv$dotProduct = F2(
	function (_v0, _v1) {
		var a0 = _v0.a;
		var a1 = _v0.b;
		var a2 = _v0.c;
		var b0 = _v1.a;
		var b1 = _v1.b;
		var b2 = _v1.c;
		return ((a0 * b0) + (a1 * b1)) + (a2 * b2);
	});
var $kuon$elm_hsluv$HSLuv$fromLinear = function (c) {
	return (c <= 0.0031308) ? (12.92 * c) : ((1.055 * A2($elm$core$Basics$pow, c, 1.0 / 2.4)) - 0.055);
};
var $kuon$elm_hsluv$HSLuv$xyzToRgb = function (xyz) {
	var _v0 = $kuon$elm_hsluv$HSLuv$m;
	var m1 = _v0.a;
	var m2 = _v0.b;
	var m3 = _v0.c;
	var _v1 = _Utils_Tuple3(
		A2($kuon$elm_hsluv$HSLuv$dotProduct, m1, xyz),
		A2($kuon$elm_hsluv$HSLuv$dotProduct, m2, xyz),
		A2($kuon$elm_hsluv$HSLuv$dotProduct, m3, xyz));
	var a = _v1.a;
	var b = _v1.b;
	var c = _v1.c;
	return _Utils_Tuple3(
		$kuon$elm_hsluv$HSLuv$fromLinear(a),
		$kuon$elm_hsluv$HSLuv$fromLinear(b),
		$kuon$elm_hsluv$HSLuv$fromLinear(c));
};
var $kuon$elm_hsluv$HSLuv$hsluvToRgb = A2(
	$elm$core$Basics$composeR,
	$kuon$elm_hsluv$HSLuv$hsluvToLch,
	A2(
		$elm$core$Basics$composeR,
		$kuon$elm_hsluv$HSLuv$lchToLuv,
		A2($elm$core$Basics$composeR, $kuon$elm_hsluv$HSLuv$luvToXyz, $kuon$elm_hsluv$HSLuv$xyzToRgb)));
var $kuon$elm_hsluv$HSLuv$toColor = function (_v0) {
	var c = _v0.a;
	var _v1 = $kuon$elm_hsluv$HSLuv$hsluvToRgb(
		_Utils_Tuple3(c.hue, c.saturation, c.lightness));
	var r = _v1.a;
	var g = _v1.b;
	var b = _v1.c;
	return $avh4$elm_color$Color$fromRgba(
		{alpha: c.alpha, blue: b, green: g, red: r});
};
var $author$project$Timeflow$makeHistoryBlob = F4(
	function (env, activityStore, displayPeriod, session) {
		var stringID = $author$project$SmartTime$Human$Moment$toStandardString(
			$author$project$Activity$Session$getStart(session));
		var sessionActivity = A2(
			$author$project$Activity$Activity$getByID,
			$author$project$Activity$Session$getActivityID(session),
			activityStore);
		var croppedSessionPeriod = A2(
			$author$project$SmartTime$Period$crop,
			displayPeriod,
			$author$project$Activity$Session$getPeriod(session));
		var activityName = $author$project$Activity$Activity$getName(sessionActivity);
		var describeTiming = $elm$core$String$fromInt(
			$elm$core$Basics$round(
				$author$project$SmartTime$Duration$inMinutes(
					$author$project$SmartTime$Period$length(
						$author$project$Activity$Session$getPeriod(session))))) + ('m ' + activityName);
		var activityIcon = function () {
			var _v3 = $author$project$Activity$Activity$getIcon(sessionActivity);
			switch (_v3.$) {
				case 'File':
					var svgPath = _v3.a;
					return '';
				case 'Emoji':
					var singleEmoji = _v3.a;
					return singleEmoji;
				default:
					return '⚪';
			}
		}();
		var activityHue = $elm$core$String$length(
			$author$project$Activity$Activity$getName(sessionActivity)) / 10;
		var activityColor = $kuon$elm_hsluv$HSLuv$toColor(
			$kuon$elm_hsluv$HSLuv$hsluv(
				{alpha: 0.99, hue: activityHue, lightness: 0.5, saturation: 1}));
		var _v0 = _Utils_Tuple2(
			A2(
				$author$project$SmartTime$Human$Moment$humanize,
				env.timeZone,
				$author$project$Activity$Session$getStart(session)),
			A2(
				$author$project$SmartTime$Human$Moment$humanize,
				env.timeZone,
				$author$project$Activity$Session$getEnd(session)));
		var _v1 = _v0.a;
		var startDate = _v1.a;
		var startTime = _v1.b;
		var _v2 = _v0.b;
		var endDate = _v2.a;
		var endTime = _v2.b;
		return A5(
			$author$project$Timeflow$FlowBlob,
			$author$project$SmartTime$Period$start(croppedSessionPeriod),
			$author$project$SmartTime$Period$end(croppedSessionPeriod),
			activityColor,
			describeTiming,
			stringID);
	});
var $author$project$Timeflow$historyBlobs = F3(
	function (env, profile, displayPeriod) {
		var historyList = A2($author$project$Activity$Timeline$historyLive, env.time, profile.timeline);
		return A2(
			$elm$core$List$map,
			A3($author$project$Timeflow$makeHistoryBlob, env, profile.activities, displayPeriod),
			A2(
				$elm_community$list_extra$List$Extra$takeWhile,
				function (sesh) {
					return A2(
						$author$project$SmartTime$Period$haveOverlap,
						displayPeriod,
						$author$project$Activity$Session$getPeriod(sesh));
				},
				historyList));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$findChroma = F2(
	function (lit, sat) {
		return (1 - $elm$core$Basics$abs((2 * lit) - 1)) * sat;
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$findM = F2(
	function (lit, chroma) {
		return lit - (0.5 * chroma);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$mapTriple = F2(
	function (f, _v0) {
		var a1 = _v0.a;
		var a2 = _v0.b;
		var a3 = _v0.c;
		return _Utils_Tuple3(
			f(a1),
			f(a2),
			f(a3));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$modFloat = F2(
	function (x, m) {
		return x - (m * $elm$core$Basics$floor(x / m));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$findHue_ = function (hue) {
	return hue / $elm$core$Basics$degrees(60);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$findX = F2(
	function (chroma, hue) {
		return chroma * (1 - $elm$core$Basics$abs(
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$modFloat,
				$MacCASOutreach$graphicsvg$GraphicSVG$findHue_(hue),
				2) - 1));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$toRGB_ = F3(
	function (hue, sat, lit) {
		var hue_ = $MacCASOutreach$graphicsvg$GraphicSVG$findHue_(hue);
		var chroma = A2($MacCASOutreach$graphicsvg$GraphicSVG$findChroma, lit, sat);
		var x = A2($MacCASOutreach$graphicsvg$GraphicSVG$findX, chroma, hue);
		return ((hue_ >= 0) && (hue_ < 1)) ? _Utils_Tuple3(chroma, x, 0) : (((hue_ >= 1) && (hue_ < 2)) ? _Utils_Tuple3(x, chroma, 0) : (((hue_ >= 2) && (hue_ < 3)) ? _Utils_Tuple3(0, chroma, x) : (((hue_ >= 3) && (hue_ < 4)) ? _Utils_Tuple3(0, x, chroma) : (((hue_ >= 4) && (hue_ < 5)) ? _Utils_Tuple3(x, 0, chroma) : (((hue_ >= 5) && (hue_ < 6)) ? _Utils_Tuple3(chroma, 0, x) : _Utils_Tuple3(0, 0, 0))))));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$convert = F3(
	function (hue, sat, lit) {
		var hue_ = A2($MacCASOutreach$graphicsvg$GraphicSVG$modFloat, hue, 2 * $elm$core$Basics$pi);
		var rgb_ = A3($MacCASOutreach$graphicsvg$GraphicSVG$toRGB_, hue_, sat, lit);
		var chroma = A2($MacCASOutreach$graphicsvg$GraphicSVG$findChroma, lit, sat);
		var m = A2($MacCASOutreach$graphicsvg$GraphicSVG$findM, lit, chroma);
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$mapTriple,
			function (x) {
				return x * 255;
			},
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$mapTriple,
				function (x) {
					return x + m;
				},
				rgb_));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$hsl = F3(
	function (h, s, l) {
		var _v0 = A3($MacCASOutreach$graphicsvg$GraphicSVG$convert, h, s, l);
		var r = _v0.a;
		var g = _v0.b;
		var b = _v0.c;
		return A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, r, g, b, 1);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Rect = F2(
	function (a, b) {
		return {$: 'Rect', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$rect = F2(
	function (w, h) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$Rect, w, h);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$FixedWidth = {$: 'FixedWidth'};
var $MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth = function (stencil) {
	if (stencil.$ === 'Text') {
		var _v1 = stencil.a;
		var si = _v1.a;
		var bo = _v1.b;
		var i = _v1.c;
		var u = _v1.d;
		var s = _v1.e;
		var sel = _v1.f;
		var f = _v1.g;
		var c = _v1.h;
		var str = stencil.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Text,
			A8($MacCASOutreach$graphicsvg$GraphicSVG$Face, si, bo, i, u, s, sel, $MacCASOutreach$graphicsvg$GraphicSVG$FixedWidth, c),
			str);
	} else {
		var a = stencil;
		return a;
	}
};
var $MacCASOutreach$graphicsvg$GraphicSVG$red = A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 204, 0, 0, 1);
var $author$project$Timeflow$timeLabel = F2(
	function (env, stampMoment) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, 0),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				$MacCASOutreach$graphicsvg$GraphicSVG$red,
				$MacCASOutreach$graphicsvg$GraphicSVG$centered(
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$size,
						1,
						$MacCASOutreach$graphicsvg$GraphicSVG$fixedwidth(
							$MacCASOutreach$graphicsvg$GraphicSVG$text(
								A3($author$project$SmartTime$Human$Moment$describeVsNow, env.timeZone, env.time, stampMoment)))))));
	});
var $author$project$Timeflow$allShapes = F3(
	function (state, profile, env) {
		var boxHeight = $elm$core$List$length(
			A2($author$project$SmartTime$Period$divide, state.settings.hourRowSize, state.settings.flowRenderPeriod)) * state.settings.rowHeight;
		return _Utils_ap(
			_List_fromArray(
				[
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(0, (-boxHeight) / 2),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$makeTransparent,
						0.9,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$filled,
							$MacCASOutreach$graphicsvg$GraphicSVG$black,
							A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 100, boxHeight)))),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$move,
					_Utils_Tuple2(0, ((-3) * boxHeight) / 2),
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						A3($MacCASOutreach$graphicsvg$GraphicSVG$hsl, 180, 1, 0.1),
						A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, 100, boxHeight))),
					A2($author$project$Timeflow$timeLabel, env, state.settings.pivotMoment)
				]),
			A2(
				$elm$core$List$map,
				A2($author$project$Timeflow$blobToShape, state, env),
				A3($author$project$Timeflow$historyBlobs, env, profile, state.settings.flowRenderPeriod)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$graphPaperCustom = F3(
	function (s, th, c) {
		return A3($MacCASOutreach$graphicsvg$GraphicSVG$GraphPaper, s, th, c);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MoveOverAt, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseUp = F2(
	function (msg, shape) {
		return A2($MacCASOutreach$graphicsvg$GraphicSVG$MouseUp, msg, shape);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$rgb = F3(
	function (r, g, b) {
		return A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, r, g, b, 1);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$ViewHeight = function (a) {
	return {$: 'ViewHeight', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$ViewWidth = function (a) {
	return {$: 'ViewWidth', a: a};
};
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$defaultViewOption = _List_fromArray(
	[
		$MacCASOutreach$graphicsvg$GraphicSVG$Widget$ViewWidth('100%'),
		$MacCASOutreach$graphicsvg$GraphicSVG$Widget$ViewHeight('100%')
	]);
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$cPath = F3(
	function (id, w, h) {
		return A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id('cPath' + id)
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$rect,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(w)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(h)),
									$elm$svg$Svg$Attributes$x(
									$elm$core$String$fromFloat((-w) / 2)),
									$elm$svg$Svg$Attributes$y(
									$elm$core$String$fromFloat((-h) / 2))
								]),
							_List_Nil)
						]))
				]));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$convertCoords = F5(
	function (ww, sh, cw, ch, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		var aspectout = (!(!sh)) ? (ww / sh) : (4 / 3);
		var aspectin = (!(!ch)) ? (cw / ch) : (4 / 3);
		var scaledInX = _Utils_cmp(aspectout, aspectin) < 0;
		var scaledInY = _Utils_cmp(aspectout, aspectin) > 0;
		var cscale = scaledInX ? (ww / cw) : (scaledInY ? (sh / ch) : 1);
		return _Utils_Tuple2((x - (ww / 2)) / cscale, (y + (sh / 2)) / cscale);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$convertViewOption = function (vo) {
	switch (vo.$) {
		case 'ViewWidth':
			var w = vo.a;
			return A2($elm$html$Html$Attributes$style, 'width', w);
		case 'ViewHeight':
			var h = vo.a;
			return A2($elm$html$Html$Attributes$style, 'height', h);
		default:
			var s = vo.a;
			var o = vo.b;
			return A2($elm$html$Html$Attributes$style, s, o);
	}
};
var $elm$svg$Svg$a = $elm$svg$Svg$trustedNode('a');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$html$Html$Attributes$contenteditable = $elm$html$Html$Attributes$boolProperty('contentEditable');
var $MacCASOutreach$graphicsvg$GraphicSVG$pairToString = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (',' + $elm$core$String$fromFloat(y));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$bezierStringHelper = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	var b = _v1.b;
	var _v2 = _v0.b;
	var c = _v2.a;
	var d = _v2.b;
	return ' Q ' + ($MacCASOutreach$graphicsvg$GraphicSVG$pairToString(
		_Utils_Tuple2(a, b)) + (' ' + $MacCASOutreach$graphicsvg$GraphicSVG$pairToString(
		_Utils_Tuple2(c, d))));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$createBezierString = F2(
	function (first, list) {
		return 'M ' + ($MacCASOutreach$graphicsvg$GraphicSVG$pairToString(first) + $elm$core$String$concat(
			A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$bezierStringHelper, list)));
	});
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$Attributes$gradientTransform = _VirtualDom_attribute('gradientTransform');
var $elm$svg$Svg$Attributes$gradientUnits = _VirtualDom_attribute('gradientUnits');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$mask = _VirtualDom_attribute('mask');
var $MacCASOutreach$graphicsvg$GraphicSVG$mkRGB = function (colour) {
	var col = $avh4$elm_color$Color$toRgba(colour);
	return 'rgba(' + ($elm$core$String$fromFloat(col.red) + (',' + ($elm$core$String$fromFloat(col.green) + (',' + ($elm$core$String$fromFloat(col.blue) + (',' + ($elm$core$String$fromFloat(col.alpha) + ')')))))));
};
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$radialGradient = $elm$svg$Svg$trustedNode('radialGradient');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $MacCASOutreach$graphicsvg$GraphicSVG$createGradientSVG = F3(
	function (id, _v0, grad) {
		var wid = _v0.a;
		var hei = _v0.b;
		var w = function () {
			if (grad.$ === 'RadialGradient') {
				var stops = grad.a;
				var _v6 = $elm$core$List$head(
					$elm$core$List$reverse(stops));
				if (_v6.$ === 'Just') {
					var _v7 = _v6.a;
					var pos = _v7.a;
					return pos;
				} else {
					return 0;
				}
			} else {
				var stops = grad.b;
				var _v8 = $elm$core$List$head(
					$elm$core$List$reverse(stops));
				if (_v8.$ === 'Just') {
					var _v9 = _v8.a;
					var pos = _v9.a;
					return pos;
				} else {
					return 0;
				}
			}
		}();
		var squareSize = (_Utils_cmp(wid, hei) > 0) ? (2 * wid) : (2 * hei);
		var rotation = function () {
			if (grad.$ === 'LinearGradient') {
				var rot = grad.a;
				var stops = grad.b;
				return (rot * 180) / $elm$core$Basics$pi;
			} else {
				return 0;
			}
		}();
		var isRadial = function () {
			if (grad.$ === 'RadialGradient') {
				return true;
			} else {
				return false;
			}
		}();
		var createStop = function (_v2) {
			var pos = _v2.a;
			var trans = _v2.b;
			var colour = _v2.c;
			var start = isRadial ? 0 : (((1 - (w / squareSize)) / 2) * 100);
			var percent = isRadial ? ((pos / w) * 100) : (start + ((pos / squareSize) * 100));
			var percentTxt = $elm$core$String$fromFloat(percent) + '%';
			var opacityTxt = 'stop-opacity:' + ($elm$core$String$fromFloat(trans) + ';');
			var colourTxt = 'stop-color:' + ($MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(colour) + ';');
			return A2(
				$elm$svg$Svg$stop,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$offset(percentTxt),
						$elm$svg$Svg$Attributes$style(
						_Utils_ap(colourTxt, opacityTxt))
					]),
				_List_Nil);
		};
		var defs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					function () {
					if (grad.$ === 'LinearGradient') {
						var stops = grad.b;
						return A2(
							$elm$svg$Svg$linearGradient,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id + 'gradient'),
									$elm$svg$Svg$Attributes$gradientTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotation) + 'rad)')),
									$elm$svg$Svg$Attributes$gradientTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotation) + 'rad)'))
								]),
							A2($elm$core$List$map, createStop, stops));
					} else {
						var stops = grad.a;
						return A2(
							$elm$svg$Svg$radialGradient,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id + 'gradient'),
									$elm$svg$Svg$Attributes$cx('0'),
									$elm$svg$Svg$Attributes$cy('0'),
									$elm$svg$Svg$Attributes$r(
									$elm$core$String$fromFloat(w)),
									$elm$svg$Svg$Attributes$gradientUnits('userSpaceOnUse')
								]),
							A2($elm$core$List$map, createStop, stops));
					}
				}()
				]));
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$mask('url(#' + (id + 'mask)'))
				]),
			_List_fromArray(
				[
					defs,
					A2(
					$elm$svg$Svg$rect,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$x(
							$elm$core$String$fromFloat((-squareSize) / 2)),
							$elm$svg$Svg$Attributes$y(
							$elm$core$String$fromFloat((-squareSize) / 2)),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(squareSize)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(squareSize)),
							$elm$svg$Svg$Attributes$fill('url(#' + (id + 'gradient)')),
							$elm$svg$Svg$Attributes$id(id + 'grad'),
							$elm$svg$Svg$Attributes$transform(
							'rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))
						]),
					_List_Nil)
				]));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraphX = F5(
	function (h, s, th, c, x) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(x * s, 0),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				c,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, th, h)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraphY = F5(
	function (w, s, th, c, y) {
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$move,
			_Utils_Tuple2(0, y * s),
			A2(
				$MacCASOutreach$graphicsvg$GraphicSVG$filled,
				c,
				A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, w, th)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$createGraph = F4(
	function (_v0, s, th, c) {
		var w = _v0.a;
		var h = _v0.b;
		var syi = $elm$core$Basics$ceiling(h / (s * 2));
		var ylisti = A2($elm$core$List$range, -syi, syi);
		var sxi = $elm$core$Basics$ceiling(w / (s * 2));
		var xlisti = A2($elm$core$List$range, -sxi, sxi);
		return $MacCASOutreach$graphicsvg$GraphicSVG$group(
			_Utils_ap(
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						A4($MacCASOutreach$graphicsvg$GraphicSVG$createGraphX, h, s, th, c),
						$elm$core$Basics$toFloat),
					xlisti),
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeL,
						A4($MacCASOutreach$graphicsvg$GraphicSVG$createGraphY, w, s, th, c),
						$elm$core$Basics$toFloat),
					ylisti)));
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$ellipse = $elm$svg$Svg$trustedNode('ellipse');
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $MacCASOutreach$graphicsvg$GraphicSVG$getAlpha = function (colour) {
	return $avh4$elm_color$Color$toRgba(colour).alpha;
};
var $MacCASOutreach$graphicsvg$GraphicSVG$ident = _Utils_Tuple2(
	_Utils_Tuple3(1, 0, 0),
	_Utils_Tuple3(0, 1, 0));
var $elm$svg$Svg$mask = $elm$svg$Svg$trustedNode('mask');
var $MacCASOutreach$graphicsvg$GraphicSVG$matrixMult = F2(
	function (_v0, _v3) {
		var _v1 = _v0.a;
		var a = _v1.a;
		var c = _v1.b;
		var e = _v1.c;
		var _v2 = _v0.b;
		var b = _v2.a;
		var d = _v2.b;
		var f = _v2.c;
		var _v4 = _v3.a;
		var a1 = _v4.a;
		var c1 = _v4.b;
		var e1 = _v4.c;
		var _v5 = _v3.b;
		var b1 = _v5.a;
		var d1 = _v5.b;
		var f1 = _v5.c;
		return _Utils_Tuple2(
			_Utils_Tuple3((a * a1) + (c * b1), (a * c1) + (c * d1), (e + (a * e1)) + (c * f1)),
			_Utils_Tuple3((b * a1) + (d * b1), (b * c1) + (d * d1), (f + (b * e1)) + (d * f1)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha = A2($elm$core$Basics$composeL, $elm$core$String$fromFloat, $MacCASOutreach$graphicsvg$GraphicSVG$getAlpha);
var $MacCASOutreach$graphicsvg$GraphicSVG$moveT = F2(
	function (_v0, _v1) {
		var u = _v0.a;
		var v = _v0.b;
		var _v2 = _v1.a;
		var a = _v2.a;
		var c = _v2.b;
		var tx = _v2.c;
		var _v3 = _v1.b;
		var b = _v3.a;
		var d = _v3.b;
		var ty = _v3.c;
		return _Utils_Tuple2(
			_Utils_Tuple3(a, c, (tx + (a * u)) + (c * v)),
			_Utils_Tuple3(b, d, (ty + (b * u)) + (d * v)));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, -y);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $MacCASOutreach$graphicsvg$GraphicSVG$onEnterAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseover',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onLeaveAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMouseDownAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMouseUpAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onMoveAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousemove',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTapAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		A2($elm$json$Json$Decode$map, msg, $MacCASOutreach$graphicsvg$GraphicSVG$mousePosDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchEnd = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchend',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$TouchPos = F2(
	function (a, b) {
		return {$: 'TouchPos', a: a, b: b};
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$at,
			_List_fromArray(
				['touches', '0']),
			A3(
				$elm$json$Json$Decode$map2,
				$MacCASOutreach$graphicsvg$GraphicSVG$TouchPos,
				A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
				A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float))),
			A3(
			$elm$json$Json$Decode$map2,
			$MacCASOutreach$graphicsvg$GraphicSVG$TouchPos,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float))
		]));
var $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair = function (tp) {
	var x = tp.a;
	var y = tp.b;
	return _Utils_Tuple2(x, -y);
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchMove = function (msg) {
	return A2(
		$elm$html$Html$Events$preventDefaultOn,
		'touchmove',
		A2(
			$elm$json$Json$Decode$map,
			function (a) {
				return _Utils_Tuple2(
					A2($elm$core$Basics$composeL, msg, $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair)(a),
					true);
			},
			$MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchStart = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchstart',
		$elm$json$Json$Decode$succeed(msg));
};
var $MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'touchstart',
		A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeL, msg, $MacCASOutreach$graphicsvg$GraphicSVG$touchToPair),
			$MacCASOutreach$graphicsvg$GraphicSVG$touchDecoder));
};
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$rotateT = F2(
	function (rad, _v0) {
		var _v1 = _v0.a;
		var a = _v1.a;
		var c = _v1.b;
		var tx = _v1.c;
		var _v2 = _v0.b;
		var b = _v2.a;
		var d = _v2.b;
		var ty = _v2.c;
		var sinX = $elm$core$Basics$sin(rad);
		var cosX = $elm$core$Basics$cos(rad);
		return _Utils_Tuple2(
			_Utils_Tuple3((a * cosX) + (c * sinX), (c * cosX) - (a * sinX), tx),
			_Utils_Tuple3((b * cosX) + (d * sinX), (d * cosX) - (b * sinX), ty));
	});
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $MacCASOutreach$graphicsvg$GraphicSVG$scaleT = F3(
	function (sx, sy, _v0) {
		var _v1 = _v0.a;
		var a = _v1.a;
		var c = _v1.b;
		var tx = _v1.c;
		var _v2 = _v0.b;
		var b = _v2.a;
		var d = _v2.b;
		var ty = _v2.c;
		return _Utils_Tuple2(
			_Utils_Tuple3(a * sx, c * sy, tx),
			_Utils_Tuple3(b * sx, d * sy, ty));
	});
var $elm$core$Basics$tan = _Basics_tan;
var $MacCASOutreach$graphicsvg$GraphicSVG$skewT = F3(
	function (skx, sky, _v0) {
		var _v1 = _v0.a;
		var a = _v1.a;
		var c = _v1.b;
		var tx = _v1.c;
		var _v2 = _v0.b;
		var b = _v2.a;
		var d = _v2.b;
		var ty = _v2.c;
		var tanY = $elm$core$Basics$tan(-sky);
		var tanX = $elm$core$Basics$tan(-skx);
		return _Utils_Tuple2(
			_Utils_Tuple3(a + (c * tanY), c + (a * tanX), tx),
			_Utils_Tuple3(b + (d * tanY), d + (b * tanX), ty));
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$Attributes$target = _VirtualDom_attribute('target');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$Attributes$textAnchor = _VirtualDom_attribute('text-anchor');
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $MacCASOutreach$graphicsvg$GraphicSVG$white = A4($MacCASOutreach$graphicsvg$GraphicSVG$rgba, 255, 255, 255, 1);
var $elm$svg$Svg$Attributes$xlinkHref = function (value) {
	return A3(
		_VirtualDom_attributeNS,
		'http://www.w3.org/1999/xlink',
		'xlink:href',
		_VirtualDom_noJavaScriptUri(value));
};
var $elm$svg$Svg$Attributes$xmlSpace = A2(_VirtualDom_attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var $MacCASOutreach$graphicsvg$GraphicSVG$createSVG = F7(
	function (id, w, h, trans, msgWrapper, positionWrapper, shape) {
		createSVG:
		while (true) {
			switch (shape.$) {
				case 'Inked':
					var fillClr = shape.a;
					var lt = shape.b;
					var stencil = shape.c;
					var strokeAttrs = function () {
						_v13$3:
						while (true) {
							if (lt.$ === 'Nothing') {
								return _List_Nil;
							} else {
								if (lt.a.b.$ === 'Solid') {
									switch (lt.a.a.$) {
										case 'Unbroken':
											var _v14 = lt.a;
											var th = _v14.a.a;
											var strokeClr = _v14.b.a;
											var nonStroke = function () {
												var opcty = $MacCASOutreach$graphicsvg$GraphicSVG$getAlpha(strokeClr);
												return (th <= 0) || (opcty <= 0);
											}();
											return nonStroke ? _List_Nil : _List_fromArray(
												[
													$elm$svg$Svg$Attributes$strokeWidth(
													$elm$core$String$fromFloat(th)),
													$elm$svg$Svg$Attributes$stroke(
													$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(strokeClr)),
													$elm$svg$Svg$Attributes$strokeOpacity(
													$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(strokeClr))
												]);
										case 'Broken':
											var _v15 = lt.a;
											var _v16 = _v15.a;
											var dashes = _v16.a;
											var th = _v16.b;
											var strokeClr = _v15.b.a;
											var nonStroke = function () {
												var opcty = $MacCASOutreach$graphicsvg$GraphicSVG$getAlpha(strokeClr);
												return (th <= 0) || ((opcty <= 0) || A2(
													$elm$core$List$all,
													function (_v17) {
														var on = _v17.a;
														return !on;
													},
													dashes));
											}();
											return nonStroke ? _List_Nil : _Utils_ap(
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$strokeWidth(
														$elm$core$String$fromFloat(th)),
														$elm$svg$Svg$Attributes$stroke(
														$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(strokeClr)),
														$elm$svg$Svg$Attributes$strokeOpacity(
														$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(strokeClr))
													]),
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$strokeDasharray(
														$elm$core$String$concat(
															A2(
																$elm$core$List$intersperse,
																',',
																A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, dashes))))
													]));
										default:
											break _v13$3;
									}
								} else {
									break _v13$3;
								}
							}
						}
						var _v18 = lt.a;
						return _List_Nil;
					}();
					var nonexistBody = function () {
						if (fillClr.$ === 'Nothing') {
							return true;
						} else {
							return false;
						}
					}();
					var gradientDefs = function () {
						if ((fillClr.$ === 'Just') && (fillClr.a.$ === 'Gradient')) {
							var gr = fillClr.a.a;
							return $elm$core$Maybe$Just(
								A3(
									$MacCASOutreach$graphicsvg$GraphicSVG$createGradientSVG,
									id,
									_Utils_Tuple2(w, h),
									gr));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					var clrAttrs = function () {
						if (fillClr.$ === 'Nothing') {
							return _List_fromArray(
								[
									$elm$svg$Svg$Attributes$fill('none')
								]);
						} else {
							if (fillClr.a.$ === 'Solid') {
								var bodyClr = fillClr.a.a;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(
										$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(bodyClr)),
										$elm$svg$Svg$Attributes$fillOpacity(
										$MacCASOutreach$graphicsvg$GraphicSVG$mkAlpha(bodyClr))
									]);
							} else {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$id(id),
										$elm$svg$Svg$Attributes$fill(
										$MacCASOutreach$graphicsvg$GraphicSVG$mkRGB(
											A3($avh4$elm_color$Color$rgb, 255, 255, 255)))
									]);
							}
						}
					}();
					var _v1 = trans;
					var _v2 = _v1.a;
					var a = _v2.a;
					var c = _v2.b;
					var tx = _v2.c;
					var _v3 = _v1.b;
					var b = _v3.a;
					var d = _v3.b;
					var ty = _v3.c;
					var transAttrs = _List_fromArray(
						[
							$elm$svg$Svg$Attributes$transform(
							'matrix(' + ($elm$core$String$concat(
								A2(
									$elm$core$List$intersperse,
									',',
									A2(
										$elm$core$List$map,
										$elm$core$String$fromFloat,
										_List_fromArray(
											[a, -b, c, -d, tx, -ty])))) + ')'))
						]);
					var attrs = function () {
						if ((fillClr.$ === 'Just') && (fillClr.a.$ === 'Gradient')) {
							return _Utils_ap(clrAttrs, strokeAttrs);
						} else {
							return _Utils_ap(
								transAttrs,
								_Utils_ap(clrAttrs, strokeAttrs));
						}
					}();
					var basicShape = function () {
						switch (stencil.$) {
							case 'Circle':
								var r = stencil.a;
								return A2(
									$elm$svg$Svg$circle,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$cx('0'),
												$elm$svg$Svg$Attributes$cy('0'),
												$elm$svg$Svg$Attributes$r(
												$elm$core$String$fromFloat(r))
											]),
										attrs),
									_List_Nil);
							case 'Rect':
								var rw = stencil.a;
								var rh = stencil.b;
								return A2(
									$elm$svg$Svg$rect,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$x(
												$elm$core$String$fromFloat((-rw) / 2)),
												$elm$svg$Svg$Attributes$y(
												$elm$core$String$fromFloat((-rh) / 2)),
												$elm$svg$Svg$Attributes$width(
												$elm$core$String$fromFloat(rw)),
												$elm$svg$Svg$Attributes$height(
												$elm$core$String$fromFloat(rh))
											]),
										attrs),
									_List_Nil);
							case 'RoundRect':
								var rw = stencil.a;
								var rh = stencil.b;
								var r = stencil.c;
								return A2(
									$elm$svg$Svg$rect,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$x(
												$elm$core$String$fromFloat((-rw) / 2)),
												$elm$svg$Svg$Attributes$y(
												$elm$core$String$fromFloat((-rh) / 2)),
												$elm$svg$Svg$Attributes$rx(
												$elm$core$String$fromFloat(r)),
												$elm$svg$Svg$Attributes$ry(
												$elm$core$String$fromFloat(r)),
												$elm$svg$Svg$Attributes$width(
												$elm$core$String$fromFloat(rw)),
												$elm$svg$Svg$Attributes$height(
												$elm$core$String$fromFloat(rh))
											]),
										attrs),
									_List_Nil);
							case 'Oval':
								var ow = stencil.a;
								var oh = stencil.b;
								return A2(
									$elm$svg$Svg$ellipse,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$cx('0'),
												$elm$svg$Svg$Attributes$cy('0'),
												$elm$svg$Svg$Attributes$rx(
												$elm$core$String$fromFloat(0.5 * ow)),
												$elm$svg$Svg$Attributes$ry(
												$elm$core$String$fromFloat(0.5 * oh))
											]),
										attrs),
									_List_Nil);
							case 'Polygon':
								var vertices = stencil.a;
								return A2(
									$elm$svg$Svg$polygon,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$points(
												$elm$core$String$concat(
													A2(
														$elm$core$List$intersperse,
														' ',
														A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, vertices))))
											]),
										attrs),
									_List_Nil);
							case 'Path':
								var vertices = stencil.a;
								return A2(
									$elm$svg$Svg$polyline,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$points(
												$elm$core$String$concat(
													A2(
														$elm$core$List$intersperse,
														' ',
														A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$pairToString, vertices))))
											]),
										attrs),
									_List_Nil);
							case 'BezierPath':
								var start = stencil.a;
								var pts = stencil.b;
								return A2(
									$elm$svg$Svg$path,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$d(
												A2($MacCASOutreach$graphicsvg$GraphicSVG$createBezierString, start, pts))
											]),
										attrs),
									_List_Nil);
							default:
								var _v6 = stencil.a;
								var si = _v6.a;
								var bo = _v6.b;
								var i = _v6.c;
								var u = _v6.d;
								var s = _v6.e;
								var sel = _v6.f;
								var f = _v6.g;
								var align = _v6.h;
								var str = stencil.b;
								var txtDec = (u && s) ? 'text-decoration: underline line-through;' : (u ? 'text-decoration: underline;' : (s ? 'text-decoration: line-through;' : ''));
								var select = (!sel) ? '-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;cursor: default;' : '';
								var it = i ? 'font-style: italic;' : '';
								var font = function () {
									switch (f.$) {
										case 'Sansserif':
											return 'sans-serif;';
										case 'Serif':
											return 'serif;';
										case 'FixedWidth':
											return 'monospace;';
										default:
											var fStr = f.a;
											return fStr + ';';
									}
								}();
								var bol = bo ? 'font-weight: bold;' : '';
								var sty = bol + (it + (txtDec + ('font-family: ' + (font + select))));
								var anchor = function () {
									switch (align.$) {
										case 'AlignCentred':
											return 'middle';
										case 'AlignLeft':
											return 'start';
										default:
											return 'end';
									}
								}();
								return A2(
									$elm$svg$Svg$text_,
									_Utils_ap(
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$x('0'),
												$elm$svg$Svg$Attributes$y('0'),
												$elm$svg$Svg$Attributes$style(sty),
												$elm$svg$Svg$Attributes$fontSize(
												$elm$core$String$fromFloat(si)),
												$elm$svg$Svg$Attributes$textAnchor(anchor),
												$elm$html$Html$Attributes$contenteditable(true)
											]),
										_Utils_ap(
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$transform(
													'matrix(' + ($elm$core$String$concat(
														A2(
															$elm$core$List$intersperse,
															',',
															A2(
																$elm$core$List$map,
																$elm$core$String$fromFloat,
																_List_fromArray(
																	[a, -b, -c, d, tx, -ty])))) + ')'))
												]),
											_Utils_ap(
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$xmlSpace('preserve')
													]),
												_Utils_ap(clrAttrs, strokeAttrs)))),
									_List_fromArray(
										[
											$elm$svg$Svg$text(str)
										]));
						}
					}();
					if (nonexistBody && $elm$core$List$isEmpty(strokeAttrs)) {
						return A2($elm$svg$Svg$g, _List_Nil, _List_Nil);
					} else {
						if (gradientDefs.$ === 'Just') {
							var gDefs = gradientDefs.a;
							return A2(
								$elm$svg$Svg$g,
								transAttrs,
								_List_fromArray(
									[
										A2(
										$elm$svg$Svg$mask,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$id(id + 'mask')
											]),
										_List_fromArray(
											[basicShape])),
										gDefs
									]));
						} else {
							return basicShape;
						}
					}
				case 'ForeignObject':
					var fw = shape.a;
					var fh = shape.b;
					var htm = shape.c;
					var _v19 = trans;
					var _v20 = _v19.a;
					var a = _v20.a;
					var c = _v20.b;
					var tx = _v20.c;
					var _v21 = _v19.b;
					var b = _v21.a;
					var d = _v21.b;
					var ty = _v21.c;
					return A2(
						$elm$svg$Svg$foreignObject,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$width(
								$elm$core$String$fromFloat(fw)),
								$elm$svg$Svg$Attributes$height(
								$elm$core$String$fromFloat(fh)),
								$elm$svg$Svg$Attributes$transform(
								'matrix(' + ($elm$core$String$concat(
									A2(
										$elm$core$List$intersperse,
										',',
										A2(
											$elm$core$List$map,
											$elm$core$String$fromFloat,
											_List_fromArray(
												[a, -b, -c, d, tx, -ty])))) + ')'))
							]),
						_List_fromArray(
							[
								A2($elm$html$Html$map, msgWrapper, htm)
							]));
				case 'Move':
					var v = shape.a;
					var sh = shape.b;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2($MacCASOutreach$graphicsvg$GraphicSVG$moveT, v, trans),
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Everything':
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = $MacCASOutreach$graphicsvg$GraphicSVG$ident,
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$white,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, w, h));
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Notathing':
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = $MacCASOutreach$graphicsvg$GraphicSVG$ident,
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$filled,
						$MacCASOutreach$graphicsvg$GraphicSVG$black,
						A2($MacCASOutreach$graphicsvg$GraphicSVG$rect, w, h));
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Rotate':
					var deg = shape.a;
					var sh = shape.b;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2($MacCASOutreach$graphicsvg$GraphicSVG$rotateT, deg, trans),
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Scale':
					var sx = shape.a;
					var sy = shape.b;
					var sh = shape.c;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A3($MacCASOutreach$graphicsvg$GraphicSVG$scaleT, sx, sy, trans),
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Skew':
					var sx = shape.a;
					var sy = shape.b;
					var sh = shape.c;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A3($MacCASOutreach$graphicsvg$GraphicSVG$skewT, sx, sy, trans),
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Transformed':
					var tm = shape.a;
					var sh = shape.b;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = A2($MacCASOutreach$graphicsvg$GraphicSVG$matrixMult, trans, tm),
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = sh;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				case 'Link':
					var href = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$a,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$xlinkHref(href),
								$elm$svg$Svg$Attributes$target('_blank')
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'AlphaMask':
					var region = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$svg$Svg$defs,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$svg$Svg$mask,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$id('m' + id)
											]),
										_List_fromArray(
											[
												A7(
												$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
												id + 'm',
												w,
												h,
												trans,
												msgWrapper,
												positionWrapper,
												$MacCASOutreach$graphicsvg$GraphicSVG$Group(
													_List_fromArray(
														[
															$MacCASOutreach$graphicsvg$GraphicSVG$Everything,
															A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, $MacCASOutreach$graphicsvg$GraphicSVG$black, region)
														])))
											]))
									])),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$mask('url(#m' + (id + ')'))
									]),
								_List_fromArray(
									[
										A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id + 'mm', w, h, trans, msgWrapper, positionWrapper, sh)
									]))
							]));
				case 'Clip':
					var region = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$svg$Svg$defs,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$svg$Svg$mask,
										_List_fromArray(
											[
												$elm$svg$Svg$Attributes$id('c' + id)
											]),
										_List_fromArray(
											[
												A7(
												$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
												id + 'c',
												w,
												h,
												trans,
												msgWrapper,
												positionWrapper,
												$MacCASOutreach$graphicsvg$GraphicSVG$Group(
													_List_fromArray(
														[
															$MacCASOutreach$graphicsvg$GraphicSVG$Notathing,
															A2($MacCASOutreach$graphicsvg$GraphicSVG$repaint, $MacCASOutreach$graphicsvg$GraphicSVG$white, region)
														])))
											]))
									])),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$mask('url(#c' + (id + ')'))
									]),
								_List_fromArray(
									[
										A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id + 'cc', w, h, trans, msgWrapper, positionWrapper, sh)
									]))
							]));
				case 'Tap':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TapAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTapAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'EnterShape':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseEnter(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'EnterAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onEnterAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'Exit':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseLeave(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'ExitAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onLeaveAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'MouseDown':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseDown(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'MouseDownAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMouseDownAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'MouseUp':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$html$Html$Events$onMouseUp(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'MouseUpAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMouseUpAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'MoveOverAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onMoveAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TouchStart':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStart(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TouchEnd':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchEnd(
								msgWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TouchStartAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TouchEndAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchStartAt(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'TouchMoveAt':
					var msg = shape.a;
					var sh = shape.b;
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$MacCASOutreach$graphicsvg$GraphicSVG$onTouchMove(
								positionWrapper(msg))
							]),
						_List_fromArray(
							[
								A7($MacCASOutreach$graphicsvg$GraphicSVG$createSVG, id, w, h, trans, msgWrapper, positionWrapper, sh)
							]));
				case 'Group':
					var shapes = shape.a;
					return A2(
						$elm$svg$Svg$g,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							function (n) {
								return A6(
									$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
									id + ('g' + $elm$core$String$fromInt(n)),
									w,
									h,
									trans,
									msgWrapper,
									positionWrapper);
							},
							shapes));
				case 'GroupOutline':
					var cmbndshp = shape.a;
					var $temp$id = id,
						$temp$w = w,
						$temp$h = h,
						$temp$trans = trans,
						$temp$msgWrapper = msgWrapper,
						$temp$positionWrapper = positionWrapper,
						$temp$shape = cmbndshp;
					id = $temp$id;
					w = $temp$w;
					h = $temp$h;
					trans = $temp$trans;
					msgWrapper = $temp$msgWrapper;
					positionWrapper = $temp$positionWrapper;
					shape = $temp$shape;
					continue createSVG;
				default:
					var s = shape.a;
					var th = shape.b;
					var c = shape.c;
					return ((th <= 0) || (_Utils_cmp(s, 2 * th) < 0)) ? A2($elm$svg$Svg$g, _List_Nil, _List_Nil) : A7(
						$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
						id,
						w,
						h,
						trans,
						msgWrapper,
						positionWrapper,
						A4(
							$MacCASOutreach$graphicsvg$GraphicSVG$createGraph,
							_Utils_Tuple2(w, h),
							s,
							th,
							c));
			}
		}
	});
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$viewCustom = F3(
	function (viewOptions, model, shapes) {
		var positionWrapper = F2(
			function (toMsg, _v0) {
				var x = _v0.a;
				var y = _v0.b;
				return toMsg(
					A5(
						$MacCASOutreach$graphicsvg$GraphicSVG$Widget$convertCoords,
						model.ww,
						model.wh,
						model.cw,
						model.ch,
						_Utils_Tuple2(x, y)));
			});
		return A2(
			$elm$svg$Svg$svg,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$id(model.id),
						$elm$svg$Svg$Attributes$viewBox(
						$elm$core$String$fromFloat((-model.cw) / 2) + (' ' + ($elm$core$String$fromFloat((-model.ch) / 2) + (' ' + ($elm$core$String$fromFloat(model.cw) + (' ' + $elm$core$String$fromFloat(model.ch)))))))
					]),
				A2($elm$core$List$map, $MacCASOutreach$graphicsvg$GraphicSVG$Widget$convertViewOption, viewOptions)),
			A2(
				$elm$core$List$cons,
				A3($MacCASOutreach$graphicsvg$GraphicSVG$Widget$cPath, model.id, model.cw, model.ch),
				_List_fromArray(
					[
						A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$clipPath('url(#cPath' + (model.id + ')'))
							]),
						A2(
							$elm$core$List$indexedMap,
							function (n) {
								return A6(
									$MacCASOutreach$graphicsvg$GraphicSVG$createSVG,
									_Utils_ap(
										model.id,
										$elm$core$String$fromInt(n)),
									model.cw,
									model.ch,
									$MacCASOutreach$graphicsvg$GraphicSVG$ident,
									$elm$core$Basics$identity,
									positionWrapper);
							},
							shapes))
					])));
	});
var $MacCASOutreach$graphicsvg$GraphicSVG$Widget$view = $MacCASOutreach$graphicsvg$GraphicSVG$Widget$viewCustom($MacCASOutreach$graphicsvg$GraphicSVG$Widget$defaultViewOption);
var $author$project$Timeflow$svgExperiment = F4(
	function (state, profile, env, _v0) {
		var widgetID = _v0.a;
		var _v1 = _v0.b;
		var widgetState = _v1.a;
		var widgetInitCmd = _v1.b;
		return A2(
			$MacCASOutreach$graphicsvg$GraphicSVG$Widget$view,
			widgetState,
			_List_fromArray(
				[
					A3(
					$MacCASOutreach$graphicsvg$GraphicSVG$graphPaperCustom,
					1,
					0.03,
					A3($MacCASOutreach$graphicsvg$GraphicSVG$rgb, 20, 20, 20)),
					A2(
					$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseUp,
					$author$project$Timeflow$MouseUp,
					A2(
						$MacCASOutreach$graphicsvg$GraphicSVG$notifyMouseMoveAt,
						$author$project$Timeflow$PointerMove,
						A2(
							$MacCASOutreach$graphicsvg$GraphicSVG$move,
							_Utils_Tuple2(0, 200),
							$MacCASOutreach$graphicsvg$GraphicSVG$group(
								A3($author$project$Timeflow$allShapes, state, profile, env)))))
				]));
	});
var $author$project$Timeflow$view = F3(
	function (vState, profile, env) {
		return $rtfeldman$elm_css$Html$Styled$fromUnstyled(
			A3(
				$mdgriffith$elm_ui$Element$layoutWith,
				{
					options: _List_fromArray(
						[$mdgriffith$elm_ui$Element$noStaticStyleSheet])
				},
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(30)),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX]),
									$mdgriffith$elm_ui$Element$text(
										$author$project$SmartTime$Human$Calendar$toStandardString(
											A2($author$project$SmartTime$Human$Moment$extractDate, env.timeZone, env.time))))
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$fillPortion(1)),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'max-height', 'inherit'))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(30)),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											$author$project$Helpers$elementColor($avh4$elm_color$Color$grey)),
											$mdgriffith$elm_ui$Element$Font$size(30)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('👋')),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('🖖')),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('👌')),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('🤞')),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('🖕'))
										])),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(10 * (vState.settings.rowHeight * vState.settings.rows))),
													$mdgriffith$elm_ui$Element$clip
												]),
											A2(
												$elm$core$List$map,
												A2(
													$elm$core$Basics$composeL,
													$mdgriffith$elm_ui$Element$html,
													A3($author$project$Timeflow$svgExperiment, vState, profile, env)),
												$elm$core$Dict$toList(vState.widgets)))
										]))
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(30)),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX]),
									$mdgriffith$elm_ui$Element$text(
										$author$project$Helpers$multiline(
											_List_fromArray(
												[
													_List_fromArray(
													[
														'Showing',
														$author$project$SmartTime$Human$Duration$abbreviatedSpaced(
														$author$project$SmartTime$Human$Duration$trim(
															$author$project$SmartTime$Human$Duration$breakdownDH(
																$author$project$SmartTime$Period$length(vState.settings.flowRenderPeriod)))),
														'(from',
														A3(
														$author$project$SmartTime$Human$Moment$describeVsNow,
														env.timeZone,
														env.time,
														$author$project$SmartTime$Period$start(vState.settings.flowRenderPeriod)),
														'through',
														A3(
														$author$project$SmartTime$Human$Moment$describeVsNow,
														env.timeZone,
														env.time,
														$author$project$SmartTime$Period$end(vState.settings.flowRenderPeriod)),
														')'
													])
												]))))
								]))
						]))));
	});
var $author$project$Main$view = function (_v0) {
	var replica = _v0.replica;
	var temp = _v0.temp;
	var openPanels = A2(
		$elm$core$List$filterMap,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				function () {
				var _v1 = temp.viewState.taskList;
				if (_v1.$ === 'OpenPanel') {
					var state = _v1.b;
					return $elm$core$Maybe$Just(
						{
							body: A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$Main$TaskListMsg,
								A3($author$project$TaskList$view, state, replica, temp.environment)),
							title: 'Projects'
						});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
				function () {
				var _v2 = temp.viewState.timeTracker;
				if (_v2.$ === 'OpenPanel') {
					var state = _v2.b;
					return $elm$core$Maybe$Just(
						{
							body: A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$Main$TimeTrackerMsg,
								A3($author$project$TimeTracker$view, state, replica, temp.environment)),
							title: 'Time Tracker'
						});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
				function () {
				var _v3 = temp.viewState.timeflow;
				if ((_v3.$ === 'OpenPanel') && (_v3.b.$ === 'Just')) {
					var state = _v3.b.a;
					return $elm$core$Maybe$Just(
						{
							body: A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$Main$TimeflowMsg,
								A3($author$project$Timeflow$view, state, replica, temp.environment)),
							title: 'Timeflow'
						});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
				function () {
				var _v4 = temp.viewState.devTools;
				if (_v4.$ === 'OpenPanel') {
					var state = _v4.b;
					return $elm$core$Maybe$Just(
						{
							body: A2(
								$rtfeldman$elm_css$Html$Styled$map,
								$author$project$Main$DevToolsMsg,
								A3($author$project$DevTools$view, state, replica, temp.environment)),
							title: 'Dev Tools'
						});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}()
			]));
	var withinPage = $rtfeldman$elm_css$Html$Styled$toUnstyled(
		A3(
			$rtfeldman$elm_css$Html$Styled$node,
			'page',
			_List_Nil,
			A2(
				$elm$core$List$map,
				function ($) {
					return $.body;
				},
				openPanels)));
	var finalTitle = A2(
		$elm$core$String$join,
		'/',
		A2(
			$elm$core$List$map,
			function ($) {
				return $.title;
			},
			openPanels));
	return {
		body: _List_fromArray(
			[
				$author$project$Ion$App$app(
				_List_fromArray(
					[
						A4($author$project$Main$globalLayout, temp.viewState, replica, temp.environment, withinPage)
					]))
			]),
		title: finalTitle
	};
};
var $author$project$Main$main = $author$project$Replicated$Framework$browserApplication(
	{init: $author$project$Main$initGraphical, onUrlChange: $author$project$Main$NewUrl, onUrlRequest: $author$project$Main$Link, portIncomingChanges: $author$project$Main$incomingFramesFromElsewhere, portSetStorage: $author$project$Main$setStorage, replicaCodec: $author$project$Profile$codec, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (userFlags) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (storedRonMaybe) {
					return $elm$json$Json$Decode$succeed(
						{storedRonMaybe: storedRonMaybe, userFlags: userFlags});
				},
				A2(
					$elm$json$Json$Decode$field,
					'storedRonMaybe',
					$elm$json$Json$Decode$oneOf(
						_List_fromArray(
							[
								$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
								A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string)
							]))));
		},
		A2(
			$elm$json$Json$Decode$field,
			'userFlags',
			$elm$json$Json$Decode$null(_Utils_Tuple0))))(0)}});}(this));