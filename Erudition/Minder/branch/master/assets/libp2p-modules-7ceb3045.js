var No=Object.defineProperty;var Mo=(r,e,t)=>e in r?No(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var te=(r,e,t)=>(Mo(r,typeof e!="symbol"?e+"":e,t),t),Lo=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var tt=(r,e,t)=>(Lo(r,e,"read from private field"),t?t.call(r):e.get(r)),hr=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)};import{b as Zs,a as vi,c as Nn,d as dr,e as ur,s as le,f as Ii,i as Zt,C as Vt,m as Pi,g as Uo,h as xo,j as Ko,k as G,W as Fo,l as yt,n as Bo,o as Mn,p as Vo,q as Go,r as $o,P as Ho,t as qo,u as Di,v as zo,w as Wo,x as Yo}from"./ipfs-modules-6140a6e2.js";import{ax as Ae,q as J,b7 as Qo,b8 as Ti,b9 as Xo,ba as jo,n as T,o as ve,bb as Rn,bc as ne,bd as re,be as ie,t as D,bf as V,bg as Ai,bh as Jo,bi as Zo,bj as Oi,bk as Ci,bl as rn,ag as Xe,bm as ea,bn as ta,bo as sa,bp as na,bq as ra,ak as es,a1 as z,aU as Je,aT as lt,aS as Ze,br as ia,P as Nt,bs as vt,bt as me,W as wt,j as f,bu as ki,bv as Ln,bw as Ni,bx as oa,by as aa,bz as pr,a2 as Un,a4 as xn,bA as Os,y as ee,aV as Y,as as Et,aG as Ke,Z as Gt,bB as Mi,bC as fr,a8 as Li,bD as Ui,bE as Sn,bF as ts,bG as ss,bH as ns,bI as vn,bJ as Kn,bK as Fe,bL as en,bM as ca,K as ls,bN as la,bO as ha,bP as da,bQ as ua,bR as pa,bS as fa,bT as Cs,bU as ga,av as ya,bV as ma,b6 as wa,bW as xi,bX as Ea,bY as ba,bZ as _a,z as Mt,b_ as Ra,b$ as Sa,ay as Ki,c0 as rs,a3 as Fi,az as gr,B as va,v as gt,c1 as Ia,c2 as Pa,c3 as Da,c4 as Ta,c5 as Bi,c6 as Aa,c7 as yr,c8 as Oa,c9 as on,ca as ks,cb as mr,cc as Ca,X as U,R as ka,T as Na}from"./other-modules-3990ee0b.js";import{c as Ma,g as La}from"./ionic-modules-23047cf7.js";Ae.formatters.b=r=>r==null?"undefined":Zs.baseEncode(r);Ae.formatters.t=r=>r==null?"undefined":vi.baseEncode(r);Ae.formatters.m=r=>r==null?"undefined":Nn.baseEncode(r);Ae.formatters.p=r=>r==null?"undefined":r.toString();Ae.formatters.c=r=>r==null?"undefined":r.toString();Ae.formatters.k=r=>r==null?"undefined":r.toString();function Ua(r){const e=()=>{};return e.enabled=!1,e.color="",e.diff=0,e.log=()=>{},e.namespace=r,e.destroy=()=>!0,e.extend=()=>e,e}function _(r){let e=Ua(`${r}:trace`);return Ae.enabled(`${r}:trace`)&&Ae.names.map(t=>t.toString()).find(t=>t.includes(":trace"))!=null&&(e=Ae(`${r}:trace`)),Object.assign(Ae(r),{error:Ae(`${r}:error`),trace:e})}const Ot=class Ot extends Error{constructor(t="The operation was aborted"){super(t);te(this,"code");te(this,"type");this.code=Ot.code,this.type=Ot.type}};te(Ot,"code","ABORT_ERR"),te(Ot,"type","aborted");let Ns=Ot;class w extends Error{constructor(t,s,n){super(t);te(this,"code");te(this,"props");this.code=s,this.name=n?.name??"CodeError",this.props=n??{}}}const Vi=Symbol.for("@libp2p/peer-id");function Ms(r){return r!=null&&!!r[Vi]}const xa=Symbol.for("nodejs.util.inspect.custom"),Ka=Object.values(dr).map(r=>r.decoder).reduce((r,e)=>r.or(e),dr.identity.decoder),Gi=114,Fn=36,Bn=37;class Vn{constructor(e){this.type=e.type,this.multihash=e.multihash,this.privateKey=e.privateKey,Object.defineProperty(this,"string",{enumerable:!1,writable:!0})}get[Symbol.toStringTag](){return`PeerId(${this.toString()})`}get[Vi](){return!0}toString(){return this.string==null&&(this.string=Zs.encode(this.multihash.bytes).slice(1)),this.string}toCID(){return Vt.createV1(Gi,this.multihash)}toBytes(){return this.multihash.bytes}toJSON(){return this.toString()}equals(e){if(e instanceof Uint8Array)return J(this.multihash.bytes,e);if(typeof e=="string")return q(e).equals(this);if(e?.multihash?.bytes!=null)return J(this.multihash.bytes,e.multihash.bytes);throw new Error("not valid Id")}[xa](){return`PeerId(${this.toString()})`}}class hs extends Vn{constructor(e){super({...e,type:"RSA"}),this.type="RSA",this.publicKey=e.publicKey}}class ds extends Vn{constructor(e){super({...e,type:"Ed25519"}),this.type="Ed25519",this.publicKey=e.multihash.digest}}class us extends Vn{constructor(e){super({...e,type:"secp256k1"}),this.type="secp256k1",this.publicKey=e.multihash.digest}}function se(r){if(r.type==="RSA")return new hs(r);if(r.type==="Ed25519")return new ds(r);if(r.type==="secp256k1")return new us(r);throw new w("Not a PeerId","ERR_INVALID_PARAMETERS")}function q(r,e){if(r.charAt(0)==="1"||r.charAt(0)==="Q"){const t=Ii(Zs.decode(`z${r}`));return r.startsWith("12D")?new ds({multihash:t}):r.startsWith("16U")?new us({multihash:t}):new hs({multihash:t})}return Ve(Ka.decode(r))}function Ve(r){try{const e=Ii(r);if(e.code===Zt.code){if(e.digest.length===Fn)return new ds({multihash:e});if(e.digest.length===Bn)return new us({multihash:e})}if(e.code===le.code)return new hs({multihash:e})}catch{return Fa(Vt.decode(r))}throw new Error("Supplied PeerID CID is invalid")}function Fa(r){if(r==null||r.multihash==null||r.version==null||r.version===1&&r.code!==Gi)throw new Error("Supplied PeerID CID is invalid");const e=r.multihash;if(e.code===le.code)return new hs({multihash:r.multihash});if(e.code===Zt.code){if(e.digest.length===Fn)return new ds({multihash:r.multihash});if(e.digest.length===Bn)return new us({multihash:r.multihash})}throw new Error("Supplied PeerID CID is invalid")}async function bt(r,e){return r.length===Fn?new ds({multihash:ur(Zt.code,r),privateKey:e}):r.length===Bn?new us({multihash:ur(Zt.code,r),privateKey:e}):new hs({multihash:await le.digest(r),publicKey:r,privateKey:e})}const is=32,it=64,Ls=32;async function Ba(){const r=Qo.randomPrivateKey(),e=await Ti(r);return{privateKey:$i(r,e),publicKey:e}}async function Va(r){if(r.length!==Ls)throw new TypeError('"seed" must be 32 bytes in length.');if(!(r instanceof Uint8Array))throw new TypeError('"seed" must be a node.js Buffer, or Uint8Array.');const e=r,t=await Ti(e);return{privateKey:$i(e,t),publicKey:t}}async function Ga(r,e){const t=r.subarray(0,Ls);return Xo(e,t)}async function $a(r,e,t){return jo(e,t,r)}function $i(r,e){const t=new Uint8Array(it);for(let s=0;s<Ls;s++)t[s]=r[s],t[Ls+s]=e[s];return t}const Be={get(r=globalThis){const e=r.crypto;if(e==null||e.subtle==null)throw Object.assign(new Error("Missing Web Crypto API. The most likely cause of this error is that this page is being accessed from an insecure context (i.e. not HTTPS). For more information and possible resolutions see https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api"),{code:"ERR_MISSING_WEB_CRYPTO"});return e}},an={alg:"A128GCM",ext:!0,k:"scm9jmO_4BJAgdwWGVulLg",key_ops:["encrypt","decrypt"],kty:"oct"};function Hi(r){const e=r?.algorithm??"AES-GCM";let t=r?.keyLength??16;const s=r?.nonceLength??12,n=r?.digest??"SHA-256",i=r?.saltLength??16,o=r?.iterations??32767,a=Be.get();t*=8;async function l(c,d){const p=a.getRandomValues(new Uint8Array(i)),g=a.getRandomValues(new Uint8Array(s)),m={name:e,iv:g};typeof d=="string"&&(d=T(d));let E;if(d.length===0){E=await a.subtle.importKey("jwk",an,{name:"AES-GCM"},!0,["encrypt"]);try{const N={name:"PBKDF2",salt:p,iterations:o,hash:{name:n}},A=await a.subtle.importKey("raw",d,{name:"PBKDF2"},!1,["deriveKey"]);E=await a.subtle.deriveKey(N,A,{name:e,length:t},!0,["encrypt"])}catch{E=await a.subtle.importKey("jwk",an,{name:"AES-GCM"},!0,["encrypt"])}}else{const N={name:"PBKDF2",salt:p,iterations:o,hash:{name:n}},A=await a.subtle.importKey("raw",d,{name:"PBKDF2"},!1,["deriveKey"]);E=await a.subtle.deriveKey(N,A,{name:e,length:t},!0,["encrypt"])}const I=await a.subtle.encrypt(m,E,c);return ve([p,m.iv,new Uint8Array(I)])}async function u(c,d){const p=c.subarray(0,i),g=c.subarray(i,i+s),m=c.subarray(i+s),E={name:e,iv:g};typeof d=="string"&&(d=T(d));let I;if(d.length===0)try{const A={name:"PBKDF2",salt:p,iterations:o,hash:{name:n}},M=await a.subtle.importKey("raw",d,{name:"PBKDF2"},!1,["deriveKey"]);I=await a.subtle.deriveKey(A,M,{name:e,length:t},!0,["decrypt"])}catch{I=await a.subtle.importKey("jwk",an,{name:"AES-GCM"},!0,["decrypt"])}else{const A={name:"PBKDF2",salt:p,iterations:o,hash:{name:n}},M=await a.subtle.importKey("raw",d,{name:"PBKDF2"},!1,["deriveKey"]);I=await a.subtle.deriveKey(A,M,{name:e,length:t},!0,["decrypt"])}const N=await a.subtle.decrypt(E,I,m);return new Uint8Array(N)}return{encrypt:l,decrypt:u}}async function Gn(r,e){const s=await Hi().encrypt(r,e);return Nn.encode(s)}var Z;(function(r){r.RSA="RSA",r.Ed25519="Ed25519",r.Secp256k1="Secp256k1"})(Z||(Z={}));var In;(function(r){r[r.RSA=0]="RSA",r[r.Ed25519=1]="Ed25519",r[r.Secp256k1=2]="Secp256k1"})(In||(In={}));(function(r){r.codec=()=>Rn(In)})(Z||(Z={}));var Lt;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.Type!=null&&(s.uint32(8),Z.codec().encode(t.Type,s)),t.Data!=null&&(s.uint32(18),s.bytes(t.Data)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.Type=Z.codec().decode(t);break;case 2:n.Data=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Lt||(Lt={}));var Ut;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.Type!=null&&(s.uint32(8),Z.codec().encode(t.Type,s)),t.Data!=null&&(s.uint32(18),s.bytes(t.Data)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.Type=Z.codec().decode(t);break;case 2:n.Data=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Ut||(Ut={}));class $n{constructor(e){te(this,"_key");this._key=xt(e,is)}async verify(e,t){return $a(this._key,t,e)}marshal(){return this._key}get bytes(){return Lt.encode({Type:Z.Ed25519,Data:this.marshal()}).subarray()}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}}class os{constructor(e,t){te(this,"_key");te(this,"_publicKey");this._key=xt(e,it),this._publicKey=xt(t,is)}async sign(e){return Ga(this._key,e)}get public(){return new $n(this._publicKey)}marshal(){return this._key}get bytes(){return Ut.encode({Type:Z.Ed25519,Data:this.marshal()}).subarray()}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}async id(){const e=Zt.digest(this.public.bytes);return Zs.encode(e.bytes).substring(1)}async export(e,t="libp2p-key"){if(t==="libp2p-key")return Gn(this.bytes,e);throw new w(`export format '${t}' is not supported`,"ERR_INVALID_EXPORT_FORMAT")}}function Ha(r){if(r.length>it){r=xt(r,it+is);const s=r.subarray(0,it),n=r.subarray(it,r.length);return new os(s,n)}r=xt(r,it);const e=r.subarray(0,it),t=r.subarray(is);return new os(e,t)}function qa(r){return r=xt(r,is),new $n(r)}async function za(){const{privateKey:r,publicKey:e}=await Ba();return new os(r,e)}async function Wa(r){const{privateKey:e,publicKey:t}=await Va(r);return new os(e,t)}function xt(r,e){if(r=Uint8Array.from(r??[]),r.length!==e)throw new w(`Key must be a Uint8Array of length ${e}, got ${r.length}`,"ERR_INVALID_KEY_TYPE");return r}const Ya=Object.freeze(Object.defineProperty({__proto__:null,Ed25519PrivateKey:os,Ed25519PublicKey:$n,generateKeyPair:za,generateKeyPairFromSeed:Wa,unmarshalEd25519PrivateKey:Ha,unmarshalEd25519PublicKey:qa},Symbol.toStringTag,{value:"Module"}));function Le(r,e){let t=Uint8Array.from(r.abs().toByteArray());if(t=t[0]===0?t.subarray(1):t,e!=null){if(t.length>e)throw new Error("byte array longer than desired length");t=ve([new Uint8Array(e-t.length),t])}return D(t,"base64url")}function Te(r){const e=Qa(r);return new V.jsbn.BigInteger(D(e,"base16"),16)}function Qa(r,e){let t=T(r,"base64urlpad");if(e!=null){if(t.length>e)throw new Error("byte array longer than desired length");t=ve([new Uint8Array(e-t.length),t])}return t}const Xa={"P-256":256,"P-384":384,"P-521":521},ja=Object.keys(Xa);ja.join(" / ");async function Ja(r,e){const t=Nn.decode(r);return Hi().decrypt(t,e)}function ps(r){if(isNaN(r)||r<=0)throw new w("random bytes length must be a Number bigger than 0","ERR_INVALID_LENGTH");return Ai.randomBytes(r)}function qi(r,e){return e.map(t=>Te(r[t]))}function Za(r){return V.pki.setRsaPrivateKey(...qi(r,["n","e","d","p","q","dp","dq","qi"]))}function e1(r){return V.pki.setRsaPublicKey(...qi(r,["n","e"]))}function t1(r){const e=V.asn1.fromDer(D(r,"ascii")),t=V.pki.privateKeyFromAsn1(e);return{kty:"RSA",n:Le(t.n),e:Le(t.e),d:Le(t.d),p:Le(t.p),q:Le(t.q),dp:Le(t.dP),dq:Le(t.dQ),qi:Le(t.qInv),alg:"RS256"}}function s1(r){if(r.n==null||r.e==null||r.d==null||r.p==null||r.q==null||r.dp==null||r.dq==null||r.qi==null)throw new w("JWK was missing components","ERR_INVALID_PARAMETERS");const e=V.pki.privateKeyToAsn1({n:Te(r.n),e:Te(r.e),d:Te(r.d),p:Te(r.p),q:Te(r.q),dP:Te(r.dp),dQ:Te(r.dq),qInv:Te(r.qi)});return T(V.asn1.toDer(e).getBytes(),"ascii")}function n1(r){const e=V.asn1.fromDer(D(r,"ascii")),t=V.pki.publicKeyFromAsn1(e);return{kty:"RSA",n:Le(t.n),e:Le(t.e)}}function r1(r){if(r.n==null||r.e==null)throw new w("JWK was missing components","ERR_INVALID_PARAMETERS");const e=V.pki.publicKeyToAsn1({n:Te(r.n),e:Te(r.e)});return T(V.asn1.toDer(e).getBytes(),"ascii")}async function i1(r){const e=await Be.get().subtle.generateKey({name:"RSASSA-PKCS1-v1_5",modulusLength:r,publicExponent:new Uint8Array([1,0,1]),hash:{name:"SHA-256"}},!0,["sign","verify"]),t=await Wi(e);return{privateKey:t[0],publicKey:t[1]}}async function zi(r){const t=[await Be.get().subtle.importKey("jwk",r,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!0,["sign"]),await c1(r)],s=await Wi({privateKey:t[0],publicKey:t[1]});return{privateKey:s[0],publicKey:s[1]}}async function o1(r,e){const t=await Be.get().subtle.importKey("jwk",r,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!1,["sign"]),s=await Be.get().subtle.sign({name:"RSASSA-PKCS1-v1_5"},t,Uint8Array.from(e));return new Uint8Array(s,0,s.byteLength)}async function a1(r,e,t){const s=await Be.get().subtle.importKey("jwk",r,{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!1,["verify"]);return Be.get().subtle.verify({name:"RSASSA-PKCS1-v1_5"},s,e,t)}async function Wi(r){if(r.privateKey==null||r.publicKey==null)throw new w("Private and public key are required","ERR_INVALID_PARAMETERS");return Promise.all([Be.get().subtle.exportKey("jwk",r.privateKey),Be.get().subtle.exportKey("jwk",r.publicKey)])}async function c1(r){return Be.get().subtle.importKey("jwk",{kty:r.kty,n:r.n,e:r.e},{name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},!0,["verify"])}function Yi(r,e,t,s){const n=e?e1(r):Za(r),i=D(Uint8Array.from(t),"ascii"),o=s(i,n);return T(o,"ascii")}function l1(r,e){return Yi(r,!0,e,(t,s)=>s.encrypt(t))}function h1(r,e){return Yi(r,!1,e,(t,s)=>s.decrypt(t))}class Hn{constructor(e){te(this,"_key");this._key=e}async verify(e,t){return a1(this._key,t,e)}marshal(){return r1(this._key)}get bytes(){return Lt.encode({Type:Z.RSA,Data:this.marshal()}).subarray()}encrypt(e){return l1(this._key,e)}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}}class tn{constructor(e,t){te(this,"_key");te(this,"_publicKey");this._key=e,this._publicKey=t}genSecret(){return ps(16)}async sign(e){return o1(this._key,e)}get public(){if(this._publicKey==null)throw new w("public key not provided","ERR_PUBKEY_NOT_PROVIDED");return new Hn(this._publicKey)}decrypt(e){return h1(this._key,e)}marshal(){return s1(this._key)}get bytes(){return Ut.encode({Type:Z.RSA,Data:this.marshal()}).subarray()}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}async id(){const e=await this.public.hash();return D(e,"base58btc")}async export(e,t="pkcs-8"){if(t==="pkcs-8"){const s=new V.util.ByteBuffer(this.marshal()),n=V.asn1.fromDer(s),i=V.pki.privateKeyFromAsn1(n),o={algorithm:"aes256",count:1e4,saltSize:128/8,prfAlgorithm:"sha512"};return V.pki.encryptRsaPrivateKey(i,e,o)}else{if(t==="libp2p-key")return Gn(this.bytes,e);throw new w(`export format '${t}' is not supported`,"ERR_INVALID_EXPORT_FORMAT")}}}async function d1(r){const e=t1(r),t=await zi(e);return new tn(t.privateKey,t.publicKey)}function u1(r){const e=n1(r);return new Hn(e)}async function p1(r){const e=await zi(r);return new tn(e.privateKey,e.publicKey)}async function f1(r){const e=await i1(r);return new tn(e.privateKey,e.publicKey)}const g1=Object.freeze(Object.defineProperty({__proto__:null,RsaPrivateKey:tn,RsaPublicKey:Hn,fromJwk:p1,generateKeyPair:f1,unmarshalRsaPrivateKey:d1,unmarshalRsaPublicKey:u1},Symbol.toStringTag,{value:"Module"}));function y1(){return Ai.randomPrivateKey()}async function m1(r,e){const{digest:t}=await le.digest(e);try{return await Jo(t,r)}catch(s){throw new w(String(s),"ERR_INVALID_INPUT")}}async function w1(r,e,t){try{const{digest:s}=await le.digest(t);return Zo(e,s,r)}catch(s){throw new w(String(s),"ERR_INVALID_INPUT")}}function E1(r){return Oi.fromHex(r).toRawBytes(!0)}function b1(r){try{Ci(r,!0)}catch(e){throw new w(String(e),"ERR_INVALID_PRIVATE_KEY")}}function Qi(r){try{Oi.fromHex(r)}catch(e){throw new w(String(e),"ERR_INVALID_PUBLIC_KEY")}}function _1(r){try{return Ci(r,!0)}catch(e){throw new w(String(e),"ERR_INVALID_PRIVATE_KEY")}}class qn{constructor(e){te(this,"_key");Qi(e),this._key=e}async verify(e,t){return w1(this._key,t,e)}marshal(){return E1(this._key)}get bytes(){return Lt.encode({Type:Z.Secp256k1,Data:this.marshal()}).subarray()}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}}class zn{constructor(e,t){te(this,"_key");te(this,"_publicKey");this._key=e,this._publicKey=t??_1(e),b1(this._key),Qi(this._publicKey)}async sign(e){return m1(this._key,e)}get public(){return new qn(this._publicKey)}marshal(){return this._key}get bytes(){return Ut.encode({Type:Z.Secp256k1,Data:this.marshal()}).subarray()}equals(e){return J(this.bytes,e.bytes)}async hash(){const{bytes:e}=await le.digest(this.bytes);return e}async id(){const e=await this.public.hash();return D(e,"base58btc")}async export(e,t="libp2p-key"){if(t==="libp2p-key")return Gn(this.bytes,e);throw new w(`export format '${t}' is not supported`,"ERR_INVALID_EXPORT_FORMAT")}}function R1(r){return new zn(r)}function S1(r){return new qn(r)}async function v1(){const r=y1();return new zn(r)}const I1=Object.freeze(Object.defineProperty({__proto__:null,Secp256k1PrivateKey:zn,Secp256k1PublicKey:qn,generateKeyPair:v1,unmarshalSecp256k1PrivateKey:R1,unmarshalSecp256k1PublicKey:S1},Symbol.toStringTag,{value:"Module"})),je={rsa:g1,ed25519:Ya,secp256k1:I1};function Wn(r){const e=Object.keys(je).join(" / ");return new w(`invalid or unsupported key type ${r}. Must be ${e}`,"ERR_UNSUPPORTED_KEY_TYPE")}function Yn(r){if(r=r.toLowerCase(),r==="rsa"||r==="ed25519"||r==="secp256k1")return je[r];throw Wn(r)}async function Qn(r,e){return Yn(r).generateKeyPair(e??2048)}function as(r){const e=Lt.decode(r),t=e.Data??new Uint8Array;switch(e.Type){case Z.RSA:return je.rsa.unmarshalRsaPublicKey(t);case Z.Ed25519:return je.ed25519.unmarshalEd25519PublicKey(t);case Z.Secp256k1:return je.secp256k1.unmarshalSecp256k1PublicKey(t);default:throw Wn(e.Type??"RSA")}}function Xn(r,e){return e=(e??"rsa").toLowerCase(),Yn(e),r.bytes}async function fs(r){const e=Ut.decode(r),t=e.Data??new Uint8Array;switch(e.Type){case Z.RSA:return je.rsa.unmarshalRsaPrivateKey(t);case Z.Ed25519:return je.ed25519.unmarshalEd25519PrivateKey(t);case Z.Secp256k1:return je.secp256k1.unmarshalSecp256k1PrivateKey(t);default:throw Wn(e.Type??"RSA")}}function P1(r,e){return e=(e??"rsa").toLowerCase(),Yn(e),r.bytes}async function ws(r,e){try{const n=await Ja(r,e);return await fs(n)}catch{}const t=V.pki.decryptRsaPrivateKey(r,e);if(t===null)throw new w("Cannot read the key, most likely the password is wrong or not a RSA key","ERR_CANNOT_DECRYPT_PEM");let s=V.asn1.toDer(V.pki.privateKeyToAsn1(t));return s=T(s.getBytes(),"ascii"),je.rsa.unmarshalRsaPrivateKey(s)}var Us;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.key!=null&&t.key.byteLength>0&&(s.uint32(10),s.bytes(t.key)),t.value!=null&&t.value.byteLength>0&&(s.uint32(18),s.bytes(t.value)),t.timeReceived!=null&&t.timeReceived!==""&&(s.uint32(42),s.string(t.timeReceived)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={key:new Uint8Array(0),value:new Uint8Array(0),timeReceived:""},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.key=t.bytes();break;case 2:n.value=t.bytes();break;case 5:n.timeReceived=t.string();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Us||(Us={}));function D1(r){const e=r.getUTCFullYear(),t=String(r.getUTCMonth()+1).padStart(2,"0"),s=String(r.getUTCDate()).padStart(2,"0"),n=String(r.getUTCHours()).padStart(2,"0"),i=String(r.getUTCMinutes()).padStart(2,"0"),o=String(r.getUTCSeconds()).padStart(2,"0"),a=r.getUTCMilliseconds(),l=String(a*1e3*1e3).padStart(9,"0");return`${e}-${t}-${s}T${n}:${i}:${o}.${l}Z`}function T1(r){const e=new RegExp("(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d+)Z"),t=String(r).trim().match(e);if(t==null)throw new Error("Invalid format");const s=parseInt(t[1],10),n=parseInt(t[2],10)-1,i=parseInt(t[3],10),o=parseInt(t[4],10),a=parseInt(t[5],10),l=parseInt(t[6],10),u=parseInt(t[7].slice(0,-6),10);return new Date(Date.UTC(s,n,i,o,a,l,u))}class ye{constructor(e,t,s){if(!(e instanceof Uint8Array))throw new Error("key must be a Uint8Array");if(!(t instanceof Uint8Array))throw new Error("value must be a Uint8Array");this.key=e,this.value=t,this.timeReceived=s}serialize(){return Us.encode(this.prepareSerialize())}prepareSerialize(){return{key:this.key,value:this.value,timeReceived:D1(this.timeReceived)}}static deserialize(e){const t=Us.decode(e);return new ye(t.key,t.value,new Date(t.timeReceived))}static fromDeserialized(e){const t=T1(e.timeReceived);if(e.key==null)throw new Error("key missing from deserialized object");if(e.value==null)throw new Error("value missing from deserialized object");return new ye(e.key,e.value,t)}}const A1={ERR_SIGNATURE_NOT_VALID:"ERR_SIGNATURE_NOT_VALID"};var xs;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.publicKey!=null&&t.publicKey.byteLength>0&&(s.uint32(10),s.bytes(t.publicKey)),t.payloadType!=null&&t.payloadType.byteLength>0&&(s.uint32(18),s.bytes(t.payloadType)),t.payload!=null&&t.payload.byteLength>0&&(s.uint32(26),s.bytes(t.payload)),t.signature!=null&&t.signature.byteLength>0&&(s.uint32(42),s.bytes(t.signature)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={publicKey:new Uint8Array(0),payloadType:new Uint8Array(0),payload:new Uint8Array(0),signature:new Uint8Array(0)},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.publicKey=t.bytes();break;case 2:n.payloadType=t.bytes();break;case 3:n.payload=t.bytes();break;case 5:n.signature=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(xs||(xs={}));class we{constructor(e){const{peerId:t,payloadType:s,payload:n,signature:i}=e;this.peerId=t,this.payloadType=s,this.payload=n,this.signature=i}marshal(){if(this.peerId.publicKey==null)throw new Error("Missing public key");return this.marshaled==null&&(this.marshaled=xs.encode({publicKey:this.peerId.publicKey,payloadType:this.payloadType,payload:this.payload.subarray(),signature:this.signature})),this.marshaled}equals(e){return J(this.marshal(),e.marshal())}async validate(e){const t=Xi(e,this.payloadType,this.payload);if(this.peerId.publicKey==null)throw new Error("Missing public key");return await as(this.peerId.publicKey).verify(t.subarray(),this.signature)}}we.createFromProtobuf=async r=>{const e=xs.decode(r),t=await bt(e.publicKey);return new we({peerId:t,payloadType:e.payloadType,payload:e.payload,signature:e.signature})};we.seal=async(r,e)=>{if(e.privateKey==null)throw new Error("Missing private key");const t=r.domain,s=r.codec,n=r.marshal(),i=Xi(t,s,n),a=await(await fs(e.privateKey)).sign(i.subarray());return new we({peerId:e,payloadType:s,payload:n,signature:a})};we.openAndCertify=async(r,e)=>{const t=await we.createFromProtobuf(r);if(!await t.validate(e))throw new w("envelope signature is not valid for the given domain",A1.ERR_SIGNATURE_NOT_VALID);return t};const Xi=(r,e,t)=>{const s=T(r),n=rn.encode(s.byteLength),i=rn.encode(e.length),o=rn.encode(t.length);return new Xe(n,s,i,e,o,t)};function O1(r,e){const t=(s,n)=>s.toString().localeCompare(n.toString());return r.length!==e.length?!1:(e.sort(t),r.sort(t).every((s,n)=>e[n].equals(s)))}var Ks;(function(r){(function(t){let s;t.codec=()=>(s==null&&(s=ne((n,i,o={})=>{o.lengthDelimited!==!1&&i.fork(),n.multiaddr!=null&&n.multiaddr.byteLength>0&&(i.uint32(10),i.bytes(n.multiaddr)),o.lengthDelimited!==!1&&i.ldelim()},(n,i)=>{const o={multiaddr:new Uint8Array(0)},a=i==null?n.len:n.pos+i;for(;n.pos<a;){const l=n.uint32();switch(l>>>3){case 1:o.multiaddr=n.bytes();break;default:n.skipType(l&7);break}}return o})),s),t.encode=n=>re(n,t.codec()),t.decode=n=>ie(n,t.codec())})(r.AddressInfo||(r.AddressInfo={}));let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{if(n.lengthDelimited!==!1&&s.fork(),t.peerId!=null&&t.peerId.byteLength>0&&(s.uint32(10),s.bytes(t.peerId)),t.seq!=null&&t.seq!==0n&&(s.uint32(16),s.uint64(t.seq)),t.addresses!=null)for(const i of t.addresses)s.uint32(26),r.AddressInfo.codec().encode(i,s);n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={peerId:new Uint8Array(0),seq:0n,addresses:[]},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.peerId=t.bytes();break;case 2:n.seq=t.uint64();break;case 3:n.addresses.push(r.AddressInfo.codec().decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Ks||(Ks={}));const C1="libp2p-peer-record",k1=Uint8Array.from([3,1]);class ue{constructor(e){this.domain=ue.DOMAIN,this.codec=ue.CODEC;const{peerId:t,multiaddrs:s,seqNumber:n}=e;this.peerId=t,this.multiaddrs=s??[],this.seqNumber=n??BigInt(Date.now())}marshal(){return this.marshaled==null&&(this.marshaled=Ks.encode({peerId:this.peerId.toBytes(),seq:BigInt(this.seqNumber),addresses:this.multiaddrs.map(e=>({multiaddr:e.bytes}))})),this.marshaled}equals(e){return!(!(e instanceof ue)||!this.peerId.equals(e.peerId)||this.seqNumber!==e.seqNumber||!O1(this.multiaddrs,e.multiaddrs))}}ue.createFromProtobuf=r=>{const e=Ks.decode(r),t=Ve(e.peerId),s=(e.addresses??[]).map(i=>Pi(i.multiaddr)),n=e.seq;return new ue({peerId:t,multiaddrs:s,seqNumber:n})};ue.DOMAIN=C1;ue.CODEC=k1;const Pn=Symbol.for("@libp2p/topology");function N1(r){return r!=null&&!!r[Pn]}const wr=()=>{};class M1{constructor(e){this.min=e.min??0,this.max=e.max??1/0,this.peers=new Set,this.onConnect=e.onConnect??wr,this.onDisconnect=e.onDisconnect??wr}get[Symbol.toStringTag](){return Pn.toString()}get[Pn](){return!0}async setRegistrar(e){this.registrar=e}disconnect(e){this.onDisconnect(e)}}function ji(r){return new M1(r)}var xe;class W extends EventTarget{constructor(){super(...arguments);hr(this,xe,new Map)}listenerCount(t){const s=tt(this,xe).get(t);return s==null?0:s.length}addEventListener(t,s,n){super.addEventListener(t,s,n);let i=tt(this,xe).get(t);i==null&&(i=[],tt(this,xe).set(t,i)),i.push({callback:s,once:(n!==!0&&n!==!1&&n?.once)??!1})}removeEventListener(t,s,n){super.removeEventListener(t.toString(),s??null,n);let i=tt(this,xe).get(t);i!=null&&(i=i.filter(({callback:o})=>o!==s),tt(this,xe).set(t,i))}dispatchEvent(t){const s=super.dispatchEvent(t);let n=tt(this,xe).get(t.type);return n==null||(n=n.filter(({once:i})=>!i),tt(this,xe).set(t.type,n)),s}safeDispatchEvent(t,s){return this.dispatchEvent(new R(t,s))}}xe=new WeakMap;class L1 extends Event{constructor(t,s){super(t,s);te(this,"detail");this.detail=s?.detail}}const R=globalThis.CustomEvent??L1;class U1{constructor(e,t,s){this.gossip=e,this.msgs=new Map,this.history=[],this.notValidatedCount=0,this.msgIdToStrFn=s;for(let n=0;n<t;n++)this.history[n]=[]}get size(){return this.msgs.size}put(e,t,s=!1){const{msgIdStr:n}=e;return this.msgs.has(n)?!1:(this.msgs.set(n,{message:t,validated:s,originatingPeers:new Set,iwantCounts:new Map}),this.history[0].push({...e,topic:t.topic}),s||this.notValidatedCount++,!0)}observeDuplicate(e,t){const s=this.msgs.get(e);s&&!s.validated&&s.originatingPeers.add(t)}get(e){return this.msgs.get(this.msgIdToStrFn(e))?.message}getWithIWantCount(e,t){const s=this.msgs.get(e);if(!s)return null;const n=(s.iwantCounts.get(t)??0)+1;return s.iwantCounts.set(t,n),{msg:s.message,count:n}}getGossipIDs(e){const t=new Map;for(let s=0;s<this.gossip;s++)this.history[s].forEach(n=>{const i=this.msgs.get(n.msgIdStr);if(i&&i.validated&&e.has(n.topic)){let o=t.get(n.topic);o||(o=[],t.set(n.topic,o)),o.push(n.msgId)}});return t}validate(e){const t=this.msgs.get(e);if(!t)return null;t.validated||this.notValidatedCount--;const{message:s,originatingPeers:n}=t;return t.validated=!0,t.originatingPeers=new Set,{message:s,originatingPeers:n}}shift(){this.history[this.history.length-1].forEach(t=>{const s=this.msgs.get(t.msgIdStr);s&&(this.msgs.delete(t.msgIdStr),s.validated||this.notValidatedCount--)}),this.history.pop(),this.history.unshift([])}remove(e){const t=this.msgs.get(e);return t?(this.msgs.delete(e),t):null}}var Ji={exports:{}};(function(r){(function(e,t){typeof Uo=="function"&&r&&r.exports&&(r.exports=t(ea()))})(Ma,function(e){var t=e.Reader,s=e.Writer,n=e.util,i=e.roots.default||(e.roots.default={});return i.RPC=function(){function o(l){if(this.subscriptions=[],this.messages=[],l)for(var u=Object.keys(l),h=0;h<u.length;++h)l[u[h]]!=null&&(this[u[h]]=l[u[h]])}o.prototype.subscriptions=n.emptyArray,o.prototype.messages=n.emptyArray,o.prototype.control=null;var a;return Object.defineProperty(o.prototype,"_control",{get:n.oneOfGetter(a=["control"]),set:n.oneOfSetter(a)}),o.encode=function(u,h){if(h||(h=s.create()),u.subscriptions!=null&&u.subscriptions.length)for(var c=0;c<u.subscriptions.length;++c)i.RPC.SubOpts.encode(u.subscriptions[c],h.uint32(10).fork()).ldelim();if(u.messages!=null&&u.messages.length)for(var c=0;c<u.messages.length;++c)i.RPC.Message.encode(u.messages[c],h.uint32(18).fork()).ldelim();return u.control!=null&&Object.hasOwnProperty.call(u,"control")&&i.RPC.ControlMessage.encode(u.control,h.uint32(26).fork()).ldelim(),h},o.decode=function(u,h){u instanceof t||(u=t.create(u));for(var c=h===void 0?u.len:u.pos+h,d=new i.RPC;u.pos<c;){var p=u.uint32();switch(p>>>3){case 1:d.subscriptions&&d.subscriptions.length||(d.subscriptions=[]),d.subscriptions.push(i.RPC.SubOpts.decode(u,u.uint32()));break;case 2:d.messages&&d.messages.length||(d.messages=[]),d.messages.push(i.RPC.Message.decode(u,u.uint32()));break;case 3:d.control=i.RPC.ControlMessage.decode(u,u.uint32());break;default:u.skipType(p&7);break}}return d},o.fromObject=function(u){if(u instanceof i.RPC)return u;var h=new i.RPC;if(u.subscriptions){if(!Array.isArray(u.subscriptions))throw TypeError(".RPC.subscriptions: array expected");h.subscriptions=[];for(var c=0;c<u.subscriptions.length;++c){if(typeof u.subscriptions[c]!="object")throw TypeError(".RPC.subscriptions: object expected");h.subscriptions[c]=i.RPC.SubOpts.fromObject(u.subscriptions[c])}}if(u.messages){if(!Array.isArray(u.messages))throw TypeError(".RPC.messages: array expected");h.messages=[];for(var c=0;c<u.messages.length;++c){if(typeof u.messages[c]!="object")throw TypeError(".RPC.messages: object expected");h.messages[c]=i.RPC.Message.fromObject(u.messages[c])}}if(u.control!=null){if(typeof u.control!="object")throw TypeError(".RPC.control: object expected");h.control=i.RPC.ControlMessage.fromObject(u.control)}return h},o.toObject=function(u,h){h||(h={});var c={};if((h.arrays||h.defaults)&&(c.subscriptions=[],c.messages=[]),u.subscriptions&&u.subscriptions.length){c.subscriptions=[];for(var d=0;d<u.subscriptions.length;++d)c.subscriptions[d]=i.RPC.SubOpts.toObject(u.subscriptions[d],h)}if(u.messages&&u.messages.length){c.messages=[];for(var d=0;d<u.messages.length;++d)c.messages[d]=i.RPC.Message.toObject(u.messages[d],h)}return u.control!=null&&u.hasOwnProperty("control")&&(c.control=i.RPC.ControlMessage.toObject(u.control,h),h.oneofs&&(c._control="control")),c},o.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},o.SubOpts=function(){function l(h){if(h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.subscribe=null,l.prototype.topic=null;var u;return Object.defineProperty(l.prototype,"_subscribe",{get:n.oneOfGetter(u=["subscribe"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_topic",{get:n.oneOfGetter(u=["topic"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){return d||(d=s.create()),c.subscribe!=null&&Object.hasOwnProperty.call(c,"subscribe")&&d.uint32(8).bool(c.subscribe),c.topic!=null&&Object.hasOwnProperty.call(c,"topic")&&d.uint32(18).string(c.topic),d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.SubOpts;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.subscribe=c.bool();break;case 2:g.topic=c.string();break;default:c.skipType(m&7);break}}return g},l.fromObject=function(c){if(c instanceof i.RPC.SubOpts)return c;var d=new i.RPC.SubOpts;return c.subscribe!=null&&(d.subscribe=!!c.subscribe),c.topic!=null&&(d.topic=String(c.topic)),d},l.toObject=function(c,d){d||(d={});var p={};return c.subscribe!=null&&c.hasOwnProperty("subscribe")&&(p.subscribe=c.subscribe,d.oneofs&&(p._subscribe="subscribe")),c.topic!=null&&c.hasOwnProperty("topic")&&(p.topic=c.topic,d.oneofs&&(p._topic="topic")),p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.Message=function(){function l(h){if(h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.from=null,l.prototype.data=null,l.prototype.seqno=null,l.prototype.topic="",l.prototype.signature=null,l.prototype.key=null;var u;return Object.defineProperty(l.prototype,"_from",{get:n.oneOfGetter(u=["from"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_data",{get:n.oneOfGetter(u=["data"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_seqno",{get:n.oneOfGetter(u=["seqno"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_signature",{get:n.oneOfGetter(u=["signature"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_key",{get:n.oneOfGetter(u=["key"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){return d||(d=s.create()),c.from!=null&&Object.hasOwnProperty.call(c,"from")&&d.uint32(10).bytes(c.from),c.data!=null&&Object.hasOwnProperty.call(c,"data")&&d.uint32(18).bytes(c.data),c.seqno!=null&&Object.hasOwnProperty.call(c,"seqno")&&d.uint32(26).bytes(c.seqno),d.uint32(34).string(c.topic),c.signature!=null&&Object.hasOwnProperty.call(c,"signature")&&d.uint32(42).bytes(c.signature),c.key!=null&&Object.hasOwnProperty.call(c,"key")&&d.uint32(50).bytes(c.key),d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.Message;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.from=c.bytes();break;case 2:g.data=c.bytes();break;case 3:g.seqno=c.bytes();break;case 4:g.topic=c.string();break;case 5:g.signature=c.bytes();break;case 6:g.key=c.bytes();break;default:c.skipType(m&7);break}}if(!g.hasOwnProperty("topic"))throw n.ProtocolError("missing required 'topic'",{instance:g});return g},l.fromObject=function(c){if(c instanceof i.RPC.Message)return c;var d=new i.RPC.Message;return c.from!=null&&(typeof c.from=="string"?n.base64.decode(c.from,d.from=n.newBuffer(n.base64.length(c.from)),0):c.from.length&&(d.from=c.from)),c.data!=null&&(typeof c.data=="string"?n.base64.decode(c.data,d.data=n.newBuffer(n.base64.length(c.data)),0):c.data.length&&(d.data=c.data)),c.seqno!=null&&(typeof c.seqno=="string"?n.base64.decode(c.seqno,d.seqno=n.newBuffer(n.base64.length(c.seqno)),0):c.seqno.length&&(d.seqno=c.seqno)),c.topic!=null&&(d.topic=String(c.topic)),c.signature!=null&&(typeof c.signature=="string"?n.base64.decode(c.signature,d.signature=n.newBuffer(n.base64.length(c.signature)),0):c.signature.length&&(d.signature=c.signature)),c.key!=null&&(typeof c.key=="string"?n.base64.decode(c.key,d.key=n.newBuffer(n.base64.length(c.key)),0):c.key.length&&(d.key=c.key)),d},l.toObject=function(c,d){d||(d={});var p={};return d.defaults&&(p.topic=""),c.from!=null&&c.hasOwnProperty("from")&&(p.from=d.bytes===String?n.base64.encode(c.from,0,c.from.length):d.bytes===Array?Array.prototype.slice.call(c.from):c.from,d.oneofs&&(p._from="from")),c.data!=null&&c.hasOwnProperty("data")&&(p.data=d.bytes===String?n.base64.encode(c.data,0,c.data.length):d.bytes===Array?Array.prototype.slice.call(c.data):c.data,d.oneofs&&(p._data="data")),c.seqno!=null&&c.hasOwnProperty("seqno")&&(p.seqno=d.bytes===String?n.base64.encode(c.seqno,0,c.seqno.length):d.bytes===Array?Array.prototype.slice.call(c.seqno):c.seqno,d.oneofs&&(p._seqno="seqno")),c.topic!=null&&c.hasOwnProperty("topic")&&(p.topic=c.topic),c.signature!=null&&c.hasOwnProperty("signature")&&(p.signature=d.bytes===String?n.base64.encode(c.signature,0,c.signature.length):d.bytes===Array?Array.prototype.slice.call(c.signature):c.signature,d.oneofs&&(p._signature="signature")),c.key!=null&&c.hasOwnProperty("key")&&(p.key=d.bytes===String?n.base64.encode(c.key,0,c.key.length):d.bytes===Array?Array.prototype.slice.call(c.key):c.key,d.oneofs&&(p._key="key")),p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.ControlMessage=function(){function l(u){if(this.ihave=[],this.iwant=[],this.graft=[],this.prune=[],u)for(var h=Object.keys(u),c=0;c<h.length;++c)u[h[c]]!=null&&(this[h[c]]=u[h[c]])}return l.prototype.ihave=n.emptyArray,l.prototype.iwant=n.emptyArray,l.prototype.graft=n.emptyArray,l.prototype.prune=n.emptyArray,l.encode=function(h,c){if(c||(c=s.create()),h.ihave!=null&&h.ihave.length)for(var d=0;d<h.ihave.length;++d)i.RPC.ControlIHave.encode(h.ihave[d],c.uint32(10).fork()).ldelim();if(h.iwant!=null&&h.iwant.length)for(var d=0;d<h.iwant.length;++d)i.RPC.ControlIWant.encode(h.iwant[d],c.uint32(18).fork()).ldelim();if(h.graft!=null&&h.graft.length)for(var d=0;d<h.graft.length;++d)i.RPC.ControlGraft.encode(h.graft[d],c.uint32(26).fork()).ldelim();if(h.prune!=null&&h.prune.length)for(var d=0;d<h.prune.length;++d)i.RPC.ControlPrune.encode(h.prune[d],c.uint32(34).fork()).ldelim();return c},l.decode=function(h,c){h instanceof t||(h=t.create(h));for(var d=c===void 0?h.len:h.pos+c,p=new i.RPC.ControlMessage;h.pos<d;){var g=h.uint32();switch(g>>>3){case 1:p.ihave&&p.ihave.length||(p.ihave=[]),p.ihave.push(i.RPC.ControlIHave.decode(h,h.uint32()));break;case 2:p.iwant&&p.iwant.length||(p.iwant=[]),p.iwant.push(i.RPC.ControlIWant.decode(h,h.uint32()));break;case 3:p.graft&&p.graft.length||(p.graft=[]),p.graft.push(i.RPC.ControlGraft.decode(h,h.uint32()));break;case 4:p.prune&&p.prune.length||(p.prune=[]),p.prune.push(i.RPC.ControlPrune.decode(h,h.uint32()));break;default:h.skipType(g&7);break}}return p},l.fromObject=function(h){if(h instanceof i.RPC.ControlMessage)return h;var c=new i.RPC.ControlMessage;if(h.ihave){if(!Array.isArray(h.ihave))throw TypeError(".RPC.ControlMessage.ihave: array expected");c.ihave=[];for(var d=0;d<h.ihave.length;++d){if(typeof h.ihave[d]!="object")throw TypeError(".RPC.ControlMessage.ihave: object expected");c.ihave[d]=i.RPC.ControlIHave.fromObject(h.ihave[d])}}if(h.iwant){if(!Array.isArray(h.iwant))throw TypeError(".RPC.ControlMessage.iwant: array expected");c.iwant=[];for(var d=0;d<h.iwant.length;++d){if(typeof h.iwant[d]!="object")throw TypeError(".RPC.ControlMessage.iwant: object expected");c.iwant[d]=i.RPC.ControlIWant.fromObject(h.iwant[d])}}if(h.graft){if(!Array.isArray(h.graft))throw TypeError(".RPC.ControlMessage.graft: array expected");c.graft=[];for(var d=0;d<h.graft.length;++d){if(typeof h.graft[d]!="object")throw TypeError(".RPC.ControlMessage.graft: object expected");c.graft[d]=i.RPC.ControlGraft.fromObject(h.graft[d])}}if(h.prune){if(!Array.isArray(h.prune))throw TypeError(".RPC.ControlMessage.prune: array expected");c.prune=[];for(var d=0;d<h.prune.length;++d){if(typeof h.prune[d]!="object")throw TypeError(".RPC.ControlMessage.prune: object expected");c.prune[d]=i.RPC.ControlPrune.fromObject(h.prune[d])}}return c},l.toObject=function(h,c){c||(c={});var d={};if((c.arrays||c.defaults)&&(d.ihave=[],d.iwant=[],d.graft=[],d.prune=[]),h.ihave&&h.ihave.length){d.ihave=[];for(var p=0;p<h.ihave.length;++p)d.ihave[p]=i.RPC.ControlIHave.toObject(h.ihave[p],c)}if(h.iwant&&h.iwant.length){d.iwant=[];for(var p=0;p<h.iwant.length;++p)d.iwant[p]=i.RPC.ControlIWant.toObject(h.iwant[p],c)}if(h.graft&&h.graft.length){d.graft=[];for(var p=0;p<h.graft.length;++p)d.graft[p]=i.RPC.ControlGraft.toObject(h.graft[p],c)}if(h.prune&&h.prune.length){d.prune=[];for(var p=0;p<h.prune.length;++p)d.prune[p]=i.RPC.ControlPrune.toObject(h.prune[p],c)}return d},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.ControlIHave=function(){function l(h){if(this.messageIDs=[],h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.topicID=null,l.prototype.messageIDs=n.emptyArray;var u;return Object.defineProperty(l.prototype,"_topicID",{get:n.oneOfGetter(u=["topicID"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){if(d||(d=s.create()),c.topicID!=null&&Object.hasOwnProperty.call(c,"topicID")&&d.uint32(10).string(c.topicID),c.messageIDs!=null&&c.messageIDs.length)for(var p=0;p<c.messageIDs.length;++p)d.uint32(18).bytes(c.messageIDs[p]);return d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.ControlIHave;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.topicID=c.string();break;case 2:g.messageIDs&&g.messageIDs.length||(g.messageIDs=[]),g.messageIDs.push(c.bytes());break;default:c.skipType(m&7);break}}return g},l.fromObject=function(c){if(c instanceof i.RPC.ControlIHave)return c;var d=new i.RPC.ControlIHave;if(c.topicID!=null&&(d.topicID=String(c.topicID)),c.messageIDs){if(!Array.isArray(c.messageIDs))throw TypeError(".RPC.ControlIHave.messageIDs: array expected");d.messageIDs=[];for(var p=0;p<c.messageIDs.length;++p)typeof c.messageIDs[p]=="string"?n.base64.decode(c.messageIDs[p],d.messageIDs[p]=n.newBuffer(n.base64.length(c.messageIDs[p])),0):c.messageIDs[p].length&&(d.messageIDs[p]=c.messageIDs[p])}return d},l.toObject=function(c,d){d||(d={});var p={};if((d.arrays||d.defaults)&&(p.messageIDs=[]),c.topicID!=null&&c.hasOwnProperty("topicID")&&(p.topicID=c.topicID,d.oneofs&&(p._topicID="topicID")),c.messageIDs&&c.messageIDs.length){p.messageIDs=[];for(var g=0;g<c.messageIDs.length;++g)p.messageIDs[g]=d.bytes===String?n.base64.encode(c.messageIDs[g],0,c.messageIDs[g].length):d.bytes===Array?Array.prototype.slice.call(c.messageIDs[g]):c.messageIDs[g]}return p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.ControlIWant=function(){function l(u){if(this.messageIDs=[],u)for(var h=Object.keys(u),c=0;c<h.length;++c)u[h[c]]!=null&&(this[h[c]]=u[h[c]])}return l.prototype.messageIDs=n.emptyArray,l.encode=function(h,c){if(c||(c=s.create()),h.messageIDs!=null&&h.messageIDs.length)for(var d=0;d<h.messageIDs.length;++d)c.uint32(10).bytes(h.messageIDs[d]);return c},l.decode=function(h,c){h instanceof t||(h=t.create(h));for(var d=c===void 0?h.len:h.pos+c,p=new i.RPC.ControlIWant;h.pos<d;){var g=h.uint32();switch(g>>>3){case 1:p.messageIDs&&p.messageIDs.length||(p.messageIDs=[]),p.messageIDs.push(h.bytes());break;default:h.skipType(g&7);break}}return p},l.fromObject=function(h){if(h instanceof i.RPC.ControlIWant)return h;var c=new i.RPC.ControlIWant;if(h.messageIDs){if(!Array.isArray(h.messageIDs))throw TypeError(".RPC.ControlIWant.messageIDs: array expected");c.messageIDs=[];for(var d=0;d<h.messageIDs.length;++d)typeof h.messageIDs[d]=="string"?n.base64.decode(h.messageIDs[d],c.messageIDs[d]=n.newBuffer(n.base64.length(h.messageIDs[d])),0):h.messageIDs[d].length&&(c.messageIDs[d]=h.messageIDs[d])}return c},l.toObject=function(h,c){c||(c={});var d={};if((c.arrays||c.defaults)&&(d.messageIDs=[]),h.messageIDs&&h.messageIDs.length){d.messageIDs=[];for(var p=0;p<h.messageIDs.length;++p)d.messageIDs[p]=c.bytes===String?n.base64.encode(h.messageIDs[p],0,h.messageIDs[p].length):c.bytes===Array?Array.prototype.slice.call(h.messageIDs[p]):h.messageIDs[p]}return d},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.ControlGraft=function(){function l(h){if(h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.topicID=null;var u;return Object.defineProperty(l.prototype,"_topicID",{get:n.oneOfGetter(u=["topicID"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){return d||(d=s.create()),c.topicID!=null&&Object.hasOwnProperty.call(c,"topicID")&&d.uint32(10).string(c.topicID),d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.ControlGraft;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.topicID=c.string();break;default:c.skipType(m&7);break}}return g},l.fromObject=function(c){if(c instanceof i.RPC.ControlGraft)return c;var d=new i.RPC.ControlGraft;return c.topicID!=null&&(d.topicID=String(c.topicID)),d},l.toObject=function(c,d){d||(d={});var p={};return c.topicID!=null&&c.hasOwnProperty("topicID")&&(p.topicID=c.topicID,d.oneofs&&(p._topicID="topicID")),p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.ControlPrune=function(){function l(h){if(this.peers=[],h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.topicID=null,l.prototype.peers=n.emptyArray,l.prototype.backoff=null;var u;return Object.defineProperty(l.prototype,"_topicID",{get:n.oneOfGetter(u=["topicID"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_backoff",{get:n.oneOfGetter(u=["backoff"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){if(d||(d=s.create()),c.topicID!=null&&Object.hasOwnProperty.call(c,"topicID")&&d.uint32(10).string(c.topicID),c.peers!=null&&c.peers.length)for(var p=0;p<c.peers.length;++p)i.RPC.PeerInfo.encode(c.peers[p],d.uint32(18).fork()).ldelim();return c.backoff!=null&&Object.hasOwnProperty.call(c,"backoff")&&d.uint32(24).uint64(c.backoff),d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.ControlPrune;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.topicID=c.string();break;case 2:g.peers&&g.peers.length||(g.peers=[]),g.peers.push(i.RPC.PeerInfo.decode(c,c.uint32()));break;case 3:g.backoff=c.uint64();break;default:c.skipType(m&7);break}}return g},l.fromObject=function(c){if(c instanceof i.RPC.ControlPrune)return c;var d=new i.RPC.ControlPrune;if(c.topicID!=null&&(d.topicID=String(c.topicID)),c.peers){if(!Array.isArray(c.peers))throw TypeError(".RPC.ControlPrune.peers: array expected");d.peers=[];for(var p=0;p<c.peers.length;++p){if(typeof c.peers[p]!="object")throw TypeError(".RPC.ControlPrune.peers: object expected");d.peers[p]=i.RPC.PeerInfo.fromObject(c.peers[p])}}return c.backoff!=null&&(n.Long?(d.backoff=n.Long.fromValue(c.backoff)).unsigned=!0:typeof c.backoff=="string"?d.backoff=parseInt(c.backoff,10):typeof c.backoff=="number"?d.backoff=c.backoff:typeof c.backoff=="object"&&(d.backoff=new n.LongBits(c.backoff.low>>>0,c.backoff.high>>>0).toNumber(!0))),d},l.toObject=function(c,d){d||(d={});var p={};if((d.arrays||d.defaults)&&(p.peers=[]),c.topicID!=null&&c.hasOwnProperty("topicID")&&(p.topicID=c.topicID,d.oneofs&&(p._topicID="topicID")),c.peers&&c.peers.length){p.peers=[];for(var g=0;g<c.peers.length;++g)p.peers[g]=i.RPC.PeerInfo.toObject(c.peers[g],d)}return c.backoff!=null&&c.hasOwnProperty("backoff")&&(typeof c.backoff=="number"?p.backoff=d.longs===String?String(c.backoff):c.backoff:p.backoff=d.longs===String?n.Long.prototype.toString.call(c.backoff):d.longs===Number?new n.LongBits(c.backoff.low>>>0,c.backoff.high>>>0).toNumber(!0):c.backoff,d.oneofs&&(p._backoff="backoff")),p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o.PeerInfo=function(){function l(h){if(h)for(var c=Object.keys(h),d=0;d<c.length;++d)h[c[d]]!=null&&(this[c[d]]=h[c[d]])}l.prototype.peerID=null,l.prototype.signedPeerRecord=null;var u;return Object.defineProperty(l.prototype,"_peerID",{get:n.oneOfGetter(u=["peerID"]),set:n.oneOfSetter(u)}),Object.defineProperty(l.prototype,"_signedPeerRecord",{get:n.oneOfGetter(u=["signedPeerRecord"]),set:n.oneOfSetter(u)}),l.encode=function(c,d){return d||(d=s.create()),c.peerID!=null&&Object.hasOwnProperty.call(c,"peerID")&&d.uint32(10).bytes(c.peerID),c.signedPeerRecord!=null&&Object.hasOwnProperty.call(c,"signedPeerRecord")&&d.uint32(18).bytes(c.signedPeerRecord),d},l.decode=function(c,d){c instanceof t||(c=t.create(c));for(var p=d===void 0?c.len:c.pos+d,g=new i.RPC.PeerInfo;c.pos<p;){var m=c.uint32();switch(m>>>3){case 1:g.peerID=c.bytes();break;case 2:g.signedPeerRecord=c.bytes();break;default:c.skipType(m&7);break}}return g},l.fromObject=function(c){if(c instanceof i.RPC.PeerInfo)return c;var d=new i.RPC.PeerInfo;return c.peerID!=null&&(typeof c.peerID=="string"?n.base64.decode(c.peerID,d.peerID=n.newBuffer(n.base64.length(c.peerID)),0):c.peerID.length&&(d.peerID=c.peerID)),c.signedPeerRecord!=null&&(typeof c.signedPeerRecord=="string"?n.base64.decode(c.signedPeerRecord,d.signedPeerRecord=n.newBuffer(n.base64.length(c.signedPeerRecord)),0):c.signedPeerRecord.length&&(d.signedPeerRecord=c.signedPeerRecord)),d},l.toObject=function(c,d){d||(d={});var p={};return c.peerID!=null&&c.hasOwnProperty("peerID")&&(p.peerID=d.bytes===String?n.base64.encode(c.peerID,0,c.peerID.length):d.bytes===Array?Array.prototype.slice.call(c.peerID):c.peerID,d.oneofs&&(p._peerID="peerID")),c.signedPeerRecord!=null&&c.hasOwnProperty("signedPeerRecord")&&(p.signedPeerRecord=d.bytes===String?n.base64.encode(c.signedPeerRecord,0,c.signedPeerRecord.length):d.bytes===Array?Array.prototype.slice.call(c.signedPeerRecord):c.signedPeerRecord,d.oneofs&&(p._signedPeerRecord="signedPeerRecord")),p},l.prototype.toJSON=function(){return this.constructor.toObject(this,e.util.toJSONOptions)},l}(),o}(),i})})(Ji);var x1=Ji.exports;const K1=La(x1),{RPC:jn}=K1,gs=1e3,Jn=60*gs,Er="/floodsub/1.0.0",br="/meshsub/1.0.0",Zi="/meshsub/1.1.0",F1=6,B1=4,V1=12,G1=4,$1=2,H1=5,q1=3,z1=6,W1=.25,Y1=3,_r=100,Q1=gs,X1=Jn,j1=16,J1=Jn,Z1=15,ec=300,tc=gs,sc=60,nc=2,rc=10*gs,_t=5e3,ic=10,oc=3*gs,ac=2*Jn,cc=120*1e3,lc="ERR_TOPIC_VALIDATOR_REJECT",hc="ERR_TOPIC_VALIDATOR_IGNORE",dc=0,uc=128,pc=1e3,fc=1e3;function Ge(r){if(r.length<=1)return r;const e=()=>Math.floor(Math.random()*Math.floor(r.length));for(let t=0;t<r.length;t++){const s=e(),n=r[t];r[t]=r[s],r[s]=n}return r}function gc(r){return D(r,"base64")}const Fs="StrictSign",Zn="StrictNoSign";var Ye;(function(r){r.Accept="accept",r.Ignore="ignore",r.Reject="reject"})(Ye||(Ye={}));var Rr;(function(r){r.StrictSign="StrictSign",r.StrictNoSign="StrictNoSign"})(Rr||(Rr={}));var Kt;(function(r){r[r.Signing=0]="Signing",r[r.Anonymous=1]="Anonymous"})(Kt||(Kt={}));var Oe;(function(r){r.Error="error",r.Ignore="ignore",r.Reject="reject",r.Blacklisted="blacklisted"})(Oe||(Oe={}));var he;(function(r){r.InvalidSignature="invalid_signature",r.InvalidSeqno="invalid_seqno",r.InvalidPeerId="invalid_peerid",r.SignaturePresent="signature_present",r.SeqnoPresent="seqno_present",r.FromPresent="from_present",r.TransformFailed="transform_failed"})(he||(he={}));var De;(function(r){r.duplicate="duplicate",r.invalid="invalid",r.valid="valid"})(De||(De={}));function Sr(r){switch(r){case Ye.Ignore:return Oe.Ignore;case Ye.Reject:return Oe.Reject}}async function yc(r,e){switch(r){case Fs:{if(!e)throw Error("Must provide PeerId");if(e.privateKey==null)throw Error("Cannot sign message, no private key present");if(e.publicKey==null)throw Error("Cannot sign message, no public key present");const t=await fs(e.privateKey);return{type:Kt.Signing,author:e,key:e.publicKey,privateKey:t}}case Zn:return{type:Kt.Anonymous};default:throw new Error(`Unknown signature policy "${r}"`)}}const B="ERR_INVALID_PEER_SCORE_PARAMS",mc={topics:{},topicScoreCap:10,appSpecificScore:()=>0,appSpecificWeight:10,IPColocationFactorWeight:-5,IPColocationFactorThreshold:10,IPColocationFactorWhitelist:new Set,behaviourPenaltyWeight:-10,behaviourPenaltyThreshold:0,behaviourPenaltyDecay:.2,decayInterval:1e3,decayToZero:.1,retainScore:3600*1e3},wc={topicWeight:.5,timeInMeshWeight:1,timeInMeshQuantum:1,timeInMeshCap:3600,firstMessageDeliveriesWeight:1,firstMessageDeliveriesDecay:.5,firstMessageDeliveriesCap:2e3,meshMessageDeliveriesWeight:-1,meshMessageDeliveriesDecay:.5,meshMessageDeliveriesCap:100,meshMessageDeliveriesThreshold:20,meshMessageDeliveriesWindow:10,meshMessageDeliveriesActivation:5e3,meshFailurePenaltyWeight:-1,meshFailurePenaltyDecay:.5,invalidMessageDeliveriesWeight:-1,invalidMessageDeliveriesDecay:.3};function Ec(r={}){return{...mc,...r,topics:r.topics?Object.entries(r.topics).reduce((e,[t,s])=>(e[t]=bc(s),e),{}):{}}}function bc(r={}){return{...wc,...r}}function _c(r){for(const[e,t]of Object.entries(r.topics))try{Rc(t)}catch(s){throw new w(`invalid score parameters for topic ${e}: ${s.message}`,B)}if(r.topicScoreCap<0)throw new w("invalid topic score cap; must be positive (or 0 for no cap)",B);if(r.appSpecificScore===null||r.appSpecificScore===void 0)throw new w("missing application specific score function",B);if(r.IPColocationFactorWeight>0)throw new w("invalid IPColocationFactorWeight; must be negative (or 0 to disable)",B);if(r.IPColocationFactorWeight!==0&&r.IPColocationFactorThreshold<1)throw new w("invalid IPColocationFactorThreshold; must be at least 1",B);if(r.behaviourPenaltyWeight>0)throw new w("invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)",B);if(r.behaviourPenaltyWeight!==0&&(r.behaviourPenaltyDecay<=0||r.behaviourPenaltyDecay>=1))throw new w("invalid BehaviourPenaltyDecay; must be between 0 and 1",B);if(r.decayInterval<1e3)throw new w("invalid DecayInterval; must be at least 1s",B);if(r.decayToZero<=0||r.decayToZero>=1)throw new w("invalid DecayToZero; must be between 0 and 1",B)}function Rc(r){if(r.topicWeight<0)throw new w("invalid topic weight; must be >= 0",B);if(r.timeInMeshQuantum===0)throw new w("invalid TimeInMeshQuantum; must be non zero",B);if(r.timeInMeshWeight<0)throw new w("invalid TimeInMeshWeight; must be positive (or 0 to disable)",B);if(r.timeInMeshWeight!==0&&r.timeInMeshQuantum<=0)throw new w("invalid TimeInMeshQuantum; must be positive",B);if(r.timeInMeshWeight!==0&&r.timeInMeshCap<=0)throw new w("invalid TimeInMeshCap; must be positive",B);if(r.firstMessageDeliveriesWeight<0)throw new w("invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)",B);if(r.firstMessageDeliveriesWeight!==0&&(r.firstMessageDeliveriesDecay<=0||r.firstMessageDeliveriesDecay>=1))throw new w("invalid FirstMessageDeliveriesDecay; must be between 0 and 1",B);if(r.firstMessageDeliveriesWeight!==0&&r.firstMessageDeliveriesCap<=0)throw new w("invalid FirstMessageDeliveriesCap; must be positive",B);if(r.meshMessageDeliveriesWeight>0)throw new w("invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)",B);if(r.meshMessageDeliveriesWeight!==0&&(r.meshMessageDeliveriesDecay<=0||r.meshMessageDeliveriesDecay>=1))throw new w("invalid MeshMessageDeliveriesDecay; must be between 0 and 1",B);if(r.meshMessageDeliveriesWeight!==0&&r.meshMessageDeliveriesCap<=0)throw new w("invalid MeshMessageDeliveriesCap; must be positive",B);if(r.meshMessageDeliveriesWeight!==0&&r.meshMessageDeliveriesThreshold<=0)throw new w("invalid MeshMessageDeliveriesThreshold; must be positive",B);if(r.meshMessageDeliveriesWindow<0)throw new w("invalid MeshMessageDeliveriesWindow; must be non-negative",B);if(r.meshMessageDeliveriesWeight!==0&&r.meshMessageDeliveriesActivation<1e3)throw new w("invalid MeshMessageDeliveriesActivation; must be at least 1s",B);if(r.meshFailurePenaltyWeight>0)throw new w("invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)",B);if(r.meshFailurePenaltyWeight!==0&&(r.meshFailurePenaltyDecay<=0||r.meshFailurePenaltyDecay>=1))throw new w("invalid MeshFailurePenaltyDecay; must be between 0 and 1",B);if(r.invalidMessageDeliveriesWeight>0)throw new w("invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)",B);if(r.invalidMessageDeliveriesDecay<=0||r.invalidMessageDeliveriesDecay>=1)throw new w("invalid InvalidMessageDeliveriesDecay; must be between 0 and 1",B)}const Sc={gossipThreshold:-10,publishThreshold:-50,graylistThreshold:-80,acceptPXThreshold:10,opportunisticGraftThreshold:20};function vc(r={}){return{...Sc,...r}}function Ic(r,e,t,s){let n=0;Object.entries(e.topics).forEach(([o,a])=>{const l=t.topics[o];if(l===void 0)return;let u=0;if(a.inMesh){let p=a.meshTime/l.timeInMeshQuantum;p>l.timeInMeshCap&&(p=l.timeInMeshCap),u+=p*l.timeInMeshWeight}let h=a.firstMessageDeliveries;if(h>l.firstMessageDeliveriesCap&&(h=l.firstMessageDeliveriesCap),u+=h*l.firstMessageDeliveriesWeight,a.meshMessageDeliveriesActive&&a.meshMessageDeliveries<l.meshMessageDeliveriesThreshold){const p=l.meshMessageDeliveriesThreshold-a.meshMessageDeliveries,g=p*p;u+=g*l.meshMessageDeliveriesWeight}const c=a.meshFailurePenalty;u+=c*l.meshFailurePenaltyWeight;const d=a.invalidMessageDeliveries*a.invalidMessageDeliveries;u+=d*l.invalidMessageDeliveriesWeight,n+=u*l.topicWeight}),t.topicScoreCap>0&&n>t.topicScoreCap&&(n=t.topicScoreCap);const i=t.appSpecificScore(r);if(n+=i*t.appSpecificWeight,e.knownIPs.forEach(o=>{if(t.IPColocationFactorWhitelist.has(o))return;const a=s.get(o),l=a?a.size:0;if(l>t.IPColocationFactorThreshold){const u=l-t.IPColocationFactorThreshold,h=u*u;n+=h*t.IPColocationFactorWeight}}),e.behaviourPenalty>t.behaviourPenaltyThreshold){const o=e.behaviourPenalty-t.behaviourPenaltyThreshold,a=o*o;n+=a*t.behaviourPenaltyWeight}return n}var de;(function(r){r[r.unknown=0]="unknown",r[r.valid=1]="valid",r[r.invalid=2]="invalid",r[r.ignored=3]="ignored"})(de||(de={}));class Pc{constructor(){this.records=new Map,this.queue=new ta}ensureRecord(e){let t=this.records.get(e);if(t)return t;t={status:de.unknown,firstSeen:Date.now(),validated:0,peers:new Set},this.records.set(e,t);const s={msgId:e,expire:Date.now()+cc};return this.queue.push(s),t}gc(){const e=Date.now();let t=this.queue.peekFront();for(;t&&t.expire<e;)this.records.delete(t.msgId),this.queue.shift(),t=this.queue.peekFront()}clear(){this.records.clear(),this.queue.clear()}}function Dn(r,e,t=()=>!0){const s=new Set;if(e<=0)return s;for(const n of r){if(s.size>=e)break;t(n)&&(s.add(n),r.delete(n))}return s}function Dc(r,e){return Dn(r,e,()=>!0)}class Tc extends Map{constructor(e){super(),this.getDefault=e}getOrDefault(e){let t=super.get(e);return t===void 0&&(t=this.getDefault(),this.set(e,t)),t}}const Rt=_("libp2p:gossipsub:score");class Ac{constructor(e,t,s){this.params=e,this.metrics=t,this.peerStats=new Map,this.peerIPs=new Tc(()=>new Set),this.scoreCache=new Map,this.deliveryRecords=new Pc,_c(e),this.scoreCacheValidityMs=s.scoreCacheValidityMs,this.computeScore=s.computeScore??Ic}get size(){return this.peerStats.size}start(){if(this._backgroundInterval){Rt("Peer score already running");return}this._backgroundInterval=setInterval(()=>this.background(),this.params.decayInterval),Rt("started")}stop(){if(!this._backgroundInterval){Rt("Peer score already stopped");return}clearInterval(this._backgroundInterval),delete this._backgroundInterval,this.peerIPs.clear(),this.peerStats.clear(),this.deliveryRecords.clear(),Rt("stopped")}background(){this.refreshScores(),this.deliveryRecords.gc()}dumpPeerScoreStats(){return Object.fromEntries(Array.from(this.peerStats.entries()).map(([e,t])=>[e,t]))}refreshScores(){const e=Date.now(),t=this.params.decayToZero;this.peerStats.forEach((s,n)=>{if(!s.connected){e>s.expire&&(this.removeIPsForPeer(n,s.knownIPs),this.peerStats.delete(n),this.scoreCache.delete(n));return}Object.entries(s.topics).forEach(([i,o])=>{const a=this.params.topics[i];a!==void 0&&(o.firstMessageDeliveries*=a.firstMessageDeliveriesDecay,o.firstMessageDeliveries<t&&(o.firstMessageDeliveries=0),o.meshMessageDeliveries*=a.meshMessageDeliveriesDecay,o.meshMessageDeliveries<t&&(o.meshMessageDeliveries=0),o.meshFailurePenalty*=a.meshFailurePenaltyDecay,o.meshFailurePenalty<t&&(o.meshFailurePenalty=0),o.invalidMessageDeliveries*=a.invalidMessageDeliveriesDecay,o.invalidMessageDeliveries<t&&(o.invalidMessageDeliveries=0),o.inMesh&&(o.meshTime=e-o.graftTime,o.meshTime>a.meshMessageDeliveriesActivation&&(o.meshMessageDeliveriesActive=!0)))}),s.behaviourPenalty*=this.params.behaviourPenaltyDecay,s.behaviourPenalty<t&&(s.behaviourPenalty=0)})}score(e){this.metrics?.scoreFnCalls.inc();const t=this.peerStats.get(e);if(!t)return 0;const s=Date.now(),n=this.scoreCache.get(e);if(n&&n.cacheUntil>s)return n.score;this.metrics?.scoreFnRuns.inc();const i=this.computeScore(e,t,this.params,this.peerIPs),o=s+this.scoreCacheValidityMs;return n?(this.metrics?.scoreCachedDelta.observe(Math.abs(i-n.score)),n.score=i,n.cacheUntil=o):this.scoreCache.set(e,{score:i,cacheUntil:o}),i}addPenalty(e,t,s){const n=this.peerStats.get(e);n&&(n.behaviourPenalty+=t,this.metrics?.onScorePenalty(s))}addPeer(e){const t={connected:!0,expire:0,topics:{},knownIPs:new Set,behaviourPenalty:0};this.peerStats.set(e,t)}addIP(e,t){const s=this.peerStats.get(e);s&&s.knownIPs.add(t),this.peerIPs.getOrDefault(t).add(e)}removeIP(e,t){const s=this.peerStats.get(e);s&&s.knownIPs.delete(t);const n=this.peerIPs.get(t);n&&(n.delete(e),n.size===0&&this.peerIPs.delete(t))}removePeer(e){const t=this.peerStats.get(e);if(t){if(this.score(e)>0){this.removeIPsForPeer(e,t.knownIPs),this.peerStats.delete(e);return}Object.entries(t.topics).forEach(([s,n])=>{n.firstMessageDeliveries=0;const i=this.params.topics[s].meshMessageDeliveriesThreshold;if(n.inMesh&&n.meshMessageDeliveriesActive&&n.meshMessageDeliveries<i){const o=i-n.meshMessageDeliveries;n.meshFailurePenalty+=o*o}n.inMesh=!1,n.meshMessageDeliveriesActive=!1}),t.connected=!1,t.expire=Date.now()+this.params.retainScore}}graft(e,t){const s=this.peerStats.get(e);if(s){const n=this.getPtopicStats(s,t);n&&(n.inMesh=!0,n.graftTime=Date.now(),n.meshTime=0,n.meshMessageDeliveriesActive=!1)}}prune(e,t){const s=this.peerStats.get(e);if(s){const n=this.getPtopicStats(s,t);if(n){const i=this.params.topics[t].meshMessageDeliveriesThreshold;if(n.meshMessageDeliveriesActive&&n.meshMessageDeliveries<i){const o=i-n.meshMessageDeliveries;n.meshFailurePenalty+=o*o}n.meshMessageDeliveriesActive=!1,n.inMesh=!1}}}validateMessage(e){this.deliveryRecords.ensureRecord(e)}deliverMessage(e,t,s){this.markFirstMessageDelivery(e,s);const n=this.deliveryRecords.ensureRecord(t),i=Date.now();if(n.status!==de.unknown){Rt("unexpected delivery: message from %s was first seen %s ago and has delivery status %s",e,i-n.firstSeen,de[n.status]);return}n.status=de.valid,n.validated=i,n.peers.forEach(o=>{o!==e.toString()&&this.markDuplicateMessageDelivery(o,s)})}rejectInvalidMessage(e,t){this.markInvalidMessageDelivery(e,t)}rejectMessage(e,t,s,n){switch(n){case Oe.Error:this.markInvalidMessageDelivery(e,s);return;case Oe.Blacklisted:return}const i=this.deliveryRecords.ensureRecord(t);if(i.status!==de.unknown){Rt("unexpected rejection: message from %s was first seen %s ago and has delivery status %d",e,Date.now()-i.firstSeen,de[i.status]);return}if(n===Oe.Ignore){i.status=de.ignored,i.peers.clear();return}i.status=de.invalid,this.markInvalidMessageDelivery(e,s),i.peers.forEach(o=>{this.markInvalidMessageDelivery(o,s)}),i.peers.clear()}duplicateMessage(e,t,s){const n=this.deliveryRecords.ensureRecord(t);if(!n.peers.has(e))switch(n.status){case de.unknown:n.peers.add(e);break;case de.valid:n.peers.add(e),this.markDuplicateMessageDelivery(e,s,n.validated);break;case de.invalid:this.markInvalidMessageDelivery(e,s);break;case de.ignored:break}}markInvalidMessageDelivery(e,t){const s=this.peerStats.get(e);if(s){const n=this.getPtopicStats(s,t);n&&(n.invalidMessageDeliveries+=1)}}markFirstMessageDelivery(e,t){const s=this.peerStats.get(e);if(s){const n=this.getPtopicStats(s,t);if(n){let i=this.params.topics[t].firstMessageDeliveriesCap;n.firstMessageDeliveries=Math.min(i,n.firstMessageDeliveries+1),n.inMesh&&(i=this.params.topics[t].meshMessageDeliveriesCap,n.meshMessageDeliveries=Math.min(i,n.meshMessageDeliveries+1))}}}markDuplicateMessageDelivery(e,t,s){const n=this.peerStats.get(e);if(n){const i=s!==void 0?Date.now():0,o=this.getPtopicStats(n,t);if(o&&o.inMesh){const a=this.params.topics[t];if(s!==void 0){const u=i-s,h=u>a.meshMessageDeliveriesWindow;if(this.metrics?.onDuplicateMsgDelivery(t,u,h),h)return}const l=a.meshMessageDeliveriesCap;o.meshMessageDeliveries=Math.min(l,o.meshMessageDeliveries+1)}}}removeIPsForPeer(e,t){for(const s of t){const n=this.peerIPs.get(s);n&&(n.delete(e),n.size===0&&this.peerIPs.delete(s))}}getPtopicStats(e,t){let s=e.topics[t];return s!==void 0?s:this.params.topics[t]!==void 0?(s={inMesh:!1,graftTime:0,meshTime:0,firstMessageDeliveries:0,meshMessageDeliveries:0,meshMessageDeliveriesActive:!1,meshFailurePenalty:0,invalidMessageDeliveries:0},e.topics[t]=s,s):null}}class Oc{constructor(e,t,s){this.gossipsubIWantFollowupMs=e,this.msgIdToStrFn=t,this.metrics=s,this.promises=new Map,this.requestMsByMsg=new Map,this.requestMsByMsgExpire=10*e}get size(){return this.promises.size}get requestMsByMsgSize(){return this.requestMsByMsg.size}addPromise(e,t){const s=Math.floor(Math.random()*t.length),n=t[s],i=this.msgIdToStrFn(n);let o=this.promises.get(i);o||(o=new Map,this.promises.set(i,o));const a=Date.now();o.has(e)||(o.set(e,a+this.gossipsubIWantFollowupMs),this.metrics&&(this.metrics.iwantPromiseStarted.inc(1),this.requestMsByMsg.has(i)||this.requestMsByMsg.set(i,a)))}getBrokenPromises(){const e=Date.now(),t=new Map;let s=0;return this.promises.forEach((n,i)=>{n.forEach((o,a)=>{o<e&&(t.set(a,(t.get(a)??0)+1),n.delete(a),s++)}),n.size||this.promises.delete(i)}),this.metrics?.iwantPromiseBroken.inc(s),t}deliverMessage(e,t=!1){this.trackMessage(e);const s=this.promises.get(e);s&&(this.promises.delete(e),this.metrics&&(this.metrics.iwantPromiseResolved.inc(1),t&&this.metrics.iwantPromiseResolvedFromDuplicate.inc(1),this.metrics.iwantPromiseResolvedPeers.inc(s.size)))}rejectMessage(e,t){switch(this.trackMessage(e),t){case Oe.Error:return}this.promises.delete(e)}clear(){this.promises.clear()}prune(){const e=Date.now()-this.requestMsByMsgExpire;let t=0;for(const[s,n]of this.requestMsByMsg.entries())if(n<e)this.requestMsByMsg.delete(s),t++;else break;this.metrics?.iwantMessagePruned.inc(t)}trackMessage(e){if(this.metrics){const t=this.requestMsByMsg.get(e);t!==void 0&&(this.metrics.iwantPromiseDeliveryTime.observe((Date.now()-t)/1e3),this.requestMsByMsg.delete(e))}}}class cn{constructor(e){this.entries=new Map,this.validityMs=e.validityMs}get size(){return this.entries.size}put(e,t){return this.entries.has(e)?!0:(this.entries.set(e,{value:t,validUntilMs:Date.now()+this.validityMs}),!1)}prune(){const e=Date.now();for(const[t,s]of this.entries.entries())if(s.validUntilMs<e)this.entries.delete(t);else break}has(e){return this.entries.has(e)}get(e){const t=this.entries.get(e);return t&&t.validUntilMs>=Date.now()?t.value:void 0}clear(){this.entries.clear()}}var vr;(function(r){r.forward="forward",r.publish="publish"})(vr||(vr={}));var ot;(function(r){r.Fanout="fanout",r.Random="random",r.Subscribed="subscribed",r.Outbound="outbound",r.NotEnough="not_enough",r.Opportunistic="opportunistic"})(ot||(ot={}));var It;(function(r){r.Dc="disconnected",r.BadScore="bad_score",r.Prune="prune",r.Unsub="unsubscribed",r.Excess="excess"})(It||(It={}));var Qt;(function(r){r.GraftBackoff="graft_backoff",r.BrokenPromise="broken_promise",r.MessageDeficit="message_deficit",r.IPColocation="IP_colocation"})(Qt||(Qt={}));var Xt;(function(r){r.LowScore="low_score",r.MaxIhave="max_ihave",r.MaxIasked="max_iasked"})(Xt||(Xt={}));var Pt;(function(r){r.graylist="graylist",r.publish="publish",r.gossip="gossip",r.mesh="mesh"})(Pt||(Pt={}));function Cc(r,e,t){return{protocolsEnabled:r.gauge({name:"gossipsub_protocol",help:"Status of enabled protocols",labelNames:["protocol"]}),topicSubscriptionStatus:r.gauge({name:"gossipsub_topic_subscription_status",help:"Status of our subscription to this topic",labelNames:["topicStr"]}),topicPeersCount:r.gauge({name:"gossipsub_topic_peer_count",help:"Number of peers subscribed to each topic",labelNames:["topicStr"]}),meshPeerCounts:r.gauge({name:"gossipsub_mesh_peer_count",help:"Number of peers in our mesh",labelNames:["topicStr"]}),meshPeerInclusionEvents:r.gauge({name:"gossipsub_mesh_peer_inclusion_events_total",help:"Number of times we include peers in a topic mesh for different reasons",labelNames:["topic","reason"]}),meshPeerChurnEvents:r.gauge({name:"gossipsub_peer_churn_events_total",help:"Number of times we remove peers in a topic mesh for different reasons",labelNames:["topic","reason"]}),peersPerProtocol:r.gauge({name:"gossipsub_peers_per_protocol_count",help:"Peers connected for each topic",labelNames:["protocol"]}),heartbeatDuration:r.histogram({name:"gossipsub_heartbeat_duration_seconds",help:"The time it takes to complete one iteration of the heartbeat",buckets:[.01,.1,1]}),heartbeatSkipped:r.gauge({name:"gossipsub_heartbeat_skipped",help:"Heartbeat run took longer than heartbeat interval so next is skipped"}),asyncValidationResult:r.gauge({name:"gossipsub_async_validation_result_total",help:"Message validation result for each topic",labelNames:["topic","acceptance"]}),asyncValidationMcacheHit:r.gauge({name:"gossipsub_async_validation_mcache_hit_total",help:"Async validation result reported by the user layer",labelNames:["hit"]}),peerReadStreamError:r.gauge({name:"gossipsub_peer_read_stream_err_count_total",help:"Peer read stream error"}),rpcRecvBytes:r.gauge({name:"gossipsub_rpc_recv_bytes_total",help:"RPC recv"}),rpcRecvCount:r.gauge({name:"gossipsub_rpc_recv_count_total",help:"RPC recv"}),rpcRecvSubscription:r.gauge({name:"gossipsub_rpc_recv_subscription_total",help:"RPC recv"}),rpcRecvMessage:r.gauge({name:"gossipsub_rpc_recv_message_total",help:"RPC recv"}),rpcRecvControl:r.gauge({name:"gossipsub_rpc_recv_control_total",help:"RPC recv"}),rpcRecvIHave:r.gauge({name:"gossipsub_rpc_recv_ihave_total",help:"RPC recv"}),rpcRecvIWant:r.gauge({name:"gossipsub_rpc_recv_iwant_total",help:"RPC recv"}),rpcRecvGraft:r.gauge({name:"gossipsub_rpc_recv_graft_total",help:"RPC recv"}),rpcRecvPrune:r.gauge({name:"gossipsub_rpc_recv_prune_total",help:"RPC recv"}),rpcDataError:r.gauge({name:"gossipsub_rpc_data_err_count_total",help:"RPC data error"}),rpcRecvError:r.gauge({name:"gossipsub_rpc_recv_err_count_total",help:"RPC recv error"}),rpcRecvNotAccepted:r.gauge({name:"gossipsub_rpc_rcv_not_accepted_total",help:"Total count of RPC dropped because acceptFrom() == false"}),rpcSentBytes:r.gauge({name:"gossipsub_rpc_sent_bytes_total",help:"RPC sent"}),rpcSentCount:r.gauge({name:"gossipsub_rpc_sent_count_total",help:"RPC sent"}),rpcSentSubscription:r.gauge({name:"gossipsub_rpc_sent_subscription_total",help:"RPC sent"}),rpcSentMessage:r.gauge({name:"gossipsub_rpc_sent_message_total",help:"RPC sent"}),rpcSentControl:r.gauge({name:"gossipsub_rpc_sent_control_total",help:"RPC sent"}),rpcSentIHave:r.gauge({name:"gossipsub_rpc_sent_ihave_total",help:"RPC sent"}),rpcSentIWant:r.gauge({name:"gossipsub_rpc_sent_iwant_total",help:"RPC sent"}),rpcSentGraft:r.gauge({name:"gossipsub_rpc_sent_graft_total",help:"RPC sent"}),rpcSentPrune:r.gauge({name:"gossipsub_rpc_sent_prune_total",help:"RPC sent"}),msgPublishCount:r.gauge({name:"gossipsub_msg_publish_count_total",help:"Total count of msg published by topic",labelNames:["topic"]}),msgPublishPeers:r.gauge({name:"gossipsub_msg_publish_peers_total",help:"Total count of peers that we publish a msg to",labelNames:["topic"]}),msgPublishPeersByGroup:r.gauge({name:"gossipsub_msg_publish_peers_by_group",help:"Total count of peers (by group) that we publish a msg to",labelNames:["topic","peerGroup"]}),msgPublishBytes:r.gauge({name:"gossipsub_msg_publish_bytes_total",help:"Total count of msg publish data.length bytes",labelNames:["topic"]}),msgForwardCount:r.gauge({name:"gossipsub_msg_forward_count_total",help:"Total count of msg forwarded by topic",labelNames:["topic"]}),msgForwardPeers:r.gauge({name:"gossipsub_msg_forward_peers_total",help:"Total count of peers that we forward a msg to",labelNames:["topic"]}),msgReceivedPreValidation:r.gauge({name:"gossipsub_msg_received_prevalidation_total",help:"Total count of recv msgs before any validation",labelNames:["topic"]}),msgReceivedError:r.gauge({name:"gossipsub_msg_received_error_total",help:"Total count of recv msgs error",labelNames:["topic"]}),msgReceivedStatus:r.gauge({name:"gossipsub_msg_received_status_total",help:"Tracks distribution of recv msgs by duplicate, invalid, valid",labelNames:["topic","status"]}),msgReceivedInvalid:r.gauge({name:"gossipsub_msg_received_invalid_total",help:"Tracks specific reason of invalid",labelNames:["topic","error"]}),duplicateMsgDeliveryDelay:r.histogram({name:"gossisub_duplicate_msg_delivery_delay_seconds",help:"Time since the 1st duplicated message validated",labelNames:["topic"],buckets:[.25*t.maxMeshMessageDeliveriesWindowSec,.5*t.maxMeshMessageDeliveriesWindowSec,1*t.maxMeshMessageDeliveriesWindowSec,2*t.maxMeshMessageDeliveriesWindowSec,4*t.maxMeshMessageDeliveriesWindowSec]}),duplicateMsgLateDelivery:r.gauge({name:"gossisub_duplicate_msg_late_delivery_total",help:"Total count of late duplicate message delivery by topic, which triggers P3 penalty",labelNames:["topic"]}),duplicateMsgIgnored:r.gauge({name:"gossisub_ignored_published_duplicate_msgs_total",help:"Total count of published duplicate message ignored by topic",labelNames:["topic"]}),scoreFnCalls:r.gauge({name:"gossipsub_score_fn_calls_total",help:"Total times score() is called"}),scoreFnRuns:r.gauge({name:"gossipsub_score_fn_runs_total",help:"Total times score() call actually computed computeScore(), no cache"}),scoreCachedDelta:r.histogram({name:"gossipsub_score_cache_delta",help:"Delta of score between cached values that expired",buckets:[10,100,1e3]}),peersByScoreThreshold:r.gauge({name:"gossipsub_peers_by_score_threshold_count",help:"Current count of peers by score threshold",labelNames:["threshold"]}),score:r.avgMinMax({name:"gossipsub_score",help:"Avg min max of gossip scores",labelNames:["topic","p"]}),scoreWeights:r.avgMinMax({name:"gossipsub_score_weights",help:"Separate score weights",labelNames:["topic","p"]}),scorePerMesh:r.avgMinMax({name:"gossipsub_score_per_mesh",help:"Histogram of the scores for each mesh topic",labelNames:["topic"]}),scoringPenalties:r.gauge({name:"gossipsub_scoring_penalties_total",help:"A counter of the kind of penalties being applied to peers",labelNames:["penalty"]}),behaviourPenalty:r.histogram({name:"gossipsub_peer_stat_behaviour_penalty",help:"Current peer stat behaviour_penalty at each scrape",buckets:[.25*t.behaviourPenaltyThreshold,.5*t.behaviourPenaltyThreshold,1*t.behaviourPenaltyThreshold,2*t.behaviourPenaltyThreshold,4*t.behaviourPenaltyThreshold]}),ihaveRcvIgnored:r.gauge({name:"gossipsub_ihave_rcv_ignored_total",help:"Total received IHAVE messages that we ignore for some reason",labelNames:["reason"]}),ihaveRcvMsgids:r.gauge({name:"gossipsub_ihave_rcv_msgids_total",help:"Total received IHAVE messages by topic",labelNames:["topic"]}),ihaveRcvNotSeenMsgids:r.gauge({name:"gossipsub_ihave_rcv_not_seen_msgids_total",help:"Total messages per topic we do not have, not actual requests",labelNames:["topic"]}),iwantRcvMsgids:r.gauge({name:"gossipsub_iwant_rcv_msgids_total",help:"Total received IWANT messages by topic",labelNames:["topic"]}),iwantRcvDonthaveMsgids:r.gauge({name:"gossipsub_iwant_rcv_dont_have_msgids_total",help:"Total requested messageIDs that we do not have"}),iwantPromiseStarted:r.gauge({name:"gossipsub_iwant_promise_sent_total",help:"Total count of started IWANT promises"}),iwantPromiseResolved:r.gauge({name:"gossipsub_iwant_promise_resolved_total",help:"Total count of resolved IWANT promises"}),iwantPromiseResolvedFromDuplicate:r.gauge({name:"gossipsub_iwant_promise_resolved_from_duplicate_total",help:"Total count of resolved IWANT promises from duplicate messages"}),iwantPromiseResolvedPeers:r.gauge({name:"gossipsub_iwant_promise_resolved_peers",help:"Total count of peers we have asked IWANT promises that are resolved"}),iwantPromiseBroken:r.gauge({name:"gossipsub_iwant_promise_broken",help:"Total count of broken IWANT promises"}),iwantMessagePruned:r.gauge({name:"gossipsub_iwant_message_pruned",help:"Total count of pruned IWANT messages"}),iwantPromiseDeliveryTime:r.histogram({name:"gossipsub_iwant_promise_delivery_seconds",help:"Histogram of delivery time of resolved IWANT promises",buckets:[.5*t.gossipPromiseExpireSec,1*t.gossipPromiseExpireSec,2*t.gossipPromiseExpireSec,4*t.gossipPromiseExpireSec]}),iwantPromiseUntracked:r.gauge({name:"gossip_iwant_promise_untracked",help:"Total count of untracked IWANT promise"}),cacheSize:r.gauge({name:"gossipsub_cache_size",help:"Unbounded cache sizes",labelNames:["cache"]}),mcacheSize:r.gauge({name:"gossipsub_mcache_size",help:"Current mcache msg count"}),mcacheNotValidatedCount:r.gauge({name:"gossipsub_mcache_not_validated_count",help:"Current mcache msg count not validated"}),fastMsgIdCacheCollision:r.gauge({name:"gossipsub_fastmsgid_cache_collision_total",help:"Total count of key collisions on fastmsgid cache put"}),newConnectionCount:r.gauge({name:"gossipsub_new_connection_total",help:"Total new connection by status",labelNames:["status"]}),topicStrToLabel:e,toTopic(s){return this.topicStrToLabel.get(s)??s},onJoin(s){this.topicSubscriptionStatus.set({topicStr:s},1),this.meshPeerCounts.set({topicStr:s},0)},onLeave(s){this.topicSubscriptionStatus.set({topicStr:s},0),this.meshPeerCounts.set({topicStr:s},0)},onAddToMesh(s,n,i){const o=this.toTopic(s);this.meshPeerInclusionEvents.inc({topic:o,reason:n},i)},onRemoveFromMesh(s,n,i){const o=this.toTopic(s);this.meshPeerChurnEvents.inc({topic:o,reason:n},i)},onReportValidationMcacheHit(s){this.asyncValidationMcacheHit.inc({hit:s?"hit":"miss"})},onReportValidation(s,n){const i=this.toTopic(s);this.asyncValidationResult.inc({topic:i,acceptance:n})},onScorePenalty(s){this.scoringPenalties.inc({penalty:s},1)},onIhaveRcv(s,n,i){const o=this.toTopic(s);this.ihaveRcvMsgids.inc({topic:o},n),this.ihaveRcvNotSeenMsgids.inc({topic:o},i)},onIwantRcv(s,n){for(const[i,o]of s){const a=this.toTopic(i);this.iwantRcvMsgids.inc({topic:a},o)}this.iwantRcvDonthaveMsgids.inc(n)},onForwardMsg(s,n){const i=this.toTopic(s);this.msgForwardCount.inc({topic:i},1),this.msgForwardPeers.inc({topic:i},n)},onPublishMsg(s,n,i,o){const a=this.toTopic(s);this.msgPublishCount.inc({topic:a},1),this.msgPublishBytes.inc({topic:a},i*o),this.msgPublishPeers.inc({topic:a},i),this.msgPublishPeersByGroup.inc({topic:a,peerGroup:"direct"},n.direct),this.msgPublishPeersByGroup.inc({topic:a,peerGroup:"floodsub"},n.floodsub),this.msgPublishPeersByGroup.inc({topic:a,peerGroup:"mesh"},n.mesh),this.msgPublishPeersByGroup.inc({topic:a,peerGroup:"fanout"},n.fanout)},onMsgRecvPreValidation(s){const n=this.toTopic(s);this.msgReceivedPreValidation.inc({topic:n},1)},onMsgRecvError(s){const n=this.toTopic(s);this.msgReceivedError.inc({topic:n},1)},onMsgRecvResult(s,n){const i=this.toTopic(s);this.msgReceivedStatus.inc({topic:i,status:n})},onMsgRecvInvalid(s,n){const i=this.toTopic(s),o=n.reason===Oe.Error?n.error:n.reason;this.msgReceivedInvalid.inc({topic:i,error:o},1)},onDuplicateMsgDelivery(s,n,i){if(this.duplicateMsgDeliveryDelay.observe(n/1e3),i){const o=this.toTopic(s);this.duplicateMsgLateDelivery.inc({topic:o},1)}},onPublishDuplicateMsg(s){const n=this.toTopic(s);this.duplicateMsgIgnored.inc({topic:n},1)},onPeerReadStreamError(){this.peerReadStreamError.inc(1)},onRpcRecvError(){this.rpcRecvError.inc(1)},onRpcDataError(){this.rpcDataError.inc(1)},onRpcRecv(s,n){this.rpcRecvBytes.inc(n),this.rpcRecvCount.inc(1),s.subscriptions&&this.rpcRecvSubscription.inc(s.subscriptions.length),s.messages&&this.rpcRecvMessage.inc(s.messages.length),s.control&&(this.rpcRecvControl.inc(1),s.control.ihave&&this.rpcRecvIHave.inc(s.control.ihave.length),s.control.iwant&&this.rpcRecvIWant.inc(s.control.iwant.length),s.control.graft&&this.rpcRecvGraft.inc(s.control.graft.length),s.control.prune&&this.rpcRecvPrune.inc(s.control.prune.length))},onRpcSent(s,n){if(this.rpcSentBytes.inc(n),this.rpcSentCount.inc(1),s.subscriptions&&this.rpcSentSubscription.inc(s.subscriptions.length),s.messages&&this.rpcSentMessage.inc(s.messages.length),s.control){const i=s.control.ihave?.length??0,o=s.control.iwant?.length??0,a=s.control.graft?.length??0,l=s.control.prune?.length??0;i>0&&this.rpcSentIHave.inc(i),o>0&&this.rpcSentIWant.inc(o),a>0&&this.rpcSentGraft.inc(a),l>0&&this.rpcSentPrune.inc(l),(i>0||o>0||a>0||l>0)&&this.rpcSentControl.inc(1)}},registerScores(s,n){let i=0,o=0,a=0,l=0;for(const u of s)u>=n.graylistThreshold&&i++,u>=n.publishThreshold&&o++,u>=n.gossipThreshold&&a++,u>=0&&l++;this.peersByScoreThreshold.set({threshold:Pt.graylist},i),this.peersByScoreThreshold.set({threshold:Pt.publish},o),this.peersByScoreThreshold.set({threshold:Pt.gossip},a),this.peersByScoreThreshold.set({threshold:Pt.mesh},l),this.score.set(s)},registerScoreWeights(s){for(const[n,i]of s.byTopic)this.scoreWeights.set({topic:n,p:"p1"},i.p1w),this.scoreWeights.set({topic:n,p:"p2"},i.p2w),this.scoreWeights.set({topic:n,p:"p3"},i.p3w),this.scoreWeights.set({topic:n,p:"p3b"},i.p3bw),this.scoreWeights.set({topic:n,p:"p4"},i.p4w);this.scoreWeights.set({p:"p5"},s.p5w),this.scoreWeights.set({p:"p6"},s.p6w),this.scoreWeights.set({p:"p7"},s.p7w)},registerScorePerMesh(s,n){const i=new Map;s.forEach((o,a)=>{const l=this.topicStrToLabel.get(a)??"unknown";let u=i.get(l);u||(u=new Set,i.set(l,u)),o.forEach(h=>u?.add(h))});for(const[o,a]of i){const l=[];a.forEach(u=>{l.push(n.get(u)??0)}),this.scorePerMesh.set({topic:o},l)}}}}const Ir={sha1:"sha1","sha2-256":"sha256","sha2-512":"sha512"};function Pr(r,e,t,s,n){if(n!=="sha1"&&n!=="sha2-256"&&n!=="sha2-512"){const a=Object.keys(Ir).join(" / ");throw new w(`Hash '${n}' is unknown or not supported. Must be ${a}`,"ERR_UNSUPPORTED_HASH_TYPE")}const i=Ir[n],o=sa(r,e,t,s,i);return na.encode64(o,null)}const eo=T("libp2p-pubsub:");async function kc(r,e,t,s){switch(r.type){case Kt.Signing:{const n={from:r.author.toBytes(),data:s,seqno:ps(8),topic:e,signature:void 0,key:void 0},i=ve([eo,jn.Message.encode(n).finish()]);n.signature=await r.privateKey.sign(i),n.key=r.key;const o={type:"signed",from:r.author,data:t,sequenceNumber:BigInt(`0x${D(n.seqno,"base16")}`),topic:e,signature:n.signature,key:n.key};return{raw:n,msg:o}}case Kt.Anonymous:return{raw:{from:void 0,data:s,seqno:void 0,topic:e,signature:void 0,key:void 0},msg:{type:"unsigned",data:t,topic:e}}}}async function Nc(r,e){switch(r){case Zn:return e.signature!=null?{valid:!1,error:he.SignaturePresent}:e.seqno!=null?{valid:!1,error:he.SeqnoPresent}:e.key!=null?{valid:!1,error:he.FromPresent}:{valid:!0,message:{type:"unsigned",topic:e.topic,data:e.data??new Uint8Array(0)}};case Fs:{if(e.seqno==null)return{valid:!1,error:he.InvalidSeqno};if(e.seqno.length!==8)return{valid:!1,error:he.InvalidSeqno};if(e.signature==null)return{valid:!1,error:he.InvalidSignature};if(e.from==null)return{valid:!1,error:he.InvalidPeerId};let t;try{t=Ve(e.from)}catch{return{valid:!1,error:he.InvalidPeerId}}let s;if(e.key){if(s=as(e.key),t.publicKey!==void 0&&!J(s.bytes,t.publicKey))return{valid:!1,error:he.InvalidPeerId}}else{if(t.publicKey==null)return{valid:!1,error:he.InvalidPeerId};s=as(t.publicKey)}const n={from:e.from,data:e.data,seqno:e.seqno,topic:e.topic,signature:void 0,key:void 0},i=ve([eo,jn.Message.encode(n).finish()]);return await s.verify(i,e.signature)?{valid:!0,message:{type:"signed",from:t,data:e.data??new Uint8Array(0),sequenceNumber:BigInt(`0x${D(e.seqno,"base16")}`),topic:e.topic,signature:e.signature,key:e.key??Xn(s)}}:{valid:!1,error:he.InvalidSignature}}}}const Mc=(r,e)=>{const t=ra(e.toString(16).padStart(16,"0"),"base16"),s=new Uint8Array(r.length+t.length);return s.set(r,0),s.set(t,r.length),s};function Lc(r){if(r.type!=="signed")throw new Error("expected signed message type");if(r.sequenceNumber==null)throw Error("missing seqno field");return Mc(r.from.toBytes(),r.sequenceNumber)}async function Uc(r){return await le.encode(r.data)}function xc(r,e,t,s,n){let i=0;const o=new Map;if(Object.entries(e.topics).forEach(([d,p])=>{const g=n.get(d)??"unknown",m=t.topics[d];if(m===void 0)return;let E=o.get(g);E||(E={p1w:0,p2w:0,p3w:0,p3bw:0,p4w:0},o.set(g,E));let I=0,N=0,A=0,M=0,b=0;if(p.inMesh){const H=Math.max(p.meshTime/m.timeInMeshQuantum,m.timeInMeshCap);I+=H*m.timeInMeshWeight}let S=p.firstMessageDeliveries;if(S>m.firstMessageDeliveriesCap&&(S=m.firstMessageDeliveriesCap),N+=S*m.firstMessageDeliveriesWeight,p.meshMessageDeliveriesActive&&p.meshMessageDeliveries<m.meshMessageDeliveriesThreshold){const H=m.meshMessageDeliveriesThreshold-p.meshMessageDeliveries,fe=H*H;A+=fe*m.meshMessageDeliveriesWeight}const P=p.meshFailurePenalty;M+=P*m.meshFailurePenaltyWeight;const v=p.invalidMessageDeliveries*p.invalidMessageDeliveries;b+=v*m.invalidMessageDeliveriesWeight,i+=(I+N+A+M+b)*m.topicWeight,E.p1w+=I,E.p2w+=N,E.p3w+=A,E.p3bw+=M,E.p4w+=b}),t.topicScoreCap>0&&i>t.topicScoreCap){i=t.topicScoreCap;const d=t.topicScoreCap/i;for(const p of o.values())p.p1w*=d,p.p2w*=d,p.p3w*=d,p.p3bw*=d,p.p4w*=d}let a=0,l=0,u=0;const h=t.appSpecificScore(r);a+=h*t.appSpecificWeight,e.knownIPs.forEach(d=>{if(t.IPColocationFactorWhitelist.has(d))return;const p=s.get(d),g=p?p.size:0;if(g>t.IPColocationFactorThreshold){const m=g-t.IPColocationFactorThreshold,E=m*m;l+=E*t.IPColocationFactorWeight}});const c=e.behaviourPenalty*e.behaviourPenalty;return u+=c*t.behaviourPenaltyWeight,i+=a+l+u,{byTopic:o,p5w:a,p6w:l,p7w:u,score:i}}function Kc(r,e,t,s,n){const i={byTopic:new Map,p5w:[],p6w:[],p7w:[],score:[]};for(const o of r){const a=e.get(o);if(a){const l=xc(o,a,t,s,n);for(const[u,h]of l.byTopic){let c=i.byTopic.get(u);c||(c={p1w:[],p2w:[],p3w:[],p3bw:[],p4w:[]},i.byTopic.set(u,c)),c.p1w.push(h.p1w),c.p2w.push(h.p2w),c.p3w.push(h.p3w),c.p3bw.push(h.p3bw),c.p4w.push(h.p4w)}i.p5w.push(l.p5w),i.p6w.push(l.p6w),i.p7w.push(l.p7w),i.score.push(l.score)}else i.p5w.push(0),i.p6w.push(0),i.p7w.push(0),i.score.push(0)}return i}class Fc{constructor(e,t,s){this.rawStream=e,this.pushable=es({objectMode:!1}),this.closeController=new AbortController,this.maxBufferSize=s.maxBufferSize??1/0,z(lt(this.pushable,this.closeController.signal,{returnOnAbort:!0}),Je(),this.rawStream).catch(t)}get protocol(){return this.rawStream.stat.protocol}push(e){if(this.pushable.readableLength>this.maxBufferSize)throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);this.pushable.push(e)}close(){this.closeController.abort(),this.pushable.return(),this.rawStream.close()}}class Bc{constructor(e,t={}){this.rawStream=e,this.closeController=new AbortController,this.source=lt(z(this.rawStream,Ze(t)),this.closeController.signal,{returnOnAbort:!0})}close(){this.closeController.abort(),this.rawStream.close()}}const Vc={maxSubscriptions:1/0,maxMessages:1/0,maxIhaveMessageIDs:1/0,maxIwantMessageIDs:1/0,maxControlMessages:1/0,maxPeerInfos:1/0};function Gc(r,e){e={...e};const t=ia.Reader.create(r),s=r.length,n=s===void 0?t.len:t.pos+s,i={};for(;t.pos<n;){const o=t.uint32();switch(o>>>3){case 1:i.subscriptions&&i.subscriptions.length||(i.subscriptions=[]),i.subscriptions.length<e.maxSubscriptions?i.subscriptions.push($c(t,t.uint32())):t.skipType(o&7);break;case 2:i.messages&&i.messages.length||(i.messages=[]),i.messages.length<e.maxMessages?i.messages.push(Hc(t,t.uint32())):t.skipType(o&7);break;case 3:i.control=qc(t,t.uint32(),e);break;default:t.skipType(o&7);break}}return i}function $c(r,e){const t=e===void 0?r.len:r.pos+e,s={};for(;r.pos<t;){const n=r.uint32();switch(n>>>3){case 1:s.subscribe=r.bool();break;case 2:s.topic=r.string();break;default:r.skipType(n&7);break}}return s}function Hc(r,e){const t=e===void 0?r.len:r.pos+e,s={};for(;r.pos<t;){const n=r.uint32();switch(n>>>3){case 1:s.from=r.bytes();break;case 2:s.data=r.bytes();break;case 3:s.seqno=r.bytes();break;case 4:s.topic=r.string();break;case 5:s.signature=r.bytes();break;case 6:s.key=r.bytes();break;default:r.skipType(n&7);break}}if(!s.topic)throw Error("missing required 'topic'");return s}function qc(r,e,t){const s=e===void 0?r.len:r.pos+e,n={};for(;r.pos<s;){const i=r.uint32();switch(i>>>3){case 1:n.ihave&&n.ihave.length||(n.ihave=[]),n.ihave.length<t.maxControlMessages?n.ihave.push(zc(r,r.uint32(),t)):r.skipType(i&7);break;case 2:n.iwant&&n.iwant.length||(n.iwant=[]),n.iwant.length<t.maxControlMessages?n.iwant.push(Wc(r,r.uint32(),t)):r.skipType(i&7);break;case 3:n.graft&&n.graft.length||(n.graft=[]),n.graft.length<t.maxControlMessages?n.graft.push(Yc(r,r.uint32())):r.skipType(i&7);break;case 4:n.prune&&n.prune.length||(n.prune=[]),n.prune.length<t.maxControlMessages?n.prune.push(Qc(r,r.uint32(),t)):r.skipType(i&7);break;default:r.skipType(i&7);break}}return n}function zc(r,e,t){const s=e===void 0?r.len:r.pos+e,n={};for(;r.pos<s;){const i=r.uint32();switch(i>>>3){case 1:n.topicID=r.string();break;case 2:n.messageIDs&&n.messageIDs.length||(n.messageIDs=[]),t.maxIhaveMessageIDs-- >0?n.messageIDs.push(r.bytes()):r.skipType(i&7);break;default:r.skipType(i&7);break}}return n}function Wc(r,e,t){const s=e===void 0?r.len:r.pos+e,n={};for(;r.pos<s;){const i=r.uint32();switch(i>>>3){case 1:n.messageIDs&&n.messageIDs.length||(n.messageIDs=[]),t.maxIwantMessageIDs-- >0?n.messageIDs.push(r.bytes()):r.skipType(i&7);break;default:r.skipType(i&7);break}}return n}function Yc(r,e){const t=e===void 0?r.len:r.pos+e,s={};for(;r.pos<t;){const n=r.uint32();switch(n>>>3){case 1:s.topicID=r.string();break;default:r.skipType(n&7);break}}return s}function Qc(r,e,t){const s=e===void 0?r.len:r.pos+e,n={};for(;r.pos<s;){const i=r.uint32();switch(i>>>3){case 1:n.topicID=r.string();break;case 2:n.peers&&n.peers.length||(n.peers=[]),t.maxPeerInfos-- >0?n.peers.push(Xc(r,r.uint32())):r.skipType(i&7);break;case 3:n.backoff=r.uint64();break;default:r.skipType(i&7);break}}return n}function Xc(r,e){const t=e===void 0?r.len:r.pos+e,s={};for(;r.pos<t;){const n=r.uint32();switch(n>>>3){case 1:s.peerID=r.bytes();break;case 2:s.signedPeerRecord=r.bytes();break;default:r.skipType(n&7);break}}return s}var Bs;(function(r){r[r.ip4=4]="ip4",r[r.ip6=41]="ip6"})(Bs||(Bs={}));function jc(r){for(const e of r.tuples())switch(e[0]){case Bs.ip4:case Bs.ip6:return xo(e[0],e[1])}return null}var ge;(function(r){r[r.started=0]="started",r[r.stopped=1]="stopped"})(ge||(ge={}));class to extends W{constructor(e,t={}){super(),this.multicodecs=[Zi,br],this.peers=new Set,this.streamsInbound=new Map,this.streamsOutbound=new Map,this.outboundInflightQueue=es({objectMode:!0}),this.direct=new Set,this.floodsubPeers=new Set,this.acceptFromWhitelist=new Map,this.topics=new Map,this.subscriptions=new Set,this.mesh=new Map,this.fanout=new Map,this.fanoutLastpub=new Map,this.gossip=new Map,this.control=new Map,this.peerhave=new Map,this.iasked=new Map,this.backoff=new Map,this.outbound=new Map,this.topicValidators=new Map,this.heartbeatTicks=0,this.directPeerInitial=null,this.status={code:ge.stopped},this.heartbeatTimer=null,this.runHeartbeat=()=>{const n=this.metrics?.heartbeatDuration.startTimer();this.heartbeat().catch(i=>{this.log("Error running heartbeat",i)}).finally(()=>{if(n?.(),this.status.code===ge.started){clearTimeout(this.status.heartbeatTimeout);let i=this.opts.heartbeatInterval-(Date.now()-this.status.hearbeatStartMs)%this.opts.heartbeatInterval;i<this.opts.heartbeatInterval*.25&&(i+=this.opts.heartbeatInterval,this.metrics?.heartbeatSkipped.inc()),this.status.heartbeatTimeout=setTimeout(this.runHeartbeat,i)}})};const s={fallbackToFloodsub:!0,floodPublish:!0,doPX:!1,directPeers:[],D:F1,Dlo:B1,Dhi:V1,Dscore:G1,Dout:$1,Dlazy:z1,heartbeatInterval:Q1,fanoutTTL:X1,mcacheLength:H1,mcacheGossip:q1,seenTTL:ac,gossipsubIWantFollowupMs:oc,prunePeers:j1,pruneBackoff:J1,graftFloodThreshold:rc,opportunisticGraftPeers:nc,opportunisticGraftTicks:sc,directConnectTicks:ec,...t,scoreParams:Ec(t.scoreParams),scoreThresholds:vc(t.scoreThresholds)};if(this.components=e,this.decodeRpcLimits=s.decodeRpcLimits??Vc,this.globalSignaturePolicy=s.globalSignaturePolicy??Fs,s.fallbackToFloodsub&&this.multicodecs.push(Er),this.log=_(s.debugName??"libp2p:gossipsub"),this.opts=s,this.direct=new Set(s.directPeers.map(n=>n.id.toString())),this.seenCache=new cn({validityMs:s.seenTTL}),this.publishedMessageIds=new cn({validityMs:s.seenTTL}),t.msgIdFn)this.msgIdFn=t.msgIdFn;else switch(this.globalSignaturePolicy){case Fs:this.msgIdFn=Lc;break;case Zn:this.msgIdFn=Uc;break}if(t.fastMsgIdFn&&(this.fastMsgIdFn=t.fastMsgIdFn,this.fastMsgIdCache=new cn({validityMs:s.seenTTL})),this.msgIdToStrFn=t.msgIdToStrFn??gc,this.mcache=t.messageCache||new U1(s.mcacheGossip,s.mcacheLength,this.msgIdToStrFn),t.dataTransform&&(this.dataTransform=t.dataTransform),t.metricsRegister){if(!t.metricsTopicStrToLabel)throw Error("Must set metricsTopicStrToLabel with metrics");const n=Math.max(...Object.values(s.scoreParams.topics).map(o=>o.meshMessageDeliveriesWindow),fc),i=Cc(t.metricsRegister,t.metricsTopicStrToLabel,{gossipPromiseExpireSec:this.opts.gossipsubIWantFollowupMs/1e3,behaviourPenaltyThreshold:s.scoreParams.behaviourPenaltyThreshold,maxMeshMessageDeliveriesWindowSec:n/1e3});i.mcacheSize.addCollect(()=>this.onScrapeMetrics(i));for(const o of this.multicodecs)i.protocolsEnabled.set({protocol:o},1);this.metrics=i}else this.metrics=null;this.gossipTracer=new Oc(this.opts.gossipsubIWantFollowupMs,this.msgIdToStrFn,this.metrics),this.score=new Ac(this.opts.scoreParams,this.metrics,{scoreCacheValidityMs:s.heartbeatInterval}),this.maxInboundStreams=t.maxInboundStreams,this.maxOutboundStreams=t.maxOutboundStreams,this.allowedTopics=s.allowedTopics?new Set(s.allowedTopics):null}getPeers(){return[...this.peers.keys()].map(e=>q(e))}isStarted(){return this.status.code===ge.started}async start(){if(this.isStarted())return;this.log("starting"),this.publishConfig=await yc(this.globalSignaturePolicy,this.components.peerId),this.outboundInflightQueue=es({objectMode:!0}),z(this.outboundInflightQueue,async i=>{for await(const{peerId:o,connection:a}of i)await this.createOutboundStream(o,a)}).catch(i=>this.log.error("outbound inflight queue error",i)),await Promise.all(this.opts.directPeers.map(async i=>{await this.components.peerStore.addressBook.add(i.id,i.addrs)}));const e=this.components.registrar;await Promise.all(this.multicodecs.map(i=>e.handle(i,this.onIncomingStream.bind(this),{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams})));const t=ji({onConnect:this.onPeerConnected.bind(this),onDisconnect:this.onPeerDisconnected.bind(this)}),s=await Promise.all(this.multicodecs.map(i=>e.register(i,t))),n=setTimeout(this.runHeartbeat,_r);this.status={code:ge.started,registrarTopologyIds:s,heartbeatTimeout:n,hearbeatStartMs:Date.now()+_r},this.score.start(),this.directPeerInitial=setTimeout(()=>{Promise.resolve().then(async()=>{await Promise.all(Array.from(this.direct).map(async i=>await this.connect(i)))}).catch(i=>{this.log(i)})},tc),this.log("started")}async stop(){if(this.log("stopping"),this.status.code!==ge.started)return;const{registrarTopologyIds:e}=this.status;this.status={code:ge.stopped};const t=this.components.registrar;e.forEach(s=>t.unregister(s)),this.outboundInflightQueue.end();for(const s of this.streamsOutbound.values())s.close();this.streamsOutbound.clear();for(const s of this.streamsInbound.values())s.close();this.streamsInbound.clear(),this.peers.clear(),this.subscriptions.clear(),this.heartbeatTimer&&(this.heartbeatTimer.cancel(),this.heartbeatTimer=null),this.score.stop(),this.mesh.clear(),this.fanout.clear(),this.fanoutLastpub.clear(),this.gossip.clear(),this.control.clear(),this.peerhave.clear(),this.iasked.clear(),this.backoff.clear(),this.outbound.clear(),this.gossipTracer.clear(),this.seenCache.clear(),this.fastMsgIdCache&&this.fastMsgIdCache.clear(),this.directPeerInitial&&clearTimeout(this.directPeerInitial),this.log("stopped")}dumpPeerScoreStats(){return this.score.dumpPeerScoreStats()}onIncomingStream({stream:e,connection:t}){if(!this.isStarted())return;const s=t.remotePeer;this.addPeer(s,t.stat.direction,t.remoteAddr),this.createInboundStream(s,e),this.outboundInflightQueue.push({peerId:s,connection:t})}onPeerConnected(e,t){this.metrics?.newConnectionCount.inc({status:t.stat.status}),!(!this.isStarted()||t.stat.status!=="OPEN")&&(this.addPeer(e,t.stat.direction,t.remoteAddr),this.outboundInflightQueue.push({peerId:e,connection:t}))}onPeerDisconnected(e){this.log("connection ended %p",e),this.removePeer(e)}async createOutboundStream(e,t){if(!this.isStarted())return;const s=e.toString();if(this.peers.has(s)&&!this.streamsOutbound.has(s))try{const n=new Fc(await t.newStream(this.multicodecs),o=>this.log.error("outbound pipe error",o),{maxBufferSize:this.opts.maxOutboundBufferSize});this.log("create outbound stream %p",e),this.streamsOutbound.set(s,n);const i=n.protocol;i===Er&&this.floodsubPeers.add(s),this.metrics?.peersPerProtocol.inc({protocol:i},1),this.subscriptions.size>0&&(this.log("send subscriptions to",s),this.sendSubscriptions(s,Array.from(this.subscriptions),!0))}catch(n){this.log.error("createOutboundStream error",n)}}async createInboundStream(e,t){if(!this.isStarted())return;const s=e.toString();if(!this.peers.has(s))return;const n=this.streamsInbound.get(s);n!==void 0&&(this.log("replacing existing inbound steam %s",s),n.close()),this.log("create inbound stream %s",s);const i=new Bc(t,{maxDataLength:this.opts.maxInboundDataLength});this.streamsInbound.set(s,i),this.pipePeerReadStream(e,i.source).catch(o=>this.log(o))}addPeer(e,t,s){const n=e.toString();if(!this.peers.has(n)){this.log("new peer %p",e),this.peers.add(n),this.score.addPeer(n);const i=jc(s);i!==null?this.score.addIP(n,i):this.log("Added peer has no IP in current address %s %s",n,s.toString()),this.outbound.has(n)||this.outbound.set(n,t==="outbound")}}removePeer(e){const t=e.toString();if(!this.peers.has(t))return;this.log("delete peer %p",e),this.peers.delete(t);const s=this.streamsOutbound.get(t),n=this.streamsInbound.get(t);s&&this.metrics?.peersPerProtocol.inc({protocol:s.protocol},-1),s?.close(),n?.close(),this.streamsOutbound.delete(t),this.streamsInbound.delete(t);for(const i of this.topics.values())i.delete(t);for(const[i,o]of this.mesh)o.delete(t)===!0&&this.metrics?.onRemoveFromMesh(i,It.Dc,1);for(const i of this.fanout.values())i.delete(t);this.floodsubPeers.delete(t),this.gossip.delete(t),this.control.delete(t),this.outbound.delete(t),this.score.removePeer(t),this.acceptFromWhitelist.delete(t)}get started(){return this.status.code===ge.started}getMeshPeers(e){const t=this.mesh.get(e);return t?Array.from(t):[]}getSubscribers(e){const t=this.topics.get(e);return(t?Array.from(t):[]).map(s=>q(s))}getTopics(){return Array.from(this.subscriptions)}async pipePeerReadStream(e,t){try{await z(t,async s=>{for await(const n of s)try{const i=n.subarray(),o=Gc(i,this.decodeRpcLimits);if(this.metrics?.onRpcRecv(o,i.length),this.opts.awaitRpcHandler)try{await this.handleReceivedRpc(e,o)}catch(a){this.metrics?.onRpcRecvError(),this.log(a)}else this.handleReceivedRpc(e,o).catch(a=>{this.metrics?.onRpcRecvError(),this.log(a)})}catch(i){this.metrics?.onRpcDataError(),this.log(i)}})}catch(s){this.metrics?.onPeerReadStreamError(),this.handlePeerReadStreamError(s,e)}}handlePeerReadStreamError(e,t){this.log.error(e),this.onPeerDisconnected(t)}async handleReceivedRpc(e,t){if(!this.acceptFrom(e.toString())){this.log("received message from unacceptable peer %p",e),this.metrics?.rpcRecvNotAccepted.inc();return}const s=t.subscriptions?t.subscriptions.length:0,n=t.messages?t.messages.length:0;let i=0,o=0,a=0,l=0;if(t.control&&(t.control.ihave&&(i=t.control.ihave.length),t.control.iwant&&(o=t.control.iwant.length),t.control.graft&&(a=t.control.graft.length),t.control.prune&&(l=t.control.prune.length)),this.log(`rpc.from ${e.toString()} subscriptions ${s} messages ${n} ihave ${i} iwant ${o} graft ${a} prune ${l}`),t.subscriptions&&t.subscriptions.length>0){const u=[];t.subscriptions.forEach(h=>{const c=h.topic,d=h.subscribe===!0;if(c!=null){if(this.allowedTopics&&!this.allowedTopics.has(c))return;this.handleReceivedSubscription(e,c,d),u.push({topic:c,subscribe:d})}}),this.dispatchEvent(new R("subscription-change",{detail:{peerId:e,subscriptions:u}}))}if(t.messages)for(const u of t.messages){if(this.allowedTopics&&!this.allowedTopics.has(u.topic))continue;const h=this.handleReceivedMessage(e,u).catch(c=>{this.metrics?.onMsgRecvError(u.topic),this.log(c)});this.opts.awaitRpcMessageHandler&&await h}t.control&&await this.handleControlMessage(e.toString(),t.control)}handleReceivedSubscription(e,t,s){this.log("subscription update from %p topic %s",e,t);let n=this.topics.get(t);n==null&&(n=new Set,this.topics.set(t,n)),s?n.add(e.toString()):n.delete(e.toString())}async handleReceivedMessage(e,t){this.metrics?.onMsgRecvPreValidation(t.topic);const s=await this.validateReceivedMessage(e,t);switch(this.metrics?.onMsgRecvResult(t.topic,s.code),s.code){case De.duplicate:this.score.duplicateMessage(e.toString(),s.msgIdStr,t.topic),this.gossipTracer.deliverMessage(s.msgIdStr,!0),this.mcache.observeDuplicate(s.msgIdStr,e.toString());return;case De.invalid:if(s.msgIdStr){const n=s.msgIdStr;this.score.rejectMessage(e.toString(),n,t.topic,s.reason),this.gossipTracer.rejectMessage(n,s.reason)}else this.score.rejectInvalidMessage(e.toString(),t.topic);this.metrics?.onMsgRecvInvalid(t.topic,s);return;case De.valid:this.score.validateMessage(s.messageId.msgIdStr),this.gossipTracer.deliverMessage(s.messageId.msgIdStr),this.mcache.put(s.messageId,t,!this.opts.asyncValidation),this.subscriptions.has(t.topic)&&(!this.components.peerId.equals(e)||this.opts.emitSelf)&&(super.dispatchEvent(new R("gossipsub:message",{detail:{propagationSource:e,msgId:s.messageId.msgIdStr,msg:s.msg}})),super.dispatchEvent(new R("message",{detail:s.msg}))),this.opts.asyncValidation||this.forwardMessage(s.messageId.msgIdStr,t,e.toString())}}async validateReceivedMessage(e,t){const s=this.fastMsgIdFn?.(t),n=s!==void 0?this.fastMsgIdCache?.get(s):void 0;if(n)return{code:De.duplicate,msgIdStr:n};const i=await Nc(this.globalSignaturePolicy,t);if(!i.valid)return{code:De.invalid,reason:Oe.Error,error:i.error};const o=i.message;try{this.dataTransform&&(o.data=this.dataTransform.inboundTransform(t.topic,o.data))}catch(c){return this.log("Invalid message, transform failed",c),{code:De.invalid,reason:Oe.Error,error:he.TransformFailed}}const a=await this.msgIdFn(o),l=this.msgIdToStrFn(a),u={msgId:a,msgIdStr:l};if(s!==void 0&&this.fastMsgIdCache&&this.fastMsgIdCache.put(s,l)&&this.metrics?.fastMsgIdCacheCollision.inc(),this.seenCache.has(l))return{code:De.duplicate,msgIdStr:l};this.seenCache.put(l);const h=this.topicValidators.get(t.topic);if(h!=null){let c;try{c=await h(e,o)}catch(d){const p=d.code;p===hc&&(c=Ye.Ignore),p===lc?c=Ye.Reject:c=Ye.Ignore}if(c!==Ye.Accept)return{code:De.invalid,reason:Sr(c),msgIdStr:l}}return{code:De.valid,messageId:u,msg:o}}getScore(e){return this.score.score(e)}sendSubscriptions(e,t,s){this.sendRpc(e,{subscriptions:t.map(n=>({topic:n,subscribe:s}))})}async handleControlMessage(e,t){if(t===void 0)return;const s=t.ihave?this.handleIHave(e,t.ihave):[],n=t.iwant?this.handleIWant(e,t.iwant):[],i=t.graft?await this.handleGraft(e,t.graft):[];if(t.prune&&await this.handlePrune(e,t.prune),!s.length&&!n.length&&!i.length)return;const o=this.sendRpc(e,{messages:n,control:{iwant:s,prune:i}}),a=s[0]?.messageIDs;a&&(o?this.gossipTracer.addPromise(e,a):this.metrics?.iwantPromiseUntracked.inc(1))}acceptFrom(e){if(this.direct.has(e))return!0;const t=Date.now(),s=this.acceptFromWhitelist.get(e);if(s&&s.messagesAccepted<uc&&s.acceptUntil>=t)return s.messagesAccepted+=1,!0;const n=this.score.score(e);return n>=dc?this.acceptFromWhitelist.set(e,{messagesAccepted:0,acceptUntil:t+pc}):this.acceptFromWhitelist.delete(e),n>=this.opts.scoreThresholds.graylistThreshold}handleIHave(e,t){if(!t.length)return[];const s=this.score.score(e);if(s<this.opts.scoreThresholds.gossipThreshold)return this.log("IHAVE: ignoring peer %s with score below threshold [ score = %d ]",e,s),this.metrics?.ihaveRcvIgnored.inc({reason:Xt.LowScore}),[];const n=(this.peerhave.get(e)??0)+1;if(this.peerhave.set(e,n),n>ic)return this.log("IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring",e,n),this.metrics?.ihaveRcvIgnored.inc({reason:Xt.MaxIhave}),[];const i=this.iasked.get(e)??0;if(i>=_t)return this.log("IHAVE: peer %s has already advertised too many messages (%d); ignoring",e,i),this.metrics?.ihaveRcvIgnored.inc({reason:Xt.MaxIasked}),[];const o=new Map;if(t.forEach(({topicID:u,messageIDs:h})=>{if(!u||!h||!this.mesh.has(u))return;let c=0;h.forEach(d=>{const p=this.msgIdToStrFn(d);this.seenCache.has(p)||(o.set(p,d),c++)}),this.metrics?.onIhaveRcv(u,h.length,c)}),!o.size)return[];let a=o.size;a+i>_t&&(a=_t-i),this.log("IHAVE: Asking for %d out of %d messages from %s",a,o.size,e);let l=Array.from(o.values());return Ge(l),l=l.slice(0,a),this.iasked.set(e,i+a),[{messageIDs:l}]}handleIWant(e,t){if(!t.length)return[];const s=this.score.score(e);if(s<this.opts.scoreThresholds.gossipThreshold)return this.log("IWANT: ignoring peer %s with score below threshold [score = %d]",e,s),[];const n=new Map,i=new Map;let o=0;return t.forEach(({messageIDs:a})=>{a&&a.forEach(l=>{const u=this.msgIdToStrFn(l),h=this.mcache.getWithIWantCount(u,e);if(h==null){o++;return}if(i.set(h.msg.topic,1+(i.get(h.msg.topic)??0)),h.count>Y1){this.log("IWANT: Peer %s has asked for message %s too many times: ignoring request",e,l);return}n.set(u,h.msg)})}),this.metrics?.onIwantRcv(i,o),n.size?(this.log("IWANT: Sending %d messages to %s",n.size,e),Array.from(n.values())):(this.log("IWANT: Could not provide any wanted messages to %s",e),[])}async handleGraft(e,t){const s=[],n=this.score.score(e),i=Date.now();let o=this.opts.doPX;return t.forEach(({topicID:a})=>{if(!a)return;const l=this.mesh.get(a);if(!l){o=!1;return}if(l.has(e))return;if(this.direct.has(e)){this.log("GRAFT: ignoring request from direct peer %s",e),s.push(a),o=!1;return}const u=this.backoff.get(a)?.get(e);if(typeof u=="number"&&i<u){this.log("GRAFT: ignoring backed off peer %s",e),this.score.addPenalty(e,1,Qt.GraftBackoff),o=!1;const h=u+this.opts.graftFloodThreshold-this.opts.pruneBackoff;i<h&&this.score.addPenalty(e,1,Qt.GraftBackoff),this.addBackoff(e,a),s.push(a);return}if(n<0){this.log("GRAFT: ignoring peer %s with negative score: score=%d, topic=%s",e,n,a),s.push(a),o=!1,this.addBackoff(e,a);return}if(l.size>=this.opts.Dhi&&!this.outbound.get(e)){s.push(a),this.addBackoff(e,a);return}this.log("GRAFT: Add mesh link from %s in %s",e,a),this.score.graft(e,a),l.add(e),this.metrics?.onAddToMesh(a,ot.Subscribed,1)}),s.length?await Promise.all(s.map(a=>this.makePrune(e,a,o))):[]}async handlePrune(e,t){const s=this.score.score(e);for(const{topicID:n,backoff:i,peers:o}of t){if(n==null)continue;const a=this.mesh.get(n);if(!a)return;if(this.log("PRUNE: Remove mesh link to %s in %s",e,n),this.score.prune(e,n),a.has(e)&&(a.delete(e),this.metrics?.onRemoveFromMesh(n,It.Unsub,1)),typeof i=="number"&&i>0?this.doAddBackoff(e,n,i*1e3):this.addBackoff(e,n),o&&o.length){if(s<this.opts.scoreThresholds.acceptPXThreshold){this.log("PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]",e,s,n);continue}await this.pxConnect(o)}}}addBackoff(e,t){this.doAddBackoff(e,t,this.opts.pruneBackoff)}doAddBackoff(e,t,s){let n=this.backoff.get(t);n||(n=new Map,this.backoff.set(t,n));const i=Date.now()+s;(n.get(e)??0)<i&&n.set(e,i)}applyIwantPenalties(){this.gossipTracer.getBrokenPromises().forEach((e,t)=>{this.log("peer %s didn't follow up in %d IWANT requests; adding penalty",t,e),this.score.addPenalty(t,e,Qt.BrokenPromise)})}clearBackoff(){if(this.heartbeatTicks%Z1!==0)return;const e=Date.now();this.backoff.forEach((t,s)=>{t.forEach((n,i)=>{n<e&&t.delete(i)}),t.size===0&&this.backoff.delete(s)})}async directConnect(){const e=[];this.direct.forEach(t=>{this.streamsOutbound.has(t)||e.push(t)}),await Promise.all(e.map(async t=>await this.connect(t)))}async pxConnect(e){e.length>this.opts.prunePeers&&(Ge(e),e=e.slice(0,this.opts.prunePeers));const t=[];await Promise.all(e.map(async s=>{if(!s.peerID)return;const n=Ve(s.peerID).toString();if(!this.peers.has(n)){if(!s.signedPeerRecord){t.push(n);return}try{const i=await we.openAndCertify(s.signedPeerRecord,"libp2p-peer-record"),o=i.peerId;if(!i.peerId.equals(n)){this.log("bogus peer record obtained through px: peer ID %p doesn't match expected peer %p",o,n);return}if(!await this.components.peerStore.addressBook.consumePeerRecord(i)){this.log("bogus peer record obtained through px: could not add peer record to address book");return}t.push(n)}catch{this.log("bogus peer record obtained through px: invalid signature or not a peer record")}}})),t.length&&await Promise.all(t.map(async s=>await this.connect(s)))}async connect(e){this.log("Initiating connection with %s",e);const t=q(e),s=await this.components.connectionManager.openConnection(t);for(const n of this.multicodecs)for(const i of this.components.registrar.getTopologies(n))i.onConnect(t,s)}subscribe(e){if(this.status.code!==ge.started)throw new Error("Pubsub has not started");if(!this.subscriptions.has(e)){this.subscriptions.add(e);for(const t of this.peers.keys())this.sendSubscriptions(t,[e],!0)}this.join(e)}unsubscribe(e){if(this.status.code!==ge.started)throw new Error("Pubsub is not started");const t=this.subscriptions.delete(e);if(this.log("unsubscribe from %s - am subscribed %s",e,t),t)for(const s of this.peers.keys())this.sendSubscriptions(s,[e],!1);this.leave(e)}join(e){if(this.status.code!==ge.started)throw new Error("Gossipsub has not started");if(this.mesh.has(e))return;this.log("JOIN %s",e),this.metrics?.onJoin(e);const t=new Set,s=this.fanout.get(e);if(s&&(this.fanout.delete(e),this.fanoutLastpub.delete(e),s.forEach(n=>{!this.direct.has(n)&&this.score.score(n)>=0&&t.add(n)}),this.metrics?.onAddToMesh(e,ot.Fanout,t.size)),t.size<this.opts.D){const n=t.size;this.getRandomGossipPeers(e,this.opts.D,o=>!t.has(o)&&!this.direct.has(o)&&this.score.score(o)>=0).forEach(o=>{t.add(o)}),this.metrics?.onAddToMesh(e,ot.Random,t.size-n)}this.mesh.set(e,t),t.forEach(n=>{this.log("JOIN: Add mesh link to %s in %s",n,e),this.sendGraft(n,e)})}leave(e){if(this.status.code!==ge.started)throw new Error("Gossipsub has not started");this.log("LEAVE %s",e),this.metrics?.onLeave(e);const t=this.mesh.get(e);t&&(Promise.all(Array.from(t).map(async s=>(this.log("LEAVE: Remove mesh link to %s in %s",s,e),await this.sendPrune(s,e)))).catch(s=>{this.log("Error sending prunes to mesh peers",s)}),this.mesh.delete(e))}selectPeersToForward(e,t,s){const n=new Set,i=this.topics.get(e);i&&(this.direct.forEach(a=>{i.has(a)&&t!==a&&!s?.has(a)&&n.add(a)}),this.floodsubPeers.forEach(a=>{i.has(a)&&t!==a&&!s?.has(a)&&this.score.score(a)>=this.opts.scoreThresholds.publishThreshold&&n.add(a)}));const o=this.mesh.get(e);return o&&o.size>0&&o.forEach(a=>{t!==a&&!s?.has(a)&&n.add(a)}),n}selectPeersToPublish(e){const t=new Set,s={direct:0,floodsub:0,mesh:0,fanout:0},n=this.topics.get(e);if(n)if(this.opts.floodPublish)n.forEach(i=>{this.direct.has(i)?(t.add(i),s.direct++):this.score.score(i)>=this.opts.scoreThresholds.publishThreshold&&(t.add(i),s.floodsub++)});else{this.direct.forEach(o=>{n.has(o)&&(t.add(o),s.direct++)}),this.floodsubPeers.forEach(o=>{n.has(o)&&this.score.score(o)>=this.opts.scoreThresholds.publishThreshold&&(t.add(o),s.floodsub++)});const i=this.mesh.get(e);if(i&&i.size>0)i.forEach(o=>{t.add(o),s.mesh++});else{const o=this.fanout.get(e);if(o&&o.size>0)o.forEach(a=>{t.add(a),s.fanout++});else{const a=this.getRandomGossipPeers(e,this.opts.D,l=>this.score.score(l)>=this.opts.scoreThresholds.publishThreshold);a.size>0&&(this.fanout.set(e,a),a.forEach(l=>{t.add(l),s.fanout++}))}this.fanoutLastpub.set(e,Date.now())}}return{tosend:t,tosendCount:s}}forwardMessage(e,t,s,n){s&&this.score.deliverMessage(s,e,t.topic);const i=this.selectPeersToForward(t.topic,s,n);i.forEach(o=>{this.sendRpc(o,{messages:[t]})}),this.metrics?.onForwardMsg(t.topic,i.size)}async publish(e,t,s){const n=this.dataTransform?this.dataTransform.outboundTransform(e,t):t;if(this.publishConfig==null)throw Error("PublishError.Uninitialized");const{raw:i,msg:o}=await kc(this.publishConfig,e,t,n),a=await this.msgIdFn(o),l=this.msgIdToStrFn(a),u=s?.ignoreDuplicatePublishError??this.opts.ignoreDuplicatePublishError;if(this.seenCache.has(l)){if(u)return this.metrics?.onPublishDuplicateMsg(e),{recipients:[]};throw Error("PublishError.Duplicate")}const{tosend:h,tosendCount:c}=this.selectPeersToPublish(e),d=this.opts.emitSelf===!0&&this.subscriptions.has(e),p=s?.allowPublishToZeroPeers??this.opts.allowPublishToZeroPeers;if(h.size===0&&!p&&!d)throw Error("PublishError.InsufficientPeers");this.seenCache.put(l),this.mcache.put({msgId:a,msgIdStr:l},i,!0),this.publishedMessageIds.put(l);for(const g of h)this.sendRpc(g,{messages:[i]})||h.delete(g);return this.metrics?.onPublishMsg(e,c,h.size,i.data!=null?i.data.length:0),d&&(h.add(this.components.peerId.toString()),super.dispatchEvent(new R("gossipsub:message",{detail:{propagationSource:this.components.peerId,msgId:l,msg:o}})),super.dispatchEvent(new R("message",{detail:o}))),{recipients:Array.from(h.values()).map(g=>q(g))}}reportMessageValidationResult(e,t,s){if(s===Ye.Accept){const n=this.mcache.validate(e);if(this.metrics?.onReportValidationMcacheHit(n!==null),n!=null){const{message:i,originatingPeers:o}=n;this.score.deliverMessage(t.toString(),e,i.topic),this.forwardMessage(e,n.message,t.toString(),o),this.metrics?.onReportValidation(i.topic,s)}}else{const n=this.mcache.remove(e);if(this.metrics?.onReportValidationMcacheHit(n!==null),n){const i=Sr(s),{message:o,originatingPeers:a}=n;this.score.rejectMessage(t.toString(),e,o.topic,i);for(const l of a)this.score.rejectMessage(l,e,o.topic,i);this.metrics?.onReportValidation(o.topic,s)}}}sendGraft(e,t){const s=[{topicID:t}];this.sendRpc(e,{control:{graft:s}})}async sendPrune(e,t){const s=[await this.makePrune(e,t,this.opts.doPX)];this.sendRpc(e,{control:{prune:s}})}sendRpc(e,t){const s=this.streamsOutbound.get(e);if(!s)return this.log(`Cannot send RPC to ${e} as there is no open stream to it available`),!1;const n=this.control.get(e);n&&(this.piggybackControl(e,t,n),this.control.delete(e));const i=this.gossip.get(e);i&&(this.piggybackGossip(e,t,i),this.gossip.delete(e));const o=jn.encode(t).finish();try{s.push(o)}catch(a){return this.log.error(`Cannot send rpc to ${e}`,a),n&&this.control.set(e,n),i&&this.gossip.set(e,i),!1}return this.metrics?.onRpcSent(t,o.length),!0}piggybackControl(e,t,s){if(s.graft){t.control||(t.control={}),t.control.graft||(t.control.graft=[]);for(const n of s.graft)n.topicID&&this.mesh.get(n.topicID)?.has(e)&&t.control.graft.push(n)}if(s.prune){t.control||(t.control={}),t.control.prune||(t.control.prune=[]);for(const n of s.prune)n.topicID&&!this.mesh.get(n.topicID)?.has(e)&&t.control.prune.push(n)}}piggybackGossip(e,t,s){t.control||(t.control={}),t.control.ihave=s}async sendGraftPrune(e,t,s){const n=this.opts.doPX;for(const[i,o]of e){const a=o.map(h=>({topicID:h}));let l=[];const u=t.get(i);u&&(l=await Promise.all(u.map(async h=>await this.makePrune(i,h,n&&!(s.get(i)??!1)))),t.delete(i)),this.sendRpc(i,{control:{graft:a,prune:l}})}for(const[i,o]of t){const a=await Promise.all(o.map(async l=>await this.makePrune(i,l,n&&!(s.get(i)??!1))));this.sendRpc(i,{control:{prune:a}})}}emitGossip(e){const t=this.mcache.getGossipIDs(new Set(e.keys()));for(const[s,n]of e)this.doEmitGossip(s,n,t.get(s)??[])}doEmitGossip(e,t,s){if(!s.length||(Ge(s),s.length>_t&&this.log("too many messages for gossip; will truncate IHAVE list (%d messages)",s.length),!t.size))return;let n=this.opts.Dlazy;const i=W1*t.size;let o=t;i>n&&(n=i),n>o.size?n=o.size:o=Ge(Array.from(o)).slice(0,n),o.forEach(a=>{let l=s;s.length>_t&&(l=Ge(l.slice()).slice(0,_t)),this.pushGossip(a,{topicID:e,messageIDs:l})})}flush(){for(const[e,t]of this.gossip.entries())this.gossip.delete(e),this.sendRpc(e,{control:{ihave:t}});for(const[e,t]of this.control.entries())this.control.delete(e),this.sendRpc(e,{control:{graft:t.graft,prune:t.prune}})}pushGossip(e,t){this.log("Add gossip to %s",e);const s=this.gossip.get(e)||[];this.gossip.set(e,s.concat(t))}async makePrune(e,t,s){if(this.score.prune(e,t),this.streamsOutbound.get(e).protocol===br)return{topicID:t,peers:[]};const n=this.opts.pruneBackoff/1e3;if(!s)return{topicID:t,peers:[],backoff:n};const i=this.getRandomGossipPeers(t,this.opts.prunePeers,a=>a!==e&&this.score.score(a)>=0),o=await Promise.all(Array.from(i).map(async a=>{const l=q(a);return{peerID:l.toBytes(),signedPeerRecord:await this.components.peerStore.addressBook.getRawEnvelope(l)}}));return{topicID:t,peers:o,backoff:n}}async heartbeat(){const{D:e,Dlo:t,Dhi:s,Dscore:n,Dout:i,fanoutTTL:o}=this.opts;this.heartbeatTicks++;const a=new Map,l=g=>{let m=a.get(g);return m===void 0&&(m=this.score.score(g),a.set(g,m)),m},u=new Map,h=new Map,c=new Map;this.clearBackoff(),this.peerhave.clear(),this.metrics?.cacheSize.set({cache:"iasked"},this.iasked.size),this.iasked.clear(),this.applyIwantPenalties(),this.heartbeatTicks%this.opts.directConnectTicks===0&&await this.directConnect(),this.fastMsgIdCache?.prune(),this.seenCache.prune(),this.gossipTracer.prune(),this.publishedMessageIds.prune();const d=new Map;this.mesh.forEach((g,m)=>{const E=this.topics.get(m),I=new Set,N=new Set;if(d.set(m,N),E){const b=Ge(Array.from(E)),S=this.backoff.get(m);for(const P of b){const v=this.streamsOutbound.get(P);if(v&&this.multicodecs.includes(v.protocol)&&!g.has(P)&&!this.direct.has(P)){const H=l(P);(!S||!S.has(P))&&H>=0&&I.add(P),H>=this.opts.scoreThresholds.gossipThreshold&&N.add(P)}}}const A=(b,S)=>{this.log("HEARTBEAT: Remove mesh link to %s in %s",b,m),this.addBackoff(b,m),g.delete(b),l(b)>=this.opts.scoreThresholds.gossipThreshold&&N.add(b),this.metrics?.onRemoveFromMesh(m,S,1);const P=h.get(b);P?P.push(m):h.set(b,[m])},M=(b,S)=>{this.log("HEARTBEAT: Add mesh link to %s in %s",b,m),this.score.graft(b,m),g.add(b),N.delete(b),this.metrics?.onAddToMesh(m,S,1);const P=u.get(b);P?P.push(m):u.set(b,[m])};if(g.forEach(b=>{const S=l(b);S<0&&(this.log("HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s",b,S,m),A(b,It.BadScore),c.set(b,!0))}),g.size<t){const b=e-g.size;Dc(I,b).forEach(P=>{M(P,ot.NotEnough)})}if(g.size>s){let b=Array.from(g);b.sort((P,v)=>l(v)-l(P)),b=b.slice(0,n).concat(Ge(b.slice(n)));let S=0;if(b.slice(0,e).forEach(P=>{this.outbound.get(P)&&S++}),S<i){const P=H=>{const fe=b[H];for(let ms=H;ms>0;ms--)b[ms]=b[ms-1];b[0]=fe};if(S>0){let H=S;for(let fe=1;fe<e&&H>0;fe++)this.outbound.get(b[fe])&&(P(fe),H--)}let v=e-S;for(let H=e;H<b.length&&v>0;H++)this.outbound.get(b[H])&&(P(H),v--)}b.slice(e).forEach(P=>{A(P,It.Excess)})}if(g.size>=t){let b=0;if(g.forEach(S=>{this.outbound.get(S)&&b++}),b<i){const S=i-b;Dn(I,S,v=>this.outbound.get(v)===!0).forEach(v=>{M(v,ot.Outbound)})}}if(this.heartbeatTicks%this.opts.opportunisticGraftTicks===0&&g.size>1){const b=Array.from(g).sort((v,H)=>l(v)-l(H)),S=Math.floor(g.size/2),P=l(b[S]);if(P<this.opts.scoreThresholds.opportunisticGraftThreshold){const v=this.opts.opportunisticGraftPeers,H=Dn(I,v,fe=>l(fe)>P);for(const fe of H)this.log("HEARTBEAT: Opportunistically graft peer %s on topic %s",fe,m),M(fe,ot.Opportunistic)}}});const p=Date.now();this.fanoutLastpub.forEach((g,m)=>{g+o<p&&(this.fanout.delete(m),this.fanoutLastpub.delete(m))}),this.fanout.forEach((g,m)=>{const E=this.topics.get(m);g.forEach(M=>{(!E.has(M)||l(M)<this.opts.scoreThresholds.publishThreshold)&&g.delete(M)});const I=this.topics.get(m),N=[],A=new Set;if(d.set(m,A),I){const M=Ge(Array.from(I));for(const b of M){const S=this.streamsOutbound.get(b);if(S&&this.multicodecs.includes(S.protocol)&&!g.has(b)&&!this.direct.has(b)){const P=l(b);P>=this.opts.scoreThresholds.publishThreshold&&N.push(b),P>=this.opts.scoreThresholds.gossipThreshold&&A.add(b)}}}if(g.size<e){const M=e-g.size;N.slice(0,M).forEach(b=>{g.add(b),A?.delete(b)})}}),this.emitGossip(d),await this.sendGraftPrune(u,h,c),this.flush(),this.mcache.shift(),this.dispatchEvent(new R("gossipsub:heartbeat"))}getRandomGossipPeers(e,t,s=()=>!0){const n=this.topics.get(e);if(!n)return new Set;let i=[];return n.forEach(o=>{const a=this.streamsOutbound.get(o);a&&this.multicodecs.includes(a.protocol)&&s(o)&&i.push(o)}),i=Ge(i),t>0&&i.length>t&&(i=i.slice(0,t)),new Set(i)}onScrapeMetrics(e){e.mcacheSize.set(this.mcache.size),e.mcacheNotValidatedCount.set(this.mcache.notValidatedCount),e.cacheSize.set({cache:"direct"},this.direct.size),e.cacheSize.set({cache:"seenCache"},this.seenCache.size),e.cacheSize.set({cache:"fastMsgIdCache"},this.fastMsgIdCache?.size??0),e.cacheSize.set({cache:"publishedMessageIds"},this.publishedMessageIds.size),e.cacheSize.set({cache:"mcache"},this.mcache.size),e.cacheSize.set({cache:"score"},this.score.size),e.cacheSize.set({cache:"gossipTracer.promises"},this.gossipTracer.size),e.cacheSize.set({cache:"gossipTracer.requests"},this.gossipTracer.requestMsByMsgSize),e.cacheSize.set({cache:"topics"},this.topics.size),e.cacheSize.set({cache:"subscriptions"},this.subscriptions.size),e.cacheSize.set({cache:"mesh"},this.mesh.size),e.cacheSize.set({cache:"fanout"},this.fanout.size),e.cacheSize.set({cache:"peers"},this.peers.size),e.cacheSize.set({cache:"streamsOutbound"},this.streamsOutbound.size),e.cacheSize.set({cache:"streamsInbound"},this.streamsInbound.size),e.cacheSize.set({cache:"acceptFromWhitelist"},this.acceptFromWhitelist.size),e.cacheSize.set({cache:"gossip"},this.gossip.size),e.cacheSize.set({cache:"control"},this.control.size),e.cacheSize.set({cache:"peerhave"},this.peerhave.size),e.cacheSize.set({cache:"outbound"},this.outbound.size);let t=0;for(const o of this.backoff.values())t+=o.size;e.cacheSize.set({cache:"backoff"},t);for(const[o,a]of this.topics)e.topicPeersCount.set({topicStr:o},a.size);for(const[o,a]of this.mesh)e.meshPeerCounts.set({topicStr:o},a.size);const s=[],n=new Map;e.behaviourPenalty.reset();for(const o of this.peers.keys()){const a=this.score.score(o);s.push(a),n.set(o,a),e.behaviourPenalty.observe(this.score.peerStats.get(o)?.behaviourPenalty??0)}e.registerScores(s,this.opts.scoreThresholds),e.registerScorePerMesh(this.mesh,n);const i=Kc(this.peers.keys(),this.score.peerStats,this.score.params,this.score.peerIPs,e.topicStrToLabel);e.registerScoreWeights(i)}}to.multicodec=Zi;function Jc(r={}){return e=>new to(e,r)}const Zc=()=>({gossipsub:Jc({fallbackToFloodsub:!0,emitSelf:!0,maxInboundStreams:64,maxOutboundStreams:128})}),ht=_("libp2p:delegated-peer-routing"),Dr=3e4,e2=4;var Tr;(function(r){r[r.SENDING_QUERY=0]="SENDING_QUERY",r[r.PEER_RESPONSE=1]="PEER_RESPONSE",r[r.FINAL_PEER=2]="FINAL_PEER",r[r.QUERY_ERROR=3]="QUERY_ERROR",r[r.PROVIDER=4]="PROVIDER",r[r.VALUE=5]="VALUE",r[r.ADDING_PEER=6]="ADDING_PEER",r[r.DIALING_PEER=7]="DIALING_PEER"})(Tr||(Tr={}));var Ar;(function(r){r[r.PUT_VALUE=0]="PUT_VALUE",r[r.GET_VALUE=1]="GET_VALUE",r[r.ADD_PROVIDER=2]="ADD_PROVIDER",r[r.GET_PROVIDERS=3]="GET_PROVIDERS",r[r.FIND_NODE=4]="FIND_NODE",r[r.PING=5]="PING"})(Ar||(Ar={}));class t2{constructor(e){if(e==null)throw new Error("missing ipfs http client");this.client=e,this.started=!1,this.abortController=new AbortController,this.httpQueue=new Nt({concurrency:e2});const{protocol:t,host:s,port:n}=e.getEndpointConfig();ht(`enabled DelegatedPeerRouting via ${t}://${s}:${n}`)}isStarted(){return this.started}start(){this.started=!0}stop(){this.httpQueue.clear(),this.abortController.abort(),this.abortController=new AbortController,this.started=!1}async findPeer(e,t={}){ht("findPeer starts: %p",e),t.timeout=t.timeout??Dr,t.signal=vt([this.abortController.signal].concat(t.signal!=null?[t.signal]:[]));const s=me(),n=me();this.httpQueue.add(async()=>(s.resolve(),await n.promise));try{await s.promise;for await(const i of this.client.dht.findPeer(e,t))if(i.name==="FINAL_PEER")return{id:i.peer.id,multiaddrs:i.peer.multiaddrs,protocols:[]}}catch(i){throw ht.error("findPeer errored: %o",i),i}finally{n.resolve(),ht("findPeer finished: %p",e)}throw new w("Not found","ERR_NOT_FOUND")}async*getClosestPeers(e,t={}){let s;const n=Vt.asCID(e);n!=null?s=n:s=Ve(e),ht("getClosestPeers starts: %s",s),t.timeout=t.timeout??Dr,t.signal=vt([this.abortController.signal].concat(t.signal!=null?[t.signal]:[]));const i=me(),o=me();this.httpQueue.add(async()=>(i.resolve(),await o.promise));try{await i.promise;for await(const a of this.client.dht.query(s,t))a.name==="PEER_RESPONSE"&&(yield*a.closer.map(l=>({id:l.id,multiaddrs:l.multiaddrs,protocols:[]})))}catch(a){throw ht.error("getClosestPeers errored:",a),a}finally{o.resolve(),ht("getClosestPeers finished: %b",e)}}}function s2(r){return()=>new t2(r)}const Ce=_("libp2p:delegated-content-routing"),Es=3e4,n2=4,r2=2;var Or;(function(r){r[r.SENDING_QUERY=0]="SENDING_QUERY",r[r.PEER_RESPONSE=1]="PEER_RESPONSE",r[r.FINAL_PEER=2]="FINAL_PEER",r[r.QUERY_ERROR=3]="QUERY_ERROR",r[r.PROVIDER=4]="PROVIDER",r[r.VALUE=5]="VALUE",r[r.ADDING_PEER=6]="ADDING_PEER",r[r.DIALING_PEER=7]="DIALING_PEER"})(Or||(Or={}));var Cr;(function(r){r[r.PUT_VALUE=0]="PUT_VALUE",r[r.GET_VALUE=1]="GET_VALUE",r[r.ADD_PROVIDER=2]="ADD_PROVIDER",r[r.GET_PROVIDERS=3]="GET_PROVIDERS",r[r.FIND_NODE=4]="FIND_NODE",r[r.PING=5]="PING"})(Cr||(Cr={}));class i2{constructor(e){if(e==null)throw new Error("missing ipfs http client");this.client=e,this.started=!1,this.abortController=new AbortController,this.httpQueue=new Nt({concurrency:n2}),this.httpQueueRefs=new Nt({concurrency:r2});const{protocol:t,host:s,port:n}=e.getEndpointConfig();Ce(`enabled DelegatedContentRouting via ${t}://${s}:${n}`)}isStarted(){return this.started}start(){this.started=!0}stop(){this.httpQueue.clear(),this.httpQueueRefs.clear(),this.abortController.abort(),this.abortController=new AbortController,this.started=!1}async*findProviders(e,t={}){Ce("findProviders starts: %c",e),t.timeout=t.timeout??Es,t.signal=vt([this.abortController.signal].concat(t.signal!=null?[t.signal]:[]));const s=me(),n=me();this.httpQueue.add(async()=>(s.resolve(),await n.promise));try{await s.promise;for await(const i of this.client.dht.findProvs(e,t))i.name==="PROVIDER"&&(yield*i.providers.map(o=>({id:o.id,protocols:[],multiaddrs:o.multiaddrs})))}catch(i){throw Ce.error("findProviders errored:",i),i}finally{n.resolve(),Ce("findProviders finished: %c",e)}}async provide(e,t={}){Ce("provide starts: %c",e),t.timeout=t.timeout??Es,t.signal=vt([this.abortController.signal].concat(t.signal!=null?[t.signal]:[])),await this.httpQueueRefs.add(async()=>{await this.client.block.stat(e,t),await wt(this.client.dht.provide(e,t))}),Ce("provide finished: %c",e)}async put(e,t,s={}){Ce("put value start: %b",e),s.timeout=s.timeout??Es,s.signal=vt([this.abortController.signal].concat(s.signal!=null?[s.signal]:[])),await this.httpQueue.add(async()=>{await wt(this.client.dht.put(e,t,s))}),Ce("put value finished: %b",e)}async get(e,t={}){Ce("get value start: %b",e),t.timeout=t.timeout??Es,t.signal=vt([this.abortController.signal].concat(t.signal!=null?[t.signal]:[]));const s=await this.httpQueue.add(async()=>{for await(const n of this.client.dht.get(e,t))if(n.name==="VALUE")return Ce("get value finished: %b",e),n.value;throw f(new Error("Not found"),"ERR_NOT_FOUND")});if(s===void 0)throw f(new Error("Not found"),"ERR_NOT_FOUND");return s}}function o2(r){return()=>new i2(r)}const kr=421,a2=290,c2=2e3,Nr=64*1024,l2=5*1e3;class h2{constructor(e,t){this.label=e.label,this.open=me(),this.channel=e,this.channel.binaryType="arraybuffer",this.log=t.log,typeof this.channel.bufferedAmountLowThreshold=="number"&&(this.channel.bufferedAmountLowThreshold=Nr),e.addEventListener("message",n=>{t.onMessage(n)}),e.addEventListener("bufferedamountlow",()=>{this.log("stop backpressure: bufferedAmount %d",this.channel.bufferedAmount),this.open.resolve()}),e.addEventListener("open",()=>{this.open.resolve(),t.onOpen()}),e.addEventListener("close",()=>{t.onClose()}),e.addEventListener("error",n=>{if(n.error?.message==="Transport channel closed")return this.close();t.log.error('channel encounter an error in state "%s" message: "%s" detail: "%s',e.readyState,n.error?.message,n.error?.errorDetail);const i=n.error instanceof Error?n.error:new Error(`datachannel error: ${n.error?.message} ${n.error?.errorDetail}`);t.onError(f(i,"ERR_DATA_CHANNEL"))});let s=!1;this.closingInterval=setInterval(()=>{e.readyState==="closing"?(s&&t.onClose(),s=!0):s=!1},l2)}async send(e){await this.open.promise,this.channel.send(e),this.channel.bufferedAmount>Nr&&(this.log("start backpressure: bufferedAmount %d",this.channel.bufferedAmount),this.open=me())}close(){clearInterval(this.closingInterval),this.channel.close()}get bufferedAmount(){return this.channel.bufferedAmount}}const d2={iceServers:[{urls:["stun:stun.l.google.com:19302","stun:global.stun.twilio.com:3478"]}]};function u2(){if(typeof globalThis>"u")throw f(new Error("No WebRTC support detected"),"ERR_WEBRTC_SUPPORT");const r={RTCPeerConnection:globalThis.RTCPeerConnection??globalThis.mozRTCPeerConnection??globalThis.webkitRTCPeerConnection,RTCSessionDescription:globalThis.RTCSessionDescription??globalThis.mozRTCSessionDescription??globalThis.webkitRTCSessionDescription,RTCIceCandidate:globalThis.RTCIceCandidate??globalThis.mozRTCIceCandidate??globalThis.webkitRTCIceCandidate};if(r.RTCPeerConnection==null)throw f(new Error("No WebRTC support detected"),"ERR_WEBRTC_SUPPORT");return r}class so extends W{constructor(e){super(),this.id=e.id??ki(Ln(4),"hex").slice(0,7),this.log=_(`libp2p:webrtc-peer:${e.logPrefix}:${this.id}`),this.wrtc=e.wrtc??u2(),this.peerConnection=new this.wrtc.RTCPeerConnection(Object.assign({},d2,e.peerConnectionConfig)),this.closed=!1,this.connected=me(),this.source=es(),this.sink=async t=>{if(await this.connected.promise,this.channel==null)throw f(new Error("Connected but no channel?!"),"ERR_DATA_CHANNEL");for await(const s of t)await this.channel.send(s);await this.close()}}handleDataChannelEvent(e){const t=e.channel;if(t==null){this.close(f(new Error("Data channel event is missing `channel` property"),"ERR_DATA_CHANNEL")).catch(s=>{this.log("Error closing after event channel was found to be null",s)});return}this.channel=new h2(t,{log:this.log,onMessage:s=>{this.source.push(new Uint8Array(s.data))},onOpen:()=>{this.connected.resolve(),this.dispatchEvent(new R("ready"))},onClose:()=>{this.close().catch(s=>{this.log("error closing connection after channel close",s)})},onError:s=>{this.close(s).catch(n=>{this.log("error closing connection after channel error",n)})}})}async close(e){if(this.closed=!0,e==null&&this.channel!=null)for(;this.channel.bufferedAmount>0;)await Ni(100);this.channel?.close(),this.peerConnection.close(),this.source.end(e),this.dispatchEvent(new R("close"))}}class no extends W{constructor(e){super(),this.log=e.log,this.peerConnection=e.peerConnection,this.wrtc=e.wrtc,this.status="idle",this.peerConnection.addEventListener("negotiationneeded",()=>{this.log("peer connection negotiation needed"),this.handleRenegotiate({type:"renegotiate"}).catch(t=>{this.log.error("could not renegotiate %o",t)})})}async handleSignal(e){if(this.log('incoming signal "%s"',e.type),e.type==="offer")return await this.handleOffer(e);if(e.type==="answer")return await this.handleAnswer(e);if(e.type==="candidate")return await this.handleCandidate(e);if(e.type==="renegotiate")return await this.handleRenegotiate(e);if(e.type==="goodbye")return await this.handleGoodye(e);this.log(`Unknown signal type ${e.type}`)}async handleOffer(e){}async handleAnswer(e){}async handleRenegotiate(e){}async handleGoodye(e){this.peerConnection.close()}async handleCandidate(e){const t=new this.wrtc.RTCIceCandidate(e.candidate);try{await this.peerConnection.addIceCandidate(t)}catch(s){if(t.address==null||t.address.endsWith(".local"))this.log("ignoring unsupported ICE candidate.");else throw f(s,"ERR_ADD_ICE_CANDIDATE")}}}const Mr=_("libp2p:webrtc-peer:receiver");class p2 extends so{constructor(e={}){super({...e,logPrefix:"receiver"}),this.handshake=new f2({log:this.log,peerConnection:this.peerConnection,wrtc:this.wrtc,answerOptions:e.answerOptions}),this.handshake.addEventListener("signal",t=>this.dispatchEvent(new R("signal",{detail:t.detail}))),this.peerConnection.addEventListener("datachannel",t=>{this.handleDataChannelEvent(t)})}handleSignal(e){this.handshake.handleSignal(e).catch(t=>{this.log("error handling signal %o %o",e,t)})}}class f2 extends no{constructor(e){super(e),this.options=e,this.status="idle",this.iceCandidates=[]}async handleRenegotiate(){Mr.trace("renegotiate"),this.dispatchEvent(new R("signal",{detail:{type:"renegotiate"}}))}async handleOffer(e){await this.peerConnection.setRemoteDescription(new this.wrtc.RTCSessionDescription(e));for(const s of this.iceCandidates)await this.handleCandidate(s);this.iceCandidates=[];const t=await this.peerConnection.createAnswer(this.options.answerOptions);await this.peerConnection.setLocalDescription(t),Mr.trace("handle offer",this.peerConnection.localDescription),this.dispatchEvent(new R("signal",{detail:this.peerConnection.localDescription??t}))}async handleCandidate(e){if(this.peerConnection.remoteDescription==null||this.peerConnection.remoteDescription.type==null){this.iceCandidates.push(e);return}await super.handleCandidate(e)}}const ln=_("libp2p:webrtc-peer:initator"),g2=1e3;class y2 extends so{constructor(e={}){super({...e,logPrefix:"initiator"}),this.handleDataChannelEvent({channel:this.peerConnection.createDataChannel(e.dataChannelLabel??ki(Ln(20),"hex").slice(0,7),e.dataChannelInit)}),this.handshake=new m2({log:this.log,peerConnection:this.peerConnection,wrtc:this.wrtc,offerOptions:e.offerOptions}),this.handshake.addEventListener("signal",t=>{this.dispatchEvent(new R("signal",{detail:t.detail}))})}handleSignal(e){this.handshake.handleSignal(e).catch(t=>{this.log("error handling signal %o %o",e,t)})}}class m2 extends no{constructor(e){super(e),this.options=e,this.status="idle",this.peerConnection.addEventListener("icecandidate",t=>{if(t.candidate==null)return;const s={type:"candidate",candidate:{candidate:t.candidate.candidate,sdpMLineIndex:t.candidate.sdpMLineIndex,sdpMid:t.candidate.sdpMid}};ln.trace("create candidate",s),this.dispatchEvent(new R("signal",{detail:s})),this.dispatchEvent(new R("ice-candidate"))})}async handleRenegotiate(){if(this.status==="negotiating"){this.log("already negotiating, queueing");return}this.status="negotiating";const e=await this.peerConnection.createOffer(this.options.offerOptions);await this.peerConnection.setLocalDescription(e),await oa(this,"ice-candidate"),await Ni(g2),ln.trace("renegotiate",this.peerConnection.localDescription),this.dispatchEvent(new R("signal",{detail:this.peerConnection.localDescription??e}))}async handleAnswer(e){ln.trace("handle answer",e),await this.peerConnection.setRemoteDescription(new this.wrtc.RTCSessionDescription(e)),this.status="idle"}}const hn=_("libp2p:webrtc-star:socket");function ro(r,e){const{sink:t,source:s}=r,n={remoteAddr:e.remoteAddr,async sink(i){e.signal!=null&&(i=lt(i,e.signal));try{await t(i)}catch(o){o.type!=="aborted"&&hn.error(o)}},source:e.signal!=null?lt(s,e.signal):s,timeline:{open:Date.now()},async close(){if(r.closed)return;const i=Date.now(),o=setTimeout(()=>{if(n.remoteAddr!=null){const{host:a,port:l}=n.remoteAddr.toOptions();hn("timeout closing socket to %s:%s after %dms, destroying it manually",a,l,Date.now()-i)}r.closed||r.close().catch(a=>{hn.error("could not close socket",a)})},c2);try{await r.close()}finally{clearTimeout(o)}}};return r.addEventListener("close",()=>{n.timeline.close==null&&(n.timeline.close=Date.now())},{once:!0}),n}function io(r){const e=r.toString().split("/"),t=r.protos()[1].name,s=r.protos()[2].name,n=r.stringTuples()[1][1];if(t!=="tcp"||s!=="ws"&&s!=="wss")throw new Error(`invalid multiaddr: ${r.toString()}`);if(!Ko(r))return`http://${e[2]}:${e[4]}`;if(s==="ws")return`http://${e[2]}${n==null||n==="80"?"":`:${n}`}`;if(s==="wss")return`https://${e[2]}${n==null||n==="443"?"":`:${n}`}`;throw new Error("invalid multiaddr: "+r.toString())}function w2(r){const e="/libp2p-webrtc-star";if(r.startsWith(e)){r=r.substring(e.length,r.length);let t=G(r);const s=t.stringTuples().filter(n=>n[0]===421)[0];if(s[1]==null)throw new Error("invalid multiaddr: "+r);t=t.decapsulate("p2p"),t=t.encapsulate("/p2p-webrtc-star"),t=t.encapsulate(`/p2p/${s[1]}`),r=t.toString()}return r}const ae=_("libp2p:webrtc-star:listener"),E2={transports:["websocket"],path:"/socket.io-next/"};class b2 extends W{constructor(e,t,s,n,i){super(),this.signallingAddr=t,this.socket=aa(e,E2),this.connections=[],this.channels=new Map,this.pendingSignals=new Map,this.upgrader=s,this.handler=n,this.channelOptions=i,this.handleWsHandshake=this.handleWsHandshake.bind(this);let o=!1;this.socket.on("connect_error",a=>{o&&a.type==="TransportError"||this.dispatchEvent(new R("error",{detail:a}))}),this.socket.on("error",a=>{this.dispatchEvent(new R("error",{detail:a}))}),this.socket.on("ws-handshake",this.handleWsHandshake),this.socket.on("ws-peer",a=>{this.dispatchEvent(new R("peer",{detail:a}))}),this.socket.on("connect",()=>{this.socket.emit("ss-join",this.signallingAddr.toString()),o&&this.dispatchEvent(new R("reconnect"))}),this.socket.once("connect",()=>{o=!0,this.dispatchEvent(new R("listening"))}),this.socket.on("disconnect",()=>{this.dispatchEvent(new R("disconnect"))})}_createChannel(e,t,s){const n={...this.channelOptions},i=new p2(n),o=a=>{const l=a.detail;ae.error("incoming connection errored",l)};return i.addEventListener("error",o),i.addEventListener("close",()=>{i.removeEventListener("error",o)},{once:!0}),i.addEventListener("signal",a=>{const l=a.detail;this.socket.emit("ss-handshake",{intentId:e,srcMultiaddr:t,dstMultiaddr:s,answer:!0,signal:l})}),i.addEventListener("ready",()=>{const a=ro(i,{remoteAddr:this.signallingAddr});ae("new inbound connection %s",a.remoteAddr);try{this.upgrader.upgradeInbound(a).then(l=>{ae("inbound connection %s upgraded",a.remoteAddr),this.connections.push(a);const u=()=>{this.connections=this.connections.filter(h=>h!==a),this.channels.delete(e),this.pendingSignals.delete(e)};i.addEventListener("close",u,{once:!0}),this.dispatchEvent(new R("connection",{detail:l})),this.handler(l)}).catch(l=>{ae.error("inbound connection failed to upgrade",l),a.close().catch(u=>{ae.error("inbound connection failed to close after failing to upgrade",u)})})}catch(l){ae.error("inbound connection failed to upgrade",l),a.close().catch(u=>{ae.error("inbound connection failed to close after failing to upgrade",u)})}},{once:!0}),i}handleWsHandshake(e){if(ae('incoming handshake. signal type "%s" is answer %s',e.signal.type,e.answer),e.answer===!0||e.err!=null||e.intentId==null)return;const t=e.intentId;let s=this.pendingSignals.get(t);s==null&&(s=[],this.pendingSignals.set(t,s)),s.push(e);let n=this.channels.get(t);if(n==null){if(e.signal.type!=="offer"){ae("handshake is not an offer and channel does not exist, buffering until we receive an offer");return}ae("creating new channel to handle offer handshake"),n=this._createChannel(e.intentId,e.srcMultiaddr,e.dstMultiaddr),this.channels.set(t,n)}else ae("channel already exists, using it to handle handshake");for(;s.length>0;){const i=s.shift();i?.signal!=null&&n.handleSignal(i.signal)}}async close(){this.socket.emit("ss-leave",this.signallingAddr.toString()),this.socket.removeAllListeners(),this.socket.close(),await Promise.all([...this.connections.map(async e=>await e.close()),...Array.from(this.channels.values()).map(async e=>await e.close())]),this.dispatchEvent(new R("close"))}}class _2 extends W{constructor(e,t,s,n,i){super(),this.upgrader=e,this.handler=t,this.peerId=s,this.transport=n,this.options=i}async listen(e){if(this.listeningAddr!=null)throw f(new Error("listener already in use"),"ERR_ALREADY_LISTENING");const t=me();this.listeningAddr=e;let s;e.protoCodes().includes(kr)?s=e:s=e.encapsulate(`/p2p/${this.peerId.toString()}`);const n=this.signallingUrl=io(e);ae("connecting to signalling server on: %s",this.signallingUrl);const i=new b2(this.signallingUrl,s,this.upgrader,this.handler,this.options.channelOptions);return i.addEventListener("error",o=>{const a=o.detail;ae("error connecting to signalling server %o",a),i.close().catch(l=>{ae.error("error closing server after error",l)}),t.reject(a)}),i.addEventListener("listening",()=>{ae("connected to signalling server"),this.dispatchEvent(new R("listening")),t.resolve()}),i.addEventListener("peer",o=>{this.transport.peerDiscovered(o.detail)}),i.addEventListener("connection",o=>{const a=o.detail;if(a.remoteAddr==null)try{a.remoteAddr=e.decapsulateCode(kr).encapsulate(`/p2p/${a.remotePeer.toString()}`)}catch(l){ae.error("could not determine remote address",l)}this.dispatchEvent(new R("connection",{detail:a}))}),i.addEventListener("disconnect",()=>{this.transport.sigServers.delete(n)}),i.addEventListener("reconnect",()=>{this.transport.sigServers.set(n,i)}),this.transport.sigServers.set(this.signallingUrl,i),await t.promise}async close(){if(this.signallingUrl!=null){const e=this.transport.sigServers.get(this.signallingUrl);e!=null&&(await e.close(),this.transport.sigServers.delete(this.signallingUrl))}this.dispatchEvent(new R("close")),this.listeningAddr=void 0}getAddrs(){return this.listeningAddr!=null?[this.listeningAddr]:[]}}function R2(r,e,t,s,n){return new _2(r,e,t,s,n)}const er=Symbol.for("@libp2p/transport");var Ct;(function(r){r[r.FATAL_ALL=0]="FATAL_ALL",r[r.NO_FATAL=1]="NO_FATAL"})(Ct||(Ct={}));const ys=Symbol.for("@libp2p/peer-discovery"),S2="RTCPeerConnection"in globalThis,dt=_("libp2p:webrtc-star"),v2=()=>{};class I2 extends W{constructor(){super(...arguments),this.started=!1}get[ys](){return!0}get[Symbol.toStringTag](){return"@libp2p/webrtc-star-discovery"}isStarted(){return this.started}async start(){this.started=!0}async stop(){this.started=!1}dispatchEvent(e){return this.isStarted()?super.dispatchEvent(e):!1}}class P2{constructor(e){e?.wrtc!=null&&(this.wrtc=e.wrtc),this.sigServers=new Map,this._discovery=new I2,this.discovery=()=>this._discovery,this.peerDiscovered=this.peerDiscovered.bind(this)}get[er](){return!0}get[Symbol.toStringTag](){return"@libp2p/webrtc-star"}async dial(e,t){const s=await this._connect(e,t),n=ro(s,{remoteAddr:e,signal:t.signal});dt("new outbound connection %s",n.remoteAddr);const i=await t.upgrader.upgradeOutbound(n);return dt("outbound connection %s upgraded",n.remoteAddr),i}async _connect(e,t){if(t.signal?.aborted===!0)throw new pr;const s={...t.channelOptions??{}};this.wrtc!=null&&(s.wrtc=this.wrtc);const n=e.toOptions(),i=D(Ln(36),"hex");return await new Promise((o,a)=>{const l=this.sigServers.get(io(e));if(l?.socket==null)return a(f(new Error("unknown signal server to use"),"ERR_UNKNOWN_SIGNAL_SERVER"));let u=!1;dt("dialing %s:%s",n.host,n.port);const h=new y2(s),c=m=>{const E=m.detail;if(!u){const I=`connection error ${n.host}:${n.port}: ${E.message}`;dt.error(I),g(E)}},d=()=>{u=!0,dt("connection opened %s:%s",n.host,n.port),g()},p=()=>{dt.error("connection aborted %s:%s",n.host,n.port),h.close().finally(()=>{g(new pr)})},g=m=>{h.removeEventListener("ready",d),t.signal?.removeEventListener("abort",p),m==null?o(h):a(m)};h.addEventListener("ready",d,{once:!0}),h.addEventListener("close",()=>{h.removeEventListener("error",c)}),t.signal?.addEventListener("abort",p),h.addEventListener("signal",m=>{const E=m.detail;l.socket.emit("ss-handshake",{intentId:i,srcMultiaddr:l.signallingAddr.toString(),dstMultiaddr:e.toString(),signal:E})}),l.socket.on("ws-handshake",m=>{m.intentId===i&&m.err!=null&&h.close().finally(()=>{a(f(new Error(m.err),"ERR_SIGNALLING_FAILED"))}),!(m.intentId!==i||m.answer==null||h.closed)&&h.handleSignal(m.signal)})})}createListener(e){if(!S2&&this.wrtc==null)throw f(new Error("no WebRTC support"),"ERR_NO_WEBRTC_SUPPORT");if(e.channelOptions=e.channelOptions??{},this.wrtc!=null&&(e.channelOptions.wrtc=this.wrtc),this.peerId==null)throw f(new Error("PeerId not set"),"ERR_MISSING_PEER_ID");return R2(e.upgrader,e.handler??v2,this.peerId,this,e)}filter(e){return e=Array.isArray(e)?e:[e],e.filter(t=>t.protoCodes().includes(a2)?!1:Fo.matches(t))}peerDiscovered(e){dt("peer discovered: %s",e),e=w2(e);const t=G(e),s=t.getPeerId();if(s==null)return;const n=q(s);this._discovery.dispatchEvent(new R("peer",{detail:{id:n,multiaddrs:[t],protocols:[]}}))}}function D2(r={}){const e=new P2(r);return{transport:t=>(e.peerId=t.peerId,e),discovery:e.discovery}}function T2(){const r=D2();return{transports:[r.transport],peerDiscovery:[r.discovery],connectionManager:{maxParallelDials:150,maxDialsPerPeer:4,dialTimeout:1e4,autoDial:!0},nat:{enabled:!1}}}function ft(r){return r!=null&&typeof r.start=="function"&&typeof r.stop=="function"}var L;(function(r){r.NOT_STARTED_YET="The libp2p node is not started yet",r.DHT_DISABLED="DHT is not available",r.PUBSUB_DISABLED="PubSub is not available",r.CONN_ENCRYPTION_REQUIRED="At least one connection encryption module is required",r.ERR_TRANSPORTS_REQUIRED="At least one transport module is required",r.ERR_PROTECTOR_REQUIRED="Private network is enforced, but no protector was provided",r.NOT_FOUND="Not found"})(L||(L={}));var y;(function(r){r.DHT_DISABLED="ERR_DHT_DISABLED",r.ERR_PUBSUB_DISABLED="ERR_PUBSUB_DISABLED",r.PUBSUB_NOT_STARTED="ERR_PUBSUB_NOT_STARTED",r.DHT_NOT_STARTED="ERR_DHT_NOT_STARTED",r.CONN_ENCRYPTION_REQUIRED="ERR_CONN_ENCRYPTION_REQUIRED",r.ERR_TRANSPORTS_REQUIRED="ERR_TRANSPORTS_REQUIRED",r.ERR_PROTECTOR_REQUIRED="ERR_PROTECTOR_REQUIRED",r.ERR_PEER_DIAL_INTERCEPTED="ERR_PEER_DIAL_INTERCEPTED",r.ERR_CONNECTION_INTERCEPTED="ERR_CONNECTION_INTERCEPTED",r.ERR_INVALID_PROTOCOLS_FOR_STREAM="ERR_INVALID_PROTOCOLS_FOR_STREAM",r.ERR_CONNECTION_ENDED="ERR_CONNECTION_ENDED",r.ERR_CONNECTION_FAILED="ERR_CONNECTION_FAILED",r.ERR_NODE_NOT_STARTED="ERR_NODE_NOT_STARTED",r.ERR_ALREADY_ABORTED="ERR_ALREADY_ABORTED",r.ERR_TOO_MANY_ADDRESSES="ERR_TOO_MANY_ADDRESSES",r.ERR_NO_VALID_ADDRESSES="ERR_NO_VALID_ADDRESSES",r.ERR_RELAYED_DIAL="ERR_RELAYED_DIAL",r.ERR_DIALED_SELF="ERR_DIALED_SELF",r.ERR_DISCOVERED_SELF="ERR_DISCOVERED_SELF",r.ERR_DUPLICATE_TRANSPORT="ERR_DUPLICATE_TRANSPORT",r.ERR_ENCRYPTION_FAILED="ERR_ENCRYPTION_FAILED",r.ERR_HOP_REQUEST_FAILED="ERR_HOP_REQUEST_FAILED",r.ERR_INVALID_KEY="ERR_INVALID_KEY",r.ERR_INVALID_MESSAGE="ERR_INVALID_MESSAGE",r.ERR_INVALID_PARAMETERS="ERR_INVALID_PARAMETERS",r.ERR_INVALID_PEER="ERR_INVALID_PEER",r.ERR_MUXER_UNAVAILABLE="ERR_MUXER_UNAVAILABLE",r.ERR_NOT_FOUND="ERR_NOT_FOUND",r.ERR_TIMEOUT="ERR_TIMEOUT",r.ERR_TRANSPORT_UNAVAILABLE="ERR_TRANSPORT_UNAVAILABLE",r.ERR_TRANSPORT_DIAL_FAILED="ERR_TRANSPORT_DIAL_FAILED",r.ERR_UNSUPPORTED_PROTOCOL="ERR_UNSUPPORTED_PROTOCOL",r.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED="ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED",r.ERR_INVALID_MULTIADDR="ERR_INVALID_MULTIADDR",r.ERR_SIGNATURE_NOT_VALID="ERR_SIGNATURE_NOT_VALID",r.ERR_FIND_SELF="ERR_FIND_SELF",r.ERR_NO_ROUTERS_AVAILABLE="ERR_NO_ROUTERS_AVAILABLE",r.ERR_CONNECTION_NOT_MULTIPLEXED="ERR_CONNECTION_NOT_MULTIPLEXED",r.ERR_NO_DIAL_TOKENS="ERR_NO_DIAL_TOKENS",r.ERR_KEYCHAIN_REQUIRED="ERR_KEYCHAIN_REQUIRED",r.ERR_INVALID_CMS="ERR_INVALID_CMS",r.ERR_MISSING_KEYS="ERR_MISSING_KEYS",r.ERR_NO_KEY="ERR_NO_KEY",r.ERR_INVALID_KEY_NAME="ERR_INVALID_KEY_NAME",r.ERR_INVALID_KEY_TYPE="ERR_INVALID_KEY_TYPE",r.ERR_KEY_ALREADY_EXISTS="ERR_KEY_ALREADY_EXISTS",r.ERR_INVALID_KEY_SIZE="ERR_INVALID_KEY_SIZE",r.ERR_KEY_NOT_FOUND="ERR_KEY_NOT_FOUND",r.ERR_OLD_KEY_NAME_INVALID="ERR_OLD_KEY_NAME_INVALID",r.ERR_NEW_KEY_NAME_INVALID="ERR_NEW_KEY_NAME_INVALID",r.ERR_PASSWORD_REQUIRED="ERR_PASSWORD_REQUIRED",r.ERR_PEM_REQUIRED="ERR_PEM_REQUIRED",r.ERR_CANNOT_READ_KEY="ERR_CANNOT_READ_KEY",r.ERR_MISSING_PRIVATE_KEY="ERR_MISSING_PRIVATE_KEY",r.ERR_MISSING_PUBLIC_KEY="ERR_MISSING_PUBLIC_KEY",r.ERR_INVALID_OLD_PASS_TYPE="ERR_INVALID_OLD_PASS_TYPE",r.ERR_INVALID_NEW_PASS_TYPE="ERR_INVALID_NEW_PASS_TYPE",r.ERR_INVALID_PASS_LENGTH="ERR_INVALID_PASS_LENGTH",r.ERR_NOT_IMPLEMENTED="ERR_NOT_IMPLEMENTED",r.ERR_WRONG_PING_ACK="ERR_WRONG_PING_ACK",r.ERR_INVALID_RECORD="ERR_INVALID_RECORD",r.ERR_ALREADY_SUCCEEDED="ERR_ALREADY_SUCCEEDED",r.ERR_NO_HANDLER_FOR_PROTOCOL="ERR_NO_HANDLER_FOR_PROTOCOL",r.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS="ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS",r.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS="ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS",r.ERR_CONNECTION_DENIED="ERR_CONNECTION_DENIED"})(y||(y={}));async function*Tn(r,e){yield*Un(r,async t=>(await e.addressBook.add(t.id,t.multiaddrs),t))}function oo(r){const e=new Set;return xn(r,t=>e.has(t.id.toString())?!1:(e.add(t.id.toString()),!0))}async function*ao(r,e=1){let t=0;for await(const s of r)t++,yield s;if(t<e)throw f(new Error("not found"),"NOT_FOUND")}const Lr=_("libp2p:peer-routing");class A2{constructor(e,t){this.components=e,this.routers=t.routers??[],this.refreshManagerInit=t.refreshManager??{},this.started=!1,this._findClosestPeersTask=this._findClosestPeersTask.bind(this)}isStarted(){return this.started}async start(){this.started||this.routers.length===0||this.timeoutId!=null||this.refreshManagerInit.enabled===!1||(this.timeoutId=Os.setDelayedInterval(this._findClosestPeersTask,this.refreshManagerInit.interval,this.refreshManagerInit.bootDelay),this.started=!0)}async _findClosestPeersTask(){if(this.abortController==null)try{this.abortController=new ee.TimeoutController(this.refreshManagerInit.timeout??1e4);try{Y.setMaxListeners?.(1/0,this.abortController.signal)}catch{}await wt(this.getClosestPeers(this.components.peerId.toBytes(),{signal:this.abortController.signal}))}catch(e){Lr.error(e)}finally{this.abortController?.clear(),this.abortController=void 0}}async stop(){Os.clearDelayedInterval(this.timeoutId),this.abortController?.abort(),this.started=!1}async findPeer(e,t){if(this.routers.length===0)throw f(new Error("No peer routers available"),y.ERR_NO_ROUTERS_AVAILABLE);if(e.toString()===this.components.peerId.toString())throw f(new Error("Should not try to find self"),y.ERR_FIND_SELF);const s=await z(Ke(...this.routers.map(n=>async function*(){try{yield await n.findPeer(e,t)}catch(i){Lr.error(i)}}())),n=>xn(n,Boolean),n=>Tn(n,this.components.peerStore),async n=>await Et(n));if(s!=null)return s;throw f(new Error(L.NOT_FOUND),y.ERR_NOT_FOUND)}async*getClosestPeers(e,t){if(this.routers.length===0)throw f(new Error("No peer routers available"),y.ERR_NO_ROUTERS_AVAILABLE);yield*z(Ke(...this.routers.map(s=>s.getClosestPeers(e,t))),s=>Tn(s,this.components.peerStore),s=>oo(s),s=>ao(s))}}class O2{constructor(e,t){this.routers=t.routers??[],this.started=!1,this.components=e}isStarted(){return this.started}async start(){this.started=!0}async stop(){this.started=!1}async*findProviders(e,t={}){if(this.routers.length===0)throw f(new Error("No content this.routers available"),y.ERR_NO_ROUTERS_AVAILABLE);yield*z(Ke(...this.routers.map(s=>s.findProviders(e,t))),s=>Tn(s,this.components.peerStore),s=>oo(s),s=>ao(s))}async provide(e,t={}){if(this.routers.length===0)throw f(new Error("No content routers available"),y.ERR_NO_ROUTERS_AVAILABLE);await Promise.all(this.routers.map(async s=>await s.provide(e,t)))}async put(e,t,s){if(!this.isStarted())throw f(new Error(L.NOT_STARTED_YET),y.DHT_NOT_STARTED);const n=this.components.dht;n!=null&&await wt(n.put(e,t,s))}async get(e,t){if(!this.isStarted())throw f(new Error(L.NOT_STARTED_YET),y.DHT_NOT_STARTED);const s=this.components.dht;if(s!=null){for await(const n of s.get(e,t))if(n.name==="VALUE")return n.value}throw f(new Error(L.NOT_FOUND),y.ERR_NOT_FOUND)}async*getMany(e,t,s){if(!this.isStarted())throw f(new Error(L.NOT_STARTED_YET),y.DHT_NOT_STARTED);if(t==null||t===0)return;let n=0;const i=this.components.dht;if(i!=null){for await(const o of i.get(e,s))if(o.name==="VALUE"&&(yield{from:o.from,val:o.value},n++,n===t))break}if(n===0)throw f(new Error(L.NOT_FOUND),y.ERR_NOT_FOUND)}}const C2=r=>r;class k2 extends W{constructor(e,t){super();const{listen:s=[],announce:n=[]}=t;this.components=e,this.listen=s.map(i=>i.toString()),this.announce=new Set(n.map(i=>i.toString())),this.observed=new Set,this.announceFilter=t.announceFilter??C2}getListenAddrs(){return Array.from(this.listen).map(e=>G(e))}getAnnounceAddrs(){return Array.from(this.announce).map(e=>G(e))}getObservedAddrs(){return Array.from(this.observed).map(e=>G(e))}confirmObservedAddr(e){}removeObservedAddr(e){}addObservedAddr(e){let t=G(e);const s=t.getPeerId();s!=null&&q(s).equals(this.components.peerId)&&(t=t.decapsulate(G(`/p2p/${this.components.peerId.toString()}`)));const n=t.toString();this.observed.has(n)||(this.observed.add(n),this.dispatchEvent(new R("change:addresses")))}getAddresses(){let e=this.getAnnounceAddrs().map(s=>s.toString());e.length===0&&(e=this.components.transportManager.getAddrs().map(s=>s.toString())),e=e.concat(this.getObservedAddrs().map(s=>s.toString()));const t=new Set(e);return this.announceFilter(Array.from(t).map(s=>G(s))).map(s=>s.protos().pop()?.path===!0||s.getPeerId()===this.components.peerId.toString()?s:s.encapsulate(`/p2p/${this.components.peerId.toString()}`))}}const Ur=_("libp2p:connection-manager:latency-monitor:visibility-change-emitter");class N2 extends W{constructor(){super(),this.hidden="hidden",this.visibilityChange="visibilityChange",globalThis.document!=null&&(this._initializeVisibilityVarNames(),this._addVisibilityChangeListener())}_initializeVisibilityVarNames(){let e="hidden",t="visibilitychange";typeof globalThis.document.hidden<"u"?(e="hidden",t="visibilitychange"):typeof globalThis.document.mozHidden<"u"?(e="mozHidden",t="mozvisibilitychange"):typeof globalThis.document.msHidden<"u"?(e="msHidden",t="msvisibilitychange"):typeof globalThis.document.webkitHidden<"u"&&(e="webkitHidden",t="webkitvisibilitychange"),this.hidden=e,this.visibilityChange=t}_addVisibilityChangeListener(){typeof globalThis.document.addEventListener>"u"||typeof document[this.hidden]>"u"?Ur("Checking page visibility requires a browser that supports the Page Visibility API."):globalThis.document.addEventListener(this.visibilityChange,this._handleVisibilityChange.bind(this),!1)}isVisible(){if(!(this.hidden===void 0||document[this.hidden]===void 0))return document[this.hidden]==null}_handleVisibilityChange(){const e=globalThis.document[this.hidden]===!1;Ur(e?"Page Visible":"Page Hidden"),this.dispatchEvent(new R("visibilityChange",{detail:e}))}}const $e=_("libp2p:connection-manager:latency-monitor");class M2 extends W{constructor(e={}){super();const{latencyCheckIntervalMs:t,dataEmitIntervalMs:s,asyncTestFn:n,latencyRandomPercentage:i}=e;this.latencyCheckIntervalMs=t??500,this.latencyRandomPercentage=i??10,this.latencyCheckMultiply=2*(this.latencyRandomPercentage/100)*this.latencyCheckIntervalMs,this.latencyCheckSubtract=this.latencyCheckMultiply/2,this.dataEmitIntervalMs=s===null||s===0?void 0:s??5*1e3,$e("latencyCheckIntervalMs: %s dataEmitIntervalMs: %s",this.latencyCheckIntervalMs,this.dataEmitIntervalMs),this.dataEmitIntervalMs!=null?$e("Expecting ~%s events per summary",this.latencyCheckIntervalMs/this.dataEmitIntervalMs):$e("Not emitting summaries"),this.asyncTestFn=n,globalThis.process?.hrtime!=null?($e("Using process.hrtime for timing"),this.now=globalThis.process.hrtime,this.getDeltaMS=o=>{const a=this.now(o);return a[0]*1e3+a[1]/1e6}):typeof window<"u"&&window.performance?.now!=null?($e("Using performance.now for timing"),this.now=window.performance.now.bind(window.performance),this.getDeltaMS=o=>Math.round(this.now()-o)):($e("Using Date.now for timing"),this.now=Date.now,this.getDeltaMS=o=>this.now()-o),this.latencyData=this.initLatencyData()}start(){L2()&&(this.visibilityChangeEmitter=new N2,this.visibilityChangeEmitter.addEventListener("visibilityChange",e=>{const{detail:t}=e;t?this._startTimers():(this._emitSummary(),this._stopTimers())})),this.visibilityChangeEmitter?.isVisible()===!0&&this._startTimers()}stop(){this._stopTimers()}_startTimers(){this.checkLatencyID==null&&(this.checkLatency(),this.dataEmitIntervalMs!=null&&(this.emitIntervalID=setInterval(()=>this._emitSummary(),this.dataEmitIntervalMs),typeof this.emitIntervalID.unref=="function"&&this.emitIntervalID.unref()))}_stopTimers(){this.checkLatencyID!=null&&(clearTimeout(this.checkLatencyID),this.checkLatencyID=void 0),this.emitIntervalID!=null&&(clearInterval(this.emitIntervalID),this.emitIntervalID=void 0)}_emitSummary(){const e=this.getSummary();e.events>0&&this.dispatchEvent(new R("data",{detail:e}))}getSummary(){const e={events:this.latencyData.events,minMs:this.latencyData.minMs,maxMs:this.latencyData.maxMs,avgMs:this.latencyData.events>0?this.latencyData.totalMs/this.latencyData.events:Number.POSITIVE_INFINITY,lengthMs:this.getDeltaMS(this.latencyData.startTime)};return this.latencyData=this.initLatencyData(),$e.trace("Summary: %O",e),e}checkLatency(){const e=Math.random()*this.latencyCheckMultiply-this.latencyCheckSubtract,t={deltaOffset:Math.ceil(this.latencyCheckIntervalMs+e),startTime:this.now()},s=()=>{if(this.checkLatencyID==null)return;const n=this.getDeltaMS(t.startTime)-t.deltaOffset;this.checkLatency(),this.latencyData.events++,this.latencyData.minMs=Math.min(this.latencyData.minMs,n),this.latencyData.maxMs=Math.max(this.latencyData.maxMs,n),this.latencyData.totalMs+=n,$e.trace("MS: %s Data: %O",n,this.latencyData)};$e.trace("localData: %O",t),this.checkLatencyID=setTimeout(()=>{this.asyncTestFn!=null?(t.deltaOffset=0,t.startTime=this.now(),this.asyncTestFn(s)):(t.deltaOffset-=1,s())},t.deltaOffset),typeof this.checkLatencyID.unref=="function"&&this.checkLatencyID.unref()}initLatencyData(){return{startTime:this.now(),minMs:Number.POSITIVE_INFINITY,maxMs:Number.NEGATIVE_INFINITY,events:0,totalMs:0}}}function L2(){return typeof globalThis.window<"u"}const co="OPEN",xr="CLOSING",dn="CLOSED";function Vs(r,e){const t={[Symbol.iterator]:()=>t,next:()=>{const s=r.next(),n=s.value;return s.done===!0||n==null?{done:!0,value:void 0}:{done:!1,value:e(n)}}};return t}class U2{constructor(e){if(this.map=new Map,e!=null)for(const[t,s]of e.entries())this.map.set(t.toString(),s)}[Symbol.iterator](){return this.entries()}clear(){this.map.clear()}delete(e){this.map.delete(e.toString())}entries(){return Vs(this.map.entries(),e=>[q(e[0]),e[1]])}forEach(e){this.map.forEach((t,s)=>{e(t,q(s),this)})}get(e){return this.map.get(e.toString())}has(e){return this.map.has(e.toString())}set(e,t){this.map.set(e.toString(),t)}keys(){return Vs(this.map.keys(),e=>q(e))}values(){return this.map.values()}get size(){return this.map.size}}class ct{constructor(e){if(this.set=new Set,e!=null)for(const t of e)this.set.add(t.toString())}get size(){return this.set.size}[Symbol.iterator](){return this.values()}add(e){this.set.add(e.toString())}clear(){this.set.clear()}delete(e){this.set.delete(e.toString())}entries(){return Vs(this.set.entries(),e=>{const t=q(e[0]);return[t,t]})}forEach(e){this.set.forEach(t=>{const s=q(t);e(s,s,this)})}has(e){return this.set.has(e.toString())}values(){return Vs(this.set.values(),e=>q(e))}intersection(e){const t=new ct;for(const s of e)this.has(s)&&t.add(s);return t}difference(e){const t=new ct;for(const s of this)e.has(s)||t.add(s);return t}union(e){const t=new ct;for(const s of e)t.add(s);for(const s of this)t.add(s);return t}}const x2="keep-alive";function lo(r){if(Ms(r))return{peerId:r};if(yt(r)){const e=r.getPeerId();return{multiaddr:r,peerId:e==null?void 0:q(e)}}throw f(new Error(`${r} is not a PeerId or a Multiaddr`),y.ERR_INVALID_MULTIADDR)}const Q=_("libp2p:connection-manager"),K2={maxConnections:1/0,minConnections:0,maxEventLoopDelay:1/0,pollInterval:2e3,autoDialInterval:1e4,inboundConnectionThreshold:5,maxIncomingPendingConnections:10},F2=6e4;class B2 extends W{constructor(e,t){if(super(),this.opts=Gt.call({ignoreUndefined:!0},K2,t),this.opts.maxConnections<this.opts.minConnections)throw f(new Error("Connection Manager maxConnections must be greater than minConnections"),y.ERR_INVALID_PARAMETERS);Q("options: %o",this.opts),this.components=e,this.connections=new Map,this.started=!1,t.maxEventLoopDelay!=null&&t.maxEventLoopDelay>0&&t.maxEventLoopDelay!==1/0&&(this.latencyMonitor=new M2({latencyCheckIntervalMs:t.pollInterval,dataEmitIntervalMs:t.pollInterval}));try{Y.setMaxListeners?.(1/0,this)}catch{}this.onConnect=this.onConnect.bind(this),this.onDisconnect=this.onDisconnect.bind(this),this.startupReconnectTimeout=t.startupReconnectTimeout??F2,this.dialTimeout=t.dialTimeout??3e4,this.allow=(t.allow??[]).map(s=>G(s)),this.deny=(t.deny??[]).map(s=>G(s)),this.inboundConnectionRateLimiter=new Mi.RateLimiterMemory({points:this.opts.inboundConnectionThreshold,duration:1}),this.incomingPendingConnections=0}isStarted(){return this.started}async start(){this.components.metrics?.registerMetricGroup("libp2p_connection_manager_connections",{calculate:()=>{const e={inbound:0,outbound:0};for(const t of this.connections.values())for(const s of t)s.stat.direction==="inbound"?e.inbound++:e.outbound++;return e}}),this.components.metrics?.registerMetricGroup("libp2p_protocol_streams_total",{label:"protocol",calculate:()=>{const e={};for(const t of this.connections.values())for(const s of t)for(const n of s.streams){const i=`${n.stat.direction} ${n.stat.protocol??"unnegotiated"}`;e[i]=(e[i]??0)+1}return e}}),this.components.metrics?.registerMetricGroup("libp2p_connection_manager_protocol_streams_per_connection_90th_percentile",{label:"protocol",calculate:()=>{const e={};for(const s of this.connections.values())for(const n of s){const i={};for(const o of n.streams){const a=`${o.stat.direction} ${o.stat.protocol??"unnegotiated"}`;i[a]=(i[a]??0)+1}for(const[o,a]of Object.entries(i))e[o]=e[o]??[],e[o].push(a)}const t={};for(let[s,n]of Object.entries(e)){n=n.sort((o,a)=>o-a);const i=Math.floor(n.length*.9);t[s]=n[i]}return t}}),this.latencyMonitor?.start(),this._onLatencyMeasure=this._onLatencyMeasure.bind(this),this.latencyMonitor?.addEventListener("data",this._onLatencyMeasure),this.started=!0,Q("started")}async afterStart(){this.components.upgrader.addEventListener("connection",this.onConnect),this.components.upgrader.addEventListener("connectionEnd",this.onDisconnect),Promise.resolve().then(async()=>{const e=[];for(const t of await this.components.peerStore.all())(await this.components.peerStore.getTags(t.id)).filter(i=>i.name===x2).length>0&&e.push(t.id);this.connectOnStartupController?.clear(),this.connectOnStartupController=new ee.TimeoutController(this.startupReconnectTimeout);try{Y.setMaxListeners?.(1/0,this.connectOnStartupController.signal)}catch{}await Promise.all(e.map(async t=>{await this.openConnection(t,{signal:this.connectOnStartupController?.signal}).catch(s=>{Q.error(s)})}))}).catch(e=>{Q.error(e)}).finally(()=>{this.connectOnStartupController?.clear()})}async beforeStop(){this.connectOnStartupController?.abort(),this.components.upgrader.removeEventListener("connection",this.onConnect),this.components.upgrader.removeEventListener("connectionEnd",this.onDisconnect)}async stop(){this.latencyMonitor?.removeEventListener("data",this._onLatencyMeasure),this.latencyMonitor?.stop(),this.started=!1,await this._close(),Q("stopped")}async _close(){const e=[];for(const t of this.connections.values())for(const s of t)e.push((async()=>{try{await s.close()}catch(n){Q.error(n)}})());Q("closing %d connections",e.length),await Promise.all(e),this.connections.clear()}onConnect(e){this._onConnect(e).catch(t=>{Q.error(t)})}async _onConnect(e){const{detail:t}=e;if(!this.started){await t.close();return}const s=t.remotePeer,n=s.toString(),i=this.connections.get(n);i!=null?i.push(t):this.connections.set(n,[t]),s.publicKey!=null&&await this.components.peerStore.keyBook.set(s,s.publicKey);const o=this.getConnections().length,a=o-this.opts.maxConnections;await this._checkMaxLimit("maxConnections",o,a),this.dispatchEvent(new R("peer:connect",{detail:t}))}onDisconnect(e){const{detail:t}=e;if(!this.started)return;const s=t.remotePeer.toString();let n=this.connections.get(s);n!=null&&n.length>1?(n=n.filter(i=>i.id!==t.id),this.connections.set(s,n)):n!=null&&(this.connections.delete(s),this.dispatchEvent(new R("peer:disconnect",{detail:t})))}getConnections(e){if(e!=null)return this.connections.get(e.toString())??[];let t=[];for(const s of this.connections.values())t=t.concat(s);return t}async openConnection(e,t={}){const{peerId:s,multiaddr:n}=lo(e);if(s==null&&n==null)throw f(new TypeError("Can only open connections to PeerIds or Multiaddrs"),y.ERR_INVALID_PARAMETERS);if(s!=null){Q("dial to",s);const o=this.getConnections(s);if(o.length>0)return Q("had an existing connection to %p",s),o[0]}let i;if(t?.signal==null){i=new ee.TimeoutController(this.dialTimeout),t.signal=i.signal;try{Y.setMaxListeners?.(1/0,i.signal)}catch{}}try{const o=await this.components.dialer.dial(e,t);let a=this.connections.get(o.remotePeer.toString());a==null&&(a=[],this.connections.set(o.remotePeer.toString(),a));let l=!1;for(const u of a)u.id===o.id&&(l=!0);return l||a.push(o),o}finally{i?.clear()}}async closeConnections(e){const t=this.connections.get(e.toString())??[];await Promise.all(t.map(async s=>await s.close()))}getAll(e){if(!Ms(e))throw f(new Error("peerId must be an instance of peer-id"),y.ERR_INVALID_PARAMETERS);const t=e.toString(),s=this.connections.get(t);return s!=null?s.filter(n=>n.stat.status===co):[]}_onLatencyMeasure(e){const{detail:t}=e;this._checkMaxLimit("maxEventLoopDelay",t.avgMs,1).catch(s=>{Q.error(s)})}async _checkMaxLimit(e,t,s=1){const n=this.opts[e];if(n==null){Q.trace("limit %s was not set so it cannot be applied",e);return}Q.trace("checking limit of %s. current value: %d of %d",e,t,n),t>n&&(Q("%s: limit exceeded: %p, %d/%d, pruning %d connection(s)",this.components.peerId,e,t,n,s),await this._pruneConnections(s))}async _pruneConnections(e){const t=this.getConnections(),s=new U2;for(const o of t){const a=o.remotePeer;if(s.has(a))continue;const l=await this.components.peerStore.getTags(a);s.set(a,l.reduce((u,h)=>u+h.value,0))}const n=t.sort((o,a)=>{const l=s.get(o.remotePeer)??0,u=s.get(a.remotePeer)??0;if(l>u)return 1;if(l<u)return-1;const h=o.stat.timeline.open,c=a.stat.timeline.open;return h<c?1:h>c?-1:0}),i=[];for(const o of n)if(Q("too many connections open - closing a connection to %p",o.remotePeer),i.push(o),i.length===e)break;await Promise.all(i.map(async o=>{try{await o.close()}catch(a){Q.error(a)}this.onDisconnect(new R("connectionEnd",{detail:o}))}))}async acceptIncomingConnection(e){if(this.deny.some(n=>e.remoteAddr.toString().startsWith(n.toString())))return Q("connection from %s refused - connection remote address was in deny list",e.remoteAddr),!1;if(this.allow.some(n=>e.remoteAddr.toString().startsWith(n.toString())))return this.incomingPendingConnections++,!0;if(this.incomingPendingConnections===this.opts.maxIncomingPendingConnections)return Q("connection from %s refused - incomingPendingConnections exceeded by peer %s",e.remoteAddr),!1;if(e.remoteAddr.isThinWaistAddress()){const n=e.remoteAddr.nodeAddress().address;try{await this.inboundConnectionRateLimiter.consume(n,1)}catch{return Q("connection from %s refused - inboundConnectionThreshold exceeded by host %s",n,e.remoteAddr),!1}}return this.getConnections().length<this.opts.maxConnections?(this.incomingPendingConnections++,!0):(Q("connection from %s refused - maxConnections exceeded",e.remoteAddr),!1)}afterUpgradeInbound(){this.incomingPendingConnections--}}const st=_("libp2p:connection-manager:auto-dialler"),V2={enabled:!0,minConnections:0,autoDialInterval:1e4};class G2{constructor(e,t){this.components=e,this.options=Gt.call({ignoreUndefined:!0},V2,t),this.running=!1,this._autoDial=this._autoDial.bind(this),st("options: %j",this.options)}isStarted(){return this.running}async start(){if(!this.options.enabled){st("not enabled");return}this.running=!0,this._autoDial().catch(e=>{st.error("could start autodial",e)}),st("started")}async stop(){if(!this.options.enabled){st("not enabled");return}this.running=!1,this.autoDialTimeout!=null&&this.autoDialTimeout.clear(),st("stopped")}async _autoDial(){this.autoDialTimeout!=null&&this.autoDialTimeout.clear();const e=this.options.minConnections;if(this.components.connectionManager.getConnections().length>=e){this.autoDialTimeout=fr(this._autoDial,this.options.autoDialInterval);return}const t=await this.components.peerStore.all(),s=await z(t.sort(()=>Math.random()>.5?1:-1),n=>xn(n,i=>!i.id.equals(this.components.peerId)),n=>Ui(n,(i,o)=>o.protocols.length>i.protocols.length||o.id.publicKey!=null&&i.id.publicKey==null?1:-1),async n=>await Li(n));for(let n=0;this.running&&n<s.length&&this.components.connectionManager.getConnections().length<e;n++){if(!this.running)return;const i=s[n];if(this.components.connectionManager.getConnections(i.id).length===0){st("connecting to a peerStore stored peer %p",i.id);try{await this.components.connectionManager.openConnection(i.id)}catch(o){st.error("could not connect to peerStore stored peer",o)}}}this.running&&(this.autoDialTimeout=fr(this._autoDial,this.options.autoDialInterval))}}var O;(function(r){(function(n){n.SUCCESS="SUCCESS",n.HOP_SRC_ADDR_TOO_LONG="HOP_SRC_ADDR_TOO_LONG",n.HOP_DST_ADDR_TOO_LONG="HOP_DST_ADDR_TOO_LONG",n.HOP_SRC_MULTIADDR_INVALID="HOP_SRC_MULTIADDR_INVALID",n.HOP_DST_MULTIADDR_INVALID="HOP_DST_MULTIADDR_INVALID",n.HOP_NO_CONN_TO_DST="HOP_NO_CONN_TO_DST",n.HOP_CANT_DIAL_DST="HOP_CANT_DIAL_DST",n.HOP_CANT_OPEN_DST_STREAM="HOP_CANT_OPEN_DST_STREAM",n.HOP_CANT_SPEAK_RELAY="HOP_CANT_SPEAK_RELAY",n.HOP_CANT_RELAY_TO_SELF="HOP_CANT_RELAY_TO_SELF",n.STOP_SRC_ADDR_TOO_LONG="STOP_SRC_ADDR_TOO_LONG",n.STOP_DST_ADDR_TOO_LONG="STOP_DST_ADDR_TOO_LONG",n.STOP_SRC_MULTIADDR_INVALID="STOP_SRC_MULTIADDR_INVALID",n.STOP_DST_MULTIADDR_INVALID="STOP_DST_MULTIADDR_INVALID",n.STOP_RELAY_REFUSED="STOP_RELAY_REFUSED",n.MALFORMED_MESSAGE="MALFORMED_MESSAGE"})(r.Status||(r.Status={}));let e;(function(n){n[n.SUCCESS=100]="SUCCESS",n[n.HOP_SRC_ADDR_TOO_LONG=220]="HOP_SRC_ADDR_TOO_LONG",n[n.HOP_DST_ADDR_TOO_LONG=221]="HOP_DST_ADDR_TOO_LONG",n[n.HOP_SRC_MULTIADDR_INVALID=250]="HOP_SRC_MULTIADDR_INVALID",n[n.HOP_DST_MULTIADDR_INVALID=251]="HOP_DST_MULTIADDR_INVALID",n[n.HOP_NO_CONN_TO_DST=260]="HOP_NO_CONN_TO_DST",n[n.HOP_CANT_DIAL_DST=261]="HOP_CANT_DIAL_DST",n[n.HOP_CANT_OPEN_DST_STREAM=262]="HOP_CANT_OPEN_DST_STREAM",n[n.HOP_CANT_SPEAK_RELAY=270]="HOP_CANT_SPEAK_RELAY",n[n.HOP_CANT_RELAY_TO_SELF=280]="HOP_CANT_RELAY_TO_SELF",n[n.STOP_SRC_ADDR_TOO_LONG=320]="STOP_SRC_ADDR_TOO_LONG",n[n.STOP_DST_ADDR_TOO_LONG=321]="STOP_DST_ADDR_TOO_LONG",n[n.STOP_SRC_MULTIADDR_INVALID=350]="STOP_SRC_MULTIADDR_INVALID",n[n.STOP_DST_MULTIADDR_INVALID=351]="STOP_DST_MULTIADDR_INVALID",n[n.STOP_RELAY_REFUSED=390]="STOP_RELAY_REFUSED",n[n.MALFORMED_MESSAGE=400]="MALFORMED_MESSAGE"})(e||(e={})),function(n){n.codec=()=>Sn(e)}(r.Status||(r.Status={})),function(n){n.HOP="HOP",n.STOP="STOP",n.STATUS="STATUS",n.CAN_HOP="CAN_HOP"}(r.Type||(r.Type={}));let t;(function(n){n[n.HOP=1]="HOP",n[n.STOP=2]="STOP",n[n.STATUS=3]="STATUS",n[n.CAN_HOP=4]="CAN_HOP"})(t||(t={})),function(n){n.codec=()=>Sn(t)}(r.Type||(r.Type={})),function(n){let i;n.codec=()=>(i==null&&(i=ts((o,a,l={})=>{if(l.lengthDelimited!==!1&&a.fork(),(l.writeDefaults===!0||o.id!=null&&o.id.byteLength>0)&&(a.uint32(10),a.bytes(o.id)),o.addrs!=null)for(const u of o.addrs)a.uint32(18),a.bytes(u);l.lengthDelimited!==!1&&a.ldelim()},(o,a)=>{const l={id:new Uint8Array(0),addrs:[]},u=a==null?o.len:o.pos+a;for(;o.pos<u;){const h=o.uint32();switch(h>>>3){case 1:l.id=o.bytes();break;case 2:l.addrs.push(o.bytes());break;default:o.skipType(h&7);break}}return l})),i),n.encode=o=>ss(o,n.codec()),n.decode=o=>ns(o,n.codec())}(r.Peer||(r.Peer={}));let s;r.codec=()=>(s==null&&(s=ts((n,i,o={})=>{o.lengthDelimited!==!1&&i.fork(),n.type!=null&&(i.uint32(8),r.Type.codec().encode(n.type,i)),n.srcPeer!=null&&(i.uint32(18),r.Peer.codec().encode(n.srcPeer,i,{writeDefaults:!1})),n.dstPeer!=null&&(i.uint32(26),r.Peer.codec().encode(n.dstPeer,i,{writeDefaults:!1})),n.code!=null&&(i.uint32(32),r.Status.codec().encode(n.code,i)),o.lengthDelimited!==!1&&i.ldelim()},(n,i)=>{const o={},a=i==null?n.len:n.pos+i;for(;n.pos<a;){const l=n.uint32();switch(l>>>3){case 1:o.type=r.Type.codec().decode(n);break;case 2:o.srcPeer=r.Peer.codec().decode(n,n.uint32());break;case 3:o.dstPeer=r.Peer.codec().decode(n,n.uint32());break;case 4:o.code=r.Status.codec().decode(n);break;default:n.skipType(l&7);break}}return o})),s),r.encode=n=>ss(n,r.codec()),r.decode=n=>ns(n,r.codec())})(O||(O={}));const $2=_("libp2p:stream:converter");function Kr(r,e={}){const{stream:t,remoteAddr:s}=r,{sink:n,source:i}=t,o=async function*(){for await(const u of i)u instanceof Uint8Array?yield u:yield*u}(),a={async sink(u){e.signal!=null&&(u=vn(u,e.signal));try{await n(u),await l()}catch(h){h.type!=="aborted"&&$2(h)}},source:e.signal!=null?vn(o,e.signal):o,remoteAddr:s,timeline:{open:Date.now(),close:void 0},async close(){await n(async function*(){yield new Uint8Array(0)}()),await l()}};async function l(){a.timeline.close==null&&(a.timeline.close=Date.now()),await Promise.resolve()}return a}const Ft="/libp2p/circuit/relay/0.1.0";function H2(r){const e=new Map;async function t(i){const o=i.toString().split("/p2p-circuit").find(d=>d!==""),a=G(o),l=a.getPeerId();if(l==null)throw new Error("Could not determine relay peer from multiaddr");const u=q(l);await r.peerStore.addressBook.add(u,[a]);const h=await r.connectionManager.openConnection(u),c=h.remoteAddr.encapsulate("/p2p-circuit");e.set(h.remotePeer.toString(),c),n.dispatchEvent(new R("listening"))}function s(){const i=[];for(const o of e.values())i.push(o);return i}const n=Object.assign(new W,{close:async()=>await Promise.resolve(),listen:t,getAddrs:s});return r.connectionManager.addEventListener("peer:disconnect",i=>{const{detail:o}=i;e.delete(o.remotePeer.toString())&&n.dispatchEvent(new R("close"))}),n}function Fr(r,e){r.write({type:O.Type.STATUS,code:e})}function ho(r,e){try{r.dstPeer?.addrs!=null&&r.dstPeer.addrs.forEach(t=>G(t))}catch(t){throw Fr(e,r.type===O.Type.HOP?O.Status.HOP_DST_MULTIADDR_INVALID:O.Status.STOP_DST_MULTIADDR_INVALID),t}try{r.srcPeer?.addrs!=null&&r.srcPeer.addrs.forEach(t=>G(t))}catch(t){throw Fr(e,r.type===O.Type.HOP?O.Status.HOP_SRC_MULTIADDR_INVALID:O.Status.STOP_SRC_MULTIADDR_INVALID),t}}const $t=_("libp2p:circuit:stream-handler");class sn{constructor(e){const{stream:t,maxLength:s=4096}=e;this.stream=t,this.shake=Kn(this.stream),this.decoder=Ze.fromReader(this.shake.reader,{maxDataLength:s})}async read(){const e=await this.decoder.next();if(e.value!=null){const t=O.decode(e.value);return $t("read message type",t.type),t}$t("read received no value, closing stream"),this.close()}write(e){$t("write message type %s",e.type),this.shake.write(Je.single(O.encode(e)))}rest(){return this.shake.rest(),this.shake.stream}end(e){this.write(e),this.close()}close(){$t("closing the stream"),this.rest().sink([]).catch(e=>{$t.error(e)})}}const jt=_("libp2p:circuit:stop");function q2(r){const{connection:e,request:t,streamHandler:s}=r;try{ho(t,s)}catch(n){jt.error("invalid stop request via peer %p %o",e.remotePeer,n);return}return jt("stop request is valid"),s.write({type:O.Type.STATUS,code:O.Status.SUCCESS}),s.rest()}async function z2(r){const{connection:e,request:t,signal:s}=r,n=await e.newStream(Ft,{signal:s});jt("starting stop request to %p",e.remotePeer);const i=new sn({stream:n});i.write(t);const o=await i.read();if(o==null){i.close();return}if(o.code===O.Status.SUCCESS)return jt("stop request to %p was successful",e.remotePeer),i.rest();jt("stop request failed with code %d",o.code),i.close()}const Re=_("libp2p:circuit:hop");async function W2(r){const{connection:e,request:t,streamHandler:s,circuit:n,connectionManager:i}=r;if(!n.hopEnabled())return Re("HOP request received but we are not acting as a relay"),s.end({type:O.Type.STATUS,code:O.Status.HOP_CANT_SPEAK_RELAY});try{ho(t,s)}catch(c){Re.error("invalid hop request via peer %p %o",e.remotePeer,c);return}if(t.dstPeer==null){Re("HOP request received but we do not receive a dstPeer");return}const o=Ve(t.dstPeer.id),a=i.getConnections(o);if(a.length===0&&!n.hopActive())return Re("HOP request received but we are not connected to the destination peer"),s.end({type:O.Type.STATUS,code:O.Status.HOP_NO_CONN_TO_DST});if(a.length===0)return Re("did not have connection to remote peer"),s.end({type:O.Type.STATUS,code:O.Status.HOP_NO_CONN_TO_DST});const l={type:O.Type.STOP,dstPeer:t.dstPeer,srcPeer:t.srcPeer};let u;try{Re("performing STOP request");const c=await z2({connection:a[0],request:l});if(c==null)throw new Error("Could not stop");u=c}catch(c){Re.error(c);return}Re("hop request from %p is valid",e.remotePeer),s.write({type:O.Type.STATUS,code:O.Status.SUCCESS});const h=s.rest();return Re("creating related connections"),await z(h,u,h)}async function Y2(r){const{connection:e,request:t,signal:s}=r,n=await e.newStream(Ft,{signal:s}),i=new sn({stream:n});i.write(t);const o=await i.read();if(o==null)throw f(new Error("HOP request had no response"),y.ERR_HOP_REQUEST_FAILED);if(o.code===O.Status.SUCCESS)return Re("hop request was successful"),i.rest();throw Re("hop request failed with code %d, closing stream",o.code),i.close(),f(new Error(`HOP request failed with code "${o.code??"unknown"}"`),y.ERR_HOP_REQUEST_FAILED)}async function Q2(r){const{connection:e,signal:t}=r,s=await e.newStream(Ft,{signal:t}),n=new sn({stream:s});n.write({type:O.Type.CAN_HOP});const i=await n.read();return await n.close(),!(i==null||i.code!==O.Status.SUCCESS)}function X2(r){const{connection:e,streamHandler:t,circuit:s}=r,n=s.hopEnabled();Re("can hop (%s) request from %p",n,e.remotePeer),t.end({type:O.Type.STATUS,code:n?O.Status.SUCCESS:O.Status.HOP_CANT_SPEAK_RELAY})}const Ee=_("libp2p:circuit");class j2{constructor(e,t){this._init=t,this.components=e,this._started=!1}isStarted(){return this._started}async start(){this._started||(this._started=!0,await this.components.registrar.handle(Ft,e=>{this._onProtocol(e).catch(t=>{Ee.error(t)})},{...this._init}).catch(e=>{Ee.error(e)}))}async stop(){await this.components.registrar.unhandle(Ft)}hopEnabled(){return!0}hopActive(){return!0}get[er](){return!0}get[Symbol.toStringTag](){return"libp2p/circuit-relay-v1"}async _onProtocol(e){const{connection:t,stream:s}=e,n=new ee.TimeoutController(this._init.hop.timeout);try{Y.setMaxListeners?.(1/0,n.signal)}catch{}try{const i=Fe(s,n.signal),o=new sn({stream:{...s,...i}}),a=await o.read();if(a==null){Ee("request was invalid, could not read from stream"),o.write({type:O.Type.STATUS,code:O.Status.MALFORMED_MESSAGE}),o.close();return}let l;switch(a.type){case O.Type.CAN_HOP:{Ee("received CAN_HOP request from %p",t.remotePeer),await X2({circuit:this,connection:t,streamHandler:o});break}case O.Type.HOP:{Ee("received HOP request from %p",t.remotePeer),await W2({connection:t,request:a,streamHandler:o,circuit:this,connectionManager:this.components.connectionManager});break}case O.Type.STOP:{Ee("received STOP request from %p",t.remotePeer),l=await q2({connection:t,request:a,streamHandler:o});break}default:{Ee("Request of type %s not supported",a.type),o.write({type:O.Type.STATUS,code:O.Status.MALFORMED_MESSAGE}),o.close();return}}if(l!=null){const u=t.remoteAddr.encapsulate("/p2p-circuit").encapsulate(G(a.dstPeer?.addrs[0])),h=G(a.srcPeer?.addrs[0]),c=Kr({stream:l,remoteAddr:u,localAddr:h}),d=a.type===O.Type.HOP?"relay":"inbound";Ee("new %s connection %s",d,c.remoteAddr);const p=await this.components.upgrader.upgradeInbound(c);Ee("%s connection %s upgraded",d,c.remoteAddr),this.handler!=null&&this.handler(p)}}finally{n.clear()}}async dial(e,t={}){const s=e.toString().split("/p2p-circuit"),n=G(s[0]),i=G(s[s.length-1]),o=n.getPeerId(),a=i.getPeerId();if(o==null||a==null){const p="Circuit relay dial failed as addresses did not have peer id";throw Ee.error(p),f(new Error(p),y.ERR_RELAYED_DIAL)}const l=q(o),u=q(a);let h=!1,d=this.components.connectionManager.getConnections(l)[0];d==null&&(await this.components.peerStore.addressBook.add(l,[n]),d=await this.components.connectionManager.openConnection(l,t),h=!0);try{const p=await Y2({...t,connection:d,request:{type:O.Type.HOP,srcPeer:{id:this.components.peerId.toBytes(),addrs:this.components.addressManager.getAddresses().map(E=>E.bytes)},dstPeer:{id:u.toBytes(),addrs:[G(i).bytes]}}}),g=n.encapsulate(`/p2p-circuit/p2p/${this.components.peerId.toString()}`),m=Kr({stream:p,remoteAddr:e,localAddr:g});return Ee("new outbound connection %s",m.remoteAddr),await this.components.upgrader.upgradeOutbound(m)}catch(p){throw Ee.error("Circuit relay dial failed",p),h&&await d.close(),p}}createListener(e){return this.handler=e.handler,H2({connectionManager:this.components.connectionManager,peerStore:this.components.peerStore})}filter(e){return e=Array.isArray(e)?e:[e],e.filter(t=>Bo.matches(t))}}async function uo(r){const e=new TextEncoder().encode(r),t=await le.digest(e);return Vt.createV0(t)}const po=60*1e3,J2=15*po,Z2=30*po,el=290,Br="hop_relay",Vr="true",fo="/libp2p/relay";function Gr(r){try{const{address:e}=r.nodeAddress();return!!en(e)}catch{return!0}}function tr(r,e){const t=Gr(r.multiaddr),s=Gr(e.multiaddr);return t&&!s?1:!t&&s||r.isCertified&&!e.isCertified?-1:!r.isCertified&&e.isCertified?1:0}const Ht=_("libp2p:auto-relay"),tl=()=>{};class sl{constructor(e,t){this.components=e,this.addressSorter=t.addressSorter??tr,this.maxListeners=t.maxListeners??1,this.listenRelays=new Set,this.onError=t.onError??tl,this._onProtocolChange=this._onProtocolChange.bind(this),this._onPeerDisconnected=this._onPeerDisconnected.bind(this),this.components.peerStore.addEventListener("change:protocols",s=>{this._onProtocolChange(s).catch(n=>{Ht.error(n)})}),this.components.connectionManager.addEventListener("peer:disconnect",this._onPeerDisconnected)}async _onProtocolChange(e){const{peerId:t,protocols:s}=e.detail,n=t.toString();if(s.find(o=>o===Ft)==null){this.listenRelays.has(n)&&await this._removeListenRelay(n);return}if(!this.listenRelays.has(n))try{const o=this.components.connectionManager.getConnections(t);if(o.length===0)return;const a=o[0];if(a.remoteAddr.protoCodes().includes(el)){Ht(`relayed connection to ${n} will not be used to hop on`);return}await Q2({connection:a})&&(await this.components.peerStore.metadataBook.setValue(t,Br,T(Vr)),await this._addListenRelay(a,n))}catch(o){this.onError(o)}}_onPeerDisconnected(e){const n=e.detail.remotePeer.toString();this.listenRelays.has(n)&&this._removeListenRelay(n).catch(i=>{Ht.error(i)})}async _addListenRelay(e,t){try{if(this.listenRelays.size>=this.maxListeners)return;const s=await z(await this.components.peerStore.addressBook.get(e.remotePeer),i=>Ui(i,this.addressSorter),async i=>await Li(i));(await Promise.all(s.map(async i=>{try{let o=i.multiaddr;return o.getPeerId()==null&&(o=o.encapsulate(`/p2p/${e.remotePeer.toString()}`)),o=o.encapsulate("/p2p-circuit"),await this.components.transportManager.listen([o]),!0}catch(o){Ht.error("error listening on circuit address",o),this.onError(o)}return!1}))).includes(!0)&&this.listenRelays.add(t)}catch(s){this.onError(s),this.listenRelays.delete(t)}}async _removeListenRelay(e){this.listenRelays.delete(e)&&await this._listenOnAvailableHopRelays([e])}async _listenOnAvailableHopRelays(e=[]){if(this.listenRelays.size>=this.maxListeners)return;const t=[],s=await this.components.peerStore.all();for(const{id:n,metadata:i}of s){const o=n.toString();if(this.listenRelays.has(o)||e.includes(o))continue;const a=i.get(Br);if(a==null||D(a)!==Vr)continue;const l=this.components.connectionManager.getConnections(n);if(l.length===0){t.push(n);continue}if(await this._addListenRelay(l[0],o),this.listenRelays.size>=this.maxListeners)return}for(const n of t)if(await this._tryToListenOnRelay(n),this.listenRelays.size>=this.maxListeners)return;try{const n=await uo(fo);for await(const i of this.components.contentRouting.findProviders(n)){if(i.multiaddrs.length===0)continue;const o=i.id;if(!o.equals(this.components.peerId)&&(await this.components.peerStore.addressBook.add(o,i.multiaddrs),await this._tryToListenOnRelay(o),this.listenRelays.size>=this.maxListeners))return}}catch(n){this.onError(n)}}async _tryToListenOnRelay(e){try{const t=await this.components.connectionManager.openConnection(e);await this._addListenRelay(t,e.toString())}catch(t){Ht.error("Could not use %p as relay",e,t),this.onError(t,`could not connect and listen on known hop relay ${e.toString()}`)}}}const $r=_("libp2p:relay");class nl{constructor(e,t){this.components=e,this.autoRelay=t.autoRelay?.enabled!==!1?new sl(e,{addressSorter:t.addressSorter,...t.autoRelay}):void 0,this.started=!1,this.init=t,this._advertiseService=this._advertiseService.bind(this)}isStarted(){return this.started}async start(){this.init.hop.enabled!==!1&&this.init.advertise.enabled!==!1&&(this.timeout=Os.setDelayedInterval(this._advertiseService,this.init.advertise.ttl,this.init.advertise.bootDelay)),this.started=!0}async stop(){this.timeout!=null&&Os.clearDelayedInterval(this.timeout),this.started=!1}async _advertiseService(){try{const e=await uo(fo);await this.components.contentRouting.provide(e)}catch(e){e.code===y.ERR_NO_ROUTERS_AVAILABLE?($r.error("a content router, such as a DHT, must be provided in order to advertise the relay service",e),await this.stop()):$r.error(e)}}}const Hr=V.pki,rl=(r,e)=>{const t=Hr.rsa.setPublicKey(e.n,e.e),s=Hr.createCertificate();s.publicKey=t,s.serialNumber="01",s.validity.notBefore=new Date,s.validity.notAfter=new Date,s.validity.notAfter.setFullYear(s.validity.notBefore.getFullYear()+10);const n=[{name:"organizationName",value:"ipfs"},{shortName:"OU",value:"keystore"},{name:"commonName",value:r.id}];return s.setSubject(n),s.setIssuer(n),s.setExtensions([{name:"basicConstraints",cA:!0},{name:"keyUsage",keyCertSign:!0,digitalSignature:!0,nonRepudiation:!0,keyEncipherment:!0,dataEncipherment:!0},{name:"extKeyUsage",serverAuth:!0,clientAuth:!0,codeSigning:!0,emailProtection:!0,timeStamping:!0},{name:"nsCertType",client:!0,server:!0,email:!0,objsign:!0,sslCA:!0,emailCA:!0,objCA:!0}]),s.sign(e),s};async function il(r,e){const t=r.map(e),n=(await Promise.all(t)).findIndex(i=>i);return r[n]}const ol=_("libp2p:keychain:cms"),un=new WeakMap;class al{constructor(e,t){if(e==null)throw f(new Error("keychain is required"),y.ERR_KEYCHAIN_REQUIRED);this.keychain=e,un.set(this,{dek:t})}async encrypt(e,t){if(!(t instanceof Uint8Array))throw f(new Error("Plain data must be a Uint8Array"),y.ERR_INVALID_PARAMETERS);const s=await this.keychain.findKeyByName(e),n=await this.keychain.getPrivateKey(e),i=un.get(this);if(i==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const o=i.dek,a=V.pki.decryptRsaPrivateKey(n,o),l=await rl(s,a),u=V.pkcs7.createEnvelopedData();u.addRecipient(l),u.content=V.util.createBuffer(t),u.encrypt();const h=V.asn1.toDer(u.toAsn1()).getBytes();return T(h,"ascii")}async decrypt(e){if(!(e instanceof Uint8Array))throw f(new Error("CMS data is required"),y.ERR_INVALID_PARAMETERS);let t;try{const h=V.util.createBuffer(D(e,"ascii")),c=V.asn1.fromDer(h);t=V.pkcs7.messageFromAsn1(c)}catch(h){throw ol.error(h),f(new Error("Invalid CMS"),y.ERR_INVALID_CMS)}const s=t.recipients.filter(h=>h.issuer.find(c=>c.shortName==="O"&&c.value==="ipfs")).filter(h=>h.issuer.find(c=>c.shortName==="CN")).map(h=>({recipient:h,keyId:h.issuer.find(c=>c.shortName==="CN").value})),n=await il(s,async h=>{try{if(await this.keychain.findKeyById(h.keyId)!=null)return!0}catch{return!1}return!1});if(n==null){const h=s.map(c=>c.keyId);throw f(new Error(`Decryption needs one of the key(s): ${h.join(", ")}`),y.ERR_MISSING_KEYS,{missingKeys:h})}const i=await this.keychain.findKeyById(n.keyId);if(i==null)throw f(new Error("No key available to decrypto"),y.ERR_NO_KEY);const o=await this.keychain.getPrivateKey(i.name),a=un.get(this);if(a==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const l=a.dek,u=V.pki.decryptRsaPrivateKey(o,l);return t.decrypt(n.recipient,u),T(t.content.getBytes(),"ascii")}}const bs=_("libp2p:keychain"),cl="/pkcs8/",go="/info/",nt=new WeakMap,ut={minKeyLength:112/8,minSaltLength:128/8,minIterationCount:1e3},pn={dek:{keyLength:512/8,iterationCount:1e4,salt:"you should override this value with a crypto secure random number",hash:"sha2-512"}};function He(r){return r==null||typeof r!="string"?!1:r===ca(r.trim())&&r.length>0}async function x(){const t=Math.random()*800+200;await new Promise(s=>setTimeout(s,t))}function ke(r){return new ls(cl+r)}function qe(r){return new ls(go+r)}class Gs{constructor(e,t){if(this.components=e,this.init=Gt(pn,t),this.init.pass!=null&&this.init.pass?.length<20)throw new Error("pass must be least 20 characters");if(this.init.dek?.keyLength!=null&&this.init.dek.keyLength<ut.minKeyLength)throw new Error(`dek.keyLength must be least ${ut.minKeyLength} bytes`);if(this.init.dek?.salt?.length!=null&&this.init.dek.salt.length<ut.minSaltLength)throw new Error(`dek.saltLength must be least ${ut.minSaltLength} bytes`);if(this.init.dek?.iterationCount!=null&&this.init.dek.iterationCount<ut.minIterationCount)throw new Error(`dek.iterationCount must be least ${ut.minIterationCount}`);const s=this.init.pass!=null&&this.init.dek?.salt!=null?Pr(this.init.pass,this.init.dek?.salt,this.init.dek?.iterationCount,this.init.dek?.keyLength,this.init.dek?.hash):"";nt.set(this,{dek:s}),this.started=!1}isStarted(){return this.started}async start(){const e=qe("self");await this.components.datastore.has(e)||await this.importPeer("self",this.components.peerId),this.started=!0}stop(){this.started=!1}get cms(){const e=nt.get(this);if(e==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const t=e.dek;return new al(this,t)}static generateOptions(){const e=Object.assign({},pn),t=Math.ceil(ut.minSaltLength/3)*3;return e.dek.salt=D(ps(t),"base64"),e}static get options(){return pn}async createKey(e,t,s=2048){if(!He(e)||e==="self")throw await x(),f(new Error("Invalid key name"),y.ERR_INVALID_KEY_NAME);if(typeof t!="string")throw await x(),f(new Error("Invalid key type"),y.ERR_INVALID_KEY_TYPE);const n=ke(e);if(await this.components.datastore.has(n))throw await x(),f(new Error("Key name already exists"),y.ERR_KEY_ALREADY_EXISTS);switch(t.toLowerCase()){case"rsa":if(!Number.isSafeInteger(s)||s<2048)throw await x(),f(new Error("Invalid RSA key size"),y.ERR_INVALID_KEY_SIZE);break}let o;try{const a=await Qn(t,s),l=await a.id(),u=nt.get(this);if(u==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const h=u.dek,c=await a.export(h);o={name:e,id:l};const d=this.components.datastore.batch();d.put(n,T(c)),d.put(qe(e),T(JSON.stringify(o))),await d.commit()}catch(a){throw await x(),a}return o}async listKeys(){const e={prefix:go},t=[];for await(const s of this.components.datastore.query(e))t.push(JSON.parse(D(s.value)));return t}async findKeyById(e){try{return(await this.listKeys()).find(s=>s.id===e)}catch(t){throw await x(),t}}async findKeyByName(e){if(!He(e))throw await x(),f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);const t=qe(e);try{const s=await this.components.datastore.get(t);return JSON.parse(D(s))}catch(s){throw await x(),bs.error(s),f(new Error(`Key '${e}' does not exist.`),y.ERR_KEY_NOT_FOUND)}}async removeKey(e){if(!He(e)||e==="self")throw await x(),f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);const t=ke(e),s=await this.findKeyByName(e),n=this.components.datastore.batch();return n.delete(t),n.delete(qe(e)),await n.commit(),s}async renameKey(e,t){if(!He(e)||e==="self")throw await x(),f(new Error(`Invalid old key name '${e}'`),y.ERR_OLD_KEY_NAME_INVALID);if(!He(t)||t==="self")throw await x(),f(new Error(`Invalid new key name '${t}'`),y.ERR_NEW_KEY_NAME_INVALID);const s=ke(e),n=ke(t),i=qe(e),o=qe(t);if(await this.components.datastore.has(n))throw await x(),f(new Error(`Key '${t}' already exists`),y.ERR_KEY_ALREADY_EXISTS);try{const l=await this.components.datastore.get(s),u=await this.components.datastore.get(i),h=JSON.parse(D(u));h.name=t;const c=this.components.datastore.batch();return c.put(n,l),c.put(o,T(JSON.stringify(h))),c.delete(s),c.delete(i),await c.commit(),h}catch(l){throw await x(),l}}async exportKey(e,t){if(!He(e))throw await x(),f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);if(t==null)throw await x(),f(new Error("Password is required"),y.ERR_PASSWORD_REQUIRED);const s=ke(e);try{const n=await this.components.datastore.get(s),i=D(n),o=nt.get(this);if(o==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const a=o.dek;return await(await ws(i,a)).export(t)}catch(n){throw await x(),n}}async exportPeerId(e){const t="temporary-password",s=await this.exportKey(e,t),n=await ws(s,t);return await bt(n.public.bytes,n.bytes)}async importKey(e,t,s){if(!He(e)||e==="self")throw await x(),f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);if(t==null)throw await x(),f(new Error("PEM encoded key is required"),y.ERR_PEM_REQUIRED);const n=ke(e);if(await this.components.datastore.has(n))throw await x(),f(new Error(`Key '${e}' already exists`),y.ERR_KEY_ALREADY_EXISTS);let o;try{o=await ws(t,s)}catch{throw await x(),f(new Error("Cannot read the key, most likely the password is wrong"),y.ERR_CANNOT_READ_KEY)}let a;try{a=await o.id();const h=nt.get(this);if(h==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const c=h.dek;t=await o.export(c)}catch(h){throw await x(),h}const l={name:e,id:a},u=this.components.datastore.batch();return u.put(n,T(t)),u.put(qe(e),T(JSON.stringify(l))),await u.commit(),l}async importPeer(e,t){try{if(!He(e))throw f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);if(t==null)throw f(new Error("PeerId is required"),y.ERR_MISSING_PRIVATE_KEY);if(t.privateKey==null)throw f(new Error("PeerId.privKey is required"),y.ERR_MISSING_PRIVATE_KEY);const s=await fs(t.privateKey),n=ke(e);if(await this.components.datastore.has(n))throw await x(),f(new Error(`Key '${e}' already exists`),y.ERR_KEY_ALREADY_EXISTS);const o=nt.get(this);if(o==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const a=o.dek,l=await s.export(a),u={name:e,id:t.toString()},h=this.components.datastore.batch();return h.put(n,T(l)),h.put(qe(e),T(JSON.stringify(u))),await h.commit(),u}catch(s){throw await x(),s}}async getPrivateKey(e){if(!He(e))throw await x(),f(new Error(`Invalid key name '${e}'`),y.ERR_INVALID_KEY_NAME);try{const t=ke(e),s=await this.components.datastore.get(t);return D(s)}catch(t){throw await x(),bs.error(t),f(new Error(`Key '${e}' does not exist.`),y.ERR_KEY_NOT_FOUND)}}async rotateKeychainPass(e,t){if(typeof e!="string")throw await x(),f(new Error(`Invalid old pass type '${typeof e}'`),y.ERR_INVALID_OLD_PASS_TYPE);if(typeof t!="string")throw await x(),f(new Error(`Invalid new pass type '${typeof t}'`),y.ERR_INVALID_NEW_PASS_TYPE);if(t.length<20)throw await x(),f(new Error(`Invalid pass length ${t.length}`),y.ERR_INVALID_PASS_LENGTH);bs("recreating keychain");const s=nt.get(this);if(s==null)throw f(new Error("dek missing"),y.ERR_INVALID_PARAMETERS);const n=s.dek;this.init.pass=t;const i=t!=null&&this.init.dek?.salt!=null?Pr(t,this.init.dek.salt,this.init.dek?.iterationCount,this.init.dek?.keyLength,this.init.dek?.hash):"";nt.set(this,{dek:i});const o=await this.listKeys();for(const a of o){const l=await this.components.datastore.get(ke(a.name)),u=D(l),h=await ws(u,n),c=i.toString(),d=await h.export(c),p=this.components.datastore.batch(),g={name:a.name,id:a.id};p.put(ke(a.name),T(d)),p.put(qe(a.name),T(JSON.stringify(g))),await p.commit()}bs("keychain reconstructed")}}class ll extends Map{constructor(e){super();const{name:t,metrics:s}=e;this.metric=s.registerMetric(t),this.updateComponentMetric()}set(e,t){return super.set(e,t),this.updateComponentMetric(),this}delete(e){const t=super.delete(e);return this.updateComponentMetric(),t}clear(){super.clear(),this.updateComponentMetric()}updateComponentMetric(){this.metric.update(this.size)}}function An(r){const{name:e,metrics:t}=r;let s;return t!=null?s=new ll({name:e,metrics:t}):s=new Map,s}const pt=_("libp2p:transports");class hl extends W{constructor(e,t={}){super(),this.components=e,this.started=!1,this.transports=new Map,this.listeners=An({name:"libp2p_transport_manager_listeners",metrics:this.components.metrics}),this.faultTolerance=t.faultTolerance??Ct.FATAL_ALL}add(e){const t=e[Symbol.toStringTag];if(t==null)throw f(new Error("Transport must have a valid tag"),y.ERR_INVALID_KEY);if(this.transports.has(t))throw f(new Error("There is already a transport with this tag"),y.ERR_DUPLICATE_TRANSPORT);pt("adding transport %s",t),this.transports.set(t,e),this.listeners.has(t)||this.listeners.set(t,[])}isStarted(){return this.started}async start(){const e=this.components.addressManager.getListenAddrs();await this.listen(e),this.started=!0}async stop(){const e=[];for(const[t,s]of this.listeners)for(pt("closing listeners for %s",t);s.length>0;){const n=s.pop();n!=null&&e.push(n.close())}await Promise.all(e),pt("all listeners closed");for(const t of this.listeners.keys())this.listeners.set(t,[]);this.started=!1}async dial(e,t){const s=this.transportForMultiaddr(e);if(s==null)throw f(new Error(`No transport available for address ${String(e)}`),y.ERR_TRANSPORT_UNAVAILABLE);try{return await s.dial(e,{...t,upgrader:this.components.upgrader})}catch(n){throw n.code==null&&(n.code=y.ERR_TRANSPORT_DIAL_FAILED),n}}getAddrs(){let e=[];for(const t of this.listeners.values())for(const s of t)e=[...e,...s.getAddrs()];return e}getTransports(){return Array.of(...this.transports.values())}transportForMultiaddr(e){for(const t of this.transports.values())if(t.filter([e]).length>0)return t}async listen(e){if(e==null||e.length===0){pt("no addresses were provided for listening, this node is dial only");return}const t=[];for(const[s,n]of this.transports.entries()){const i=n.filter(e),o=[];for(const u of i){pt("creating listener for %s on %s",s,u);const h=n.createListener({upgrader:this.components.upgrader});let c=this.listeners.get(s);c==null&&(c=[],this.listeners.set(s,c)),c.push(h),h.addEventListener("listening",()=>{this.dispatchEvent(new R("listener:listening",{detail:h}))}),h.addEventListener("close",()=>{this.dispatchEvent(new R("listener:close",{detail:h}))}),o.push(h.listen(u))}if(o.length===0){t.push(s);continue}if((await la(o)).find(u=>u.isFulfilled)==null&&this.faultTolerance!==Ct.NO_FATAL)throw f(new Error(`Transport (${s}) could not listen on any available address`),y.ERR_NO_VALID_ADDRESSES)}if(t.length===this.transports.size){const s=`no valid addresses were provided for transports [${t.join(", ")}]`;if(this.faultTolerance===Ct.FATAL_ALL)throw f(new Error(s),y.ERR_NO_VALID_ADDRESSES);pt(`libp2p in dial mode only: ${s}`)}}async remove(e){pt("removing %s",e);for(const t of this.listeners.get(e)??[])await t.close();this.transports.delete(e),this.listeners.delete(e)}async removeAll(){const e=[];for(const t of this.transports.keys())e.push(this.remove(t));await Promise.all(e)}}const kt="/multistream/1.0.0",dl=1024,ul=_("libp2p:mss"),yo=T(`
`);function sr(r){const e=new Xe(r,yo);return ha.single(e)}function Yt(r,e,t={}){const s=sr(e);t.writeBytes===!0?r.push(s.subarray()):r.push(s)}function pl(r,e,t={}){const s=new Xe;for(const n of e)s.append(sr(n));t.writeBytes===!0?r.push(s.subarray()):r.push(s)}async function fl(r,e){let t=1;const s={[Symbol.asyncIterator]:()=>s,next:async()=>await r.next(t)};let n=s;e?.signal!=null&&(n=vn(s,e.signal));const i=a=>{t=a},o=await da(n,a=>pa(a,{onLength:i,maxDataLength:dl}),async a=>await ua(a));if(o==null||o.length===0)throw new w("no buffer returned","ERR_INVALID_MULTISTREAM_SELECT_MESSAGE");if(o.get(o.byteLength-1)!==yo[0])throw ul.error("Invalid mss message - missing newline - %s",o.subarray()),new w("missing newline","ERR_INVALID_MULTISTREAM_SELECT_MESSAGE");return o.sublist(0,-1)}async function Ts(r,e){const t=await fl(r,e);return D(t.subarray())}const qt=_("libp2p:mss:select");async function fn(r,e,t={}){e=Array.isArray(e)?[...e]:[e];const{reader:s,writer:n,rest:i,stream:o}=Kn(r),a=e.shift();if(a==null)throw new Error("At least one protocol must be specified");qt.trace('select: write ["%s", "%s"]',kt,a);const l=T(kt),u=T(a);pl(n,[l,u],t);let h=await Ts(s,t);if(qt.trace('select: read "%s"',h),h===kt&&(h=await Ts(s,t),qt.trace('select: read "%s"',h)),h===a)return i(),{stream:o,protocol:a};for(const c of e){qt.trace('select: write "%s"',c),Yt(n,T(c),t);const d=await Ts(s,t);if(qt.trace('select: read "%s" for "%s"',d,c),d===c)return i(),{stream:o,protocol:c}}throw i(),new w("protocol selection failed","ERR_UNSUPPORTED_PROTOCOL")}const zt=_("libp2p:mss:handle");async function gn(r,e,t){e=Array.isArray(e)?e:[e];const{writer:s,reader:n,rest:i,stream:o}=Kn(r);for(;;){const a=await Ts(n,t);if(zt.trace('read "%s"',a),a===kt){zt.trace('respond with "%s" for "%s"',kt,a),Yt(s,T(kt),t);continue}if(e.includes(a))return Yt(s,T(a),t),zt.trace('respond with "%s" for "%s"',a,a),i(),{stream:o,protocol:a};if(a==="ls"){Yt(s,new Xe(...e.map(l=>sr(T(l)))),t),zt.trace('respond with "%s" for %s',e,a);continue}Yt(s,T("na"),t),zt('respond with "na" for "%s"',a)}}const gl=Symbol.for("@libp2p/connection"),yl=_("libp2p:connection");class ml{constructor(e){const{remoteAddr:t,remotePeer:s,newStream:n,close:i,getStreams:o,stat:a}=e;this.id=`${parseInt(String(Math.random()*1e9)).toString(36)}${Date.now()}`,this.remoteAddr=t,this.remotePeer=s,this.stat={...a,status:co},this._newStream=n,this._close=i,this._getStreams=o,this.tags=[],this._closing=!1}get[Symbol.toStringTag](){return"Connection"}get[gl](){return!0}get streams(){return this._getStreams()}async newStream(e,t){if(this.stat.status===xr)throw f(new Error("the connection is being closed"),"ERR_CONNECTION_BEING_CLOSED");if(this.stat.status===dn)throw f(new Error("the connection is closed"),"ERR_CONNECTION_CLOSED");Array.isArray(e)||(e=[e]);const s=await this._newStream(e,t);return s.stat.direction="outbound",s}addStream(e){e.stat.direction="inbound"}removeStream(e){}async close(){if(!(this.stat.status===dn||this._closing)){this.stat.status=xr;try{this.streams.forEach(e=>e.close())}catch(e){yl.error(e)}this._closing=!0,await this._close(),this._closing=!1,this.stat.timeline.close=Date.now(),this.stat.status=dn}}}function wl(r){return new ml(r)}const yn=_("libp2p:registrar"),mo=32,wo=64;class El{constructor(e){this.topologies=new Map,this.handlers=new Map,this.components=e,this._onDisconnect=this._onDisconnect.bind(this),this._onProtocolChange=this._onProtocolChange.bind(this),this._onConnect=this._onConnect.bind(this),this.components.connectionManager.addEventListener("peer:disconnect",this._onDisconnect),this.components.connectionManager.addEventListener("peer:connect",this._onConnect),this.components.peerStore.addEventListener("change:protocols",this._onProtocolChange)}getProtocols(){return Array.from(new Set([...this.topologies.keys(),...this.handlers.keys()])).sort()}getHandler(e){const t=this.handlers.get(e);if(t==null)throw f(new Error(`No handler registered for protocol ${e}`),y.ERR_NO_HANDLER_FOR_PROTOCOL);return t}getTopologies(e){const t=this.topologies.get(e);return t==null?[]:[...t.values()]}async handle(e,t,s){if(this.handlers.has(e))throw f(new Error(`Handler already registered for protocol ${e}`),y.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);const n=Gt.bind({ignoreUndefined:!0})({maxInboundStreams:mo,maxOutboundStreams:wo},s);this.handlers.set(e,{handler:t,options:n}),await this.components.peerStore.protoBook.add(this.components.peerId,[e])}async unhandle(e){const t=Array.isArray(e)?e:[e];t.forEach(s=>{this.handlers.delete(s)}),await this.components.peerStore.protoBook.remove(this.components.peerId,t)}async register(e,t){if(!N1(t))throw yn.error("topology must be an instance of interfaces/topology"),f(new Error("topology must be an instance of interfaces/topology"),y.ERR_INVALID_PARAMETERS);const s=`${(Math.random()*1e9).toString(36)}${Date.now()}`;let n=this.topologies.get(e);return n==null&&(n=new Map,this.topologies.set(e,n)),n.set(s,t),await t.setRegistrar(this),s}unregister(e){for(const[t,s]of this.topologies.entries())s.has(e)&&(s.delete(e),s.size===0&&this.topologies.delete(t))}_onDisconnect(e){const t=e.detail;this.components.peerStore.protoBook.get(t.remotePeer).then(s=>{for(const n of s){const i=this.topologies.get(n);if(i!=null)for(const o of i.values())o.onDisconnect(t.remotePeer)}}).catch(s=>{yn.error(s)})}_onConnect(e){const t=e.detail;this.components.peerStore.protoBook.get(t.remotePeer).then(s=>{for(const n of s){const i=this.topologies.get(n);if(i!=null)for(const o of i.values())o.onConnect(t.remotePeer,t)}}).catch(s=>{yn.error(s)})}_onProtocolChange(e){const{peerId:t,protocols:s,oldProtocols:n}=e.detail,i=n.filter(a=>!s.includes(a)),o=s.filter(a=>!n.includes(a));for(const a of i){const l=this.topologies.get(a);if(l!=null)for(const u of l.values())u.onDisconnect(t)}for(const a of o){const l=this.topologies.get(a);if(l!=null)for(const u of l.values()){const h=this.components.connectionManager.getConnections(t)[0];h!=null&&u.onConnect(t,h)}}}}const $=_("libp2p:upgrader");function bl(r,e){try{const{options:t}=e.getHandler(r);return t.maxInboundStreams}catch(t){if(t.code!==y.ERR_NO_HANDLER_FOR_PROTOCOL)throw t}return mo}function _l(r,e){try{const{options:t}=e.getHandler(r);return t.maxOutboundStreams}catch(t){if(t.code!==y.ERR_NO_HANDLER_FOR_PROTOCOL)throw t}return wo}function qr(r,e,t){let s=0;return t.streams.forEach(n=>{n.stat.direction===e&&n.stat.protocol===r&&s++}),s}class Rl extends W{constructor(e,t){super(),this.components=e,this.connectionEncryption=new Map,t.connectionEncryption.forEach(s=>{this.connectionEncryption.set(s.protocol,s)}),this.muxers=new Map,t.muxers.forEach(s=>{this.muxers.set(s.protocol,s)}),this.inboundUpgradeTimeout=t.inboundUpgradeTimeout}async upgradeInbound(e,t){if(!await this.components.connectionManager.acceptIncomingConnection(e))throw f(new Error("connection denied"),y.ERR_CONNECTION_DENIED);let n,i,o,a,l;const u=new ee.TimeoutController(this.inboundUpgradeTimeout);try{Y.setMaxListeners?.(1/0,u.signal)}catch{}try{const h=Fe(e,u.signal);if(e.source=h.source,e.sink=h.sink,await this.components.connectionGater.denyInboundConnection(e))throw f(new Error("The multiaddr connection is blocked by gater.acceptConnection"),y.ERR_CONNECTION_INTERCEPTED);this.components.metrics?.trackMultiaddrConnection(e),$("starting the inbound connection upgrade");let c=e;if(t?.skipProtection!==!0){const d=this.components.connectionProtector;d!=null&&($("protecting the inbound connection"),c=await d.protect(e))}try{if(n=c,t?.skipEncryption!==!0){if({conn:n,remotePeer:i,protocol:l}=await this._encryptInbound(c),await this.components.connectionGater.denyInboundEncryptedConnection(i,{...c,...n}))throw f(new Error("The multiaddr connection is blocked by gater.acceptEncryptedConnection"),y.ERR_CONNECTION_INTERCEPTED)}else{const d=e.remoteAddr.getPeerId();if(d==null)throw f(new Error("inbound connection that skipped encryption must have a peer id"),y.ERR_INVALID_MULTIADDR);const p=q(d);l="native",i=p}if(o=n,t?.muxerFactory!=null)a=t.muxerFactory;else if(this.muxers.size>0){const d=await this._multiplexInbound({...c,...n},this.muxers);a=d.muxerFactory,o=d.stream}}catch(d){throw $.error("Failed to upgrade inbound connection",d),d}if(await this.components.connectionGater.denyInboundUpgradedConnection(i,{...c,...n}))throw f(new Error("The multiaddr connection is blocked by gater.acceptEncryptedConnection"),y.ERR_CONNECTION_INTERCEPTED);return $("Successfully upgraded inbound connection"),this._createConnection({cryptoProtocol:l,direction:"inbound",maConn:e,upgradedConn:o,muxerFactory:a,remotePeer:i})}finally{this.components.connectionManager.afterUpgradeInbound(),u.clear()}}async upgradeOutbound(e,t){const s=e.remoteAddr.getPeerId();let n;if(s!=null&&(n=q(s),await this.components.connectionGater.denyOutboundConnection(n,e)))throw f(new Error("The multiaddr connection is blocked by connectionGater.denyOutboundConnection"),y.ERR_CONNECTION_INTERCEPTED);let i,o,a,l,u;this.components.metrics?.trackMultiaddrConnection(e),$("Starting the outbound connection upgrade");let h=e;if(t?.skipProtection!==!0){const c=this.components.connectionProtector;c!=null&&(h=await c.protect(e))}try{if(i=h,t?.skipEncryption!==!0){if({conn:i,remotePeer:o,protocol:l}=await this._encryptOutbound(h,n),await this.components.connectionGater.denyOutboundEncryptedConnection(o,{...h,...i}))throw f(new Error("The multiaddr connection is blocked by gater.acceptEncryptedConnection"),y.ERR_CONNECTION_INTERCEPTED)}else{if(n==null)throw f(new Error("Encryption was skipped but no peer id was passed"),y.ERR_INVALID_PEER);l="native",o=n}if(a=i,t?.muxerFactory!=null)u=t.muxerFactory;else if(this.muxers.size>0){const c=await this._multiplexOutbound({...h,...i},this.muxers);u=c.muxerFactory,a=c.stream}}catch(c){throw $.error("Failed to upgrade outbound connection",c),await e.close(c),c}if(await this.components.connectionGater.denyOutboundUpgradedConnection(o,{...h,...i}))throw f(new Error("The multiaddr connection is blocked by gater.acceptEncryptedConnection"),y.ERR_CONNECTION_INTERCEPTED);return $("Successfully upgraded outbound connection"),this._createConnection({cryptoProtocol:l,direction:"outbound",maConn:e,upgradedConn:a,muxerFactory:u,remotePeer:o})}_createConnection(e){const{cryptoProtocol:t,direction:s,maConn:n,upgradedConn:i,remotePeer:o,muxerFactory:a}=e;let l,u,h;a!=null&&(l=a.createStreamMuxer({direction:s,onIncomingStream:p=>{h!=null&&Promise.resolve().then(async()=>{const g=this.components.registrar.getProtocols(),{stream:m,protocol:E}=await gn(p,g);if($("%s: incoming stream opened on %s",s,E),h==null)return;const I=bl(E,this.components.registrar);if(qr(E,"inbound",h)===I){p.abort(f(new Error(`Too many inbound protocol streams for protocol "${E}" - limit ${I}`),y.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS));return}p.source=m.source,p.sink=m.sink,p.stat.protocol=E,this.components.peerStore.protoBook.add(o,[E]).catch(A=>$.error(A)),h.addStream(p),this.components.metrics?.trackProtocolStream(p,h),this._onStream({connection:h,stream:p,protocol:E})}).catch(g=>{$.error(g),p.stat.timeline.close==null&&p.close()})},onStreamEnd:p=>{h?.removeStream(p.id)}}),u=async(p,g={})=>{if(l==null)throw f(new Error("Stream is not multiplexed"),y.ERR_MUXER_UNAVAILABLE);$("%s: starting new stream on %s",s,p);const m=await l.newStream();let E;try{if(g.signal==null){$("No abort signal was passed while trying to negotiate protocols %s falling back to default timeout",p),E=new ee.TimeoutController(3e4),g.signal=E.signal;try{Y.setMaxListeners?.(1/0,E.signal)}catch{}}const{stream:I,protocol:N}=await fn(m,p,g),A=_l(N,this.components.registrar);if(qr(N,"outbound",h)===A){const b=f(new Error(`Too many outbound protocol streams for protocol "${N}" - limit ${A}`),y.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);throw m.abort(b),b}return this.components.peerStore.protoBook.add(o,[N]).catch(b=>$.error(b)),m.source=I.source,m.sink=I.sink,m.stat.protocol=N,this.components.metrics?.trackProtocolStream(m,h),m}catch(I){throw $.error("could not create new stream",I),m.stat.timeline.close==null&&m.close(),I.code!=null?I:f(I,y.ERR_UNSUPPORTED_PROTOCOL)}finally{E?.clear()}},Promise.all([l.sink(i.source),i.sink(l.source)]).catch(p=>{$.error(p)}));const c=n.timeline;n.timeline=new Proxy(c,{set:(...p)=>(h!=null&&p[1]==="close"&&p[2]!=null&&c.close==null&&(async()=>{try{h.stat.status==="OPEN"&&await h.close()}catch(g){$.error(g)}finally{this.dispatchEvent(new R("connectionEnd",{detail:h}))}})().catch(g=>{$.error(g)}),Reflect.set(...p))}),n.timeline.upgraded=Date.now();const d=()=>{throw f(new Error("connection is not multiplexed"),y.ERR_CONNECTION_NOT_MULTIPLEXED)};return h=wl({remoteAddr:n.remoteAddr,remotePeer:o,stat:{status:"OPEN",direction:s,timeline:n.timeline,multiplexer:l?.protocol,encryption:t},newStream:u??d,getStreams:()=>l!=null?l.streams:d(),close:async()=>{await n.close(),l?.close()}}),this.dispatchEvent(new R("connection",{detail:h})),h}_onStream(e){const{connection:t,stream:s,protocol:n}=e,{handler:i}=this.components.registrar.getHandler(n);i({connection:t,stream:s})}async _encryptInbound(e){const t=Array.from(this.connectionEncryption.keys());$("handling inbound crypto protocol selection",t);try{const{stream:s,protocol:n}=await gn(e,t,{writeBytes:!0}),i=this.connectionEncryption.get(n);if(i==null)throw new Error(`no crypto module found for ${n}`);return $("encrypting inbound connection..."),{...await i.secureInbound(this.components.peerId,s),protocol:n}}catch(s){throw f(s,y.ERR_ENCRYPTION_FAILED)}}async _encryptOutbound(e,t){const s=Array.from(this.connectionEncryption.keys());$("selecting outbound crypto protocol",s);try{const{stream:n,protocol:i}=await fn(e,s,{writeBytes:!0}),o=this.connectionEncryption.get(i);if(o==null)throw new Error(`no crypto module found for ${i}`);return $("encrypting outbound connection to %p",t),{...await o.secureOutbound(this.components.peerId,n,t),protocol:i}}catch(n){throw f(n,y.ERR_ENCRYPTION_FAILED)}}async _multiplexOutbound(e,t){const s=Array.from(t.keys());$("outbound selecting muxer %s",s);try{const{stream:n,protocol:i}=await fn(e,s,{writeBytes:!0});$("%s selected as muxer protocol",i);const o=t.get(i);return{stream:n,muxerFactory:o}}catch(n){throw $.error("error multiplexing outbound stream",n),f(n,y.ERR_MUXER_UNAVAILABLE)}}async _multiplexInbound(e,t){const s=Array.from(t.keys());$("inbound handling muxers %s",s);try{const{stream:n,protocol:i}=await gn(e,s,{writeBytes:!0}),o=t.get(i);return{stream:n,muxerFactory:o}}catch(n){throw $.error("error multiplexing inbound stream",n),f(n,y.ERR_MUXER_UNAVAILABLE)}}}var Dt;(function(r){let e;r.codec=()=>(e==null&&(e=ts((t,s,n={})=>{if(n.lengthDelimited!==!1&&s.fork(),t.protocolVersion!=null&&(s.uint32(42),s.string(t.protocolVersion)),t.agentVersion!=null&&(s.uint32(50),s.string(t.agentVersion)),t.publicKey!=null&&(s.uint32(10),s.bytes(t.publicKey)),t.listenAddrs!=null)for(const i of t.listenAddrs)s.uint32(18),s.bytes(i);if(t.observedAddr!=null&&(s.uint32(34),s.bytes(t.observedAddr)),t.protocols!=null)for(const i of t.protocols)s.uint32(26),s.string(i);t.signedPeerRecord!=null&&(s.uint32(66),s.bytes(t.signedPeerRecord)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={listenAddrs:[],protocols:[]},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 5:n.protocolVersion=t.string();break;case 6:n.agentVersion=t.string();break;case 1:n.publicKey=t.bytes();break;case 2:n.listenAddrs.push(t.bytes());break;case 4:n.observedAddr=t.bytes();break;case 3:n.protocols.push(t.string());break;case 8:n.signedPeerRecord=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>ss(t,r.codec()),r.decode=t=>ns(t,r.codec())})(Dt||(Dt={}));const Eo="0.0.0",Sl="libp2p",bo=`js-libp2p/${Eo}`,vl="0.1.0",Il="id",Pl="id/push",Dl="1.0.0",Tl="1.0.0",F=_("libp2p:identify"),zr=1024*8;class nr{constructor(e,t){this.components=e,this.started=!1,this.init=t,this.identifyProtocolStr=`/${t.protocolPrefix}/${Il}/${Dl}`,this.identifyPushProtocolStr=`/${t.protocolPrefix}/${Pl}/${Tl}`,this.host={protocolVersion:`${t.protocolPrefix}/${vl}`,...t.host},this.components.connectionManager.addEventListener("peer:connect",s=>{const n=s.detail;this.identify(n).catch(F.error)}),this.components.peerStore.addEventListener("change:multiaddrs",s=>{const{peerId:n}=s.detail;this.components.peerId.equals(n)&&this.pushToPeerStore().catch(i=>F.error(i))}),this.components.peerStore.addEventListener("change:protocols",s=>{const{peerId:n}=s.detail;this.components.peerId.equals(n)&&this.pushToPeerStore().catch(i=>F.error(i))})}isStarted(){return this.started}async start(){this.started||(await this.components.peerStore.metadataBook.setValue(this.components.peerId,"AgentVersion",T(this.host.agentVersion)),await this.components.peerStore.metadataBook.setValue(this.components.peerId,"ProtocolVersion",T(this.host.protocolVersion)),await this.components.registrar.handle(this.identifyProtocolStr,e=>{this._handleIdentify(e).catch(t=>{F.error(t)})},{maxInboundStreams:this.init.maxInboundStreams,maxOutboundStreams:this.init.maxOutboundStreams}),await this.components.registrar.handle(this.identifyPushProtocolStr,e=>{this._handlePush(e).catch(t=>{F.error(t)})},{maxInboundStreams:this.init.maxPushIncomingStreams,maxOutboundStreams:this.init.maxPushOutgoingStreams}),this.started=!0)}async stop(){await this.components.registrar.unhandle(this.identifyProtocolStr),await this.components.registrar.unhandle(this.identifyPushProtocolStr),this.started=!1}async push(e){const t=await this.components.peerStore.addressBook.getRawEnvelope(this.components.peerId),s=this.components.addressManager.getAddresses().map(o=>o.bytes),n=await this.components.peerStore.protoBook.get(this.components.peerId),i=e.map(async o=>{let a;const l=new ee.TimeoutController(this.init.timeout);try{Y.setMaxListeners?.(1/0,l.signal)}catch{}try{a=await o.newStream([this.identifyPushProtocolStr],{signal:l.signal}),await Fe(a,l.signal).sink(z([Dt.encode({listenAddrs:s,signedPeerRecord:t,protocols:n})],Je()))}catch(u){F.error("could not push identify update to peer",u)}finally{a?.close(),l.clear()}});await Promise.all(i)}async pushToPeerStore(){if(!this.isStarted())return;const e=[];for(const t of this.components.connectionManager.getConnections()){const s=t.remotePeer;(await this.components.peerStore.get(s)).protocols.includes(this.identifyPushProtocolStr)&&e.push(t)}await this.push(e)}async _identify(e,t={}){let s,n=t.signal,i;if(n==null){s=new ee.TimeoutController(this.init.timeout),n=s.signal;try{Y.setMaxListeners?.(1/0,s.signal)}catch{}}try{i=await e.newStream([this.identifyProtocolStr],{signal:n});const o=Fe(i,n),a=await z([],o,Ze({maxDataLength:this.init.maxIdentifyMessageSize??zr}),async l=>await Et(l));if(a==null)throw f(new Error("No data could be retrieved"),y.ERR_CONNECTION_ENDED);try{return Dt.decode(a)}catch(l){throw f(l,y.ERR_INVALID_MESSAGE)}}finally{s?.clear(),i?.close()}}async identify(e,t={}){const s=await this._identify(e,t),{publicKey:n,listenAddrs:i,protocols:o,observedAddr:a,signedPeerRecord:l,agentVersion:u,protocolVersion:h}=s;if(n==null)throw f(new Error("public key was missing from identify message"),y.ERR_MISSING_PUBLIC_KEY);const c=await bt(n);if(!e.remotePeer.equals(c))throw f(new Error("identified peer does not match the expected peer"),y.ERR_INVALID_PEER);if(this.components.peerId.equals(c))throw f(new Error("identified peer is our own peer id?"),y.ERR_INVALID_PEER);const d=nr.getCleanMultiaddr(a);if(l!=null){F("received signed peer record from %p",c);try{const p=await we.openAndCertify(l,ue.DOMAIN);if(!p.peerId.equals(c))throw f(new Error("identified peer does not match the expected peer"),y.ERR_INVALID_PEER);if(await this.components.peerStore.addressBook.consumePeerRecord(p)){await this.components.peerStore.protoBook.set(c,o),u!=null&&await this.components.peerStore.metadataBook.setValue(c,"AgentVersion",T(u)),h!=null&&await this.components.peerStore.metadataBook.setValue(c,"ProtocolVersion",T(h)),F("identify completed for peer %p and protocols %o",c,o);return}}catch(p){F("received invalid envelope, discard it and fallback to listenAddrs is available",p)}}else F("no signed peer record received from %p",c);F("falling back to legacy addresses from %p",c);try{await this.components.peerStore.addressBook.set(c,i.map(p=>G(p)))}catch(p){F.error("received invalid addrs",p)}await this.components.peerStore.protoBook.set(c,o),u!=null&&await this.components.peerStore.metadataBook.setValue(c,"AgentVersion",T(u)),h!=null&&await this.components.peerStore.metadataBook.setValue(c,"ProtocolVersion",T(h)),F("identify completed for peer %p and protocols %o",c,o),F("received observed address of %s",d?.toString())}async _handleIdentify(e){const{connection:t,stream:s}=e,n=new ee.TimeoutController(this.init.timeout);try{Y.setMaxListeners?.(1/0,n.signal)}catch{}try{const i=this.components.peerId.publicKey??new Uint8Array(0),o=await this.components.peerStore.get(this.components.peerId),a=this.components.addressManager.getAddresses().map(d=>d.decapsulateCode(Mn("p2p").code));let l=o.peerRecordEnvelope;if(a.length>0&&l==null){const d=new ue({peerId:this.components.peerId,multiaddrs:a}),p=await we.seal(d,this.components.peerId);await this.components.peerStore.addressBook.consumePeerRecord(p),l=p.marshal().subarray()}const u=Dt.encode({protocolVersion:this.host.protocolVersion,agentVersion:this.host.agentVersion,publicKey:i,listenAddrs:a.map(d=>d.bytes),signedPeerRecord:l,observedAddr:t.remoteAddr.bytes,protocols:o.protocols}),h=Fe(s,n.signal),c=z([u],Je());await h.sink(c)}catch(i){F.error("could not respond to identify request",i)}finally{s.close(),n.clear()}}async _handlePush(e){const{connection:t,stream:s}=e,n=new ee.TimeoutController(this.init.timeout);try{Y.setMaxListeners?.(1/0,n.signal)}catch{}let i;try{const a=Fe(s,n.signal),l=await z([],a,Ze({maxDataLength:this.init.maxIdentifyMessageSize??zr}),async u=>await Et(u));l!=null&&(i=Dt.decode(l))}catch(a){return F.error("received invalid message",a)}finally{s.close(),n.clear()}if(i==null)return F.error("received invalid message");const o=t.remotePeer;if(this.components.peerId.equals(o)){F("received push from ourselves?");return}if(F("received push from %p",o),i.signedPeerRecord!=null){F("received signedPeerRecord in push");try{const a=await we.openAndCertify(i.signedPeerRecord,ue.DOMAIN);if(await this.components.peerStore.addressBook.consumePeerRecord(a)){F("consumed signedPeerRecord sent in push"),await this.components.peerStore.protoBook.set(o,i.protocols);return}else F("failed to consume signedPeerRecord sent in push")}catch(a){F("received invalid envelope, discard it and fallback to listenAddrs is available",a)}}else F("did not receive signedPeerRecord in push");try{await this.components.peerStore.addressBook.set(o,i.listenAddrs.map(a=>G(a)))}catch(a){F.error("received invalid addrs",a)}try{await this.components.peerStore.protoBook.set(o,i.protocols)}catch(a){F.error("received invalid protocols",a)}F("handled push from %p",o)}static getCleanMultiaddr(e){if(e!=null&&e.length>0)try{return G(e)}catch{}}}var $s;(function(r){let e;r.codec=()=>(e==null&&(e=ts((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),(n.writeDefaults===!0||t.identifier!=="")&&(s.uint32(10),s.string(t.identifier)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={identifier:""},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.identifier=t.string();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>ss(t,r.codec()),r.decode=t=>ns(t,r.codec())})($s||($s={}));var Ue;(function(r){let e;(function(n){n.OK="OK",n.NOT_FOUND="NOT_FOUND",n.ERROR="ERROR"})(e=r.StatusCode||(r.StatusCode={}));let t;(function(n){n[n.OK=0]="OK",n[n.NOT_FOUND=1]="NOT_FOUND",n[n.ERROR=2]="ERROR"})(t||(t={})),function(n){n.codec=()=>Sn(t)}(e=r.StatusCode||(r.StatusCode={}));let s;r.codec=()=>(s==null&&(s=ts((n,i,o={})=>{o.lengthDelimited!==!1&&i.fork(),(o.writeDefaults===!0||n.status!=null&&t[n.status]!==0)&&(i.uint32(8),r.StatusCode.codec().encode(n.status,i)),(o.writeDefaults===!0||n.data!=null&&n.data.byteLength>0)&&(i.uint32(18),i.bytes(n.data)),o.lengthDelimited!==!1&&i.ldelim()},(n,i)=>{const o={status:e.OK,data:new Uint8Array(0)},a=i==null?n.len:n.pos+i;for(;n.pos<a;){const l=n.uint32();switch(l>>>3){case 1:o.status=r.StatusCode.codec().decode(n);break;case 2:o.data=n.bytes();break;default:n.skipType(l&7);break}}return o})),s),r.encode=n=>ss(n,r.codec()),r.decode=n=>ns(n,r.codec())})(Ue||(Ue={}));const Al="0.0.1",Ol="fetch",be=_("libp2p:fetch");class Cl{constructor(e,t){this.started=!1,this.components=e,this.protocol=`/${t.protocolPrefix??"libp2p"}/${Ol}/${Al}`,this.lookupFunctions=new Map,this.handleMessage=this.handleMessage.bind(this),this.init=t}async start(){await this.components.registrar.handle(this.protocol,e=>{this.handleMessage(e).catch(t=>{be.error(t)}).finally(()=>{e.stream.close()})},{maxInboundStreams:this.init.maxInboundStreams,maxOutboundStreams:this.init.maxOutboundStreams}),this.started=!0}async stop(){await this.components.registrar.unhandle(this.protocol),this.started=!1}isStarted(){return this.started}async fetch(e,t,s={}){be("dialing %s to %p",this.protocol,e);const n=await this.components.connectionManager.openConnection(e,s);let i,o=s.signal,a;if(o==null){be("using default timeout of %d ms",this.init.timeout),i=new ee.TimeoutController(this.init.timeout),o=i.signal;try{Y.setMaxListeners?.(1/0,i.signal)}catch{}}try{a=await n.newStream(this.protocol,{signal:o});const l=Fe(a,o);return be("fetch %s",t),await z([$s.encode({identifier:t})],Je(),l,Ze(),async function(h){const c=await Et(h);if(c==null)throw f(new Error("No data received"),y.ERR_INVALID_MESSAGE);const d=Ue.decode(c);switch(d.status){case Ue.StatusCode.OK:return be("received status for %s ok",t),d.data;case Ue.StatusCode.NOT_FOUND:return be("received status for %s not found",t),null;case Ue.StatusCode.ERROR:{be("received status for %s error",t);const p=D(d.data);throw f(new Error("Error in fetch protocol response: "+p),y.ERR_INVALID_PARAMETERS)}default:throw be("received status for %s unknown",t),f(new Error("Unknown response status"),y.ERR_INVALID_MESSAGE)}})??null}finally{i?.clear(),a?.close()}}async handleMessage(e){const{stream:t}=e,s=this;await z(t,Ze(),async function*(n){const i=await Et(n);if(i==null)throw f(new Error("No data received"),y.ERR_INVALID_MESSAGE);const o=$s.decode(i);let a;const l=s._getLookupFunction(o.identifier);if(l!=null){be("look up data with identifier %s",o.identifier);const u=await l(o.identifier);u!=null?(be("sending status for %s ok",o.identifier),a={status:Ue.StatusCode.OK,data:u}):(be("sending status for %s not found",o.identifier),a={status:Ue.StatusCode.NOT_FOUND,data:new Uint8Array(0)})}else{be("sending status for %s error",o.identifier);const u=T(`No lookup function registered for key: ${o.identifier}`);a={status:Ue.StatusCode.ERROR,data:u}}yield Ue.encode(a)},Je(),t)}_getLookupFunction(e){for(const t of this.lookupFunctions.keys())if(e.startsWith(t))return this.lookupFunctions.get(t)}registerLookupFunction(e,t){if(this.lookupFunctions.has(e))throw f(new Error("Fetch protocol handler for key prefix '"+e+"' already registered"),y.ERR_KEY_ALREADY_EXISTS);this.lookupFunctions.set(e,t)}unregisterLookupFunction(e,t){t!=null&&this.lookupFunctions.get(e)!==t||this.lookupFunctions.delete(e)}}const kl=32,Nl="1.0.0",Ml="ping",Wr=_("libp2p:ping");class Ll{constructor(e,t){this.components=e,this.started=!1,this.protocol=`/${t.protocolPrefix}/${Ml}/${Nl}`,this.init=t}async start(){await this.components.registrar.handle(this.protocol,this.handleMessage,{maxInboundStreams:this.init.maxInboundStreams,maxOutboundStreams:this.init.maxOutboundStreams}),this.started=!0}async stop(){await this.components.registrar.unhandle(this.protocol),this.started=!1}isStarted(){return this.started}handleMessage(e){const{stream:t}=e;z(t,t).catch(s=>{Wr.error(s)})}async ping(e,t={}){Wr("dialing %s to %p",this.protocol,e);const s=Date.now(),n=ps(kl),i=await this.components.connectionManager.openConnection(e,t);let o,a=t.signal,l;if(a==null){o=new ee.TimeoutController(this.init.timeout),a=o.signal;try{Y.setMaxListeners?.(1/0,o.signal)}catch{}}try{l=await i.newStream([this.protocol],{signal:a});const u=Fe(l,a),h=await z([n],u,async d=>await Et(d)),c=Date.now();if(h==null||!J(n,h.subarray()))throw f(new Error("Received wrong ping ack"),y.ERR_WRONG_PING_ACK);return c-s}finally{o?.clear(),l?.close()}}}function Ul(r){const{address:e}=r.nodeAddress();return fa(e)}const mn=_("libp2p:nat"),wn=7200;function xl(r=1024,e=65535){return Math.floor(Math.random()*(e-r+1)+r)}class Kl{constructor(e,t){if(this.components=e,this.started=!1,this.enabled=t.enabled,this.externalAddress=t.externalAddress,this.localAddress=t.localAddress,this.description=t.description??`${Sl}@${Eo} ${this.components.peerId.toString()}`,this.ttl=t.ttl??wn,this.keepAlive=t.keepAlive??!0,this.gateway=t.gateway,this.ttl<wn)throw f(new Error(`NatManager ttl should be at least ${wn} seconds`),y.ERR_INVALID_PARAMETERS)}isStarted(){return this.started}start(){}afterStart(){Cs||!this.enabled||this.started||(this.started=!0,this._start().catch(e=>{mn.error(e)}))}async _start(){const e=this.components.transportManager.getAddrs();for(const t of e){const{family:s,host:n,port:i,transport:o}=t.toOptions();if(!t.isThinWaistAddress()||o!=="tcp"||Ul(t)||s!==4)continue;const a=await this._getClient(),l=this.externalAddress??await a.externalIp(),u=en(l);if(u===!0)throw new Error(`${l} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);if(u==null)throw new Error(`${l} is not an IP address`);const h=xl();mn(`opening uPnP connection from ${l}:${h} to ${n}:${i}`),await a.map({publicPort:h,localPort:i,localAddress:this.localAddress,protocol:o.toUpperCase()==="TCP"?"TCP":"UDP"}),this.components.addressManager.addObservedAddr(Vo({family:4,address:l,port:h},o))}}async _getClient(){return this.client!=null?this.client:(this.client=await ga({description:this.description,ttl:this.ttl,keepAlive:this.keepAlive,gateway:this.gateway}),this.client)}async stop(){if(!(Cs||this.client==null))try{await this.client.close(),this.client=void 0}catch(e){mn.error(e)}}}const Fl=_("libp2p:peer-record-updater");class Bl{constructor(e){this.components=e,this.started=!1,this.update=this.update.bind(this)}isStarted(){return this.started}async start(){this.started=!0,this.components.transportManager.addEventListener("listener:listening",this.update),this.components.transportManager.addEventListener("listener:close",this.update),this.components.addressManager.addEventListener("change:addresses",this.update)}async stop(){this.started=!1,this.components.transportManager.removeEventListener("listener:listening",this.update),this.components.transportManager.removeEventListener("listener:close",this.update),this.components.addressManager.removeEventListener("change:addresses",this.update)}update(){Promise.resolve().then(async()=>{const e=new ue({peerId:this.components.peerId,multiaddrs:this.components.addressManager.getAddresses().map(s=>s.decapsulateCode(Mn("p2p").code))}),t=await we.seal(e,this.components.peerId);await this.components.peerStore.addressBook.consumePeerRecord(t)}).catch(e=>{Fl.error("Could not update self peer record: %o",e)})}}class Vl{constructor(e){this.dht=e}async findPeer(e,t={}){for await(const s of this.dht.findPeer(e,t))if(s.name==="FINAL_PEER")return s.peer;throw f(new Error(L.NOT_FOUND),y.ERR_NOT_FOUND)}async*getClosestPeers(e,t={}){for await(const s of this.dht.getClosestPeers(e,t))s.name==="FINAL_PEER"&&(yield s.peer)}}const C={ERR_INVALID_PARAMETERS:"ERR_INVALID_PARAMETERS",ERR_NOT_FOUND:"ERR_NOT_FOUND"},K=_("libp2p:peer-store:address-book"),_s="change:multiaddrs";async function Gl(){return!0}class $l{constructor(e,t,s){this.dispatchEvent=e,this.store=t,this.addressFilter=s??Gl}async consumePeerRecord(e){K.trace("consumePeerRecord await write lock");const t=await this.store.lock.writeLock();K.trace("consumePeerRecord got write lock");let s,n,i;try{let o;try{o=ue.createFromProtobuf(e.payload)}catch{return K.error("invalid peer record received"),!1}s=o.peerId;const a=o.multiaddrs;if(!s.equals(e.peerId))return K("signing key does not match PeerId in the PeerRecord"),!1;if(a==null||a.length===0)return!1;if(await this.store.has(s)&&(n=await this.store.load(s),n.peerRecordEnvelope!=null)){const u=await we.createFromProtobuf(n.peerRecordEnvelope),h=ue.createFromProtobuf(u.payload);if(h.seqNumber>=o.seqNumber)return K("sequence number was lower or equal to existing sequence number - stored: %d received: %d",h.seqNumber,o.seqNumber),!1}const l=await En(s,a,this.addressFilter,!0);i=await this.store.patchOrCreate(s,{addresses:l,peerRecordEnvelope:e.marshal().subarray()}),K("stored provided peer record for %p",o.peerId)}finally{K.trace("consumePeerRecord release write lock"),t()}return this.dispatchEvent(new R(_s,{detail:{peerId:s,multiaddrs:i.addresses.map(({multiaddr:o})=>o),oldMultiaddrs:n==null?[]:n.addresses.map(({multiaddr:o})=>o)}})),!0}async getRawEnvelope(e){K.trace("getRawEnvelope await read lock");const t=await this.store.lock.readLock();K.trace("getRawEnvelope got read lock");try{return(await this.store.load(e)).peerRecordEnvelope}catch(s){if(s.code!==C.ERR_NOT_FOUND)throw s}finally{K.trace("getRawEnvelope release read lock"),t()}}async getPeerRecord(e){const t=await this.getRawEnvelope(e);if(t!=null)return await we.createFromProtobuf(t)}async get(e){e=se(e),K.trace("get wait for read lock");const t=await this.store.lock.readLock();K.trace("get got read lock");try{return(await this.store.load(e)).addresses}catch(s){if(s.code!==C.ERR_NOT_FOUND)throw s}finally{K.trace("get release read lock"),t()}return[]}async set(e,t){if(e=se(e),!Array.isArray(t))throw K.error("multiaddrs must be an array of Multiaddrs"),new w("multiaddrs must be an array of Multiaddrs",C.ERR_INVALID_PARAMETERS);K.trace("set await write lock");const s=await this.store.lock.writeLock();K.trace("set got write lock");let n=!1,i,o;try{const a=await En(e,t,this.addressFilter);if(a.length===0)return;try{if(i=await this.store.load(e),n=!0,new Set([...a.map(({multiaddr:l})=>l.toString()),...i.addresses.map(({multiaddr:l})=>l.toString())]).size===i.addresses.length&&a.length===i.addresses.length)return}catch(l){if(l.code!==C.ERR_NOT_FOUND)throw l}o=await this.store.patchOrCreate(e,{addresses:a}),K("set multiaddrs for %p",e)}finally{K.trace("set multiaddrs for %p",e),K("set release write lock"),s()}this.dispatchEvent(new R(_s,{detail:{peerId:e,multiaddrs:o.addresses.map(a=>a.multiaddr),oldMultiaddrs:i==null?[]:i.addresses.map(({multiaddr:a})=>a)}})),n||this.dispatchEvent(new R("peer",{detail:{id:e,multiaddrs:o.addresses.map(a=>a.multiaddr),protocols:o.protocols}}))}async add(e,t){if(e=se(e),!Array.isArray(t))throw K.error("multiaddrs must be an array of Multiaddrs"),new w("multiaddrs must be an array of Multiaddrs",C.ERR_INVALID_PARAMETERS);K.trace("add await write lock");const s=await this.store.lock.writeLock();K.trace("add got write lock");let n,i,o;try{const a=await En(e,t,this.addressFilter);if(a.length===0)return;try{if(i=await this.store.load(e),n=!0,new Set([...a.map(({multiaddr:l})=>l.toString()),...i.addresses.map(({multiaddr:l})=>l.toString())]).size===i.addresses.length)return}catch(l){if(l.code!==C.ERR_NOT_FOUND)throw l}o=await this.store.mergeOrCreate(e,{addresses:a}),K("added multiaddrs for %p",e)}finally{K.trace("set release write lock"),s()}this.dispatchEvent(new R(_s,{detail:{peerId:e,multiaddrs:o.addresses.map(a=>a.multiaddr),oldMultiaddrs:i==null?[]:i.addresses.map(({multiaddr:a})=>a)}})),n===!0&&this.dispatchEvent(new R("peer",{detail:{id:e,multiaddrs:o.addresses.map(a=>a.multiaddr),protocols:o.protocols}}))}async delete(e){e=se(e),K.trace("delete await write lock");const t=await this.store.lock.writeLock();K.trace("delete got write lock");let s;try{try{s=await this.store.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}await this.store.patchOrCreate(e,{addresses:[]})}finally{K.trace("delete release write lock"),t()}s!=null&&this.dispatchEvent(new R(_s,{detail:{peerId:e,multiaddrs:[],oldMultiaddrs:s==null?[]:s.addresses.map(({multiaddr:n})=>n)}}))}}async function En(r,e,t,s=!1){const n=[];return await Promise.all(e.map(async i=>{if(!yt(i))throw K.error("multiaddr must be an instance of Multiaddr"),new w("multiaddr must be an instance of Multiaddr",C.ERR_INVALID_PARAMETERS);await t(r,i)&&n.push({multiaddr:i,isCertified:s})})),n}const Ne=_("libp2p:peer-store:key-book"),Yr="change:pubkey";class Hl{constructor(e,t){this.dispatchEvent=e,this.store=t}async set(e,t){if(e=se(e),!(t instanceof Uint8Array))throw Ne.error("publicKey must be an instance of Uint8Array to store data"),new w("publicKey must be an instance of PublicKey",C.ERR_INVALID_PARAMETERS);Ne.trace("set await write lock");const s=await this.store.lock.writeLock();Ne.trace("set got write lock");let n=!1,i;try{try{if(i=await this.store.load(e),i.pubKey!=null&&J(i.pubKey,t))return}catch(o){if(o.code!==C.ERR_NOT_FOUND)throw o}await this.store.patchOrCreate(e,{pubKey:t}),n=!0}finally{Ne.trace("set release write lock"),s()}n&&this.dispatchEvent(new R(Yr,{detail:{peerId:e,publicKey:t,oldPublicKey:i?.pubKey}}))}async get(e){e=se(e),Ne.trace("get await write lock");const t=await this.store.lock.readLock();Ne.trace("get got write lock");try{return(await this.store.load(e)).pubKey}catch(s){if(s.code!==C.ERR_NOT_FOUND)throw s}finally{Ne("get release write lock"),t()}}async delete(e){e=se(e),Ne.trace("delete await write lock");const t=await this.store.lock.writeLock();Ne.trace("delete got write lock");let s;try{try{s=await this.store.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}await this.store.patchOrCreate(e,{pubKey:void 0})}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}finally{Ne.trace("delete release write lock"),t()}this.dispatchEvent(new R(Yr,{detail:{peerId:e,publicKey:void 0,oldPublicKey:s?.pubKey}}))}}const X=_("libp2p:peer-store:metadata-book"),Rs="change:metadata";class ql{constructor(e,t){this.dispatchEvent=e,this.store=t}async get(e){e=se(e),X.trace("get await read lock");const t=await this.store.lock.readLock();X.trace("get got read lock");try{return(await this.store.load(e)).metadata}catch(s){if(s.code!==C.ERR_NOT_FOUND)throw s}finally{X.trace("get release read lock"),t()}return new Map}async getValue(e,t){e=se(e),X.trace("getValue await read lock");const s=await this.store.lock.readLock();X.trace("getValue got read lock");try{return(await this.store.load(e)).metadata.get(t)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}finally{X.trace("getValue release write lock"),s()}}async set(e,t){if(e=se(e),!(t instanceof Map))throw X.error("valid metadata must be provided to store data"),new w("valid metadata must be provided",C.ERR_INVALID_PARAMETERS);X.trace("set await write lock");const s=await this.store.lock.writeLock();X.trace("set got write lock");let n;try{try{n=await this.store.load(e)}catch(i){if(i.code!==C.ERR_NOT_FOUND)throw i}await this.store.mergeOrCreate(e,{metadata:t})}finally{X.trace("set release write lock"),s()}this.dispatchEvent(new R(Rs,{detail:{peerId:e,metadata:t,oldMetadata:n==null?new Map:n.metadata}}))}async setValue(e,t,s){if(e=se(e),typeof t!="string"||!(s instanceof Uint8Array))throw X.error("valid key and value must be provided to store data"),new w("valid key and value must be provided",C.ERR_INVALID_PARAMETERS);X.trace("setValue await write lock");const n=await this.store.lock.writeLock();X.trace("setValue got write lock");let i,o;try{try{i=await this.store.load(e);const a=i.metadata.get(t);if(a!=null&&J(s,a))return}catch(a){if(a.code!==C.ERR_NOT_FOUND)throw a}o=await this.store.mergeOrCreate(e,{metadata:new Map([[t,s]])})}finally{X.trace("setValue release write lock"),n()}this.dispatchEvent(new R(Rs,{detail:{peerId:e,metadata:o.metadata,oldMetadata:i==null?new Map:i.metadata}}))}async delete(e){e=se(e),X.trace("delete await write lock");const t=await this.store.lock.writeLock();X.trace("delete got write lock");let s;try{try{s=await this.store.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}s!=null&&await this.store.patch(e,{metadata:new Map})}finally{X.trace("delete release write lock"),t()}s!=null&&this.dispatchEvent(new R(Rs,{detail:{peerId:e,metadata:new Map,oldMetadata:s.metadata}}))}async deleteValue(e,t){e=se(e),X.trace("deleteValue await write lock");const s=await this.store.lock.writeLock();X.trace("deleteValue got write lock");let n,i;try{i=await this.store.load(e),n=i.metadata,n.delete(t),await this.store.patch(e,{metadata:n})}catch(o){if(o.code!==C.ERR_NOT_FOUND)throw o}finally{X.trace("deleteValue release write lock"),s()}n!=null&&this.dispatchEvent(new R(Rs,{detail:{peerId:e,metadata:n,oldMetadata:i==null?new Map:i.metadata}}))}}const j=_("libp2p:peer-store:proto-book"),Ss="change:protocols";class zl{constructor(e,t){this.dispatchEvent=e,this.store=t}async get(e){j.trace("get wait for read lock");const t=await this.store.lock.readLock();j.trace("get got read lock");try{return(await this.store.load(e)).protocols}catch(s){if(s.code!==C.ERR_NOT_FOUND)throw s}finally{j.trace("get release read lock"),t()}return[]}async set(e,t){if(e=se(e),!Array.isArray(t))throw j.error("protocols must be provided to store data"),new w("protocols must be provided",C.ERR_INVALID_PARAMETERS);j.trace("set await write lock");const s=await this.store.lock.writeLock();j.trace("set got write lock");let n,i;try{try{if(n=await this.store.load(e),new Set([...t]).size===n.protocols.length)return}catch(o){if(o.code!==C.ERR_NOT_FOUND)throw o}i=await this.store.patchOrCreate(e,{protocols:t}),j("stored provided protocols for %p",e)}finally{j.trace("set release write lock"),s()}this.dispatchEvent(new R(Ss,{detail:{peerId:e,protocols:i.protocols,oldProtocols:n==null?[]:n.protocols}}))}async add(e,t){if(e=se(e),!Array.isArray(t))throw j.error("protocols must be provided to store data"),new w("protocols must be provided",C.ERR_INVALID_PARAMETERS);j.trace("add await write lock");const s=await this.store.lock.writeLock();j.trace("add got write lock");let n,i;try{try{if(n=await this.store.load(e),new Set([...n.protocols,...t]).size===n.protocols.length)return}catch(o){if(o.code!==C.ERR_NOT_FOUND)throw o}i=await this.store.mergeOrCreate(e,{protocols:t}),j("added provided protocols for %p",e)}finally{j.trace("add release write lock"),s()}this.dispatchEvent(new R(Ss,{detail:{peerId:e,protocols:i.protocols,oldProtocols:n==null?[]:n.protocols}}))}async remove(e,t){if(e=se(e),!Array.isArray(t))throw j.error("protocols must be provided to store data"),new w("protocols must be provided",C.ERR_INVALID_PARAMETERS);j.trace("remove await write lock");const s=await this.store.lock.writeLock();j.trace("remove got write lock");let n,i;try{try{n=await this.store.load(e);const o=new Set(n.protocols);for(const a of t)o.delete(a);if(n.protocols.length===o.size)return;t=Array.from(o)}catch(o){if(o.code!==C.ERR_NOT_FOUND)throw o}i=await this.store.patchOrCreate(e,{protocols:t})}finally{j.trace("remove release write lock"),s()}this.dispatchEvent(new R(Ss,{detail:{peerId:e,protocols:i.protocols,oldProtocols:n==null?[]:n.protocols}}))}async delete(e){e=se(e),j.trace("delete await write lock");const t=await this.store.lock.writeLock();j.trace("delete got write lock");let s;try{try{s=await this.store.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n}await this.store.patchOrCreate(e,{protocols:[]})}finally{j.trace("delete release write lock"),t()}s!=null&&this.dispatchEvent(new R(Ss,{detail:{peerId:e,protocols:[],oldProtocols:s.protocols}}))}}var Hs;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{if(n.lengthDelimited!==!1&&s.fork(),t.addresses!=null)for(const i of t.addresses)s.uint32(10),qs.codec().encode(i,s);if(t.protocols!=null)for(const i of t.protocols)s.uint32(18),s.string(i);if(t.metadata!=null)for(const i of t.metadata)s.uint32(26),zs.codec().encode(i,s);t.pubKey!=null&&(s.uint32(34),s.bytes(t.pubKey)),t.peerRecordEnvelope!=null&&(s.uint32(42),s.bytes(t.peerRecordEnvelope)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={addresses:[],protocols:[],metadata:[]},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.addresses.push(qs.codec().decode(t,t.uint32()));break;case 2:n.protocols.push(t.string());break;case 3:n.metadata.push(zs.codec().decode(t,t.uint32()));break;case 4:n.pubKey=t.bytes();break;case 5:n.peerRecordEnvelope=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Hs||(Hs={}));var qs;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.multiaddr!=null&&t.multiaddr.byteLength>0&&(s.uint32(10),s.bytes(t.multiaddr)),t.isCertified!=null&&(s.uint32(16),s.bool(t.isCertified)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={multiaddr:new Uint8Array(0)},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.multiaddr=t.bytes();break;case 2:n.isCertified=t.bool();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(qs||(qs={}));var zs;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.key!=null&&t.key!==""&&(s.uint32(10),s.string(t.key)),t.value!=null&&t.value.byteLength>0&&(s.uint32(18),s.bytes(t.value)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={key:"",value:new Uint8Array(0)},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.key=t.string();break;case 2:n.value=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(zs||(zs={}));const Qr=_("libp2p:peer-store:store"),Xr="/peers/";class Wl{constructor(e){this.components=e,this.lock=ya({name:"peer-store",singleProcess:!0})}_peerIdToDatastoreKey(e){if(e.type==null)throw Qr.error("peerId must be an instance of peer-id to store data"),new w("peerId must be an instance of peer-id",C.ERR_INVALID_PARAMETERS);const t=e.toCID().toString();return new ls(`${Xr}${t}`)}async has(e){return await this.components.datastore.has(this._peerIdToDatastoreKey(e))}async delete(e){await this.components.datastore.delete(this._peerIdToDatastoreKey(e))}async load(e){const t=await this.components.datastore.get(this._peerIdToDatastoreKey(e)),s=Hs.decode(t),n=new Map;for(const i of s.metadata)n.set(i.key,i.value);return{...s,id:e,addresses:s.addresses.map(({multiaddr:i,isCertified:o})=>({multiaddr:G(i),isCertified:o??!1})),metadata:n,pubKey:s.pubKey??void 0,peerRecordEnvelope:s.peerRecordEnvelope??void 0}}async save(e){if(e.pubKey!=null&&e.id.publicKey!=null&&!J(e.pubKey,e.id.publicKey))throw Qr.error("peer publicKey bytes do not match peer id publicKey bytes"),new w("publicKey bytes do not match peer id publicKey bytes",C.ERR_INVALID_PARAMETERS);const t=new Set,s=e.addresses.filter(o=>t.has(o.multiaddr.toString())?!1:(t.add(o.multiaddr.toString()),!0)).sort((o,a)=>o.multiaddr.toString().localeCompare(a.multiaddr.toString())).map(({multiaddr:o,isCertified:a})=>({multiaddr:o.bytes,isCertified:a})),n=[];[...e.metadata.keys()].sort().forEach(o=>{const a=e.metadata.get(o);a!=null&&n.push({key:o,value:a})});const i=Hs.encode({addresses:s,protocols:e.protocols.sort(),pubKey:e.pubKey,metadata:n,peerRecordEnvelope:e.peerRecordEnvelope});return await this.components.datastore.put(this._peerIdToDatastoreKey(e.id),i.subarray()),await this.load(e.id)}async patch(e,t){const s=await this.load(e);return await this._patch(e,t,s)}async patchOrCreate(e,t){let s;try{s=await this.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n;s={id:e,addresses:[],protocols:[],metadata:new Map}}return await this._patch(e,t,s)}async _patch(e,t,s){return await this.save({...s,...t,id:e})}async merge(e,t){const s=await this.load(e);return await this._merge(e,t,s)}async mergeOrCreate(e,t){let s;try{s=await this.load(e)}catch(n){if(n.code!==C.ERR_NOT_FOUND)throw n;s={id:e,addresses:[],protocols:[],metadata:new Map}}return await this._merge(e,t,s)}async _merge(e,t,s){const n=new Map;return s.addresses.forEach(i=>{n.set(i.multiaddr.toString(),i.isCertified)}),(t.addresses??[]).forEach(i=>{const o=i.multiaddr.toString(),l=!!n.get(o)||i.isCertified;n.set(o,l)}),await this.save({id:e,addresses:Array.from(n.entries()).map(([i,o])=>({multiaddr:G(i),isCertified:o})),protocols:Array.from(new Set([...s.protocols??[],...t.protocols??[]])),metadata:new Map([...s.metadata?.entries()??[],...t.metadata?.entries()??[]]),pubKey:t.pubKey??s?.pubKey,peerRecordEnvelope:t.peerRecordEnvelope??s?.peerRecordEnvelope})}async*all(){for await(const e of this.components.datastore.queryKeys({prefix:Xr})){const t=e.toString().split("/")[2],s=vi.decode(t);yield this.load(Ve(s))}}}var at;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{if(n.lengthDelimited!==!1&&s.fork(),t.tags!=null)for(const i of t.tags)s.uint32(10),Ws.codec().encode(i,s);n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={tags:[]},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.tags.push(Ws.codec().decode(t,t.uint32()));break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(at||(at={}));var Ws;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.name!=null&&t.name!==""&&(s.uint32(10),s.string(t.name)),t.value!=null&&(s.uint32(16),s.uint32(t.value)),t.expiry!=null&&(s.uint32(24),s.uint64(t.expiry)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={name:""},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.name=t.string();break;case 2:n.value=t.uint32();break;case 3:n.expiry=t.uint64();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Ws||(Ws={}));const _e=_("libp2p:peer-store");class Yl extends W{constructor(e,t={}){super(),this.components=e,this.store=new Wl(e),this.addressBook=new $l(this.dispatchEvent.bind(this),this.store,t.addressFilter),this.keyBook=new Hl(this.dispatchEvent.bind(this),this.store),this.metadataBook=new ql(this.dispatchEvent.bind(this),this.store),this.protoBook=new zl(this.dispatchEvent.bind(this),this.store)}async forEach(e){_e.trace("getPeers await read lock");const t=await this.store.lock.readLock();_e.trace("getPeers got read lock");try{for await(const s of this.store.all())s.id.equals(this.components.peerId)||e(s)}finally{_e.trace("getPeers release read lock"),t()}}async all(){const e=[];return await this.forEach(t=>{e.push(t)}),e}async delete(e){_e.trace("delete await write lock");const t=await this.store.lock.writeLock();_e.trace("delete got write lock");try{await this.store.delete(e)}finally{_e.trace("delete release write lock"),t()}}async get(e){_e.trace("get await read lock");const t=await this.store.lock.readLock();_e.trace("get got read lock");try{return await this.store.load(e)}finally{_e.trace("get release read lock"),t()}}async has(e){_e.trace("has await read lock");const t=await this.store.lock.readLock();_e.trace("has got read lock");try{return await this.store.has(e)}finally{_e.trace("has release read lock"),t()}}async tagPeer(e,t,s={}){const n=s.value??0,i=Math.round(n),o=s.ttl??void 0;if(i!==n||i<0||i>100)throw new w("Tag value must be between 0-100","ERR_TAG_VALUE_OUT_OF_BOUNDS");const a=await this.metadataBook.getValue(e,"tags");let l=[];a!=null&&(l=at.decode(a).tags),l=l.filter(u=>u.name!==t),l.push({name:t,value:i,expiry:o==null?void 0:BigInt(Date.now()+o)}),await this.metadataBook.setValue(e,"tags",at.encode({tags:l}).subarray())}async unTagPeer(e,t){const s=await this.metadataBook.getValue(e,"tags");let n=[];s!=null&&(n=at.decode(s).tags),n=n.filter(i=>i.name!==t),await this.metadataBook.setValue(e,"tags",at.encode({tags:n}).subarray())}async getTags(e){const t=await this.metadataBook.getValue(e,"tags");let s=[];t!=null&&(s=at.decode(t).tags);const n=BigInt(Date.now()),i=s.filter(o=>o.expiry==null||o.expiry>n);return i.length!==s.length&&await this.metadataBook.setValue(e,"tags",at.encode({tags:i}).subarray()),i.map(o=>({name:o.name,value:o.value??0}))}}class Ql{constructor(e){this.dht=e}async provide(e){await wt(this.dht.provide(e))}async*findProviders(e,t={}){for await(const s of this.dht.findProviders(e,t))s.name==="PROVIDER"&&(yield*s.providers)}async put(e,t,s){await wt(this.dht.put(e,t,s))}async get(e,t){for await(const s of this.dht.get(e,t))if(s.name==="VALUE")return s.value;throw f(new Error("Not found"),"ERR_NOT_FOUND")}}class Xl{constructor(e={}){this._started=!1,this._peerId=e.peerId,this._addressManager=e.addressManager,this._peerStore=e.peerStore,this._upgrader=e.upgrader,this._metrics=e.metrics,this._registrar=e.registrar,this._connectionManager=e.connectionManager,this._transportManager=e.transportManager,this._connectionGater=e.connectionGater,this._contentRouting=e.contentRouting,this._peerRouting=e.peerRouting,this._datastore=e.datastore,this._connectionProtector=e.connectionProtector,this._dht=e.dht,this._pubsub=e.pubsub,this._dialer=e.dialer}isStarted(){return this._started}async beforeStart(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{e.beforeStart!=null&&await e.beforeStart()}))}async start(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{await e.start()})),this._started=!0}async afterStart(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{e.afterStart!=null&&await e.afterStart()}))}async beforeStop(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{e.beforeStop!=null&&await e.beforeStop()}))}async stop(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{await e.stop()})),this._started=!1}async afterStop(){await Promise.all(Object.values(this).filter(e=>ft(e)).map(async e=>{e.afterStop!=null&&await e.afterStop()}))}get peerId(){if(this._peerId==null)throw f(new Error("peerId not set"),"ERR_SERVICE_MISSING");return this._peerId}set peerId(e){this._peerId=e}get addressManager(){if(this._addressManager==null)throw f(new Error("addressManager not set"),"ERR_SERVICE_MISSING");return this._addressManager}set addressManager(e){this._addressManager=e}get peerStore(){if(this._peerStore==null)throw f(new Error("peerStore not set"),"ERR_SERVICE_MISSING");return this._peerStore}set peerStore(e){this._peerStore=e}get upgrader(){if(this._upgrader==null)throw f(new Error("upgrader not set"),"ERR_SERVICE_MISSING");return this._upgrader}set upgrader(e){this._upgrader=e}get registrar(){if(this._registrar==null)throw f(new Error("registrar not set"),"ERR_SERVICE_MISSING");return this._registrar}set registrar(e){this._registrar=e}get connectionManager(){if(this._connectionManager==null)throw f(new Error("connectionManager not set"),"ERR_SERVICE_MISSING");return this._connectionManager}set connectionManager(e){this._connectionManager=e}get transportManager(){if(this._transportManager==null)throw f(new Error("transportManager not set"),"ERR_SERVICE_MISSING");return this._transportManager}set transportManager(e){this._transportManager=e}get connectionGater(){if(this._connectionGater==null)throw f(new Error("connectionGater not set"),"ERR_SERVICE_MISSING");return this._connectionGater}set connectionGater(e){this._connectionGater=e}get contentRouting(){if(this._contentRouting==null)throw f(new Error("contentRouting not set"),"ERR_SERVICE_MISSING");return this._contentRouting}set contentRouting(e){this._contentRouting=e}get peerRouting(){if(this._peerRouting==null)throw f(new Error("peerRouting not set"),"ERR_SERVICE_MISSING");return this._peerRouting}set peerRouting(e){this._peerRouting=e}get datastore(){if(this._datastore==null)throw f(new Error("datastore not set"),"ERR_SERVICE_MISSING");return this._datastore}set datastore(e){this._datastore=e}get connectionProtector(){return this._connectionProtector}set connectionProtector(e){this._connectionProtector=e}get dialer(){if(this._dialer==null)throw f(new Error("dialer not set"),"ERR_SERVICE_MISSING");return this._dialer}set dialer(e){this._dialer=e}get metrics(){return this._metrics}set metrics(e){this._metrics=e}get dht(){return this._dht}set dht(e){this._dht=e}get pubsub(){return this._pubsub}set pubsub(e){this._pubsub=e}}const _o=3e4,jl=3e4,Ro=100,So=4,Jl=25,Zl={addresses:{listen:[],announce:[],noAnnounce:[],announceFilter:r=>r},connectionManager:{maxConnections:300,minConnections:50,autoDial:!0,autoDialInterval:1e4,maxParallelDials:Ro,maxDialsPerPeer:So,dialTimeout:_o,inboundUpgradeTimeout:jl,resolvers:{dnsaddr:Go},addressSorter:tr},connectionGater:{},transportManager:{faultTolerance:Ct.FATAL_ALL},peerRouting:{refreshManager:{enabled:!0,interval:6e5,bootDelay:1e4}},nat:{enabled:!0,ttl:7200,keepAlive:!0},relay:{enabled:!0,advertise:{bootDelay:J2,enabled:!1,ttl:Z2},hop:{enabled:!1,active:!1,timeout:3e4},autoRelay:{enabled:!1,maxListeners:2}},identify:{protocolPrefix:"ipfs",host:{agentVersion:bo},timeout:6e4,maxInboundStreams:1,maxOutboundStreams:1,maxPushIncomingStreams:1,maxPushOutgoingStreams:1},ping:{protocolPrefix:"ipfs",maxInboundStreams:1,maxOutboundStreams:1,timeout:1e4},fetch:{protocolPrefix:"libp2p",maxInboundStreams:1,maxOutboundStreams:1,timeout:1e4}};function e3(r){const e=Gt(Zl,r);if(e.transports==null||e.transports.length<1)throw f(new Error(L.ERR_TRANSPORTS_REQUIRED),y.ERR_TRANSPORTS_REQUIRED);if(e.connectionEncryption==null||e.connectionEncryption.length===0)throw f(new Error(L.CONN_ENCRYPTION_REQUIRED),y.CONN_ENCRYPTION_REQUIRED);if(e.connectionProtector===null&&globalThis.process?.env?.LIBP2P_FORCE_PNET!=null)throw f(new Error(L.ERR_PROTECTOR_REQUIRED),y.ERR_PROTECTOR_REQUIRED);return e.identify.host.agentVersion===bo&&(ma||wa?e.identify.host.agentVersion+=` UserAgent=${globalThis.process.version}`:(Cs||xi||Ea||ba)&&(e.identify.host.agentVersion+=` UserAgent=${globalThis.navigator.userAgent}`)),e}var jr;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.id!=null&&(s.uint32(10),s.bytes(t.id)),t.pubKey!=null&&(s.uint32(18),s.bytes(t.pubKey)),t.privKey!=null&&(s.uint32(26),s.bytes(t.privKey)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.id=t.bytes();break;case 2:n.pubKey=t.bytes();break;case 3:n.privKey=t.bytes();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(jr||(jr={}));const t3=async()=>{const r=await Qn("Ed25519"),e=await vo(r);if(e.type==="Ed25519")return e;throw new Error(`Generated unexpected PeerId type "${e.type}"`)},v5=async r=>{const e=await Qn("RSA",r?.bits??2048),t=await vo(e);if(t.type==="RSA")return t;throw new Error(`Generated unexpected PeerId type "${t.type}"`)};async function vo(r){return await bt(Xn(r.public),P1(r))}class s3 extends W{get[ys](){return!0}get[Symbol.toStringTag](){return"@libp2p/dummy-dht"}get wan(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}get lan(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}get(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}findProviders(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}findPeer(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}getClosestPeers(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}provide(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}put(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}async getMode(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}async setMode(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}async refreshRoutingTable(){throw f(new Error(L.DHT_DISABLED),y.DHT_DISABLED)}}class n3 extends W{constructor(){super(...arguments),this.topicValidators=new Map}isStarted(){return!1}start(){}stop(){}get globalSignaturePolicy(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}get multicodecs(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}getPeers(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}getTopics(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}subscribe(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}unsubscribe(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}getSubscribers(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}async publish(){throw f(new Error(L.PUBSUB_DISABLED),y.ERR_PUBSUB_DISABLED)}}const Jr=_("libp2p:dialer:dial-request");class r3{constructor(e){const{addrs:t,dialAction:s,dialer:n}=e;this.addrs=t,this.dialer=n,this.dialAction=s}async run(e={}){const t=this.dialer.getTokens(this.addrs.length);if(t.length<1)throw f(new Error("No dial tokens available"),y.ERR_NO_DIAL_TOKENS);const s=new _a;for(const a of t)s.push(a).catch(l=>{Jr.error(l)});const n=this.addrs.map(()=>{const a=new AbortController;try{Y.setMaxListeners?.(1/0,a.signal)}catch{}return a});if(e.signal!=null)try{Y.setMaxListeners?.(1/0,e.signal)}catch{}let i=0,o=!1;try{return await Promise.any(this.addrs.map(async(a,l)=>{const u=await s.shift();if(o)throw this.dialer.releaseToken(t.splice(t.indexOf(u),1)[0]),f(new Error("dialAction already succeeded"),y.ERR_ALREADY_SUCCEEDED);const h=n[l];if(h==null)throw f(new Error("dialAction did not come with an AbortController"),y.ERR_INVALID_PARAMETERS);let c;try{const d=h.signal;c=await this.dialAction(a,{...e,signal:e.signal!=null?Mt([d,e.signal]):d}),n[l]=void 0}finally{i++,this.addrs.length-i>=t.length?s.push(u).catch(d=>{Jr.error(d)}):this.dialer.releaseToken(t.splice(t.indexOf(u),1)[0])}if(c==null)throw f(new Error("dialAction led to empty object"),y.ERR_TRANSPORT_DIAL_FAILED);return o=!0,c}))}finally{n.forEach(a=>{a!==void 0&&a.abort()}),t.forEach(a=>this.dialer.releaseToken(a))}}}const Me=_("libp2p:dialer");class i3{constructor(e,t={}){this.started=!1,this.addressSorter=t.addressSorter??tr,this.maxAddrsToDial=t.maxAddrsToDial??Jl,this.timeout=t.dialTimeout??_o,this.maxDialsPerPeer=t.maxDialsPerPeer??So,this.tokens=[...new Array(t.maxParallelDials??Ro)].map((s,n)=>n),this.components=e,this.pendingDials=An({name:"libp2p_dialler_pending_dials",metrics:e.metrics}),this.pendingDialTargets=An({name:"libp2p_dialler_pending_dial_targets",metrics:e.metrics});for(const[s,n]of Object.entries(t.resolvers??{}))$o.set(s,n)}isStarted(){return this.started}async start(){this.started=!0}async stop(){this.started=!1;for(const e of this.pendingDials.values())try{e.controller.abort()}catch(t){Me.error(t)}this.pendingDials.clear();for(const e of this.pendingDialTargets.values())e.abort();this.pendingDialTargets.clear()}async dial(e,t={}){const{peerId:s,multiaddr:n}=lo(e);if(s!=null){if(this.components.peerId.equals(s))throw f(new Error("Tried to dial self"),y.ERR_DIALED_SELF);if(n!=null&&(Me("storing multiaddrs %p",s,n),await this.components.peerStore.addressBook.add(s,[n])),await this.components.connectionGater.denyDialPeer(s))throw f(new Error("The dial request is blocked by gater.allowDialPeer"),y.ERR_PEER_DIAL_INTERCEPTED)}Me("creating dial target for %p",s);const i=new AbortController,o=Zr();this.pendingDialTargets.set(o,i);let a=i.signal;t.signal!=null&&(a=Mt([a,t.signal]));let l;try{l=await this._createDialTarget({peerId:s,multiaddr:n},{...t,signal:a})}finally{this.pendingDialTargets.delete(o)}if(l.addrs.length===0)throw f(new Error("The dial request has no valid addresses"),y.ERR_NO_VALID_ADDRESSES);const u=this.pendingDials.get(l.id)??this._createPendingDial(l,t);try{const h=await u.promise;return Me("dial succeeded to %s",l.id),h}catch(h){throw Me("dial failed to %s",l.id,h),u.controller.signal.aborted&&(h.code=y.ERR_TIMEOUT),Me.error(h),h}finally{u.destroy()}}async _createDialTarget(e,t){let s=[];if(yt(e.multiaddr)&&s.push(e.multiaddr),!yt(e.multiaddr)&&Ms(e.peerId)&&s.push(...await this._loadAddresses(e.peerId)),s=(await Promise.all(s.map(async i=>await this._resolve(i,t)))).flat().filter(i=>!!this.components.transportManager.transportForMultiaddr(i)),s=[...new Set(s.map(i=>i.toString()))].map(i=>G(i)),s.length>this.maxAddrsToDial)throw f(new Error("dial with more addresses than allowed"),y.ERR_TOO_MANY_ADDRESSES);const n=Ms(e.peerId)?e.peerId:void 0;if(n!=null){const i=`/p2p/${n.toString()}`;s=s.map(o=>{const a=o.getPeerId();return a==null||!n.equals(a)?o.encapsulate(i):o})}return{id:n==null?Zr():n.toString(),addrs:s}}async _loadAddresses(e){const t=await this.components.peerStore.addressBook.get(e);return(await Promise.all(t.map(async s=>await this.components.connectionGater.denyDialMultiaddr(e,s.multiaddr)?!1:s))).filter(o3).sort(this.addressSorter).map(s=>s.multiaddr)}_createPendingDial(e,t={}){const s=async(u,h={})=>{if(h.signal?.aborted===!0)throw f(new Error("already aborted"),y.ERR_ALREADY_ABORTED);return await this.components.transportManager.dial(u,h).catch(c=>{throw Me.error("dial to %s failed",u,c),c})},n=new r3({addrs:e.addrs,dialAction:s,dialer:this}),i=new ee.TimeoutController(this.timeout),o=[i.signal];t.signal!=null&&o.push(t.signal);const a=Mt(o);try{Y.setMaxListeners?.(1/0,a)}catch{}const l={dialRequest:n,controller:i,promise:n.run({...t,signal:a}),destroy:()=>{i.clear(),this.pendingDials.delete(e.id)}};return this.pendingDials.set(e.id,l),l}getTokens(e){const t=Math.min(e,this.maxDialsPerPeer,this.tokens.length),s=this.tokens.splice(0,t);return Me("%d tokens request, returning %d, %d remaining",e,t,this.tokens.length),s}releaseToken(e){this.tokens.includes(e)||(Me("token %d released",e),this.tokens.push(e))}async _resolve(e,t){if(!e.protoNames().includes("dnsaddr"))return[e];const n=await this._resolveRecord(e,t);return(await Promise.all(n.map(async a=>await this._resolve(a,t)))).flat().reduce((a,l)=>(a.find(u=>u.equals(l))==null&&a.push(l),a),[])}async _resolveRecord(e,t){try{return e=G(e.toString()),await e.resolve(t)}catch(s){return Me.error(`multiaddr ${e.toString()} could not be resolved`,s),[]}}}function o3(r){return!!r}function Zr(){return`${parseInt(String(Math.random()*1e9),10).toString()}${Date.now()}`}const ze=_("libp2p");class a3 extends W{constructor(e){super(),this.started=!1,this.peerId=e.peerId;const t=this.components=new Xl({peerId:e.peerId,datastore:e.datastore??new Ra,connectionGater:{denyDialPeer:async()=>await Promise.resolve(!1),denyDialMultiaddr:async()=>await Promise.resolve(!1),denyInboundConnection:async()=>await Promise.resolve(!1),denyOutboundConnection:async()=>await Promise.resolve(!1),denyInboundEncryptedConnection:async()=>await Promise.resolve(!1),denyOutboundEncryptedConnection:async()=>await Promise.resolve(!1),denyInboundUpgradedConnection:async()=>await Promise.resolve(!1),denyOutboundUpgradedConnection:async()=>await Promise.resolve(!1),filterMultiaddrForPeer:async()=>await Promise.resolve(!0),...e.connectionGater}});t.peerStore=new Yl(t,{addressFilter:this.components.connectionGater.filterMultiaddrForPeer,...e.peerStore}),this.services=[t],e.metrics!=null&&(this.metrics=this.components.metrics=this.configureComponent(e.metrics(this.components))),this.peerStore=this.components.peerStore,this.peerStore.addEventListener("peer",o=>{const{detail:a}=o;this.dispatchEvent(new R("peer:discovery",{detail:a}))}),e.connectionProtector!=null&&(this.components.connectionProtector=e.connectionProtector(t)),this.components.upgrader=new Rl(this.components,{connectionEncryption:(e.connectionEncryption??[]).map(o=>this.configureComponent(o(this.components))),muxers:(e.streamMuxers??[]).map(o=>this.configureComponent(o(this.components))),inboundUpgradeTimeout:e.connectionManager.inboundUpgradeTimeout}),this.components.dialer=new i3(this.components,e.connectionManager),this.connectionManager=this.components.connectionManager=new B2(this.components,e.connectionManager),this.components.connectionManager.addEventListener("peer:disconnect",o=>{this.dispatchEvent(new R("peer:disconnect",{detail:o.detail}))}),this.components.connectionManager.addEventListener("peer:connect",o=>{this.dispatchEvent(new R("peer:connect",{detail:o.detail}))}),this.registrar=this.components.registrar=new El(this.components),this.components.transportManager=new hl(this.components,e.transportManager),this.components.addressManager=new k2(this.components,e.addresses),this.configureComponent(new Bl(this.components)),this.configureComponent(new G2(this.components,{enabled:e.connectionManager.autoDial,minConnections:e.connectionManager.minConnections,autoDialInterval:e.connectionManager.autoDialInterval}));const s=Gs.generateOptions();this.keychain=this.configureComponent(new Gs(this.components,{...s,...e.keychain})),this.services.push(new Kl(this.components,e.nat)),e.transports.forEach(o=>{this.components.transportManager.add(this.configureComponent(o(this.components)))}),this.identifyService=new nr(this.components,{...e.identify}),this.configureComponent(this.identifyService),e.dht!=null?this.dht=this.components.dht=e.dht(this.components):this.dht=new s3,e.pubsub!=null?this.pubsub=this.components.pubsub=e.pubsub(this.components):this.pubsub=new n3;const n=(e.peerRouters??[]).map(o=>this.configureComponent(o(this.components)));e.dht!=null&&(n.push(this.configureComponent(new Vl(this.dht))),this.dht.addEventListener("peer",o=>{this.onDiscoveryPeer(o)})),this.peerRouting=this.components.peerRouting=this.configureComponent(new A2(this.components,{...e.peerRouting,routers:n}));const i=(e.contentRouters??[]).map(o=>this.configureComponent(o(this.components)));e.dht!=null&&i.push(this.configureComponent(new Ql(this.dht))),this.contentRouting=this.components.contentRouting=this.configureComponent(new O2(this.components,{routers:i})),e.relay.enabled&&(this.components.transportManager.add(this.configureComponent(new j2(this.components,e.relay))),this.configureComponent(new nl(this.components,{addressSorter:e.connectionManager.addressSorter,...e.relay}))),this.fetchService=this.configureComponent(new Cl(this.components,{...e.fetch})),this.pingService=this.configureComponent(new Ll(this.components,{...e.ping}));for(const o of e.peerDiscovery??[])this.configureComponent(o(this.components)).addEventListener("peer",l=>{this.onDiscoveryPeer(l)})}configureComponent(e){return ft(e)&&this.services.push(e),e}async start(){if(!this.started){this.started=!0,ze("libp2p is starting");try{await Promise.all(this.services.map(async e=>{e.beforeStart!=null&&await e.beforeStart()})),await Promise.all(this.services.map(e=>e.start())),await Promise.all(this.services.map(async e=>{e.afterStart!=null&&await e.afterStart()})),ze("libp2p has started")}catch(e){throw ze.error("An error occurred starting libp2p",e),await this.stop(),e}}}async stop(){this.started&&(ze("libp2p is stopping"),this.started=!1,await Promise.all(this.services.map(async e=>{e.beforeStop!=null&&await e.beforeStop()})),await Promise.all(this.services.map(e=>e.stop())),await Promise.all(this.services.map(async e=>{e.afterStop!=null&&await e.afterStop()})),ze("libp2p has stopped"))}isStarted(){return this.started}getConnections(e){return this.components.connectionManager.getConnections(e)}getPeers(){const e=new ct;for(const t of this.components.connectionManager.getConnections())e.add(t.remotePeer);return Array.from(e)}async dial(e,t={}){return await this.components.connectionManager.openConnection(e,t)}async dialProtocol(e,t,s={}){if(t==null)throw f(new Error("no protocols were provided to open a stream"),y.ERR_INVALID_PROTOCOLS_FOR_STREAM);if(t=Array.isArray(t)?t:[t],t.length===0)throw f(new Error("no protocols were provided to open a stream"),y.ERR_INVALID_PROTOCOLS_FOR_STREAM);return await(await this.dial(e,s)).newStream(t,s)}getMultiaddrs(){return this.components.addressManager.getAddresses()}getProtocols(){return this.components.registrar.getProtocols()}async hangUp(e){yt(e)&&(e=q(e.getPeerId()??"")),await this.components.connectionManager.closeConnections(e)}async getPublicKey(e,t={}){if(ze("getPublicKey %p",e),e.publicKey!=null)return e.publicKey;const s=await this.peerStore.get(e);if(s.pubKey!=null)return s.pubKey;if(this.dht==null)throw f(new Error("Public key was not in the peer store and the DHT is not enabled"),y.ERR_NO_ROUTERS_AVAILABLE);const n=ve([T("/pk/"),e.multihash.digest]);for await(const i of this.dht.get(n,t))if(i.name==="VALUE"){const o=as(i.value);return await this.peerStore.keyBook.set(e,i.value),o.bytes}throw f(new Error(`Node not responding with its public key: ${e.toString()}`),y.ERR_INVALID_RECORD)}async fetch(e,t,s={}){if(yt(e)){const n=q(e.getPeerId()??"");await this.components.peerStore.addressBook.add(n,[e]),e=n}return await this.fetchService.fetch(e,t,s)}async ping(e,t={}){if(yt(e)){const s=q(e.getPeerId()??"");await this.components.peerStore.addressBook.add(s,[e]),e=s}return await this.pingService.ping(e,t)}async handle(e,t,s){Array.isArray(e)||(e=[e]),await Promise.all(e.map(async n=>{await this.components.registrar.handle(n,t,s)}))}async unhandle(e){Array.isArray(e)||(e=[e]),await Promise.all(e.map(async t=>{await this.components.registrar.unhandle(t)}))}async register(e,t){return await this.registrar.register(e,t)}unregister(e){this.registrar.unregister(e)}onDiscoveryPeer(e){const{detail:t}=e;if(t.id.toString()===this.peerId.toString()){ze.error(new Error(y.ERR_DISCOVERED_SELF));return}t.multiaddrs.length>0&&this.components.peerStore.addressBook.add(t.id,t.multiaddrs).catch(s=>ze.error(s)),t.protocols.length>0&&this.components.peerStore.protoBook.set(t.id,t.protocols).catch(s=>ze.error(s)),this.dispatchEvent(new R("peer:discovery",{detail:t}))}}async function c3(r){if(r.peerId==null){const e=r.datastore;if(e!=null)try{const t=new Gs({datastore:e},{...Gs.generateOptions(),...r.keychain??{}});r.peerId=await t.exportPeerId("self")}catch(t){if(t.code!=="ERR_NOT_FOUND")throw t}}return r.peerId==null&&(r.peerId=await t3()),new a3(e3(r))}async function l3(r){const e=await c3(r);return r.start!==!1&&await e.start(),e}const nn=1e3,rr=60*nn,ir=60*rr,h3=36*ir,d3="/lan",u3="/ipfs",p3="/kad/1.0.0",f3="/dht/record",Io="/dht/provider",g3=256,y3=24*ir,m3=ir,On=20,Ys=3,w3=Number(5*rr),E3=Number(30*nn),b3=Number(5*rr),_3=Number(30*nn),R3=Number(30*nn),S3=T("/pk/");function or(r){return{...r,multiaddrs:r.multiaddrs.filter(e=>{const[[t,s]]=e.stringTuples();if(t===53||t===54||t===55)return s!=="localhost";if(t!==4&&t!==6||s==null)return!1;const n=en(s);return n==null?!0:!n})}}function ar(r){return{...r,multiaddrs:r.multiaddrs.filter(e=>{const[[t,s]]=e.stringTuples();if(s==="localhost")return!0;if(t!==4&&t!==6||s==null)return!1;const n=en(s);return n??!1})}}async function Bt(r){return(await le.digest(r)).digest}async function Qe(r){return await Bt(r.toBytes())}function Tt(r){return new ls(`${f3}/${D(r,"base32")}`,!1)}function v3(r){return ve([S3,r.toBytes()])}function I3(r){return D(r.subarray(0,4))==="/pk/"}function P3(r){return Ve(r.subarray(4))}function ei(r,e){const t=new Date;return new ye(r,e,t).serialize()}function D3(r,e=100){let t;return()=>{clearTimeout(t),t=setTimeout(()=>{r()},e)}}const T3="kad-close",A3=50,ti=20,O3=1e4,C3=10;class k3{constructor(e,t){const{kBucketSize:s,pingTimeout:n,lan:i,pingConcurrency:o,protocol:a,tagName:l,tagValue:u}=t;this.components=e,this.log=_(`libp2p:kad-dht:${i?"lan":"wan"}:routing-table`),this.kBucketSize=s??ti,this.pingTimeout=n??O3,this.pingConcurrency=o??C3,this.lan=i,this.running=!1,this.protocol=a,this.tagName=l??T3,this.tagValue=u??A3;const h=()=>{this.metrics?.pingQueueSize.update(this.pingQueue.size),this.metrics?.pingRunning.update(this.pingQueue.pending)};this.pingQueue=new Nt({concurrency:this.pingConcurrency}),this.pingQueue.addListener("add",h),this.pingQueue.addListener("next",h),this._onPing=this._onPing.bind(this)}isStarted(){return this.running}async start(){this.running=!0,this.components.metrics!=null&&(this.metrics={routingTableSize:this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan?"lan":"wan"}_routing_table_size`),pingQueueSize:this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan?"lan":"wan"}_ping_queue_size`),pingRunning:this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan?"lan":"wan"}_ping_running`)});const e=new Sa({localNodeId:await Qe(this.components.peerId),numberOfNodesPerKBucket:this.kBucketSize,numberOfNodesToPing:1});this.kb=e,e.on("ping",this._onPing),this._tagPeers(e)}async stop(){this.running=!1,this.pingQueue.clear(),this.kb=void 0}_tagPeers(e){let t=new ct;const s=D3(()=>{const n=new ct(e.closest(e.localNodeId,ti).map(a=>a.peer)),i=n.difference(t),o=t.difference(n);Promise.resolve().then(async()=>{for(const a of i)await this.components.peerStore.tagPeer(a,this.tagName,{value:this.tagValue});for(const a of o)await this.components.peerStore.unTagPeer(a,this.tagName)}).catch(a=>{this.log.error("Could not update peer tags",a)}),t=n});e.on("added",()=>{s()}),e.on("removed",()=>{s()})}_onPing(e,t){this.pingQueue.add(async()=>{if(!this.running)return;let s=0;try{await Promise.all(e.map(async n=>{let i;try{i=new ee.TimeoutController(this.pingTimeout);const o={signal:i.signal};this.log("pinging old contact %p",n.peer),(await(await this.components.connectionManager.openConnection(n.peer,o)).newStream(this.protocol,o)).close(),s++}catch(o){this.running&&this.kb!=null&&(this.log.error("could not ping peer %p",n.peer,o),this.log("evicting old contact after ping failed %p",n),this.kb.remove(n.id))}finally{i?.clear(),this.metrics?.routingTableSize.update(this.size)}})),this.running&&s<e.length&&this.kb!=null&&(this.log("adding new contact %p",t.peer),this.kb.add(t))}catch(n){this.log.error("could not process k-bucket ping event",n)}}).catch(s=>{this.log.error("could not process k-bucket ping event",s)})}get size(){return this.kb==null?0:this.kb.count()}async find(e){const t=await Qe(e),s=this.closestPeer(t);if(s!=null&&e.equals(s))return s}closestPeer(e){const t=this.closestPeers(e,1);if(t.length>0)return t[0]}closestPeers(e,t=this.kBucketSize){return this.kb==null?[]:this.kb.closest(e,t).map(n=>n.peer)}async add(e){if(this.kb==null)throw new Error("RoutingTable is not started");const t=await Qe(e);this.kb.add({id:t,peer:e}),this.log("added %p with kad id %b",e,t),this.metrics?.routingTableSize.update(this.size)}async remove(e){if(this.kb==null)throw new Error("RoutingTable is not started");const t=await Qe(e);this.kb.remove(t),this.metrics?.routingTableSize.update(this.size)}}const N3=[77591,22417,43971,28421,740,29829,71467,228973,196661,78537,27689,36431,44415,14362,19456,106025,96308,2882,49509,21149,87173,131409,75844,23676,121838,30291,17492,2953,7564,110620,129477,127283,53113,72417,165166,109690,21200,102125,24049,71504,90342,25307,72039,26812,26715,32264,133800,71161,88956,171987,51779,24425,16671,30251,186294,247761,14202,2121,8465,35024,4876,85917,169730,3638,256836,96184,943,18678,6583,52907,35807,112254,214097,18796,11595,9243,23554,887,268203,382004,24590,111335,11625,16619,29039,102425,69006,97976,92362,32552,63717,41433,128974,137630,59943,10019,13986,35430,33665,108037,43799,43280,38195,29078,58629,18265,14425,46832,235538,40830,77881,110717,58937,3463,325358,51300,47623,117252,19007,10170,20540,91237,294813,4951,79841,56232,36270,128547,69209,66275,100156,32063,73531,34439,80937,28892,44466,88595,216307,32583,49620,16605,82127,45807,21630,78726,20235,40163,111007,96926,5567,72083,21665,58844,39419,179767,48328,42662,51550,5251,37811,49608,81056,50854,55513,20922,18891,197409,164656,32593,71449,220474,58919,85682,67854,13758,35066,3565,61905,214793,119572,141419,21504,10302,27354,67003,46131,32668,15165,64871,34450,17821,2757,11452,34189,5160,12257,85523,560,53385,65887,119549,135620,312353,115979,122356,10867,193231,124537,54783,90675,120791,4715,142253,50943,17271,43358,25331,4917,120566,34580,12878,33786,160528,32523,4869,301307,104817,81491,23276,8832,97911,31265,52065,7998,49622,9715,43998,34091,84587,20664,69041,29419,53205,10838,58288,116145,6185,5154,141795,35924,21307,144738,43730,12085,8279,10002,119,133779,199668,72938,31768,39176,67875,38453,9700,44144,4121,116048,41733,12868,82669,92308,128,34262,11332,7712,90764,36141,13553,71312,77470,117314,96549,49135,23602,54468,28605,6327,62308,17171,67531,21319,14105,894,107722,46157,8503,51069,100472,45138,15246,14577,35609,191464,1757,13364,161349,32067,91705,81144,52339,5408,91066,21983,14157,100545,4372,26630,129112,1423,29676,213626,4397,88436,99190,6877,49958,26122,114348,60661,29818,293118,50042,179738,16400,163423,89627,31040,43973,36638,45952,5153,1894,109322,1898,134021,12402,112077,68309,190269,69866,31938,107383,11522,105232,11248,14868,39852,71707,186525,16530,38162,106212,11700,5130,16608,26998,59586,108399,230033,43683,48135,82179,2073,5015,196684,189293,16378,23452,8301,35640,11632,214551,29240,57644,33137,91949,55157,52384,117313,5090,17717,89668,49363,82238,241035,66216,29066,184088,97206,62820,26595,4241,135635,173672,8202,459,71355,146294,29587,3008,135385,141203,14803,6634,45094,69362,50925,546,51884,62011,83296,234584,44515,56050,89476,87751,19373,12691,149923,19794,13833,35846,87557,58339,2884,19145,25647,12224,11024,77338,64608,122297,53025,7205,36189,36294,170779,21750,7739,173883,75192,35664,224240,113121,30181,26267,27036,117827,92015,106516,55628,203549,67949,60462,60844,35911,20457,1820,920,19773,8738,73173,181993,38521,98254,76257,46008,92796,5384,26868,151566,22124,2411,15919,186872,180021,28099,152961,78811,80237,62352,102653,74259,184890,16792,123702,224945,29940,19512,75283,14059,112691,92811,233329,20411,138569,53341,109802,50600,134528,66747,5529,166531,31578,64732,67189,1596,126357,967,167999,206598,109752,119431,207825,78791,91938,10301,27311,24233,252343,28831,32812,66002,112267,90895,8786,8095,16824,22866,21813,60507,174833,19549,130985,117051,52110,6938,81923,123864,38061,919,18680,53534,46739,112893,161529,85429,26761,11900,81121,91968,15390,217947,56524,1713,6654,37089,85630,138866,61850,16491,75577,16884,98296,73523,6140,44645,6062,36366,29844,57946,37932,42472,5266,20834,19309,33753,127182,134259,35810,41805,45878,312001,14881,47757,49251,120050,44252,3708,25856,107864,120347,1228,36550,41682,34496,47025,8393,173365,246526,12894,161607,35670,90785,126572,2095,124731,157033,58694,554,12786,9642,4817,16136,47864,174698,66992,4639,69284,10625,40710,27763,51738,30404,264105,137904,109882,52487,42824,57514,2740,10479,146799,107390,16586,88038,174951,9410,16185,44158,5568,40658,46108,12763,97385,26175,108859,664,230732,67470,46663,14395,50750,141320,93140,15361,47997,55784,6791,307840,118569,107326,18056,58281,260415,54691,8790,73332,45633,7511,45674,143373,14031,11799,94491,35646,96544,14560,26049,32983,25791,83814,42094,231370,63955,139212,2359,169908,3108,183486,105867,28197,32941,124968,26402,88267,149768,23053,3078,19091,52924,25383,19209,111548,97361,3959,24880,235061,9099,24921,161254,151405,20508,7159,34381,20133,11434,74036,19974,34769,36585,1076,22454,17354,38727,235160,111547,96454,117448,156940,91330,37299,7310,26915,117060,51369,22620,61861,322264,106850,111694,15091,2624,40345,300446,177064,1707,27389,54792,327783,132669,183543,59003,17744,20603,151134,106923,53084,71803,279424,319816,11579,21946,16728,38274,72711,5085,83391,88646,40159,25027,34680,10752,12988,54126,30365,18338,100445,230674,44874,84974,143877,123253,139372,28082,91477,144002,13096,219729,46016,50029,42377,14601,6660,58244,58978,23918,88206,113611,64452,17541,41032,10942,12021,49189,10978,40175,37156,10947,71709,106894,112538,57007,137486,150608,152719,40615,7746,279716,13101,19524,28708,40578,72320,1096,182051,94527,51275,22833,45164,81917,77519,48508,5421,140302,37845,149830,5587,27579,5357,428725,248187,6326,206760,39814,32585,89923,44341,288753,284443,96368,31201,94189,119504,20359,52073,103216,179,27934,32801,96035,34111,34309,101326,18198,20704,210266,37643,27880,141873,106e3,19414,56614,167714,66483,107885,86602,4379,20796,75467,4987,5017,118857,26003,34308,114428,29198,6686,29697,73632,3739,69795,16798,41504,7207,30722,21436,36735,28067,28545,3239,11221,36031,41889,100010,19247,317673,29495,174554,6424,129725,53845,94986,7955,59676,2604,191497,19735,102214,62954,23844,11872,179525,261436,34492,428,78404,142035,16747,17246,27578,37021,33672,57944,26056,135760,2369,61674,122066,31327,19374,157065,40553,130982,69619,71290,38855,72100,92903,95940,51422,165999,65713,57873,50726,7288,20272,2081,42326,22624,81120,57914,79352,19447,1684,72302,11774,302559,161481,96396,13692,414988,3721,79066,56627,46883,21150,11747,12184,5856,113458,176117,84416,52079,27933,3354,59765,141359,2212,216309,2555,23458,196722,142463,45701,44548,28798,19418,215,29916,9396,10574,114226,84475,13520,18694,34056,4524,90302,62930,13539,19407,77209,7728,38088,9535,2263,23875,183945,17750,26274,67172,10585,28042,22199,7478,51331,66030,26774,192929,31434,25850,50197,52926,178158,4679,181256,70184,229600,9959,105594,72158,73974,2726,35085,78087,23284,35568,51713,155676,5401,27254,11966,17569,223253,71993,103357,111477,55722,30504,26034,46774,35392,36285,214814,41143,163465,1051,16094,81044,6636,76489,179102,20712,39178,35683,125177,54219,30617,52994,25324,50123,2543,87529,58995,10688,125199,12388,60158,125481,131646,7642,133350,65874,3438,97277,101450,10075,56344,116821,50778,60547,98016,106135,13859,14255,16300,77373,173521,8285,45932,37426,4054,114295,55947,7703,39114,52,51119,128135,19714,60715,9554,50492,88180,2823,118271,52993,122625,97919,23859,37895,25040,33614,32102,20431,3577,9275,15686,43031,157741,110358,1884,40291,125391,13736,5008,64881,87336,77381,70711,43032,49155,118587,70494,4318,10168,30126,12580,10524,280104,104001,145413,2862,84140,6603,106005,13566,12780,11251,42830,571,179910,82443,13146,469,42714,32591,265217,424024,92553,54721,134100,6007,15242,114681,59030,16718,85465,200214,85982,55174,165013,23493,56964,82529,109150,32706,27568,82442,5350,14976,13165,44890,60021,21343,33978,17264,4655,22328,27819,75730,16567,55483,14510,17926,45827,150609,3704,7385,272531,161543,76904,122163,52405,2039,19165,41623,14423,228354,3369,176360,85491,7122,35789,303724,4465,13628,2233,55311,118771,20713,10006,221519,45115,71021,35650,29775,7337,10864,20665,21142,1746,15080,1624,32449,10905,105743,229797,7701,3940,22997,178467,57208,389057,39683,59403,63344,63125,54847,69691,18336,56448,3362,37202,18282,29648,138224,35867,10495,5911,28814,26653,31514,176702,26550,45621,11734,4525,40543,73944,121080,27858,155561,14887,44670,30742,8796,107455,113472,56369,75581,183777,240095,133699,153299,8768,160464,26058,49078,103971,21875,71486,44888,17156,9678,89541,123019,102337,3972,83930,21245,87852,109660,287918,183019,686,10100,39177,283941,11274,24736,26793,26214,25995,77011,141580,4070,23742,46285,46632,30700,26669,19056,35951,115575,174034,56097,35463,87425,24575,44245,38701,82317,85922,281616,100333,147697,61503,7730,84330,8530,59917,61597,17173,9092,32658,90288,193136,39023,20381,56654,31132,7779,1919,1375,117128,30819,11169,40938,23935,115201,101155,151034,4835,11231,74550,89388,59951,91704,107312,167882,115062,12732,72738,88703,464019,158267,57995,60496,737,14371,123867,4174,243339,159946,7568,16025,134556,110916,38103,191,80226,88794,29688,27230,10454,76308,57647,77409,113483,66864,14745,19808,12023,46583,84805,16015,17102,2231,20611,3547,95740,250131,34559,108894,8498,15853,159169,148920,20942,2813,93160,45188,210613,45531,52587,149062,39782,28194,57849,60965,84954,89766,84453,100927,16501,27658,165311,103841,54192,207341,19558,20084,319622,5672,205467,98462,61849,36279,13609,147177,24726,165015,209489,59591,31157,6551,117580,75060,141146,277310,21072,22023,106474,63041,137443,122965,68371,5383,42146,98961,113467,30863,23794,4843,99630,30392,82679,13699,241612,33601,93146,24319,18643,32155,95669,40440,15333,34089,67799,142144,58245,38633,114531,117400,77861,188726,5507,2568,8853,10987,107222,2663,2421,11530,13345,30075,41785,118661,104786,17459,12490,16281,71936,193555,17431,5944,71758,26485,77317,20803,367167,158,7362,93430,11735,172445,46002,11532,54482,930,62911,2235,23004,179236,4764,101859,208113,22477,55163,95579,14098,67320,162556,90709,156949,3826,57492,4025,34092,87442,104565,6718,186015,28214,14209,10039,107186,233912,58877,81637,55265,39828,6194,145813,50831,105849,4974,88319,122296,10272,197216,95714,51540,72418,23324,91555,8743,140452,250249,51666,34124,7229,38592,129641,78169,174242,22464,149964,51450,14034,10026,95376,26190,120062,14401,8700,265,31386,143573,7203,229889,61567,4227,140981,2466,72052,10787,10062,30958,6099,38471,30103,23202,208101,70847,467,58934,32271,32984,36637,24107,30771,17109,73353,13650,2098,157040,67366,66904,106018,265380,107238,18535,44025,32681,144983,62505,91295,56120,3082,77508,10322,63023,36700,81885,224127,16721,45023,239261,111272,13852,7866,149243,204199,32309,22084,42029,38316,126644,104973,14406,43454,67322,61310,15789,40285,24026,181047,6301,70927,23319,115823,27248,66693,115875,278566,63007,146844,56841,59007,87368,180001,22370,42114,80605,12022,10374,308,25079,14689,12618,63368,7936,264973,212291,136713,95999,105801,18965,32075,48700,52230,35119,96912,32992,8586,16606,101333,101812,14969,39930,759,193090,27387,42914,12937,5058,62646,64528,38624,25743,37502,3716,4435,30352,178687,26461,132611,42002,138442,35833,59582,16345,8048,60319,49349,309,47800,49739,90482,26405,34470,63786,32479,85028,39866,47846,11649,23934,29466,2816,42864,31828,7410,74885,49632,47629,111801,90749,19536,18767,105764,59606,21223,10746,76298,22220,39408,7190,79654,64856,11602,82156,272765,17079,70089,245473,51813,184407,384678,1576,122249,5064,27481,6188,25790,74361,27541,318284,45430,31488,620,93579,45723,192118,22670,51913,4162,70244,35966,26397,16199,50899,209613,121702,287507,2993,36101,132229,67345,33062,76295,118628,78705,52316,34375,107083,107454,44863,127561,33964,3073,154010,190914,55967,39074,6272,31047,5550,41123,26154,98638,47110,19998,148091,50229,31329,59900,195442,19106,61347,73497,70015,682,45850,25776,38022,148951,6288,37411,232526,109277,27286,32342,9262,5220,16651,23175,46740,129438,78614,121925,66914,88710,127952,5563,21500,34521,10739,14863,191006,62956,17359,16749,67027,56284,69134,43301,35039,58883,54466,60823,404451,75743,59856,86979,7923,34273,83785,32142,7693,268986,197428,282681,17049,22346,22990,92245,107180,3357,37104,96724,49153,7683,31197,43267,82231,164276,23696,20848,188364,22309,24821,158707,1018,22514,70922,27792,45589,59709,10765,736,35218,63479,51987,24275,63588,55361,92929,81964,4658,20122,12330,44058,13065,311456,72224,8337,211229,38979,22590,138478,52757,32595,133600,8838,31549,94412,43391,90056,1585,94802,127271,6223,31889,137038,132910,2165,57616,230152,6080,10748,36737,74579,134062,50525,180532,119270,34556,76155,82394,52595,29258,31435,87820,67996,26943,183878,38007,2410,13526,180297,69856,3503,187396,167700,7838,16701,9199,56267,3661,37407,65994,23767,5708,62508,221700,67088,86978,46776,84434,32088,5612,9149,88244,21685,95151,46750,189612,2979,506311,2594,3628,40074,105039,78243,28523,6651,38058,71999,30992,12764,68261,108991,6165,26450,61961,13400,22426,7490,60890,109623,2070,12958,50355,67979,257096,7213,42578,52121,35716,65461,7516,124758,39268,302,64712,14977,1467,219452,2840,34229,11121,21602,19270,63574,8024,1532,17331,79839,78885,52029,180767,57957,6069,91265,61380,55767,8927,32881,287603,22149,35029,68876,6428,199567,46926,13412,104132,21434,366616,45060,110046,81924,128910,45886,52821,130416,29416,77342,21762,67329,121432,79924,11724,38625,81006,102033,28338,13326,3250,82056,82526,38212,21112,12382,111495,3263,7414,86274,93490,40844,30224,45212,24019,48411,71367,24941,76729,57776,3769,38114,202019,197745,31953,237533,33270,201580,255648,100798,44741,32241,98468,106931,10085,15090,170358,33154,66787,18819,69760,25061,234005,82660,6295,131975,16874,9076,4094,25005,17740,40908,19533,220019,44330,99792,50040,19619,13950,55228,24423,31253,95308,103177,184795,28590,82285,5059,3210,75525,49894,70007,56178,10580,36051,139681,21617,98736,3555,106306,164189,37352,63915,47824,24883,145530,61904,28444,11483,19837,145446,30420,112972,85939,11835,191233,2262,20705,58630,1753,148334,1197,144714,6887,11223,107667,60879,77914,4151,57417,81594,96681,169430,1784,20444,95138,254041,27038,596,7117,72808,13759,3353,126776,21074,55322,27081,36942,39547,139830,179275,4453,713,8722,71399,19204,25785,22794,23923,104114,11291,25458,102309,88396,75288,230440,206396,104551,58447,130857,37247,94734,31548,176529,226077,65159,20104,10096,66881,94191,237909,27109,37404,1520,27421,25220,113003,23423,24884,50585,6286,231877,150800,11789,3226,90004,60642,5053,202400,61442,132531,175329,57138,30116,103847,9973,75367,16452,32360,59119,21246,10191,164804,23305,61051,37348,154530,13214,5468,50403,66754,130976,50559,80515,14436,155492,84017,5472,43107,41240,2890,90431,70188,382,76234,48040,50211,281038,237007,32115,142178,1536,22761,96429,1811,31243,1679,49143,55209,17402,235054,61494,7462,77030,34925,87609,78002,9499,9027,73289,201078,101379,63544,27666,5469,10642,30029,49816,132979,95620,58086,351930,116300,2110,2043,30845,6154,11279,16727,4122,2277,27281,4971,3650,39060,61970,65951,39674,75686,38151,11370,130809,177895,32665,63725,122267,7857,39618,118483,44792,157755,178624,136994,24260,41308,22471,12404,21707,12486,30473,52781,50246,20247,39065,909,56825,103158,128603,31542,1089,41935,32744,12428,37963,84420,33134,72921,208449,42622,168151,127335,147107,46699,38216,12591,94342,85814,31423,24944,2605,87542,67473,192551,4496,56321,91819,17630,6300,256183,114569,202090,33209,35289,34897,24967,40520,43470,5344,10199,34810,14283,10381,10017,62923,49924,23233,64539,13051,35686,19698,11570,135555,120868,44924,87065,52318,52335,47586,140906,245885,109834,78668,9065,46990,25258,72022,61243,40838,4545,146387,10537,11557,17470,36930,68104,46711,24264,79401,81043,18225,120488,24746,84338,81652,28266,13776,21878,46973,1047,230465,73357,95777,24973,210160,62210,58404,110633,169651,6937,41870,9909,26822,191062,76553,27519,96256,239070,2478,205678,67955,58532,20601,50120,19148,78501,195724,110740,8249,109665,27446,30568,57631,31425,49752,32820,65504,50079,3663,102256,219898,23849,211315,14645,4359,91767,9528,12449,49366,7941,49763,107848,8930,27086,50686,9744,10447,81935,39513,46514,1670,29229,6172,22312,137280,97759,9806,14445,22976,56458,73391,34983,93760,174219,52573,33149,59747,2429,136277,75123,165263,91040,7446,57632,48633,97140,246081,84766,151684,79918,93268,120346,54059,54875,77858,32996,103590,45276,11968,19600,25849,17159,132907,42828,16817,4913,99462,103303,27395,5737,74184,20749,21160,14377,77062,131403,158735,10999,27799,77785,9320,34366,51593,61070,33746,47048,29268,36675,30262,53297,9832,82e3,20188,122292,39917,7331,18160,68301,185935,134830,15031,4935,10004,165845,185534,46923,30109,44134,122631,18874,22903,112790,26561,18549,348902,82871,140345,255565,135390,63556,103747,145055,179600,145662,296111,61661,211987,23952,52342,126343,48450,32919,44277,82185,9591,62139,205363,376969,394874,108461,18040,120885,14798,39863,16571,16794,58271,81025,55206,14640,118656,6361,44092,85970,6262,153863,108244,180200,72264,79947,38044,10050,5735,61221,80712,5471,115689,11391,11661,184257,20010,60116,30320,19327,134598,45455,27542,18004,125092,452272,1549,91523,46567,180063,156026,2608,11174,58848,37788,65907,80194,30490,5786,40775,119519,106241,11323,156297,8425,61495,2617,29675,2425,59886,112582,49142,59618,4863,50597,86710,50650,168632,27693,85641,83643,18993,25768,84284,28090,93592,36627,312804,43381,9887,9402,100931,97165,3311,173330,66805,28935,4963,184460,3201,78102,19126,21607,37496,24938,22615,16153,32862,134792,153318,61120,6067,2812,12826,12792,23825,37559,64662,202250,102694,155488,85881,149193,46233,65383,15521,106982,11358,176786,25752,39717,34208,24510,32464,77742,39371,72028,138229,60688,71386,102834,132477,2208,11548,63670,271279,28351,30338,38620,32491,99845,143885,152266,13252,2825,178663,108097,1775,78201,14897,113573,163346,62292,171129,22183,96598,38733,64971,166776,117445,9968,146393,44677,74867,20908,97328,12761,25656,26785,9148,112344,26115,99176,110121,22437,49547,6180,79320,5835,31392,43328,33377,75870,119860,69497,80273,7325,155219,43167,111173,28347,20222,3763,71752,55041,47252,14618,28088,15012,97805,194698,54636,2036,41349,6173,96604,61530,51859,43782,13361,24334,22668,24792,7070,23441,16789,3209,36211,208475,26242,32880,122181,182407,21444,31060,88459,29929,77907,12716,10934,97005,20599,31690,8403,58445,30303,22700,10336,86731,103115,337709,72556,46788,112566,47684,67089,53548,36874,56487,41387,125985,26893,40071,106683,73712,18787,40105,72992,67246,137276,50802,36790,70328,138827,22466,39263,183295,29858,50975,9322,57397,10654,24364,30383,55799,41600,23584,127295,296610,129078,143558,244131,86397,36049,1085,80677,3820,108139,5476,34767,24683,7758,13060,7239,131671,250593,59556,103392,29810,4188,252323,39404,116877,7651,43600,40338,13554,157253,39196,25978,144387,61211,234,50104,6129,10449,93777,9240,356378,274148,4439,72970,3724,147770,78680,62570,115877,40027,40547,36817,224392,64609,34795,165027,67440,2477,37206,23431,50754,164797,46018,94995,170982,27051,7957,22767,3674,27900,56419,18930,60701,41302,2692,84749,339721,61996,111094,80221,50129,1045,8153,62945,19202,8250,37208,37418,32560,79477,41106,88569,33963,36693,5892,30570,1581,66471,49647,11922,160717,29442,5643,114865,82962,95982,132098,22633,22838,94726,54556,28566,205039,162340,33216,16849,35847,221339,94851,26533,71469,1805,3804,12935,45483,71020,36310,65381,192960,34240,35165,59773,1248,46954,155332,96864,4246,388800,16129,57133,74592,44807,442014,38203,42574,80818,91592,26377,36424,65760,977,77387,22628,147610,28018,30561,98454,6969,119628,63648,18170,36854,26601,64018,22027,37279,51395,152934,21153,9430,58760,194742,5330,55115,34158,28917,174111,13171,122326,1526,43896,66094,25325,4234,148354,11450,275,18999,112191,44365,22723,68409,8733,57746,96565,75007,14196,108844,29475,88599,177563,100792,106156,86323,93726,14248,135341,194131,40126,47099,14779,8272,39597,95983,171398,65882,28052,10393,47213,40689,22120,72212,106829,34964,109146,753,648,21660,30047,17527,181025,5619,145357,4085,216883,9359,186951,24779,53931,24545,36197,223296,62628,168101,4243,107313,30321,26642,13049,51059,31027,107912,807,73550,26551,84369,122422,165872,49754,74213,234264,33151,52014,33100,87183,22365,52500,40013,23302,5652,72723,21404,26107,48434,587,94049,168493,96418,32871,70860,31709,25128,443,71597,166253,15670,70994,26341,133675,28280,75491,54756,47955,56028,26182,11952,113272,472197,64640,110753,17919,337,50642,22576,142,87371,53391,93210,126694,15285,19642,85667,14148,1506,42092,52962,33243,11970,20734,135843,57044,58880,13002,219134,22876,64754,232519,4257,43120,321573,24799,64526,124728,52579,81472,70831,276848,17403,74359,23021,182101,74597,23744,148267,12055,7976,5349,11772,67540,167347,65318,18720,127832,108238,22828,90233,9987,259080,118185,73209,79270,13775,90100,137742,90799,70569,15699,19961,9087,67475,57872,39731,8810,134897,131868,146849,19898,3334,2281,167061,91073,60356,467742,74712,188,53179,137679,92769,29241,9537,132595,80119,1041,88962,5976,40171,44911,102859,139059,104558,98987,47761,19272,71472,113864,175377,73338,10857,23402,23758,1591,139864,5644,4076,118760,16427,134198,18853,20291,100849,37423,22038,36677,19071,195521,57445,11069,31869,55718,66882,148490,44,41296,75242,49704,166810,9906,20943,122258,49112,105667,15969,10344,6408,187694,21399,72742,58970,14867,14376,81889,41856,23225,15042,56993,16074,131389,74276,72407,53875,383108,53597,37363,68993,44854,122548,430927,198279,38430,80409,12245,2981,628,2818,17760,37437,238229,7968,46892,2200,3730,34190,65983,37959,112291,87850,70827,6522,20750,73913,111621,41652,19587,2780,58668,25916,85259,18200,168962,95781,42445,102050,7776,57662,103313,47742,96358,41964,66174,100396,29069,204735,19679,27978,7479,40264,22534,61183,36081,107436,58223,14680,23002,101311,24716,124108,12908,5646,31750,40380,14215,232799,102772,14122,96775,61398,50917,12096,149880,67833,598749,124194,155871,49216,790,14677,65319,56917,7440,145744,95701,12206,49405,129269,76199,45732,9767,11058,9047,210885,11051,7392,26307,2130,8132,147526,20802,232698,115660,50060,59789,57344,107623,80343,112676,23291,9866,160971,34032,118291,15719,59730,164911,28975,2659,58046,78480,21854,66209,53863,109085,116045,29021,46481,107552,22130,18764,70254,31272,11300,52460,43933,84738,20721,53869,190840,79673,105300,7561,321817,66924,13940,33281,101046,183181,32176,71878,5678,62924,79535,56646,40303,19559,27703,93042,73368,42187,3670,37376,46440,7023,36816,109628,20680,5940,276440,275233,170848,112093,136996,14984,20226,111441,77693,112960,48577,39370,55707,50314,123404,26570,54281,61372,123391,4857,35928,246740,132507,106646,44241,7196,92258,9825,37688,51197,303141,5590,15476,132986,10955,85782,34486,26696,7991,28813,18858,39546,11703,11365,38185,5716,93555,11925,40121,60002,6985,10976,171384,3887,43394,13337,56346,6381,252336,39573,75042,53711,1028,31781,44295,95925,131713,7214,68125,43571,70954,213234,1628,8760,13391,65485,17320,56038,1710,25248,60803,57399,19839,3870,326,281556,50945,72400,21460,316244,75619,56246,98775,481,13513,55765,50427,7388,123519,32929,57908,27124,61316,101097,57467,30228,48792,10788,20402,37318,50526,155730,34456,158065,145305,17832,43733,64052,4506,35072,205355,177028,184004,187081,68616,35938,83703,10367,36892,93186,260137,51934,89970,4985,23445,26755,21558,7948,78741,23376,124405,85594,68596,57536,49351,12619,56593,132668,99924,109728,71844,71935,196018,65464,17617,14987,89701,143773,33997,8687,22701,33258,2914,4436,72108,85610,9671,49067,2327,82988,1361,1672,44033,35777,30269,24057,10605,82236,616,15793,13919,47249,112086,116698,9484,80207,90574,33304,68624,93127,56101,42210,160929,4827,38995,38095,4701,125119,5027,33680,9236,231236,14135,87837,23318,70261,78893,30151,81482,14332,1084,74256,27532,46644,79185,3148,62615,6981,55672,31668,36825,1849,14536,37446,14738,23779,43058,162749,72199,1168,21346,5592,85932,85302,9668,18351,57135,150360,2080,228015,77953,34670,119302,151751,31009,106725,84265,45214,59289,74178,113071,263206,111009,4021,44449,188119,192629,123592,392506,292847,114487,12831,205858,9852,20780,79648,75767,357014,97721,18166,21005,67950,33226,204009,16536,2987,11335,66717,144910,47950,17262,55060,15063,2934,51038,26775,178497,66008,3427,49433,128592,20036,157553,63861,3089,23015,51210,28696,35933,49942,71135,231518,99620,17248,21835,176536,20676,16944,38700,165831,233253,295625,36723,13023,52745,10907,19423,67972,125868,95473,82875,1183,108455,52685,33417,64095,21433,52438,33191,127809,44505,211823,7810,2752,95548,162031,7185,91196,47563,61721,33359,17897,23682,42806,178101,22874,49707,199897,75419,82456,8618,11171,79712,116847,18783,44190,46564,5346,59046,95032,7893,14916,3214,26800,24172,121453,34362,10250,17408,18888,4840,68696,22831,13162,36005,32512,14800,62357,41723,45046,27247,37486,5372,2564,34261,298500,66509,133920,89138,31305,117697,19097,108304,81386,84106,23802,46411,63304,946,51417,41777,41041,19501,115864,60743,294354,37955,94165,18116,1156,17937,20645,57114,90804,58042,48643,92288,9861,2557,88546,61333,101008,12853,5148,87856,4152,144503,73841,18718,9789,147565,10846,42085,12789,30223,8993,56352,67203,2448,28215,6052,23540,126319,75933,36689,80235,23231,23561,21383,38800,77548,102798,21234,31468,158608,46188,63960,191679,8051,67014,11185,170078,42186,28827,34777,41930,212079,12421,34750,24111,110344,73918,45171,70826,141949,40063,23979,24254,37309,26724,27179,24718,83648,54938,14591,17425,29525,102675,48975,48654,12316,8929,60640,41709,50168,63264,89812,50716,48632,38755,138583,160123,55579,71829,24230,233277,46322,39650,166388,34718,24108,98252,7031,106695,62498,18258,35062,217827,78731,34824,33354,19520,60852,2432,60224,8587,2836,62955,702,20227,42285,40560,95592,62486,11094,53035,143291,18842,46177,77994,1770,9657,107422,172915,32655,128716,25886,25164,156740,119928,165875,85817,11007,89110,33956,12652,65156,180266,8494,36889,19958,20955,96,1264,118288,135769,44754,86671,5632,19026,168220,289120,33569,93821,66144,70635,7687,5642,2714,55445,56636,71545,184182,93133,7332,37389,12643,52315,22729,11014,158742,17050,152889,50178,34601,41945,52136,9948,26914,63548,95721,115951,40759,8960,158258,38938,49232,48325,42234,81523,253019,66128,40978,20048,238048,38760,62928,122560,118532,43687,137472,163689,26680,9878,17448,51035,16211,60834,36749,29178,14241,59868,150086,2305,26477,42422,34342,165341,83279,33894,14257,29928,12743,13957,125571,89134,66712,10952,16507,147839,30146,7249,16565,45399,39874,114565,215780,31990,230881,171477,102,196546,44538,10880,84948,281705,86651,10617,31395,2342,453658,43569,60561,132901,21845,17727,58556,258242,22262,58728,4008,77997,11806,37431,30599,81375,109137,185787,114085,217292,97453,169085,30593,60212,11544,102056,65580,2384,91655,4855,95725,7295,157994,16228,20669,53276,141590,105246,17334,25440,76067,17967,39321,38911,11362,28559,63807,21627,26468,85816,40120,1025,15234,58319,69516,66512,124548,75845,78873,22137,46681,51242,85683,32909,76747,35555,43396,101465,1765,73094,1077,2962,39028,66777,57831,42048,15828,13962,36041,63657,52412,5242,58846,2141,5506,219012,134451,3936,182230,17558,17153,152237,22621,49377,170216,35257,68233,65374,6510,11126,212151,7184,2480,22517,3437,33073,30156,16557,3768,55067,86829,91e3,12350,148650,66017,79424,70885,49066,28250,21369,51213,34533,11510,3258,18176,18465,84413,6315,36411,163765,4346,356,107618,598,13727,285026,162695,8749,14583,7132,63521,184253,32378,25991,5604,30961,53675,4874,84693,5086,34811,26978,56564,7904,33519,51221,113942,69253,6664,125563,22055,220680,102008,742,51930,19494,176108,44424,35123,13025,75685,11759,74335,22250,181453,131147,16984,132115,154311,11991,76452,52609,85351,196,30969,9198,74919,2529,56838,71779,29187,116304,3504,62330,41190,86153,28393,254926,104228,105189,13264,84359,3574,12415,8534,57147,10175,188174,59504,60932,66318,16407,107921,17638,99103,49278,28403,39786,145865,8462,3558,43406,142271,29139,21989,36552,93955,72365,7176,13556,106185,37957,321774,17782,129017,51154,27938,24952,1935,39366,2791,33489,41582,56078,24558,9311,5449,218786,27808,190429,68013,36020,86003,29735,3404,87348,119357,115714,2324,86796,81973,40992,43376,93621,28784,16808,36367,2517,2909,191926,24978,55303,53308,205724,60068,3098,21375,64784,23949,26579,63121,12319,80145,39967,97861,6757,70143,67642,37082,34698,69140,122883,46151,62187,80934,429,19437,135071,137885,222647,13331,154065,327,61778,74257,40116,37493,14855,85079,237641,42342,102164,199965,71204,4662,29368,5042,113914,122214,8955,13149,102503,43173,5659,163787,69003,307084,63392,171080,21390,81918,86666,36622,24126,28887,5736,28054,207170,163428,79891,346467,95363,38980,111806,80828,9200,19288,294896,114468,87405,111715,141705,7015,72754,68463,48738,243147,33397,101210,37051,98801,82847,20397,4940,185559,18716,54718,83491,11725,40803,1128,12128,23060,5174,7745,67007,46701,1571,27807,180186,256996,18975,16837,7877,212758,250379,15440,87954,57755,24719,124057,83461,258,50864,8874,29038,71289,31627,15429,9005,4061,113851,107716,82819,13651,79656,117851,17539,111446,12938,39724,190787,4352,15402,21070,62708,8539,23777,73853,13552,38810,86117,16285,56400,1718,75342,142863,29033,378,110113,180321,32586,23606,26393,160984,207987,23783,8406,16904,24596,47274,11693,46539,60524,78595,48423,31718,20170,9009,146268,15183,191060,172765,1349,138436,37365,10970,40509,225817,20021,70394,152138,21541,66559,66544,89352,2725,17258,91345,7313,3815,115868,8660,40362,4071,103524,39388,118275,21950,6549,38226,32754,209574,29201,43495,18028,20296,40597,18370,47520,202450,24134,2219,8195,69545,38041,136934,46374,19041,159811,84865,58620,846,98749,13569,30714,97246,32186,4479,27355,92973,35214,151491,75963,37631,1561,27200,238083,23182,60756,12291,25766,39355,102333,87362,65741,59906,19538,201575,48772,102938,24438,292580,39964,66366,9004,61379,50548,37622,38732,28379,68180,76622,17488,69849,5963,7219,48143,43413,55358,540,58691,29506,19245,52193,48621,5518,13048,118625,44755,191081,42061,89197,2259,60665,66994,71210,51232,3585,142096,55024,7892,8345,58653,463307,65658,64319,137941,136323,53499,12746,43492,6978,95163,29925,60175,5128,7352,41463,184756,121146,20473,18426,4598,5309,54580,14277,121151,10691,56711,43880,63409,76682,11830,172218,264898,32632,66536,81062,31649,25788,92774,60222,11100,63159,9432,224657,25240,53613,152,138620,163829,2397,85345,12501,37507,64932,38575,43522,65789,80198,78796,35226,3851,108891,73311,3060,28391,93671,39663,46142,30982,66041,37281,68157,26553,71872,81142,211527,39747,118119,22695,2859,11066,20232,168911,7933,197005,17066,111071,44434,133994,120798,12766,227798,45756,132852,29917,36076,55352,65281,129800,41958,18944,84678,18580,168093,132621,39997,54092,27740,32354,3770,114118,103242,43918,15899,18574,145944,3190,123469,219903,24169,100571,62403,16776,92779,14535,17168,16475,14304,37231,1712,28218,242754,61688,28980,1318,51359,222657,99200,67989,31772,23932,35351,201251,49041,27306,19128,40135,3986,77333,19649,120683,151927,21081,7076,78375,77501,101599,8011,89585,96715,58179,5378,102138,106793,26051,217276,4197,16297,27014,46721,13322,22806,5278,29629,70632,9647,71519,58818,40603,128530,8903,36770,56900,31483,26935,43845,34265,34920,87658,6114,84767,64250,47318,50720,19264,162514,33357,13117,6705,46696,75032,71054,87004,42035,69138,11903,99854,102328,19611,34525,69312,6431,49842,101600,133178,108751,41829,89939,225664,48916,99556,9195,130387,5960,36857,116724,53518,94002,39077,53996,6945,22261,64291,8314,152785,57588,16522,9091,5048,87671,35441,39509,1945,12423,158923,178413,37549,14095,1475,73188,62878,4819,24012,68534,42606,4010,120809,57497,59564,101758,103718,32701,80116,12345,95834,46918,21468,53213,15665,31200,3867,5140,96013,250744,21016,10069,13968,35449,180829,27683,39704,59956,22893,3115,26293,32785,75934,62445,141162,62720,2018,83638,19949,114012,95006,3330,99829,130935,309272,9565,55874,121727,37017,23586,319858,40970,27602,8625,112329,61060,100088,118525,25922,16232,1907,60671,51583,44553,80993,5262,94679,8676,940,20736,11823,3020,16476,12340,152600,97416,3703,25744,66826,16245,16876,46446,84798,74227,176020,45192,61955,75496,23946,23626,40372,26036,6149,11822,30582,16541,41914,82385,232823,40921,80773,14930,3631,7517,39619,4348,36180,126106,138939,62611,1477,113512,47321,25052,14546,118881,29060,23589,128322,36795,18401,137921,104699,267929,36194,172791,18113,4766,188215,30083,332586,94089,5805,77909,22194,68234,154976,43220,40660,70001,184893,138095,11128,103010,22663,5108,212615,8485,5565,49222,54614,26530,42639,16319,55062,152662,105595,21114,22216,10294,68158,10436,86950,7206,62115,3977,3657,59874,456,118617,18156,106663,112229,80992,17442,8217,55551,5133,34344,251927,51153,39364,201321,7816,66803,23057,156724,145664,14276,95705,979,2796,6875,13429,212525,50602,26276,28284,3424,19465,52397,46963,31420,51399,206476,92317,48851,637,100820,83349,10317,60227,21972,6908,282439,32857,224767,95629,83882,42106,87338,69757,29840,68709,37665,45244,114577,49188,175943,54009,186746,106158,70168,3358,234002,50555,9221,129338,9562,20118,32923,78479,118280,65752,4977,10474,102174,60947,129006,10570,83451,8598,8078,159367,123785,80438,16742,5905,5281,181513,42402,6977,163136,93179,42191,14968,50421,112401,105440,33456,57347,121611,4221,94954,36517,24046,27796,6255,33394,72990,135408,116627,1233,57874,25654,95419,68156,401399,313338,55208,45573,93124,119251,47200,38196,11909,130667,45391,73904,64964,167846,4137,115606,52036,62214,7969,160925,7187,1132,134835,40309,73195,64494,80472,444841,61111,26500,45323,40743,53625,52797,22659,15631,29739,36706,28841,39147,102836,26794,10536,14845,87305,45874,12241,127587,83833,57183,79722,30844,41304,84655,20825,92500,3722,25655,27811,10157,81634,31362,34088,92487,70123,22190,185100,72658,139035,192523,88241,2078,230490,44528,85638,100198,22088,29982,291233,241062,13865,4445,137791,37835,107218,31726,19718,38234,72528,23046,19177,66695,5109,17251,28077,5617,21554,47839,72425,133825,1486,73065,181275,141508,21768,62971,63082,2512,34200,9904,120309,6392,91243,68416,268253,41199,116757,138551,185526,41246,28986,4093,19057,17295,4148,245766,122360,35356,112075,20301,75441,10998,7977,19769,62922,937,63547,100196,26427,157820,20983,236696,22935,8140,90315,156004,47204,140973,7726,45097,52725,22636,23436,257282,105247,522,88389,216031,202204,46812,211666,19693,68828,81691,45925,11256,30292,372,5236,167826,88328,232776,151611,5360,82104,18841,80393,25465,18285,20320,72377,31730,33160,45803,38715,27705,37379,24163,18360,103586,4015,32305,269494,91252,20080,36567,54650,7797,57073,12650,31164,42209,6375,261663,105528,81661,106002,2800,5375,17247,43151,4442,15727,194619,100855,144898,62320,78465,39929,16454,1967,28311,61363,17219,9395,8745,121445,76939,80385,162380,22009,54191,44248,16299,122830,48151,74429,78291,64755,14238,44966,2511,17712,67954,93583,829,105899,49935,84750,11591,33185,85447,42717,27409,208542,28965,62052,52525,5597,25694,65594,16343,63224,276188,12475,9331,127507,38522,57287,24128,133161,79723,105548,133695,48917,27558,43278,46520,13778,141954,110785,83366,17715,46317,105763,66298,147013,41086,94180,16478,220447,44611,730,19722,78975,117889,125643,26254,16574,18480,65006,15806,38549,246418,46052,36056,8440,34984,30170,3163,59800,4458,115442,4283,41970,33507,104078,1653,22,121158,276486,3655,6338,24048,133421,23641,2161,24422,36006,8086,10675,181474,12307,29514,59143,14729,52509,87128,122470,19446,80852,33314,24573,119864,14237,9652,57779,6612,51851,15284,98871,90581,124466,156831,21190,22015,71380,161906,87247,69201,18392,17908,108470,72962,40719,14338,17911,95260,43339,20610,78916,20710,72451,11315,31448,17263,58853,178878,48111,116002,45497,80506,82605,85880,36300,121755,25215,36118,301929,88728,405223,276136,553,34704,212438,49970,78329,922,20711,25036,257130,38295,145369,18128,15385,30829,55656,48345,8012,3561,28004,122041,192900,58338,112508,41085,29976,87040,47117,23905,4336,92061,138880,97407,42083,172121,6256,25192,172671,5,93568,1420,12677,31605,56743,40620,6015,78415,231077,31298,80026,13902,19048,24924,170586,32955,176119,87859,36731,6773,27711,24658,26475,115216,133207,93250,95820,88522,8317,5714,124047,55219,86860,19677,23961,22928,162209,8904,225992,359835,56084,96201,29392,96558,86071,93643,55114,13347,8183,95129,82012,2017,123336,34219,115554,157159,47747,101684,41008,18735,193781,104151,226906,7552,179874,124113,31159,21162,44010,14771,51268,166128,31382,73124,77438,92830,205709,12113,1292,38937,13114,1334,2118,15597,69581,14449,21934,76618,48728,67038,14967,51495,24243,87736,147249,26720,11119,46063,43749,5843,44147,152629,133428,65703,14269,45604,57982,28672,55616,45957,8438,95433,37698,220862,132034,39456,61870,4161,26501,73560,56418,9845,4654,20916,10456,88920,119358,9015,65931,96507,48029,38534,21676,109081,43078,34943,25089,6131,28766,23665,5477,10255,16695,67,45778,42443,42770,29534,23733,100513,62617,42630,48746,14191,43753,50295,26007,8792,57243,43119,54725,164253,58250,112304,131796,25165,4651,3188,24831,47748,3705,19540,13211,102095,5593,18699,23666,32005,117571,33541,60584,74573,86311,99443,25172,27222,168938,7143,11853,53560,18834,19960,86522,28217,53266,117700,72989,34323,18721,66450,34346,74056,47217,202002,46269,9429,68582,75458,37823,82843,96652,32549,145144,27958,19820,158086,31955,201406,135379,31207,192545,12950,51704,9094,248263,76147,64028,110009,79407,89345,99284,223492,47966,26848,15359,201137,2861,110507,71231,72297,31851,118777,71039,151051,240855,16333,50766,14727,7939,4149,80908,418780,88378,59276,1327,7284,38576,79814,65820,42199,84860,49574,62596,12396,70598,40117,8648,7994,16836,7630,14047,359699,106878,525,29037,28064,13380,11675,50669,74216,103539,180314,27449,56299,172344,19274,7301,246099,32043,19422,36506,129317,6806,30140,4614,46639,66926,932,86600,6322,27847,233103,10541,39025,34887,3517,12972,26220,2031,66561,115015,48658,47596,12714,33845,3893,16165,35237,89983,14769,11962,147224,47018,29977,27979,5552,82338,86023,131368,1218,24853,237840,132193,15455,40873,3668,65351,53388,15229,59889,272245,47934,11858,34347,18038,90853,86981,300602,19343,114181,29362,84921,6095,106059,79472,38015,1206,48741,6208,8e4,21916,17423,6002,108083,24479,34931,56661,9511,26995,100694,163853,35997,81254,58321,18919,171890,86877,91341,74503,70477,53412,7027,59281,39892,131302,5864,15947,61301,67466,162369,47956,27874,35624,282324,21270,111847,102548,41482,30955,116737,28264,8592,55458,22301,75090,29821,30697,51709,3041,19208,8038,24634,30467,87509,126428,19389,18814,152686,20701,83474,45832,80891,105808,11378,153223,120770,98186,150633,49838,9141,12755,30962,5260,74490,21256,31678,65062,33326,289838,187831,20595,89768,2805,58535,10844,70085,12090,2451,138068,98544,24461,4511,6754,41684,28203,3383,65355,82833,30161,83924,234361,128424,28921,222594,33975,125491,34069,11508,67464,144226,41850,98703,34371,7901,21254,38398,65651,23549,53883,213340,123269,12028,71764,177701,28758,2623,68395,11549,15232,68603,9660,63116,36079,57093,31198,20475,48467,89984,35619,186847,107469,31389,43631,73867,41949,68841,114250,1605,30564,63403,17588,27680,99533,12641,70325,50428,73426,78379,11855,91651,72081,91720,60198,15743,12065,83398,140046,6761,46598,45900,5068,886,62448,148968,37347,19405,9680,15819,43496,63370,75667,163700,37639,3633,22774,34341,183131,134335,37200,23915,7054,14194,12970,26438,13350,285521,25594,8219,104410,91039,168804,138480,149734,15907,33818,61132,60082,4622,110187,56736,13551,73571,3945,73463,65498,17758,263266,17593,2710,27585,54469,38200,45367,63754,28881,3473,12791,98287,31895,65787,4463,94536,24951,36332,59901,28803,52130,86403,7668,181822,74831,18977,9850,177206,145485,109798,7292,31421,26280,77211,58511,12507,127004,11113,147,8729,56208,43066,79926,129937,31345,83947,39915,46146,98763,42566,1337,13192,18323,105163,80570,117753,16555,72883,11077,159438,40764,70933,83329,26066,12276,72059,21655,173836,126713,69454,153482,91585,70644,102558,110483,6764,127864,190133,3961,101798,20945,71138,82402,90884,69669,44753,923,16939,59700,164258,25969,27082,31399,43846,6306,246093,51342,6153,151581,202801,182731,56475,162188,89426,141356,14355,121815,27536,28023,65257,77523,106668,127314,24947,12790,38796,169698,23555,10725,44573,183083,42088,62716,43265,105958,32050,44067,50118,1668,3874,6243,318411,16599,1691,94999,52378,28671,216728,123258,2059,34969,69225,5913,136280,171443,141515,91662,22175,135282,80020,92270,1663,4808,4482,3495,34691,5226,109830,108512,17342,107488,11606,123190,100247,29666,146527,113014,15794,30894,13224,39585,243192,22351,9903,7836,47699,11078,25468,122291,48821,26780,122679,75521,81450,630,4895,92900,55074,74293,17441,3563,111657,103102,51613,12318,52370,36191,68245,34269,40445,41354,122901,168604,182500,62012,42557,11259,24428,115113,86345,12362,3909,78430,86852,134602,20459,47853,93879,22577,7659,3688,38555,13349,17381,56715,91639,12493,10895,92438,3142,37057,28928,2004,36427,32268,34222,209974,10432,67436,41989,173518,107930,27079,62729,30908,55558,5828,45031,14902,53546,8204,144263,60255,14520,88212,86582,109589,69356,8064,47449,8505,66558,16886,4844,52817,111260,215129,12941,91118,650,20770,6273,73089,40618,62790,2873,35002,14023,97208,19386,102646,36993,143736,135457,35385,113601,17893,32627,84439,100619,56016,6581,57264,172160,45452,111710,203627,70131,24100,322787,1996,35665,70078,22358,90922,83658,4097,63200,58499,14542,99153,52159,6615,12414,63415,31986,16823,1579,65405,137809,8841,16898,48082,259,33014,42375,12260,179850,73667,91389,98882,29532,17311,326251,41092,5928,20742,44964,48019,43505,9317,49265,6643,192712,48424,163487,19861,20113,70848,31928,105333,23685,78563,14638,54755,7158,24142,44018,20774,125255,20331,24280,10163,1285,2336,39851,4299,117269,46714,63816,87779,159624,11731,9971,990,137317,108831,50994,74554,162680,23640,131597,146962,170620,34829,91205,21184,1913,63616,18427,93136,156592,17519,67565,115882,138220,78622,88535,18115,2711,33554,109492,54298,971,24914,25863,36363,45715,27099,194995,14299,178181,111488,72395,322385,157719,130787,11897,81843,83999,11369,49280,118604,40922,61332,110343,53407,75639,40582,300440,54722,25637,13694,48248,48278,194521,56203,52779,48783,72627,10953,376,16733,280238,26351,230789,15132,25168,137270,3588,63704,73376,94031,74284,19443,159557,9697,39901,13351,119050,15406,146455,3460,29556,75195,37673,102524,92329,47289,98413,15311,100684,56345,7116,95480,11590,7200,167,23610,58426,17730,136656,27944,53151,2701,8824,103124,3017,90744,113588,53216,79736,65940,26931,498,29568,80540,143543,21292,1740,59268,16561,180816,42323,50174,40890,52866,10703,57169,4700,17191,4424,93511,49698,166650,26972,48631,165169,82879,69326,202970,4007,2376,231325,139592,22119,62851,37504,68816,58345,67398,186643,43331,277416,53749,15746,23102,17432,4793,151138,48822,54265,48203,198688,14305,54287,2291,18018,113378,123260,7180,97549,87027,120085,2920,76080,8190,102005,5641,64580,14955,59802,54028,58884,19367,81779,412567,85957,97053,103637,78871,29364,27637,141728,4767,30686,112738,130146,42745,12730,105040,14844,232,210944,36581,152317,135543,29744,3129,55647,58149,46319,27265,17499,28005,59948,7170,34138,5702,293047,110892,408,91760,218674,18469,46095,81403,14389,4610,35672,73060,11006,74848,104820,118143,190357,20043,105358,141735,5115,27093,45924,123073,52599,29433,9616,238350,78610,24851,58858,26769,31969,24613,18294,4982,32735,39639,143563,112073,202205,12567,4873,88601,44897,81503,101648,81362,34662,85277,17574,48173,21435,221188,40215,39576,80786,26544,64668,81841,10731,37733,247986,149188,127703,495,18382,54388,72446,43071,30974,198723,89608,41360,190,33045,8386,31658,19992,237838,119015,137622,50890,100913,6460,116233,267230,26621,104129,65114,14190,41542,14888,85962,23342,23041,26453,43725,71809,45186,4770,46452,53894,56616,221286,18973,9038,109299,55365,19366,26863,18808,60909,69353,41738,83463,12100,68561,72860,3980,13796,49340,12332,31311,27418,4255,53430,18976,45523,510,14224,30477,26581,4530,3651,101663,139840,22709,150861,31996,63923,120623,262522,3076,10528,2929,14672,130238,18087,9816,121894,100308,25085,55111,14565,18952,53293,2042,369988,23674,61789,133529,28783,108293,35477,47119,36448,71049,40015,33055,78598,198442,1833,159937,40654,77444,189245,113153,8621,18599,38553,35223,166072,2375,11659,21786,89523,6032,12116,63046,159398,18454,3678,32521,47626,11411,103527,38896,42946,15696,26370,10185,8413,37080,165583,4331,63555,14907,72220,50056,6623,62236,36565,49783,10049,17503,100581,55951,146244,24724,9626,17969,25524,109300,173965,99994,101056,46459,43647,53737,277968,8347,123521,74858,33829,44762,77574,877,81377,222525,123532,30602,43881,53145,2973,16284,81940,61281,127044,63620,9875,14756,114829,19032,9202,52759,119141,23928,120551,19607,3599,33401,76821,73233,117430,39968,36539,7071,5446,121735,194059,15206,45283,6706,15603,65615,1207,165723,92275,34773,104447,8396,32353,205240,164323,13600,60555,79205,25532,22907,33410,57480,107111,69630,32137,47832,70913,33161,20321,2371,117348,10714,86246,1625,11763,17900,268,78457,99175,97940,101092,86660,32221,14041,128504,125080,53744,124263,31017,13897,403,31859,21964,5633,111630,5547,77329,17961,18241,84995,25984,12983,67491,62168,47262,5241,297,51191,7351,8967,147212,82060,16821,782,11033,82431,62957,5026,43459,77963,203477,53528,6247,191852,87774,74164,215654,13467,1522,219964,28589,244104,16242,117821,67725,72570,156792,17186,15979,26990,44128,193014,35276,57125,16212,166451,68017,6905,77608,16364,53777,75921,76426,37975,26203,269296,64099,84122,12077,38533,830,4407,20139,963,43028,38902,42911,37503,83343,85045,16979,1165,60835,137387,58380,86990,110066,134540,56331,193845,81238,17922,163093,38744,110641,12502,56404,34862,26865,125964,12965,111648,25547,7771,27196,136980,9555,29551,107158,57885,18831,37705,35505,101742,13970,102109,62548,124657,23328,11124,89592,146376,248050,6241,22033,18337,80685,29898,11908,216623,67721,106162,146610,21377,15085,91552,42041,62560,122532,125336,102365,121537,142559,29693,223919,11515,110495,18776,22494,5895,185059,103592,229351,51220,100102,37027,257855,29359,54123,36066,106493,12244,79258,32002,432,56205,94836,90182,6726,14762,29391,48938,26864,38083,60364,3310,60192,14766,205567,57504,110760,22649,24666,46333,21517,3430,13135,28873,27052,158809,11597,20529,6695,23138,22960,37137,45574,6545,305877,43423,26153,24769,59844,14501,10430,134352,56169,13213,103432,49523,35181,13435,12408,129475,64620,230854,77390,51990,15653,83248,33466,44571,117828,51481,2187,10559,68019,18021,54895,48247,18354,33737,4554,108595,37288,39767,116707,9175,3726,108877,21616,83684,49862,1938,8543,276466,20134,108498,48770,102254,31914,131520,185291,100559,51890,209,19526,76471,50544,71814,99351,8172,198526,28816,20419,9109,98389,136777,76479,75596,30635,165417,48216,120220,25955,211071,39314,24308,32164,2559,146280,43403,9233,17947,90585,1786,86920,125662,2457,64741,32152,32918,122882,78538,44001,31723,56426,23375,103172,88177,145697,52506,49319,68016,31664,41488,18486,110400,7030,28241,986,109199,19900,42147,56864,65287,49183,7858,24e3,30453,840,16673,25907,68916,89927,6309,158335,36407,199737,130464,13137,59603,201778,195292,21015,42466,179062,172561,89492,11075,180407,31868,72493,20998,60217,9865,19530,39274,130266,54539,21623,12535,13505,40641,73375,4087,85633,2153,3117,70680,55788,92096,47509,98493,37490,271936,151475,3032,16171,96642,34106,78425,125761,19591,3366,19316,54508,24183,50786,194248,91528,33253,34622,108355,41741,705,3814,3883,108929,13203,67831,10142,59754,68208,29128,84820,56880,38794,24972,48571,40821,40476,18137,164254,24064,236309,79181,11282,395,39169,2013,51587,28551,9645,701,109513,115899,113566,12762,62045,58322,103726,41343,40866,244102,143816,2490,70346,40973,52618,15412,30720,104315,38917,42027,93676,17513,107418,20706,123890,13399,97727,24044,87962,65606,44250,98044,65276,74790,101473,19350,91570,1326,87790,172042,7577,100813,86896,85891,41512,108130,27794,14875,71431,12835,156250,58135,3759,22476,42176,115873,34686,56523,73643,108505,51491,20838,12721,32863,45700,29496,13700,34294,55360,29206,155942,123812,7706,163234,203,132720,49358,144431,8130,175788,35818,3270,76832,25710,54095,97274,28779,94621,74396,19092,128242,58067,20885,14670,93255,15107,63291,23654,126900,129421,59294,262659,9798,3251,67344,28600,44629,50672,29072,26999,31526,23183,49175,165843,175455,17282,175411,32022,45989,30298,90690,78118,83156,23749,35636,31317,7069,80381,94561,133756,14960,97404,6138,41065,78041,32843,16601,34123,9559,146529,123377,96395,54441,42012,84257,123541,10745,22139,106459,11720,150883,172651,154996,110538,4728,53447,25704,2009,71152,119354,21166,66604,1429,216162,8637,122250,63520,27180,29172,36124,276428,107787,77184,4680,14952,104903,24418,14793,51561,52931,8371,26342,48526,7118,92066,67280,40653,8847,34597,105438,14198,50163,61188,146286,50315,41205,170829,161496,585,197359,95056,1687,365794,91349,48507,5804,49263,5146,104902,96365,117343,132222,46084,96919,16875,8073,262381,79982,52663,13928,16056,153908,15145,109256,132308,18763,24904,167644,13618,40750,18686,147124,114709,150038,52849,2938,12568,48617,8778,5459,44202,44591,74914,17183,248689,13878,7822,80060,23116,194037,18487,2067,7798,43077,33678,244028,31320,74273,2794,19466,8218,36280,183997,48124,19416,29656,19280,98734,7715,18311,30701,133602,150307,126956,7378,2933,79903,13178,12593,86571,26604,92446,13574,44205,65699,427599,21118,8245,14407,27877,47936,33542,7916,26460,117762,21596,37818,2249,127359,209394,60044,47677,308089,36791,154971,31417,6998,150042,174360,12255,43009,29335,48739,3912,101398,53340,2580,146939,151295,45360,125275,15273,45383,27456,48761,23314,8750,60801,85823,104759,27894,123685,66968,39480,26917,55290,83305,2696,98390,57569,145853,340733,4919,20024,52268,30884,7413,203685,70989,112855,4129,50536,349518,68205,332641,159581,135361,236026,37563,176404,64899,6578,122033,63871,1850,85234,82089,66124,74145,121098,107351,12687,36881,117334,13136,14698,85933,93866,18047,32620,310,15094,46e3,88451,23632,36645,27940,87618,80520,58892,20976,27702,140090,96075,67841,103292,238964,87778,107338,17019,83427,67522,7302,8261,47570,116787,8730,80484,61772,174422,56005,131193,52875,14588,28471,59817,9586,15720,158155,51307,109734,15196,11025,59331,3884,52626,102602,84797,25158,27314,4437,20488,76214,189248,35023,114952,157376,2827,62439,102878,129749,36405,10329,109339,108633,36662,1254,13267,5470,87105,58004,15397,10434,159667,21864,52022,179464,3013,32147,31496,116832,18494,105502,129227,107267,50033,13481,9954,24267,22141,16257,116154,36185,950,115685,11305,176708,2048,178671,112573,287867,162328,497663,95170,50979,193861,50987,30368,136257,31830,46549,15119,169876,23788,17462,249887,57377,1949,35448,14791,43769,210091,3783,34612,282103,88380,245190,5457,20491,98908,11402,86899,117916,16028,162584,60644,320177,156096,31065,55876,22e3,77655,9992,23397,13757,317623,63978,215255,2443,17648,93231,27388,104529,93807,55505,140477,12046,112040,70887,40152,94365,112353,25063,114679,266061,71248,119555,15589,2244,617,14129,211431,70110,100652,7777,4383,85911,89221,21010,120615,58357,86405,37554,41647,18,15143,69662,60491,14714,186134,148344,42347,5410,168175,44535,42449,343894,129417,99682,20659,27272,140483,63455,222159,17536,13722,42637,62324,11976,114691,148109,2283,32057,182393,4295,147364,33705,2075,44303,30274,28331,63740,69740,29148,10346,44862,33716,73937,153333,12930,38784,247159,2515,41053,20256,83368,256189,54639,115240,5096,24661,175419,153552,26516,141,138176,63885,34115,47222,55709,2765,28479,38875,236608,12229,22921,77291,54426,45388,2860,57787,114579,295139,105782,17826,71066,19119,54364,69385,16568,12323,28057,33346,34919,124763,155533,101386,31644,8627,49001,303600,29868,63213,9103,77280,71333,9696,138789,37059,24823,5057,21352,32368,114208,56803,19424,10445,58514,8661,209508,26187,171838,10460,63454,14016,122504,41328,21329,46618,32493,38225,7855,31763,7945,29876,8734,6438,24205,97490,139977,130740,47323,33195,85390,57194,13813,60600,21313,96251,7699,27584,170521,139271,1363,4402,336738,129223,84983,69150,13147,3590,163929,207225,155260,55916,20288,4503,8398,98490,11773,27512,37113,84976,86558,28365,11756,116005,182148,13733,115313,47644,67208,85069,9347,14995,226141,14704,101835,41159,35314,13113,63526,214039,29978,50446,83339,17440,129441,72522,118641,97816,24907,73844,15717,118884,167255,96509,162793,30847,36849,51297,78974,77793,10427,1873,2972,9999,35074,28190,64297,146836,46298,60038,163007,108919,61219,2403,75022,127339,4233,110389,69022,9833,128097,88016,79390,222936,22570,94657,28462,56956,38803,81536,30474,152794,19566,16481,147408,74574,81895,20731,1918,1366,76367,187321,54494,24366,21690,61696,33283,107477,77499,31112,414383,74362,18463,218441,120929,59848,258629,201924,69269,454,19989,13054,59894,3623,58908,20681,35723,78523,102680,38988,184112,108087,50944,132704,52966,21699,18860,96349,201411,82697,85395,95658,5093,6427,177894,44191,32755,26961,155739,6249,31310,81030,26574,84311,120155,86730,113535,7424,48888,13516,45747,98098,20077,183995,81945,43210,26704,40420,75831,45648,11180,6855,57927,65528,124096,34851,2598,156633,107572,127352,38169,123845,60142,62722,105584,232364,23211,68120,1601,22169,89299,747,258039,80572,7258,152249,11862,101204,8834,121434,33761,19175,133142,46343,40178,48723,3589,41977,30210,38868,62257,10087,82658,87827,90646,16415,47552,351723,28298,72225,91146,272760,1701,11295,1652,109651,300747,51863,198800,29446,11794,32345,37538,22356,33102,37590,113544,37970,11478,179743,25454,103417,59905,221970,105196,145604,7817,164809,102360,16974,75840,255333,56902,6659,1954,645,59400,67769,7689,18675,5215,13793,20536,27852,3387,29523,259718,16860,94625,43143,29245,15848,233581,22685,63631,78557,22836,133302,84513,1348,51826,47129,98836,58284,1830,1749,94642,10933,6145,12506,10975,13879,103781,144434,10268,28409,32346,52968,121567,107374,77268,23686,35097,10501,155275,15303,47136,21102,168741,55332,90385,15996,84817,681,137803,25054,142275,6163,38175,8056,124296,240642,65621,4934,178205,16101,62803,60964,18230,100622,76465,44689,14545,9543,47514,16852,93380,28048,12047,107106,37575,101485,77047,57326,34819,96137,76916,6469,46264,115983,75768,87668,69942,13027,165,8373,114231,26434,52844,42799,182044,23580,146254,38081,43236,33883,146220,382894,14606,46035,36481,166621,35417,95382,2957,59384,60428,36358,66343,75378,22267,22950,83528,17577,56474,25285,4619,179691,75355,95836,53295,34588,171410,4487,14679,84208,44015,18562,109133,54101,11531,86052,174479,303157,28095,9953,35642,14564,39802,16145,77606,117406,53038,121117,53624,22062,1212,7632,127157,237292,189087,10478,127345,102515,181997,86752,87623,10966,121602,68783,68681,83042,114380,138349,191305,67176,50085,39016,1427,42384,1412,67118,122616,72389,25260,2237,13576,137346,19938,20304,2191,68759,5373,61364,238507,75814,23931,69565,38993,131741,38364,12528,87762,5679,129853,5310,186831,32653,90338,260176,389531,108118,26843,43985,50175,30563,25106,56965,18130,140428,4542,165503,117991,24219,229605,1819,129663,1240,3797,76093,18398,71339,51919,93043,27175,47060,216257,6483,35051,1217,16512,80798,129064,13225,69339,8548,237079,72298,2575,34280,51379,117910,55671,53345,247552,29486,39328,140821,34681,57045,60177,5004,90269,78522,2479,322607,48474,61296,13057,31558,4678,59271,6699,27044,31988,35944,12503,83480,4389,136508,3781,114121,70279,4488,155829,42214,2898,68191,75695,305850,45041,74344,106509,30087,17429,93292,12477,290,23080,114802,35714,18751,26554,105424,17775,2144,2412,100610,65192,113975,52975,180272,135050,129815,76238,106483,21440,63186,4260,46189,9711,28249,4169,23429,23390,8324,141585,63809,67668,38457,38063,39226,59972,1189,203916,62368,14403,16949,61767,85801,1739,40147,35049,76757,33124,62102,15780,103593,103009,53484,22952,67973,114645,6566,5245,50462,7601,8288,3513,194571,80276,1908,54592,5124,58571,2513,6800,273997,193904,1119,17991,117245,2508,129156,82366,26278,71465,63341,56943,39662,106116,94966,156875,9736,2204,122308,94418,27134,1280,24539,49022,45314,3764,50904,46424,30699,28087,293839,9400,33646,40165,822,147499,50263,116179,29085,11863,31314,5578,17797,5104,12454,1604,15342,219206,10232,67800,94261,25872,13565,90339,78971,75377,26649,41184,47695,11514,35369,20767,14227,41953,309396,148270,147938,33074,14453,27499,109019,39018,25738,240196,158931,52820,8612,95853,21524,137010,84901,70869,70021,116794,48404,38771,6732,1070,70990,187297,49140,5238,576,3564,253975,16027,16483,2811,37775,19034,25259,4053,2e3,70083,95774,19713,33431,92703,91314,42381,288770,48194,95985,3991,77418,13406,241328,245086,56533,35275,62725,9246,51924,70181,95331,16163,31410,79016,39312,120878,119371,275987,80124,27712,9186,220,23598,146167,85209,68238,282190,57048,31273,30555,80913,17594,75779,59160,135002,101219,189377,29225,96735,60126,62522,104e3,27620,86814,17240,147533,11001,5425,43682,410,49460,87270,69480,46315,59448,1816,76201,9431,11788,87960,29063,65539,47347,11678,33846,7008,196704,9895,6753,8633,120892,59970,572824,115934,6646,202559,892,48351,37611,251282,57823,67263,57750,26527,34485,90747,7685,88370,6144,64182,1709,41969,21458,62327,181657,49247,225330,122600,114574,107124,85361,111833,63243,71420,15655,191178,72430,18063,51425,54002,12364,53225,86557,18193,97580,41232,138398,67821,128724,8944,233212,101353,52099,42127,14006,120107,32789,32132,3498,18123,33758,56058,5779,128760,59888,98869,18445,84702,51911,13234,218379,20093,39031,8074,70195,20708,23462,24355,131384,60189,26390,10403,41060,7140,10781,49410,42261,87202,82566,41663,43105,60276,2768,5733,74176,28329,2297,145430,131632,83615,122915,105441,655,224102,5284,136426,67763,16294,188511,32538,61049,27893,3394,13951,159099,28542,17930,145360,9492,190122,32285,78855,26440,13570,58648,73908,4239,124561,2444,74172,53131,11468,10794,73566,11623,35343,64710,30481,4163,10328,38309,29901,10538,154377,76132,92405,24839,11679,3465,13449,11637,7824,2337,57754,1260,14458,41118,19878,38661,13416,159180,37074,163164,54137,28627,52134,184900,8520,40385,29546,30502,22386,66527,107458,6850,24022,47983,30603,35083,8934,304066,39500,9,28261,33026,77251,9374,44833,116312,34990,29236,63563,125639,135405,165398,159055,55690,88141,69643,236964,31983,25572,20436,36746,60896,31850,16179,11828,5888,3043,66368,9750,31167,7915,53111,36430,1333,64344,93659,20061,60596,180191,51630,6792,30244,43509,101058,22409,420,44210,109783,43223,27030,72477,72831,32679,29235,7675,47556,12258,39907,149412,84926,118247,24692,71717,105038,86009,45941,41189,89453,29856,52543,30627,226798,67303,59230,67415,34408,1367,99685,16867,128419,52147,4111,125381,117881,16173,44093,102224,31575,23234,24870,83790,127407,239098,3200,994,1255,100903,242275,117266,55116,38205,16140,29662,11307,40414,208793,123355,56470,4862,75600,30119,58218,70828,24075,26974,7802,192353,4851,5475,78720,66596,3409,28573,64396,30381,30690,59859,88256,5406,99945,103064,34463,37727,24238,86643,60088,4057,23741,5967,162904,38240,28356,93858,25510,122879,6897,3278,7057,11971,4400,35461,211413,21395,59615,39471,87233,55795,128426,3051,22470,41950,14705,3974,180108,80476,78442,204996,91987,15634,67610,139015,142373,35611,51134,10387,4353,153456,57749,181039,14183,68447,151532,21107,36452,20551,3186,46247,46383,129666,88736,140662,146243,2066,8360,7978,64818,106963,17896,47801,10723,114821,223295,74192,3293,3393,16987,74064,11277,91622,4270,29828,27951,387869,103235,1374,61988,120083,477,145892,128378,11779,211263,61354,18221,17869,46530,83061,108538,157981,90608,67199,95080,49064,195814,12302,66307,10348,231346,160732,112859,63633,146558,21271,31037,198802,47622,12862,95710,3910,77850,73961,85585,34752,61e3,4082,24595,103679,71107,8208,79568,150019,16615,24961,139857,32664,197366,4559,54735,32696,4126,162019,75698,13916,70108,159638,19834,9349,24675,175560,49643,18206,52459,27992,10809,88865,401975,133172,29e3,34558,30915,3658,25834,42430,36562,125265,18182,10155,40149,97082,208980,19575,60853,90529,66545,9600,789,46420,2317,88593,55595,98980,115302,5742,169155,1073,177901,3472,11189,63711,78643,65472,50459,127979,93,42202,67053,21720,157650,11145,141378,42033,22824,85705,79114,35584,15974,1510,54172,28562,12451,104226,19190,97151,73024,20948,5151,81741,21499,29006,84183,198074,54003,45120,170125,26240,35177,28389,64863,79974,60778,176915,232183,45342,2038,80253,41564,40703,32689,5430,100689,5366,23007,134279,14266,26712,73993,24934,64242,52113,102887,61801,46415,201049,54251,62133,122757,164883,30815,139966,2319,30842,766,13362,10287,134518,86111,81665,82440,28333,43019,18963,8804,161944,23439,102144,101145,80029,39052,248708,30350,117340,11878,128467,974,138625,63961,5237,74778,61834,67040,43814,13690,65947,33809,232476,115258,181745,28824,94013,9510,10246,93722,81976,7217,114383,3493,16014,69045,72692,12145,80981,9507,6692,1620,60820,330444,35474,33962,4797,7053,295463,46445,27026,12491,77988,49524,35675,90947,29114,166705,101385,133782,32704,6186,84595,176031,185623,45966,151302,63069,1699,107491,947,15458,74452,196212,6046,10498,12163,10239,35191,243951,9277,9090,29539,54460,22820,26514,112549,60372,51753,48756,21812,70861,260326,41,44222,10441,16961,48148,138771,216194,5914,52153,53400,212036,56519,26245,10117,45888,15294,138019,90913,26368,43842,42111,23348,6082,194845,161089,156206,51546,11647,30759,302912,262094,8635,78876,26535,35283,54183,31183,85484,147873,12989,5197,6356,72894,65347,20150,27370,73787,1493,45918,12366,190217,20724,13858,10981,67449,81213,7553,14115,72242,271517,11842,48310,88743,143726,22177,3290,243231,58452,62937,12592,1654,40066,33477,13751,9921,128442,15868,7106,75236,83773,10775,36938,10482,170465,17368,17469,161508,32752,98340,800,19824,264456,3901,87319,2867,26782,9630,113102,185815,24197,44584,86366,40224,3636,140916,31731,267731,9567,53678,72984,29389,27963,17106,50282,284911,60170,8322,12608,23374,89652,5268,39044,229766,8869,151350,31436,177342,12269,183212,120418,116270,2843,78888,69192,7865,184099,1086,129897,18383,70508,20242,18508,229924,124569,35749,50589,55626,9884,83115,40971,30671,18135,14452,38861,17844,201826,5549,26413,17189,13561,38539,10679,143331,3314,36785,171194,49685,187713,67506,4618,104039,17060,195080,50648,33159,19238,67559,134840,28599,157523,17130,38064,117398,94355,31918,13575,34538,40326,13997,3494,348283,62481,26862,3603,104426,244363,153709,112487,304612,199674,41239,35545,54869,293005,28223,26277,26899,4533,18518,15492,38587,80488,70485,160395,263,60162,11382,222152,4696,250751,51921,182609,10707,48463,46243,1227,49111,111564,46502,33342,56846,68541,63559,858,139927,16654,229375,76759,26478,33205,95828,23399,92945,2637,35630,28470,143992,50214,14174,21456,166191,65665,1711,21594,78019,97599,111701,36,147151,110246,189022,43021,30397,40757,131935,42065,73335,48039,26596,28984,15102,2361,7421,202167,69744,43766,52826,3642,83304,33873,75140,63169,192389,36551,92748,13039,123959,233220,21738,84447,77230,20228,187852,19095,25799,92136,108774,29237,53947,2299,118106,2687,8830,42331,202924,33667,2023,73763,30704,19363,19779,16737,35629,48081,24068,101013,162338,291912,13749,24745,328289,167679,70086,48299,23306,16732,17801,43322,54589,3586,63653,43624,53474,925,109177,251316,43805,13082,19511,86565,142182,92461,17117,101033,103319,64589,4022,4351,235897,5352,82705,107142,46391,156084,5860,61365,10558,13045,7717,18357,33922,12590,33065,6928,46993,783,46937,67846,8952,26295,6107,119656,18799,17458,50747,4229,179559,112727,118080,20683,41464,125468,51560,49749,44231,7359,35339,62988,136487,67015,5208,29150,24956,105186,48858,6143,18097,6972,16404,73489,58742,97196,36357,164616,5834,32267,13746,147733,15113,132091,34127,106298,39729,106426,22294,9780,15602,36213,71502,42808,66802,599,60755,5851,39120,67363,108623,126368,72770,91263,32486,30596,151717,7951,52002,43103,11768,68942,40901,39344,24037,127500,116890,48403,16926,86750,17745,48648,159545,34460,58419,5634,114317,67865,31462,23352,24010,98185,125708,69686,68337,13610,26271,70691,2980,4768,27225,102402,75453,28106,8104,6931,1176,6274,6475,112635,22498,6176,238686,26832,28893,90319,14441,15682,15087,39517,45270,109134,104440,45965,47645,81772,7876,52683,87720,12898,4505,185665,2769,113401,15664,57592,105229,137381,97059,119268,6876,43309,33886,128363,35476,144249,67013,143587,83367,25703,91436,59347,53236,2289,16519,19844,46309,58558,99834,23313,218816,231303,36388,51333,183535,109792,139277,54306,90139,18235,8275,32710,37677,82464,86025,92204,88842,117723,37570,128723,234242,76350,73795,34896,148247,58424,11105,11744,45746,63372,17118,49772,199520,81902,38004,22911,33752,3125,1995,53792,4689,26909,108150,146062,69674,41811,161444,84855,8999,28561,16731,93937,3189,21967,24890,22943,1356,145300,51569,28802,517,118679,31703,40607,48098,108854,25003,10233,73969,177495,5248,24516,215347,146192,48712,60626,69188,40735,5866,586,101541,6509,47590,52129,5969,222045,110933,25733,24223,65339,62812,2414,155418,35819,16022,78423,43138,20995,128255,240673,46745,236093,72176,57085,97841,61248,107,36068,193177,105427,55726,215229,20446,47228,100420,87091,14429,121708,23605,21157,187721,21880,2997,203976,99166,95068,25877,7724,98925,83401,4829,13182,18229,13718,239662,38653,116505,153497,30589,89029,38962,181302,43853,78872,180301,4786,248240,7401,106136,112590,77745,19731,60880,77789,125748,135487,5975,48627,34084,12419,215770,47557,254582,10364,106495,21856,67539,88981,38805,21428,48732,42316,12149,16078,52808,25327,51322,33850,51147,12253,122354,46077,56483,254553,115417,81834,150991,94662,86668,7381,12841,100650,18218,15741,22372,68294,50705,15535,84660,61887,22553,72299,31361,24824,17743,46820,64288,31582,77006,111674,116384,30760,80920,86149,77192,51979,79691,60342,122805,103800,240873,160744,233114,78962,54920,8608,3484,316104,72548,24337,5088,230040,21926,10172,36838,26,86221,83458,102176,12062,17571,41929,41170,28428,68239,41750,103930,2634,18313,53019,34825,97837,63115,24606,73157,152474,14715,91439,37033,109806,140259,30668,174760,380,135597,95673,136073,65073,134249,13829,17279,122305,4420,46444,10237,64848,203623,70728,10349,182885,65075,24519,25783,40318,34139,22222,63394,55266,102764,41422,20126,65100,90408,53640,35128,48932,11192,38935,96839,34782,39492,19396,41332,6250,5511,19492,51304,25936,104466,54099,73771,86115,5080,7669,30891,111700,13931,25276,72289,135447,14820,258641,25265,31005,281179,75286,393,95359,14623,13584,6680,101227,80173,44933,76666,54542,13244,39348,458,25379,109451,134348,81143,6959,65554,12027,51311,8716,57589,140731,28467,23316,17272,30458,25980,55229,77197,83798,28302,114784,7428,34548,26241,14712,39336,103304,18928,54080,12870,334,87722,15208,16895,142098,114262,39820,83913,57817,28682,7721,14900,108672,11250,62246,42849,415188,1724,26555,24549,25505,26443,107450,145899,61035,43528,6901,60726,65906,267741,21338,147590,42079,18924,73017,135236,15393,5206,4026,84185,1531,5988,113890,82647,303391,7386,69844,71611,189865,76523,31877,13315,19314,198575,32821,1928,67641,25913,104475,103489,3297,70391,18406,15446,113347,19295,93790,27856,1792,167471,116449,8541,4408,41757,63233,25765,86680,64501,27034,24816,34975,6079,4486,49693,36229,16917,21581,62426,27862,11612,54284,35702,194034,355,24277,48262,87411,70504,310164,118018,12516,47559,43502,57433,107139,9290,66533,80863,14634,34312,91725,28606,21342,67241,72355,43244,375789,37402,174015,105070,8342,44167,67494,1890,16365,11723,271002,1865,47918,8350,45564,27742,25110,125803,8553,49504,81925,62211,4534,15491,19011,80373,206920,667,102405,128623,245524,5553,113309,192739,65766,19567,22832,261958,29679,21293,71134,20962,105123,24721,860,21752,33448,18372,157167,94822,35770,173224,232737,75729,28937,46828,28062,25453,5207,140366,36665,30652,6169,67920,150458,92040,23186,184604,92330,20891,176492,49427,27828,38305,42495,143982,49560,25503,90043,29747,65328,47830,12932,11068,77721,9003,25213,94205,140426,46090,89945,138173,192691,33329,112232,129905,35709,27514,1841,19957,31411,127476,53572,17497,173549,55063,175135,19841,69314,5192,237921,117660,150697,4060,273045,50414,98940,65348,153665,164423,58804,156695,48994,213928,86036,28608,8355,39574,34540,16927,135680,18374,151587,10830,53805,16878,16623,4282,48030,8537,14986,46102,13062,72897,72,33050,108227,39451,45935,651,113320,40535,95176,57450,48843,5003,19019,10407,211163,3848,1068,4988,32091,30095,41692,15099,43602,107434,50744,7627,171349,16313,150832,352665,207750,33937,38256,51091,156e3,87889,90663,84175,24908,114900,50365,31494,83829,5398,169342,47521,54818,18935,8356,43094,41212,174536,10082,92550,6678,60614,23355,69721,14796,34149,128830,58187,3179,208,40325,28399,225029,401412,51150,31580,207268,6657,10993,69818,64282,289845,23308,12961,38447,6681,52944,31855,2572,47646,120728,179148,37240,45196,218274,4816,3695,21961,50084,35209,18073,51452,27004,6100,33941,1377,84831,171214,85,141510,9078,99227,32610,6417,11718,49868,65579,87902,73018,49062,46280,61742,21512,40862,107733,15941,29168,157765,144919,14487,5767,158014,140070,7241,573,71584,16921,223566,40331,179473,35081,47926,140885,41508,52104,59180,42310,32811,29048,123517,102413,80208,10104,14746,12649,153641,126022,37965,113017,4171,83,142592,2809,6362,50416,71323,116894,260776,16204,1524,5760,30351,12658,20703,54403,36083,45408,74772,4946,14485,50759,111222,10890,2195,167147,92962,130534,16283,177256,35016,15472,210156,151187,73922,117691,43250,52051,37392,24811,24358,30830,5775,818,21969,1476,127322,151783,58392,31021,106913,65215,89407,90802,28531,11690,20234,95249,44602,37256,18707,11928,5161,4410,26571,51903,49768,22008,25252,65780,209499,68769,203726,13249,137363,48845,86823,6658,5674,31881,1083,1823,108676,34518,166752,13791,14287,91576,91429,8665,11529,26401,16191,91972,30964,5254,28486,54697,79613,66520,18447,22870,45203,194466,22822,51703,12278,76716,44595,73455,33546,12235,144843,36154,51247,11116,33040,3180,225753,60864,1972,28469,12891,28879,10338,144157,56294,353058,38302,41447,87532,110616,27065,168438,6557,1213,50804,144643,24817,2390,136531,38174,247513,16190,4059,122791,131994,137430,39506,57650,16305,5188,54309,106128,20628,88071,67394,395446,250285,66176,91254,1399,114196,43915,60230,44853,27206,106353,43013,18733,345105,226453,51202,16607,57106,117175,35492,10476,89598,127439,15187,39624,13688,61570,10615,31111,59370,6238,175252,32143,224492,41388,95408,34384,148238,78307,38959,9340,160091,61443,15737,11216,41244,170,38299,102443,113097,26382,14027,33707,3957,76300,66160,19431,18900,6952,1717,108656,82206,188021,257335,27295,43999,41210,31777,46956,57457,12657,11489,15697,48060,204748,53583,82422,284790,30503,137341,8120,19615,220311,15991,10217,63424,9808,67431,70976,98221,4491,15177,28535,144789,751,13230,2394,1504,33977,132104,30316,22230,931,97193,185240,24826,22687,174322,15307,22988,1390,188745,180325,29580,59068,74903,18994,29195,79,15436,7622,38462,11566,138710,44828,45774,37768,99236,68137,84083,19282,22698,17134,74807,126662,173497,46248,16938,119735,3212,28292,213652,49013,9975,32180,45660,86250,4801,68788,95490,77482,113751,11994,44624,94452,46839,128497,100316,5798,58588,73184,202987,65417,37790,88524,1606,43156,97964,105717,34947,11203,100060,37742,130074,93653,107799,94311,196106,41347,8035,10780,16390,27883,118236,167395,1979,25006,19375,31628,18916,144723,78502,114047,103107,86492,107686,5844,20934,206963,23556,22591,16562,146333,20167,10471,117434,33085,2863,9740,36669,41849,37271,22790,18209,28979,8231,12952,54408,21731,25130,45208,55748,138120,75826,414,29593,9925,292865,25999,683,123149,7036,92159,86055,61827,103680,23176,54918,58466,57578,13305,5709,86479,16697,31064,17660,200919,10770,49793,33423,32370,52047,16488,62555,6459,8426,83493,7763,59725,82812,18628,67760,79405,68557,9612,7673,28102,56517,69620,171797,32458,29541,15870,81109,32080,207644,71495,21202,11039,91036,61230,2810,130800,32260,4613,60590,37112,75214,33979,126402,155062,30642,63875,12810,194463,82799,47664,16725,36685,43367,61099,449,172150,102867,21691,301838,36745,7130,18671,57316,34852,38034,54182,35578,65900,99486,19771,3456,2658,16914,99866,28390,28109,8262,21147,34353,20006,4228,137085,1675,203023,283196,198286,214375,163329,290603,152574,40471,83506,30068,14730,23177,131539,34759,27668,32178,71896,104799,116305,85430,119262,42860,25160,8911,23428,49437,105322,6519,16203,6349,74711,1230,38045,8540,75165,44736,25909,51026,317034,4984,32281,91312,27060,44431,17817,45363,155937,239085,35697,59784,91993,29531,126740,213757,76560,167776,285273,24262,8237,65030,41160,74437,48804,118916,13159,37842,1031,75349,1478,11655,108777,23435,277425,101734,67469,70231,124711,43532,28514,65526,54956,1e3,21882,17728,25302,40952,52214,149632,1999,2111,3259,63362,89961,220561,39777,26335,9063,10572,12416,34551,34623,38604,24723,5947,15588,69927,66252,119177,69173,46629,28714,70715,212408,20521,406913,74380,11716,50659,50862,37009,88460,130101,7210,53853,538,65120,151950,55806,163748,52837,13153,21100,16674,64536,6091,138201,44837,58547,3723,163,2177,32288,85454,34033,8497,14282,25742,10535,10741,79559,117493,243787,49337,100718,79495,40139,42956,7551,55433,15421,31509,23034,45081,547,61176,53434,328001,8470,36263,30145,4519,74173,53935,11845,73774,60211,78025,3,4102,73782,109293,315332,48412,26683,13714,6865,20128,18490,104141,325,39470,171970,115860,15707,7268,73301,74336,31370,2368,111827,107757,136231,142844,97138,96638,84053,38691,23801,1588,10573,122098,77039,240,186135,146101,11996,18143,112963,46171,155836,348769,47795,121213,116266,132515,3344,144804,31286,99187,255838,129694,35894,48779,55235,148582,71967,65282,15174,13920,47080,6147,108242,157593,125025,7136,1286,28957,127956,28402,98813,20805,7532,109417,40610,5041,32958,15142,18408,108596,33543,50517,27748,80114,233434,91447,487,37094,100048,30541,43477,10639,89862,155868,37667,8726,60684,237903,73408,99589,12190,38739,97348,3914,13594,2680,149016,13907,30171,28343,23530,115225,61104,35821,147679,14337,4297,244282,24085,326976,56428,7851,21303,131620,71446,83253,68692,111870,5224,15813,38197,49026,45057,13660,3306,76345,40671,27905,91072,996,68527,62085,91351,122634,55109,168209,2024,27560,112707,17352,8306,167115,169921,166958,5031,46020,11844,67284,19130,76185,6920,32849,5450,14610,22451,21002,17392,31872,66682,84796,13709,40210,59898,12029,8719,53564,21462,91884,21647,88379,194428,12754,37797,132826,160016,22567,54383,53186,77611,31107,8339,4694,19185,90355,23597,17222,140675,28442,23668,55977,9128,61555,28774,155229,17658,9390,24379,69357,15752,127381,239631,62460,93181,55913,45133,140155,18676,25249,33164,29581,82837,67223,22362,29975,7317,52813,1943,29613,20012,207130,49617,49651,5636,15334,36313,29226,28084,95247,72072,19e3,224932,15811,114,32127,38097,37508,88507,37225,27359,91626,12193,69279,20608,11055,88156,92808,2152,57259,55275,72789,24475,104414,1708,9882,3818,48661,66897,1631,34806,227930,85815,87753,18321,250664,72733,25107,206797,50891,8082,196411,92596,96764,152823,65514,22819,387277,62176,51225,40329,15563,189,3659,73670,64357,51793,275136,33482,86653,74615,67058,11318,125720,15388,22388,8267,1730,102663,170910,40784,7144,85373,13040,7088,94309,583,44224,140424,77439,18496,164026,36578,4722,9151,5824,63365,26510,35199,40500,79277,32495,44614,35233,9566,203293,152144,7097,2330,183480,98629,13423,330887,44130,68600,30939,97829,31012,345465,56747,94879,4939,160027,149761,99423,46099,32251,15332,8761,96094,128555,5763,235318,222223,55729,30241,55420,201746,3987,81382,8259,49325,23287,7719,24633,251100,92311,18591,110533,64759,170260,393860,7175,21144,132887,3593,75346,101277,91109,16387,259187,11627,57459,173829,44694,55780,49797,89192,120443,62622,3904,14814,23887,1027,112258,64955,99800,11132,66353,36202,48624,18158,88481,96882,43059,11040,2455,7077,21651,181159,99126,100434,61388,68186,19161,110468,120052,8819,55324,41494,7014,37689,3618,87729,92615,207943,9823,128657,12587,15857,6379,67628,51216,71775,157617,63244,1503,3864,218754,110864,5769,21492,7243,1192,87921,85529,31512,18537,42698,35350,73510,84474,34301,8991,21013,35034,566,38832,19838,35586,37216,39413,55006,12178,59742,856,84563,6900,25632,17437,49786,30723,13847,70845,4044,7843,23944,235976,55530,48942,6518,20939,73769,192653,52936,95207,23895,132542,142982,22632,87452,48042,54018,178468,10728,26230,23559,363,81269,142012,5718,346258,31456,84333,246476,51018,66692,101804,120570,39962,30373,70593,2864,60541,19425,54209,104092,7201,31545,48018,25865,15442,46257,40443,8328,6451,111782,47527,97754,33046,470,245116,31095,39,91934,87208,73470,36708,36521,12801,70624,36272,8892,79768,12427,55454,103756,5908,52390,62962,22720,141138,94634,41689,128402,126390,6628,106394,35527,134394,82727,254651,194502,148064,89549,3202,28359,957,21954,27906,49840,142747,8307,24206,48978,1186,71728,133038,71474,91306,6333,110959,74600,70387,18983,62609,56057,22970,1147,135850,1321,28834,3578,59715,102227,32827,81415,99952,55636,257598,390,22702,35701,85872,402916,39216,189795,14929,19467,10112,144422,61514,5279,63421,134686,41436,8424,51925,10598,132295,124416,4604,194739,210929,57866,31829,51626,50007,9976,91878,61906,56168,81906,60918,61859,40017,23059,16887,40927,62064,12785,32893,32913,21782,93965,20169,44387,79084,38463,11457,93950,27127,157050,2697,337088,5116,54128,48255,33279,8821,27352,25515,124022,65710,28906,38557,33390,1722,104435,72215,38551,12094,30978,25113,6671,37355,175109,42862,98024,65406,221276,59624,118012,64637,78760,86697,21426,1639,40350,12584,67193,84144,31396,7863,143011,69629,63112,9454,28666,65798,46372,134721,6314,51402,30837,151922,2847,38676,38008,92823,136245,17540,5504,109295,205242,37606,5211,214892,1586,20670,208711,137743,19328,40652,16995,20023,14657,154919,34422,12996,13918,38221,47690,16398,2959,37680,89122,6721,198469,91876,172043,83898,101992,26084,94570,3635,76958,22853,76497,38266,176590,168403,44464,142840,79180,184594,1984,41806,83147,11985,6546,366068,59732,24533,271505,8736,39084,222992,93429,28962,58985,86665,8432,30028,14548,32439,54424,165029,55175,27458,69046,121277,46168,33732,20661,24581,135574,123110,37556,79260,72611,16957,12939,46162,58238,44907,72936,253758,41324,32518,96480,11949,124438,65280,43256,34107,53533,43531,37037,28366,45970,32741,173438,6121,194202,62969,26355,30314,58370,28455,1848,50519,82830,90393,21761,295490,10936,256940,133568,44050,20269,4089,27457,21610,219460,36743,14821,101388,52005,13124,30979,140816,167362,26054,18458,60789,34917,40447,26606,33422,9066,3452,83614,5761,20263,137238,25038,91310,101,52322,74548,42572,38084,214054,186568,31802,17665,30620,141936,37730,14420,4265,187218,49640,188208,51441,55388,96452,66659,40869,42039,60967,221027,19234,178581,29105,96050,9165,196118,157335,3738,40354,117436,2965,34136,59659,15570,50843,230035,31444,71260,43886,18316,5387,38500,168508,17406,32174,8828,103373,143806,90367,3560,18719,122310,16508,26719,2541,105429,6645,37998,73190,10591,235916,49737,87112,233941,53188,32193,79154,4544,52905,126477,7580,63501,57314,3216,31337,6541,103083,60846,49,9756,15481,1355,43840,14319,13743,27486,10222,73114,230718,418644,16706,6674,279748,23058,45273,295831,86306,2743,5535,88773,21829,35253,120938,31153,3169,16839,42847,8751,80974,33942,36867,35514,16485,26474,77775,56877,5391,48346,3882,108713,31403,27804,55248,26235,43821,136104,40118,175507,28034,203908,18732,1788,34030,106427,36958,54359,7251,44936,15356,69139,455,157915,22173,140291,50348,43275,82066,49621,54952,15216,36226,96695,66855,6936,1987,8227,196087,4631,68827,99004,47541,110265,17953,147605,110242,58520,31312,38724,329975,642,3155,34497,75937,6207,73843,6120,17249,51429,117746,3218,910,68961,319671,14938,29555,34700,1649,66673,72268,9655,76800,153087,6941,210168,27130,35398,1780,73242,3135,56689,19556,165307,8765,35967,121458,13333,70453,17350,117253,22265,13340,44265,39869,441,3742,135025,23581,33309,16543,17731,13291,157637,283005,21408,101360,63887,52312,83873,5338,233779,23759,186949,34531,177320,38069,156465,91004,19353,59852,68160,14891,1338,1072,29823,1950,28901,81407,313445,73038,84807,162348,240257,37162,138934,16111,58013,41253,102951,16457,96056,19541,56402,67217,41638,94381,89674,29481,37456,80815,151579,13937,13683,132537,19699,134545,67020,29816,222341,141235,427578,48868,129557,233342,23077,87871,16213,18728,16184,9469,37913,19680,2798,171356,178328,13216,50049,72690,71904,124644,55455,7504,29052,41036,266546,19899,30391,188755,8659,59469,16,104298,112943,53865,76203,138226,68857,139953,14125,107625,119795,173133,4398,50273,48808,54390,16466,122086,31835,67035,50971,48859,7508,46427,66477,73021,84615,39985,83076,46779,201569,53336,36443,60865,168164,143810,51393,25548,169307,32896,24485,38424,21837,29087,275813,51674,6714,64883,46169,187369,55186,76192,12852,12018,62134,31067,118303,16542,12125,10579,4928,26291,43854,7091,10946,253716,109062,39283,17261,113012,258512,47764,125126,32646,55892,80279,201623,149872,3192,385,1208,48750,5376,58738,22335,5427,82416,47811,32435,143086,38930,94128,59975,156037,37977,38224,62485,7698,50405,71027,16462,21559,136153,34131,107506,162069,63703,3101,215029,40407,4178,3774,9187,80019,17880,97926,67579,2600,18405,8351,47924,86638,70820,92206,86453,29610,42241,119200,3198,15466,67813,57863,35454,4779,99518,4649,104641,144269,33730,38073,65864,6838,109456,193298,154007,5623,45741,30846,182578,25573,157224,1543,58575,138703,146140,44971,49356,18275,59064,20300,13122,11848,24453,11973,9797,86843,2919,25530,49210,1130,161220,76788,75373,85604,34926,36014,17777,17255,51533,11676,92226,51845,119859,21525,5936,18507,28050,1140,31418,14857,34207,47859,10750,36382,32079,106909,59426,87757,38393,110042,15965,97104,33757,35344,97993,53979,33651,45407,41884,82515,173089,7177,58371,35365,47543,51927,35587,10670,23544,29306,84233,39976,76076,62097,9007,8668,28119,78281,120790,19835,143020,54968,18670,64959,20649,34469,42570,33001,136570,87796,120044,1106,58700,63951,127623,12805,83057,40212,31773,49850,7361,54336,347524,101314,23751,19569,48791,29174,49369,20467,7465,75842,38281,623,112457,60210,28849,51003,94720,6426,90047,85560,43761,3579,85105,34607,90410,118528,7224,42907,111163,18168,6960,161135,191298,5247,100584,127552,171568,20121,91173,12636,54615,20199,63730,98105,2396,40387,14438,125012,4765,33235,12865,45299,37728,82098,77872,114037,59253,19675,24838,398016,102561,11446,17069,57508,178277,65836,99941,26114,2585,271882,136866,50126,11027,155648,118367,14585,8910,123015,335383,40434,41016,53021,14439,87098,176860,201543,121888,2358,9286,5739,22666,54270,37884,169381,33984,93859,16124,89364,72207,51639,76366,99029,65812,2198,12147,174891,194289,6986,30252,88822,21284,11445,288337,160821,33034,100869,43852,25761,52882,1144,103809,1924,84458,86079,43411,13542,139276,18141,34978,41298,7276,26481,173800,33210,17951,142652,33616,33677,2210,19941,98568,2486,192414,80136,12058,235883,50963,249638,29572,27221,47034,6124,72107,63346,97620,158513,299699,40388,23235,37176,224244,198386,121323,67992,23827,63170,17838,106622,158590,26807,5345,23489,91891,55474,74834,37981,13058,5977,72552,34706,26828,145172,19904,21367,34043,960,77092,91381,4733,47446,7680,41697,5170,16960,14741,46101,13656,473,51842,37433,11103,11551,121951,13191,97536,165932,50397,51628,129028,9069,44885,6590,59195,47045,32940,225472,90345,21833,13303,29407,96615,141951,5198,6028,18395,7181,3861,14966,156358,167182,36529,55253,25942,173153,30959,27261,50691,150176,162201,38467,48462,80602,42163,118482,168,108756,26011,17166,54149,456538,22512,91374,13816,90358,131615,18132,226707,1824,28139,26860,42253,93877,77351,65575,8980,80574,22020,27948,40422,91324,76376,13528,39281,91685,82215,122541,144066,1983,193851,17283,26320,2739,194978,4790,26845,42627,61300,65815,174612,55133,4200,191130,79771,158321,52280,166796,221620,62461,11278,4067,88152,83409,31717,121367,13522,47325,37945,10406,174348,249321,154101,64912,29938,51775,17220,15776,166138,78890,84425,54121,42861,16368,24572,291647,10197,32073,22651,11677,97509,26952,35787,18424,41910,71614,94977,72318,41594,70024,275419,37702,60199,7335,39107,61315,18271,18394,33768,87884,104277,123724,7277,56288,71981,189803,49320,3352,6798,14240,8954,69220,94433,57372,28620,68863,193727,85575,42309,41667,67689,42081,22543,44824,12719,28540,114236,101553,27638,27296,4300,5353,4663,19379,94098,3758,95888,95144,80344,87320,28447,259518,12718,71391,152731,37063,24132,31911,104896,15672,103782,1521,4945,72541,23717,122632,15619,87175,206120,29428,189780,61416,28350,44457,972,1175,47233,198738,95789,41907,21953,97034,59341,22864,53713,16873,32971,20693,20954,31336,21477,16169,38370,16412,9019,3841,24599,21938,17085,6484,81198,76413,5849,72514,12320,65247,276175,37234,59796,52642,16312,57349,198507,94148,46134,18958,125552,1747,18725,151873,14901,5490,68287,29470,3689,64794,40814,26018,25692,54450,2703,88278,124886,173087,174e3,24159,179477,24276,46004,201876,209202,445,52876,31948,30206,157610,39180,18439,44124,50469,5774,96278,222758,200216,50290,45486,20435,46986,46276,140133,142326,15569,13363,47522,92583,2182,7135,16853,22998,30272,4952,63263,35623,39096,53789,44864,20053,110392,124213,4630,16087,28221,127787,25839,77481,44693,13464,113146,6983,27069,55717,50102,4760,7107,26186,66507,59145,36032,104182,71328,29425,64317,50781,47465,94298,69706,74899,22754,120756,25108,93077,56834,73286,39928,16218,41699,176763,7555,70819,50083,26895,23315,26014,16773,123079,41712,5719,31516,90427,158540,85051,183128,40864,27505,55392,9058,45224,96857,30901,136622,96557,56304,120061,11501,151448,5773,89743,7769,86069,2935,18471,41628,10114,33660,110170,49479,26745,92846,33221,26731,18795,87076,8550,2100,29972,120289,3077,72490,33784,2630,208722,50861,63483,79029,6419,39467,14302,45286,64207,9686,67513,44170,1050,77246,59266,17055,53801,7150,11111,42432,4278,94579,362117,36175,42902,41933,39002,98489,22913,74161,84773,57036,17556,162288,74485,178760,93867,73635,128860,50362,261,67455,80001,46080,35662,4368,25247,19230,74393,22588,1822,27682,235324,13798,85998,13194,235067,23514,71669,147632,23191,134748,214683,105101,1518,25489,247114,7380,54842,26922,3971,26361,20844,68642,170517,77339,123255,8963,77818,150998,48466,36806,2732,23261,11741,236162,18243,126216,28690,50546,16385,92760,197383,246558,201295,88255,67588,71687,176076,172653,169058,33906,63747,24835,157621,43338,30050,46152,132741,2770,51371,94835,6614,15112,11749,56936,1250,19027,399017,58036,100215,23388,55815,308768,124152,94803,9521,64186,8971,28,30427,62163,7616,103838,35079,29203,131235,7743,17389,10882,37420,61460,228512,85363,41581,131077,62822,119647,10130,54445,26925,19968,29016,24446,74028,24176,61448,67185,9254,8563,119129,9771,99184,37716,39514,10532,221512,258753,218630,55980,23394,32141,61924,66749,32411,3741,36475,26678,77010,44946,91203,128749,116953,20476,49625,53116,13735,102335,29376,51946,83407,67892,59212,34685,21083,1546,112982,32972,74397,1078,190545,16082,86140,58591,89611,101531,10061,105104,76319,20035,17551,52611,169061,190842,100780,23907,90413,115619,9675,34710,193435,49443,129734,11183,258877,16318,136182,126808,44635,27304,192375,2599,125648,47051,12091,23814,721,58800,40137,66726,97930,60877,74487,7942,54326,9841,41428,13762,8211,85383,6950,99177,79806,201786,296464,124087,13144,29741,41721,47634,55088,254286,106408,17041,99064,12942,64086,45233,14005,2612,55827,255,7984,13980,38574,12776,46654,73499,249951,2101,26676,25996,132326,116415,119062,50449,31033,23038,11589,179252,20007,14860,129270,21143,17796,144715,60106,70758,69842,34674,282133,44014,16774,57268,38528,24053,46373,201667,28327,471023,51889,102667,21193,114909,84132,69317,96723,67969,16134,68145,15058,28765,32035,2524,101089,98664,25045,76571,14957,86040,118506,262428,154764,81573,39681,283900,73287,127825,544,80448,52347,38512,175971,15180,45467,33086,46552,48894,81107,43213,36672,54025,76703,8053,7608,13299,56619,20752,238099,54164,105133,1444,32942,953,37564,8e3,66316,119463,106817,404,13667,149108,128597,31267,10269,49836,106150,1484,52330,76965,160486,171648,38456,31263,22424,37738,66245,67467,143369,60471,75610,20895,115528,86070,60854,40796,49347,18989,15030,11371,37578,15779,79867,10187,86462,46402,155626,93200,40229,7090,57547,108053,99598,11088,47505,41218,206017,2173,20988,30219,22919,80563,57566,42369,93141,41675,2407,182519,120495,27154,16702,29456,14349,7958,16688,117177,140375,42467,261919,74916,153569,10836,34742,49526,7621,105997,12212,2270,392377,7755,17959,25086,232152,138791,33847,13860,35316,5811,1344,71259,50452,207539,92635,50359,5821,33674,30255,2086,2587,96264,17543,42,6029,9580,43007,139248,82831,12917,29607,25786,51467,42137,85161,100698,31561,88989,121990,278500,3602,109344,37982,15279,116442,28936,30880,87894,58079,128661,126731,67392,28051,146885,4861,16216,97344,42827,147561,153948,22684,21335,47685,1853,43349,15185,59642,10229,25520,187921,108972,5579,98037,24945,6697,19193,63734,137934,75056,89740,19767,224268,56138,63643,151661,39313,70618,84031,89723,84074,13703,85626,35460,8867,64845,3439,57906,99776,63968,49270,81130,34356,16210,23547,36446,34090,140028,72439,2221,22163,57058,363492,113754,18913,95451,48663,54464,54037,176097,68425,3023,34906,29482,117389,341780,80431,58330,16753,92616,60907,94846,147486,4498,48646,7773,46801,7778,18946,464978,47558,33223,177444,7328,15626,63337,94700,11743,9351,255024,39098,16447,42647,96230,39769,58840,10068,63439,35800,65843,58823,413844,9156,51258,7434,61791,85018,6872,3692,28096,7121,33024,6009,75532,31997,192535,9661,3304,9547,14753,31987,25314,55689,15896,20430,39472,31340,99744,25398,115569,54883,28719,205423,23071,57855,64638,149867,25671,82403,37616,20668,39989,77996,74948,140555,175248,64810,36515,46595,4958,248773,24045,28728,136673,168704,20804,114833,100325,27135,21205,96151,153134,45992,7093,13992,76047,1980,19432,145001,75159,87462,17710,1013,45556,34297,144882,20648,26061,11319,129567,108555,18872,464580,33386,22717,65948,167189,5603,135042,79542,8801,202632,18114,91882,5973,5239,67315,4431,60916,47819,71693,32597,32606,18183,45072,80329,76385,24749,51305,40314,156514,14693,130345,13168,66214,18029,12858,34801,27628,14544,10823,40522,40185,33739,148694,23548,9923,61012,28859,17933,19442,34364,99849,164107,141167,30629,21054,6744,36491,8096,42474,41706,155060,30650,10600,163442,1143,96655,61390,52359,7559,51568,64256,203854,4467,22453,14504,436398,7878,6980,8293,63610,293747,16167,35763,19627,147603,15419,18032,110744,51346,33681,54571,40472,48615,39073,21604,13754,173027,92560,11083,47299,63062,11813,52007,29883,9734,139722,15953,1550,20651,13616,49306,16113,90089,92326,7584,30712,72424,164858,6831,152871,55746,197721,34167,196442,6022,112107,55215,7538,123381,4920,43539,77165,8939,50392,34192,20225,79762,22505,58667,40770,29788,97180,82835,4568,8579,13273,363569,35898,49983,436,36598,3237,131691,62418,35591,8101,4073,379438,65218,76072,33887,2968,27573,212619,288680,68278,72851,150504,217896,6913,121339,22017,35340,51072,43616,75043,31437,10833,81487,4364,22968,41454,106687,85446,19863,109625,149241,524,141850,214404,54376,657,237023,9401,108137,53800,32474,49712,53334,126876,27337,45552,177696,8269,15036,12097,42240,2328,125374,119295,99715,2500,19624,39441,27220,102691,60957,94543,39101,18566,67362,13975,78230,25017,34017,239007,90027,39351,41681,35354,43822,1043,916,58587,141983,94818,38799,75459,41114,67432,16195,36606,59568,22272,126769,31424,68659,12287,134302,257977,5756,207285,95637,47248,117689,19583,77451,22373,12200,54993,117118,34244,29386,34562,53819,71267,64172,77665,49368,7716,59301,25749,45426,194789,17297,2650,1766,32501,45198,20403,20984,6600,14171,94604,19037,5402,29896,9938,59935,109708,88081,145182,44844,39167,352626,164173,35374,45982,6122,154,73419,220487,53834,53601,17992,8609,229321,5610,68098,66815,71012,95069,140968,27396,8957,134489,24656,86659,56598,134852,17316,123838,255436,6613,41610,138033,81452,32023,32396,123687,63398,8693,29712,30407,19296,121188,3551,36099,20032,111948,56624,16547,27453,35916,15378,52039,56849,13489,22214,73177,53097,277349,2157,14029,187886,10260,141743,246460,91880,50869,3788,49486,133566,54950,33120,129337,53768,18333,9525,26902,312251,10297,9020,70759,16647,112432,59260,84609,9818,82766,73569,468,46001,75780,55028,52106,11498,43645,108069,17150,17753,29417,16705,31799,9606,289,122254,115975,8620,6133,255357,56908,14456,133464,43554,79224,11247,29630,160,12756,25464,65960,350428,62521,321796,100359,67358,35169,46172,113128,48988,88868,31094,33266,6847,60887,98188,49659,69117,92977,220228,13947,80181,35103,62170,97351,13475,2440,199768,19498,36597,46971,25234,67806,62881,84717,73648,181966,10488,94149,21550,26655,63436,48375,14405,165650,9621,24439,28043,42735,4490,29963,56674,45373,1934,262446,50855,67098,26898,5261,52696,40644,33900,9440,180286,87162,22940,19704,26936,69769,10254,101759,27406,12243,48e3,73926,113215,54935,5726,192787,4312,106216,9366,11550,52949,23457,212271,277152,133895,108374,6191,96477,29980,218916,58024,54696,40853,91124,65894,91170,65908,252552,6793,29212,15389,44516,122515,52617,35058,9017,103536,39510,49136,19242,130652,662077,74699,47024,31422,8517,73351,24399,13867,128360,4810,4434,61779,111983,61036,17798,110240,59722,102960,39688,10001,23803,23039,176498,56659,44814,134295,17188,77577,74466,226175,102472,154333,63900,111747,18062,41171,79669,32773,408933,42562,28931,30907,107388,43487,2946,240310,23938,24354,319,184983,7927,6488,1422,10790,68809,68209,64775,4361,202,17123,59634,51200,44391,18188,17843,2619,74278,3230,9540,47187,21702,36274,56894,43907,16310,34790,16866,6150,5561,13587,107545,108873,126867,86986,28640,33427,19017,5762,80637,17430,46903,2047,131055,25958,13558,5444,47152,13900,44563,122857,45348,70863,39593,54332,38068,33637,318,40310,143467,18502,24520,11377,62013,28942,27246,28269,83545,17999,59015,90707,30065,15161,34720,1263,37008,2012,6060,98575,92933,5721,299,199555,24578,29223,2985,743,115825,109523,136657,47454,26378,53586,3733,174945,93340,244456,5693,37386,28782,89767,27545,23573,18798,136425,34320,84778,20041,48453,38215,7477,71958,40621,8773,5874,187927,105965,51100,43533,18083,8443,10180,43597,2003,183999,69689,12216,129696,146188,62389,34044,68410,12765,43273,26949,266807,3345,34477,79197,5688,47539,213110,21634,22257,50092,32222,42346,39530,63668,98,134978,74022,5152,59088,174145,37220,9934,9545,118937,5724,87240,19875,15784,40143,23263,87513,181654,285152,37881,263241,4966,43934,10433,186657,6470,74416,225854,25908,142677,246262,32280,6192,75890,45546,143264,135305,29742,47013,77787,11732,126658,8763,37950,21806,57557,113464,89465,108995,164574,23894,22996,23169,15369,23117,17642,130607,40503,36239,280990,44666,9981,40427,147487,26869,168452,32886,32991,46798,240839,15111,70502,65697,88548,44145,28701,48767,31139,206777,35659,181164,166262,14554,171445,31786,66523,76607,17956,6507,31279,90476,116611,167918,6560,1243,115324,80128,41867,55897,187323,37069,32596,189444,145931,13390,105530,65709,26805,6999,55714,41300,22915,68951,22138,21120,22264,10058,19945,33635,56123,99085,10032,5818,6016,46649,57476,35264,94413,112522,262288,93686,83038,14341,23204,28807,66084,77987,6101,126673,7133,38126,5923,122091,170240,97772,46874,215746,43948,41622,3272,55596,8332,146411,251315,13533,8561,81521,115449,48616,175175,2063,186556,3036,134537,75772,29728,82360,22973,186559,86348,89100,38388,82297,45610,2613,87082,9986,177812,57884,23591,47485,42543,33582,44713,74439,257444,252451,31825,35631,38540,33066,5147,13973,4343,51830,70378,22827,26448,95560,36896,241741,48067,203953,298860,61620,20450,3220,67272,6586,107662,100160,108684,6929,57226,4762,7457,1320,40404,77204,99309,62750,208653,59977,44e3,74315,34332,5819,172217,64904,114077,18147,84012,1791,98456,90930,21446,116669,103938,7422,85140,59713,5768,326211,16239,75411,13229,29398,10758,236107,1539,112472,95979,152154,151294,306,21196,38146,10700,6891,84282,109646,56492,40539,6589,119491,51354,30685,140209,136906,29622,73617,49553,70525,51671,166869,139616,74395,37439,49595,45678,11959,33211,86560,52434,9282,62690,112155,130810,5243,108261,99970,265613,72551,80049,6391,33365,90721,66737,69872,87011,1860,9032,112544,60905,37371,89015,140351,19076,850,373531,2802,36725,218795,72062,28990,16550,24614,7815,6187,26336,33373,32162,42791,73555,32062,23386,10244,56392,49442,27076,136262,12412,14883,1134,33675,97153,199281,15608,100152,74072,47942,254301,36451,16026,10687,65067,56708,254030,30290,50490,13864,57941,259331,35588,23485,43486,24869,21620,92971,22072,88645,1048,182050,13343,32452,14825,19509,3325,216938,45740,99716,189082,53740,78245,25609,24311,176777,47340,308354,40669,66085,14102,125339,9225,128709,97207,1271,200933,78439,113451,88975,18324,46521,11819,18570,141756,72512,170020,52754,63550,118515,103073,93330,32736,50499,14722,31600,68452,398867,29316,172786,18417,104924,2606,5670,84818,16288,67106,59580,82929,607401,291,85829,359,15897,35830,50696,65630,52672,22115,356968,29895,40837,231192,34024,38957,26722,406,23335,124952,72068,68804,13268,147101,164740,276569,162596,66943,11569,26654,66358,4777,23229,102127,5848,978,2921,59666,5371,28212,90108,42938,39320,2499,4271,108792,33510,125072,71653,65239,38250,66357,38577,13964,86251,35708,50755,36010,29448,12209,3844,38222,206337,100876,67827,137088,14167,252225,84163,195270,1306,5703,54198,779,46802,22028,51124,86759,70560,113164,35685,162145,45471,34561,422,2611,6464,47486,19223,38246,9191,18331,89942,243642,212364,15893,17518,22617,6409,30046,126182,59716,36560,104428,18846,26592,19458,50793,147333,30826,1388,27647,10922,14495,33545,19269,135828,39727,41601,46931,233379,49169,131130,182112,16276,82381,118209,142445,128310,19672,28740,82907,33436,3118,102206,28723,24819,41937,38854,5157,3881,111491,1142,9776,421673,152241,29309,14961,87854,6054,15424,3796,82656,54996,2108,55367,239450,154525,9643,118103,106041,64601,68549,48707,30266,25772,18740,9462,229669,91798,112152,191327,14493,72828,8175,66636,236474,25817,87351,129027,76653,20422,22983,71240,27846,44661,12399,46158,77704,53101,35032,11072,17300,109294,33638,24408,1895,11241,760,17584,82479,125877,63150,141075,34259,23274,81698,15732,43577,48340,91584,14688,16379,24481,150280,96420,262050,48635,43727,61819,56268,72003,88178,17281,79912,13218,122519,125295,166396,11811,2171,118930,67746,17636,178278,174656,95661,173039,83845,79689,17473,98555,127696,203415,54730,22925,232239,9309,12136,175026,20740,180188,10747,39816,314017,266131,10040,175732,112550,220651,31974,37393,888,23008,86799,4303,64905,148467,75337,251,3284,370102,50264,9835,5438,23655,4481,29851,329,12855,7162,64931,78141,12804,42372,296771,83547,18624,34874,86271,3360,48665,77735,88767,11463,63527,28889,22258,29140,194315,113924,25499,6406,31334,1845,4802,49184,43455,35469,127594,92970,61038,115005,38840,87761,106838,8811,20572,55637,11162,96721,132425,108925,2948,125457,36356,3502,75270,27622,127192,2561,123095,49394,61155,16897,110064,9699,89448,53356,19628,220310,21622,83036,9885,112214,6087,26713,17901,161912,91492,3440,68594,9266,92238,8087,6866,150194,72175,80701,13459,31836,43243,239700,95846,44749,50647,21945,230538,120612,132371,244604,5193,105637,34661,41341,68775,85393,1874,8771,33718,49672,77403,595452,99507,6490,58895,128742,7704,39239,73217,43816,62824,37804,199976,22361,80005,87514,94832,14089,4574,139975,59142,75523,100268,43906,53442,15152,2547,186002,17011,19513,204282,3343,60568,128318,119250,4298,51871,41336,71759,21921,45074,98169,145889,99427,11350,1237,5520,28799,7803,53702,21026,136352,38293,128690,12158,90132,44600,10184,26957,39459,126025,78904,82999,59373,39301,150198,120529,153042,20177,50089,14764,271571,30530,123161,38975,101562,22941,5648,124654,109243,69817,71675,49162,106884,21241,107795,30258,16572,188262,141456,7688,60718,8271,11044,32440,104608,103419,236109,93156,43293,128929,42107,67180,25201,115254,185488,130954,72813,167547,20537,39969,38432,22582,184022,1139,27199,5655,17767,97412,122606,209377,27070,35871,326617,188954,42680,73512,80911,22629,3011,95021,315242,157737,383,41821,41808,19335,27950,15674,25677,110950,35375,76835,59108,57370,35262,16569,160415,37706,78086,32041,49691,137143,9782,172080,50148,77917,6323,10110,69172,17711,21795,59511,76184,135114,31046,132319,59105,157578,20549,80778,57649,158421,65143,4575,72235,21899,10797,92745,34035,106079,80159,4508,78304,25350,75457,46458,32937,25623,47,8531,104751,84953,8138,36508,187199,66310,115274,13253,32461,38536,1916,42007,187160,35055,26325,84394,35963,94216,45590,97782],vs=15;class M3{constructor(e){const{peerRouting:t,routingTable:s,refreshInterval:n,refreshQueryTimeout:i,lan:o}=e;this.log=_(`libp2p:kad-dht:${o?"lan":"wan"}:routing-table:refresh`),this.peerRouting=t,this.routingTable=s,this.refreshInterval=n??b3,this.refreshQueryTimeout=i??_3,this.commonPrefixLengthRefreshedAt=[],this.refreshTable=this.refreshTable.bind(this)}async start(){this.log(`refreshing routing table every ${this.refreshInterval}ms`),this.refreshTable(!0)}async stop(){this.refreshTimeoutId!=null&&clearTimeout(this.refreshTimeoutId)}refreshTable(e=!1){this.log("refreshing routing table");const t=this._maxCommonPrefix(),s=this._getTrackedCommonPrefixLengthsForRefresh(t);this.log(`max common prefix length ${t}`),this.log(`tracked CPLs [ ${s.map(n=>n.toISOString()).join(", ")} ]`),Promise.all(s.map(async(n,i)=>{try{if(await this._refreshCommonPrefixLength(i,n,e),this._numPeersForCpl(t)===0){const o=Math.min(2*(i+1),s.length-1);for(let a=i+1;a<o+1;a++)try{await this._refreshCommonPrefixLength(a,n,e)}catch(l){this.log.error(l)}}}catch(o){this.log.error(o)}})).catch(n=>{this.log.error(n)}).then(()=>{this.refreshTimeoutId=setTimeout(this.refreshTable,this.refreshInterval),this.refreshTimeoutId.unref!=null&&this.refreshTimeoutId.unref()}).catch(n=>{this.log.error(n)})}async _refreshCommonPrefixLength(e,t,s){if(!s&&t.getTime()>Date.now()-this.refreshInterval){this.log("not running refresh for cpl %s as time since last refresh not above interval",e);return}const n=await this._generateRandomPeerId(e);this.log("starting refreshing cpl %s with key %p (routing table size was %s)",e,n,this.routingTable.size);const i=new ee.TimeoutController(this.refreshQueryTimeout);try{const o=await Ki(this.peerRouting.getClosestPeers(n.toBytes(),{signal:i.signal}));this.log(`found ${o} peers that were close to imaginary peer %p`,n),this.log("finished refreshing cpl %s with key %p (routing table size is now %s)",e,n,this.routingTable.size)}finally{i.clear()}}_getTrackedCommonPrefixLengthsForRefresh(e){e>vs&&(e=vs);const t=[];for(let s=0;s<=e;s++)t[s]=this.commonPrefixLengthRefreshedAt[s]??new Date;return t}async _generateRandomPeerId(e){if(this.routingTable.kb==null)throw new Error("Routing table not started");const t=ps(2),s=(t[1]<<8)+t[0],n=await this._makePeerId(this.routingTable.kb.localNodeId,s,e);return Ve(n)}async _makePeerId(e,t,s){if(s>vs)throw new Error(`Cannot generate peer ID for common prefix length greater than ${vs}`);const o=new DataView(e.buffer,e.byteOffset,e.byteLength).getUint16(0,!1)^32768>>s,a=65535<<16-(s+1),l=o&a|t&~a,u=N3[l],h=new ArrayBuffer(34),c=new DataView(h,0,h.byteLength);return c.setUint8(0,le.code),c.setUint8(1,32),c.setUint32(2,u,!1),new Uint8Array(c.buffer,c.byteOffset,c.byteLength)}_maxCommonPrefix(){let e=0;for(const t of this._prefixLengths())t>e&&(e=t);return e}_numPeersForCpl(e){let t=0;for(const s of this._prefixLengths())s===e&&t++;return t}*_prefixLengths(){if(this.routingTable.kb!=null)for(const{id:e}of this.routingTable.kb.toIterable()){const t=rs(this.routingTable.kb.localNodeId,e);let s=0;for(const n of t)if(n===0)s++;else break;yield s}}}var si;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),t.key!=null&&(s.uint32(10),s.bytes(t.key)),t.value!=null&&(s.uint32(18),s.bytes(t.value)),t.author!=null&&(s.uint32(26),s.bytes(t.author)),t.signature!=null&&(s.uint32(34),s.bytes(t.signature)),t.timeReceived!=null&&(s.uint32(42),s.string(t.timeReceived)),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.key=t.bytes();break;case 2:n.value=t.bytes();break;case 3:n.author=t.bytes();break;case 4:n.signature=t.bytes();break;case 5:n.timeReceived=t.string();break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(si||(si={}));var mt;(function(r){(function(n){n.PUT_VALUE="PUT_VALUE",n.GET_VALUE="GET_VALUE",n.ADD_PROVIDER="ADD_PROVIDER",n.GET_PROVIDERS="GET_PROVIDERS",n.FIND_NODE="FIND_NODE",n.PING="PING"})(r.MessageType||(r.MessageType={}));let e;(function(n){n[n.PUT_VALUE=0]="PUT_VALUE",n[n.GET_VALUE=1]="GET_VALUE",n[n.ADD_PROVIDER=2]="ADD_PROVIDER",n[n.GET_PROVIDERS=3]="GET_PROVIDERS",n[n.FIND_NODE=4]="FIND_NODE",n[n.PING=5]="PING"})(e||(e={})),function(n){n.codec=()=>Rn(e)}(r.MessageType||(r.MessageType={})),function(n){n.NOT_CONNECTED="NOT_CONNECTED",n.CONNECTED="CONNECTED",n.CAN_CONNECT="CAN_CONNECT",n.CANNOT_CONNECT="CANNOT_CONNECT"}(r.ConnectionType||(r.ConnectionType={}));let t;(function(n){n[n.NOT_CONNECTED=0]="NOT_CONNECTED",n[n.CONNECTED=1]="CONNECTED",n[n.CAN_CONNECT=2]="CAN_CONNECT",n[n.CANNOT_CONNECT=3]="CANNOT_CONNECT"})(t||(t={})),function(n){n.codec=()=>Rn(t)}(r.ConnectionType||(r.ConnectionType={})),function(n){let i;n.codec=()=>(i==null&&(i=ne((o,a,l={})=>{if(l.lengthDelimited!==!1&&a.fork(),o.id!=null&&(a.uint32(10),a.bytes(o.id)),o.addrs!=null)for(const u of o.addrs)a.uint32(18),a.bytes(u);o.connection!=null&&(a.uint32(24),r.ConnectionType.codec().encode(o.connection,a)),l.lengthDelimited!==!1&&a.ldelim()},(o,a)=>{const l={addrs:[]},u=a==null?o.len:o.pos+a;for(;o.pos<u;){const h=o.uint32();switch(h>>>3){case 1:l.id=o.bytes();break;case 2:l.addrs.push(o.bytes());break;case 3:l.connection=r.ConnectionType.codec().decode(o);break;default:o.skipType(h&7);break}}return l})),i),n.encode=o=>re(o,n.codec()),n.decode=o=>ie(o,n.codec())}(r.Peer||(r.Peer={}));let s;r.codec=()=>(s==null&&(s=ne((n,i,o={})=>{if(o.lengthDelimited!==!1&&i.fork(),n.type!=null&&(i.uint32(8),r.MessageType.codec().encode(n.type,i)),n.clusterLevelRaw!=null&&(i.uint32(80),i.int32(n.clusterLevelRaw)),n.key!=null&&(i.uint32(18),i.bytes(n.key)),n.record!=null&&(i.uint32(26),i.bytes(n.record)),n.closerPeers!=null)for(const a of n.closerPeers)i.uint32(66),r.Peer.codec().encode(a,i);if(n.providerPeers!=null)for(const a of n.providerPeers)i.uint32(74),r.Peer.codec().encode(a,i);o.lengthDelimited!==!1&&i.ldelim()},(n,i)=>{const o={closerPeers:[],providerPeers:[]},a=i==null?n.len:n.pos+i;for(;n.pos<a;){const l=n.uint32();switch(l>>>3){case 1:o.type=r.MessageType.codec().decode(n);break;case 10:o.clusterLevelRaw=n.int32();break;case 2:o.key=n.bytes();break;case 3:o.record=n.bytes();break;case 8:o.closerPeers.push(r.Peer.codec().decode(n,n.uint32()));break;case 9:o.providerPeers.push(r.Peer.codec().decode(n,n.uint32()));break;default:n.skipType(l&7);break}}return o})),s),r.encode=n=>re(n,r.codec()),r.decode=n=>ie(n,r.codec())})(mt||(mt={}));const ce=mt.MessageType,L3=mt.ConnectionType,U3=Object.keys(ce);class pe{constructor(e,t,s){if(!(t instanceof Uint8Array))throw new Error("Key must be a Uint8Array");this.type=e,this.key=t,this.clusterLevelRaw=s,this.closerPeers=[],this.providerPeers=[],this.record=void 0}get clusterLevel(){const e=this.clusterLevelRaw-1;return e<0?0:e}set clusterLevel(e){this.clusterLevelRaw=e}serialize(){return mt.encode({key:this.key,type:this.type,clusterLevelRaw:this.clusterLevelRaw,closerPeers:this.closerPeers.map(ni),providerPeers:this.providerPeers.map(ni),record:this.record==null?void 0:this.record.serialize().subarray()})}static deserialize(e){const t=mt.decode(e),s=new pe(t.type??mt.MessageType.PUT_VALUE,t.key??Uint8Array.from([]),t.clusterLevelRaw??0);return s.closerPeers=t.closerPeers.map(ri),s.providerPeers=t.providerPeers.map(ri),t.record?.length!=null&&(s.record=ye.deserialize(t.record)),s}}function ni(r){return{id:r.id.toBytes(),addrs:(r.multiaddrs??[]).map(t=>t.bytes),connection:L3.CONNECTED}}function ri(r){if(r.id==null)throw new Error("Invalid peer in message");return{id:Ve(r.id),multiaddrs:(r.addrs??[]).map(e=>G(e)),protocols:[]}}function ii(r){return{...r,name:"SENDING_QUERY",type:0,messageName:r.type,messageType:U3.indexOf(r.type.toString())}}function Cn(r){return{...r,name:"PEER_RESPONSE",type:1,messageName:r.messageType,closer:r.closer!=null?r.closer:[],providers:r.providers!=null?r.providers:[]}}function Is(r){return{...r,name:"FINAL_PEER",type:2}}function et(r){return{...r,name:"QUERY_ERROR",type:3}}function oi(r){return{...r,name:"PROVIDER",type:4}}function kn(r){return{...r,name:"VALUE",type:5}}function ai(r){return{...r,name:"DIALING_PEER",type:7}}class x3 extends W{constructor(e,t){super();const{protocol:s,lan:n}=t;this.components=e,this.log=_(`libp2p:kad-dht:${n?"lan":"wan"}:network`),this.running=!1,this.protocol=s}async start(){this.running||(this.running=!0)}async stop(){this.running=!1}isStarted(){return this.running}async*sendRequest(e,t,s={}){if(this.running){this.log("sending %s to %p",t.type,e),yield ai({peer:e}),yield ii({to:e,type:t.type});try{const i=await(await this.components.connectionManager.openConnection(e,s)).newStream(this.protocol,s),o=await this._writeReadMessage(i,t.serialize(),s);yield Cn({from:e,messageType:o.type,closer:o.closerPeers,providers:o.providerPeers,record:o.record})}catch(n){yield et({from:e,error:n})}finally{}}}async*sendMessage(e,t,s={}){if(this.running){this.log("sending %s to %p",t.type,e),yield ai({peer:e}),yield ii({to:e,type:t.type});try{const i=await(await this.components.connectionManager.openConnection(e,s)).newStream(this.protocol,s);await this._writeMessage(i,t.serialize(),s),yield Cn({from:e,messageType:t.type})}catch(n){yield et({from:e,error:n})}finally{}}}async _writeMessage(e,t,s){s.signal!=null&&(e=Fe(e,s.signal)),await z([t],Je(),e,wt)}async _writeReadMessage(e,t,s){s.signal!=null&&(e=Fe(e,s.signal));const n=await z([t],Je(),e,Ze(),async o=>{const a=await Et(o);if(a!=null)return a;throw new w("No message received","ERR_NO_MESSAGE_RECEIVED")}),i=pe.deserialize(n);return i.closerPeers.forEach(o=>{this.dispatchEvent(new R("peer",{detail:o}))}),i.providerPeers.forEach(o=>{this.dispatchEvent(new R("peer",{detail:o}))}),i}}async function cr(r,e){const t=e.key,n=D(t).split("/");if(n.length<3)return;const i=r[n[1].toString()];if(i==null){const o="Invalid record keytype";throw new w(o,"ERR_INVALID_RECORD_KEY_TYPE")}await i(t,e.value)}const K3=async(r,e)=>{if(!(r instanceof Uint8Array))throw new w('"key" must be a Uint8Array',"ERR_INVALID_RECORD_KEY_NOT_BUFFER");if(r.byteLength<5)throw new w("invalid public key record","ERR_INVALID_RECORD_KEY_TOO_SHORT");if(D(r.subarray(0,4))!=="/pk/")throw new w("key was not prefixed with /pk/","ERR_INVALID_RECORD_KEY_BAD_PREFIX");const s=r.slice(4),n=await le.digest(e);if(!J(s,n.bytes))throw new w("public key does not match passed in key","ERR_INVALID_RECORD_HASH_MISMATCH")},F3={pk:K3};function B3(r,e,t){if(t.length===0){const o="No records given";throw new w(o,"ERR_NO_RECORDS_RECEIVED")}const n=D(e).split("/");if(n.length<3){const o="Record key does not have a selector function";throw new w(o,"ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY")}const i=r[n[1].toString()];if(i==null){const o=`Unrecognized key prefix: ${n[1]}`;throw new w(o,"ERR_UNRECOGNIZED_KEY_PREFIX")}return t.length===1?0:i(e,t)}function V3(r,e){return 0}const G3={pk:V3};class $3{constructor(e,t){const{validators:s,selectors:n,peerRouting:i,queryManager:o,routingTable:a,network:l,lan:u}=t;this.components=e,this.log=_(`libp2p:kad-dht:${u?"lan":"wan"}:content-fetching`),this.validators=s,this.selectors=n,this.peerRouting=i,this.queryManager=o,this.routingTable=a,this.network=l}async putLocal(e,t){const s=Tt(e);await this.components.datastore.put(s,t)}async getLocal(e){this.log("getLocal %b",e);const t=Tt(e);this.log("fetching record for key %k",t);const s=await this.components.datastore.get(t);this.log("found %k in local datastore",t);const n=ye.deserialize(s);return await cr(this.validators,n),n}async*sendCorrectionRecord(e,t,s,n={}){this.log("sendCorrection for %b",e);const i=ei(e,s);for(const{value:o,from:a}of t){if(J(o,s)){this.log("record was ok");continue}if(this.components.peerId.equals(a)){try{const h=Tt(e);this.log(`Storing corrected record for key ${h.toString()}`),await this.components.datastore.put(h,i.subarray())}catch(h){this.log.error("Failed error correcting self",h)}continue}let l=!1;const u=new pe(ce.PUT_VALUE,e,0);u.record=ye.deserialize(i);for await(const h of this.network.sendRequest(a,u,n))h.name==="PEER_RESPONSE"&&h.record!=null&&J(h.record.value,ye.deserialize(i).value)&&(l=!0),yield h;l||(yield et({from:a,error:new w("value not put correctly","ERR_PUT_VALUE_INVALID")})),this.log.error("Failed error correcting entry")}}async*put(e,t,s={}){this.log("put key %b value %b",e,t);const n=ei(e,t),i=Tt(e);this.log(`storing record for key ${i.toString()}`),await this.components.datastore.put(i,n.subarray()),yield*z(this.peerRouting.getClosestPeers(e,{signal:s.signal}),o=>Un(o,a=>async()=>{if(a.name!=="FINAL_PEER")return[a];const l=[],u=new pe(ce.PUT_VALUE,e,0);u.record=ye.deserialize(n),this.log("send put to %p",a.peer.id);for await(const h of this.network.sendRequest(a.peer.id,u,s))l.push(h),h.name==="PEER_RESPONSE"&&(h.record!=null&&J(h.record.value,ye.deserialize(n).value)||l.push(et({from:a.peer.id,error:new w("value not put correctly","ERR_PUT_VALUE_INVALID")})));return l}),o=>Fi(o,{ordered:!1,concurrency:Ys}),async function*(o){for await(const a of o)yield*a})}async*get(e,t={}){this.log("get %b",e);const s=[];for await(const a of this.getMany(e,t))a.name==="VALUE"&&s.push(a),yield a;if(s.length===0)return;const n=s.map(a=>a.value);let i=0;try{i=B3(this.selectors,e,n)}catch(a){if(a.code!=="ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY")throw a}const o=n[i];if(this.log("GetValue %b %b",e,o),o==null)throw new w("best value was not found","ERR_NOT_FOUND");yield*this.sendCorrectionRecord(e,s,o,t),yield s[i]}async*getMany(e,t={}){this.log("getMany values for %b",e);try{const a=await this.getLocal(e);yield kn({value:a.value,from:this.components.peerId})}catch(a){this.log("error getting local value for %b",e,a)}const s=await Bt(e),n=this.routingTable.closestPeers(s);this.log("found %d peers in routing table",n.length);const i=this,o=async function*({peer:a,signal:l}){for await(const u of i.peerRouting.getValueOrPeers(a,e,{signal:l}))yield u,u.name==="PEER_RESPONSE"&&u.record!=null&&(yield kn({from:a,value:u.record.value}))};yield*this.queryManager.run(e,n,o,t)}}class H3{constructor(e,t){const{network:s,peerRouting:n,queryManager:i,routingTable:o,providers:a,lan:l}=t;this.components=e,this.log=_(`libp2p:kad-dht:${l?"lan":"wan"}:content-routing`),this.network=s,this.peerRouting=n,this.queryManager=i,this.routingTable=o,this.providers=a}async*provide(e,t,s={}){this.log("provide %s",e),await this.providers.addProvider(e,this.components.peerId);const n=new pe(ce.ADD_PROVIDER,e.multihash.bytes,0);n.providerPeers=[{id:this.components.peerId,multiaddrs:t,protocols:[]}];let i=0;const o=a=>async()=>{if(a.name!=="FINAL_PEER")return[a];const l=[];this.log("putProvider %s to %p",e,a.peer.id);try{this.log("sending provider record for %s to %p",e,a.peer.id);for await(const u of this.network.sendMessage(a.peer.id,n,s))u.name==="PEER_RESPONSE"&&(this.log("sent provider record for %s to %p",e,a.peer.id),i++),l.push(u)}catch(u){this.log.error("error sending provide record to peer %p",a.peer.id,u),l.push(et({from:a.peer.id,error:u}))}return l};yield*z(this.peerRouting.getClosestPeers(e.multihash.bytes,s),a=>Un(a,l=>o(l)),a=>Fi(a,{ordered:!1,concurrency:Ys}),async function*(a){for await(const l of a)yield*l}),this.log("sent provider records to %d peers",i)}async*findProviders(e,t){const s=this.routingTable.kBucketSize,n=e.multihash.bytes,i=await Bt(n),o=this;this.log("findProviders %c",e);const a=await this.providers.getProviders(e);if(a.length>0){const h=[];for(const c of a.slice(0,s))h.push({id:c,multiaddrs:(await this.components.peerStore.addressBook.get(c)??[]).map(d=>d.multiaddr),protocols:[]});yield Cn({from:this.components.peerId,messageType:ce.GET_PROVIDERS,providers:h}),yield oi({from:this.components.peerId,providers:h})}if(a.length>=s)return;const l=async function*({peer:h,signal:c}){const d=new pe(ce.GET_PROVIDERS,n,0);yield*o.network.sendRequest(h,d,{signal:c})},u=new Set(a.map(h=>h.toString()));for await(const h of this.queryManager.run(n,this.routingTable.closestPeers(i),l,t))if(yield h,h.name==="PEER_RESPONSE"){this.log("Found %d provider entries for %c and %d closer peers",h.providers.length,e,h.closer.length);const c=[];for(const d of h.providers)u.has(d.id.toString())||(u.add(d.id.toString()),c.push(d));if(c.length>0&&(yield oi({from:h.from,providers:c})),u.size===s)return}}}class q3{constructor(e,t){this.originDhtKey=e,this.capacity=t,this.peerDistances=[]}get length(){return this.peerDistances.length}get peers(){return this.peerDistances.map(e=>e.peerId)}async add(e){if(this.peerDistances.find(n=>n.peerId.equals(e))!=null)return;const t=await Qe(e),s={peerId:e,distance:rs(this.originDhtKey,t)};this.peerDistances.push(s),this.peerDistances.sort((n,i)=>gr(n.distance,i.distance)),this.peerDistances=this.peerDistances.slice(0,this.capacity)}async anyCloser(e){if(e.length===0)return!1;if(this.length===0)return!0;const t=await Promise.all(e.map(Qe)),s=this.peerDistances[this.peerDistances.length-1].distance;for(const n of t){const i=rs(this.originDhtKey,n);if(gr(i,s)<0)return!0}return!1}}class z3{constructor(e,t){const{routingTable:s,network:n,validators:i,queryManager:o,lan:a}=t;this.components=e,this.routingTable=s,this.network=n,this.validators=i,this.queryManager=o,this.log=_(`libp2p:kad-dht:${a?"lan":"wan"}:peer-routing`)}async findPeerLocal(e){let t;const s=await this.routingTable.find(e);if(s!=null){this.log("findPeerLocal found %p in routing table",e);try{t=await this.components.peerStore.get(s)}catch(n){if(n.code!=="ERR_NOT_FOUND")throw n}}if(t==null)try{t=await this.components.peerStore.get(e)}catch(n){if(n.code!=="ERR_NOT_FOUND")throw n}if(t!=null)return this.log("findPeerLocal found %p in peer store",e),{id:t.id,multiaddrs:t.addresses.map(n=>n.multiaddr),protocols:[]}}async*_getValueSingle(e,t,s={}){const n=new pe(ce.GET_VALUE,t,0);yield*this.network.sendRequest(e,n,s)}async*getPublicKeyFromNode(e,t={}){const s=v3(e);for await(const n of this._getValueSingle(e,s,t))if(yield n,n.name==="PEER_RESPONSE"&&n.record!=null){const i=await bt(Xn({bytes:n.record.value}));if(!i.equals(e))throw new w("public key does not match id","ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID");if(i.publicKey==null)throw new w("public key missing","ERR_PUBLIC_KEY_MISSING");yield kn({from:e,value:i.publicKey})}throw new w(`Node not responding with its public key: ${e.toString()}`,"ERR_INVALID_RECORD")}async*findPeer(e,t={}){this.log("findPeer %p",e);const s=await this.findPeerLocal(e);if(s!=null){this.log("found local"),yield Is({from:this.components.peerId,peer:s});return}const n=await Qe(e),i=this.routingTable.closestPeers(n);if(i.find(h=>h.equals(e))!=null)try{const h=await this.components.peerStore.get(e);this.log("found in peerStore"),yield Is({from:this.components.peerId,peer:{id:h.id,multiaddrs:h.addresses.map(c=>c.multiaddr),protocols:[]}});return}catch(h){if(h.code!=="ERR_NOT_FOUND")throw h}const a=this,l=async function*({peer:h,signal:c}){const d=new pe(ce.FIND_NODE,e.toBytes(),0);for await(const p of a.network.sendRequest(h,d,{signal:c}))if(yield p,p.name==="PEER_RESPONSE"){const g=p.closer.find(m=>m.id.equals(e));g!=null&&(yield Is({from:p.from,peer:g}))}};let u=!1;for await(const h of this.queryManager.run(e.toBytes(),i,l,t))h.name==="FINAL_PEER"&&(u=!0),yield h;u||(yield et({from:this.components.peerId,error:new w("Not found","ERR_NOT_FOUND")}))}async*getClosestPeers(e,t={}){this.log("getClosestPeers to %b",e);const s=await Bt(e),n=this.routingTable.closestPeers(s),i=this,o=new q3(s,this.routingTable.kBucketSize);await Promise.all(n.map(async l=>{await o.add(l)}));const a=async function*({peer:l,signal:u}){i.log("closerPeersSingle %s from %p",D(e,"base32"),l);const h=new pe(ce.FIND_NODE,e,0);yield*i.network.sendRequest(l,h,{signal:u})};for await(const l of this.queryManager.run(e,n,a,t))yield l,l.name==="PEER_RESPONSE"&&await Promise.all(l.closer.map(async u=>{await o.add(u.id)}));this.log("found %d peers close to %b",o.length,e);for(const l of o.peers)yield Is({from:this.components.peerId,peer:{id:l,multiaddrs:(await this.components.peerStore.addressBook.get(l)??[]).map(u=>u.multiaddr),protocols:[]}})}async*getValueOrPeers(e,t,s={}){for await(const n of this._getValueSingle(e,t,s)){if(n.name==="PEER_RESPONSE"&&n.record!=null)try{await this._verifyRecordOnline(n.record)}catch{const o="invalid record received, discarded";this.log(o),yield et({from:n.from,error:new w(o,"ERR_INVALID_RECORD")});continue}yield n}}async _verifyRecordOnline(e){if(e.timeReceived==null)throw new w("invalid record received","ERR_INVALID_RECORD");await cr(this.validators,new ye(e.key,e.value,e.timeReceived))}async getCloserPeersOffline(e,t){const s=await Bt(e),n=this.routingTable.closestPeers(s),i=[];for(const o of n)if(!o.equals(t))try{const a=await this.components.peerStore.addressBook.get(o),l=await this.components.peerStore.protoBook.get(o);i.push({id:o,multiaddrs:a.map(u=>u.multiaddr),protocols:l})}catch(a){if(a.code!=="ERR_NOT_FOUND")throw a}return i.length>0?this.log("getCloserPeersOffline found %d peer(s) closer to %b than %p",i.length,e,t):this.log("getCloserPeersOffline could not find peer closer to %b than %p",e,t),i}}const We=_("libp2p:kad-dht:providers");class W3{constructor(e,t={}){const{cacheSize:s,cleanupInterval:n,provideValidity:i}=t;this.components=e,this.cleanupInterval=n??m3,this.provideValidity=i??y3,this.cache=va(s??g3),this.syncQueue=new Nt({concurrency:1}),this.started=!1}isStarted(){return this.started}async start(){this.started||(this.started=!0,this.cleaner=setInterval(()=>{this._cleanup().catch(e=>{We.error(e)})},this.cleanupInterval))}async stop(){this.started=!1,this.cleaner!=null&&(clearInterval(this.cleaner),this.cleaner=void 0)}async _cleanup(){await this.syncQueue.add(async()=>{const e=Date.now();let t=0,s=0;const n=new Map,i=this.components.datastore.batch(),o=this.components.datastore.query({prefix:Io});for await(const a of o)try{const{cid:l,peerId:u}=Po(a.key),h=Do(a.value).getTime(),c=Date.now(),d=c-h,p=d>this.provideValidity;if(We("comparing: %d - %d = %d > %d %s",c,h,d,this.provideValidity,p?"(expired)":""),p){s++,i.delete(a.key);const g=n.get(l)??new Set;g.add(u),n.set(l,g)}t++}catch(l){We.error(l.message)}n.size>0?(We("deleting %d / %d entries",s,t),await i.commit()):We("nothing to delete");for(const[a,l]of n){const u=Jt(a),h=this.cache.get(u);if(h!=null){for(const c of l)h.delete(c);h.size===0?this.cache.remove(u):this.cache.set(u,h)}}We("Cleanup successful (%dms)",Date.now()-e)})}async _getProvidersMap(e){const t=Jt(e);let s=this.cache.get(t);return s==null&&(s=await Q3(this.components.datastore,e),this.cache.set(t,s)),s}async addProvider(e,t){await this.syncQueue.add(async()=>{We("%p provides %s",t,e);const s=await this._getProvidersMap(e);We("loaded %s provs",s.size);const n=new Date;s.set(t.toString(),n);const i=Jt(e);this.cache.set(i,s),await Y3(this.components.datastore,e,t,n)})}async getProviders(e){return await this.syncQueue.add(async()=>(We("get providers for %s",e),[...(await this._getProvidersMap(e)).keys()].map(s=>q(s))),{throwOnTimeout:!0})}}function Jt(r){const e=typeof r=="string"?r:D(r.multihash.bytes,"base32");return`${Io}/${e}`}async function Y3(r,e,t,s){const n=[Jt(e),"/",t.toString()].join(""),i=new ls(n),o=Uint8Array.from(gt.encode(s.getTime()));await r.put(i,o)}function Po(r){const e=r.toString().split("/");if(e.length!==5)throw new Error(`incorrectly formatted provider entry key in datastore: ${r.toString()}`);return{cid:e[3],peerId:e[4]}}async function Q3(r,e){const t=new Map,s=r.query({prefix:Jt(e)});for await(const n of s){const{peerId:i}=Po(n.key);t.set(i,Do(n.value))}return t}function Do(r){return new Date(gt.decode(r))}const X3=BigInt("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF");async function*j3(r){const{key:e,startingPeer:t,ourPeerId:s,signal:n,query:i,alpha:o,pathIndex:a,numPaths:l,cleanUp:u,queryFuncTimeout:h,log:c,peersSeen:d}=r,p=new Nt({concurrency:o}),g=await Bt(e);function m(E,I){if(E==null)return;d.add(E);const N=BigInt("0x"+D(rs(I,g),"base16"));p.add(async()=>{let A;const M=[n];h!=null&&(A=new ee.TimeoutController(h),M.push(A.signal));const b=Mt(M);try{for await(const S of i({key:e,peer:E,signal:b,pathIndex:a,numPaths:l})){if(b.aborted)return;if(S.name==="PEER_RESPONSE")for(const P of S.closer){if(d.has(P.id)){c("already seen %p in query",P.id);continue}if(s.equals(P.id)){c("not querying ourselves");continue}const v=await Qe(P.id);if(BigInt("0x"+D(rs(v,g),"base16"))>N){c("skipping %p as they are not closer to %b than %p",P.id,e,E);continue}c("querying closer peer %p",P.id),m(P.id,v)}p.emit("completed",S)}A?.clear()}catch(S){n.aborted?p.emit("error",S):p.emit("completed",et({from:E,error:S}))}finally{A?.clear()}},{priority:X3-N}).catch(A=>{c.error(A)})}m(t,await Qe(t)),yield*J3(p,n,u,c)}async function*J3(r,e,t,s){let n=me(),i=!0;const o=[],a=()=>{i&&(s("clean up queue, results %d, queue size %d, pending tasks %d",o.length,r.size,r.pending),i=!1,r.clear(),o.splice(0,o.length))};for(r.on("completed",l=>{o.push(l),n.resolve()}),r.on("error",l=>{s("queue error",l),a(),n.reject(l)}),r.on("idle",()=>{s("queue idle"),i=!1,n.resolve()}),e.addEventListener("abort",()=>{s("abort queue");const l=i;a(),l&&n.reject(new w("Query aborted","ERR_QUERY_ABORTED"))}),t.addEventListener("cleanup",()=>{a(),n.resolve()});i;)for(await n.promise,n=me();o.length>0;){const l=o.shift();l!=null&&(yield l)}yield*o}class Z3{constructor(e,t){const{lan:s=!1,disjointPaths:n=On,alpha:i=Ys}=t;this.components=e,this.disjointPaths=n??On,this.controllers=new Set,this.running=!1,this.alpha=i??Ys,this.lan=s,this.queries=0}isStarted(){return this.running}async start(){this.running=!0,this.components.metrics!=null&&this.metrics==null&&(this.metrics={runningQueries:this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan?"lan":"wan"}_running_queries`),queryTime:this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan?"lan":"wan"}_query_time_seconds`)})}async stop(){this.running=!1;for(const e of this.controllers)e.abort();this.controllers.clear()}async*run(e,t,s,n={}){if(!this.running)throw new Error("QueryManager not started");const i=this.metrics?.queryTime.timer();let o;if(n.signal==null){o=new ee.TimeoutController(R3),n.signal=o.signal;try{Y.setMaxListeners!=null&&Y.setMaxListeners(1/0,o.signal)}catch{}}const a=new AbortController;this.controllers.add(a);const l=[a.signal];n.signal!=null&&l.push(n.signal);const u=Mt(l);try{Y.setMaxListeners!=null&&Y.setMaxListeners(1/0,u)}catch{}const h=_(`libp2p:kad-dht:${this.lan?"lan":"wan"}:query:`+D(e,"base58btc")),c=t.slice(0,Math.min(this.disjointPaths,t.length)),d=Date.now(),p=new W;try{if(h("query:start"),this.queries++,this.metrics?.runningQueries.update(this.queries),t.length===0){h.error("Running query with no peers");return}const g=new ct,m=c.map((E,I)=>j3({key:e,startingPeer:E,ourPeerId:this.components.peerId,signal:u,query:s,pathIndex:I,numPaths:c.length,alpha:this.alpha,cleanUp:p,queryFuncTimeout:n.queryFuncTimeout,log:h,peersSeen:g}));for await(const E of Ke(...m))yield E,E.name==="QUERY_ERROR"&&h("error",E.error)}catch(g){if(!(!this.running&&g.code==="ERR_QUERY_ABORTED"))throw g}finally{this.controllers.delete(a),o?.clear(),this.queries--,this.metrics?.runningQueries.update(this.queries),i?.(),p.dispatchEvent(new R("cleanup")),h("query:done in %dms",Date.now()-d)}}}const Wt=_("libp2p:kad-dht:rpc:handlers:add-provider");class e4{constructor(e){const{providers:t}=e;this.providers=t}async handle(e,t){if(Wt("start"),t.key==null||t.key.length===0)throw new w("Missing key","ERR_MISSING_KEY");let s;try{s=Vt.decode(t.key)}catch{throw new w("Invalid CID","ERR_INVALID_CID")}(t.providerPeers==null||t.providerPeers.length===0)&&Wt.error("no providers found in message"),await Promise.all(t.providerPeers.map(async n=>{if(!n.id.equals(e)){Wt("invalid provider peer %p from %p",n.id,e);return}if(n.multiaddrs.length<1){Wt("no valid addresses for provider %p. Ignore",e);return}Wt("received provider %p for %s (addrs %s)",e,s,n.multiaddrs.map(i=>i.toString())),await this.providers.addProvider(s,n.id)}))}}const ci=_("libp2p:kad-dht:rpc:handlers:find-node");class t4{constructor(e,t){const{peerRouting:s,lan:n}=t;this.components=e,this.peerRouting=s,this.lan=!!n}async handle(e,t){ci("incoming request from %p for peers closer to %b",e,t.key);let s=[];J(this.components.peerId.toBytes(),t.key)?s=[{id:this.components.peerId,multiaddrs:this.components.addressManager.getAddresses().map(i=>i.decapsulateCode(Mn("p2p").code)),protocols:[]}]:s=await this.peerRouting.getCloserPeersOffline(t.key,e),s=s.map(this.lan?ar:or).filter(({multiaddrs:i})=>i.length);const n=new pe(t.type,new Uint8Array(0),t.clusterLevel);return s.length>0?n.closerPeers=s:ci("could not find any peers closer to %b than %p",t.key,e),n}}const li=_("libp2p:kad-dht:rpc:handlers:get-providers");class s4{constructor(e,t){const{peerRouting:s,providers:n,lan:i}=t;this.components=e,this.peerRouting=s,this.providers=n,this.lan=!!i}async handle(e,t){let s;try{s=Vt.decode(t.key)}catch{throw new w("Invalid CID","ERR_INVALID_CID")}li("%p asking for providers for %s",e,s);const[n,i]=await Promise.all([this.providers.getProviders(s),this.peerRouting.getCloserPeersOffline(t.key,e)]),o=await this._getPeers(n),a=await this._getPeers(i.map(({id:u})=>u)),l=new pe(t.type,t.key,t.clusterLevel);return o.length>0&&(l.providerPeers=o),a.length>0&&(l.closerPeers=a),li("got %s providers %s closerPeers",o.length,a.length),l}async _getAddresses(e){return(await this.components.peerStore.addressBook.get(e)).map(s=>s.multiaddr)}async _getPeers(e){const t=[],s=this.lan?ar:or;for(const n of e){const i=s({id:n,multiaddrs:await this._getAddresses(n),protocols:[]});i.multiaddrs.length>0&&t.push(i)}return t}}const St=_("libp2p:kad-dht:rpc:handlers:get-value");class n4{constructor(e,t){const{peerRouting:s}=t;this.components=e,this.peerRouting=s}async handle(e,t){const s=t.key;if(St("%p asked for key %b",e,s),s==null||s.length===0)throw new w("Invalid key","ERR_INVALID_KEY");const n=new pe(ce.GET_VALUE,s,t.clusterLevel);if(I3(s)){St("is public key");const a=P3(s);let l;try{const u=await this.components.peerStore.keyBook.get(a);if(u==null)throw new w("No public key found in key book","ERR_NOT_FOUND");l=u}catch(u){if(u.code!=="ERR_NOT_FOUND")throw u}if(l!=null)return St("returning found public key"),n.record=new ye(s,l,new Date),n}const[i,o]=await Promise.all([this._checkLocalDatastore(s),this.peerRouting.getCloserPeersOffline(t.key,e)]);return i!=null&&(St("had record for %b in local datastore",s),n.record=i),o.length>0&&(St("had %s closer peers in routing table",o.length),n.closerPeers=o),n}async _checkLocalDatastore(e){St("checkLocalDatastore looking for %b",e);const t=Tt(e);let s;try{s=await this.components.datastore.get(t)}catch(i){if(i.code==="ERR_NOT_FOUND")return;throw i}const n=ye.deserialize(s);if(n==null)throw new w("Invalid record","ERR_INVALID_RECORD");if(n.timeReceived==null||Date.now()-n.timeReceived.getTime()>h3){await this.components.datastore.delete(t);return}return n}}const r4=_("libp2p:kad-dht:rpc:handlers:ping");class i4{async handle(e,t){return r4("ping from %p",e),t}}class o4{constructor(e,t){const{validators:s}=t;this.components=e,this.log=_("libp2p:kad-dht:rpc:handlers:put-value"),this.validators=s}async handle(e,t){const s=t.key;this.log("%p asked us to store value for key %b",e,s);const n=t.record;if(n==null){const i=`Empty record from: ${e.toString()}`;throw this.log.error(i),new w(i,"ERR_EMPTY_RECORD")}try{await cr(this.validators,n),n.timeReceived=new Date;const i=Tt(n.key);await this.components.datastore.put(i,n.serialize().subarray()),this.log("put record for %b into datastore under key %k",s,i)}catch(i){this.log("did not put record for key %b into datastore %o",s,i)}return t}}class a4{constructor(e,t){const{providers:s,peerRouting:n,validators:i,lan:o}=t;this.log=_("libp2p:kad-dht:rpc"),this.routingTable=t.routingTable,this.handlers={[ce.GET_VALUE]:new n4(e,{peerRouting:n}),[ce.PUT_VALUE]:new o4(e,{validators:i}),[ce.FIND_NODE]:new t4(e,{peerRouting:n,lan:o}),[ce.ADD_PROVIDER]:new e4({providers:s}),[ce.GET_PROVIDERS]:new s4(e,{peerRouting:n,providers:s,lan:o}),[ce.PING]:new i4}}async handleMessage(e,t){try{await this.routingTable.add(e)}catch(n){this.log.error("Failed to update the kbucket store",n)}const s=this.handlers[t.type];if(s==null){this.log.error(`no handler found for message type: ${t.type}`);return}return await s.handle(e,t)}onIncomingStream(e){Promise.resolve().then(async()=>{const{stream:t,connection:s}=e,n=s.remotePeer;try{await this.routingTable.add(n)}catch(o){this.log.error(o)}const i=this;await z(t,Ze(),async function*(o){for await(const a of o){const l=pe.deserialize(a);i.log("incoming %s from %p",l.type,n);const u=await i.handleMessage(n,l);u!=null&&(yield u.serialize())}},Je(),t)}).catch(t=>{this.log.error(t)})}}class c4 extends W{constructor(e,t){super();const{protocol:s,lan:n}=t;this.components=e,this.log=_(`libp2p:kad-dht:topology-listener:${n?"lan":"wan"}`),this.running=!1,this.protocol=s}isStarted(){return this.running}async start(){if(this.running)return;this.running=!0;const e=ji({onConnect:t=>{this.log("observed peer %p with protocol %s",t,this.protocol),this.dispatchEvent(new R("peer",{detail:t}))}});this.registrarId=await this.components.registrar.register(this.protocol,e)}async stop(){this.running=!1,this.registrarId!=null&&(this.components.registrar.unregister(this.registrarId),this.registrarId=void 0)}}class l4{constructor(e,t){const{peerRouting:s,lan:n,count:i,interval:o,queryTimeout:a}=t;this.components=e,this.log=_(`libp2p:kad-dht:${n?"lan":"wan"}:query-self`),this.running=!1,this.peerRouting=s,this.count=i??On,this.interval=o??w3,this.queryTimeout=a??E3}isStarted(){return this.running}async start(){this.running||(this.running=!0,this._querySelf())}async stop(){this.running=!1,this.timeoutId!=null&&clearTimeout(this.timeoutId),this.controller!=null&&this.controller.abort()}_querySelf(){Promise.resolve().then(async()=>{const e=new ee.TimeoutController(this.queryTimeout);try{this.controller=new AbortController;const t=Mt([this.controller.signal,e.signal]);try{Y.setMaxListeners!=null&&Y.setMaxListeners(1/0,t)}catch{}const s=await z(this.peerRouting.getClosestPeers(this.components.peerId.toBytes(),{signal:t}),n=>Ia(n,this.count),async n=>await Ki(n));this.log("query ran successfully - found %d peers",s)}catch(t){this.log("query error",t)}finally{this.timeoutId=setTimeout(this._querySelf.bind(this),this.interval),e.clear()}}).catch(e=>{this.log("query error",e)})}}const h4=32,d4=64;let hi=class extends W{constructor(e,t){super();const{kBucketSize:s,clientMode:n,validators:i,selectors:o,querySelfInterval:a,lan:l,protocolPrefix:u,pingTimeout:h,pingConcurrency:c,maxInboundStreams:d,maxOutboundStreams:p,providers:g}=t;this.running=!1,this.components=e,this.lan=!!l,this.log=_(`libp2p:kad-dht:${l===!0?"lan":"wan"}`),this.protocol=`${u??u3}${l===!0?d3:""}${p3}`,this.kBucketSize=s??20,this.clientMode=n??!0,this.maxInboundStreams=d??h4,this.maxOutboundStreams=p??d4,this.routingTable=new k3(e,{kBucketSize:s,lan:this.lan,pingTimeout:h,pingConcurrency:c,protocol:this.protocol}),this.providers=new W3(e,g??{}),this.validators={...F3,...i},this.selectors={...G3,...o},this.network=new x3(e,{protocol:this.protocol,lan:this.lan}),this.queryManager=new Z3(e,{disjointPaths:Math.ceil(this.kBucketSize/2),lan:l}),this.peerRouting=new z3(e,{routingTable:this.routingTable,network:this.network,validators:this.validators,queryManager:this.queryManager,lan:this.lan}),this.contentFetching=new $3(e,{validators:this.validators,selectors:this.selectors,peerRouting:this.peerRouting,queryManager:this.queryManager,routingTable:this.routingTable,network:this.network,lan:this.lan}),this.contentRouting=new H3(e,{network:this.network,peerRouting:this.peerRouting,queryManager:this.queryManager,routingTable:this.routingTable,providers:this.providers,lan:this.lan}),this.routingTableRefresh=new M3({peerRouting:this.peerRouting,routingTable:this.routingTable,lan:this.lan}),this.rpc=new a4(e,{routingTable:this.routingTable,providers:this.providers,peerRouting:this.peerRouting,validators:this.validators,lan:this.lan}),this.topologyListener=new c4(e,{protocol:this.protocol,lan:this.lan}),this.querySelf=new l4(e,{peerRouting:this.peerRouting,interval:a,lan:this.lan}),this.network.addEventListener("peer",m=>{const E=m.detail;this.onPeerConnect(E).catch(I=>{this.log.error("could not add %p to routing table",E.id,I)}),this.dispatchEvent(new R("peer",{detail:E}))}),this.topologyListener.addEventListener("peer",m=>{const E=m.detail;Promise.resolve().then(async()=>{const I=await this.components.peerStore.addressBook.get(E),N={id:E,multiaddrs:I.map(A=>A.multiaddr),protocols:[]};await this.onPeerConnect(N)}).catch(I=>{this.log.error("could not add %p to routing table",E,I)})})}get[ys](){return!0}get[Symbol.toStringTag](){return"@libp2p/kad-dht"}async onPeerConnect(e){if(this.log("peer %p connected with protocols %s",e.id,e.protocols),this.lan?e=ar(e):e=or(e),e.multiaddrs.length===0){this.log("ignoring %p as they do not have any %s addresses in %s",e.id,this.lan?"private":"public",e.multiaddrs.map(t=>t.toString()));return}try{await this.routingTable.add(e.id)}catch(t){this.log.error("could not add %p to routing table",e.id,t)}}isStarted(){return this.running}async getMode(){return this.clientMode?"client":"server"}async setMode(e){await this.components.registrar.unhandle(this.protocol),e==="client"?(this.log("enabling client mode"),this.clientMode=!0):(this.log("enabling server mode"),this.clientMode=!1,await this.components.registrar.handle(this.protocol,this.rpc.onIncomingStream.bind(this.rpc),{maxInboundStreams:this.maxInboundStreams,maxOutboundStreams:this.maxOutboundStreams}))}async start(){this.running=!0,await this.setMode(this.clientMode?"client":"server"),await Promise.all([this.providers.start(),this.queryManager.start(),this.network.start(),this.routingTable.start(),this.topologyListener.start(),this.querySelf.start()]),await this.routingTableRefresh.start()}async stop(){this.running=!1,await Promise.all([this.providers.stop(),this.queryManager.stop(),this.network.stop(),this.routingTable.stop(),this.routingTableRefresh.stop(),this.topologyListener.stop(),this.querySelf.stop()])}async*put(e,t,s={}){yield*this.contentFetching.put(e,t,s)}async*get(e,t={}){yield*this.contentFetching.get(e,t)}async*provide(e,t={}){yield*this.contentRouting.provide(e,this.components.addressManager.getAddresses(),t)}async*findProviders(e,t={}){yield*this.contentRouting.findProviders(e,t)}async*findPeer(e,t={}){yield*this.peerRouting.findPeer(e,t)}async*getClosestPeers(e,t={}){yield*this.peerRouting.getClosestPeers(e,t)}async refreshRoutingTable(){this.routingTableRefresh.refreshTable(!0)}};const u4=_("libp2p:kad-dht");class p4 extends W{constructor(e,t,s){super(),this.components=e,this.wan=t,this.lan=s,this.wan.addEventListener("peer",n=>{this.dispatchEvent(new R("peer",{detail:n.detail}))}),this.lan.addEventListener("peer",n=>{this.dispatchEvent(new R("peer",{detail:n.detail}))})}get[ys](){return!0}get[Symbol.toStringTag](){return"@libp2p/dual-kad-dht"}isStarted(){return this.wan.isStarted()&&this.lan.isStarted()}async getMode(){return await this.wan.getMode()}async setMode(e){await this.wan.setMode(e)}async start(){await Promise.all([this.lan.start(),this.wan.start()])}async stop(){await Promise.all([this.lan.stop(),this.wan.stop()])}async*put(e,t,s={}){for await(const n of Ke(this.lan.put(e,t,s),this.wan.put(e,t,s)))yield n}async*get(e,t={}){let s=!1,n=!1;for await(const i of Ke(this.lan.get(e,t),this.wan.get(e,t)))yield i,i.name==="DIALING_PEER"&&(s=!0),i.name==="VALUE"&&(s=!0,i.value!=null&&(n=!0)),i.name==="SENDING_QUERY"&&(s=!0);if(!s)throw new w("No peers found in routing table!","ERR_NO_PEERS_IN_ROUTING_TABLE");n||(yield et({from:this.components.peerId,error:new w("Not found","ERR_NOT_FOUND")}))}async*provide(e,t={}){let s=0,n=0;const i=[],o=[this.lan];await this.wan.getMode()==="server"&&o.push(this.wan);for await(const a of Ke(...o.map(l=>l.provide(e,t))))yield a,a.name==="SENDING_QUERY"&&s++,a.name==="QUERY_ERROR"&&i.push(a.error),a.name==="PEER_RESPONSE"&&a.messageName==="ADD_PROVIDER"&&(u4("sent provider record for %s to %p",e,a.from),n++);if(n===0)throw i.length>0?new w(`Failed to provide to ${i.length} of ${s} peers`,"ERR_PROVIDES_FAILED",{errors:i}):new w("Failed to provide - no peers found","ERR_PROVIDES_FAILED")}async*findProviders(e,t={}){yield*Ke(this.lan.findProviders(e,t),this.wan.findProviders(e,t))}async*findPeer(e,t={}){let s=!1;for await(const n of Ke(this.lan.findPeer(e,t),this.wan.findPeer(e,t)))yield n,(n.name==="SENDING_QUERY"||n.name==="FINAL_PEER")&&(s=!0);if(!s)throw new w("Peer lookup failed","ERR_LOOKUP_FAILED")}async*getClosestPeers(e,t={}){yield*Ke(this.lan.getClosestPeers(e,t),this.wan.getClosestPeers(e,t))}async refreshRoutingTable(){await Promise.all([this.lan.refreshRoutingTable(),this.wan.refreshRoutingTable()])}}class f4 extends p4{constructor(e,t){super(e,new hi(e,{protocolPrefix:"/ipfs",...t,lan:!1}),new hi(e,{protocolPrefix:"/ipfs",...t,clientMode:!1,lan:!0}))}}function g4(r){return e=>new f4(e,r)}const Ps=_("libp2p:bootstrap"),y4="bootstrap",m4=50,w4=12e4,E4=1e3;class To extends W{constructor(e,t={list:[]}){if(t.list==null||t.list.length===0)throw new Error("Bootstrap requires a list of peer addresses");super(),this.components=e,this.timeout=t.timeout??E4,this.list=[];for(const s of t.list){if(!Ho.matches(s)){Ps.error("Invalid multiaddr");continue}const n=Pi(s),i=n.getPeerId();if(i==null){Ps.error("Invalid bootstrap multiaddr without peer id");continue}const o={id:q(i),multiaddrs:[n],protocols:[]};this.list.push(o)}this._init=t}get[ys](){return!0}get[Symbol.toStringTag](){return"@libp2p/bootstrap"}isStarted(){return!!this.timer}start(){this.isStarted()||(Ps("Starting bootstrap node discovery, discovering peers after %s ms",this.timeout),this.timer=setTimeout(()=>{this._discoverBootstrapPeers().catch(e=>{Ps.error(e)})},this.timeout))}async _discoverBootstrapPeers(){if(this.timer!=null)for(const e of this.list){if(await this.components.peerStore.tagPeer(e.id,this._init.tagName??y4,{value:this._init.tagValue??m4,ttl:this._init.tagTTL??w4}),this.timer==null)return;this.dispatchEvent(new R("peer",{detail:e}))}}stop(){this.timer!=null&&clearTimeout(this.timer),this.timer=void 0}}To.tag="bootstrap";function b4(r){return e=>new To(e,r)}function _4(){throw new Error("WebSocket Servers can not be created in the browser!")}const Ao=421,Oo=290,R4=2e3,di=_("libp2p:websockets:socket");function S4(r,e,t){t=t??{};const s={async sink(n){t?.signal!=null&&(n=lt(n,t.signal));try{await r.sink(n)}catch(i){i.type!=="aborted"&&di.error(i)}},source:t.signal!=null?lt(r.source,t.signal):r.source,remoteAddr:e,timeline:{open:Date.now()},async close(){const n=Date.now();try{await Pa(r.close(),{milliseconds:R4})}catch{const{host:o,port:a}=s.remoteAddr.toOptions();di("timeout closing stream to %s:%s after %dms, destroying it manually",o,a,Date.now()-n),r.destroy()}finally{s.timeline.close=Date.now()}}};return r.socket.addEventListener("close",()=>{s.timeline.close==null&&(s.timeline.close=Date.now())},{once:!0}),s}function v4(r){return r.filter(e=>{if(e.protoCodes().includes(Oo))return!1;const t=e.decapsulateCode(Ao);return qo.matches(t)||Di.matches(t)})}function I4(r){return r.filter(e=>{if(e.protoCodes().includes(Oo))return!1;const t=e.decapsulateCode(Ao);return Di.matches(t)})}const rt=_("libp2p:websockets");class P4{constructor(e){this.init=e}get[Symbol.toStringTag](){return"@libp2p/websockets"}get[er](){return!0}async dial(e,t){rt("dialing %s",e),t=t??{};const s=await this._connect(e,t),n=S4(s,e);rt("new outbound connection %s",n.remoteAddr);const i=await t.upgrader.upgradeOutbound(n);return rt("outbound connection %s upgraded",n.remoteAddr),i}async _connect(e,t){if(t?.signal?.aborted===!0)throw new Ns;const s=e.toOptions();rt("dialing %s:%s",s.host,s.port);const n=me(),i=u=>{rt.error("connection error:",u),n.reject(u)},o=Da(zo(e),this.init);if(o.socket.on!=null?o.socket.on("error",i):o.socket.onerror=i,t.signal==null)return await Promise.race([o.connected(),n.promise]),rt("connected %s",e),o;let a;const l=new Promise((u,h)=>{if(a=()=>{h(new Ns),o.close().catch(c=>{rt.error("error closing raw socket",c)})},t?.signal?.aborted===!0){a();return}t?.signal?.addEventListener("abort",a)});try{await Promise.race([l,n.promise,o.connected()])}finally{a!=null&&t?.signal?.removeEventListener("abort",a)}return rt("connected %s",e),o}createListener(e){return _4({...this.init,...e})}filter(e){return e=Array.isArray(e)?e:[e],this.init?.filter!=null?this.init?.filter(e):Cs||xi?I4(e):v4(e)}}function D4(r={}){return()=>new P4(r)}function ui(r){return new Uint8Array(r)}var k;(function(r){r[r.NEW_STREAM=0]="NEW_STREAM",r[r.MESSAGE_RECEIVER=1]="MESSAGE_RECEIVER",r[r.MESSAGE_INITIATOR=2]="MESSAGE_INITIATOR",r[r.CLOSE_RECEIVER=3]="CLOSE_RECEIVER",r[r.CLOSE_INITIATOR=4]="CLOSE_INITIATOR",r[r.RESET_RECEIVER=5]="RESET_RECEIVER",r[r.RESET_INITIATOR=6]="RESET_INITIATOR"})(k||(k={}));const lr=Object.freeze({0:"NEW_STREAM",1:"MESSAGE_RECEIVER",2:"MESSAGE_INITIATOR",3:"CLOSE_RECEIVER",4:"CLOSE_INITIATOR",5:"RESET_RECEIVER",6:"RESET_INITIATOR"}),pi=Object.freeze({NEW_STREAM:k.NEW_STREAM,MESSAGE:k.MESSAGE_INITIATOR,CLOSE:k.CLOSE_INITIATOR,RESET:k.RESET_INITIATOR}),T4=Object.freeze({MESSAGE:k.MESSAGE_RECEIVER,CLOSE:k.CLOSE_RECEIVER,RESET:k.RESET_RECEIVER}),bn=10*1024;class A4{constructor(){this._pool=ui(bn),this._poolOffset=0}write(e,t){const s=this._pool;let n=this._poolOffset;gt.encode(e.id<<3|e.type,s,n),n+=gt.encode.bytes??0,(e.type===k.NEW_STREAM||e.type===k.MESSAGE_INITIATOR||e.type===k.MESSAGE_RECEIVER)&&e.data!=null?gt.encode(e.data.length,s,n):gt.encode(0,s,n),n+=gt.encode.bytes??0;const i=s.subarray(this._poolOffset,n);bn-n<100?(this._pool=ui(bn),this._poolOffset=0):this._poolOffset=n,t.append(i),(e.type===k.NEW_STREAM||e.type===k.MESSAGE_INITIATOR||e.type===k.MESSAGE_RECEIVER)&&e.data!=null&&t.append(e.data)}}const fi=new A4;async function*O4(r,e=0){if(e==null||e===0){for await(const t of r){const s=new Xe;for(const n of t)fi.write(n,s);yield s.subarray()}return}yield*Ta(r,{size:e,serialize:(t,s)=>{for(const n of t)fi.write(n,s)}})}const Co=1<<20,C4=4<<20;class k4{constructor(e=Co,t=C4){this._buffer=new Xe,this._headerInfo=null,this._maxMessageSize=e,this._maxUnprocessedMessageQueueSize=t}write(e){if(e==null||e.length===0)return[];if(this._buffer.append(e),this._buffer.byteLength>this._maxUnprocessedMessageQueueSize)throw Object.assign(new Error("unprocessed message queue size too large!"),{code:"ERR_MSG_QUEUE_TOO_BIG"});const t=[];for(;this._buffer.length!==0;){if(this._headerInfo==null)try{this._headerInfo=this._decodeHeader(this._buffer)}catch(u){if(u.code==="ERR_MSG_TOO_BIG")throw u;break}const{id:s,type:n,length:i,offset:o}=this._headerInfo;if(this._buffer.length-o<i)break;const l={id:s,type:n};(n===k.NEW_STREAM||n===k.MESSAGE_INITIATOR||n===k.MESSAGE_RECEIVER)&&(l.data=this._buffer.sublist(o,o+i)),t.push(l),this._buffer.consume(o+i),this._headerInfo=null}return t}_decodeHeader(e){const{value:t,offset:s}=yi(e),{value:n,offset:i}=yi(e,s),o=t&7;if(lr[o]==null)throw new Error(`Invalid type received: ${o}`);if(n>this._maxMessageSize)throw Object.assign(new Error("message size too large!"),{code:"ERR_MSG_TOO_BIG"});return{id:t>>3,type:o,offset:s+i,length:n}}}const N4=128,gi=127;function yi(r,e=0){let t=0,s=0,n=e,i;const o=r.length;do{if(n>=o||s>49)throw e=0,new RangeError("Could not decode varint");i=r.get(n++),t+=s<28?(i&gi)<<s:(i&gi)*Math.pow(2,s),s+=7}while(i>=N4);return e=n-e,{value:t,offset:e}}const Ie=_("libp2p:mplex:stream"),_n="ERR_STREAM_RESET",M4="ERR_STREAM_ABORT",L4="ERR_SINK_ENDED",U4="ERR_DOUBLE_SINK";function x4(r){const{id:e,name:t,send:s,onEnd:n,type:i="initiator",maxMsgSize:o=Co}=r,a=new AbortController,l=new AbortController,u=new AbortController,h=i==="initiator"?pi:T4,c=i==="initiator"?`i${e}`:`r${e}`,d=`${t??e}`;let p=!1,g=!1,m=!1,E;const I={open:Date.now()},N=S=>{p||(p=!0,Ie.trace("%s stream %s source end - err: %o",i,d,S),S!=null&&E==null&&(E=S),g&&(b.stat.timeline.close=Date.now(),n?.(E)))},A=S=>{g||(g=!0,Ie.trace("%s stream %s sink end - err: %o",i,d,S),S!=null&&E==null&&(E=S),p&&(I.close=Date.now(),n?.(E)))},M=es({onEnd:N}),b={close:()=>{Ie.trace("%s stream %s close",i,d),b.closeRead(),b.closeWrite()},closeRead:()=>{Ie.trace("%s stream %s closeRead",i,d),!p&&M.end()},closeWrite:()=>{if(Ie.trace("%s stream %s closeWrite",i,d),!g){u.abort();try{s({id:e,type:h.CLOSE})}catch(S){Ie.trace("%s stream %s error sending close",i,t,S)}A()}},abort:S=>{Ie.trace("%s stream %s abort",i,d,S),M.end(S),a.abort(),A(S)},reset:()=>{const S=new w("stream reset",_n);l.abort(),M.end(S),A(S)},sink:async S=>{if(m)throw new w("sink already called on stream",U4);if(m=!0,g)throw new w("stream closed for writing",L4);const P=Bi([a.signal,l.signal,u.signal]);try{S=lt(S,P),i==="initiator"&&s({id:e,type:pi.NEW_STREAM,data:new Xe(T(d))});for await(let v of S)for(;v.length>0;){if(v.length<=o){s({id:e,type:h.MESSAGE,data:v instanceof Uint8Array?new Xe(v):v});break}v=v instanceof Uint8Array?new Xe(v):v,s({id:e,type:h.MESSAGE,data:v.sublist(0,o)}),v.consume(o)}}catch(v){if(v.type==="aborted"&&v.message==="The operation was aborted"){if(u.signal.aborted)return;l.signal.aborted&&(v.message="stream reset",v.code=_n),a.signal.aborted&&(v.message="stream aborted",v.code=M4)}if(v.code===_n)Ie.trace("%s stream %s reset",i,t);else{Ie.trace("%s stream %s error",i,t,v);try{s({id:e,type:h.RESET})}catch(H){Ie.trace("%s stream %s error sending reset",i,t,H)}}M.end(v),A(v);return}finally{P.clear()}try{s({id:e,type:h.CLOSE})}catch(v){Ie.trace("%s stream %s error sending close",i,t,v)}A()},source:M,sourcePush:S=>{M.push(S)},sourceReadableLength(){return M.readableLength},stat:{direction:i==="initiator"?"outbound":"inbound",timeline:I},metadata:{},id:c};return b}const Pe=_("libp2p:mplex"),K4=1024,F4=1024,B4=1024*1024*4,V4=5;function mi(r){const e={...r,type:`${lr[r.type]} (${r.type})`};return r.type===k.NEW_STREAM&&(e.data=D(r.data instanceof Uint8Array?r.data:r.data.subarray())),(r.type===k.MESSAGE_INITIATOR||r.type===k.MESSAGE_RECEIVER)&&(e.data=D(r.data instanceof Uint8Array?r.data:r.data.subarray(),"base16")),e}class G4{constructor(e){this.protocol="/mplex/6.7.0",e=e??{},this._streamId=0,this._streams={initiators:new Map,receivers:new Map},this._init=e,this.sink=this._createSink();const t=this._createSource();this._source=t,this.source=t,this.closeController=new AbortController,this.rateLimiter=new Mi.RateLimiterMemory({points:e.disconnectThreshold??V4,duration:1})}get streams(){const e=[];for(const t of this._streams.initiators.values())e.push(t);for(const t of this._streams.receivers.values())e.push(t);return e}newStream(e){if(this.closeController.signal.aborted)throw new Error("Muxer already closed");const t=this._streamId++;e=e==null?t.toString():e.toString();const s=this._streams.initiators;return this._newStream({id:t,name:e,type:"initiator",registry:s})}close(e){this.closeController.signal.aborted||(e!=null?this.streams.forEach(t=>{t.abort(e)}):this.streams.forEach(t=>{t.close()}),this.closeController.abort())}_newReceiverStream(e){const{id:t,name:s}=e,n=this._streams.receivers;return this._newStream({id:t,name:s,type:"receiver",registry:n})}_newStream(e){const{id:t,name:s,type:n,registry:i}=e;if(Pe("new %s stream %s",n,t),n==="initiator"&&this._streams.initiators.size===(this._init.maxOutboundStreams??F4))throw new w("Too many outbound streams open","ERR_TOO_MANY_OUTBOUND_STREAMS");if(i.has(t))throw new Error(`${n} stream ${t} already exists!`);const l=x4({id:t,name:s,send:u=>{Pe.enabled&&Pe.trace("%s stream %s send",n,t,mi(u)),this._source.push(u)},type:n,onEnd:()=>{Pe("%s stream with id %s and protocol %s ended",n,t,l.stat.protocol),i.delete(t),this._init.onStreamEnd!=null&&this._init.onStreamEnd(l)},maxMsgSize:this._init.maxMsgSize});return i.set(t,l),l}_createSink(){return async t=>{const s=Bi([this.closeController.signal,this._init.signal]);try{t=lt(t,s);const n=new k4(this._init.maxMsgSize,this._init.maxUnprocessedMessageQueueSize);for await(const i of t)for(const o of n.write(i))await this._handleIncoming(o);this._source.end()}catch(n){Pe("error in sink",n),this._source.end(n)}finally{s.clear()}}}_createSource(){const t=Aa({objectMode:!0,onEnd:s=>{this.close(s)}});return Object.assign(O4(t,this._init.minSendBytes),{push:t.push,end:t.end,return:t.return})}async _handleIncoming(e){const{id:t,type:s}=e;if(Pe.enabled&&Pe.trace("incoming message",mi(e)),e.type===k.NEW_STREAM){if(this._streams.receivers.size===(this._init.maxInboundStreams??K4)){Pe("too many inbound streams open"),this._source.push({id:t,type:k.RESET_RECEIVER});try{await this.rateLimiter.consume("new-stream",1)}catch{Pe("rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection"),this._source.end(new Error("Too many open streams"));return}return}const a=this._newReceiverStream({id:t,name:D(e.data instanceof Uint8Array?e.data:e.data.subarray())});this._init.onIncomingStream!=null&&this._init.onIncomingStream(a);return}const i=((s&1)===1?this._streams.initiators:this._streams.receivers).get(t);if(i==null){Pe("missing stream %s for message type %s",t,lr[s]);return}const o=this._init.maxStreamBufferSize??B4;switch(s){case k.MESSAGE_INITIATOR:case k.MESSAGE_RECEIVER:if(i.sourceReadableLength()>o){this._source.push({id:e.id,type:s===k.MESSAGE_INITIATOR?k.RESET_RECEIVER:k.RESET_INITIATOR});const a=new w("Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers","ERR_STREAM_INPUT_BUFFER_FULL");i.abort(a);return}i.sourcePush(e.data);break;case k.CLOSE_INITIATOR:case k.CLOSE_RECEIVER:i.closeRead();break;case k.RESET_INITIATOR:case k.RESET_RECEIVER:i.reset();break;default:Pe("unknown message type %s",s)}}}class $4{constructor(e={}){this.protocol="/mplex/6.7.0",this._init=e}createStreamMuxer(e={}){return new G4({...e,...this._init})}}function H4(r={}){return()=>new $4(r)}const cs=65535,wi=cs-16,q4=!!globalThis.process?.env?.DUMP_SESSION_KEYS,z4={hashSHA256(r){return yr.hash(r)},getHKDF(r,e){const n=new Oa(yr.SHA256,e,r).expand(96),i=n.subarray(0,32),o=n.subarray(32,64),a=n.subarray(64,96);return[i,o,a]},generateX25519KeyPair(){const r=on.generateKeyPair();return{publicKey:r.publicKey,privateKey:r.secretKey}},generateX25519KeyPairFromSeed(r){const e=on.generateKeyPairFromSeed(r);return{publicKey:e.publicKey,privateKey:e.secretKey}},generateX25519SharedKey(r,e){return on.sharedKey(r,e)},chaCha20Poly1305Encrypt(r,e,t,s){return new ks.ChaCha20Poly1305(s).seal(e,r,t)},chaCha20Poly1305Decrypt(r,e,t,s,n){return new ks.ChaCha20Poly1305(s).open(e,r,t,n)}},W4=r=>globalThis.Buffer?globalThis.Buffer.allocUnsafe(r):new Uint8Array(r),Qs=r=>{const e=W4(2);return new DataView(e.buffer,e.byteOffset,e.byteLength).setUint16(0,r,!1),e};Qs.bytes=2;const As=r=>{if(r.length<2)throw RangeError("Could not decode int16BE");return r instanceof Uint8Array?new DataView(r.buffer,r.byteOffset,r.byteLength).getUint16(0,!1):r.getUint16(0)};As.bytes=2;function Y4(r){return ve([r.ne,r.ciphertext],r.ne.length+r.ciphertext.length)}function Q4(r){return ve([r.ne,r.ns,r.ciphertext],r.ne.length+r.ns.length+r.ciphertext.length)}function X4(r){return ve([r.ns,r.ciphertext],r.ns.length+r.ciphertext.length)}function j4(r){if(r.length<32)throw new Error("Cannot decode stage 0 MessageBuffer: length less than 32 bytes.");return{ne:r.subarray(0,32),ciphertext:r.subarray(32,r.length),ns:new Uint8Array(0)}}function J4(r){if(r.length<80)throw new Error("Cannot decode stage 1 MessageBuffer: length less than 80 bytes.");return{ne:r.subarray(0,32),ns:r.subarray(32,80),ciphertext:r.subarray(80,r.length)}}function Z4(r){if(r.length<48)throw new Error("Cannot decode stage 2 MessageBuffer: length less than 48 bytes.");return{ne:new Uint8Array(0),ns:r.subarray(0,48),ciphertext:r.subarray(48,r.length)}}function e5(r,e){return async function*(t){for await(const s of t)for(let n=0;n<s.length;n+=wi){let i=n+wi;i>s.length&&(i=s.length);const o=r.encrypt(s.subarray(n,i),r.session);e?.encryptedPackets.increment(),yield Qs(o.byteLength),yield o}}}function t5(r,e){return async function*(t){for await(const s of t)for(let n=0;n<s.length;n+=cs){let i=n+cs;if(i>s.length&&(i=s.length),i-ks.TAG_LENGTH<n)throw new Error("Invalid chunk");const o=s.subarray(n,i),a=s.subarray(n,i-ks.TAG_LENGTH),{plaintext:l,valid:u}=r.decrypt(o,r.session,a);if(!u)throw e?.decryptErrors.increment(),new Error("Failed to validate decrypted chunk");e?.decryptedPackets.increment(),yield l}}}class Xs extends Error{constructor(e="Unexpected Peer"){super(e),this.code=Xs.code}static get code(){return"ERR_UNEXPECTED_PEER"}}class At extends Error{constructor(e="Invalid crypto exchange"){super(e),this.code=At.code}static get code(){return"ERR_INVALID_CRYPTO_EXCHANGE"}}var js;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{if(n.lengthDelimited!==!1&&s.fork(),t.webtransportCerthashes!=null)for(const i of t.webtransportCerthashes)s.uint32(10),s.bytes(i);n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={webtransportCerthashes:[]},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.webtransportCerthashes.push(t.bytes());break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(js||(js={}));var Js;(function(r){let e;r.codec=()=>(e==null&&(e=ne((t,s,n={})=>{n.lengthDelimited!==!1&&s.fork(),(n.writeDefaults===!0||t.identityKey!=null&&t.identityKey.byteLength>0)&&(s.uint32(10),s.bytes(t.identityKey??new Uint8Array(0))),(n.writeDefaults===!0||t.identitySig!=null&&t.identitySig.byteLength>0)&&(s.uint32(18),s.bytes(t.identitySig??new Uint8Array(0))),t.extensions!=null&&(s.uint32(34),js.codec().encode(t.extensions,s,{writeDefaults:!1})),n.lengthDelimited!==!1&&s.ldelim()},(t,s)=>{const n={identityKey:new Uint8Array(0),identitySig:new Uint8Array(0)},i=s==null?t.len:t.pos+s;for(;t.pos<i;){const o=t.uint32();switch(o>>>3){case 1:n.identityKey=t.bytes();break;case 2:n.identitySig=t.bytes();break;case 4:n.extensions=js.codec().decode(t,t.uint32());break;default:t.skipType(o&7);break}}return n})),e),r.encode=t=>re(t,r.codec()),r.decode=t=>ie(t,r.codec())})(Js||(Js={}));async function s5(r,e,t){const s=await r5(r,ko(e));if(r.publicKey==null)throw new Error("PublicKey was missing from local PeerId");return n5(r.publicKey,s,t)}function n5(r,e,t){return Js.encode({identityKey:r,identitySig:e,extensions:t??{webtransportCerthashes:[]}}).subarray()}async function r5(r,e){if(r.privateKey==null)throw new Error("PrivateKey was missing from PeerId");return await(await fs(r.privateKey)).sign(e)}async function Ei(r){return await bt(r.identityKey)}function bi(r){return Js.decode(r)}function ko(r){const e=T("noise-libp2p-static-key:");return ve([e,r],e.length+r.length)}async function _i(r,e,t){const s=await bt(e.identityKey);if(!s.equals(t))throw new Error(`Payload identity key ${s.toString()} does not match expected remote peer ${t.toString()}`);const n=ko(r);if(s.publicKey==null)throw new Error("PublicKey was missing from PeerId");if(e.identitySig==null)throw new Error("Signature was missing from message");if(!await as(s.publicKey).verify(n,e.identitySig))throw new Error("Static key doesn't match to peer that signed payload!");return s}function Ds(r){return!(!(r instanceof Uint8Array)||r.length!==32)}const oe=_("libp2p:noise");let Se;q4?Se=oe:Se=Object.assign(()=>{},{enabled:!1,trace:()=>{},error:()=>{}});function i5(r){Se(`LOCAL_STATIC_PUBLIC_KEY ${D(r.publicKey,"hex")}`),Se(`LOCAL_STATIC_PRIVATE_KEY ${D(r.privateKey,"hex")}`)}function Ri(r){r?(Se(`LOCAL_PUBLIC_EPHEMERAL_KEY ${D(r.publicKey,"hex")}`),Se(`LOCAL_PRIVATE_EPHEMERAL_KEY ${D(r.privateKey,"hex")}`)):Se("Missing local ephemeral keys.")}function o5(r){Se(`REMOTE_STATIC_PUBLIC_KEY ${D(r,"hex")}`)}function Si(r){Se(`REMOTE_EPHEMERAL_PUBLIC_KEY ${D(r,"hex")}`)}function a5(r){r.cs1&&r.cs2?(Se(`CIPHER_STATE_1 ${r.cs1.n.getUint64()} ${D(r.cs1.k,"hex")}`),Se(`CIPHER_STATE_2 ${r.cs2.n.getUint64()} ${D(r.cs2.k,"hex")}`)):Se("Missing cipher state.")}const c5=0,l5=4294967295,h5="Cipherstate has reached maximum n, a new handshake must be performed";class d5{constructor(e=c5){this.n=e,this.bytes=new Uint8Array(12),this.view=new DataView(this.bytes.buffer,this.bytes.byteOffset,this.bytes.byteLength),this.view.setUint32(4,e,!0)}increment(){this.n++,this.view.setUint32(4,this.n,!0)}getBytes(){return this.bytes}getUint64(){return this.n}assertValue(){if(this.n>l5)throw new Error(h5)}}class u5{constructor(e){this.crypto=e}encryptWithAd(e,t,s){const n=this.encrypt(e.k,e.n,t,s);return e.n.increment(),n}decryptWithAd(e,t,s,n){const{plaintext:i,valid:o}=this.decrypt(e.k,e.n,t,s,n);return o&&e.n.increment(),{plaintext:i,valid:o}}hasKey(e){return!this.isEmptyKey(e.k)}createEmptyKey(){return new Uint8Array(32)}isEmptyKey(e){const t=this.createEmptyKey();return J(t,e)}encrypt(e,t,s,n){return t.assertValue(),this.crypto.chaCha20Poly1305Encrypt(n,t.getBytes(),s,e)}encryptAndHash(e,t){let s;return this.hasKey(e.cs)?s=this.encryptWithAd(e.cs,e.h,t):s=t,this.mixHash(e,s),s}decrypt(e,t,s,n,i){t.assertValue();const o=this.crypto.chaCha20Poly1305Decrypt(n,t.getBytes(),s,e,i);return o?{plaintext:o,valid:!0}:{plaintext:new Uint8Array(0),valid:!1}}decryptAndHash(e,t){let s,n=!0;return this.hasKey(e.cs)?{plaintext:s,valid:n}=this.decryptWithAd(e.cs,e.h,t):s=t,this.mixHash(e,t),{plaintext:s,valid:n}}dh(e,t){try{const s=this.crypto.generateX25519SharedKey(e,t);return s.length===32?s:s.subarray(0,32)}catch(s){const n=s;return oe.error(n),new Uint8Array(32)}}mixHash(e,t){e.h=this.getHash(e.h,t)}getHash(e,t){return this.crypto.hashSHA256(ve([e,t],e.length+t.length))}mixKey(e,t){const[s,n]=this.crypto.getHKDF(e.ck,t);e.cs=this.initializeKey(n),e.ck=s}initializeKey(e){return{k:e,n:new d5}}initializeSymmetric(e){const t=T(e,"utf-8"),s=this.hashProtocolName(t),n=s,i=this.createEmptyKey();return{cs:this.initializeKey(i),ck:n,h:s}}hashProtocolName(e){if(e.length<=32){const t=new Uint8Array(32);return t.set(e),t}else return this.getHash(e,new Uint8Array(0))}split(e){const[t,s]=this.crypto.getHKDF(e.ck,new Uint8Array(0)),n=this.initializeKey(t),i=this.initializeKey(s);return{cs1:n,cs2:i}}writeMessageRegular(e,t){const s=this.encryptWithAd(e,new Uint8Array(0),t),n=this.createEmptyKey(),i=new Uint8Array(0);return{ne:n,ns:i,ciphertext:s}}readMessageRegular(e,t){return this.decryptWithAd(e,new Uint8Array(0),t.ciphertext)}}class p5 extends u5{initializeInitiator(e,t,s,n){const i="Noise_XX_25519_ChaChaPoly_SHA256",o=this.initializeSymmetric(i);this.mixHash(o,e);const a=new Uint8Array(32);return{ss:o,s:t,rs:s,psk:n,re:a}}initializeResponder(e,t,s,n){const i="Noise_XX_25519_ChaChaPoly_SHA256",o=this.initializeSymmetric(i);this.mixHash(o,e);const a=new Uint8Array(32);return{ss:o,s:t,rs:s,psk:n,re:a}}writeMessageA(e,t,s){const n=new Uint8Array(0);s!==void 0?e.e=s:e.e=this.crypto.generateX25519KeyPair();const i=e.e.publicKey;this.mixHash(e.ss,i);const o=this.encryptAndHash(e.ss,t);return{ne:i,ns:n,ciphertext:o}}writeMessageB(e,t){e.e=this.crypto.generateX25519KeyPair();const s=e.e.publicKey;this.mixHash(e.ss,s),this.mixKey(e.ss,this.dh(e.e.privateKey,e.re));const n=e.s.publicKey,i=this.encryptAndHash(e.ss,n);this.mixKey(e.ss,this.dh(e.s.privateKey,e.re));const o=this.encryptAndHash(e.ss,t);return{ne:s,ns:i,ciphertext:o}}writeMessageC(e,t){const s=e.s.publicKey,n=this.encryptAndHash(e.ss,s);this.mixKey(e.ss,this.dh(e.s.privateKey,e.re));const i=this.encryptAndHash(e.ss,t),a={ne:this.createEmptyKey(),ns:n,ciphertext:i},{cs1:l,cs2:u}=this.split(e.ss);return{h:e.ss.h,messageBuffer:a,cs1:l,cs2:u}}readMessageA(e,t){return Ds(t.ne)&&(e.re=t.ne),this.mixHash(e.ss,e.re),this.decryptAndHash(e.ss,t.ciphertext)}readMessageB(e,t){if(Ds(t.ne)&&(e.re=t.ne),this.mixHash(e.ss,e.re),!e.e)throw new Error("Handshake state `e` param is missing.");this.mixKey(e.ss,this.dh(e.e.privateKey,e.re));const{plaintext:s,valid:n}=this.decryptAndHash(e.ss,t.ns);n&&Ds(s)&&(e.rs=s),this.mixKey(e.ss,this.dh(e.e.privateKey,e.rs));const{plaintext:i,valid:o}=this.decryptAndHash(e.ss,t.ciphertext);return{plaintext:i,valid:n&&o}}readMessageC(e,t){const{plaintext:s,valid:n}=this.decryptAndHash(e.ss,t.ns);if(n&&Ds(s)&&(e.rs=s),!e.e)throw new Error("Handshake state `e` param is missing.");this.mixKey(e.ss,this.dh(e.e.privateKey,e.rs));const{plaintext:i,valid:o}=this.decryptAndHash(e.ss,t.ciphertext),{cs1:a,cs2:l}=this.split(e.ss);return{h:e.ss.h,plaintext:i,valid:n&&o,cs1:a,cs2:l}}initSession(e,t,s){const n=this.createEmptyKey(),i=new Uint8Array(32);let o;return e?o=this.initializeInitiator(t,s,i,n):o=this.initializeResponder(t,s,i,n),{hs:o,i:e,mc:0}}sendMessage(e,t,s){let n;if(e.mc===0)n=this.writeMessageA(e.hs,t,s);else if(e.mc===1)n=this.writeMessageB(e.hs,t);else if(e.mc===2){const{h:i,messageBuffer:o,cs1:a,cs2:l}=this.writeMessageC(e.hs,t);n=o,e.h=i,e.cs1=a,e.cs2=l}else if(e.mc>2)if(e.i){if(!e.cs1)throw new Error("CS1 (cipher state) is not defined");n=this.writeMessageRegular(e.cs1,t)}else{if(!e.cs2)throw new Error("CS2 (cipher state) is not defined");n=this.writeMessageRegular(e.cs2,t)}else throw new Error("Session invalid.");return e.mc++,n}recvMessage(e,t){let s=new Uint8Array(0),n=!1;if(e.mc===0)({plaintext:s,valid:n}=this.readMessageA(e.hs,t));else if(e.mc===1)({plaintext:s,valid:n}=this.readMessageB(e.hs,t));else if(e.mc===2){const{h:i,plaintext:o,valid:a,cs1:l,cs2:u}=this.readMessageC(e.hs,t);s=o,n=a,e.h=i,e.cs1=l,e.cs2=u}return e.mc++,{plaintext:s,valid:n}}}class f5{constructor(e,t,s,n,i,o,a,l){this.remoteExtensions={webtransportCerthashes:[]},this.isInitiator=e,this.payload=t,this.prologue=s,this.staticKeypair=i,this.connection=o,a&&(this.remotePeer=a),this.xx=l??new p5(n),this.session=this.xx.initSession(this.isInitiator,this.prologue,this.staticKeypair)}async propose(){if(i5(this.session.hs.s),this.isInitiator){oe.trace("Stage 0 - Initiator starting to send first message.");const e=this.xx.sendMessage(this.session,new Uint8Array(0));this.connection.writeLP(Y4(e)),oe.trace("Stage 0 - Initiator finished sending first message."),Ri(this.session.hs.e)}else{oe.trace("Stage 0 - Responder waiting to receive first message...");const e=j4((await this.connection.readLP()).subarray()),{valid:t}=this.xx.recvMessage(this.session,e);if(!t)throw new At("xx handshake stage 0 validation fail");oe.trace("Stage 0 - Responder received first message."),Si(this.session.hs.re)}}async exchange(){if(this.isInitiator){oe.trace("Stage 1 - Initiator waiting to receive first message from responder...");const e=J4((await this.connection.readLP()).subarray()),{plaintext:t,valid:s}=this.xx.recvMessage(this.session,e);if(!s)throw new At("xx handshake stage 1 validation fail");oe.trace("Stage 1 - Initiator received the message."),Si(this.session.hs.re),o5(this.session.hs.rs),oe.trace("Initiator going to check remote's signature...");try{const n=bi(t);this.remotePeer=this.remotePeer||await Ei(n),await _i(this.session.hs.rs,n,this.remotePeer),this.setRemoteNoiseExtension(n.extensions)}catch(n){const i=n;throw new Xs(`Error occurred while verifying signed payload: ${i.message}`)}oe.trace("All good with the signature!")}else{oe.trace("Stage 1 - Responder sending out first message with signed payload and static key.");const e=this.xx.sendMessage(this.session,this.payload);this.connection.writeLP(Q4(e)),oe.trace("Stage 1 - Responder sent the second handshake message with signed payload."),Ri(this.session.hs.e)}}async finish(){if(this.isInitiator){oe.trace("Stage 2 - Initiator sending third handshake message.");const e=this.xx.sendMessage(this.session,this.payload);this.connection.writeLP(X4(e)),oe.trace("Stage 2 - Initiator sent message with signed payload.")}else{oe.trace("Stage 2 - Responder waiting for third handshake message...");const e=Z4((await this.connection.readLP()).subarray()),{plaintext:t,valid:s}=this.xx.recvMessage(this.session,e);if(!s)throw new At("xx handshake stage 2 validation fail");oe.trace("Stage 2 - Responder received the message, finished handshake.");try{const n=bi(t);this.remotePeer=this.remotePeer||await Ei(n),await _i(this.session.hs.rs,n,this.remotePeer),this.setRemoteNoiseExtension(n.extensions)}catch(n){const i=n;throw new Xs(`Error occurred while verifying signed payload: ${i.message}`)}}a5(this.session)}encrypt(e,t){const s=this.getCS(t);return this.xx.encryptWithAd(s,new Uint8Array(0),e)}decrypt(e,t,s){const n=this.getCS(t,!1);return this.xx.decryptWithAd(n,new Uint8Array(0),e,s)}getRemoteStaticKey(){return this.session.hs.rs}getCS(e,t=!0){if(!e.cs1||!e.cs2)throw new At("Handshake not completed properly, cipher state does not exist.");return this.isInitiator?t?e.cs1:e.cs2:t?e.cs2:e.cs1}setRemoteNoiseExtension(e){e&&(this.remoteExtensions=e)}}function g5(r){return{xxHandshakeSuccesses:r.registerCounter("libp2p_noise_xxhandshake_successes_total",{help:"Total count of noise xxHandshakes successes_"}),xxHandshakeErrors:r.registerCounter("libp2p_noise_xxhandshake_error_total",{help:"Total count of noise xxHandshakes errors"}),encryptedPackets:r.registerCounter("libp2p_noise_encrypted_packets_total",{help:"Total count of noise encrypted packets successfully"}),decryptedPackets:r.registerCounter("libp2p_noise_decrypted_packets_total",{help:"Total count of noise decrypted packets"}),decryptErrors:r.registerCounter("libp2p_noise_decrypt_errors_total",{help:"Total count of noise decrypt errors"})}}class y5{constructor(e={}){this.protocol="/noise";const{staticNoiseKey:t,extensions:s,crypto:n,prologueBytes:i,metrics:o}=e;this.crypto=n??z4,this.extensions=s,this.metrics=o?g5(o):void 0,t?this.staticKeys=this.crypto.generateX25519KeyPairFromSeed(t):this.staticKeys=this.crypto.generateX25519KeyPair(),this.prologue=i??new Uint8Array(0)}async secureOutbound(e,t,s){const n=mr(t,{lengthEncoder:Qs,lengthDecoder:As,maxDataLength:cs}),i=await this.performHandshake({connection:n,isInitiator:!0,localPeer:e,remotePeer:s});return{conn:await this.createSecureConnection(n,i),remoteExtensions:i.remoteExtensions,remotePeer:i.remotePeer}}async secureInbound(e,t,s){const n=mr(t,{lengthEncoder:Qs,lengthDecoder:As,maxDataLength:cs}),i=await this.performHandshake({connection:n,isInitiator:!1,localPeer:e,remotePeer:s});return{conn:await this.createSecureConnection(n,i),remotePeer:i.remotePeer,remoteExtensions:i.remoteExtensions}}async performHandshake(e){const t=await s5(e.localPeer,this.staticKeys.publicKey,this.extensions);return await this.performXXHandshake(e,t)}async performXXHandshake(e,t){const{isInitiator:s,remotePeer:n,connection:i}=e,o=new f5(s,t,this.prologue,this.crypto,this.staticKeys,i,n);try{await o.propose(),await o.exchange(),await o.finish(),this.metrics?.xxHandshakeSuccesses.increment()}catch(a){if(this.metrics?.xxHandshakeErrors.increment(),a instanceof Error)throw a.message=`Error occurred during XX handshake: ${a.message}`,a}return o}async createSecureConnection(e,t){const[s,n]=Ca(),i=e.unwrap();return await z(s,e5(t,this.metrics),i,Ze({lengthDecoder:As}),t5(t,this.metrics),s),n}}function m5(r={}){return()=>new y5(r)}const w5=Gt.bind({ignoreUndefined:!0,concatArrays:!0});function P5({options:r={},peerId:e,multiaddrs:t=[],repo:s,keychainConfig:n={},config:i={}}){const{datastore:o}=s,a=E5({options:r,config:i,datastore:o,keychainConfig:n,peerId:e,multiaddrs:t});return typeof r.libp2p=="function"?r.libp2p({libp2pOptions:a,options:r,config:i,datastore:o,peerId:e}):(a.start=!1,l3(a))}function E5({options:r,config:e,datastore:t,keychainConfig:s,peerId:n,multiaddrs:i}){const o=()=>{const p=U(e,"Pubsub.Router")||"gossipsub",g=Zc();if(!g[p])throw f(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${p} router.`),"ERR_NOT_SUPPORTED");return g[p]},a={datastore:t,peerId:n},l={addresses:{listen:i.map(p=>p.toString()),announce:U(r,"addresses.announce",U(e,"Addresses.Announce",[])),noAnnounce:U(r,"addresses.noAnnounce",U(e,"Addresses.NoAnnounce",[]))},connectionManager:U(r,"connectionManager",{maxConnections:U(r,"config.Swarm.ConnMgr.HighWater",U(e,"Swarm.ConnMgr.HighWater")),minConnections:U(r,"config.Swarm.ConnMgr.LowWater",U(e,"Swarm.ConnMgr.LowWater"))}),keychain:s,identify:{host:{agentVersion:`js-ipfs/${Wo}`}},contentRouters:[],peerRouters:[],peerDiscovery:[],transports:[],streamMuxers:[H4({maxInboundStreams:256,maxOutboundStreams:1024})],connectionEncryption:[m5()],relay:{enabled:U(r,"relay.enabled",U(e,"relay.enabled",!0)),hop:{enabled:U(r,"relay.hop.enabled",U(e,"relay.hop.enabled",!1)),active:U(r,"relay.hop.active",U(e,"relay.hop.active",!1))}},nat:{enabled:!U(e,"Swarm.DisableNatPortMap",!1)}};U(r,"config.Pubsub.Enabled",U(e,"Pubsub.Enabled",!0))&&(l.pubsub=o()),U(e,"Routing.Type","dhtclient")!=="none"&&(l.dht=g4({clientMode:U(e,"Routing.Type","dht")!=="dhtserver",kBucketSize:U(r,"dht.kBucketSize",20),validators:{ipns:ka},selectors:{ipns:Na}}));const u=U(r,"config.Bootstrap",U(e,"Bootstrap",[]));u.length>0&&l.peerDiscovery?.push(b4({list:u}));let h=U(r,"libp2p",void 0);typeof h=="function"&&(h=void 0);const c=w5(a,T2(),l,h),d=U(r,"config.Addresses.Delegates",U(e,"Addresses.Delegates",[]));if(d.length>0){const p=d[Math.floor(Math.random()*d.length)],g=G(p).toOptions(),m={host:g.host,protocol:parseInt(g.port)===443?"https":"http",port:g.port},E=Yo(m);c.contentRouters?.push(o2(E)),c.peerRouters?.push(s2(E))}return U(r,"config.Discovery.MDNS.Enabled",U(e,"Discovery.MDNS.Enabled",!0))||(c.peerDiscovery=c.peerDiscovery?.filter(p=>{try{if(typeof p=="function")return p({})[Symbol.toStringTag]!=="@libp2p/mdns"}catch{}return!0})),c.transports==null&&(c.transports=[]),c.transports.find(p=>{try{if(typeof p=="function")return p({})[Symbol.toStringTag]==="@libp2p/websockets"}catch{}return!1})==null&&c.transports.push(D4()),c}export{w as C,ye as L,ws as a,bt as b,P5 as c,t3 as d,v5 as e,ji as f,as as g,Ve as h,Ms as i,_ as l,q as p,je as s,An as t,fs as u};
//# sourceMappingURL=libp2p-modules-7ceb3045.js.map
