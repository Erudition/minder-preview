{"version":3,"file":"ipfs-modules-6140a6e2.js","sources":["../../node_modules/.pnpm/ipfs-utils@9.0.14/node_modules/ipfs-utils/src/env.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/vendor/base-x.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bytes.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base58.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base32.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base64.js","../../node_modules/.pnpm/ipfs-unixfs@9.0.1/node_modules/ipfs-unixfs/src/unixfs.js","../../node_modules/.pnpm/ipfs-unixfs@9.0.1/node_modules/ipfs-unixfs/src/index.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/vendor/varint.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/varint.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/hashes/digest.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/cid.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/hashes/hasher.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/hashes/identity.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/identity.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base2.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base8.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base10.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base16.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base36.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/hashes/sha2-browser.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/codecs/raw.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/codecs/json.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/basics.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/errors.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/index.js","../../node_modules/.pnpm/@multiformats+multiaddr@12.1.3/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../node_modules/.pnpm/@multiformats+multiaddr@12.1.3/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../node_modules/.pnpm/@multiformats+multiaddr@12.1.3/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../node_modules/.pnpm/@multiformats+multiaddr@12.1.3/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../node_modules/.pnpm/@multiformats+multiaddr@12.1.3/node_modules/@multiformats/multiaddr/dist/src/index.js","../../node_modules/.pnpm/@multiformats+mafmt@11.1.2/node_modules/@multiformats/mafmt/dist/src/index.js","../../node_modules/.pnpm/is-ipfs@8.0.1/node_modules/is-ipfs/dist/src/index.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/errors.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/with-timeout-option.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/to-cid-and-path.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/utils/service.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/start.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/stop.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/utils/tlru.js","../../node_modules/.pnpm/ipfs-utils@9.0.14/node_modules/ipfs-utils/src/http/error.js","../../node_modules/.pnpm/ipfs-utils@9.0.14/node_modules/ipfs-utils/src/fetch.browser.js","../../node_modules/.pnpm/ipfs-utils@9.0.14/node_modules/ipfs-utils/src/http/fetch.browser.js","../../node_modules/.pnpm/ipfs-utils@9.0.14/node_modules/ipfs-utils/src/http.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/dns.browser.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dns.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/is-online.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/resolve.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/add.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/pins/normalise-input.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/pin-types.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/add-all.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/ls.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/rm.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/rm-all.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pin/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/publisher.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/republisher.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/resolver.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/utils/tlru.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/routing/pubsub-datastore.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/routing/offline-datastore.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/routing/dht-datastore.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/ipns/routing/config.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/ipns.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/publish.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/resolve.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/pubsub/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/pubsub/cancel.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/pubsub/state.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/pubsub/subs.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/pubsub/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/name/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/refs/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/refs/local.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bitswap/wantlist.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bitswap/wantlist-for-peer.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bitswap/unwant.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bitswap/stat.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bitswap/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/add.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/clear.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/list.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/config.browser.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/reset.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/rm.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/bootstrap/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/get.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/put.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/rm.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/stat.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/block/index.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/utils.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-content.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-input-single.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/add.js","../../node_modules/.pnpm/@multiformats+murmur3@2.1.3/node_modules/@multiformats/murmur3/src/index.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/options.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/utils/persist.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/dir.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/file/flat.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/file/balanced.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/file/trickle.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/file/index.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/chunker/rabin.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/validate-chunks.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dag-builder/index.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dir.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dir-flat.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dir-sharded.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/flat-to-shard.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/utils/to-path-components.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/tree-builder.js","../../node_modules/.pnpm/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/index.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-input-multiple.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/add-all/utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/add-all/index.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/utils/find-cid-in-shard.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/utils/extract-data-from-block.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/utils/validate-offset-and-length.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/file.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/directory.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/index.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/raw.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/identity.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/index.js","../../node_modules/.pnpm/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/cat.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/get.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/ls.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/root.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/version.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/version.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/id.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/config/profiles.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/config/index.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/block.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/traversal.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/export.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/get.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/import.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/put.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/resolve.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dag/index.js","../../node_modules/.pnpm/@multiformats+multiaddr-to-uri@9.0.4/node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/preload.browser.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/preload.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/mfs-preload.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/create-lock.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/to-path-components.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/stat.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/to-trail.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/persist.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/hamt-constants.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/dir-sharded.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/hamt-utils.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/add-link.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/update-tree.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/create-node.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/mkdir.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/cp.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/remove-link.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/rm.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/chmod.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/flush.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/mv.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/touch.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/read.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/write.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/ls.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/files/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/export.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/gen.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/import.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/info.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/list.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/rename.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/rm.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/key/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/get.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/data.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/links.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/new.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/put.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/stat.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/patch/add-link.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/patch/append-data.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/patch/rm-link.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/patch/set-data.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/patch/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/object/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/repo/gc.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/repo/stat.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/constants.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/repo/version.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/repo/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/stats/bw.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/stats/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-8/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-9/utils.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin-set.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-9/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/utils.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-10/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/proto-book.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/address-book.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/envelope.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer-record.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/errors.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/repo/init.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/repo/version.js","../../node_modules/.pnpm/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/index.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/errors.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/utils/level.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/version.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/config.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/spec.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/api-addr.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/idstore.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/locks/memory.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/default-options.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/default-datastore.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/utils/blockstore.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/utils/walk-dag.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/pin-manager.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/pinned-blockstore.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/gc.js","../../node_modules/.pnpm/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/index.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/repo.browser.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/vendor/base-x.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bytes.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base10.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base16.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base2.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base32.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base36.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base58.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base64.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base8.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/identity.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/codecs/json.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/basics.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/multibases.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/multicodecs.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/multihashes.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/to-url-string.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/agent.browser.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/core.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/configure.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/mode-to-string.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/parse-mtime.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/to-url-search-params.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bitswap/wantlist.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bitswap/stat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bitswap/unwant.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bitswap/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/block/get.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/files/normalise-input-multiple.browser.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/mode-to-string.js","../../node_modules/.pnpm/ipfs-core-utils@0.18.0/node_modules/ipfs-core-utils/src/multipart-request.browser.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/abort-signal.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/block/put.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/block/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/block/stat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/block/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/add.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/clear.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/list.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/reset.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/bootstrap/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/profiles/apply.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/object-to-camel.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/profiles/list.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/profiles/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/get.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/get-all.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/replace.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/set.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/config/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/export.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/resolve.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/get.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/import.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/put.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/resolve.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dag/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/response-types.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/map-event.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/find-peer.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/find-provs.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/get.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/provide.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/put.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/query.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dht/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/diag/cmds.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/diag/net.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/diag/sys.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/diag/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/chmod.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/cp.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/flush.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/object-to-camel-with-metadata.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/mkdir.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/mv.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/read.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/stat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/touch.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/write.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/files/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/export.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/gen.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/import.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/info.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/list.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/rename.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/key/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/log/level.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/log/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/log/tail.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/log/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/publish.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/resolve.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/pubsub/cancel.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/pubsub/state.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/pubsub/subs.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/pubsub/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/name/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/data.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/get.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/links.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/new.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/put.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/stat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/patch/add-link.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/patch/append-data.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/patch/rm-link.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/patch/set-data.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/patch/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/object/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/add-all.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/add.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/rm-all.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/utils.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/add.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/rm-all.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/service/utils.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/service/add.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/service/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/service/rm.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/service/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/remote/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pin/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/lib/http-rpc-wire-format.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/peers.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/publish.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/subscribe.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/unsubscribe.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/pubsub/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/refs/local.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/refs/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/repo/gc.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/repo/stat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/repo/version.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/repo/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/stats/bw.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/stats/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/addrs.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/connect.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/disconnect.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/local-addrs.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/peers.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/swarm/index.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/add-all.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/add.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/cat.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/commands.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/dns.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/get-endpoint-config.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/get.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/id.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/is-online.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/ls.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/mount.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/ping.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/resolve.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/start.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/stop.js","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/version.js","../../__vite-browser-external","../../node_modules/.pnpm/ipfs-http-client@60.0.0/node_modules/ipfs-http-client/src/index.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js","../../node_modules/.pnpm/@multiformats+mafmt@12.1.0/node_modules/@multiformats/mafmt/dist/src/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/storage.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/utils/varint-encoder.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/wantlist/entry.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/message/message.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/wantlist/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/message/entry.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/utils/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/message/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/constants.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/want-manager/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/network.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/decision-engine/ledger.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/utils/sorted-map.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/decision-engine/req-queue.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/decision-engine/task-merger.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/decision-engine/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/notifications.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/stats/stat.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/stats/index.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/bitswap.js","../../node_modules/.pnpm/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/block-storage.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/network.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/addrs.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/connect.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/disconnect.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/local-addrs.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/peers.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/swarm/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/ping.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/dht.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/pubsub.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/index.js","../../node_modules/.pnpm/ipfs@0.66.0_prom-client@14.2.0/node_modules/ipfs/src/index.js","../../node_modules/.pnpm/orbit-db-store@5.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0_orbit-db-io@3.0.0/node_modules/orbit-db-store/src/Index.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/g-set.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/lamport-clock.js","../../node_modules/.pnpm/orbit-db-io@3.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-io/src/index.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/utils/difference.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/utils/find-uniques.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/utils/is-defined.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/entry.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/entry-io.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/log-sorting.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/log-errors.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/log-io.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/default-access-controller.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/entry-index.js","../../node_modules/.pnpm/ipfs-log@6.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/ipfs-log/src/log.js","../../node_modules/.pnpm/orbit-db-store@5.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0_orbit-db-io@3.0.0/node_modules/orbit-db-store/src/Replicator.js","../../node_modules/.pnpm/orbit-db-store@5.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0_orbit-db-io@3.0.0/node_modules/orbit-db-store/src/replication-info.js","../../node_modules/.pnpm/orbit-db-store@5.0.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0_orbit-db-io@3.0.0/node_modules/orbit-db-store/src/Store.js","../../node_modules/.pnpm/ipfs-pubsub-peer-monitor@0.1.0/node_modules/ipfs-pubsub-peer-monitor/src/utils.js","../../node_modules/.pnpm/ipfs-pubsub-peer-monitor@0.1.0/node_modules/ipfs-pubsub-peer-monitor/src/ipfs-pubsub-peer-monitor.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/block.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/access-controllers/interface.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/access-controllers/manifest.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/access-controllers/legacy-ipfs.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/utils/io.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/access-controllers/ipfs.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/utils/ensure-ac-address.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/access-controllers/orbitdb.js","../../node_modules/.pnpm/orbit-db-access-controllers@0.4.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db-access-controllers/src/index.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/orbit-db-address.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/db-manifest.js","../../node_modules/.pnpm/ipfs-pubsub-1on1@0.1.0/node_modules/ipfs-pubsub-1on1/src/protocol.js","../../node_modules/.pnpm/ipfs-pubsub-1on1@0.1.0/node_modules/ipfs-pubsub-1on1/src/encoding.js","../../node_modules/.pnpm/ipfs-pubsub-1on1@0.1.0/node_modules/ipfs-pubsub-1on1/src/wait-for-peers.js","../../node_modules/.pnpm/ipfs-pubsub-1on1@0.1.0/node_modules/ipfs-pubsub-1on1/src/get-peer-id.js","../../node_modules/.pnpm/ipfs-pubsub-1on1@0.1.0/node_modules/ipfs-pubsub-1on1/src/direct-channel.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/exchange-heads.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/utils/is-defined.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/fs-shim.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/migrations/0.21-0.22.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/migrations/index.js","../../node_modules/.pnpm/orbit-db@0.29.0_go-ipfs@0.22.0_ipfs@0.66.0_ipfsd-ctl@13.0.0/node_modules/orbit-db/src/OrbitDB.js"],"sourcesContent":["'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","\nexport class NotInitializedError extends Error {\n  constructor (message = 'not initialized') {\n    super(message)\n    this.name = 'NotInitializedError'\n    this.code = NotInitializedError.code\n  }\n}\nNotInitializedError.code = 'ERR_NOT_INITIALIZED'\n\nexport class AlreadyInitializingError extends Error {\n  constructor (message = 'cannot initialize an initializing node') {\n    super(message)\n    this.name = 'AlreadyInitializingError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializingError.code = 'ERR_ALREADY_INITIALIZING'\n\nexport class AlreadyInitializedError extends Error {\n  constructor (message = 'cannot re-initialize an initialized node') {\n    super(message)\n    this.name = 'AlreadyInitializedError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializedError.code = 'ERR_ALREADY_INITIALIZED'\n\nexport class NotStartedError extends Error {\n  constructor (message = 'not started') {\n    super(message)\n    this.name = 'NotStartedError'\n    this.code = NotStartedError.code\n  }\n}\nNotStartedError.code = 'ERR_NOT_STARTED'\n\nexport class AlreadyStartingError extends Error {\n  constructor (message = 'cannot start, already startin') {\n    super(message)\n    this.name = 'AlreadyStartingError'\n    this.code = AlreadyStartingError.code\n  }\n}\nAlreadyStartingError.code = 'ERR_ALREADY_STARTING'\n\nexport class AlreadyStartedError extends Error {\n  constructor (message = 'cannot start, already started') {\n    super(message)\n    this.name = 'AlreadyStartedError'\n    this.code = AlreadyStartedError.code\n  }\n}\nAlreadyStartedError.code = 'ERR_ALREADY_STARTED'\n\nexport class NotEnabledError extends Error {\n  constructor (message = 'not enabled') {\n    super(message)\n    this.name = 'NotEnabledError'\n    this.code = NotEnabledError.code\n  }\n}\nNotEnabledError.code = 'ERR_NOT_ENABLED'\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc'],\n    [281, 0, 'webrtc-w3c'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport { IpNet } from '@chainsafe/netmask';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport varint from 'varint';\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport varint from 'varint';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport varint from 'varint';\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (this.#string == null) {\n            this.#string = codec.bytesToString(this.bytes);\n        }\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (this.#tuples == null) {\n            this.#tuples = codec.bytesToTuples(this.bytes);\n        }\n        return this.#tuples;\n    }\n    stringTuples() {\n        if (this.#stringTuples == null) {\n            this.#stringTuples = codec.tuplesToStringTuples(this.tuples());\n        }\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        // on initialization, this.#path is undefined\n        // after the first call, it is either a string or null\n        if (this.#path === undefined) {\n            try {\n                this.#path = this.stringTuples().filter((tuple) => {\n                    const proto = getProtocol(tuple[0]);\n                    if (proto.path === true) {\n                        return true;\n                    }\n                    return false;\n                })[0][1];\n                if (this.#path == null) {\n                    this.#path = null;\n                }\n            }\n            catch {\n                this.#path = null;\n            }\n        }\n        return this.#path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTC = and(UDP, base('webrtc'), base('certhash'));\nexport const WebRTC = or(and(_WebRTC, base('p2p')), _WebRTC);\nexport const WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nexport const WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS, WebRTC);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), WebRTCStar, WebRTCDirect, WebRTC, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CID } from 'multiformats/cid';\nimport { URL } from 'iso-url';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nexport const pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 2;\n// CID, libp2p-key or DNSLink\nexport const subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nconst subdomainIdMatch = 1;\nconst subdomainProtocolMatch = 2;\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\nfunction isMultihash(hash) {\n    const formatted = convertToString(hash);\n    if (formatted === false) {\n        return false;\n    }\n    try {\n        Digest.decode(base58btc.decode('z' + formatted));\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isMultiaddr(input) {\n    try {\n        return Boolean(multiaddr(input));\n    }\n    catch {\n        return false;\n    }\n}\nfunction isBase32EncodedMultibase(hash) {\n    try {\n        let cid;\n        if (isString(hash)) {\n            cid = CID.parse(hash);\n        }\n        else {\n            cid = CID.asCID(hash);\n        }\n        if (cid == null) {\n            return false;\n        }\n        base32.decode(cid.toString());\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isCID(hash) {\n    try {\n        if (isString(hash)) {\n            return Boolean(CID.parse(hash));\n        }\n        if (hash instanceof Uint8Array) {\n            return Boolean(CID.decode(hash));\n        }\n        return Boolean(CID.asCID(hash)); // eslint-disable-line no-new\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr(input) {\n    return isMultiaddr(input) && mafmt.P2P.matches(input);\n}\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipfs') {\n        return false;\n    }\n    let hash = match[hashMatch];\n    if (hash != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure hash is case-insensitive\n        // (browsers force-lowercase authority component anyway)\n        hash = hash.toLowerCase();\n    }\n    return isCID(hash);\n}\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipns') {\n        return false;\n    }\n    let ipnsId = match[hashMatch];\n    if (ipnsId != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure ipnsId is case-insensitive\n        // (browsers force-lowercase authority compotent anyway)\n        ipnsId = ipnsId.toLowerCase();\n        // Check if it is cidv1\n        if (isCID(ipnsId))\n            return true;\n        // Check if it looks like FQDN\n        try {\n            if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n                // name without tld, assuming its inlined into a single DNS label\n                // (https://github.com/ipfs/in-web-browsers/issues/169)\n                // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n                ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');\n            }\n            // URL implementation in web browsers forces lowercase of the hostname\n            const { hostname } = new URL(`http://${ipnsId}`); // eslint-disable-line no-new\n            // Check if potential FQDN has an explicit TLD\n            return fqdnWithTld.test(hostname);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {any} input\n */\nfunction isString(input) {\n    return typeof input === 'string';\n}\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString(input) {\n    if (input instanceof Uint8Array) {\n        return uint8ArrayToString(input, 'base58btc');\n    }\n    if (isString(input)) {\n        return input;\n    }\n    return false;\n}\nexport const ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url);\nexport const ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\nexport const ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\nexport const url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);\nexport const path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern);\nexport { isMultihash as multihash };\nexport { isMultiaddr as multiaddr };\nexport { isPeerMultiaddr as peerMultiaddr };\nexport { isCID as cid };\nexport const base32cid = (cid) => (isCID(cid) && isBase32EncodedMultibase(cid));\nexport const ipfsPath = (path) => isIpfs(path, pathPattern);\nexport const ipnsPath = (path) => isIpns(path, pathPattern);\nexport const urlOrPath = (x) => url(x) || path(x);\nexport const cidPath = (path) => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern);\n//# sourceMappingURL=index.js.map","\nexport class TimeoutError extends Error {\n  constructor (message = 'request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n    this.code = TimeoutError.code\n  }\n}\n\nTimeoutError.code = 'ERR_TIMEOUT'\n","/* eslint-disable no-unreachable */\n\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\nimport parseDuration from 'parse-duration'\nimport { TimeoutError } from './errors.js'\n\n/**\n * @template {any[]} Args\n * @template {Promise<any> | AsyncIterable<any>} R - The return type of `fn`\n * @param {(...args:Args) => R} fn\n * @param {number} [optionsArgIndex]\n * @returns {(...args:Args) => R}\n */\nexport function withTimeoutOption (fn, optionsArgIndex) {\n  // eslint-disable-next-line\n  return /** @returns {R} */(/** @type {Args} */...args) => {\n    const options = args[optionsArgIndex == null ? args.length - 1 : optionsArgIndex]\n    if (!options || !options.timeout) return fn(...args)\n\n    const timeout = typeof options.timeout === 'string'\n      ? parseDuration(options.timeout)\n      : options.timeout\n\n    const controller = new TimeoutController(timeout)\n\n    options.signal = anySignal([options.signal, controller.signal])\n\n    const fnRes = fn(...args)\n    // eslint-disable-next-line promise/param-names\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      controller.signal.addEventListener('abort', () => {\n        reject(new TimeoutError())\n      })\n    })\n\n    const start = Date.now()\n\n    const maybeThrowTimeoutError = () => {\n      if (controller.signal.aborted) {\n        throw new TimeoutError()\n      }\n\n      const timeTaken = Date.now() - start\n\n      // if we have starved the event loop by adding microtasks, we could have\n      // timed out already but the TimeoutController will never know because it's\n      // setTimeout will not fire until we stop adding microtasks\n      if (timeTaken > timeout) {\n        controller.abort()\n        throw new TimeoutError()\n      }\n    }\n\n    // @ts-expect-error\n    if (fnRes[Symbol.asyncIterator]) {\n      // @ts-expect-error\n      return (async function * () {\n        // @ts-expect-error\n        const it = fnRes[Symbol.asyncIterator]()\n\n        try {\n          while (true) {\n            const { value, done } = await Promise.race([it.next(), timeoutPromise])\n\n            if (done) {\n              break\n            }\n\n            maybeThrowTimeoutError()\n\n            yield value\n          }\n        } catch (/** @type {any} */ err) {\n          maybeThrowTimeoutError()\n\n          throw err\n        } finally {\n          controller.clear()\n\n          if (it.return) {\n            it.return()\n          }\n        }\n      })()\n    }\n\n    // @ts-expect-error\n    return (async () => {\n      try {\n        const res = await Promise.race([fnRes, timeoutPromise])\n\n        maybeThrowTimeoutError()\n\n        return res\n      } catch (/** @type {any} */ err) {\n        maybeThrowTimeoutError()\n\n        throw err\n      } finally {\n        controller.clear()\n      }\n    })()\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath (string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n","/* eslint-disable no-unreachable */\n\nimport * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport * as dagPB from '@ipld/dag-pb'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\n\nexport const OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\nexport const MFS_ROOT_KEY = new Key('/local/filesroot')\nexport const MFS_MAX_CHUNK_SIZE = 262144\nexport const MFS_MAX_LINKS = 174\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string | CID} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\nexport const normalizePath = (pathStr) => {\n  const cid = CID.asCID(pathStr)\n\n  if (cid) {\n    return `/ipfs/${pathStr}`\n  }\n\n  const str = pathStr.toString()\n\n  try {\n    return `/ipfs/${CID.parse(str)}`\n  } catch {}\n\n  if (isIpfs.path(str)) {\n    return str\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH)\n  }\n}\n\n// TODO: do we need both normalizePath and normalizeCidPath?\n// TODO: don't forget ipfs-core-utils/src/to-cid-and-path\n/**\n * @param {Uint8Array|CID|string} path\n */\nexport const normalizeCidPath = (path) => {\n  if (path instanceof Uint8Array) {\n    return CID.decode(path).toString()\n  }\n\n  path = path.toString()\n\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length)\n  }\n\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1)\n  }\n\n  return path\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID | string | Uint8Array} ipfsPath - A CID or IPFS path\n * @param {{ path?: string, signal?: AbortSignal }} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<{ cid: CID, remainderPath: string}>}\n */\nexport const resolvePath = async function (repo, codecs, ipfsPath, options = {}) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (path) {\n    options.path = path\n  }\n\n  let lastCid = cid\n  let lastRemainderPath = options.path || ''\n\n  if (lastRemainderPath.startsWith('/')) {\n    lastRemainderPath = lastRemainderPath.substring(1)\n  }\n\n  if (options.path) {\n    try {\n      for await (const { value, remainderPath } of resolve(cid, options.path, codecs, repo, {\n        signal: options.signal\n      })) {\n        if (!CID.asCID(value)) {\n          break\n        }\n\n        lastRemainderPath = remainderPath\n        lastCid = value\n      }\n    } catch (/** @type {any} */ err) {\n      // TODO: add error codes to IPLD\n      if (err.message.startsWith('Object has no property')) {\n        err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`\n        err.code = 'ERR_NO_LINK'\n      }\n      throw err\n    }\n  }\n\n  return {\n    cid: lastCid,\n    remainderPath: lastRemainderPath || ''\n  }\n}\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n *\n * @param {UnixFSEntry} file\n */\nexport const mapFile = (file) => {\n  if (file.type !== 'file' && file.type !== 'directory' && file.type !== 'raw') {\n    // file.type === object | identity not supported yet\n    throw new Error(`Unknown node type '${file.type}'`)\n  }\n\n  /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    size: file.size,\n    type: 'file'\n  }\n\n  if (file.type === 'directory') {\n    // @ts-expect-error - TS type can't be changed from File to Directory\n    output.type = 'dir'\n  }\n\n  if (file.type === 'file') {\n    output.size = file.unixfs.fileSize()\n  }\n\n  if (file.type === 'file' || file.type === 'directory') {\n    output.mode = file.unixfs.mode\n\n    if (file.unixfs.mtime !== undefined) {\n      output.mtime = file.unixfs.mtime\n    }\n  }\n\n  return output\n}\n\nexport const withTimeout = withTimeoutOption(\n  /**\n   * @template T\n   * @param {Promise<T>|T} promise\n   * @param {AbortOptions} [_options]\n   * @returns {Promise<T>}\n   */\n  async (promise, _options) => await promise\n)\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} codecs\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {AbortOptions} [options]\n */\nexport const resolve = async function * (cid, path, codecs, repo, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    // special case for dag-pb, use the link name as the path segment\n    if (cid.code === dagPB.code && Array.isArray(value.Links)) {\n      const link = value.Links.find((/** @type {PBLink} */ l) => l.Name === key)\n\n      if (link) {\n        yield {\n          value: link.Hash,\n          remainderPath: parts.join('/')\n        }\n\n        value = await load(link.Hash)\n        lastCid = link.Hash\n\n        continue\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    if (CID.asCID(value)) {\n      lastCid = value\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { NotStartedError, AlreadyStartingError, AlreadyStartedError } from '../errors.js'\nimport { withTimeout } from '../utils.js'\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nexport class Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create ({ start, stop }) {\n    return new Service(start, stop)\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start (service, options) {\n    const { state, activate } = service\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped': {\n        try {\n          const promise = activate(options)\n          service.state = { status: 'starting', ready: promise }\n          // Note: MUST await after state transition above otherwise race\n          // condition may occur.\n          const result = await promise\n          service.state = { status: 'started', value: result }\n          return result\n        // If failed to start, transiton from 'starting' to 'stopped'\n        // state.\n        } catch (/** @type {any} */ error) {\n          service.state = { status: 'stopped' }\n          throw error\n        }\n      }\n      case 'starting': {\n        throw new AlreadyStartingError()\n      }\n      case 'started': {\n        throw new AlreadyStartedError()\n      }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping': {\n        await state.ready\n        return await Service.start(service, options)\n      }\n      default: {\n        return Service.panic(service)\n      }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop (service) {\n    const { state, deactivate } = service\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped': {\n        break\n      }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting': {\n        // We do not want to error stop if start failed.\n        try { await state.ready } catch (/** @type {any} */ _) {}\n        return await Service.stop(service)\n      }\n      // if service is stopping we just await for it to complete.\n      case 'stopping': {\n        return await state.ready\n      }\n      case 'started': {\n        if (deactivate) {\n          await deactivate(state.value)\n        }\n        service.state = { status: 'stopped' }\n        break\n      }\n      default: {\n        Service.panic(state)\n      }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try ({ state }) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use ({ state }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      case 'starting':\n        return await withTimeout(state.ready, options)\n      default:\n        throw new NotStartedError()\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic ({ state }) {\n    const status = JSON.stringify({ status: state.status })\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`)\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor (activate, deactivate) {\n    this.activate = activate\n    this.deactivate = deactivate\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = { status: 'stopped' }\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use (options) {\n    return await Service.use(this, options)\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try () {\n    return Service.try(this)\n  }\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop ({ network, preload, ipns, repo, mfsPreload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop()\n    ])\n\n    await Service.stop(network)\n\n    // must be closed after stopping services as some of them\n    // will write into the datastore\n    await repo.close()\n  }\n\n  return stop\n}\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js'\nimport PQueue from 'p-queue'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport async function resolveDnslink (fqdn, opts) { // eslint-disable-line require-await\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async (fqdn, opts = {}) => {\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolve(fqdn, opts)\n}\n","// dns-nodejs gets replaced by dns-browser when bundled\nimport { resolveDnslink } from 'ipfs-core-config/dns'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nexport function createDns () {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return resolveDnslink(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n","\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createIsOnline ({ network }) {\n  /**\n   * @returns {boolean}\n   */\n  return () => {\n    const net = network.try()\n    return net != null && Boolean(net.libp2p.isStarted())\n  }\n}\n","import * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolve as res } from '../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/src/multibases').Multibases} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\nexport function createResolve ({ repo, codecs, bases, name }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]}\n   */\n  async function resolve (path, opts = {}) {\n    if (!isIpfs.path(path)) {\n      throw new Error('invalid argument ' + path)\n    }\n\n    if (isIpfs.ipnsPath(path)) {\n      for await (const resolvedPath of name.resolve(path, opts)) {\n        path = resolvedPath\n      }\n    }\n\n    const [, schema, hash, ...rest] = path.split('/') // ['', 'ipfs', 'hash', ...path]\n    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined\n    const bytes = parseBytes(hash)\n\n    // nothing to resolve return the input\n    if (rest.length === 0) {\n      const str = base ? base.encoder.encode(bytes) : hash\n\n      return `/${schema}/${str}`\n    }\n\n    const cid = CID.decode(bytes)\n\n    path = rest.join('/')\n\n    const results = res(cid, path, codecs, repo, opts)\n    let value = cid\n    let remainderPath = path\n\n    for await (const result of results) {\n      if (CID.asCID(result.value)) {\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    }\n\n    return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\nfunction parseBytes (str) {\n  try {\n    return peerIdFromString(str).toBytes()\n  } catch {\n    return CID.parse(str).bytes\n  }\n}\n","import last from 'it-last'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {ReturnType<typeof import('./add-all').createAddAll>} config.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"add\"]}\n   */\n  return (path, options = {}) => {\n    let iter\n\n    const cid = CID.asCID(path)\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options)\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options)\n    }\n\n    // @ts-expect-error return value of last can be undefined\n    return last(iter)\n  }\n}\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","\nexport const PinTypes = {\n  /** @type {'direct'} */\n  direct: 'direct',\n  /** @type {'recursive'} */\n  recursive: 'recursive',\n  /** @type {'indirect'} */\n  indirect: 'indirect',\n  /** @type {'all'} */\n  all: 'all'\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Source} Source\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Pin} PinTarget\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @template T\n * @typedef {Iterable<T>|AsyncIterable<T>} AwaitIterable\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAddAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    /**\n     * @returns {AsyncIterable<CID>}\n     */\n    const pinAdd = async function * () {\n      for await (const { path, recursive, metadata } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n\n        // verify that each hash can be pinned\n        const { reason } = await repo.pins.isPinnedWithType(cid, [PinTypes.recursive, PinTypes.direct])\n\n        if (reason === 'recursive' && !recursive) {\n          // only disallow trying to override recursive pins\n          throw new Error(`${cid} already pinned recursively`)\n        }\n\n        if (recursive) {\n          await repo.pins.pinRecursively(cid, { metadata })\n        } else {\n          await repo.pins.pinDirectly(cid, { metadata })\n        }\n\n        yield cid\n      }\n    }\n\n    // When adding a file, we take a lock that gets released after pinning\n    // is complete, so don't take a second lock here\n    const lock = Boolean(options.lock)\n\n    if (!lock) {\n      yield * pinAdd()\n      return\n    }\n\n    const release = await repo.gcLock.readLock()\n\n    try {\n      yield * pinAdd()\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLs ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE')\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { reason, pinned, parent, metadata } = await repo.pins.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED')\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n","import last from 'it-last'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]} config.rmAll\n */\nexport function createRm ({ rmAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    // @ts-expect-error return value of last can be undefined\n    const cid = await last(rmAll([{ path, ...options }], options))\n\n    if (!cid) {\n      throw new Error('CID expected')\n    }\n\n    return cid\n  }\n\n  return rm\n}\n","import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\n\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n","import { isPeerId } from '@libp2p/interface-peer-id'\nimport { notFoundError } from 'datastore-core/errors'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport * as ipns from 'ipns'\n\nconst log = logger('ipfs:ipns:publisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-keys').PublicKey} PublicKey\n * @typedef {import('ipns').IPNSEntry} IPNSEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst ERR_NOT_FOUND = notFoundError().code\nconst defaultRecordLifetime = 60 * 60 * 1000\n\n// IpnsPublisher is capable of publishing and resolving names to the IPFS routing system.\nexport class IpnsPublisher {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (routing, datastore) {\n    this._routing = routing\n    this._datastore = datastore\n  }\n\n  /**\n   * Publish record with a eol\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publishWithEOL (peerId, value, lifetime, options) {\n    const record = await this._updateOrCreateRecord(peerId, value, lifetime, options)\n\n    return this._putRecordToRouting(record, peerId, options)\n  }\n\n  /**\n   * Accepts a keypair, as well as a value (ipfsPath), and publishes it out to the routing system\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} options\n   */\n  publish (peerId, value, options) {\n    return this.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n  }\n\n  /**\n   * @param {Uint8Array} record\n   * @param {PeerId} peerId\n   * @param {AbortOptions} [options]\n   */\n  async _putRecordToRouting (record, peerId, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    if (peerId.publicKey == null) {\n      throw errcode(new Error('Public key was missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n\n    await this._publishEntry(routingKey, record, options)\n\n    return record\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} entry\n   * @param {AbortOptions} [options]\n   */\n  async _publishEntry (key, entry, options) {\n    // Add record to routing (buffer key)\n    try {\n      const res = await this._routing.put(key, entry, options)\n      log(`ipns record for ${uint8ArrayToString(key, 'base32')} was stored in the routing`)\n\n      return res\n    } catch (/** @type {any} */err) {\n      const errMsg = `ipns record for ${uint8ArrayToString(key, 'base32')} could not be stored in the routing - ${err.stack}`\n      log.error(errMsg)\n      log.error(err)\n\n      throw errcode(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING')\n    }\n  }\n\n  /**\n   * Returns the record this node has published corresponding to the given peer ID.\n   *\n   * If `checkRouting` is true and we have no existing record, this method will check the routing system for any existing records.\n   *\n   * @param {PeerId} peerId\n   * @param {object} options\n   * @param {boolean} [options.checkRouting]\n   */\n  async _getPublished (peerId, options = {}) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const checkRouting = options.checkRouting !== false\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      // unmarshal data\n      return this._unmarshalData(dsVal)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error getting the ipns record ${peerId.toString()} from datastore`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_UNEXPECTED_DATASTORE_RESPONSE')\n      }\n\n      if (!checkRouting) {\n        throw errcode(err, 'ERR_NOT_FOUND_AND_CHECK_ROUTING_NOT_ENABLED')\n      }\n\n      // Try to get from routing\n      try {\n        const routingKey = ipns.peerIdToRoutingKey(peerId)\n        const res = await this._routing.get(routingKey)\n\n        // unmarshal data\n        return this._unmarshalData(res)\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n\n        throw err\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  _unmarshalData (data) {\n    try {\n      return ipns.unmarshal(data)\n    } catch (/** @type {any} */ err) {\n      throw errcode(err, 'ERR_INVALID_RECORD_DATA')\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async _updateOrCreateRecord (peerId, value, lifetime, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const getPublishedOptions = {\n      checkRouting: true\n    }\n\n    /** @type {IPNSEntry | undefined} */\n    let record\n\n    try {\n      record = await this._getPublished(peerId, getPublishedOptions)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error when determining the last published IPNS record for ${peerId.toString()} ${err.stack}`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_DETERMINING_PUBLISHED_RECORD')\n      }\n    }\n\n    // Determinate the record sequence number\n    let seqNumber = 0n\n\n    if (record && record.sequence !== undefined) {\n      // Increment if the published value is different\n      seqNumber = uint8ArrayEquals(record.value, value) ? record.sequence : record.sequence + BigInt(1)\n    }\n\n    /** @type {IPNSEntry} */\n    let entryData\n\n    try {\n      // Create record\n      entryData = await ipns.create(peerId, value, seqNumber, lifetime)\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be created`\n\n      log.error(err)\n      throw errcode(new Error(errMsg), 'ERR_CREATING_IPNS_RECORD')\n    }\n\n    // TODO IMPROVEMENT - set ttl (still experimental feature for go)\n\n    try {\n      // Marshal record\n      const data = ipns.marshal(entryData)\n\n      // Store the new record\n      await this._datastore.put(ipns.getLocalKey(peerId.toBytes()), data, options)\n\n      log(`ipns record for ${uint8ArrayToString(value, 'base32')} was stored in the datastore`)\n\n      return data\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be stored in the datastore`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_STORING_IN_DATASTORE')\n    }\n  }\n}\n\nIpnsPublisher.defaultRecordLifetime = defaultRecordLifetime\n","import * as ipns from 'ipns'\nimport { importKey } from '@libp2p/crypto/keys'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { TimeoutController } from 'timeout-abort-controller'\n\nconst log = logger('ipfs:ipns:republisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\n\nconst defaultBroadcastInterval = 4 * hour\nconst defaultRecordLifetime = 24 * hour\n\nexport class IpnsRepublisher {\n  /**\n   * @param {import('./publisher').IpnsPublisher} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (publisher, datastore, peerId, keychain, options = { pass: '' }) {\n    this._publisher = publisher\n    this._datastore = datastore\n    this._peerId = peerId\n    this._keychain = keychain\n    this._options = options\n    this._republishHandle = null\n  }\n\n  async start () { // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING')\n    }\n\n    // TODO: this handler should be isolated in another module\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: (period) => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null\n\n          try {\n            // @ts-expect-error - _task could be null\n            republishHandle._inflightTask = republishHandle._task()\n            await republishHandle._inflightTask\n\n            // Schedule next\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period)\n            }\n          } catch (/** @type {any} */ err) {\n            log.error(err)\n          }\n        }, period())\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId)\n        }\n        republishHandle._task = null\n\n        // wait for the currently in flight task to complete\n        await republishHandle._inflightTask\n      }\n    }\n\n    const { pass } = this._options\n    let firstRun = true\n\n    republishHandle._task = async () => {\n      const timeoutController = new TimeoutController(30000)\n\n      try {\n        await this._republishEntries(this._peerId, pass, {\n          signal: timeoutController.signal\n        })\n      } finally {\n        timeoutController.clear()\n      }\n    }\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false\n        return this._options.initialBroadcastInterval || minute\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval\n    })\n\n    this._republishHandle = republishHandle\n  }\n\n  async stop () {\n    const republishHandle = this._republishHandle\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING')\n    }\n\n    this._republishHandle = null\n\n    await republishHandle.cancel()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {string} pass\n   * @param {AbortOptions} options\n   */\n  async _republishEntries (peerId, pass, options) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(peerId, options)\n    } catch (/** @type {any} */ err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key'\n\n      log.error(errMsg)\n      return\n    }\n\n    // keychain needs pass to get the cryptographic keys\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys()\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue\n          }\n\n          const pem = await this._keychain.exportKey(key.name, pass)\n          const privKey = await importKey(pem, pass)\n          const peerIdKey = await peerIdFromKeys(privKey.public.bytes, privKey.bytes)\n\n          await this._republishEntry(peerIdKey, options)\n        }\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {AbortOptions} options\n   */\n  async _republishEntry (peerId, options) {\n    try {\n      const value = await this._getPreviousValue(peerId)\n      await this._publisher.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _getPreviousValue (peerId) {\n    if (!(isPeerId(peerId))) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID')\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD')\n      }\n\n      // unmarshal data\n      try {\n        const record = ipns.unmarshal(dsVal)\n\n        return record.value\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD')\n      }\n    } catch (/** @type {any} */ err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.toString()}`), 'ERR_NO_ENTRY_FOUND')\n      }\n\n      throw err\n    }\n  }\n}\n","import * as ipns from 'ipns'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport * as Errors from 'datastore-core/errors'\nimport { ipnsValidator } from 'ipns/validator'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst log = logger('ipfs:ipns:resolver')\n\nconst ERR_NOT_FOUND = Errors.notFoundError().code\n\nconst defaultMaximumRecursiveDepth = 32\n\nexport class IpnsResolver {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   */\n  constructor (routing) {\n    this._routing = routing\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const recursive = options.recursive && options.recursive.toString() === 'true'\n\n    const nameSegments = name.split('/')\n\n    if (nameSegments.length !== 3 || nameSegments[0] !== '') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const key = nameSegments[2]\n\n    // Define a maximum depth if recursive option enabled\n    let depth = Infinity\n\n    if (recursive) {\n      depth = defaultMaximumRecursiveDepth\n    }\n\n    const res = await this.resolver(key, depth, options)\n\n    log(`${name} was locally resolved correctly`)\n    return res\n  }\n\n  /**\n   * Recursive resolver according to the specified depth\n   *\n   * @param {string} name\n   * @param {number} depth\n   * @param {AbortOptions} options\n   * @returns {Promise<string>}\n   */\n  async resolver (name, depth, options) {\n    // Exceeded recursive maximum depth\n    if (depth === 0) {\n      const errMsg = `could not resolve name (recursion limit of ${defaultMaximumRecursiveDepth} exceeded)`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT')\n    }\n\n    const res = await this._resolveName(name, options)\n    const nameSegments = res.split('/')\n\n    // If obtained a ipfs cid or recursive option is disabled\n    if (nameSegments[1] === 'ipfs' || !depth) {\n      return res\n    }\n\n    // continue recursively until depth equals 0\n    return this.resolver(nameSegments[2], depth - 1, options)\n  }\n\n  /**\n   * Resolve ipns entries from the provided routing\n   *\n   * @param {string} name\n   * @param {AbortOptions} options\n   */\n  async _resolveName (name, options) {\n    const peerId = peerIdFromString(name)\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n    let record\n\n    try {\n      record = await this._routing.get(routingKey, options)\n    } catch (/** @type {any} */ err) {\n      log.error('could not get record from routing', err)\n\n      if (err.code === ERR_NOT_FOUND) {\n        throw errcode(new Error(`record requested for ${name} was not found in the network`), 'ERR_NO_RECORD_FOUND')\n      }\n\n      throw errcode(new Error(`unexpected error getting the ipns record ${peerId.toString()}`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD')\n    }\n\n    // We should have the public key by now (inline, or in the entry)\n    return this._validateRecord(peerId, record)\n  }\n\n  /**\n   * Validate a resolved record\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} record\n   */\n  async _validateRecord (peerId, record) {\n    // IPNS entry validation\n    await ipnsValidator(uint8ArrayConcat([\n      uint8ArrayFromString('/ipns/'),\n      peerId.toBytes()\n    ]), record)\n\n    const ipnsEntry = ipns.unmarshal(record)\n\n    return uint8ArrayToString(ipnsEntry.value)\n  }\n}\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","import errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { IpnsPublisher } from './publisher.js'\nimport { IpnsRepublisher } from './republisher.js'\nimport { IpnsResolver } from './resolver.js'\nimport { TLRU } from '../utils/tlru.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns')\nconst defaultRecordTtl = 60 * 1000\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class IPNS {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (routing, datastore, peerId, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore)\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options)\n    this.resolver = new IpnsResolver(routing)\n    this.cache = new TLRU(1000)\n    this.routing = routing\n  }\n\n  /**\n   * Publish\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publish (peerId, value, lifetime = IpnsPublisher.defaultRecordLifetime, options) {\n    try {\n      await this.publisher.publishWithEOL(peerId, value, lifetime, options)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was published correctly`)\n\n      // // Add to cache\n      const id = peerId.toString()\n      // @ts-expect-error - parseFloat expects string\n      const ttEol = parseFloat(lifetime)\n      const ttl = (ttEol < defaultRecordTtl) ? ttEol : defaultRecordTtl\n\n      this.cache.set(id, value, ttl)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was cached correctly`)\n\n      return {\n        name: id,\n        value: value\n      }\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Resolve\n   *\n   * @param {string} name\n   * @param {object} options\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME')\n    }\n\n    // If recursive, we should not try to get the cached value\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2]\n      const result = this.cache.get(id)\n\n      if (result) {\n        return result\n      }\n    }\n\n    try {\n      const result = await this.resolver.resolve(name, options)\n\n      log(`IPNS record from ${name} was resolved correctly`)\n\n      return result\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Initialize keyspace\n   *\n   * Sets the ipns record for the given key to point to an empty directory\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  async initializeKeyspace (peerId, value, options) { // eslint-disable-line require-await\n    return this.publish(peerId, value, IpnsPublisher.defaultRecordLifetime, options)\n  }\n}\n","import { namespaceLength, namespace, peerIdToRoutingKey } from 'ipns'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { PubSubDatastore } from 'datastore-pubsub'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:ipns:pubsub')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Pubsub datastore aims to manage the pubsub subscriptions for IPNS\nexport class IpnsPubsubDatastore {\n  /**\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (pubsub, localDatastore, peerId) {\n    /** @type {Record<string, string>} */\n    this._subscriptions = {}\n\n    // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this)\n\n    this._pubsubDs = new PubSubDatastore(pubsub, localDatastore, peerId, ipnsValidator, ipnsSelector, this._handleSubscriptionKey)\n  }\n\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await this._pubsubDs.put(key, value, options)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get a value from the pubsub datastore indexed by the received key properly encoded.\n   * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n   * updated once new publishes occur.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    let res\n    let err\n\n    try {\n      res = await this._pubsubDs.get(key, options)\n    } catch (/** @type {any} */ e) {\n      err = e\n    }\n\n    // Add topic subscribed\n    const ns = key.slice(0, namespaceLength)\n\n    if (uint8ArrayToString(ns) === namespace) {\n      const stringifiedTopic = base58btc.encode(key).substring(1)\n      const id = base58btc.encode(key.slice(namespaceLength)).substring(1)\n\n      this._subscriptions[stringifiedTopic] = id\n\n      log(`subscribed to pubsub topic ${stringifiedTopic}, id ${id}`)\n    }\n\n    // If no data was obtained, after storing the subscription, return the error.\n    if (err) {\n      throw err\n    }\n\n    return res\n  }\n\n  /**\n   * Modify subscription key to have a proper encoding\n   *\n   * @param {Uint8Array | string} key\n   */\n  _handleSubscriptionKey (key) {\n    if (key instanceof Uint8Array) {\n      key = uint8ArrayToString(key, 'base58btc')\n    }\n\n    const subscriber = this._subscriptions[key]\n\n    if (!subscriber) {\n      throw errcode(new Error(`key ${key} does not correspond to a subscription`), 'ERR_INVALID_KEY')\n    }\n\n    try {\n      const k = peerIdToRoutingKey(peerIdFromString(subscriber))\n      return k\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get pubsub subscriptions related to ipns.\n   */\n  getSubscriptions () {\n    const subscriptions = Object.values(this._subscriptions).filter(Boolean)\n\n    return subscriptions.map((sub) => `${namespace}${sub}`)\n  }\n\n  /**\n   * Cancel pubsub subscriptions related to ipns.\n   *\n   * @param {string} name - ipns path to cancel the pubsub subscription.\n   */\n  async cancel (name) { // eslint-disable-line require-await\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME')\n    }\n\n    // Trim /ipns/ prefix from the name\n    if (name.startsWith(namespace)) {\n      name = name.substring(namespaceLength)\n    }\n\n    const stringifiedTopic = Object.keys(this._subscriptions).find((key) => this._subscriptions[key] === name)\n\n    // Not found topic\n    if (!stringifiedTopic) {\n      return {\n        canceled: false\n      }\n    }\n\n    // Unsubscribe topic\n    const bufTopic = uint8ArrayFromString(stringifiedTopic)\n\n    this._pubsubDs.unsubscribe(bufTopic)\n\n    delete this._subscriptions[stringifiedTopic]\n    log(`unsubscribed pubsub ${stringifiedTopic}: ${name}`)\n\n    return {\n      canceled: true\n    }\n  }\n}\n","import { Key } from 'interface-datastore/key'\nimport { Libp2pRecord } from '@libp2p/record'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns:offline-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nexport class OfflineDatastore {\n  /**\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (datastore) {\n    this._datastore = datastore\n    /** @type {any[]} */\n    this.stores = []\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) { // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Libp2pRecord(key, value, new Date())\n\n    await this._datastore.put(routingKey, record.serialize(), options)\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    const res = await this._datastore.get(routingKey, options)\n\n    // Unmarshal libp2p record as the DHT does\n    let record\n    try {\n      record = Libp2pRecord.deserialize(res)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    return record.value\n  }\n\n  /**\n   * encode key properly - base32(/ipns/{cid})\n   *\n   * @param {Uint8Array} key\n   */\n  _routingKey (key) {\n    return new Key('/dht/record/' + uint8ArrayToString(key, 'base32'), false)\n  }\n}\n","import drain from 'it-drain'\nimport { notFoundError } from 'datastore-core/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:ipns:dht-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw notFoundError()\n  }\n}\n","import { TieredDatastore } from 'datastore-core/tiered'\nimport get from 'dlv'\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js'\nimport { OfflineDatastore } from './offline-datastore.js'\nimport { DHTDatastore } from './dht-datastore.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting ({ libp2p, repo, peerId, options }) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht))\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore)\n    ipnsStores.push(offlineDatastore)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n","import { IPNS } from '../ipns/index.js'\nimport { createRouting } from '../ipns/routing/config.js'\nimport { OfflineDatastore } from '../ipns/routing/offline-datastore.js'\nimport { NotInitializedError, AlreadyInitializedError } from '../errors.js'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:ipns')\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n *\n * @typedef {object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub]\n *\n * @typedef {object} LibP2POptions\n * @property {DHTConfig} [config]\n *\n * @typedef {object} DHTConfig\n * @property {boolean} [enabled]\n */\n\nexport class IPNSAPI {\n  /**\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {boolean} [options.offline]\n   * @param {LibP2POptions} [options.libp2p]\n   * @param {ExperimentalOptions} [options.EXPERIMENTAL]\n   */\n  constructor (options = { pass: '' }) {\n    this.options = options\n\n    /** @type {IPNS | null} */\n    this.offline = null\n\n    /** @type {IPNS | null} */\n    this.online = null\n  }\n\n  getIPNS () {\n    const ipns = this.online || this.offline\n    if (ipns) {\n      return ipns\n    } else {\n      throw new NotInitializedError()\n    }\n  }\n\n  get routing () {\n    return this.getIPNS().routing\n  }\n\n  /**\n   * Activates IPNS subsystem in an ofline mode. If it was started once already\n   * it will throw an exception.\n   *\n   * This is primarily used for offline ipns modifications, such as the\n   * initializeKeyspace feature.\n   *\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  startOffline ({ repo, peerId, keychain }) {\n    if (this.offline != null) {\n      throw new AlreadyInitializedError()\n    }\n\n    log('initializing IPNS keyspace (offline)')\n\n    const routing = new OfflineDatastore(repo.datastore)\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n\n    this.offline = ipns\n  }\n\n  /**\n   * @param {object} config\n   * @param {import('libp2p').Libp2p} config.libp2p\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  async startOnline ({ libp2p, repo, peerId, keychain }) {\n    if (this.online != null) {\n      throw new AlreadyInitializedError()\n    }\n    const routing = createRouting({ libp2p, repo, peerId, options: this.options })\n\n    // @ts-expect-error routing is a TieredDatastore which wants keys to be Keys, IPNS needs keys to be Uint8Arrays\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n    await ipns.republisher.start()\n    this.online = ipns\n  }\n\n  async stop () {\n    const ipns = this.online\n    if (ipns) {\n      await ipns.republisher.stop()\n      this.online = null\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  publish (peerId, value, lifetime, options) {\n    return this.getIPNS().publish(peerId, value, lifetime, options)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  resolve (name, options) {\n    return this.getIPNS().resolve(name, options)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  initializeKeyspace (peerId, value, options) {\n    return this.getIPNS().initializeKeyspace(peerId, value, options)\n  }\n}\n","import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n","import { logger } from '@libp2p/logger'\nimport parseDuration from 'parse-duration'\nimport { importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport errcode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR, normalizePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolvePath } from './utils.js'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:name:publish')\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createPublish ({ ipns, repo, codecs, peerId, isOnline, keychain }) {\n  /**\n   * @param {string} keyName\n   */\n  const lookupKey = async keyName => {\n    /** @type {import('@libp2p/interface-keys').PrivateKey} */\n    let privateKey\n\n    if (keyName === 'self' && peerId.privateKey != null) {\n      privateKey = await unmarshalPrivateKey(peerId.privateKey)\n    } else {\n      try {\n        // We're exporting and immediately importing the key, so we can just use a throw away password\n        const pem = await keychain.exportKey(keyName, 'temp')\n        privateKey = await importKey(pem, 'temp')\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(err, 'ERR_CANNOT_GET_KEY')\n      }\n    }\n\n    return peerIdFromKeys(privateKey.public.bytes, privateKey.bytes)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"publish\"]}\n   */\n  async function publish (value, options = {}) {\n    const resolve = !(options.resolve === false)\n    const lifetime = options.lifetime || '24h'\n    const key = options.key || 'self'\n\n    if (!isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: params related logic should be in the core implementation\n    // Normalize path value\n    try {\n      value = normalizePath(value)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    let pubLifetime = 0\n    try {\n      pubLifetime = parseDuration(lifetime) || 0\n\n      // Calculate lifetime with nanoseconds precision\n      pubLifetime = parseFloat(pubLifetime.toFixed(6))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    // TODO: ttl human for cache\n    const results = await Promise.all([\n      // verify if the path exists, if not, an error will stop the execution\n      lookupKey(key),\n      // if resolving, do a get so we make sure we have the blocks\n      resolve ? resolvePath({ ipns, repo, codecs }, value) : Promise.resolve()\n    ])\n\n    const bytes = uint8ArrayFromString(value)\n\n    // Start publishing process\n    const result = await ipns.publish(results[0], bytes, pubLifetime, options)\n\n    return {\n      name: result.name,\n      value: uint8ArrayToString(result.value)\n    }\n  }\n\n  return withTimeoutOption(publish)\n}\n","import { logger } from '@libp2p/logger'\nimport errcode from 'err-code'\nimport mergeOpts from 'merge-options'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { base36 } from 'multiformats/bases/base36'\nimport { peerIdFromString } from '@libp2p/peer-id'\n// @ts-expect-error no types\nimport isDomain from 'is-domain-name'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\nconst log = logger('ipfs:name:resolve')\n\n/**\n *\n * @param {string} result\n * @param {string[]} remainder\n * @returns {string}\n */\nconst appendRemainder = (result, remainder) =>\n  remainder.length > 0\n    ? result + '/' + remainder.join('/')\n    : result\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('../../types').Options} config.options\n */\nexport function createResolve ({ dns, ipns, isOnline, options: { offline } }) {\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"resolve\"]}\n   */\n  async function * resolve (name, options = {}) { // eslint-disable-line require-await\n    options = mergeOptions({\n      nocache: false,\n      recursive: true\n    }, options)\n\n    // TODO: params related logic should be in the core implementation\n    if (offline && options && options.nocache) {\n      throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE')\n    }\n\n    // IPNS resolve needs a online daemon\n    if (!isOnline() && !offline) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    let ipnsName = name.toString()\n\n    if (!ipnsName.startsWith('/ipns/')) {\n      ipnsName = `/ipns/${ipnsName}`\n    }\n\n    let [namespace, hash, ...remainder] = ipnsName.slice(1).split('/')\n\n    try {\n      if (hash.substring(0, 1) === '1') {\n        const id = peerIdFromString(hash)\n        const digest = Digest.decode(id.toBytes())\n        const libp2pKey = CID.createV1(0x72, digest)\n        hash = libp2pKey.toString(base36)\n      } else {\n        const cid = CID.parse(hash)\n\n        if (cid.version === 1) {\n          hash = cid.toString(base36)\n        }\n      }\n    } catch (/** @type {any} */ err) {\n      // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns\n      if (isDomain(hash)) {\n        yield appendRemainder(await dns(hash, options), remainder)\n        return\n      }\n\n      log.error(err)\n      throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME')\n    }\n\n    // multihash is valid lets resolve with IPNS\n    // TODO: convert ipns.resolve to return an iterator\n    const value = await ipns.resolve(`/${namespace}/${hash}`, options)\n    yield appendRemainder(value instanceof Uint8Array ? uint8ArrayToString(value) : value, remainder)\n  }\n\n  return withTimeoutOption(resolve)\n}\n","import { IpnsPubsubDatastore } from '../../../ipns/routing/pubsub-datastore.js'\nimport errcode from 'err-code'\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns').IPNSAPI} ipns\n * @param {ExperimentalOptions} [options]\n */\nexport function getPubsubRouting (ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createCancel ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.cancel(name, options)\n  }\n\n  return withTimeoutOption(cancel)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createState ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"state\"]}\n   */\n  async function state (_options = {}) { // eslint-disable-line require-await\n    try {\n      return { enabled: Boolean(getPubsubRouting(ipns, experimental)) }\n    } catch (/** @type {any} */ err) {\n      return { enabled: false }\n    }\n  }\n\n  return withTimeoutOption(state)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createSubs ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"subs\"]}\n   */\n  async function subs (options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.getSubscriptions(options)\n  }\n\n  return withTimeoutOption(subs)\n}\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\nexport class PubSubAPI {\n  /**\n   * @param {object} config\n   * @param {import('../../ipns').IPNSAPI} config.ipns\n   * @param {import('../../../types').Options} config.options\n   */\n  constructor ({ ipns, options }) {\n    this.cancel = createCancel({ ipns, options })\n    this.state = createState({ ipns, options })\n    this.subs = createSubs({ ipns, options })\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { notFoundError } from 'datastore-core/errors'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { CID } from 'multiformats/cid'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\n\nconst ERR_NOT_FOUND = notFoundError().code\n\nexport const Format = {\n  default: '<dst>',\n  edges: '<src> -> <dst>'\n}\n\n/**\n * @typedef {object} Node\n * @property {string} [name]\n * @property {CID} cid\n *\n * @typedef {object} TraversalResult\n * @property {Node} parent\n * @property {Node} node\n * @property {boolean} isDuplicate\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} config.resolve\n * @param {import('../../types').Preload} config.preload\n */\nexport function createRefs ({ repo, codecs, resolve, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"refs\"]}\n   */\n  async function * refs (ipfsPath, options = {}) {\n    if (options.maxDepth === 0) {\n      return\n    }\n\n    if (options.edges && options.format && options.format !== Format.default) {\n      throw new Error('Cannot set edges to true and also specify format')\n    }\n\n    options.format = options.edges ? Format.edges : options.format\n\n    if (typeof options.maxDepth !== 'number') {\n      options.maxDepth = options.recursive ? Infinity : 1\n    }\n\n    if (options.timeout) {\n      const controller = new TimeoutController(options.timeout)\n      const signals = [controller.signal]\n\n      if (options.signal) {\n        signals.push(options.signal)\n      }\n\n      options.signal = anySignal(signals)\n    }\n\n    /** @type {(string|CID)[]} */\n    const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath]\n\n    const paths = rawPaths.map(p => getFullPath(preload, p, options))\n\n    for (const path of paths) {\n      try {\n        yield * refsStream(resolve, repo, codecs, path, options)\n      } catch (/** @type {any} */ err) {\n        yield {\n          ref: '',\n          err: err.message\n        }\n      }\n    }\n  }\n\n  return refs\n}\n\n/**\n * @param {import('../../types').Preload} preload\n * @param {string | CID} ipfsPath\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nfunction getFullPath (preload, ipfsPath, options) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (options.preload !== false) {\n    preload(cid)\n  }\n\n  return `/ipfs/${cid}${path || ''}`\n}\n\n/**\n * Get a stream of refs at the given path\n *\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} resolve\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {string} path\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nasync function * refsStream (resolve, repo, codecs, path, options) {\n  // Resolve to the target CID of the path\n  const resPath = await resolve(path, options)\n  const {\n    cid\n  } = toCidAndPath(resPath)\n\n  const maxDepth = options.maxDepth != null ? options.maxDepth : Infinity\n  const unique = options.unique || false\n\n  // Traverse the DAG, converting it into a stream\n  for await (const obj of objectStream(repo, codecs, cid, maxDepth, unique, options)) {\n    // Root object will not have a parent\n    if (!obj.parent) {\n      continue\n    }\n\n    // Filter out duplicates (isDuplicate flag is only set if options.unique is set)\n    if (obj.isDuplicate) {\n      continue\n    }\n\n    // Format the links\n    // Clients expect refs to be in the format { ref: <ref> }\n    yield {\n      ref: formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format)\n    }\n  }\n}\n\n/**\n * Get formatted link\n *\n * @param {CID} srcCid\n * @param {CID} dstCid\n * @param {string} [linkName]\n * @param {string} [format]\n */\nfunction formatLink (srcCid, dstCid, linkName = '', format = Format.default) {\n  let out = format.replace(/<src>/g, srcCid.toString())\n  out = out.replace(/<dst>/g, dstCid.toString())\n  out = out.replace(/<linkname>/g, linkName)\n  return out\n}\n\n/**\n * Do a depth first search of the DAG, starting from the given root cid\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} rootCid\n * @param {number} maxDepth\n * @param {boolean} uniqueOnly\n * @param {AbortOptions} options\n */\nasync function * objectStream (repo, codecs, rootCid, maxDepth, uniqueOnly, options) { // eslint-disable-line require-await\n  const seen = new Set()\n\n  /**\n   * @param {Node} parent\n   * @param {number} depth\n   * @returns {AsyncGenerator<TraversalResult, void, undefined>}\n   */\n  async function * traverseLevel (parent, depth) {\n    const nextLevelDepth = depth + 1\n\n    // Check the depth\n    if (nextLevelDepth > maxDepth) {\n      return\n    }\n\n    // Get this object's links\n    try {\n      // Look at each link, parent and the new depth\n      for await (const link of getLinks(repo, codecs, parent.cid, options)) {\n        yield {\n          parent: parent,\n          node: link,\n          isDuplicate: uniqueOnly && seen.has(link.cid.toString())\n        }\n\n        if (uniqueOnly) {\n          seen.add(link.cid.toString())\n        }\n\n        yield * traverseLevel(link, nextLevelDepth)\n      }\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        err.message = `Could not find object with CID: ${parent.cid}`\n      }\n\n      throw err\n    }\n  }\n\n  yield * traverseLevel({ cid: rootCid }, 0)\n}\n\n/**\n * Fetch a node and then get all its links\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} cid\n * @param {AbortOptions} options\n * @returns {AsyncGenerator<{ name: string, cid: CID }, void, undefined>}\n */\nasync function * getLinks (repo, codecs, cid, options) {\n  const block = await repo.blocks.get(cid, options)\n  const codec = await codecs.getCodec(cid.code)\n  const value = codec.decode(block)\n  const isDagPb = cid.code === dagPB.code\n  /** @type {Array<string|number>} */\n  const base = []\n\n  for (const [name, cid] of links(value, base)) {\n    // special case for dag-pb - use the name of the link\n    // instead of the path within the object\n    if (isDagPb) {\n      const match = name.match(/^Links\\/(\\d+)\\/Hash$/)\n\n      if (match) {\n        const index = Number(match[1])\n\n        if (index < value.Links.length) {\n          yield {\n            name: value.Links[index].Name,\n            cid\n          }\n\n          continue\n        }\n      }\n    }\n\n    yield {\n      name,\n      cid\n    }\n  }\n}\n\n/**\n * @param {*} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nconst links = function * (source, base) {\n  if (source == null) {\n    return\n  }\n\n  if (source instanceof Uint8Array) {\n    return\n  }\n\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key]\n\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [...path, index]\n          const cid = CID.asCID(element)\n\n          // eslint-disable-next-line max-depth\n          if (cid) {\n            yield [elementPath.join('/'), cid]\n          } else if (typeof element === 'object') {\n            yield * links(element, elementPath)\n          }\n        }\n      } else {\n        const cid = CID.asCID(value)\n\n        if (cid) {\n          yield [path.join('/'), cid]\n        } else {\n          yield * links(value, path)\n        }\n      }\n    }\n  }\n\n  // ts requires a @returns annotation when a function is recursive,\n  // eslint requires a return when you use a @returns annotation.\n  return []\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createLocal ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    for await (const cid of repo.blocks.queryKeys({}, { signal: options.signal })) {\n      yield { ref: cid.toString() }\n    }\n  }\n\n  return withTimeoutOption(refsLocal)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlist ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.getWantlist()\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlist)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.wantlistForPeer(peerId)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createUnwant ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"unwant\"]}\n   */\n  async function unwant (cids, options = {}) {\n    const { bitswap } = await network.use(options)\n\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    return bitswap.unwant(cids)\n  }\n\n  return withTimeoutOption(unwant)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createUnwant } from './unwant.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').NetworkService} NetworkService\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class BitswapAPI {\n  /**\n   * @param {object} config\n   * @param {NetworkService} config.network\n   */\n  constructor ({ network }) {\n    this.wantlist = createWantlist({ network })\n    this.wantlistForPeer = createWantlistForPeer({ network })\n    this.unwant = createUnwant({ network })\n    this.stat = createStat({ network })\n  }\n}\n","import { IPFS } from '@multiformats/mafmt'\n\n/**\n * @param {any} ma\n */\nexport function isValidMultiaddr (ma) {\n  try {\n    return IPFS.matches(ma)\n  } catch (/** @type {any} */ err) {\n    return false\n  }\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAdd ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"add\"]}\n   */\n  async function add (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    const boostrappers = config.Bootstrap || []\n    boostrappers.push(multiaddr.toString())\n\n    config.Bootstrap = Array.from(\n      new Set(boostrappers)\n    ).sort((a, b) => a.localeCompare(b))\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: [multiaddr]\n    }\n  }\n\n  return withTimeoutOption(add)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createClear ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createList ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n","\nexport default () => ({\n  Addresses: {\n    Swarm: [\n    ],\n    Announce: [],\n    NoAnnounce: [],\n    API: '',\n    Gateway: '',\n    RPC: '',\n    Delegates: [\n      '/dns4/node0.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node1.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node2.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node3.delegate.ipfs.io/tcp/443/https'\n    ]\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10\n    },\n    webRTCStar: {\n      Enabled: true\n    }\n  },\n  Bootstrap: [\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n    '/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n    '/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',\n    '/dns4/node2.preload.ipfs.io/tcp/443/wss/p2p/QmV7gnbW5VTcJ3oyM2Xk1rdFBJ3kTkvxc87UFGsun29STS',\n    '/dns4/node3.preload.ipfs.io/tcp/443/wss/p2p/QmY7JB6MQXhxHvq7dBDh4HpbH29v4yE9JRadAVpndvzySN'\n  ],\n  Pubsub: {\n    Enabled: true\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 5,\n      HighWater: 20\n    },\n    DisableNatPortMap: true\n  },\n  Routing: {\n    Type: 'dhtclient'\n  }\n})\n","import defaultConfig from 'ipfs-core-config/config'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createReset ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\nexport class BootstrapAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo }) {\n    this.add = createAdd({ repo })\n    this.list = createList({ repo })\n    this.rm = createRm({ repo })\n    this.clear = createClear({ repo })\n    this.reset = createReset({ repo })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createGet ({ preload, repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nexport function createPut ({ codecs, hashers, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import { CID } from 'multiformats/cid'\n\n/**\n * @param {string|Uint8Array|CID} cid\n */\nexport function cleanCid (cid) {\n  if (cid instanceof Uint8Array) {\n    return CID.decode(cid)\n  }\n\n  return CID.parse(cid.toString())\n}\n","import errCode from 'err-code'\nimport parallel from 'it-parallel'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { pipe } from 'it-pipe'\nimport { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        source => map(source, cid => {\n          return async () => {\n            cid = cleanCid(cid)\n\n            /** @type {import('ipfs-core-types/src/block').RmResult} */\n            const result = { cid }\n\n            try {\n              const has = await repo.blocks.has(cid)\n\n              if (!has) {\n                throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n              }\n\n              await repo.blocks.delete(cid)\n            } catch (/** @type {any} */ err) {\n              if (!options.force) {\n                err.message = `cannot remove ${cid}: ${err.message}`\n                result.error = err\n              }\n            }\n\n            return result\n          }\n        }),\n        source => parallel(source, { concurrency: BLOCK_RM_CONCURRENCY }),\n        source => filter(source, () => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid)\n\n    return { cid, size: block.length }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n */\n\nexport class BlockAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/src/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, hashers, preload, repo }) {\n    this.get = createGet({ preload, repo })\n    this.put = createPut({ codecs, hashers, preload, repo })\n    this.rm = createRm({ repo })\n    this.stat = createStat({ preload, repo })\n  }\n}\n","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n","import { from } from 'multiformats/hashes/hasher'\nimport { bytes } from 'multiformats'\n// @ts-expect-error no types\nimport mur from 'murmurhash3js-revisited'\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nfunction fromNumberTo32BitBuf (number) {\n  const bytes = new Array(4)\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n  return new Uint8Array(bytes)\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: (input) => fromNumberTo32BitBuf(mur.x86.hash32(input))\n})\n\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input))\n})\n\n// A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n})\n","import mergeOptions from 'merge-options'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653, // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n}\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true })\n  return defaults(defaultOptions, options)\n}\n","import { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {import('../types').PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nexport default persist\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('../types').Directory} Directory\n */\n\n/**\n * @type {import('../types').UnixFSV1DagBuilder<Directory>}\n */\nconst dirBuilder = async (item, blockstore, options) => {\n  const unixfs = new UnixFS({\n    type: 'directory',\n    mtime: item.mtime,\n    mode: item.mode\n  })\n\n  const buffer = encode(prepare({ Data: unixfs.marshal() }))\n  const cid = await persist(buffer, blockstore, options)\n  const path = item.path\n\n  return {\n    cid,\n    path,\n    unixfs,\n    size: buffer.length\n  }\n}\n\nexport default dirBuilder\n","import all from 'it-all'\n\n/**\n * @type {import('../../types').FileDAGBuilder}\n */\nasync function flat (source, reduce) {\n  return reduce(await all(source))\n}\n\nexport default flat\n","import batch from 'it-batch'\n\n/**\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nfunction balanced (source, reduce, options) {\n  return reduceToParents(source, reduce, options)\n}\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function reduceToParents (source, reduce, options) {\n  const roots = []\n\n  for await (const chunked of batch(source, options.maxChildrenPerNode)) {\n    roots.push(await reduce(chunked))\n  }\n\n  if (roots.length > 1) {\n    return reduceToParents(roots, reduce, options)\n  }\n\n  return roots[0]\n}\n\nexport default balanced\n","import batch from 'it-batch'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function trickleStream (source, reduce, options) {\n  const root = new Root(options.layerRepeat)\n  let iteration = 0\n  let maxDepth = 1\n\n  /** @type {SubTree} */\n  let subTree = root\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce))\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration)\n\n      iteration++\n    }\n\n    subTree.append(layer)\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce))\n  }\n\n  return root.reduce(reduce)\n}\n\nexport default trickleStream\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor (maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth\n    this.layerRepeat = layerRepeat\n    this.currentDepth = 1\n    this.iteration = iteration\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    }\n  }\n\n  isFull () {\n    if (!this.root.data) {\n      return false\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node)\n\n      return false\n    }\n\n    // try to find new node from node.parent\n    const distantRelative = this._findParent(this.node, this.currentDepth)\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative)\n\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @param {TrickleDagNode} parent\n   */\n  _addNextNodeToParent (parent) {\n    this.parent = parent\n\n    // find site for new node\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }\n\n    // @ts-ignore\n    parent.children.push(nextNode)\n\n    this.currentDepth = nextNode.depth\n    this.node = nextNode\n  }\n\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n  append (layer) {\n    this.node.data = layer\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return this._reduce(this.root, reduce)\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n  async _reduce (node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = []\n\n    if (node.children.length) {\n      children = await Promise.all(\n        node.children\n          // @ts-ignore\n          .filter(child => child.data)\n          // @ts-ignore\n          .map(child => this._reduce(child, reduce))\n      )\n    }\n\n    return reduce((node.data || []).concat(children))\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n  _findParent (node, depth) {\n    const parent = node.parent\n\n    if (!parent || parent.depth === 0) {\n      return\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth)\n    }\n\n    return parent\n  }\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor (layerRepeat) {\n    super(0, layerRepeat)\n\n    this.root.depth = 0\n    this.currentDepth = 1\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  addChild (child) {\n    this.root.children.push(child)\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return reduce((this.root.data || []).concat(this.root.children))\n  }\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nasync function * bufferImporter (file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path)\n      let unixfs\n\n      /** @type {import('../../types').PersistOptions} */\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = raw\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        })\n\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        })\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nexport default bufferImporter\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\nimport parallelBatch from 'it-parallel-batch'\nimport * as rawCodec from 'multiformats/codecs/raw'\nimport * as dagPb from '@ipld/dag-pb'\n\nimport dagFlat from './flat.js'\nimport dagBalanced from './balanced.js'\nimport dagTrickle from './trickle.js'\nimport bufferImporterFn from './buffer-importer.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').File} File\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').DAGBuilder} DAGBuilder\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {{ [key: string]: FileDAGBuilder}}\n */\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nasync function * buildFileBatch (file, blockstore, options) {\n  let count = -1\n  let previous\n  let bufferImporter\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter\n  } else {\n    bufferImporter = bufferImporterFn\n  }\n\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++\n\n    if (count === 0) {\n      previous = entry\n      continue\n    } else if (count === 1 && previous) {\n      yield previous\n      previous = null\n    }\n\n    yield entry\n  }\n\n  if (previous) {\n    previous.single = true\n    yield previous\n  }\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nconst reduce = (file, blockstore, options) => {\n  /**\n   * @type {Reducer}\n   */\n  async function reducer (leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0]\n\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        // only one leaf node which is a buffer - we have metadata so convert it into a\n        // UnixFS entry otherwise we'll have nowhere to store the metadata\n        let buffer = await blockstore.get(leaf.cid)\n\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        })\n\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }))\n\n        // // TODO vmx 2021-03-26: This is what the original code does, it checks\n        // // the multihash of the original leaf node and uses then the same\n        // // hasher. i wonder if that's really needed or if we could just use\n        // // the hasher from `options.hasher` instead.\n        // const multihash = mh.decode(leaf.cid.multihash.bytes)\n        // let hasher\n        // switch multihash {\n        //   case sha256.code {\n        //     hasher = sha256\n        //     break;\n        //   }\n        //   //case identity.code {\n        //   //  hasher = identity\n        //   //  break;\n        //   //}\n        //   default: {\n        //     throw new Error(`Unsupported hasher \"${multihash}\"`)\n        //   }\n        // }\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        })\n        leaf.size = buffer.length\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      }\n    }\n\n    // create a parent node and add all the leaves\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    })\n\n    const links = leaves\n      .filter(leaf => {\n        if (leaf.cid.code === rawCodec.code && leaf.size) {\n          return true\n        }\n\n        if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n          return true\n        }\n\n        return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length)\n      })\n      .map((leaf) => {\n        if (leaf.cid.code === rawCodec.code) {\n          // node is a leaf buffer\n          f.addBlockSize(leaf.size)\n\n          return {\n            Name: '',\n            Tsize: leaf.size,\n            Hash: leaf.cid\n          }\n        }\n\n        if (!leaf.unixfs || !leaf.unixfs.data) {\n          // node is an intermediate node\n          f.addBlockSize((leaf.unixfs && leaf.unixfs.fileSize()) || 0)\n        } else {\n          // node is a unixfs 'file' leaf node\n          f.addBlockSize(leaf.unixfs.data.length)\n        }\n\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        }\n      })\n\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, blockstore, options)\n\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    }\n  }\n\n  return reducer\n}\n\n/**\n * @type {import('../../types').UnixFSV1DagBuilder<File>}\n */\nfunction fileBuilder (file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy]\n\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY')\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options)\n}\n\nexport default fileBuilder\n","import { Uint8ArrayList } from 'uint8arraylist'\n// @ts-ignore\nimport { create } from 'rabin-wasm'\nimport errcode from 'err-code'\n\n/**\n * @typedef {object} RabinOptions\n * @property {number} min\n * @property {number} max\n * @property {number} bits\n * @property {number} window\n * @property {number} polynomial\n */\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * rabinChunker (source, options) {\n  let min, max, avg\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize\n    min = options.minChunkSize\n    max = options.maxChunkSize\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE')\n  } else {\n    avg = options.avgChunkSize\n    min = avg / 3\n    max = avg + (avg / 2)\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE')\n  }\n\n  if (max < min) {\n    max = min\n  }\n\n  if (avg < min) {\n    avg = min\n  }\n\n  const sizepow = Math.floor(Math.log2(avg))\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk\n  }\n}\n\nexport default rabinChunker\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {RabinOptions} options\n */\nasync function * rabin (source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window)\n  const buffers = new Uint8ArrayList()\n\n  for await (const chunk of source) {\n    buffers.append(chunk)\n\n    const sizes = r.fingerprint(chunk)\n\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i]\n      const buf = buffers.slice(0, size)\n      buffers.consume(size)\n\n      yield buf\n    }\n  }\n\n  if (buffers.length) {\n    yield buffers.subarray(0)\n  }\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * fixedSizeChunker (source, options) {\n  let list = new Uint8ArrayList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    list.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield list.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === list.length) {\n        list = new Uint8ArrayList()\n        currentLength = 0\n      } else {\n        const newBl = new Uint8ArrayList()\n        newBl.append(list.sublist(maxChunkSize))\n        list = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield list.subarray(0, currentLength)\n  }\n}\n\nexport default fixedSizeChunker\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @type {ChunkValidator}\n */\nasync function * validateChunks (source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString())\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content)\n    } else if (content instanceof Uint8Array) {\n      yield content\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n  }\n}\n\nexport default validateChunks\n","import dirBuilder from './dir.js'\nimport fileBuilder from './file/index.js'\nimport errCode from 'err-code'\nimport rabin from '../chunker/rabin.js'\nimport fixedSize from '../chunker/fixed-size.js'\nimport validateChunks from './validate-chunks.js'\n\n/**\n * @typedef {import('../types').File} File\n * @typedef {import('../types').Directory} Directory\n * @typedef {import('../types').DAGBuilder} DAGBuilder\n * @typedef {import('../types').Chunker} Chunker\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @param {any} thing\n * @returns {thing is Iterable<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterable<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {Uint8Array | AsyncIterable<Uint8Array> | Iterable<Uint8Array>} content\n * @returns {AsyncIterable<Uint8Array>}\n */\nfunction contentAsAsyncIterable (content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return (async function * () {\n        yield content\n      }())\n    } else if (isIterable(content)) {\n      return (async function * () {\n        yield * content\n      }())\n    } else if (isAsyncIterable(content)) {\n      return content\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n  }\n\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n}\n\n/**\n * @type {DAGBuilder}\n */\nasync function * dagBuilder (source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      /**\n       * @type {Chunker}\n       */\n      let chunker\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin\n      } else {\n        chunker = fixedSize\n      }\n\n      /**\n       * @type {ChunkValidator}\n       */\n      let chunkValidator\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator\n      } else {\n        chunkValidator = validateChunks\n      }\n\n      /** @type {File} */\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      }\n\n      yield () => fileBuilder(file, blockstore, options)\n    } else if (entry.path) {\n      /** @type {Directory} */\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      }\n\n      yield () => dirBuilder(dir, blockstore, options)\n    } else {\n      throw new Error('Import candidate must have content or path or both')\n    }\n  }\n}\n\nexport default dagBuilder\n","/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n *\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) { }\n\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n  async * eachChildSeries () { }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport default Dir\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {}\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return Promise.resolve(this._children[name])\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  async * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        })\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    /** @type {PBNode} */\n    const node = { Data: unixfs.marshal(), Links: links }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce(\n      /**\n       * @param {number} acc\n       * @param {PBLink} curr\n       */\n      (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize),\n      0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    }\n  }\n}\n\nexport default DirFlat\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      }\n    }\n  }\n}\n\nexport default DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  }\n}\n","import DirSharded from './dir-sharded.js'\nimport DirFlat from './dir-flat.js'\n\n/**\n * @typedef {import('./dir').default} Dir\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @param {Dir | null} child\n * @param {Dir} dir\n * @param {number} threshold\n * @param {ImporterOptions} options\n * @returns {Promise<DirSharded>}\n */\nasync function flatToShard (child, dir, threshold, options) {\n  let newDir = dir\n\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options)\n  }\n\n  const parent = newDir.parent\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir\n      }\n\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found')\n      }\n\n      await parent.put(newDir.parentKey, newDir)\n    }\n\n    return flatToShard(newDir, parent, threshold, options)\n  }\n\n  // @ts-ignore\n  return newDir\n}\n\n/**\n * @param {DirFlat} oldDir\n * @param {ImporterOptions} options\n */\nasync function convertToShard (oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options)\n\n  for await (const { key, child } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child)\n  }\n\n  return newDir\n}\n\nexport default flatToShard\n","const toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\nexport default toPathComponents\n","import DirFlat from './dir-flat.js'\nimport flatToShard from './flat-to-shard.js'\nimport Dir from './dir.js'\nimport toPathComponents from './utils/to-path-components.js'\n\n/**\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {(source: AsyncIterable<InProgressImportResult>, blockstore: Blockstore, options: ImporterOptions) => AsyncIterable<ImportResult>} TreeBuilder\n */\n\n/**\n * @param {InProgressImportResult} elem\n * @param {Dir} tree\n * @param {ImporterOptions} options\n */\nasync function addToTree (elem, tree, options) {\n  const pathElems = toPathComponents(elem.path || '')\n  const lastIndex = pathElems.length - 1\n  let parent = tree\n  let currentPath = ''\n\n  for (let i = 0; i < pathElems.length; i++) {\n    const pathElem = pathElems[i]\n\n    currentPath += `${currentPath ? '/' : ''}${pathElem}`\n\n    const last = (i === lastIndex)\n    parent.dirty = true\n    parent.cid = undefined\n    parent.size = undefined\n\n    if (last) {\n      await parent.put(pathElem, elem)\n      tree = await flatToShard(null, parent, options.shardSplitThreshold, options)\n    } else {\n      let dir = await parent.get(pathElem)\n\n      if (!dir || !(dir instanceof Dir)) {\n        dir = new DirFlat({\n          root: false,\n          dir: true,\n          parent: parent,\n          parentKey: pathElem,\n          path: currentPath,\n          dirty: true,\n          flat: true,\n          mtime: dir && dir.unixfs && dir.unixfs.mtime,\n          mode: dir && dir.unixfs && dir.unixfs.mode\n        }, options)\n      }\n\n      await parent.put(pathElem, dir)\n\n      parent = dir\n    }\n  }\n\n  return tree\n}\n\n/**\n * @param {Dir | InProgressImportResult} tree\n * @param {Blockstore} blockstore\n */\nasync function * flushAndYield (tree, blockstore) {\n  if (!(tree instanceof Dir)) {\n    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {\n      yield tree\n    }\n\n    return\n  }\n\n  yield * tree.flush(blockstore)\n}\n\n/**\n * @type {TreeBuilder}\n */\nasync function * treeBuilder (source, block, options) {\n  /** @type {Dir} */\n  let tree = new DirFlat({\n    root: true,\n    dir: true,\n    path: '',\n    dirty: true,\n    flat: true\n  }, options)\n\n  for await (const entry of source) {\n    if (!entry) {\n      continue\n    }\n\n    tree = await addToTree(entry, tree, options)\n\n    if (!entry.unixfs || !entry.unixfs.isDirectory()) {\n      yield entry\n    }\n  }\n\n  if (options.wrapWithDirectory) {\n    yield * flushAndYield(tree, block)\n  } else {\n    for await (const unwrapped of tree.eachChildSeries()) {\n      if (!unwrapped) {\n        continue\n      }\n\n      yield * flushAndYield(unwrapped.child, block)\n    }\n  }\n}\n\nexport default treeBuilder\n","import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateMultiple(input, normaliseContent)\n}\n","/**\n * @typedef {object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nexport const parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * @typedef {object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nexport const parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nexport const parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n","import { importer } from 'ipfs-unixfs-importer'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple'\nimport { parseChunkerString } from './utils.js'\nimport { pipe } from 'it-pipe'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll ({ repo, preload, hashers, options }) {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    /** @type {MultihashHasher | undefined} */\n    let hasher\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg)\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        hasher,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString()\n\n        // do not keep file totals around forever\n        delete totals[path]\n\n        yield {\n          ...added,\n          path\n        }\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n","\nimport { Bucket, createHAMT } from 'hamt-sharding'\nimport { decode } from '@ipld/dag-pb'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n// FIXME: this is copy/pasted from ipfs-unixfs-importer/src/options.js\n/**\n * @param {Uint8Array} buf\n */\nconst hashFn = async function (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @param {PBLink[]} links\n * @param {Bucket<boolean>} bucket\n * @param {Bucket<boolean>} rootBucket\n */\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(\n    links.map(link => {\n      if (link.Name == null) {\n        // TODO(@rvagg): what do? this is technically possible\n        throw new Error('Unexpected Link without a Name')\n      }\n      if (link.Name.length === 2) {\n        const pos = parseInt(link.Name, 16)\n\n        return bucket._putObjectAt(pos, new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos))\n      }\n\n      return rootBucket.put(link.Name.substring(2), true)\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nconst toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {import('hamt-sharding').BucketPosition<boolean>} position\n */\nconst toBucketPath = (position) => {\n  let bucket = position.bucket\n  const path = []\n\n  while (bucket._parent) {\n    path.push(bucket)\n\n    bucket = bucket._parent\n  }\n\n  path.push(bucket)\n\n  return path.reverse()\n}\n\n/**\n * @typedef {import('../types').ShardTraversalContext} ShardTraversalContext\n *\n * @param {PBNode} node\n * @param {string} name\n * @param {Blockstore} blockstore\n * @param {ShardTraversalContext} [context]\n * @param {ExporterOptions} [options]\n * @returns {Promise<CID|null>}\n */\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = createHAMT({\n      hashFn\n    })\n\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    }\n  }\n\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket)\n\n  const position = await context.rootBucket._findNewBucketAndPos(name)\n  let prefix = toPrefix(position.pos)\n  const bucketPath = toBucketPath(position)\n\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth]\n\n    prefix = toPrefix(context.lastBucket._posAtParent)\n  }\n\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false\n    }\n\n    const entryPrefix = link.Name.substring(0, 2)\n    const entryName = link.Name.substring(2)\n\n    if (entryPrefix !== prefix) {\n      // not the entry or subshard we're looking for\n      return false\n    }\n\n    if (entryName && entryName !== name) {\n      // not the entry we're looking for\n      return false\n    }\n\n    return true\n  })\n\n  if (!link) {\n    return null\n  }\n\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash\n  }\n\n  context.hamtDepth++\n\n  const block = await blockstore.get(link.Hash, options)\n  node = decode(block)\n\n  return findShardCid(node, name, blockstore, context, options)\n}\n\nexport default findShardCid\n","/**\n * @param {Uint8Array} block\n * @param {number} blockStart\n * @param {number} requestedStart\n * @param {number} requestedEnd\n */\nfunction extractDataFromBlock (block, blockStart, requestedStart, requestedEnd) {\n  const blockLength = block.length\n  const blockEnd = blockStart + blockLength\n\n  if (requestedStart >= blockEnd || requestedEnd < blockStart) {\n    // If we are looking for a byte range that is starts after the start of the block,\n    // return an empty block.  This can happen when internal nodes contain data\n    return new Uint8Array(0)\n  }\n\n  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {\n    // If the end byte is in the current block, truncate the block to the end byte\n    block = block.subarray(0, requestedEnd - blockStart)\n  }\n\n  if (requestedStart >= blockStart && requestedStart < blockEnd) {\n    // If the start byte is in the current block, skip to the start byte\n    block = block.subarray(requestedStart - blockStart)\n  }\n\n  return block\n}\n\nexport default extractDataFromBlock\n","import errCode from 'err-code'\n\n/**\n * @param {number} size\n * @param {number} [offset]\n * @param {number} [length]\n */\nconst validateOffsetAndLength = (size, offset, length) => {\n  if (!offset) {\n    offset = 0\n  }\n\n  if (offset < 0) {\n    throw errCode(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset > size) {\n    throw errCode(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (!length && length !== 0) {\n    length = size - offset\n  }\n\n  if (length < 0) {\n    throw errCode(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset + length > size) {\n    length = size - offset\n  }\n\n  return {\n    offset,\n    length\n  }\n}\n\nexport default validateOffsetAndLength\n","import extractDataFromBlock from '../../../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../../../utils/validate-offset-and-length.js'\nimport { UnixFS } from 'ipfs-unixfs'\nimport errCode from 'err-code'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\nimport { pushable } from 'it-pushable'\nimport parallel from 'it-parallel'\nimport { pipe } from 'it-pipe'\nimport map from 'it-map'\nimport PQueue from 'p-queue'\n\n/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode | Uint8Array} node\n * @param {import('it-pushable').Pushable<Uint8Array>} queue\n * @param {number} streamPosition\n * @param {number} start\n * @param {number} end\n * @param {PQueue} walkQueue\n * @param {ExporterOptions} options\n * @returns {Promise<void>}\n */\nasync function walkDAG (blockstore, node, queue, streamPosition, start, end, walkQueue, options) {\n  // a `raw` node\n  if (node instanceof Uint8Array) {\n    queue.push(extractDataFromBlock(node, streamPosition, start, end))\n\n    return\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  /** @type {UnixFS} */\n  let file\n\n  try {\n    file = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  // might be a unixfs `raw` node or have data on intermediate nodes\n  if (file.data != null) {\n    const data = file.data\n    const buf = extractDataFromBlock(data, streamPosition, start, end)\n\n    queue.push(buf)\n\n    streamPosition += buf.byteLength\n  }\n\n  /** @type {Array<{ link: PBLink, blockStart: number }>} */\n  const childOps = []\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i]\n    const childStart = streamPosition // inclusive\n    const childEnd = childStart + file.blockSizes[i] // exclusive\n\n    if ((start >= childStart && start < childEnd) || // child has offset byte\n        (end >= childStart && end <= childEnd) || // child has end byte\n        (start < childStart && end > childEnd)) { // child is between offset and end bytes\n      childOps.push({\n        link: childLink,\n        blockStart: streamPosition\n      })\n    }\n\n    streamPosition = childEnd\n\n    if (streamPosition > end) {\n      break\n    }\n  }\n\n  await pipe(\n    childOps,\n    (source) => map(source, (op) => {\n      return async () => {\n        const block = await blockstore.get(op.link.Hash, {\n          signal: options.signal\n        })\n\n        return {\n          ...op,\n          block\n        }\n      }\n    }),\n    (source) => parallel(source, {\n      ordered: true\n    }),\n    async (source) => {\n      for await (const { link, block, blockStart } of source) {\n        /** @type {PBNode | Uint8Array} */\n        let child\n        switch (link.Hash.code) {\n          case dagPb.code:\n            child = dagPb.decode(block)\n            break\n          case raw.code:\n            child = block\n            break\n          default:\n            queue.end(errCode(new Error(`Unsupported codec: ${link.Hash.code}`), 'ERR_NOT_UNIXFS'))\n            return\n        }\n\n        walkQueue.add(async () => {\n          await walkDAG(blockstore, child, queue, blockStart, start, end, walkQueue, options)\n        })\n      }\n    }\n  )\n}\n\n/**\n * @type {import('../').UnixfsV1Resolver}\n */\nconst fileContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * yieldFileContent (options = {}) {\n    const fileSize = unixfs.fileSize()\n\n    if (fileSize === undefined) {\n      throw new Error('File was a directory')\n    }\n\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length)\n\n    if (length === 0) {\n      return\n    }\n\n    // use a queue to walk the DAG instead of recursion to ensure very deep DAGs\n    // don't overflow the stack\n    const walkQueue = new PQueue({\n      concurrency: 1\n    })\n    const queue = pushable()\n\n    walkQueue.add(async () => {\n      await walkDAG(blockstore, node, queue, 0, offset, offset + length, walkQueue, options)\n    })\n\n    walkQueue.on('error', error => {\n      queue.end(error)\n    })\n\n    let read = 0\n\n    for await (const buf of queue) {\n      if (buf == null) {\n        continue\n      }\n\n      read += buf.byteLength\n\n      if (read === length) {\n        queue.end()\n      }\n\n      yield buf\n    }\n  }\n\n  return yieldFileContent\n}\n\nexport default fileContent\n","/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} [options]\n   * @returns {UnixfsV1DirectoryContent}\n   */\n  async function * yieldDirectoryContent (options = {}) {\n    const offset = options.offset || 0\n    const length = options.length || node.Links.length\n    const links = node.Links.slice(offset, length)\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options)\n\n      if (result.entry) {\n        yield result.entry\n      }\n    }\n  }\n\n  return yieldDirectoryContent\n}\n\nexport default directoryContent\n","import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport findShardCid from '../../utils/find-cid-in-shard.js'\nimport { decode } from '@ipld/dag-pb'\n\nimport contentFile from './content/file.js'\nimport contentDirectory from './content/directory.js'\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js'\n\n/**\n * @typedef {import('../../types').Resolve} Resolve\n * @typedef {import('../../types').Resolver} Resolver\n * @typedef {import('../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @param {PBNode} node\n * @param {string} name\n */\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name)\n\n  return link && link.Hash\n}\n\n/**\n * @type {{ [key: string]: UnixfsV1Resolver }}\n */\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  }\n}\n\n/**\n * @type {Resolver}\n */\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options)\n  const node = decode(block)\n  let unixfs\n  let next\n\n  if (!name) {\n    name = cid.toString()\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  try {\n    unixfs = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    // non-UnixFS dag-pb node? It could happen.\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  if (!path) {\n    path = name\n  }\n\n  if (toResolve.length) {\n    let linkCid\n\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      // special case - unixfs v1 hamt shards\n      linkCid = await findShardCid(node, toResolve[0], blockstore)\n    } else {\n      linkCid = findLinkCid(node, toResolve[0])\n    }\n\n    if (!linkCid) {\n      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND')\n    }\n\n    // remove the path component we have resolved\n    const nextName = toResolve.shift()\n    const nextPath = `${path}/${nextName}`\n\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    }\n  }\n\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      // @ts-ignore\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  }\n}\n\nexport default unixFsResolver\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {import('../types').Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n\n  const block = await blockstore.get(cid, options)\n\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  }\n}\n\nexport default resolve\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport * as dagCbor from '@ipld/dag-cbor'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid)\n  const object = dagCbor.decode(block)\n  let subObject = object\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      const subObjectCid = CID.asCID(subObject[prop])\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function * () {\n              yield object\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function * () {\n        yield object\n      }\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\nimport * as mh from 'multiformats/hashes/digest'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n  const buf = await mh.decode(cid.multihash.bytes)\n\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\n\nimport * as dagPb from '@ipld/dag-pb'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as raw from 'multiformats/codecs/raw'\nimport { identity } from 'multiformats/hashes/identity'\n\nimport dagPbResolver from './unixfs-v1/index.js'\nimport rawResolver from './raw.js'\nimport dagCborResolver from './dag-cbor.js'\nimport identifyResolver from './identity.js'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n * @typedef {import('../types').Resolve} Resolve\n */\n\n/**\n * @type {{ [ key: string ]: Resolver }}\n */\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n}\n\n/**\n * @type {Resolve}\n */\nfunction resolve (cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code]\n\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER')\n  }\n\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options)\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\nimport resolve from './resolvers/index.js'\nimport last from 'it-last'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ExporterOptions} ExporterOptions\n * @typedef {import('./types').UnixFSFile} UnixFSFile\n * @typedef {import('./types').UnixFSDirectory} UnixFSDirectory\n * @typedef {import('./types').ObjectNode} ObjectNode\n * @typedef {import('./types').RawNode} RawNode\n * @typedef {import('./types').IdentityNode} IdentityNode\n * @typedef {import('./types').UnixFSEntry} UnixFSEntry\n */\n\nconst toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\n/**\n * @param {string|Uint8Array|CID} path\n */\nconst cidAndRest = (path) => {\n  if (path instanceof Uint8Array) {\n    return {\n      cid: CID.decode(path),\n      toResolve: []\n    }\n  }\n\n  const cid = CID.asCID(path)\n  if (cid) {\n    return {\n      cid,\n      toResolve: []\n    }\n  }\n\n  if (typeof path === 'string') {\n    if (path.indexOf('/ipfs/') === 0) {\n      path = path.substring(6)\n    }\n\n    const output = toPathComponents(path)\n\n    return {\n      cid: CID.parse(output[0]),\n      toResolve: output.slice(1)\n    }\n  }\n\n  throw errCode(new Error(`Unknown path type ${path}`), 'ERR_BAD_PATH')\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * walkPath (path, blockstore, options = {}) {\n  let {\n    cid,\n    toResolve\n  } = cidAndRest(path)\n  let name = cid.toString()\n  let entryPath = name\n  const startingDepth = toResolve.length\n\n  while (true) {\n    const result = await resolve(cid, name, entryPath, toResolve, startingDepth, blockstore, options)\n\n    if (!result.entry && !result.next) {\n      throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n    }\n\n    if (result.entry) {\n      yield result.entry\n    }\n\n    if (!result.next) {\n      return\n    }\n\n    // resolve further parts\n    toResolve = result.next.toResolve\n    cid = result.next.cid\n    name = result.next.name\n    entryPath = result.next.path\n  }\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function exporter (path, blockstore, options = {}) {\n  const result = await last(walkPath(path, blockstore, options))\n\n  if (!result) {\n    throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n  }\n\n  return result\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * recursive (path, blockstore, options = {}) {\n  const node = await exporter(path, blockstore, options)\n\n  if (!node) {\n    return\n  }\n\n  yield node\n\n  if (node.type === 'directory') {\n    for await (const child of recurse(node, options)) {\n      yield child\n    }\n  }\n\n  /**\n   * @param {UnixFSDirectory} node\n   * @param {ExporterOptions} options\n   * @returns {AsyncGenerator<UnixFSEntry, void, any>}\n   */\n  async function * recurse (node, options) {\n    for await (const file of node.content(options)) {\n      yield file\n\n      if (file instanceof Uint8Array) {\n        continue\n      }\n\n      if (file.type === 'directory') {\n        yield * recurse(file, options)\n      }\n    }\n  }\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n","import { exporter, recursive } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\nimport { pack } from 'it-tar'\nimport { pipe } from 'it-pipe'\nimport Pako from 'pako'\nimport toBuffer from 'it-to-buffer'\n\n// https://www.gnu.org/software/gzip/manual/gzip.html\nconst DEFAULT_COMPRESSION_LEVEL = 6\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"get\"]}\n   */\n  async function * get (ipfsPath, options = {}) {\n    if (options.compressionLevel != null && (options.compressionLevel < -1 || options.compressionLevel > 9)) {\n      throw errCode(new Error('Compression level must be between -1 and 9'), 'ERR_INVALID_PARAMS')\n    }\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (/** @type {any} */ err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(ipfsPath) || ipfsPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file' || file.type === 'raw') {\n      const args = []\n\n      if (!options.compress || options.archive === true) {\n        args.push([{\n          header: {\n            name: file.path,\n            mode: file.type === 'file' && file.unixfs.mode,\n            mtime: file.type === 'file' && file.unixfs.mtime ? new Date(file.unixfs.mtime.secs * 1000) : undefined,\n            size: file.size,\n            type: 'file'\n          },\n          body: file.content()\n        }],\n        pack()\n        )\n      } else {\n        args.push(\n          file.content\n        )\n      }\n\n      if (options.compress) {\n        args.push(\n          /**\n           * @param {AsyncIterable<Uint8Array>} source\n           */\n          async function * (source) {\n            const buf = await toBuffer(source)\n\n            yield Pako.gzip(buf, {\n              level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n            })\n          }\n        )\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    if (file.type === 'directory') {\n      /** @type {any[]} */\n      const args = [\n        recursive(ipfsPathOrCid, repo.blocks, options),\n        /**\n         * @param {AsyncIterable<import('ipfs-unixfs-exporter').UnixFSEntry>} source\n         */\n        async function * (source) {\n          for await (const entry of source) {\n            /** @type {import('it-tar').TarImportCandidate} */\n            const output = {\n              header: {\n                name: entry.path,\n                size: entry.size\n              }\n            }\n\n            if (entry.type === 'file') {\n              output.header.type = 'file'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n              output.body = entry.content()\n            } else if (entry.type === 'raw') {\n              output.header.type = 'file'\n              output.body = entry.content()\n            } else if (entry.type === 'directory') {\n              output.header.type = 'directory'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n            } else {\n              throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n            }\n\n            yield output\n          }\n        },\n        pack()\n      ]\n\n      if (options.compress) {\n        if (!options.archive) {\n          throw errCode(new Error('file is not regular'), 'ERR_INVALID_PATH')\n        }\n\n        if (options.compress) {\n          args.push(\n            /**\n             * @param {AsyncIterable<Uint8Array>} source\n             */\n            async function * (source) {\n              const buf = await toBuffer(source)\n\n              yield Pako.gzip(buf, {\n                level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n              })\n            }\n          )\n        }\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n  }\n\n  return withTimeoutOption(get)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all/index.js'\nimport { createCat } from './cat.js'\nimport { createGet } from './get.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context\n * @typedef {import('./add-all').Context} AddAllContext\n * @typedef {import('./cat').Context} CatContext\n * @typedef {import('./get').Context} GetContext\n * @typedef {import('./ls').Context} ListContext\n */\nexport class RootAPI {\n  /**\n   * @param {Context} context\n   */\n  constructor ({ preload, repo, hashers, options }) {\n    const addAll = createAddAll({\n      preload,\n      repo,\n      options,\n      hashers\n    })\n\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    this.cat = createCat({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.ls = createLs({ repo, preload })\n  }\n}\n","\nexport const ipfsCore = '0.18.0'\nexport const commit = ''\nexport const interfaceIpfsCore = '^0.158.0'\n","import { ipfsCore, interfaceIpfsCore, commit } from '../version.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"version\"]}\n   */\n  async function version (_options = {}) {\n    const repoVersion = await repo.version.get()\n\n    return {\n      version: ipfsCore,\n      commit,\n      repo: `${repoVersion}`,\n      'ipfs-core': ipfsCore,\n      'interface-ipfs-core': interfaceIpfsCore\n    }\n  }\n\n  return withTimeoutOption(version)\n}\n","import { ipfsCore as pkgversion } from '../version.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NotStartedError } from '../errors.js'\nimport errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:id')\n\n/**\n * @typedef {import('libp2p').Libp2p} Libp2p\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\nexport function createId ({ peerId, network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"id\"]}\n   */\n  async function id (options = {}) { // eslint-disable-line require-await\n    const net = network.try()\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError()\n      }\n\n      if (peerId.publicKey == null) {\n        throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n      }\n\n      return {\n        id: peerId,\n        publicKey: uint8ArrayToString(peerId.publicKey, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      }\n    }\n\n    const { libp2p } = net\n    const peerIdToId = options.peerId ? options.peerId : peerId\n    const peer = await findPeer(peerIdToId, libp2p, options)\n    const agentVersion = uint8ArrayToString(peer.metadata.get('AgentVersion') || new Uint8Array())\n    const protocolVersion = uint8ArrayToString(peer.metadata.get('ProtocolVersion') || new Uint8Array())\n    const idStr = peer.id.toString()\n    const publicKeyStr = peer.publicKey ? uint8ArrayToString(peer.publicKey, 'base64pad') : ''\n\n    return {\n      id: peerIdToId,\n      publicKey: publicKeyStr,\n      addresses: (peer.addresses || [])\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${idStr}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${idStr}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (peer.protocols || []).sort()\n    }\n  }\n\n  return withTimeoutOption(id)\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeer (peerId, libp2p, options) {\n  let peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    peer = await findPeerOnDht(peerId, libp2p, options)\n  }\n\n  let publicKey = peerId.publicKey ? peerId.publicKey : await libp2p.peerStore.keyBook.get(peerId)\n\n  if (publicKey == null) {\n    try {\n      publicKey = await libp2p.getPublicKey(peerId, options)\n    } catch (err) {\n      log.error('Could not load public key for', peerId.toString(), err)\n    }\n  }\n\n  return {\n    ...peer,\n    publicKey,\n    metadata: peer.metadata || new Map(),\n    addresses: peer.addresses.map(addr => addr.multiaddr)\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeerOnDht (peerId, libp2p, options) {\n  if (libp2p.dht == null) {\n    throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n  }\n\n  for await (const event of libp2p.dht.findPeer(peerId, options)) {\n    if (event.name === 'FINAL_PEER') {\n      break\n    }\n  }\n\n  const peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    throw errCode(new Error('Could not find peer'), 'ERR_NOT_FOUND')\n  }\n\n  return peer\n}\n","import set from 'just-safe-set'\nimport getDefaultConfig from 'ipfs-core-config/config'\n\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @type {Record<string, Transformer>}\n */\nexport const profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      config.Swarm = {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      }\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', true)\n      set(config, 'Discovery.webRTCStar.Enabled', true)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [])\n      set(config, 'Addresses.Delegates', [])\n      set(config, 'Bootstrap', [])\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      })\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API)\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway)\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm)\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates)\n      set(config, 'Bootstrap', defaultConfig.Bootstrap)\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled)\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      const Swarm = config.Swarm || {}\n      const ConnMgr = Swarm.ConnMgr || {}\n      ConnMgr.LowWater = 20\n      ConnMgr.HighWater = 40\n\n      Swarm.ConnMgr = ConnMgr\n      config.Swarm = Swarm\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n","import { bytes as binary, CID } from './index.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\nfunction readonly ({ enumerable = true, configurable = false } = {}) {\n  return { enumerable, configurable, writable: false }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<[string, CID]>}\n */\nfunction * linksWithin (path, value) {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index]\n        const cid = CID.asCID(element)\n        if (cid) {\n          yield [elementPath.join('/'), cid]\n        } else if (typeof element === 'object') {\n          yield * links(element, elementPath)\n        }\n      }\n    } else {\n      const cid = CID.asCID(value)\n      if (cid) {\n        yield [path.join('/'), cid]\n      } else {\n        yield * links(value, path)\n      }\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nfunction * links (source, base) {\n  if (source == null || source instanceof Uint8Array) {\n    return\n  }\n  const cid = CID.asCID(source)\n  if (cid) {\n    yield [base.join('/'), cid]\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield * linksWithin(path, value)\n  }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<string>}\n */\nfunction * treeWithin (path, value) {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index]\n      yield elementPath.join('/')\n      if (typeof element === 'object' && !CID.asCID(element)) {\n        yield * tree(element, elementPath)\n      }\n    }\n  } else {\n    yield * tree(value, path)\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<string>}\n */\nfunction * tree (source, base) {\n  if (source == null || typeof source !== 'object') {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield path.join('/')\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      yield * treeWithin(path, value)\n    }\n  }\n}\n\n/**\n *\n * @template T\n * @param {T} source\n * @param {string[]} path\n * @returns {API.BlockCursorView<unknown>}\n */\nfunction get (source, path) {\n  let node = /** @type {Record<string, any>} */(source)\n  for (const [index, key] of path.entries()) {\n    node = node[key]\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`)\n    }\n    const cid = CID.asCID(node)\n    if (cid) {\n      return { value: cid, remaining: path.slice(index + 1).join('/') }\n    }\n  }\n  return { value: node }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} C - multicodec code corresponding to codec used to encode the block\n * @template {number} A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @implements {API.BlockView<T, C, A, V>}\n */\nclass Block {\n  /**\n   * @param {object} options\n   * @param {CID<T, C, A, V>} options.cid\n   * @param {API.ByteView<T>} options.bytes\n   * @param {T} options.value\n   */\n  constructor ({ cid, bytes, value }) {\n    if (!cid || !bytes || typeof value === 'undefined') { throw new Error('Missing required argument') }\n\n    this.cid = cid\n    this.bytes = bytes\n    this.value = value\n    this.asBlock = this\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    })\n  }\n\n  links () {\n    return links(this.value, [])\n  }\n\n  tree () {\n    return tree(this.value, [])\n  }\n\n  /**\n   *\n   * @param {string} [path]\n   * @returns {API.BlockCursorView<unknown>}\n   */\n  get (path = '/') {\n    return get(this.value, path.split('/').filter(Boolean))\n  }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {T} options.value\n * @param {API.BlockEncoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function encode ({ value, codec, hasher }) {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const bytes = codec.encode(value)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(\n    1,\n    codec.code,\n    hash\n  )\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function decode ({ bytes, codec, hasher }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash)\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @typedef {object} RequiredCreateOptions\n * @property {CID} options.cid\n */\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {{ cid: API.Link<T, Code, Alg, V>, value:T, codec?: API.BlockDecoder<Code, T>, bytes: API.ByteView<T> }|{cid:API.Link<T, Code, Alg, V>, bytes:API.ByteView<T>, value?:void, codec:API.BlockDecoder<Code, T>}} options\n * @returns {API.BlockView<T, Code, Alg, V>}\n */\nfunction createUnsafe ({ bytes, cid, value: maybeValue, codec }) {\n  const value = maybeValue !== undefined\n    ? maybeValue\n    : (codec && codec.decode(bytes))\n\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"')\n\n  return new Block({\n    // eslint-disable-next-line object-shorthand\n    cid: /** @type {CID<T, Code, Alg, V>} */ (cid),\n    bytes,\n    value\n  })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {object} options\n * @param {API.Link<T, Code, Alg, V>} options.cid\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg, V>>}\n */\nasync function create ({ bytes, cid, hasher, codec }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!hasher) throw new Error('Missing required argument \"hasher\"')\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes')\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  })\n}\n\nexport { encode, decode, create, createUnsafe, Block }\n","import { base58btc } from './bases/base58.js'\n\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\nconst walk = async ({ cid, load, seen }) => {\n  seen = seen || new Set()\n  const b58Cid = cid.toString(base58btc)\n  if (seen.has(b58Cid)) {\n    return\n  }\n\n  const block = await load(cid)\n  seen.add(b58Cid)\n\n  if (block === null) { // the loader signals with `null` that we should skip this block\n    return\n  }\n\n  for (const [, cid] of block.links()) {\n    await walk({ cid, load, seen })\n  }\n}\n\nexport { walk }\n","import { CID } from 'multiformats/cid'\nimport { createUnsafe } from 'multiformats/block'\nimport { CarWriter } from '@ipld/car/writer'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as json from 'multiformats/codecs/json'\nimport { walk } from 'multiformats/traversal'\n\nconst log = logger('ipfs:components:dag:import')\n\n// blocks that we're OK with not inspecting for links\n/** @type {number[]} */\nconst NO_LINKS_CODECS = [\n  raw.code, // raw\n  json.code // JSON\n]\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('@ipld/car/api').BlockWriter} BlockWriter\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template T\n * @template C\n * @template A\n * @template V\n * @typedef {import('multiformats/block').Block<T, C, A, V>} Block\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Preload} config.preload\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createExport ({ repo, preload, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    if (options.preload !== false) {\n      preload(root)\n    }\n\n    const cid = CID.asCID(root)\n    if (!cid) {\n      throw new Error(`Unexpected error converting CID type: ${root}`)\n    }\n\n    log(`Exporting ${cid} as car`)\n    const { writer, out } = await CarWriter.create([cid])\n\n    // we need to write with one async channel and send the CarWriter output\n    // with another to the caller, but if the write causes an error we capture\n    // that and make sure it gets propagated\n    /** @type {Error|null} */\n    let err = null\n    ;(async () => {\n      try {\n        const load = makeLoader(repo, writer, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs)\n        await walk({ cid, load })\n      } catch (/** @type {any} */ e) {\n        err = e\n      } finally {\n        writer.close()\n      }\n    })()\n\n    for await (const chunk of out) {\n      if (err) {\n        break\n      }\n      yield chunk\n    }\n    if (err) {\n      throw err\n    }\n  }\n\n  return withTimeoutOption(dagExport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {BlockWriter} writer\n * @param {AbortOptions} options\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @returns {(cid:CID)=>Promise<ReturnType<createUnsafe>|null>}\n */\nfunction makeLoader (repo, writer, options, codecs) {\n  return async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`)\n    }\n\n    const bytes = await repo.blocks.get(cid, options)\n\n    log(`Adding block ${cid} to car`)\n    await writer.put({ cid, bytes })\n\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null // skip this block, no need to look inside\n    }\n\n    return createUnsafe({ bytes, cid, codec })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { resolve } from '../../utils.js'\nimport errCode from 'err-code'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ codecs, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n","import { CarBlockIterator } from '@ipld/car/iterator'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport itPeekable from 'it-peekable'\nimport drain from 'it-drain'\nimport map from 'it-map'\nimport { logger } from '@libp2p/logger'\nconst log = logger('ipfs:components:dag:import')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n */\nexport function createImport ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"import\"]}\n   */\n  async function * dagImport (sources, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const abortOptions = { signal: options.signal, timeout: options.timeout }\n      const peekable = itPeekable(sources)\n\n      const { value, done } = await peekable.peek()\n\n      if (done) {\n        return\n      }\n\n      if (value) {\n        // @ts-expect-error\n        peekable.push(value)\n      }\n\n      /**\n       * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n       */\n      let cars\n\n      if (value instanceof Uint8Array) {\n        // @ts-expect-error\n        cars = [peekable]\n      } else {\n        // @ts-expect-error\n        cars = peekable\n      }\n\n      for await (const car of cars) {\n        const roots = await importCar(repo, abortOptions, car)\n\n        if (options.pinRoots !== false) { // default=true\n          for (const cid of roots) {\n            let pinErrorMsg = ''\n\n            try { // eslint-disable-line max-depth\n              if (await repo.blocks.has(cid)) { // eslint-disable-line max-depth\n                log(`Pinning root ${cid}`)\n                await repo.pins.pinRecursively(cid)\n              } else {\n                pinErrorMsg = 'blockstore: block not found'\n              }\n            } catch (/** @type {any} */ err) {\n              pinErrorMsg = err.message\n            }\n\n            yield { root: { cid, pinErrorMsg } }\n          }\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(dagImport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\nasync function importCar (repo, options, source) {\n  const reader = await CarBlockIterator.fromIterable(source)\n  const roots = await reader.getRoots()\n\n  await drain(\n    repo.blocks.putMany(\n      map(reader, ({ cid: key, bytes: value }) => {\n        log(`Import block ${key}`)\n\n        return { key, value }\n      }),\n      { signal: options.signal }\n    )\n  )\n\n  return roots\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { resolvePath } from '../../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createResolve ({ repo, codecs, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\nexport class DagAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('../../types').Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo, codecs, hashers, preload }) {\n    this.export = createExport({ repo, preload, codecs })\n    this.get = createGet({ codecs, repo, preload })\n    this.import = createImport({ repo })\n    this.resolve = createResolve({ repo, codecs, preload })\n    this.put = createPut({ repo, codecs, hashers, preload })\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr';\nconst reduceValue = (_, v) => v;\nconst tcpUri = (str, port, parts, opts) => {\n    // return tcp when explicitly requested\n    if ((opts != null) && opts.assumeHttp === false)\n        return `tcp://${str}:${port}`;\n    // check if tcp is the last protocol in multiaddr\n    let protocol = 'tcp';\n    let explicitPort = `:${port}`;\n    const last = parts[parts.length - 1];\n    if (last.protocol === 'tcp') {\n        // assume http and produce clean urls\n        protocol = port === '443' ? 'https' : 'http';\n        explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n    }\n    return `${protocol}://${str}${explicitPort}`;\n};\nconst Reducers = {\n    ip4: reduceValue,\n    ip6: (str, content, i, parts) => (parts.length === 1 && parts[0].protocol === 'ip6'\n        ? content\n        : `[${content}]`),\n    tcp: (str, content, i, parts, opts) => (parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n        ? `${str}:${content}`\n        : tcpUri(str, content, parts, opts)),\n    udp: (str, content) => `udp://${str}:${content}`,\n    dnsaddr: reduceValue,\n    dns4: reduceValue,\n    dns6: reduceValue,\n    ipfs: (str, content) => `${str}/ipfs/${content}`,\n    p2p: (str, content) => `${str}/p2p/${content}`,\n    http: str => `http://${str}`,\n    https: str => `https://${str}`,\n    ws: str => `ws://${str}`,\n    wss: str => `wss://${str}`,\n    'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n    'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n    'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n};\nexport function multiaddrToUri(input, opts) {\n    const ma = multiaddr(input);\n    const parts = ma.toString().split('/').slice(1);\n    return ma\n        .tuples()\n        .map(tuple => ({\n        protocol: parts.shift() ?? '',\n        content: (tuple[1] != null) ? parts.shift() ?? '' : ''\n    }))\n        .reduce((str, part, i, parts) => {\n        const reduce = Reducers[part.protocol];\n        if (reduce == null) {\n            throw new Error(`Unsupported protocol ${part.protocol}`);\n        }\n        return reduce(str, part.content, i, parts, opts);\n    }, '');\n}\n//# sourceMappingURL=index.js.map","/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n","import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { logger } from '@libp2p/logger'\nimport shuffle from 'array-shuffle'\nimport { preload } from 'ipfs-core-config/preload'\nimport hashlru from 'hashlru'\n\nconst log = logger('ipfs:preload')\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader (options = {}) {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map((str) => multiaddrToUri(str))\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (/** @type {any} */ err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n","import { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs-preload')\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader ({ preload, files, options = {} }) {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (/** @type {any} */ err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n","import mortice from 'mortice'\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nexport function createLock (repoOwner = false) {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n","import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n","\n/**\n * @param {string} [path]\n */\nexport function toPathComponents (path = '') {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n","import { loadMfsRoot } from './with-mfs-root.js'\nimport { toPathComponents } from './to-path-components.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\nconst IPFS_PREFIX = 'ipfs'\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport const toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options)\n\n  /** @type {MfsPath} */\n  // @ts-expect-error fields get set later\n  let output = {\n    entryType: 'file'\n  }\n\n  let ipfsPath = ''\n\n  if (CID.asCID(path)) {\n    ipfsPath = `/ipfs/${path}`\n  } else {\n    ipfsPath = path.toString()\n  }\n\n  ipfsPath = ipfsPath.trim()\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/')\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH')\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  const pathComponents = toPathComponents(ipfsPath)\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n    }\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options)\n\n    output.cid = res.cid\n    output.mfsPath = `/ipfs/${res.path}`\n    output.entryType = res.type\n    output.content = res.content\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs\n    }\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  output.exists = Boolean(output.cid)\n\n  return output\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n","import { walkPath } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nexport async function toTrail (context, path) {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n","import { CID } from 'multiformats/cid'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n","import { murmur3128 } from '@multiformats/murmur3'\n\nexport const hamtHashCode = murmur3128.code\nexport const hamtBucketBits = 8\n\n/**\n * @param {Uint8Array} buf\n */\nexport async function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .subarray(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { persist } from './persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nexport class Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport class DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport {\n  Bucket,\n  createHAMT\n} from 'hamt-sharding'\nimport { DirSharded } from './dir-sharded.js'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport last from 'it-last'\nimport { CID } from 'multiformats/cid'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\nconst log = logger('ipfs:mfs:core:utils:hamt-utils')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {object} options\n * @param {PBNode} options.parent\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {string} options.hashAlg\n */\nexport const updateHamtDirectory = async (context, links, bucket, options) => {\n  if (!options.parent.Data) {\n    throw new Error('Could not update HAMT directory because parent had no data')\n  }\n\n  // update parent with new bit field\n  const data = Uint8Array.from(bucket._children.bitField().reverse())\n  const node = UnixFS.unmarshal(options.parent.Data)\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mode: node.mode,\n    mtime: node.mtime\n  })\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const parent = {\n    Data: dir.marshal(),\n    Links: links.sort((a, b) => (a.Name || '').localeCompare(b.Name || ''))\n  }\n  const buf = dagPB.encode(parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: parent,\n    cid,\n    size: links.reduce((sum, link) => sum + (link.Tsize || 0), buf.length)\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} rootBucket\n * @param {Bucket<any>} parentBucket\n * @param {number} positionAtParent\n */\nexport const recreateHamtLevel = async (context, links, rootBucket, parentBucket, positionAtParent) => {\n  // recreate this level of the HAMT\n  const bucket = new Bucket({\n    hash: rootBucket._options.hash,\n    bits: rootBucket._options.bits\n  }, parentBucket, positionAtParent)\n  parentBucket._putObjectAt(positionAtParent, bucket)\n\n  await addLinksToHamtBucket(context, links, bucket, rootBucket)\n\n  return bucket\n}\n\n/**\n * @param {PBLink[]} links\n */\nexport const recreateInitialHamtLevel = async (links) => {\n  const bucket = createHAMT({\n    hashFn: hamtHashFn,\n    bits: hamtBucketBits\n  })\n\n  // populate sub bucket but do not recurse as we do not want to pull whole shard in\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        const pos = parseInt(linkName, 16)\n\n        const subBucket = new Bucket({\n          hash: bucket._options.hash,\n          bits: bucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        return Promise.resolve()\n      }\n\n      return bucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n\n  return bucket\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {Bucket<any>} rootBucket\n */\nexport const addLinksToHamtBucket = async (context, links, bucket, rootBucket) => {\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        log('Populating sub bucket', linkName)\n        const pos = parseInt(linkName, 16)\n        const block = await context.repo.blocks.get(link.Hash)\n        const node = dagPB.decode(block)\n\n        const subBucket = new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        await addLinksToHamtBucket(context, node.Links, subBucket, rootBucket)\n\n        return Promise.resolve()\n      }\n\n      return rootBucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nexport const toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} fileName\n * @param {PBNode} rootNode\n */\nexport const generatePath = async (context, fileName, rootNode) => {\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(rootNode.Links)\n  const position = await rootBucket._findNewBucketAndPos(fileName)\n\n  // the path to the root bucket\n  /** @type {{ bucket: Bucket<any>, prefix: string, node?: PBNode }[]} */\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n  let currentBucket = position.bucket\n\n  while (currentBucket !== rootBucket) {\n    path.push({\n      bucket: currentBucket,\n      prefix: toPrefix(currentBucket._posAtParent)\n    })\n\n    // @ts-expect-error - only the root bucket's parent will be undefined\n    currentBucket = currentBucket._parent\n  }\n\n  path.reverse()\n  path[0].node = rootNode\n\n  // load PbNode for each path segment\n  for (let i = 0; i < path.length; i++) {\n    const segment = path[i]\n\n    if (!segment.node) {\n      throw new Error('Could not generate HAMT path')\n    }\n\n    // find prefix in links\n    const link = segment.node.Links\n      .filter(link => (link.Name || '').substring(0, 2) === segment.prefix)\n      .pop()\n\n    // entry was not in shard\n    if (!link) {\n      // reached bottom of tree, file will be added to the current bucket\n      log(`Link ${segment.prefix}${fileName} will be added`)\n      // return path\n      continue\n    }\n\n    // found entry\n    if (link.Name === `${segment.prefix}${fileName}`) {\n      log(`Link ${segment.prefix}${fileName} will be replaced`)\n      // file already existed, file will be added to the current bucket\n      // return path\n      continue\n    }\n\n    // found subshard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const node = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[i + 1]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n\n      await recreateHamtLevel(context, node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n      const position = await rootBucket._findNewBucketAndPos(fileName)\n\n      // i--\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: node\n      })\n\n      continue\n    }\n\n    const nextSegment = path[i + 1]\n\n    // add intermediate links to bucket\n    await addLinksToHamtBucket(context, node.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = node\n  }\n\n  await rootBucket.put(fileName, true)\n\n  path.reverse()\n\n  return {\n    rootBucket,\n    path\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ name: string, size: number, cid: CID }[]} contents\n * @param {object} [options]\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nexport const createShard = async (context, contents, options = {}) => {\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mtime: options.mtime,\n    mode: options.mode\n  }, options)\n\n  for (let i = 0; i < contents.length; i++) {\n    await shard._bucket.put(contents[i].name, {\n      size: contents[i].size,\n      cid: contents[i].cid\n    })\n  }\n\n  const res = await last(shard.flush(context.repo.blocks))\n\n  if (!res) {\n    throw new Error('Flushing shard yielded no result')\n  }\n\n  return res\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { DirSharded } from './dir-sharded.js'\nimport {\n  updateHamtDirectory,\n  recreateHamtLevel,\n  recreateInitialHamtLevel,\n  createShard,\n  toPrefix,\n  addLinksToHamtBucket\n} from './hamt-utils.js'\nimport errCode from 'err-code'\nimport last from 'it-last'\n\nconst log = logger('ipfs:mfs:core:utils:add-link')\n\n/**\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {CID} [options.parentCid]\n * @param {PBNode} [options.parent]\n */\nexport async function addLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID')\n    }\n\n    if (parentCid.code !== dagPB.code) {\n      throw errCode(new Error('Unsupported codec. Only DAG-PB is supported'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.cid) {\n    throw errCode(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!options.size && options.size !== 0) {\n    throw errCode(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addLink'), 'ERR_INVALID_PARENT')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log('Adding link to sharded directory')\n\n    return addToShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  if (parent.Links.length >= options.shardSplitThreshold) {\n    log('Converting directory to sharded directory')\n\n    return convertToShardedDirectory(context, {\n      ...options,\n      parent,\n      mtime: meta.mtime,\n      mode: meta.mode\n    })\n  }\n\n  log(`Adding ${options.name} (${options.cid}) to regular directory`)\n\n  return addToDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst convertToShardedDirectory = async (context, options) => {\n  const result = await createShard(context, options.parent.Links.map(link => ({\n    name: (link.Name || ''),\n    size: link.Tsize || 0,\n    cid: link.Hash\n  })).concat({\n    name: options.name,\n    size: options.size,\n    cid: options.cid\n  }), options)\n\n  log(`Converted directory to sharded directory ${result.cid}`)\n\n  return result\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst addToDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  const parentLinks = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n  parentLinks.push({\n    Name: options.name,\n    Tsize: options.size,\n    Hash: options.cid\n  })\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addToDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  let data\n  if (node.mtime) {\n    // Update mtime if previously set\n    const ms = Date.now()\n    const secs = Math.floor(ms / 1000)\n\n    node.mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n\n    data = node.marshal()\n  } else {\n    data = options.parent.Data\n  }\n  options.parent = dagPB.prepare({\n    Data: data,\n    Links: parentLinks\n  })\n\n  // Persist the new parent PbNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const buf = dagPB.encode(options.parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: options.parent,\n    cid,\n    size: buf.length\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst addToShardedDirectory = async (context, options) => {\n  const {\n    shard, path\n  } = await addFileToShardedDirectory(context, options)\n  const result = await last(shard.flush(context.repo.blocks))\n\n  if (!result) {\n    throw new Error('No result from flushing shard')\n  }\n\n  const block = await context.repo.blocks.get(result.cid)\n  const node = dagPB.decode(block)\n\n  // we have written out the shard, but only one sub-shard will have been written so replace it in the original shard\n  const parentLinks = options.parent.Links.filter((link) => {\n    // TODO vmx 2021-03-31: Check that there cannot be multiple ones matching\n    // Remove the old link\n    return (link.Name || '').substring(0, 2) !== path[0].prefix\n  })\n\n  const newLink = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === path[0].prefix)\n\n  if (!newLink) {\n    throw new Error(`No link found with prefix ${path[0].prefix}`)\n  }\n\n  parentLinks.push(newLink)\n\n  return updateHamtDirectory(context, parentLinks, path[0].bucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n */\nconst addFileToShardedDirectory = async (context, options) => {\n  const file = {\n    name: options.name,\n    cid: options.cid,\n    size: options.size\n  }\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addFileToShardedDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(options.parent.Links)\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mode: node.mode\n  }, options)\n  shard._bucket = rootBucket\n\n  if (node.mtime) {\n    // update mtime if previously set\n    shard.mtime = {\n      secs: Math.round(Date.now() / 1000)\n    }\n  }\n\n  // load subshards until the bucket & position no longer changes\n  const position = await rootBucket._findNewBucketAndPos(file.name)\n  const path = toBucketPath(position)\n  path[0].node = options.parent\n  let index = 0\n\n  while (index < path.length) {\n    const segment = path[index]\n    index++\n    const node = segment.node\n\n    if (!node) {\n      throw new Error('Segment had no node')\n    }\n\n    const link = node.Links\n      .find(link => (link.Name || '').substring(0, 2) === segment.prefix)\n\n    if (!link) {\n      // prefix is new, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be added`)\n      index = path.length\n\n      break\n    }\n\n    if (link.Name === `${segment.prefix}${file.name}`) {\n      // file already existed, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be replaced`)\n      index = path.length\n\n      break\n    }\n\n    if ((link.Name || '').length > 2) {\n      // another file had the same prefix, will be replaced with a subshard\n      log(`Link ${link.Name} ${link.Hash} will be replaced with a subshard`)\n      index = path.length\n\n      break\n    }\n\n    // load sub-shard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const subShard = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[index]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n      await recreateHamtLevel(context, subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n\n      const position = await rootBucket._findNewBucketAndPos(file.name)\n\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: subShard\n      })\n\n      break\n    }\n\n    const nextSegment = path[index]\n\n    // add next levels worth of links to bucket\n    await addLinksToHamtBucket(context, subShard.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = subShard\n  }\n\n  // finally add the new file into the shard\n  await shard._bucket.put(file.name, {\n    size: file.size,\n    cid: file.cid\n  })\n\n  return {\n    shard, path\n  }\n}\n\n/**\n * @param {{ pos: number, bucket: Bucket }} position\n * @returns {{ bucket: Bucket, prefix: string, node?: PBNode }[]}\n */\nconst toBucketPath = (position) => {\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n\n  let bucket = position.bucket._parent\n  let positionInBucket = position.bucket._posAtParent\n\n  while (bucket) {\n    path.push({\n      bucket,\n      prefix: toPrefix(positionInBucket)\n    })\n\n    positionInBucket = bucket._posAtParent\n    bucket = bucket._parent\n  }\n\n  path.reverse()\n\n  return path\n}\n","import { logger } from '@libp2p/logger'\nimport { addLink } from './add-link.js'\nimport {\n  decode\n} from '@ipld/dag-pb'\n\nconst log = logger('ipfs:mfs:utils:update-tree')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree (context, trail, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n","import { logger } from '@libp2p/logger'\nimport {\n  MFS_ROOT_KEY\n} from '../../../utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:utils:update-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport async function updateMfsRoot (context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { createNode } from './utils/create-node.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { addLink } from './utils/add-link.js'\nimport { loadMfsRoot } from './utils/with-mfs-root.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:mkdir')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} flush\n * @property {number} [mode]\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000,\n  flush: true\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMkdir (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mkdir\"]}\n   */\n  async function mfsMkdir (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    if (!path) {\n      throw new Error('no path given to Mkdir')\n    }\n\n    path = path.trim()\n\n    if (path === '/') {\n      if (opts.parents) {\n        return\n      }\n\n      throw errCode(new Error('cannot create directory \\'/\\': Already exists'), 'ERR_INVALID_PATH')\n    }\n\n    if (path.substring(0, 1) !== '/') {\n      throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n    }\n\n    log(`Creating ${path}`)\n\n    const pathComponents = toPathComponents(path)\n\n    if (pathComponents[0] === 'ipfs') {\n      throw errCode(new Error(\"path cannot have the prefix 'ipfs'\"), 'ERR_INVALID_PATH')\n    }\n\n    const root = await loadMfsRoot(context, opts)\n    let parent\n    const trail = []\n    const emptyDir = await createNode(context, 'directory', opts)\n\n    // make sure the containing folder exists, creating it if necessary\n    for (let i = 0; i <= pathComponents.length; i++) {\n      const subPathComponents = pathComponents.slice(0, i)\n      const subPath = `/ipfs/${root}/${subPathComponents.join('/')}`\n\n      try {\n        parent = await exporter(subPath, context.repo.blocks)\n\n        if (parent.type !== 'file' && parent.type !== 'directory') {\n          throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n        }\n\n        if (i === pathComponents.length) {\n          if (opts.parents) {\n            return\n          }\n\n          throw errCode(new Error('file already exists'), 'ERR_ALREADY_EXISTS')\n        }\n\n        trail.push({\n          name: parent.name,\n          cid: parent.cid\n        })\n      } catch (/** @type {any} */ err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          if (i < pathComponents.length && !opts.parents) {\n            throw errCode(new Error(`Intermediate directory path ${subPath} does not exist, use the -p flag to create it`), 'ERR_NOT_FOUND')\n          }\n\n          // add the intermediate directory\n          await addEmptyDir(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, opts)\n        } else {\n          throw err\n        }\n      }\n    }\n\n    // add an empty dir to the last path component\n    // await addEmptyDir(context, pathComponents[pathComponents.length - 1], emptyDir, parent, trail)\n\n    // update the tree from the leaf to the root\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsMkdir)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} childName\n * @param {{ cid: CID, node?: PBNode }} emptyDir\n * @param {{ cid?: CID, node?: PBNode }} parent\n * @param {{ name: string, cid: CID }[]} trail\n * @param {DefaultOptions} options\n */\nconst addEmptyDir = async (context, childName, emptyDir, parent, trail, options) => {\n  log(`Adding empty dir called ${childName} to ${parent.cid}`)\n\n  const result = await addLink(context, {\n    parent: parent.node,\n    parentCid: parent.cid,\n    // TODO vmx 2021-03-09: Remove the usage of size completely\n    size: 0,\n    cid: emptyDir.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  trail[trail.length - 1].cid = result.cid\n\n  trail.push({\n    name: childName,\n    cid: emptyDir.cid\n  })\n}\n","import { createMkdir } from './mkdir.js'\nimport { createStat } from './stat.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { addLink } from './utils/add-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport mergeOpts from 'merge-options'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:cp')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createCp (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"cp\"]}\n   */\n  async function mfsCp (from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(from)) {\n      from = [from]\n    }\n\n    const sources = await Promise.all(\n      from.map((/** @type {CID | string} */ path) => toMfsPath(context, path, options))\n    )\n    let destination = await toMfsPath(context, to, options)\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS')\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists)\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS')\n    }\n\n    const destinationIsDirectory = isDirectory(destination)\n\n    if (destination.exists) {\n      log('Destination exists')\n\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS')\n      }\n    } else {\n      log('Destination does not exist')\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n        }\n\n        await createMkdir(context)(destination.path, options)\n        destination = await toMfsPath(context, destination.path, options)\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`\n\n        try {\n          await createStat(context)(parentFolder, options)\n        } catch (/** @type {any} */ err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n          }\n\n          await createMkdir(context)(parentFolder, options)\n          destination = await toMfsPath(context, destination.path, options)\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory\n    const trail = await toTrail(context, destinationPath)\n\n    if (sources.length === 1) {\n      const source = sources.pop()\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS')\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name\n\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`)\n\n      return copyToFile(context, source, destinationName, trail, options)\n    }\n\n    log('Multiple sources, wrapping in a directory')\n    return copyToDirectory(context, sources, destination, trail, options)\n  }\n\n  return withTimeoutOption(mfsCp)\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = (destination) => {\n  return destination.unixfs &&\n    destination.unixfs.type &&\n    destination.unixfs.type.includes('directory')\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop()\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS')\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options)\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent)\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n\n    destination = await addSourceToParent(context, source, source.name, destination, options)\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid)\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.node = node\n  parent.cid = cid\n  parent.size = size\n\n  return parent\n}\n","\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport {\n  generatePath,\n  updateHamtDirectory\n} from './hamt-utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:core:utils:remove-link')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} RemoveLinkOptions\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {CID} [parentCid]\n * @property {PBNode} [parent]\n *\n * @typedef {object} RemoveLinkOptionsInternal\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {PBNode} parent\n */\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptions} options\n */\nexport async function removeLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node had no data'), 'ERR_INVALID_NODE')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log(`Removing ${options.name} from sharded directory`)\n\n    return removeFromShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  log(`Removing link ${options.name} regular directory`)\n\n  return removeFromDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  options.parent.Links = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n\n  const parentBlock = await dagPB.encode(options.parent)\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const hash = await hasher.digest(parentBlock)\n  const parentCid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  await context.repo.blocks.put(parentCid, parentBlock)\n\n  log(`Updated regular directory ${parentCid}`)\n\n  return {\n    node: options.parent,\n    cid: parentCid\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromShardedDirectory = async (context, options) => {\n  const {\n    rootBucket, path\n  } = await generatePath(context, options.name, options.parent)\n\n  await rootBucket.del(options.name)\n\n  const {\n    node\n  } = await updateShard(context, path, options.name, options)\n\n  return updateHamtDirectory(context, node.Links, rootBucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ bucket: Bucket, prefix: string, node?: PBNode }[]} positions\n * @param {string} name\n * @param {RemoveLinkOptionsInternal} options\n * @returns {Promise<{ node: PBNode, cid: CID, size: number }>}\n */\nconst updateShard = async (context, positions, name, options) => {\n  const last = positions.pop()\n\n  if (!last) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const {\n    bucket,\n    prefix,\n    node\n  } = last\n\n  if (!node) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const link = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === prefix)\n\n  if (!link) {\n    throw errCode(new Error(`No link found with prefix ${prefix} for file ${name}`), 'ERR_NOT_FOUND')\n  }\n\n  if (link.Name === `${prefix}${name}`) {\n    log(`Removing existing link ${link.Name}`)\n\n    const links = node.Links.filter((nodeLink) => {\n      return nodeLink.Name !== link.Name\n    })\n\n    await bucket.del(name)\n\n    return updateHamtDirectory(context, links, bucket, options)\n  }\n\n  log(`Descending into sub-shard ${link.Name} for ${prefix}${name}`)\n\n  const result = await updateShard(context, positions, name, options)\n\n  let cid = result.cid\n  let size = result.size\n  let newName = prefix\n\n  if (result.node.Links.length === 1) {\n    log(`Removing subshard for ${prefix}`)\n\n    // convert shard back to normal dir\n    const link = result.node.Links[0]\n\n    newName = `${prefix}${(link.Name || '').substring(2)}`\n    cid = link.Hash\n    size = link.Tsize || 0\n  }\n\n  log(`Updating shard ${prefix} with name ${newName}`)\n\n  return updateShardParent(context, bucket, node, prefix, newName, size, cid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {Bucket} bucket\n * @param {PBNode} parent\n * @param {string} oldName\n * @param {string} newName\n * @param {number} size\n * @param {CID} cid\n * @param {RemoveLinkOptionsInternal} options\n */\nconst updateShardParent = (context, bucket, parent, oldName, newName, size, cid, options) => {\n  // Remove existing link if it exists\n  const parentLinks = parent.Links.filter((link) => {\n    return link.Name !== oldName\n  })\n  parentLinks.push({\n    Name: newName,\n    Tsize: size,\n    Hash: cid\n  })\n\n  return updateHamtDirectory(context, parentLinks, bucket, options)\n}\n","import errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { removeLink } from './utils/remove-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} recursive\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRm (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"rm\"]}\n   */\n  async function mfsRm (paths, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(paths)) {\n      paths = [paths]\n    }\n\n    const sources = await Promise.all(\n      paths.map(path => toMfsPath(context, path, options))\n    )\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === '/') {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  }\n\n  return withTimeoutOption(mfsRm)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {DefaultOptions} options\n */\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path, options)\n  const trail = await toTrail(context, mfsPath.mfsPath)\n  const child = trail[trail.length - 1]\n  trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { pipe } from 'it-pipe'\nimport { importer } from 'ipfs-unixfs-importer'\nimport { recursive } from 'ipfs-unixfs-exporter'\nimport last from 'it-last'\nimport { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport { persist } from './utils/persist.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('./').MfsContext} MfsContext\n *\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} recursive\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  recursive: false\n}\n\n/**\n * @param {string} mode\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction calculateModification (mode, originalMode, isDirectory) {\n  let modification = 0\n\n  if (mode.includes('x') || (mode.includes('X') && (isDirectory || (originalMode & 0o1 || originalMode & 0o10 || originalMode & 0o100)))) {\n    modification += 1\n  }\n\n  if (mode.includes('w')) {\n    modification += 2\n  }\n\n  if (mode.includes('r')) {\n    modification += 4\n  }\n\n  return modification\n}\n\n/**\n * @param {string} references\n * @param {number} modification\n */\nfunction calculateUGO (references, modification) {\n  let ugo = 0\n\n  if (references.includes('u')) {\n    ugo += (modification << 6)\n  }\n\n  if (references.includes('g')) {\n    ugo += (modification << 3)\n  }\n\n  if (references.includes('o')) {\n    ugo += (modification)\n  }\n\n  return ugo\n}\n\n/**\n * @param {string} references\n * @param {string} mode\n * @param {number} modification\n */\nfunction calculateSpecial (references, mode, modification) {\n  if (mode.includes('t')) {\n    modification += parseInt('1000', 8)\n  }\n\n  if (mode.includes('s')) {\n    if (references.includes('u')) {\n      modification += parseInt('4000', 8)\n    }\n\n    if (references.includes('g')) {\n      modification += parseInt('2000', 8)\n    }\n  }\n\n  return modification\n}\n\n/**\n * https://en.wikipedia.org/wiki/Chmod#Symbolic_modes\n *\n * @param {string} input\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction parseSymbolicMode (input, originalMode, isDirectory) {\n  if (!originalMode) {\n    originalMode = 0\n  }\n\n  const match = input.match(/^(u?g?o?a?)(-?\\+?=?)?(r?w?x?X?s?t?)$/)\n\n  if (!match) {\n    throw new Error(`Invalid file mode: ${input}`)\n  }\n\n  let [\n    ,\n    references,\n    operator,\n    mode\n  ] = match\n\n  if (references === 'a' || !references) {\n    references = 'ugo'\n  }\n\n  let modification = calculateModification(mode, originalMode, isDirectory)\n  modification = calculateUGO(references, modification)\n  modification = calculateSpecial(references, mode, modification)\n\n  if (operator === '=') {\n    if (references.includes('u')) {\n      // blank u bits\n      originalMode = originalMode & parseInt('7077', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('g')) {\n      // blank g bits\n      originalMode = originalMode & parseInt('7707', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('o')) {\n      // blank o bits\n      originalMode = originalMode & parseInt('7770', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    return originalMode\n  }\n\n  if (operator === '+') {\n    return modification | originalMode\n  }\n\n  if (operator === '-') {\n    return modification ^ originalMode\n  }\n\n  return originalMode\n}\n\n/**\n * @param {string | InstanceType<typeof window.String> | number} mode\n * @param {UnixFS} metadata\n * @returns {number}\n */\nfunction calculateMode (mode, metadata) {\n  if (mode instanceof String || typeof mode === 'string') {\n    const strMode = `${mode}`\n\n    if (strMode.match(/^\\d+$/g)) {\n      mode = parseInt(strMode, 8)\n    } else {\n      mode = 0 + strMode.split(',').reduce((curr, acc) => {\n        return parseSymbolicMode(acc, curr, metadata.isDirectory())\n      }, metadata.mode || 0)\n    }\n  }\n\n  return mode\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createChmod (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"chmod\"]}\n   */\n  async function mfsChmod (path, mode, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name\n    } = await toMfsPath(context, path, opts)\n\n    if (cid.code !== dagPB.code) {\n      throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n    }\n\n    if (opts.recursive) {\n      // recursively export from root CID, change perms of each entry then reimport\n      // but do not reimport files, only manipulate dag-pb nodes\n      const root = await pipe(\n        async function * () {\n          for await (const entry of recursive(cid, context.repo.blocks)) {\n            if (entry.type !== 'file' && entry.type !== 'directory') {\n              throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n            }\n\n            entry.unixfs.mode = calculateMode(mode, entry.unixfs)\n\n            const node = dagPB.prepare({\n              Data: entry.unixfs.marshal(),\n              Links: entry.node.Links\n            })\n\n            yield {\n              path: entry.path,\n              content: node\n            }\n          }\n        },\n        // @ts-expect-error we account for the incompatible source type with our custom dag builder below\n        (source) => importer(source, context.repo.blocks, {\n          ...opts,\n          pin: false,\n          dagBuilder: async function * (source, block, opts) {\n            for await (const entry of source) {\n              yield async function () {\n                /** @type {PBNode} */\n                // @ts-expect-error - cannot derive type\n                const node = entry.content\n\n                const buf = dagPB.encode(node)\n                const cid = await persist(buf, block, opts)\n\n                if (!node.Data) {\n                  throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n                }\n\n                const unixfs = UnixFS.unmarshal(node.Data)\n\n                return {\n                  cid,\n                  size: buf.length,\n                  path: entry.path,\n                  unixfs\n                }\n              }\n            }\n          }\n        }),\n        (nodes) => last(nodes)\n      )\n\n      if (!root) {\n        throw errCode(new Error(`Could not chmod ${path}`), 'ERR_COULD_NOT_CHMOD')\n      }\n\n      // remove old path from mfs\n      await createRm(context)(path, opts)\n\n      // add newly created tree to mfs at path\n      await createCp(context)(`/ipfs/${root.cid}`, path, opts)\n\n      return\n    }\n\n    const block = await context.repo.blocks.get(cid)\n    const node = dagPB.decode(block)\n\n    if (!node.Data) {\n      throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n    }\n\n    const metadata = UnixFS.unmarshal(node.Data)\n    metadata.mode = calculateMode(mode, metadata)\n    const updatedBlock = dagPB.encode({\n      Data: metadata.marshal(),\n      Links: node.Links\n    })\n\n    const hashAlg = opts.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n    const hash = await hasher.digest(updatedBlock)\n    const updatedCid = CID.create(opts.cidVersion, dagPB.code, hash)\n\n    if (opts.flush) {\n      await context.repo.blocks.put(updatedCid, updatedBlock)\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = CID.decode(parent.cid.bytes)\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: opts.flush,\n      // TODO vmx 2021-03-29: decide on the API, whether it should be a `hashAlg` or `hasher`\n      hashAlg,\n      cidVersion: cid.version,\n      shardSplitThreshold: Infinity\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsChmod)\n}\n","import { createStat } from './stat.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {}\n\n/**\n * @param {MfsContext} context\n */\nexport function createFlush (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"flush\"]}\n   */\n  async function mfsFlush (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await createStat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n","import { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await createCp(context)(from, to, opts)\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPB.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPB.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n    return browserStreamToIt(content.stream())\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n","import { logger } from '@libp2p/logger'\nimport { importer } from 'ipfs-unixfs-importer'\nimport {\n  decode\n} from '@ipld/dag-pb'\nimport { createStat } from './stat.js'\nimport { createMkdir } from './mkdir.js'\nimport { addLink } from './utils/add-link.js'\nimport mergeOpts from 'merge-options'\nimport { createLock } from './utils/create-lock.js'\nimport { toAsyncIterator } from './utils/to-async-iterator.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport errCode from 'err-code'\nimport {\n  MFS_MAX_CHUNK_SIZE\n} from '../../utils.js'\nimport last from 'it-last'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport {\n  parseMode,\n  parseMtime\n} from 'ipfs-unixfs'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:write')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: Infinity, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createWrite (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"write\"]}\n   */\n  async function mfsWrite (path, content, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    /** @type {AsyncIterable<Uint8Array>} */\n    let source\n    /** @type {MfsPath} */\n    let destination\n    /** @type {MfsPath} */\n    let parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-expect-error - parent may be undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-expect-error\n    if (source == null) {\n      throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE')\n    }\n\n    // @ts-expect-error\n    if (destination == null) {\n      throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION')\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (destination.entryType !== 'file') {\n      throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n\n    if (fileName == null) {\n      throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST')\n    }\n\n    let parentExists = false\n\n    try {\n      await createStat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (/** @type {any} */ err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await createMkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (!parent.type || !parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentBlock = await context.repo.blocks.get(parent.cid)\n    const parentNode = decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  /** @type {number | undefined} */\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = parseMode(options.mode)\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  /** @type {import('ipfs-unixfs').Mtime | undefined} */\n  let mtime\n\n  if (options.mtime != null) {\n    mtime = parseMtime(options.mtime)\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.repo.blocks, {\n    progress: options.progress,\n    hasher,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType\n  }))\n\n  if (!result) {\n    throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE')\n  }\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.subarray(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  async function * _asyncZeroes () {\n    while (true) {\n      yield buf\n    }\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count)\n}\n\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport map from 'it-map'\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = (fsEntry) => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  }\n\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode\n    output.mtime = fsEntry.unixfs.mtime\n  }\n\n  return output\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function * mfsLs (path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options)\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield * map(fsEntry.content(options), toOutput)\n\n      return\n    }\n\n    // single file/node\n    yield toOutput(fsEntry)\n  }\n\n  return withTimeoutOption(mfsLs)\n}\n","import { createLock } from './utils/create-lock.js'\nimport * as isIpfs from 'is-ipfs'\nimport { createStat } from './stat.js'\nimport { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRm } from './rm.js'\nimport { createTouch } from './touch.js'\nimport { createRead } from './read.js'\nimport { createWrite } from './write.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n *\n * @typedef {object} MfsContext\n * @property {IPFSRepo} repo\n * @property {Multihashes} hashers\n */\n\n/**\n * These operations are read-locked at the function level and will execute simultaneously\n *\n * @type {Record<string, any>}\n */\nconst readOperations = {\n  stat: createStat\n}\n\n/**\n * These operations are locked at the function level and will execute in series\n *\n * @type {Record<string, any>}\n */\nconst writeOperations = {\n  chmod: createChmod,\n  cp: createCp,\n  flush: createFlush,\n  mkdir: createMkdir,\n  mv: createMv,\n  rm: createRm,\n  touch: createTouch\n}\n\n/**\n * These operations are asynchronous and manage their own locking\n *\n * @type {Record<string, any>}\n */\nconst unwrappedOperations = {\n  write: createWrite,\n  read: createRead,\n  ls: createLs\n}\n\n/**\n * @param {object} arg\n * @param {MfsContext} arg.options\n * @param {*} arg.mfs\n * @param {*} arg.operations\n * @param {*} arg.lock\n */\nconst wrap = ({\n  options, mfs, operations, lock\n}) => {\n  Object.keys(operations).forEach(key => {\n    mfs[key] = lock(operations[key](options))\n  })\n}\n\nconst defaultOptions = {\n  repoOwner: true,\n  repo: null\n}\n\n/**\n * @param {object} options\n * @param {IPFSRepo} options.repo\n * @param {boolean} options.repoOwner\n * @param {Multihashes} options.hashers\n */\nfunction createMfs (options) {\n  const {\n    repoOwner\n  } = Object.assign({}, defaultOptions || {}, options)\n\n  const lock = createLock(repoOwner)\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const readLock = (operation) => {\n    return lock.readLock(operation)\n  }\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const writeLock = (operation) => {\n    return lock.writeLock(operation)\n  }\n\n  /** @type {Record<string, any>} */\n  const mfs = {}\n\n  wrap({\n    options, mfs, operations: readOperations, lock: readLock\n  })\n  wrap({\n    options, mfs, operations: writeOperations, lock: writeLock\n  })\n\n  Object.keys(unwrappedOperations).forEach(key => {\n    mfs[key] = unwrappedOperations[key](options)\n  })\n\n  return mfs\n}\n\n/**\n * @param {object} context\n * @param {IPFSRepo} context.repo\n * @param {import('../../types').Preload} context.preload\n * @param {import('..').Options} context.options\n * @param {Multihashes} context.hashers\n * @returns {import('ipfs-core-types/src/files').API}\n */\nexport function createFiles ({ repo, preload, hashers, options: constructorOptions }) {\n  const methods = createMfs({\n    repo,\n    repoOwner: constructorOptions.repoOwner !== false,\n    hashers\n  })\n\n  /**\n   * @param {any} fn\n   */\n  const withPreload = fn => {\n    /**\n     * @param  {...any} args\n     */\n    const wrapped = (...args) => {\n      const paths = args.filter(arg => isIpfs.ipfsPath(arg) || isIpfs.cid(arg))\n\n      if (paths.length) {\n        const options = args[args.length - 1]\n        if (options && options.preload !== false) {\n          paths.forEach(path => preload(path))\n        }\n      }\n\n      return fn(...args)\n    }\n\n    return wrapped\n  }\n\n  return {\n    ...methods,\n    chmod: methods.chmod,\n    cp: withPreload(methods.cp),\n    mkdir: methods.mkdir,\n    stat: withPreload(methods.stat),\n    rm: methods.rm,\n    read: withPreload(methods.read),\n    touch: methods.touch,\n    write: methods.write,\n    mv: withPreload(methods.mv),\n    flush: methods.flush,\n    ls: withPreload(async function * (/** @type {...any} */ ...args) {\n      for await (const file of methods.ls(...args)) {\n        yield { ...file, size: file.size || 0 }\n      }\n    })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createExport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"export\"]}\n   */\n  const exportKey = (name, password) =>\n    keychain.exportKey(name, password)\n\n  return withTimeoutOption(exportKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst DEFAULT_KEY_TYPE = 'Ed25519'\nconst DEFAULT_KEY_SIZE = 2048\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createGen ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"gen\"]}\n   */\n  const gen = (name, options = { type: DEFAULT_KEY_TYPE, size: DEFAULT_KEY_SIZE }) => {\n    return keychain.createKey(name, options.type || DEFAULT_KEY_TYPE, options.size || DEFAULT_KEY_SIZE)\n  }\n\n  return withTimeoutOption(gen)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createImport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"import\"]}\n   */\n  const importKey = (name, pem, password) => {\n    return keychain.importKey(name, pem, password)\n  }\n\n  return withTimeoutOption(importKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createInfo ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"info\"]}\n   */\n  const info = (name) => keychain.findKeyByName(name)\n\n  return withTimeoutOption(info)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createList ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"list\"]}\n   */\n  const list = () => keychain.listKeys()\n\n  return withTimeoutOption(list)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRename ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRm ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rm\"]}\n   */\n  const rm = (name) => keychain.removeKey(name)\n\n  return withTimeoutOption(rm)\n}\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @typedef {import('@libp2p/interface-keychain').KeyChain} Keychain\n */\n\nexport class KeyAPI {\n  /**\n   * @param {object} config\n   * @param {Keychain} config.keychain\n   */\n  constructor ({ keychain }) {\n    this.gen = createGen({ keychain })\n    this.list = createList({ keychain })\n    this.rm = createRm({ keychain })\n    this.rename = createRename({ keychain })\n    this.export = createExport({ keychain })\n    this.import = createImport({ keychain })\n    this.info = createInfo({ keychain })\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid, options)\n\n    return dagPB.decode(block)\n  }\n\n  return withTimeoutOption(get)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"data\"]}\n   */\n  async function data (multihash, options = {}) {\n    const node = await get(multihash, options)\n    return node.Data || new Uint8Array(0)\n  }\n\n  return withTimeoutOption(data)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (/** @type {any} */ _) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLinks ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    switch (cid.code) {\n      case raw.code:\n        return []\n      case dagPB.code:\n        return node.Links\n      case dagCBOR.code:\n      case dagJSON.code:\n        return findLinks(node)\n      default:\n        throw new Error(`Cannot resolve links from codec ${cid.code}`)\n    }\n  }\n\n  return withTimeoutOption(links)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPB.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAddLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"addLink\"]}\n   */\n  async function addLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Links: node.Links.concat([link])\n    }, options)\n  }\n\n  return withTimeoutOption(addLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAppendData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    const node = await get(cid, options)\n    const newData = uint8ArrayConcat([node.Data || [], data])\n\n    return put({\n      ...node,\n      Data: newData\n    }, options)\n  }\n\n  return withTimeoutOption(appendData)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createRmLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"rmLink\"]}\n   */\n  async function rmLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n    const name = (typeof link === 'string' ? link : link.Name) || ''\n\n    node.Links = node.Links.filter(l => l.Name !== name)\n\n    return put(node, options)\n  }\n\n  return withTimeoutOption(rmLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createSetData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Data: data\n    }, options)\n  }\n\n  return withTimeoutOption(setData)\n}\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @typedef {import('../../../types').Preload} Preload\n */\n\nexport class ObjectPatchAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, preload }) {\n    this.addLink = createAddLink({ repo, preload })\n    this.appendData = createAppendData({ repo, preload })\n    this.rmLink = createRmLink({ repo, preload })\n    this.setData = createSetData({ repo, preload })\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { ObjectPatchAPI } from './patch/index.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class ObjectAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, codecs, preload }) {\n    this.data = createData({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.links = createLinks({ repo, codecs })\n    this.new = createNew({ repo, preload })\n    this.put = createPut({ repo, preload })\n    this.stat = createStat({ repo, preload })\n    this.patch = new ObjectPatchAPI({ repo, preload })\n  }\n}\n","import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createStat ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const stats = await repo.stat()\n\n    return {\n      numObjects: BigInt(stats.numObjects.toString()),\n      repoSize: BigInt(stats.repoSize.toString()),\n      repoPath: stats.repoPath,\n      version: `${stats.version}`,\n      storageMax: BigInt(stats.storageMax.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","\nexport const repoVersion = 12\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { repoVersion } from 'ipfs-repo/constants'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options)\n    } catch (/** @type {any} */ err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\nexport class RepoAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Multihashes} config.hashers\n   */\n  constructor ({ repo, hashers }) {\n    this.gc = createGc({ repo, hashers })\n    this.stat = createStat({ repo })\n    this.version = createVersion({ repo })\n\n    /**\n     * @param {string} addr\n     */\n    this.setApiAddr = (addr) => repo.apiAddr.set(addr)\n  }\n}\n","import parseDuration from 'parse-duration'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/stats').BWOptions} BWOptions\n * @typedef {import('ipfs-core-types/src/stats').BWResult} BandwidthInfo\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\nfunction getBandwidthStats (libp2p, opts) {\n/*\n  let stats\n\n  if (!libp2p.metrics) {\n    stats = undefined\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.getGlobal()\n  }\n*/\n  //  if (!stats) {\n  return {\n    totalIn: BigInt(0),\n    totalOut: BigInt(0),\n    rateIn: 0.0,\n    rateOut: 0.0\n  }\n  //  }\n/*\n  const movingAverages = stats.getMovingAverages()\n  const snapshot = stats.getSnapshot()\n\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: movingAverages.dataReceived[60000].movingAverage / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage / 60\n  }\n*/\n}\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createBw ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/stats').API<{}>[\"bw\"]}\n   */\n  const bw = async function * (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    const interval = options.interval || 1000\n    let ms = -1\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval\n      if (!ms || ms < 0) throw new Error('invalid duration')\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, ms) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  return withTimeoutOption(bw)\n}\n","import { createBw } from './bw.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createStat as createBitswap } from '../bitswap/stat.js'\n\nexport class StatsAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('../../types').NetworkService} config.network\n   */\n  constructor ({ repo, network }) {\n    this.repo = createRepo({ repo })\n    this.bw = createBw({ network })\n    this.bitswap = createBitswap({ network })\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport length from 'it-length'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as mhd from 'multiformats/hashes/digest'\n\nconst log = debug('ipfs:repo:migrator:migration-8')\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\nfunction unwrap (blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child)\n  }\n\n  return blockstore\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToMultihash (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n\n    // Extract multihash from CID\n    const multihash = CID.decode(buf).multihash.bytes\n\n    // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase()\n\n    return new Key(`/${multihashStr}`, false)\n  } catch (/** @type {any} */ err) {\n    return key\n  }\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n    const digest = mhd.decode(buf)\n\n    // CID to Key\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1)\n\n    return new Key(`/${multihash.toUpperCase()}`, false)\n  } catch {\n    return key\n  }\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\nasync function process (backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks\n  await blockstore.open()\n\n  const unwrapped = unwrap(blockstore)\n\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [(key) => {\n      const newKey = keyFunction(key)\n\n      return newKey.toString() !== key.toString()\n    }]\n  }))\n\n  try {\n    let counter = 0\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key)\n\n      // If the Key is base32 CIDv0 then there's nothing to do\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key))\n\n        await unwrapped.delete(block.key)\n        await unwrapped.put(newKey, block.value)\n\n        onProgress((counter / blockCount) * 100, `Migrated Block from ${block.key} to ${newKey}`)\n      }\n    }\n  } finally {\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid)\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ipfs = $root.ipfs = (() => {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    const ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        const pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nexport { $root as default };\n","\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { CID } from 'multiformats/cid'\n\nexport const PIN_DS_KEY = new Key('/local/pins')\nexport const DEFAULT_FANOUT = 256\nexport const MAX_ITEMS = 8192\nexport const EMPTY_KEY = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n\nexport const PinTypes = {\n  direct: 'direct',\n  recursive: 'recursive'\n}\n\n/**\n * @param {import('multiformats').CID} cid\n */\nexport function cidToKey (cid) {\n  return new Key(`/${base32.encode(cid.multihash.bytes).toUpperCase().substring(1)}`)\n}\n","\nimport { CID } from 'multiformats/cid'\nimport { ipfs } from './pin.js'\n// @ts-ignore\nimport fnv1a from 'fnv1a'\nimport varint from 'varint'\nimport * as dagPb from '@ipld/dag-pb'\nimport { DEFAULT_FANOUT, MAX_ITEMS, EMPTY_KEY } from './utils.js'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nconst PinSet = ipfs.pin.Set\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} Pin\n * @property {CID} key\n * @property {Uint8Array} [data]\n */\n\n/**\n * @param {PBNode} rootNode\n */\nfunction readHeader (rootNode) {\n  // rootNode.data should be a buffer of the format:\n  // < varint(headerLength) | header | itemData... >\n  const rootData = rootNode.Data\n\n  if (!rootData) {\n    throw new Error('No data present')\n  }\n\n  const hdrLength = varint.decode(rootData)\n  const vBytes = varint.decode.bytes ?? 0\n\n  if (vBytes <= 0) {\n    throw new Error('Invalid Set header length')\n  }\n\n  if (vBytes + hdrLength > rootData.length) {\n    throw new Error('Impossibly large set header length')\n  }\n\n  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes)\n  const header = PinSet.toObject(PinSet.decode(hdrSlice), {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  if (header.version !== 1) {\n    throw new Error(`Unsupported Set version: ${header.version}`)\n  }\n\n  if (header.fanout > rootNode.Links.length) {\n    throw new Error('Impossibly large fanout')\n  }\n\n  return {\n    header: header,\n    data: rootData.slice(hdrLength + vBytes)\n  }\n}\n\n/**\n * @param {number} seed\n * @param {CID} key\n */\nfunction hash (seed, key) {\n  const buffer = new Uint8Array(4)\n  const dataView = new DataView(buffer.buffer)\n  dataView.setUint32(0, seed, true)\n  const encodedKey = uint8ArrayFromString(key.toString())\n  const data = uint8ArrayConcat([buffer, encodedKey], buffer.byteLength + encodedKey.byteLength)\n\n  return fnv1a(uint8ArrayToString(data))\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} node\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkItems (blockstore, node) {\n  const pbh = readHeader(node)\n  let idx = 0\n\n  for (const link of node.Links) {\n    if (idx < pbh.header.fanout) {\n      // the first pbh.header.fanout links are fanout bins\n      // if a fanout bin is not 'empty', dig into and walk its DAGLinks\n      const linkHash = link.Hash\n\n      if (!EMPTY_KEY.equals(linkHash)) {\n        // walk the links of this fanout bin\n        const buf = await blockstore.get(linkHash)\n        const node = dagPb.decode(buf)\n\n        yield * walkItems(blockstore, node)\n      }\n    } else {\n      // otherwise, the link is a pin\n      yield link.Hash\n    }\n\n    idx++\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} rootNode\n * @param {string} name\n */\nexport async function * loadSet (blockstore, rootNode, name) {\n  const link = rootNode.Links.find(l => l.Name === name)\n\n  if (!link) {\n    throw new Error('No link found with name ' + name)\n  }\n\n  const buf = await blockstore.get(link.Hash)\n  const node = dagPb.decode(buf)\n\n  yield * walkItems(blockstore, node)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Pin[]} items\n */\nfunction storeItems (blockstore, items) {\n  return storePins(items, 0)\n\n  /**\n   * @param {Pin[]} pins\n   * @param {number} depth\n   */\n  async function storePins (pins, depth) {\n    const pbHeader = PinSet.encode({\n      version: 1,\n      fanout: DEFAULT_FANOUT,\n      seed: depth\n    }).finish()\n\n    const header = varint.encode(pbHeader.length)\n    const headerBuf = uint8ArrayConcat([header, pbHeader])\n    const fanoutLinks = []\n\n    for (let i = 0; i < DEFAULT_FANOUT; i++) {\n      fanoutLinks.push({\n        Name: '',\n        Tsize: 1,\n        Hash: EMPTY_KEY\n      })\n    }\n\n    if (pins.length <= MAX_ITEMS) {\n      const nodes = pins\n        .map(item => {\n          return ({\n            link: {\n              Name: '',\n              Tsize: 1,\n              Hash: item.key\n            },\n            data: item.data || new Uint8Array()\n          })\n        })\n        // sorting makes any ordering of `pins` produce the same DAGNode\n        .sort((a, b) => {\n          return uint8ArrayCompare(a.link.Hash.bytes, b.link.Hash.bytes)\n        })\n\n      const rootLinks = fanoutLinks.concat(nodes.map(item => item.link))\n      const rootData = uint8ArrayConcat([headerBuf, ...nodes.map(item => item.data)])\n\n      return {\n        Data: rootData,\n        Links: rootLinks\n      }\n    } else {\n      // If the array of pins is > MAX_ITEMS, we:\n      //  - distribute the pins among `DEFAULT_FANOUT` bins\n      //    - create a DAGNode for each bin\n      //      - add each pin as a DAGLink to that bin\n      //  - create a root DAGNode\n      //    - add each bin as a DAGLink\n      //  - send that root DAGNode via callback\n      // (using go-ipfs' \"wasteful but simple\" approach for consistency)\n      // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57\n\n      /** @type {Pin[][]} */\n      const bins = pins.reduce((bins, pin) => {\n        const n = hash(depth, pin.key) % DEFAULT_FANOUT\n        // @ts-ignore\n        bins[n] = n in bins ? bins[n].concat([pin]) : [pin]\n        return bins\n      }, [])\n\n      let idx = 0\n      for (const bin of bins) {\n        const child = await storePins(bin, depth + 1)\n\n        await storeChild(child, idx)\n\n        idx++\n      }\n\n      return {\n        Data: headerBuf,\n        Links: fanoutLinks\n      }\n    }\n\n    /**\n     * @param {PBNode} child\n     * @param {number} binIdx\n     */\n    async function storeChild (child, binIdx) {\n      const buf = dagPb.encode(child)\n      const digest = await sha256.digest(buf)\n      const cid = CID.createV0(digest)\n\n      await blockstore.put(cid, buf)\n\n      const size = child.Links.reduce((acc, curr) => acc + (curr.Tsize || 0), 0) + buf.length\n\n      fanoutLinks[binIdx] = {\n        Name: '',\n        Tsize: size,\n        Hash: cid\n      }\n    }\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {string} type\n * @param {CID[]} cids\n */\nexport async function storeSet (blockstore, type, cids) {\n  const rootNode = await storeItems(blockstore, cids.map(cid => {\n    return {\n      key: cid\n    }\n  }))\n  const buf = dagPb.encode(rootNode)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n\n  const size = rootNode.Links.reduce((acc, curr) => acc + curr.Tsize, 0) + buf.length\n\n  return {\n    Name: type,\n    Tsize: size,\n    Hash: cid\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as cbor from 'cborg'\nimport * as pinset from './pin-set.js'\nimport { cidToKey, PIN_DS_KEY, PinTypes } from './utils.js'\nimport length from 'it-length'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport * as mhd from 'multiformats/hashes/digest'\nimport { base32 } from 'multiformats/bases/base32'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = CID.decode(mh)\n  const pinRootBuf = await blockstore.get(cid)\n  const pinRoot = dagPb.decode(pinRootBuf)\n  let counter = 0\n  const pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cid)\n  await datastore.delete(PIN_DS_KEY)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = []\n  const directPins = []\n  let counter = 0\n  const pinCount = await length(pinstore.queryKeys({}))\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = CID.create(\n      pin.version || 0,\n      pin.codec || dagPb.code,\n      mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop()))\n    )\n\n    if (pin.depth === 0) {\n      onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n\n      directPins.push(cid)\n    } else {\n      onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = {\n    Links: [\n      await pinset.storeSet(blockstore, PinTypes.direct, directPins),\n      await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins)\n    ]\n  }\n  const buf = dagPb.encode(pinRoot)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n  await datastore.put(PIN_DS_KEY, cid.bytes)\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  const blockstore = backends.blocks\n  const datastore = backends.datastore\n  const pinstore = backends.pins\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDatastore)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDAG)\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { notFoundError } from 'datastore-core/errors'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config')\nexport const VERSION_KEY = new Key('/version')\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nexport function findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nasync function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw notFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(notFoundError())\n    }\n  })\n}\n\n/**\n * @param {Datastore} store\n */\nfunction wrapStore (store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store)\n  const originalHas = store.has.bind(store)\n  /**\n   * @param {Key} key\n   */\n  store.get = (key) => getWithFallback(key, originalGet, originalHas, store)\n  /**\n   * @param {Key} key\n   */\n  store.has = (key) => hasWithFallback(key, originalHas, store)\n\n  return store\n}\n\n/**\n * @param {import('./types').Backends} backends\n */\nexport function wrapBackends (backends) {\n  return {\n    ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  }\n}\n","\nimport { findLevelJs } from '../../utils.js'\nimport { fromString } from 'uint8arrays/from-string'\nimport { toString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (/** @type {any} */ err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n","\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Protocols = $root.Protocols = (() => {\n\n    /**\n     * Properties of a Protocols.\n     * @exports IProtocols\n     * @interface IProtocols\n     * @property {Array.<string>|null} [protocols] Protocols protocols\n     */\n\n    /**\n     * Constructs a new Protocols.\n     * @exports Protocols\n     * @classdesc Represents a Protocols.\n     * @implements IProtocols\n     * @constructor\n     * @param {IProtocols=} [p] Properties to set\n     */\n    function Protocols(p) {\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Protocols protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Protocols\n     * @instance\n     */\n    Protocols.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n     * @function encode\n     * @memberof Protocols\n     * @static\n     * @param {IProtocols} m Protocols message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Protocols.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(10).string(m.protocols[i]);\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a Protocols message from the specified reader or buffer.\n     * @function decode\n     * @memberof Protocols\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Protocols} Protocols\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Protocols.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Protocols\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Protocols} Protocols\n     */\n    Protocols.fromObject = function fromObject(d) {\n        if (d instanceof $root.Protocols)\n            return d;\n        var m = new $root.Protocols();\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Protocols.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Protocols\n     * @static\n     * @param {Protocols} m Protocols\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Protocols.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.protocols = [];\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Protocols to JSON.\n     * @function toJSON\n     * @memberof Protocols\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Protocols.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Protocols;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Addresses = $root.Addresses = (() => {\n\n    /**\n     * Properties of an Addresses.\n     * @exports IAddresses\n     * @interface IAddresses\n     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n     */\n\n    /**\n     * Constructs a new Addresses.\n     * @exports Addresses\n     * @classdesc Represents an Addresses.\n     * @implements IAddresses\n     * @constructor\n     * @param {IAddresses=} [p] Properties to set\n     */\n    function Addresses(p) {\n        this.addrs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Addresses addrs.\n     * @member {Array.<Addresses.IAddress>} addrs\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.addrs = $util.emptyArray;\n\n    /**\n     * Addresses certifiedRecord.\n     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.certifiedRecord = null;\n\n    /**\n     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses\n     * @static\n     * @param {IAddresses} m Addresses message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Addresses.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addrs != null && m.addrs.length) {\n            for (var i = 0; i < m.addrs.length; ++i)\n                $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\"))\n            $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes an Addresses message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses} Addresses\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Addresses.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addrs && m.addrs.length))\n                    m.addrs = [];\n                m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses} Addresses\n     */\n    Addresses.fromObject = function fromObject(d) {\n        if (d instanceof $root.Addresses)\n            return d;\n        var m = new $root.Addresses();\n        if (d.addrs) {\n            if (!Array.isArray(d.addrs))\n                throw TypeError(\".Addresses.addrs: array expected\");\n            m.addrs = [];\n            for (var i = 0; i < d.addrs.length; ++i) {\n                if (typeof d.addrs[i] !== \"object\")\n                    throw TypeError(\".Addresses.addrs: object expected\");\n                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n            }\n        }\n        if (d.certifiedRecord != null) {\n            if (typeof d.certifiedRecord !== \"object\")\n                throw TypeError(\".Addresses.certifiedRecord: object expected\");\n            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses\n     * @static\n     * @param {Addresses} m Addresses\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Addresses.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addrs = [];\n        }\n        if (o.defaults) {\n            d.certifiedRecord = null;\n        }\n        if (m.addrs && m.addrs.length) {\n            d.addrs = [];\n            for (var j = 0; j < m.addrs.length; ++j) {\n                d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n            }\n        }\n        if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n            d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Addresses to JSON.\n     * @function toJSON\n     * @memberof Addresses\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Addresses.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Addresses.Address = (function() {\n\n        /**\n         * Properties of an Address.\n         * @memberof Addresses\n         * @interface IAddress\n         * @property {Uint8Array|null} [multiaddr] Address multiaddr\n         * @property {boolean|null} [isCertified] Address isCertified\n         */\n\n        /**\n         * Constructs a new Address.\n         * @memberof Addresses\n         * @classdesc Represents an Address.\n         * @implements IAddress\n         * @constructor\n         * @param {Addresses.IAddress=} [p] Properties to set\n         */\n        function Address(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Address multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Address isCertified.\n         * @member {boolean|null|undefined} isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.isCertified = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Address _isCertified.\n         * @member {\"isCertified\"|undefined} _isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Object.defineProperty(Address.prototype, \"_isCertified\", {\n            get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.IAddress} m Address message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Address.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n                w.uint32(16).bool(m.isCertified);\n            return w;\n        };\n\n        /**\n         * Decodes an Address message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.Address\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.Address} Address\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Address.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                case 2:\n                    m.isCertified = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an Address message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.Address} Address\n         */\n        Address.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.Address)\n                return d;\n            var m = new $root.Addresses.Address();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            if (d.isCertified != null) {\n                m.isCertified = Boolean(d.isCertified);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an Address message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.Address} m Address\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Address.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n                d.isCertified = m.isCertified;\n                if (o.oneofs)\n                    d._isCertified = \"isCertified\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Address to JSON.\n         * @function toJSON\n         * @memberof Addresses.Address\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Address.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Address;\n    })();\n\n    Addresses.CertifiedRecord = (function() {\n\n        /**\n         * Properties of a CertifiedRecord.\n         * @memberof Addresses\n         * @interface ICertifiedRecord\n         * @property {number|null} [seq] CertifiedRecord seq\n         * @property {Uint8Array|null} [raw] CertifiedRecord raw\n         */\n\n        /**\n         * Constructs a new CertifiedRecord.\n         * @memberof Addresses\n         * @classdesc Represents a CertifiedRecord.\n         * @implements ICertifiedRecord\n         * @constructor\n         * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n         */\n        function CertifiedRecord(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CertifiedRecord seq.\n         * @member {number} seq\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CertifiedRecord raw.\n         * @member {Uint8Array} raw\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.raw = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CertifiedRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n                w.uint32(8).uint64(m.seq);\n            if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\"))\n                w.uint32(18).bytes(m.raw);\n            return w;\n        };\n\n        /**\n         * Decodes a CertifiedRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CertifiedRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seq = r.uint64();\n                    break;\n                case 2:\n                    m.raw = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         */\n        CertifiedRecord.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.CertifiedRecord)\n                return d;\n            var m = new $root.Addresses.CertifiedRecord();\n            if (d.seq != null) {\n                if ($util.Long)\n                    (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n                else if (typeof d.seq === \"string\")\n                    m.seq = parseInt(d.seq, 10);\n                else if (typeof d.seq === \"number\")\n                    m.seq = d.seq;\n                else if (typeof d.seq === \"object\")\n                    m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n            }\n            if (d.raw != null) {\n                if (typeof d.raw === \"string\")\n                    $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);\n                else if (d.raw.length)\n                    m.raw = d.raw;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.CertifiedRecord} m CertifiedRecord\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CertifiedRecord.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if ($util.Long) {\n                    var n = new $util.Long(0, 0, true);\n                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                } else\n                    d.seq = o.longs === String ? \"0\" : 0;\n                if (o.bytes === String)\n                    d.raw = \"\";\n                else {\n                    d.raw = [];\n                    if (o.bytes !== Array)\n                        d.raw = $util.newBuffer(d.raw);\n                }\n            }\n            if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n                if (typeof m.seq === \"number\")\n                    d.seq = o.longs === String ? String(m.seq) : m.seq;\n                else\n                    d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n            }\n            if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n                d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this CertifiedRecord to JSON.\n         * @function toJSON\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CertifiedRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CertifiedRecord;\n    })();\n\n    return Addresses;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Peer = $root.Peer = (() => {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\nexport const Address = $root.Address = (() => {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Envelope = $root.Envelope = (() => {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const PeerRecord = $root.PeerRecord = (() => {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nexport { $root as default };\n","import $protobuf from 'protobufjs/minimal.js'\nimport { Key } from 'interface-datastore/key'\nimport { Protocols } from './pb/proto-book.js'\nimport { Addresses } from './pb/address-book.js'\nimport { Peer } from './pb/peer.js'\nimport { Envelope } from './pb/envelope.js'\nimport { PeerRecord } from './pb/peer-record.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n// @ts-expect-error Explicitly disable long.js support\n$protobuf.util.Long = undefined\n$protobuf.configure()\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderSingleDatastoreKey (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a single datastore key')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n    const [, prefix, type, peerId, metadataKey] = keyStr.split('/')\n\n    if (prefix !== 'peers') {\n      continue\n    }\n\n    if (!['protos', 'addrs', 'metadata', 'keys'].includes(type)) {\n      continue\n    }\n\n    if (!peerId) {\n      continue\n    }\n\n    peers[peerId] = peers[peerId] || {\n      addresses: [],\n      protocols: [],\n      metadata: []\n    }\n\n    if (type === 'protos') {\n      const protos = Protocols.decode(value)\n\n      peers[peerId].protocols = protos.protocols.sort()\n    } else if (type === 'addrs') {\n      const addrs = Addresses.decode(value)\n\n      peers[peerId].addresses = addrs.addrs.sort((a, b) => {\n        return multiaddr(a.multiaddr).toString().localeCompare(multiaddr(b.multiaddr).toString())\n      })\n\n      if (addrs.certifiedRecord && addrs.certifiedRecord.raw) {\n        peers[peerId].peerRecordEnvelope = addrs.certifiedRecord.raw\n      }\n    } else if (type === 'metadata') {\n      peers[peerId].metadata.push({ key: metadataKey, value })\n    } else if (type === 'keys') {\n      peers[peerId].pubKey = value\n    }\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const peerId of Object.keys(peers)) {\n    const peer = peers[peerId]\n    peer.metadata = peer.metadata.sort((/** @type {{ key: string }} */ a, /** @type {{ key: string }} */ b) => a.key.localeCompare(b.key))\n\n    const data = Peer.encode(peer).finish()\n\n    await backends.datastore.put(new Key(`/peers/${peerId}`), data)\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under a single datastore key')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderMultipleDatastoreKeys (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a multiple datastore keys')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n\n    const [, , peerId] = keyStr.split('/')\n\n    peers[peerId] = Peer.decode(value)\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const [peerId, peer] of Object.entries(peers)) {\n    if (peer.protocols && peer.protocols.length > 0) {\n      await backends.datastore.put(new Key(`/peers/protos/${peerId}`), Protocols.encode({\n        protocols: peer.protocols\n      }).finish())\n    }\n\n    if (peer.addresses && peer.addresses.length > 0) {\n      const peerRecordEnvelope = peer.peerRecordEnvelope\n      let certifiedRecord\n\n      if (peerRecordEnvelope) {\n        const envelope = Envelope.decode(peerRecordEnvelope)\n        const record = PeerRecord.decode(envelope.payload)\n\n        certifiedRecord = {\n          raw: peerRecordEnvelope,\n          seq: record.seq\n        }\n      }\n\n      await backends.datastore.put(new Key(`/peers/addrs/${peerId}`), Addresses.encode({\n        addrs: peer.addresses,\n        certifiedRecord\n      }).finish())\n    }\n\n    if (peer.metadata && peer.metadata.length > 0) {\n      for (const { key, value } of peer.metadata) {\n        await backends.datastore.put(new Key(`/peers/metadata/${peerId}/${key}`), value)\n      }\n    }\n\n    if (peer.pubKey) {\n      await backends.datastore.put(new Key(`/peers/keys/${peerId}`), peer.pubKey)\n    }\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under multiple datastore keys')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 12,\n  description: 'Store each peerstore peer under a single datastore key',\n  migrate: storePeerUnderSingleDatastoreKey,\n  revert: storePeerUnderMultipleDatastoreKeys\n}\n","import { migration as migration8 } from './migration-8/index.js'\nimport { migration as migration9 } from './migration-9/index.js'\nimport { migration as migration10 } from './migration-10/index.js'\nimport { migration as migration11 } from './migration-11/index.js'\nimport { migration as migration12 } from './migration-12/index.js'\n\n/**\n * @type {import('../types').Migration}\n */\nconst emptyMigration = {\n  description: 'Empty migration.',\n  // @ts-ignore\n  migrate: () => {},\n  // @ts-ignore\n  revert: () => {},\n  empty: true\n}\n\nexport default [\n  Object.assign({ version: 1 }, emptyMigration),\n  Object.assign({ version: 2 }, emptyMigration),\n  Object.assign({ version: 3 }, emptyMigration),\n  Object.assign({ version: 4 }, emptyMigration),\n  Object.assign({ version: 5 }, emptyMigration),\n  Object.assign({ version: 6 }, emptyMigration),\n  Object.assign({ version: 7 }, emptyMigration),\n  migration8,\n  migration9,\n  migration10,\n  migration11,\n  migration12\n]\n","\n/**\n * Exception raised when trying to revert migration that is not possible\n * to revert.\n */\nexport class NonReversibleMigrationError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NonReversibleMigrationError'\n    this.code = NonReversibleMigrationError.code\n    this.message = message\n  }\n}\nNonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION'\n\n/**\n * Exception raised when repo is not initialized.\n */\nexport class NotInitializedRepoError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotInitializedRepoError'\n    this.code = NotInitializedRepoError.code\n    this.message = message\n  }\n}\nNotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO'\n\n/**\n * Exception raised when required parameter is not provided.\n */\nexport class RequiredParameterError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'RequiredParameterError'\n    this.code = RequiredParameterError.code\n    this.message = message\n  }\n}\nRequiredParameterError.code = 'ERR_REQUIRED_PARAMETER'\n\n/**\n * Exception raised when value is not valid.\n */\nexport class InvalidValueError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidValueError'\n    this.code = InvalidValueError.code\n    this.message = message\n  }\n}\nInvalidValueError.code = 'ERR_INVALID_VALUE'\n\n/**\n * Exception raised when config is not passed.\n */\nexport class MissingRepoOptionsError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'MissingRepoOptionsError'\n    this.code = MissingRepoOptionsError.code\n    this.message = message\n  }\n}\nMissingRepoOptionsError.code = 'ERR_MISSING_REPO_OPTIONS'\n","\nimport debug from 'debug'\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js'\nimport { MissingRepoOptionsError } from '../errors.js'\n\nconst log = debug('ipfs:repo:migrator:repo:init')\n\n/**\n * @param {import('../types').Backends} backends\n */\nexport async function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (/** @type {any} */ e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n","\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n","/* eslint complexity: [\"error\", 28] */\n\nimport defaultMigrations from './migrations/index.js'\nimport * as repoVersion from './repo/version.js'\nimport * as Errors from './errors.js'\nimport { wrapBackends } from './utils.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:migrator')\n\n/**\n * @typedef {import('./types').Migration} Migration\n * @typedef {import('./types').MigrationOptions} MigrationOptions\n * @typedef {import('./types').ProgressCallback} ProgressCallback\n * @typedef {import('./types').MigrationProgressCallback} MigrationProgressCallback\n */\n\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {Migration[]} [migrations] - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n */\nexport function getLatestMigrationVersion (migrations) {\n  migrations = migrations || defaultMigrations\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0\n  }\n\n  return migrations[migrations.length - 1].version\n}\n\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo should be migrated.\n * @param {MigrationOptions} [options] - Options for migration\n */\nexport async function migrate (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.')\n    return\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`)\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion)\n\n  let lock\n\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  try {\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break\n      }\n\n      if (migration.version <= currentVersion) {\n        continue\n      }\n\n      log(`Migrating version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.migrate(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1\n\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyMigratedVersion, backends)\n\n        throw new Error(`During migration to version ${migration.version} exception was raised: ${e.stack || e.message || e}`)\n      }\n\n      log(`Migrating to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion || getLatestMigrationVersion(migrations), backends)\n    }\n\n    log('Repo successfully migrated', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!')\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo will be reverted.\n * @param {MigrationOptions} [options] - Options for the reversion\n */\nexport async function revert (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.')\n    return\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`)\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true)\n\n  let lock\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  log(`Reverting from version ${currentVersion} to ${toVersion}`)\n\n  try {\n    const reversedMigrationArray = migrations.slice().reverse()\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break\n      }\n\n      if (migration.version > currentVersion) {\n        continue\n      }\n\n      log(`Reverting migration version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.revert(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyRevertedVersion = migration.version\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyRevertedVersion, backends)\n\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      log(`Reverting to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion, backends)\n    }\n\n    log(`All migrations successfully reverted to version ${toVersion}!`)\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {Migration[]} migrations\n * @param {number} fromVersion\n * @param {number} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n */\nfunction verifyAvailableMigrations (migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`)\n      }\n\n      migrationCounter++\n    }\n  }\n\n  if (migrationCounter !== (toVersion - fromVersion)) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`)\n  }\n}\n\nexport const getCurrentRepoVersion = repoVersion.getVersion\nexport const errors = Errors\nexport const migrations = defaultMigrations\n","/**\n * Error raised when there is lock already in place when repo is being opened.\n */\nexport class LockExistsError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'LockExistsError'\n    this.code = LockExistsError.code\n  }\n}\nLockExistsError.code = 'ERR_LOCK_EXISTS'\n\n/**\n * Error raised when requested item is not found.\n */\nexport class NotFoundError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotFoundError'\n    this.code = NotFoundError.code\n  }\n}\nNotFoundError.code = 'ERR_NOT_FOUND'\n\n/**\n * Error raised when version of the stored repo is not compatible with version of this package.\n */\nexport class InvalidRepoVersionError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidRepoVersionError'\n    this.code = InvalidRepoVersionError.code\n  }\n}\nInvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION'\n\nexport const ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED'\nexport const ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN'\nexport const ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED'\n","\nimport { NotFoundError } from '../errors.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Key} Key\n */\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nexport async function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw new NotFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(new NotFoundError())\n    }\n  })\n}\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nfunction findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport PQueue from 'p-queue'\nimport _get from 'just-safe-get'\nimport _set from 'just-safe-set'\nimport errCode from 'err-code'\nimport { NotFoundError } from './errors.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\n// @ts-ignore types are broken in p-queue@6.x.x - also, if we imported via esm\n// we can use the default, if via cjs we need to get the default via prop access\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\nconst configKey = new Key('config')\n\n/**\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {Datastore} store\n */\nexport function config (store) {\n  const setQueue = new Queue({ concurrency: 1 })\n\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     * @returns {Promise<Config>}\n     */\n    async getAll (options = {}) { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const encodedValue = await getWithFallback(configKey, store.get.bind(store), store.has.bind(store), store)\n\n      return JSON.parse(uint8ArrayToString(encodedValue))\n    },\n\n    /**\n     * Get the value for the passed configuration key from the repo.\n     *\n     * @param {string} key - the config key to get\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     */\n    async get (key, options = {}) {\n      if (key == null) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      const config = await this.getAll(options)\n      const value = _get(config, key)\n\n      if (value === undefined) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      return value\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {string} key - the config key to be written\n     * @param {any} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    set (key, value, options = {}) {\n      // @ts-ignore ts thinks key will only be a string, but it may not be\n      if (typeof key !== 'string' && !(key instanceof String)) {\n        throw errCode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY')\n      }\n\n      if (value === undefined || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: key,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Config} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    replace (value, options = {}) {\n      if (!value || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: undefined,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migration to v10 or above\n      return hasWithFallback(configKey, store.has.bind(store), store)\n    }\n  }\n\n  return configStore\n\n  /**\n   * @param {{ key: any; value: any; }} m\n   * @param {AbortSignal | undefined} signal\n   */\n  async function _maybeDoSet (m, signal) {\n    if (signal && signal.aborted) {\n      return\n    }\n\n    const key = m.key\n    const value = m.value\n    if (key) {\n      const config = await configStore.getAll()\n      if (typeof config === 'object' && config !== null) {\n        _set(config, key, value)\n      }\n      return _saveAll(config)\n    }\n    return _saveAll(value)\n  }\n\n  /**\n   * @param {unknown} config\n   */\n  function _saveAll (config) {\n    const buf = uint8ArrayFromString(JSON.stringify(config, null, 2))\n    return store.put(configKey, buf)\n  }\n}\n","\nimport { Key } from 'interface-datastore'\nimport sortKeys from 'sort-keys'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst specKey = new Key('datastore_spec')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function spec (store) {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists () {\n      return store.has(specKey)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get () {\n      const buf = await store.get(specKey)\n      return JSON.parse(uint8ArrayToString(buf))\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set (spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, { deep: true }))))\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst apiFile = new Key('api')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function apiAddr (store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<string>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     * TODO: fix find the proper type or remove this API\n     *\n     * @param {string} value - the api address to be written\n     */\n    set (value) {\n      return store.put(apiFile, uint8ArrayFromString(value.toString()))\n    },\n    /**\n     * Deletes api file\n     */\n    delete () {\n      return store.delete(apiFile)\n    }\n  }\n}\n","\nimport filter from 'it-filter'\nimport { pushable } from 'it-pushable'\nimport drain from 'it-drain'\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport { identity } from 'multiformats/hashes/identity'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createIdStore (store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      const extracted = extractContents(cid)\n      if (extracted.isIdentity) {\n        return Promise.resolve(extracted.digest)\n      }\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      for await (const cid of cids) {\n        yield this.get(cid, options)\n      }\n    },\n\n    async put (cid, buf, options) {\n      const { isIdentity } = extractContents(cid)\n\n      if (isIdentity) {\n        return\n      }\n\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      // in order to return all blocks. we're going to assemble a seperate iterable\n      // return rather than return the resolves of store.putMany using the same\n      // process used by blockstore.putMany\n      const output = pushable({\n        objectMode: true\n      })\n\n      // process.nextTick runs on the microtask queue, setImmediate runs on the next\n      // event loop iteration so is slower. Use process.nextTick if it is available.\n      const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : (globalThis.setImmediate || globalThis.setTimeout)\n\n      runner(async () => {\n        try {\n          await drain(store.putMany(async function * () {\n            for await (const { key, value } of pairs) {\n              if (!extractContents(key).isIdentity) {\n                yield { key, value }\n              }\n\n              // if non identity blocks successfully write, blocks are included in output\n              output.push({ key, value })\n            }\n          }()))\n\n          output.end()\n        } catch (/** @type {any} */ err) {\n          output.end(err)\n        }\n      })\n\n      yield * output\n    },\n\n    has (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve(true)\n      }\n      return store.has(cid, options)\n    },\n\n    delete (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve()\n      }\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(filter(cids, (cid) => !extractContents(cid).isIdentity), options)\n    },\n\n    batch () {\n      const batch = store.batch()\n\n      return {\n        put (cid, buf) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.put(cid, buf)\n        },\n        delete (cid) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.delete(cid)\n        },\n        commit: (options) => {\n          return batch.commit(options)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {CID} k\n * @returns {{ isIdentity: false } | { isIdentity: true, digest: Uint8Array}}\n */\nfunction extractContents (k) {\n  const cid = CID.asCID(k)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  if (cid.multihash.code !== identity.code) {\n    return {\n      isIdentity: false\n    }\n  }\n\n  return {\n    isIdentity: true,\n    digest: cid.multihash.digest\n  }\n}\n","\nimport { LockExistsError } from '../errors.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:lock:memory')\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nasync function lock (dir) {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nasync function locked (dir) {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n\nexport const MemoryLock = {\n  lock,\n  locked\n}\n","import { MemoryLock } from './locks/memory.js'\n\n/**\n * @type {Partial<import('./types').Options>}\n */\nexport default {\n  autoMigrate: true,\n  onMigrationProgress: () => {},\n  repoOwner: true,\n  repoLock: MemoryLock\n}\n","\n// Default configuration for the datastore spec in node.js\nexport default {\n  Spec: {\n    type: 'mount',\n    mounts: [\n      {\n        mountpoint: '/blocks',\n        type: 'measure',\n        prefix: 'flatfs.datastore',\n        child: {\n          type: 'flatfs',\n          path: 'blocks',\n          sync: true,\n          shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'\n        }\n      },\n      {\n        mountpoint: '/',\n        type: 'measure',\n        prefix: 'leveldb.datastore',\n        child: {\n          type: 'levelds',\n          path: 'datastore',\n          compression: 'none'\n        }\n      }\n    ]\n  }\n}\n","import { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats'\nimport * as raw from 'multiformats/codecs/raw'\nimport errCode from 'err-code'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as Digest from 'multiformats/hashes/digest'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\nexport function cidToKey (c) {\n  const cid = CID.asCID(c)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes)\n\n  return new Key('/' + encoded.slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\nexport function keyToCid (key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key))\n}\n\n/**\n * @param {Key | string} key\n */\nexport function keyToMultihash (key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`))\n}\n","import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport debug from 'debug'\nimport first from 'it-first'\nimport { createUnsafe } from 'multiformats/block'\nimport * as cborg from 'cborg'\nimport * as dagPb from '@ipld/dag-pb'\nimport {\n  cidToKey,\n  keyToMultihash\n} from './utils/blockstore.js'\nimport { walkDag } from './utils/walk-dag.js'\nimport { PinTypes } from './pin-types.js'\nimport QuickLRU from 'quick-lru'\n\n/**\n * @typedef {import('./types').PinType} PinType\n * @typedef {import('./types').PinQueryType} PinQueryType\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').PinOptions} PinOptions\n * @typedef {import('./types').AbortOptions} AbortOptions\n * @typedef {import('./types').Pins} Pins\n */\n\n/**\n * @typedef {object} PinInternal\n * @property {number} depth\n * @property {import('multiformats/cid').Version} [version]\n * @property {number} [codec]\n * @property {Record<string, any>} [metadata]\n */\n\n/**\n * @typedef {object} FetchCompleteDagOptions\n * @property {AbortSignal} [signal]\n * @property {number} [cidCacheMaxSize]\n */\n\nconst CID_CACHE_MAX_SIZE = 2048\n\n/**\n * @param {string} type\n */\nfunction invalidPinTypeErr (type) {\n  const errMsg = `Invalid type '${type}', must be one of {direct, indirect, recursive, all}`\n  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE')\n}\n\n/**\n * @implements {Pins}\n */\nexport class PinManager {\n  /**\n   * @param {object} config\n   * @param {import('interface-datastore').Datastore} config.pinstore\n   * @param {import('interface-blockstore').Blockstore} config.blockstore\n   * @param {import('./types').loadCodec} config.loadCodec\n   */\n  constructor ({ pinstore, blockstore, loadCodec }) {\n    this.pinstore = pinstore\n    this.blockstore = blockstore\n    this.loadCodec = loadCodec\n    this.log = debug('ipfs:repo:pin')\n    this.directPins = new Set()\n    this.recursivePins = new Set()\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & AbortOptions} [options]\n   */\n  async pinDirectly (cid, options = {}) {\n    await this.blockstore.get(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    return this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  unpin (cid, options) {\n    return this.pinstore.delete(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & FetchCompleteDagOptions & AbortOptions} [options]\n   */\n  async pinRecursively (cid, options = {}) {\n    await this.fetchCompleteDag(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    await this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * directKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === 0\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * recursiveKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === Infinity\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * indirectKeys (options) {\n    for await (const { cid } of this.recursiveKeys()) {\n      for await (const childCid of walkDag(cid, this.blockstore, this.loadCodec, options)) {\n        // recursive pins override indirect pins\n        const types = [\n          PinTypes.recursive\n        ]\n\n        const result = await this.isPinnedWithType(childCid, types)\n\n        if (result.pinned) {\n          continue\n        }\n\n        yield childCid\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinQueryType|PinQueryType[]} types\n   * @param {AbortOptions} [options]\n   */\n  async isPinnedWithType (cid, types, options) {\n    if (!Array.isArray(types)) {\n      types = [types]\n    }\n\n    const all = types.includes(PinTypes.all)\n    const direct = types.includes(PinTypes.direct)\n    const recursive = types.includes(PinTypes.recursive)\n    const indirect = types.includes(PinTypes.indirect)\n\n    if (recursive || direct || all) {\n      const result = await first(this.pinstore.query({\n        prefix: cidToKey(cid).toString(),\n        filters: [entry => {\n          if (all) {\n            return true\n          }\n\n          const pin = cborg.decode(entry.value)\n\n          return types.includes(pin.depth === 0 ? PinTypes.direct : PinTypes.recursive)\n        }],\n        limit: 1\n      }))\n\n      if (result) {\n        const pin = cborg.decode(result.value)\n\n        return {\n          cid,\n          pinned: true,\n          reason: pin.depth === 0 ? PinTypes.direct : PinTypes.recursive,\n          metadata: pin.metadata\n        }\n      }\n    }\n\n    const self = this\n\n    /**\n     * @param {CID} key\n     * @param {AsyncIterable<{ cid: CID, metadata: any }>} source\n     */\n    async function * findChild (key, source) {\n      for await (const { cid: parentCid } of source) {\n        for await (const childCid of walkDag(parentCid, self.blockstore, self.loadCodec)) {\n          if (childCid.equals(key)) {\n            yield parentCid\n            return\n          }\n        }\n      }\n    }\n\n    if (all || indirect) {\n      // indirect (default)\n      // check each recursive key to see if multihash is under it\n\n      const parentCid = await first(findChild(cid, this.recursiveKeys()))\n\n      if (parentCid) {\n        return {\n          cid,\n          pinned: true,\n          reason: PinTypes.indirect,\n          parent: parentCid\n        }\n      }\n    }\n\n    return {\n      cid,\n      pinned: false\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {FetchCompleteDagOptions} [options]\n   */\n  async fetchCompleteDag (cid, options = {}) {\n    const seen = new QuickLRU({ maxSize: options.cidCacheMaxSize ?? CID_CACHE_MAX_SIZE })\n\n    /**\n     * @param {CID} cid\n     * @param {AbortOptions} options\n     */\n    const walkDag = async (cid, options) => {\n      if (seen.has(cid.toString())) {\n        return\n      }\n\n      seen.set(cid.toString(), true)\n\n      const bytes = await this.blockstore.get(cid, options)\n      const codec = await this.loadCodec(cid.code)\n      const block = createUnsafe({ bytes, cid, codec })\n\n      await Promise.all(\n        [...block.links()].map(([, childCid]) => walkDag(childCid, options))\n      )\n    }\n\n    await walkDag(cid, options)\n  }\n\n  /**\n   * Throws an error if the pin type is invalid\n   *\n   * @param {any} type\n   * @returns {type is PinType}\n   */\n  static checkPinType (type) {\n    if (typeof type !== 'string' || !Object.keys(PinTypes).includes(type)) {\n      throw invalidPinTypeErr(type)\n    }\n    return true\n  }\n}\n","\nimport map from 'it-map'\nimport errCode from 'err-code'\nimport { PinTypes } from './pin-types.js'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pin-manager').Pins} Pins\n */\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createPinnedBlockstore (pins, store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      yield * store.getMany(cids, options)\n    },\n\n    async put (cid, buf, options) {\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      yield * store.putMany(pairs, options)\n    },\n\n    has (cid, options) {\n      return store.has(cid, options)\n    },\n\n    async delete (cid, options) {\n      await ensureNotPinned(cid, pins)\n\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins)\n\n        return cid\n      }), options)\n    },\n\n    batch () {\n      return store.batch()\n    }\n  }\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned (cid, pins) {\n  const { pinned, reason } = await pins.isPinnedWithType(cid, PinTypes.all)\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED')\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport debug from 'debug'\nimport { notFoundError } from 'datastore-core/errors'\nimport parallelBatch from 'it-parallel-batch'\nimport { pipe } from 'it-pipe'\nimport merge from 'it-merge'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { walkDag } from './utils/walk-dag.js'\n\nconst log = debug('ipfs:repo:gc')\nconst ERR_NOT_FOUND = notFoundError().code\n\n// Limit on the number of parallel block remove operations\nconst BLOCK_RM_CONCURRENCY = 256\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').loadCodec} loadCodec\n * @typedef {import('./types').GCErrorResult} GCErrorResult\n * @typedef {import('./types').GCSuccessResult} GCSuccessResult\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {import('./types').GCLock} config.gcLock\n * @param {import('./types').Pins} config.pins\n * @param {Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nexport function gc ({ gcLock, pins, blockstore, root, loadCodec }) {\n  /**\n   * @returns {AsyncGenerator<GCErrorResult | GCSuccessResult, void, unknown>}\n   */\n  async function * gc () {\n    const start = Date.now()\n    log('Creating set of marked blocks')\n\n    const release = await gcLock.writeLock()\n\n    try {\n      // Mark all blocks that are being used\n      const markedSet = await createMarkedSet({ pins, blockstore, root, loadCodec })\n      // Get all blocks keys from the blockstore\n      const blockKeys = blockstore.queryKeys({})\n\n      // Delete blocks that are not being used\n      // @ts-ignore ts cannot tell that we filter out null results\n      yield * deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys)\n\n      log(`Complete (${Date.now() - start}ms)`)\n    } finally {\n      release()\n    }\n  }\n\n  return gc\n}\n\n/**\n * Get Set of CIDs of blocks to keep\n *\n * @param {object} config\n * @param {import('./pin-manager').Pins} config.pins\n * @param {import('interface-blockstore').Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nasync function createMarkedSet ({ pins, blockstore, loadCodec, root }) {\n  const mfsSource = (async function * () {\n    let mh\n    try {\n      mh = await root.get(MFS_ROOT_KEY)\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        log('No blocks in MFS')\n        return\n      }\n\n      throw err\n    }\n\n    const rootCid = CID.decode(mh)\n    yield rootCid\n    yield * walkDag(rootCid, blockstore, loadCodec)\n  })()\n\n  const pinsSource = merge(\n    map(pins.recursiveKeys(), ({ cid }) => cid),\n    pins.indirectKeys(),\n    map(pins.directKeys(), ({ cid }) => cid),\n    mfsSource\n  )\n\n  const output = new Set()\n\n  for await (const cid of merge(pinsSource, mfsSource)) {\n    output.add(base32.encode(cid.multihash.bytes))\n  }\n\n  return output\n}\n\n/**\n * Delete all blocks that are not marked as in use\n *\n * @param {object} arg\n * @param {Blockstore} arg.blockstore\n * @param {Set<string>} markedSet\n * @param {AsyncIterable<CID>} blockKeys\n */\nasync function * deleteUnmarkedBlocks ({ blockstore }, markedSet, blockKeys) {\n  // Iterate through all blocks and find those that are not in the marked set\n  // blockKeys yields { key: Key() }\n  let blocksCount = 0\n  let removedBlocksCount = 0\n\n  /**\n   * @param {CID} cid\n   */\n  const removeBlock = async (cid) => {\n    return async function remove () {\n      blocksCount++\n\n      try {\n        const b32 = base32.encode(cid.multihash.bytes)\n\n        if (markedSet.has(b32)) {\n          return null\n        }\n\n        try {\n          await blockstore.delete(cid)\n          removedBlocksCount++\n        } catch (/** @type {any} */ err) {\n          return {\n            err: new Error(`Could not delete block with CID ${cid}: ${err.message}`)\n          }\n        }\n\n        return { cid }\n      } catch (/** @type {any} */ err) {\n        const msg = `Could delete block with CID ${cid}`\n        log(msg, err)\n        return { err: new Error(msg + `: ${err.message}`) }\n      }\n    }\n  }\n\n  yield * pipe(\n    parallelBatch(map(blockKeys, removeBlock), BLOCK_RM_CONCURRENCY),\n    // filter nulls (blocks that were retained)\n    source => filter(source, Boolean)\n  )\n\n  log(`Marked set has ${markedSet.size} unique blocks. Blockstore has ${blocksCount} blocks. ` +\n  `Deleted ${removedBlocksCount} blocks.`)\n}\n","import _get from 'just-safe-get'\nimport debug from 'debug'\nimport errCode from 'err-code'\nimport * as migrator from 'ipfs-repo-migrations'\nimport bytes from 'bytes'\nimport merge from 'merge-options'\nimport * as CONSTANTS from './constants.js'\nimport { version } from './version.js'\nimport { config } from './config.js'\nimport { spec } from './spec.js'\nimport { apiAddr } from './api-addr.js'\nimport { createIdStore } from './idstore.js'\nimport defaultOptions from './default-options.js'\nimport defaultDatastore from './default-datastore.js'\nimport * as ERRORS from './errors.js'\nimport { PinManager } from './pin-manager.js'\nimport { createPinnedBlockstore } from './pinned-blockstore.js'\n// @ts-ignore - no types\nimport mortice from 'mortice'\nimport { gc } from './gc.js'\n\nconst log = debug('ipfs:repo')\n\nconst noLimit = Number.MAX_SAFE_INTEGER\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate'\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor (path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path')\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader')\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options)\n    this.closed = true\n    this.path = path\n    this.root = backends.root\n    this.datastore = backends.datastore\n    this.keys = backends.keys\n\n    const blockstore = backends.blocks\n    const pinstore = backends.pins\n\n    this.pins = new PinManager({ pinstore, blockstore, loadCodec })\n\n    // this blockstore will not delete blocks that have been pinned\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore)\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdStore(pinnedBlockstore)\n\n    this.version = version(this.root)\n    this.config = config(this.root)\n    this.spec = spec(this.root)\n    this.apiAddr = apiAddr(this.root)\n\n    /** @type {GCLock} */\n    this.gcLock = mortice({\n      name: path,\n      singleProcess: this.options.repoOwner !== false\n    })\n\n    this.gc = gc({ gcLock: this.gcLock, pins: this.pins, blockstore: this.blocks, root: this.root, loadCodec })\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  async init (config) {\n    log('initializing at: %s', this.path)\n    await this._openRoot()\n    await this.config.replace(buildConfig(config))\n    await this.spec.set(buildDatastoreSpec(config))\n    await this.version.set(CONSTANTS.repoVersion)\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n  async isInitialized () {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot()\n      await this._checkInitialized()\n      await this.root.close()\n\n      return true\n    } catch (/** @type {any} */ err) {\n      // FIXME: do not use exceptions for flow control\n      return false\n    }\n  }\n\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n  async open () {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)\n    }\n    log('opening at: %s', this.path)\n\n    // check if the repo is already initialized\n    try {\n      await this._openRoot()\n      await this._checkInitialized()\n\n      this._lockfile = await this._openLock()\n      log('acquired repo.lock')\n\n      const isCompatible = await this.version.check(CONSTANTS.repoVersion)\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(CONSTANTS.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          })\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.')\n        }\n      }\n\n      log('creating datastore')\n      await this.datastore.open()\n\n      log('creating blocks')\n      await this.blocks.open()\n\n      log('creating keystore')\n      await this.keys.open()\n\n      log('creating pins')\n      await this.pins.pinstore.open()\n\n      this.closed = false\n      log('all opened')\n    } catch (/** @type {any} */ err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock()\n          this._lockfile = null\n        } catch (/** @type {any} */ err2) {\n          log('error removing lock', err2)\n        }\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n  async _openRoot () {\n    try {\n      await this.root.open()\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Already open') {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n  async _openLock () {\n    const lockfile = await this.options.repoLock.lock(this.path)\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION')\n    }\n\n    return lockfile\n  }\n\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n  _closeLock () {\n    return this._lockfile && this._lockfile.close()\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n  async _checkInitialized () {\n    log('init check')\n    let config\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ])\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        })\n      }\n\n      throw err\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      })\n    }\n  }\n\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)\n    }\n    log('closing at: %s', this.path)\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete()\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err\n      }\n    }\n\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map((store) => store && store.close()))\n\n    log('unlocking')\n    this.closed = true\n    await this._closeLock()\n  }\n\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n  exists () {\n    return this.version.exists()\n  }\n\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n  async stat () {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ])\n      const size = blocks.size + datastore + keys\n\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      }\n    }\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    })\n  }\n\n  /**\n   * @private\n   */\n  async _isAutoMigrationEnabled () {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate\n    }\n\n    // TODO we need to figure out the priority here, between repo options and config.\n    let autoMigrateConfig\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY)\n    } catch (/** @type {any} */ e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true // Config's default value is True\n      } else {\n        throw e\n      }\n    }\n\n    return autoMigrateConfig\n  }\n\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n  async _migrate (toVersion, backends) {\n    const currentRepoVersion = await this.version.get()\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`)\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    } else {\n      log(`migrating to version ${toVersion}`)\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _storageMaxStat () {\n    try {\n      const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))\n      return BigInt(bytes(max))\n    } catch (/** @type {any} */ err) {\n      return BigInt(noLimit)\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _blockStat () {\n    let count = BigInt(0)\n    let size = BigInt(0)\n\n    if (this.blocks) {\n      for await (const { key, value } of this.blocks.query({})) {\n        count += BigInt(1)\n        size += BigInt(value.byteLength)\n        size += BigInt(key.bytes.byteLength)\n      }\n    }\n\n    return { count, size }\n  }\n}\n\n/**\n * @param {Datastore} datastore\n */\nasync function getSize (datastore) {\n  let sum = BigInt(0)\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength)\n    sum += BigInt(block.key.uint8Array().byteLength)\n  }\n  return sum\n}\n\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nexport function createRepo (path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options)\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig (_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))\n\n  return _config\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec (_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  }\n\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map((mounting) => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  }\n}\n","import { createRepo as create } from 'ipfs-repo'\nimport { LevelDatastore } from 'datastore-level'\nimport { BlockstoreDatastoreAdapter } from 'blockstore-datastore-adapter'\nimport { MemoryLock } from 'ipfs-repo/locks/memory'\n\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {(...args: any[]) => void} print\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n * @param {number} [options.peerStoreCacheSize]\n */\nexport function createRepo (print, codecs, options) {\n  const repoPath = options.path || 'ipfs'\n\n  return create(repoPath, (codeOrName) => codecs.getCodec(codeOrName), {\n    root: new LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(\n      new LevelDatastore(`${repoPath}/blocks`, {\n        prefix: '',\n        version: 2\n      })\n    ),\n    datastore: new LevelDatastore(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new LevelDatastore(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new LevelDatastore(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: MemoryLock\n  })\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","// @ts-check\n\nimport { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n\n/**\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string\n * @returns {string}\n */\nexport function toUrlString (url) {\n  try {\n    // @ts-expect-error\n    url = multiaddrToUri(multiaddr(url))\n  } catch (/** @type {any} */ err) { }\n\n  url = url.toString()\n\n  return url\n}\n","\nexport default () => {}\n","\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n","\n/* eslint-env browser */\n\nimport { Client } from './core.js'\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n","import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createUnwant = configure(api => {\n  /**\n   * @type {BitswapAPI[\"unwant\"]}\n   */\n  async function unwant (cid, options = {}) {\n    const res = await api.post('bitswap/unwant', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return unwant\n})\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\nimport { createUnwant } from './unwant.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    unwant: createUnwant(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n","import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n","import { normaliseContent } from './normalise-content.browser.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}\n */\nexport function normaliseInput (input) {\n  // @ts-expect-error browser normaliseContent returns a Blob not an AsyncIterable<Uint8Array>\n  return normaliseCandidateMultiple(input, normaliseContent, true)\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n","import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return add\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return clear\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createReset = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return reset\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return rm\n})\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    clear: createClear(config),\n    list: createList(config),\n    reset: createReset(config),\n    rm: createRm(config)\n  }\n}\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createApply = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n","\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('config/profile/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return data.map((/** @type {Record<string, any>} */ profile) => objectToCamel(profile))\n  }\n  return list\n})\n","import { createApply } from './apply.js'\nimport { createList } from './list.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config),\n    list: createList(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n","import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n","\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interface-peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n","import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createNet = configure(api => {\n  /**\n   * @type {DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createSys = configure(api => {\n  /**\n   * @type {DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n","import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createChmod = configure(api => {\n  /**\n   * @type {FilesAPI[\"chmod\"]}\n   */\n  async function chmod (path, mode, options = {}) {\n    const res = await api.post('files/chmod', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        mode,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return chmod\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n","import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMv = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createTouch = configure(api => {\n  /**\n   * @type {FilesAPI[\"touch\"]}\n   */\n  async function touch (path, options = {}) {\n    const res = await api.post('files/touch', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return touch\n})\n","import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n","import { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createTouch } from './touch.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    chmod: createChmod(config),\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    touch: createTouch(config),\n    write: createWrite(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {KeyAPI[\"export\"]}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options) {\n    const opts = options ?? { type: 'Ed25519' }\n\n    const res = await api.post('key/gen', {\n      signal: opts.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...opts\n      }),\n      headers: opts.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createInfo = configure(api => {\n  /**\n   * @type {KeyAPI[\"info\"]}\n   */\n  const info = async (name, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return info\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    info: createInfo(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createTail = configure(api => {\n  /**\n   * @type {LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n","import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createCancel = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createData = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createNew = configure(api => {\n  /**\n   * @type {ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n","import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n","import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n","import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n","import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n","/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n","import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n","import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n","import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n","import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n","\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n","\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n","import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createGc = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\nexport const createBw = configure(api => {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n","import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(all(normaliseInput(input), options))\n    }\n    return add\n  })(options)\n}\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createDns = configure(api => {\n  /**\n   * @type {RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n","import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n","import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createMount = configure(api => {\n  /**\n   * @type {RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n","import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStart = configure(api => {\n  /**\n   * @type {RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStop = configure(api => {\n  /**\n   * @type {RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n","export default {}","/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n","/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\nimport { getProtocol } from '../protocols-table.js';\nimport Resolver from './dns.js';\nconst { code: dnsaddrCode } = getProtocol('dnsaddr');\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\nexport async function dnsaddrResolver(addr, options = {}) {\n    const resolver = new Resolver();\n    if (options.signal != null) {\n        options.signal.addEventListener('abort', () => {\n            resolver.cancel();\n        });\n    }\n    const peerId = addr.getPeerId();\n    const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? [];\n    if (hostname == null) {\n        throw new Error('No hostname found in multiaddr');\n    }\n    const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);\n    let addresses = records.flat().map((a) => a.split('=')[1]).filter(Boolean);\n    if (peerId != null) {\n        addresses = addresses.filter((entry) => entry.includes(peerId));\n    }\n    return addresses;\n}\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const QUICV1 = and(UDP, base('quic-v1'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'));\nexport const WebRTCDirect = or(and(_WebRTCDirect, base('p2p')), _WebRTCDirect);\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'));\nexport const WebTransport = or(and(_WebTransport, base('p2p')), _WebTransport);\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, P2PWebRTCStar, P2PWebRTCDirect, TCP, UTP, QUIC, DNS, WebRTCDirect, WebTransport);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), P2PWebRTCStar, P2PWebRTCDirect, WebRTCDirect, WebTransport, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\nexport const WebRTC = or(and(Circuit, base('webrtc')), and(Reliable, base('webrtc')), base('webrtc'));\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger'\nimport { createRepo } from 'ipfs-core-config/repo'\nimport getDefaultConfig from 'ipfs-core-config/config'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport mergeOpts from 'merge-options'\nimport { profiles as configProfiles } from './config/profiles.js'\nimport { NotEnabledError, NotInitializedError } from '../errors.js'\nimport { createLibp2p } from './libp2p.js'\nimport { ERR_REPO_NOT_INITIALIZED } from 'ipfs-repo/errors'\nimport { createEd25519PeerId, createRSAPeerId } from '@libp2p/peer-id-factory'\nimport errCode from 'err-code'\nimport { unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport { Key } from 'interface-datastore/key'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:components:peer:storage')\n\n/**\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('../types').InitOptions} InitOptions\n * @typedef {import('../types').Print} Print\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('@libp2p/crypto/keys').KeyTypes} KeyType\n * @typedef {import('@libp2p/interface-keychain').KeyChain} Keychain\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nexport class Storage {\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {Keychain} keychain\n   * @param {IPFSRepo} repo\n   * @param {Print} print\n   * @param {boolean} isNew\n   */\n  constructor (peerId, keychain, repo, print, isNew) {\n    this.print = print\n    this.peerId = peerId\n    this.keychain = keychain\n    this.repo = repo\n    this.print = print\n    this.isNew = isNew\n  }\n\n  /**\n   * @param {Print} print\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n   * @param {IPFSOptions} options\n   */\n  static async start (print, codecs, options) {\n    const { repoAutoMigrate, repo: inputRepo, onMigrationProgress } = options\n\n    const repo = (typeof inputRepo === 'string' || inputRepo == null)\n      ? createRepo(print, codecs, {\n        path: inputRepo,\n        autoMigrate: repoAutoMigrate,\n        onMigrationProgress: onMigrationProgress\n      })\n      : inputRepo\n\n    const { peerId, keychain, isNew } = await loadRepo(print, repo, options)\n\n    // TODO: throw error?\n    // @ts-expect-error On start, keychain will always be available\n    return new Storage(peerId, keychain, repo, print, isNew)\n  }\n}\n\n/**\n * @param {Print} print\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n */\nconst loadRepo = async (print, repo, options) => {\n  if (!repo.closed) {\n    return { ...await configureRepo(repo, options), isNew: false }\n  }\n\n  try {\n    await repo.open()\n\n    return { ...await configureRepo(repo, options), isNew: false }\n  } catch (/** @type {any} */ err) {\n    if (err.code !== ERR_REPO_NOT_INITIALIZED) {\n      throw err\n    }\n\n    if (options.init && options.init.allowNew === false) {\n      throw new NotEnabledError('Initialization of new repos disabled by config, pass `config.init.isNew: true` to enable it')\n    }\n\n    return { ...await initRepo(print, repo, options), isNew: true }\n  }\n}\n\n/**\n * @param {Print} print\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n * @returns {Promise<{peerId: PeerId, keychain?: Keychain}>}\n */\nconst initRepo = async (print, repo, options) => {\n  const initOptions = options.init || {}\n\n  // 1. Verify that repo does not exist yet (if it does and we could not open it we give up)\n  const exists = await repo.exists()\n  log('repo exists?', exists)\n\n  if (exists === true) {\n    throw new Error('repo already exists')\n  }\n\n  // 2. Restore `peerId` from a given `.privateKey` or init new using provided options.\n  const peerId = initOptions.privateKey\n    ? await decodePeerId(initOptions.privateKey)\n    : await initPeerId(print, initOptions)\n\n  const identity = peerIdToIdentity(peerId)\n\n  log('peer identity: %s', identity.PeerID)\n\n  // 3. Init new repo with provided `.config` and restored / initialized `peerId`\n  const config = {\n    ...mergeOptions(applyProfiles(getDefaultConfig(), initOptions.profiles), options.config),\n    Identity: identity\n  }\n  await repo.init(config)\n\n  // 4. Open initialized repo.\n  await repo.open()\n\n  log('repo opened')\n\n  /** @type {import('./libp2p').KeychainConfig} */\n  const keychainConfig = {\n    pass: options.pass\n  }\n\n  try {\n    keychainConfig.dek = await repo.config.get('Keychain.DEK')\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  // Create libp2p for Keychain creation\n  const libp2p = await createLibp2p({\n    options: undefined,\n    multiaddrs: undefined,\n    peerId,\n    repo,\n    config,\n    keychainConfig\n  })\n\n  if (!(await repo.datastore.has(new Key('/info/self')))) {\n    await libp2p.keychain.importPeer('self', peerId)\n  }\n\n  await repo.config.set('Keychain', {\n    // @ts-expect-error private field\n    DEK: libp2p.keychain.init.dek\n  })\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\n/**\n * Takes `peerId` either represented as a string serialized string or\n * an instance and returns a `PeerId` instance.\n *\n * @param {PeerId|string} peerId\n * @returns {Promise<PeerId>}\n */\nconst decodePeerId = async (peerId) => {\n  log('using user-supplied private-key')\n  if (isPeerId(peerId)) {\n    return peerId\n  }\n\n  const rawPrivateKey = uint8ArrayFromString(peerId, 'base64pad')\n  const key = await unmarshalPrivateKey(rawPrivateKey)\n  return await peerIdFromKeys(key.public.bytes, key.bytes)\n}\n\n/**\n * Initializes new PeerId by generating an underlying keypair.\n *\n * @param {Print} print\n * @param {object} options\n * @param {KeyType} [options.algorithm='Ed25519']\n * @param {number} [options.bits=2048]\n * @returns {Promise<PeerId>}\n */\nconst initPeerId = (print, { algorithm = 'Ed25519', bits = 2048 }) => {\n  // Generate peer identity keypair + transform to desired format + add to config.\n  print('generating %s keypair...', algorithm)\n\n  if (algorithm === 'Ed25519') {\n    return createEd25519PeerId()\n  }\n\n  if (algorithm === 'RSA') {\n    return createRSAPeerId({ bits })\n  }\n\n  throw errCode(new Error('Unknown PeerId algorithm'), 'ERR_UNKNOWN_PEER_ID_ALGORITHM')\n}\n\n/**\n * @param {PeerId} peerId\n */\nconst peerIdToIdentity = (peerId) => {\n  if (peerId.privateKey == null) {\n    throw errCode(new Error('Private key missing'), 'ERR_MISSING_PRIVATE_KEY')\n  }\n\n  return {\n    PeerID: peerId.toString(),\n    /** @type {string} */\n    PrivKey: uint8ArrayToString(peerId.privateKey, 'base64pad')\n  }\n}\n\n/**\n * Applies passed `profiles` and a `config` to an open repo.\n *\n * @param {IPFSRepo} repo\n * @param {IPFSOptions} options\n * @returns {Promise<{peerId: PeerId, keychain?: Keychain}>}\n */\nconst configureRepo = async (repo, options) => {\n  const config = options.config\n  const profiles = (options.init && options.init.profiles) || []\n  const pass = options.pass\n  const original = await repo.config.getAll()\n  const changed = mergeConfigs(applyProfiles(original, profiles), config)\n\n  if (original !== changed) {\n    await repo.config.replace(changed)\n  }\n\n  if (!changed.Identity || !changed.Identity.PrivKey) {\n    throw new NotInitializedError('No private key was found in the config, please intialize the repo')\n  }\n\n  const buf = uint8ArrayFromString(changed.Identity.PrivKey, 'base64pad')\n  const key = await unmarshalPrivateKey(buf)\n  const peerId = await peerIdFromKeys(key.public.bytes, key.bytes)\n  const libp2p = await createLibp2p({\n    options: undefined,\n    multiaddrs: undefined,\n    peerId,\n    repo,\n    config: changed,\n    keychainConfig: {\n      pass,\n      ...changed.Keychain\n    }\n  })\n\n  return { peerId, keychain: libp2p.keychain }\n}\n\n/**\n * @param {IPFSConfig} config\n * @param {Partial<IPFSConfig>} [changes]\n */\nconst mergeConfigs = (config, changes) =>\n  changes ? mergeOptions(config, changes) : config\n\n/**\n * Apply profiles (e.g. ['server', 'lowpower']) to config\n *\n * @param {IPFSConfig} config\n * @param {string[]} [profiles]\n */\nconst applyProfiles = (config, profiles) => {\n  return (profiles || []).reduce((config, name) => {\n    const profile = configProfiles[name]\n    if (!profile) {\n      throw new Error(`Could not find profile with name '${name}'`)\n    }\n    log('applying profile %s', name)\n    return profile.transform(config)\n  }, config)\n}\n","import * as varint from 'varint'\n\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\nfunction varintEncoder (buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr)\n  }, 0))\n  let offset = 0\n\n  for (const num of buf) {\n    out = varint.encode(num, out, offset)\n\n    // @ts-expect-error types are wrong\n    offset += varint.default.encodingLength(num)\n  }\n\n  return out\n}\n\nexport default varintEncoder\n","\nimport { base58btc } from 'multiformats/bases/base58'\n\nexport class WantListEntry {\n  /**\n   * @param {import('multiformats').CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  constructor (cid, priority, wantType) {\n    // Keep track of how many requests we have for this key\n    this._refCounter = 1\n\n    this.cid = cid\n    this.priority = priority || 1\n    this.wantType = wantType\n  }\n\n  inc () {\n    this._refCounter += 1\n  }\n\n  dec () {\n    this._refCounter = Math.max(0, this._refCounter - 1)\n  }\n\n  hasRefs () {\n    return this._refCounter > 0\n  }\n\n  // So that console.log prints a nice description of this object\n  get [Symbol.toStringTag] () {\n    const cidStr = this.cid.toString(base58btc)\n    return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`\n  }\n\n  /**\n   * @param {any} other\n   */\n  equals (other) {\n    return (this._refCounter === other._refCounter) &&\n      this.cid.equals(other.cid) &&\n      this.priority === other.priority &&\n      this.wantType === other.wantType\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\n\nexport const Message = $root.Message = (() => {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {Message.IWantlist|null} [wantlist] Message wantlist\n     * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n     * @property {Array.<Message.IBlock>|null} [payload] Message payload\n     * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n     * @property {number|null} [pendingBytes] Message pendingBytes\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [p] Properties to set\n     */\n    function Message(p) {\n        this.blocks = [];\n        this.payload = [];\n        this.blockPresences = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Message wantlist.\n     * @member {Message.IWantlist|null|undefined} wantlist\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.wantlist = null;\n\n    /**\n     * Message blocks.\n     * @member {Array.<Uint8Array>} blocks\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Message payload.\n     * @member {Array.<Message.IBlock>} payload\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.payload = $util.emptyArray;\n\n    /**\n     * Message blockPresences.\n     * @member {Array.<Message.IBlockPresence>} blockPresences\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blockPresences = $util.emptyArray;\n\n    /**\n     * Message pendingBytes.\n     * @member {number} pendingBytes\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.pendingBytes = 0;\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} m Message message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\"))\n            $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n        if (m.blocks != null && m.blocks.length) {\n            for (var i = 0; i < m.blocks.length; ++i)\n                w.uint32(18).bytes(m.blocks[i]);\n        }\n        if (m.payload != null && m.payload.length) {\n            for (var i = 0; i < m.payload.length; ++i)\n                $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.blockPresences != null && m.blockPresences.length) {\n            for (var i = 0; i < m.blockPresences.length; ++i)\n                $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n        }\n        if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\"))\n            w.uint32(40).int32(m.pendingBytes);\n        return w;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1: {\n                    m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n                    break;\n                }\n            case 2: {\n                    if (!(m.blocks && m.blocks.length))\n                        m.blocks = [];\n                    m.blocks.push(r.bytes());\n                    break;\n                }\n            case 3: {\n                    if (!(m.payload && m.payload.length))\n                        m.payload = [];\n                    m.payload.push($root.Message.Block.decode(r, r.uint32()));\n                    break;\n                }\n            case 4: {\n                    if (!(m.blockPresences && m.blockPresences.length))\n                        m.blockPresences = [];\n                    m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n                    break;\n                }\n            case 5: {\n                    m.pendingBytes = r.int32();\n                    break;\n                }\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message} Message\n     */\n    Message.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message)\n            return d;\n        var m = new $root.Message();\n        if (d.wantlist != null) {\n            if (typeof d.wantlist !== \"object\")\n                throw TypeError(\".Message.wantlist: object expected\");\n            m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n        }\n        if (d.blocks) {\n            if (!Array.isArray(d.blocks))\n                throw TypeError(\".Message.blocks: array expected\");\n            m.blocks = [];\n            for (var i = 0; i < d.blocks.length; ++i) {\n                if (typeof d.blocks[i] === \"string\")\n                    $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);\n                else if (d.blocks[i].length >= 0)\n                    m.blocks[i] = d.blocks[i];\n            }\n        }\n        if (d.payload) {\n            if (!Array.isArray(d.payload))\n                throw TypeError(\".Message.payload: array expected\");\n            m.payload = [];\n            for (var i = 0; i < d.payload.length; ++i) {\n                if (typeof d.payload[i] !== \"object\")\n                    throw TypeError(\".Message.payload: object expected\");\n                m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n            }\n        }\n        if (d.blockPresences) {\n            if (!Array.isArray(d.blockPresences))\n                throw TypeError(\".Message.blockPresences: array expected\");\n            m.blockPresences = [];\n            for (var i = 0; i < d.blockPresences.length; ++i) {\n                if (typeof d.blockPresences[i] !== \"object\")\n                    throw TypeError(\".Message.blockPresences: object expected\");\n                m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n            }\n        }\n        if (d.pendingBytes != null) {\n            m.pendingBytes = d.pendingBytes | 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} m Message\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Message.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocks = [];\n            d.payload = [];\n            d.blockPresences = [];\n        }\n        if (o.defaults) {\n            d.wantlist = null;\n            d.pendingBytes = 0;\n        }\n        if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n            d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n        }\n        if (m.blocks && m.blocks.length) {\n            d.blocks = [];\n            for (var j = 0; j < m.blocks.length; ++j) {\n                d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n            }\n        }\n        if (m.payload && m.payload.length) {\n            d.payload = [];\n            for (var j = 0; j < m.payload.length; ++j) {\n                d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n            }\n        }\n        if (m.blockPresences && m.blockPresences.length) {\n            d.blockPresences = [];\n            for (var j = 0; j < m.blockPresences.length; ++j) {\n                d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n            }\n        }\n        if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n            d.pendingBytes = m.pendingBytes;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for Message\n     * @function getTypeUrl\n     * @memberof Message\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/Message\";\n    };\n\n    Message.Wantlist = (function() {\n\n        /**\n         * Properties of a Wantlist.\n         * @memberof Message\n         * @interface IWantlist\n         * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n         * @property {boolean|null} [full] Wantlist full\n         */\n\n        /**\n         * Constructs a new Wantlist.\n         * @memberof Message\n         * @classdesc Represents a Wantlist.\n         * @implements IWantlist\n         * @constructor\n         * @param {Message.IWantlist=} [p] Properties to set\n         */\n        function Wantlist(p) {\n            this.entries = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Wantlist entries.\n         * @member {Array.<Message.Wantlist.IEntry>} entries\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.entries = $util.emptyArray;\n\n        /**\n         * Wantlist full.\n         * @member {boolean} full\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.full = false;\n\n        /**\n         * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.IWantlist} m Wantlist message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wantlist.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.entries != null && m.entries.length) {\n                for (var i = 0; i < m.entries.length; ++i)\n                    $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.full != null && Object.hasOwnProperty.call(m, \"full\"))\n                w.uint32(16).bool(m.full);\n            return w;\n        };\n\n        /**\n         * Decodes a Wantlist message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Wantlist} Wantlist\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wantlist.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        if (!(m.entries && m.entries.length))\n                            m.entries = [];\n                        m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n                        break;\n                    }\n                case 2: {\n                        m.full = r.bool();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Wantlist} Wantlist\n         */\n        Wantlist.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Wantlist)\n                return d;\n            var m = new $root.Message.Wantlist();\n            if (d.entries) {\n                if (!Array.isArray(d.entries))\n                    throw TypeError(\".Message.Wantlist.entries: array expected\");\n                m.entries = [];\n                for (var i = 0; i < d.entries.length; ++i) {\n                    if (typeof d.entries[i] !== \"object\")\n                        throw TypeError(\".Message.Wantlist.entries: object expected\");\n                    m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n                }\n            }\n            if (d.full != null) {\n                m.full = Boolean(d.full);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.Wantlist} m Wantlist\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wantlist.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.entries = [];\n            }\n            if (o.defaults) {\n                d.full = false;\n            }\n            if (m.entries && m.entries.length) {\n                d.entries = [];\n                for (var j = 0; j < m.entries.length; ++j) {\n                    d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n                }\n            }\n            if (m.full != null && m.hasOwnProperty(\"full\")) {\n                d.full = m.full;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Wantlist to JSON.\n         * @function toJSON\n         * @memberof Message.Wantlist\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wantlist.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Wantlist\n         * @function getTypeUrl\n         * @memberof Message.Wantlist\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Wantlist.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Wantlist\";\n        };\n\n        /**\n         * WantType enum.\n         * @name Message.Wantlist.WantType\n         * @enum {number}\n         * @property {number} Block=0 Block value\n         * @property {number} Have=1 Have value\n         */\n        Wantlist.WantType = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"Block\"] = 0;\n            values[valuesById[1] = \"Have\"] = 1;\n            return values;\n        })();\n\n        Wantlist.Entry = (function() {\n\n            /**\n             * Properties of an Entry.\n             * @memberof Message.Wantlist\n             * @interface IEntry\n             * @property {Uint8Array|null} [block] Entry block\n             * @property {number|null} [priority] Entry priority\n             * @property {boolean|null} [cancel] Entry cancel\n             * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n             * @property {boolean|null} [sendDontHave] Entry sendDontHave\n             */\n\n            /**\n             * Constructs a new Entry.\n             * @memberof Message.Wantlist\n             * @classdesc Represents an Entry.\n             * @implements IEntry\n             * @constructor\n             * @param {Message.Wantlist.IEntry=} [p] Properties to set\n             */\n            function Entry(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Entry block.\n             * @member {Uint8Array} block\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.block = $util.newBuffer([]);\n\n            /**\n             * Entry priority.\n             * @member {number} priority\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.priority = 0;\n\n            /**\n             * Entry cancel.\n             * @member {boolean} cancel\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.cancel = false;\n\n            /**\n             * Entry wantType.\n             * @member {Message.Wantlist.WantType} wantType\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.wantType = 0;\n\n            /**\n             * Entry sendDontHave.\n             * @member {boolean} sendDontHave\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.sendDontHave = false;\n\n            /**\n             * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n             * @function encode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entry.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.block != null && Object.hasOwnProperty.call(m, \"block\"))\n                    w.uint32(10).bytes(m.block);\n                if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\"))\n                    w.uint32(16).int32(m.priority);\n                if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\"))\n                    w.uint32(24).bool(m.cancel);\n                if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\"))\n                    w.uint32(32).int32(m.wantType);\n                if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\"))\n                    w.uint32(40).bool(m.sendDontHave);\n                return w;\n            };\n\n            /**\n             * Decodes an Entry message from the specified reader or buffer.\n             * @function decode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {Message.Wantlist.Entry} Entry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entry.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist.Entry();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1: {\n                            m.block = r.bytes();\n                            break;\n                        }\n                    case 2: {\n                            m.priority = r.int32();\n                            break;\n                        }\n                    case 3: {\n                            m.cancel = r.bool();\n                            break;\n                        }\n                    case 4: {\n                            m.wantType = r.int32();\n                            break;\n                        }\n                    case 5: {\n                            m.sendDontHave = r.bool();\n                            break;\n                        }\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {Message.Wantlist.Entry} Entry\n             */\n            Entry.fromObject = function fromObject(d) {\n                if (d instanceof $root.Message.Wantlist.Entry)\n                    return d;\n                var m = new $root.Message.Wantlist.Entry();\n                if (d.block != null) {\n                    if (typeof d.block === \"string\")\n                        $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);\n                    else if (d.block.length >= 0)\n                        m.block = d.block;\n                }\n                if (d.priority != null) {\n                    m.priority = d.priority | 0;\n                }\n                if (d.cancel != null) {\n                    m.cancel = Boolean(d.cancel);\n                }\n                switch (d.wantType) {\n                case \"Block\":\n                case 0:\n                    m.wantType = 0;\n                    break;\n                case \"Have\":\n                case 1:\n                    m.wantType = 1;\n                    break;\n                }\n                if (d.sendDontHave != null) {\n                    m.sendDontHave = Boolean(d.sendDontHave);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from an Entry message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.Entry} m Entry\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entry.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    if (o.bytes === String)\n                        d.block = \"\";\n                    else {\n                        d.block = [];\n                        if (o.bytes !== Array)\n                            d.block = $util.newBuffer(d.block);\n                    }\n                    d.priority = 0;\n                    d.cancel = false;\n                    d.wantType = o.enums === String ? \"Block\" : 0;\n                    d.sendDontHave = false;\n                }\n                if (m.block != null && m.hasOwnProperty(\"block\")) {\n                    d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n                }\n                if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n                    d.priority = m.priority;\n                }\n                if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n                    d.cancel = m.cancel;\n                }\n                if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n                    d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n                }\n                if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n                    d.sendDontHave = m.sendDontHave;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Entry to JSON.\n             * @function toJSON\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entry.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Entry\n             * @function getTypeUrl\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/Message.Wantlist.Entry\";\n            };\n\n            return Entry;\n        })();\n\n        return Wantlist;\n    })();\n\n    Message.Block = (function() {\n\n        /**\n         * Properties of a Block.\n         * @memberof Message\n         * @interface IBlock\n         * @property {Uint8Array|null} [prefix] Block prefix\n         * @property {Uint8Array|null} [data] Block data\n         */\n\n        /**\n         * Constructs a new Block.\n         * @memberof Message\n         * @classdesc Represents a Block.\n         * @implements IBlock\n         * @constructor\n         * @param {Message.IBlock=} [p] Properties to set\n         */\n        function Block(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Block prefix.\n         * @member {Uint8Array} prefix\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Block data.\n         * @member {Uint8Array} data\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Block\n         * @static\n         * @param {Message.IBlock} m Block message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Block.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\"))\n                w.uint32(10).bytes(m.prefix);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(18).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a Block message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Block\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Block} Block\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Block.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Block();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.prefix = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.data = r.bytes();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Block message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Block\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Block} Block\n         */\n        Block.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Block)\n                return d;\n            var m = new $root.Message.Block();\n            if (d.prefix != null) {\n                if (typeof d.prefix === \"string\")\n                    $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);\n                else if (d.prefix.length >= 0)\n                    m.prefix = d.prefix;\n            }\n            if (d.data != null) {\n                if (typeof d.data === \"string\")\n                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                else if (d.data.length >= 0)\n                    m.data = d.data;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Block message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Block\n         * @static\n         * @param {Message.Block} m Block\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Block.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.prefix = \"\";\n                else {\n                    d.prefix = [];\n                    if (o.bytes !== Array)\n                        d.prefix = $util.newBuffer(d.prefix);\n                }\n                if (o.bytes === String)\n                    d.data = \"\";\n                else {\n                    d.data = [];\n                    if (o.bytes !== Array)\n                        d.data = $util.newBuffer(d.data);\n                }\n            }\n            if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n                d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n            }\n            if (m.data != null && m.hasOwnProperty(\"data\")) {\n                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Block to JSON.\n         * @function toJSON\n         * @memberof Message.Block\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Block.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Block\n         * @function getTypeUrl\n         * @memberof Message.Block\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Block.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Block\";\n        };\n\n        return Block;\n    })();\n\n    /**\n     * BlockPresenceType enum.\n     * @name Message.BlockPresenceType\n     * @enum {number}\n     * @property {number} Have=0 Have value\n     * @property {number} DontHave=1 DontHave value\n     */\n    Message.BlockPresenceType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Have\"] = 0;\n        values[valuesById[1] = \"DontHave\"] = 1;\n        return values;\n    })();\n\n    Message.BlockPresence = (function() {\n\n        /**\n         * Properties of a BlockPresence.\n         * @memberof Message\n         * @interface IBlockPresence\n         * @property {Uint8Array|null} [cid] BlockPresence cid\n         * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n         */\n\n        /**\n         * Constructs a new BlockPresence.\n         * @memberof Message\n         * @classdesc Represents a BlockPresence.\n         * @implements IBlockPresence\n         * @constructor\n         * @param {Message.IBlockPresence=} [p] Properties to set\n         */\n        function BlockPresence(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BlockPresence cid.\n         * @member {Uint8Array} cid\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.cid = $util.newBuffer([]);\n\n        /**\n         * BlockPresence type.\n         * @member {Message.BlockPresenceType} type\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.type = 0;\n\n        /**\n         * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n         * @function encode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockPresence.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\"))\n                w.uint32(10).bytes(m.cid);\n            if (m.type != null && Object.hasOwnProperty.call(m, \"type\"))\n                w.uint32(16).int32(m.type);\n            return w;\n        };\n\n        /**\n         * Decodes a BlockPresence message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.BlockPresence} BlockPresence\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockPresence.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.BlockPresence();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.cid = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.type = r.int32();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.BlockPresence} BlockPresence\n         */\n        BlockPresence.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.BlockPresence)\n                return d;\n            var m = new $root.Message.BlockPresence();\n            if (d.cid != null) {\n                if (typeof d.cid === \"string\")\n                    $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);\n                else if (d.cid.length >= 0)\n                    m.cid = d.cid;\n            }\n            switch (d.type) {\n            case \"Have\":\n            case 0:\n                m.type = 0;\n                break;\n            case \"DontHave\":\n            case 1:\n                m.type = 1;\n                break;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.BlockPresence} m BlockPresence\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockPresence.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.cid = \"\";\n                else {\n                    d.cid = [];\n                    if (o.bytes !== Array)\n                        d.cid = $util.newBuffer(d.cid);\n                }\n                d.type = o.enums === String ? \"Have\" : 0;\n            }\n            if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n                d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n            }\n            if (m.type != null && m.hasOwnProperty(\"type\")) {\n                d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this BlockPresence to JSON.\n         * @function toJSON\n         * @memberof Message.BlockPresence\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockPresence.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for BlockPresence\n         * @function getTypeUrl\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        BlockPresence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.BlockPresence\";\n        };\n\n        return BlockPresence;\n    })();\n\n    return Message;\n})();\n\nexport { $root as default };\n","\nimport { WantListEntry as Entry } from './entry.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { Message } from '../message/message.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\nconst WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Wantlist {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('@libp2p/interface-libp2p').Libp2p} [libp2p]\n   */\n  constructor (stats, libp2p) {\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p\n      ? trackedMap({\n        name: 'ipfs_bitswap_wantlist',\n        metrics: libp2p.metrics\n      })\n      : new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\n","\nimport { Wantlist } from '../wantlist/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\n\nconst WantlistEntry = Wantlist.Entry\n\nexport class BitswapMessageEntry {\n  /**\n   * @param {import('multiformats').CID} cid\n   * @param {number} priority\n   * @param {import('./message').Message.Wantlist.WantType} wantType\n   * @param {boolean} [cancel]\n   * @param {boolean} [sendDontHave]\n   */\n  constructor (cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType)\n    this.cancel = Boolean(cancel)\n    this.sendDontHave = Boolean(sendDontHave)\n  }\n\n  get cid () {\n    return this.entry.cid\n  }\n\n  set cid (cid) {\n    this.entry.cid = cid\n  }\n\n  get priority () {\n    return this.entry.priority\n  }\n\n  set priority (val) {\n    this.entry.priority = val\n  }\n\n  get wantType () {\n    return this.entry.wantType\n  }\n\n  set wantType (val) {\n    this.entry.wantType = val\n  }\n\n  get [Symbol.toStringTag] () {\n    const cidStr = this.cid.toString(base58btc)\n    return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`\n  }\n\n  /**\n   * @param {this} other\n   */\n  equals (other) {\n    return (this.cancel === other.cancel) &&\n           (this.sendDontHave === other.sendDontHave) &&\n           (this.wantType === other.wantType) &&\n           this.entry.equals(other.entry)\n  }\n}\n","import { logger as createLogger } from '@libp2p/logger'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { BitswapMessageEntry } from '../message/entry.js'\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`)\n  }\n\n  return createLogger(name.join(':'))\n}\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nexport const includesWith = (pred, x, list) => {\n  let idx = 0\n  const len = list.length\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true\n    }\n    idx += 1\n  }\n  return false\n}\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const uniqWith = (pred, list) => {\n  let idx = 0\n  const len = list.length\n  const result = []\n  let item\n\n  while (idx < len) {\n    item = list[idx]\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v)\n\n    if (acc[k]) {\n      acc[k].push(v)\n    } else {\n      acc[k] = [v]\n    }\n    return acc\n  }, /** @type {Record<K, V[]>} */({}))\n}\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values)\n  })\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key)\n\n    if (valueB === undefined) {\n      return false\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n","import { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\n// @ts-ignore\nimport vd from 'varint-decoder'\nimport ve from '../utils/varint-encoder.js'\nimport { isMapEqual } from '../utils/index.js'\nimport { Message } from './message.js'\nimport { BitswapMessageEntry as Entry } from './entry.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n/**\n * @typedef {import('../types').MultihashHasherLoader} MultihashHasherLoader\n */\n\nexport class BitswapMessage {\n  /**\n   * @param {boolean} full\n   */\n  constructor (full) {\n    this.full = full\n    /** @type {Map<string, Entry>} */\n    this.wantlist = new Map()\n\n    /** @type {Map<string, Uint8Array>} */\n    this.blocks = new Map()\n\n    /** @type {Map<string, import('./message').Message.BlockPresenceType>} */\n    this.blockPresences = new Map()\n    this.pendingBytes = 0\n  }\n\n  get empty () {\n    return this.blocks.size === 0 &&\n           this.wantlist.size === 0 &&\n           this.blockPresences.size === 0\n  }\n\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('./message').Message.Wantlist.WantType | null} [wantType]\n   * @param {boolean} [cancel]\n   * @param {boolean} [sendDontHave]\n   * @returns {void}\n   */\n  addEntry (cid, priority, wantType, cancel, sendDontHave) {\n    if (wantType == null) {\n      wantType = BitswapMessage.WantType.Block\n    }\n\n    const cidStr = cid.toString(base58btc)\n    const entry = this.wantlist.get(cidStr)\n    if (entry) {\n      // Only change priority if want is of the same type\n      if (entry.wantType === wantType) {\n        entry.priority = priority\n      }\n      // Only change from \"dont cancel\" to \"do cancel\"\n      if (cancel) {\n        entry.cancel = Boolean(cancel)\n      }\n      // Only change from \"dont send\" to \"do send\" DONT_HAVE\n      if (sendDontHave) {\n        entry.sendDontHave = Boolean(sendDontHave)\n      }\n      // want-block overrides existing want-have\n      if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.wantlist.set(cidStr, new Entry(cid, priority, wantType, cancel, sendDontHave))\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  addBlock (cid, block) {\n    const cidStr = cid.toString(base58btc)\n    this.blocks.set(cidStr, block)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  addHave (cid) {\n    const cidStr = cid.toString(base58btc)\n    if (!this.blockPresences.has(cidStr)) {\n      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  addDontHave (cid) {\n    const cidStr = cid.toString(base58btc)\n    if (!this.blockPresences.has(cidStr)) {\n      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  cancel (cid) {\n    const cidStr = cid.toString(base58btc)\n    this.wantlist.delete(cidStr)\n    this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false)\n  }\n\n  /**\n   * @param {number} size\n   */\n  setPendingBytes (size) {\n    this.pendingBytes = size\n  }\n\n  /**\n   * Serializes to Bitswap Message protobuf of\n   * version 1.0.0\n   *\n   * @returns {Uint8Array}\n   */\n  serializeToBitswap100 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.bytes, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        }),\n        full: this.full ? true : undefined\n      },\n      blocks: Array.from(this.blocks.values())\n    }\n\n    return Message.encode(msg).finish()\n  }\n\n  /**\n   * Serializes to Bitswap Message protobuf of\n   * version 1.1.0\n   *\n   * @returns {Uint8Array}\n   */\n  serializeToBitswap110 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.bytes, // cid\n            priority: Number(entry.priority),\n            wantType: entry.wantType,\n            cancel: Boolean(entry.cancel),\n            sendDontHave: Boolean(entry.sendDontHave)\n          }\n        }),\n        full: this.full ? true : undefined\n      },\n      /** @type {import('./message').Message.BlockPresence[]} */\n      blockPresences: [],\n\n      /** @type {{ prefix: Uint8Array, data: Uint8Array }[]} */\n      payload: [],\n      pendingBytes: this.pendingBytes\n    }\n\n    for (const [cidStr, data] of this.blocks.entries()) {\n      const cid = CID.parse(cidStr)\n      const version = cid.version\n      const codec = cid.code\n      const multihash = cid.multihash.code\n      const digestLength = cid.multihash.digest.length\n      const prefix = ve([\n        version, codec, multihash, digestLength\n      ])\n\n      msg.payload.push(\n        new Message.Block({\n          prefix,\n          data\n        })\n      )\n    }\n\n    for (const [cidStr, bpType] of this.blockPresences) {\n      msg.blockPresences.push(new Message.BlockPresence({\n        cid: CID.parse(cidStr).bytes,\n        type: bpType\n      }))\n    }\n\n    if (this.pendingBytes > 0) {\n      msg.pendingBytes = this.pendingBytes\n    }\n\n    return Message.encode(msg).finish()\n  }\n\n  /**\n   * @param {BitswapMessage} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    if (this.full !== other.full ||\n        this.pendingBytes !== other.pendingBytes ||\n        !isMapEqual(this.wantlist, other.wantlist) ||\n        !isMapEqual(this.blocks, other.blocks) ||\n        // @TODO - Is this a bug ?\n        // @ts-expect-error - isMap equals map values to be objects not numbers\n        !isMapEqual(this.blockPresences, other.blockPresences)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    const list = Array.from(this.wantlist.keys())\n    const blocks = Array.from(this.blocks.keys())\n    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`\n  }\n}\n\n/**\n * @param {Uint8Array} raw\n * @param {MultihashHasherLoader} [hashLoader]\n */\nBitswapMessage.deserialize = async (raw, hashLoader) => {\n  const decoded = Message.decode(raw)\n\n  const isFull = (decoded.wantlist && decoded.wantlist.full) || false\n  const msg = new BitswapMessage(isFull)\n\n  if (decoded.wantlist && decoded.wantlist.entries) {\n    decoded.wantlist.entries.forEach((entry) => {\n      if (!entry.block) {\n        return\n      }\n      // note: entry.block is the CID here\n      const cid = CID.decode(entry.block)\n      msg.addEntry(cid, entry.priority || 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave))\n    })\n  }\n\n  if (decoded.blockPresences) {\n    decoded.blockPresences.forEach((blockPresence) => {\n      if (!blockPresence.cid) {\n        return\n      }\n\n      const cid = CID.decode(blockPresence.cid)\n\n      if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {\n        msg.addHave(cid)\n      } else {\n        msg.addDontHave(cid)\n      }\n    })\n  }\n\n  // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n  if (decoded.blocks.length > 0) {\n    await Promise.all(decoded.blocks.map(async (b) => {\n      const hash = await sha256.digest(b)\n      const cid = CID.createV0(hash)\n      msg.addBlock(cid, b)\n    }))\n    return msg\n  }\n\n  // Bitswap 1.1.0\n  if (decoded.payload.length > 0) {\n    await Promise.all(decoded.payload.map(async (p) => {\n      if (!p.prefix || !p.data) {\n        return\n      }\n      const values = vd(p.prefix)\n      const cidVersion = values[0]\n      const multicodec = values[1]\n      const hashAlg = values[2]\n      const hasher = hashAlg === sha256.code ? sha256 : hashLoader && await hashLoader.getHasher(hashAlg)\n\n      if (!hasher) {\n        throw new CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG')\n      }\n\n      // const hashLen = values[3] // We haven't need to use this so far\n      const hash = await hasher.digest(p.data)\n      const cid = CID.create(cidVersion, multicodec, hash)\n      msg.addBlock(cid, p.data)\n    }))\n    msg.setPendingBytes(decoded.pendingBytes)\n    return msg\n  }\n\n  return msg\n}\n\n/**\n * @param {CID} cid\n */\nBitswapMessage.blockPresenceSize = (cid) => {\n  // It's ok if this is not exactly right: it's used to estimate the size of\n  // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave\n  // plenty of padding under the maximum message size.\n  // (It's more important for this to be fast).\n  return cid.bytes.length + 1\n}\n\nBitswapMessage.Entry = Entry\nBitswapMessage.WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\nBitswapMessage.BlockPresenceType = {\n  Have: Message.BlockPresenceType.Have,\n  DontHave: Message.BlockPresenceType.DontHave\n}\n","const SECOND = 1000\n\nexport const maxProvidersPerRequest = 3\nexport const providerRequestTimeout = 10 * SECOND\nexport const hasBlockTimeout = 15 * SECOND\nexport const provideTimeout = 15 * SECOND\nexport const kMaxPriority = Math.pow(2, 31) - 1\nexport const maxListeners = 1000\nexport const wantlistSendDebounceMs = 1\n","\n// @ts-ignore\nimport debounce from 'just-debounce-it'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { logger } from '../utils/index.js'\nimport { wantlistSendDebounceMs } from '../constants.js'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (/** @type {any} */ err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n","\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport * as CONSTANTS from '../constants.js'\nimport { MsgQueue } from './msg-queue.js'\nimport { logger } from '../utils/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor (peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    })\n    this.wantlist = new Wantlist(stats, libp2p)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toString())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toString(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toString())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toString())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n","import * as lp from 'it-length-prefixed'\nimport { pipe } from 'it-pipe'\nimport { createTopology } from '@libp2p/topology'\nimport { BitswapMessage as Message } from './message/index.js'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { abortableSource } from 'abortable-iterator'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n * @typedef {import('@libp2p/interface-connection').Connection} Connection\n * @typedef {import('@libp2p/interface-connection').Stream} Stream\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n *\n * @typedef {object} Provider\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n *\n * @typedef {import('it-stream-types').Duplex<Uint8Array>} Duplex\n */\n\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0'\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0'\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0'\n\nconst DEFAULT_MAX_INBOUND_STREAMS = 32\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 128\nconst DEFAULT_INCOMING_STREAM_TIMEOUT = 30000\n\nexport class Network {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {import('./bitswap').Bitswap} bitswap\n   * @param {import('./stats').Stats} stats\n   * @param {object} [options]\n   * @param {boolean} [options.b100Only]\n   * @param {MultihashHasherLoader} [options.hashLoader]\n   * @param {number} [options.maxInboundStreams=32]\n   * @param {number} [options.maxOutboundStreams=32]\n   * @param {number} [options.incomingStreamTimeout=30000]\n   */\n  constructor (libp2p, bitswap, stats, options = {}) {\n    this._log = logger(libp2p.peerId, 'network')\n    this._libp2p = libp2p\n    this._bitswap = bitswap\n    this._protocols = [BITSWAP100]\n\n    if (!options.b100Only) {\n      // Latest bitswap first\n      this._protocols.unshift(BITSWAP110)\n      this._protocols.unshift(BITSWAP120)\n    }\n\n    this._stats = stats\n    this._running = false\n\n    // bind event listeners\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n    this._onPeerDisconnect = this._onPeerDisconnect.bind(this)\n    this._onConnection = this._onConnection.bind(this)\n    this._hashLoader = options.hashLoader\n    this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS\n    this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n    this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT\n  }\n\n  async start () {\n    this._running = true\n    await this._libp2p.handle(this._protocols, this._onConnection, {\n      maxInboundStreams: this._maxInboundStreams,\n      maxOutboundStreams: this._maxOutboundStreams\n    })\n\n    // register protocol with topology\n    const topology = createTopology({\n      onConnect: this._onPeerConnect,\n      onDisconnect: this._onPeerDisconnect\n    })\n\n    /** @type {string[]} */\n    this._registrarIds = []\n\n    for (const protocol of this._protocols) {\n      this._registrarIds.push(await this._libp2p.register(protocol, topology))\n    }\n\n    // All existing connections are like new ones for us\n    this._libp2p.getConnections().forEach(conn => {\n      this._onPeerConnect(conn.remotePeer)\n    })\n  }\n\n  async stop () {\n    this._running = false\n\n    // Unhandle both, libp2p doesn't care if it's not already handled\n    await this._libp2p.unhandle(this._protocols)\n\n    // unregister protocol and handlers\n    if (this._registrarIds != null) {\n      for (const id of this._registrarIds) {\n        this._libp2p.unregister(id)\n      }\n\n      this._registrarIds = []\n    }\n  }\n\n  /**\n   * Handles both types of incoming bitswap messages\n   *\n   * @private\n   * @param {object} connection\n   * @param {Stream} connection.stream - A duplex iterable stream\n   * @param {Connection} connection.connection - A libp2p Connection\n   */\n  _onConnection ({ stream, connection }) {\n    if (!this._running) {\n      return\n    }\n\n    const controller = new TimeoutController(this._incomingStreamTimeout)\n\n    Promise.resolve().then(async () => {\n      this._log('incoming new bitswap %s connection from %p', stream.stat.protocol, connection.remotePeer)\n\n      await pipe(\n        abortableSource(stream.source, controller.signal),\n        lp.decode(),\n        async (source) => {\n          for await (const data of source) {\n            try {\n              const message = await Message.deserialize(data.subarray(), this._hashLoader)\n              await this._bitswap._receiveMessage(connection.remotePeer, message)\n            } catch (/** @type {any} */ err) {\n              this._bitswap._receiveError(err)\n              break\n            }\n\n            // we have received some data so reset the timeout controller\n            controller.reset()\n          }\n        }\n      )\n    })\n      .catch(err => {\n        this._log(err)\n        stream.abort(err)\n      })\n      .finally(() => {\n        controller.clear()\n        stream.close()\n      })\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _onPeerConnect (peerId) {\n    this._bitswap._onPeerConnected(peerId)\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _onPeerDisconnect (peerId) {\n    this._bitswap._onPeerDisconnected(peerId)\n  }\n\n  /**\n   * Find providers given a `cid`.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {AsyncIterable<Provider>}\n   */\n  findProviders (cid, options = {}) {\n    return this._libp2p.contentRouting.findProviders(cid, options)\n  }\n\n  /**\n   * Find the providers of a given `cid` and connect to them.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async findAndConnect (cid, options) {\n    const connectAttempts = []\n    let found = 0\n\n    for await (const provider of this.findProviders(cid, options)) {\n      this._log(`connecting to provider ${provider.id}`)\n      connectAttempts.push(\n        this.connectTo(provider.id, options)\n          .catch(err => {\n            // Prevent unhandled promise rejection\n            this._log.error(err)\n          })\n      )\n\n      found++\n\n      if (found === CONSTANTS.maxProvidersPerRequest) {\n        break\n      }\n    }\n\n    await Promise.all(connectAttempts)\n  }\n\n  /**\n   * Tell the network we can provide content for the passed CID\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async provide (cid, options) {\n    await this._libp2p.contentRouting.provide(cid, options)\n  }\n\n  /**\n   * Connect to the given peer\n   * Send the given msg (instance of Message) to the given peer\n   *\n   * @param {PeerId} peer\n   * @param {Message} msg\n   */\n  async sendMessage (peer, msg) {\n    if (!this._running) throw new Error('network isn\\'t running')\n\n    const stringId = peer.toString()\n    this._log('sendMessage to %s', stringId, msg)\n\n    const connection = await this._libp2p.dial(peer)\n    const stream = await connection.newStream([BITSWAP120, BITSWAP110, BITSWAP100])\n\n    await writeMessage(stream, msg, this._log)\n\n    this._updateSentStats(peer, msg.blocks)\n  }\n\n  /**\n   * Connects to another peer\n   *\n   * @param {PeerId|Multiaddr} peer\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Connection>}\n   */\n  async connectTo (peer, options) { // eslint-disable-line require-await\n    if (!this._running) {\n      throw new Error('network isn\\'t running')\n    }\n\n    return this._libp2p.dial(peer, options)\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peer\n   * @param {Map<string, Uint8Array>} blocks\n   */\n  _updateSentStats (peer, blocks) {\n    const peerId = peer.toString()\n\n    if (this._stats) {\n      for (const block of blocks.values()) {\n        this._stats.push(peerId, 'dataSent', block.length)\n      }\n\n      this._stats.push(peerId, 'blocksSent', blocks.size)\n    }\n  }\n}\n\n/**\n *\n * @param {Stream} stream\n * @param {Message} msg\n * @param {*} log\n */\nasync function writeMessage (stream, msg, log) {\n  try {\n    /** @type {Uint8Array} */\n    let serialized\n    switch (stream.stat.protocol) {\n      case BITSWAP100:\n        serialized = msg.serializeToBitswap100()\n        break\n      case BITSWAP110:\n      case BITSWAP120:\n        serialized = msg.serializeToBitswap110()\n        break\n      default:\n        throw new Error('Unknown protocol: ' + stream.stat.protocol)\n    }\n\n    await pipe(\n      [serialized],\n      lp.encode(),\n      stream\n    )\n  } catch (err) {\n    log(err)\n  } finally {\n    stream.close()\n  }\n}\n","import { Wantlist } from '../wantlist/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Ledger {\n  /**\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (peerId) {\n    this.partner = peerId\n    this.wantlist = new Wantlist()\n\n    this.exchangeCount = 0\n    this.sentToPeer = new Map()\n\n    this.accounting = {\n      bytesSent: 0,\n      bytesRecv: 0\n    }\n  }\n\n  /**\n   * @param {number} n\n   */\n  sentBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesSent += n\n  }\n\n  /**\n   * @param {number} n\n   */\n  receivedBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesRecv += n\n  }\n\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @returns {void}\n   */\n  wants (cid, priority, wantType) {\n    this.wantlist.add(cid, priority, wantType)\n  }\n\n  /**\n   * @param {CID} cid\n   * @returns {void}\n   */\n\n  cancelWant (cid) {\n    this.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  wantlistContains (cid) {\n    return this.wantlist.get(cid)\n  }\n\n  /**\n   * @returns {number}\n   */\n  debtRatio () {\n    return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)) // +1 is to prevent division by zero\n  }\n}\n","/**\n * @template Key, Value\n * SortedMap is a Map whose iterator order can be defined by the user\n * @extends {Map<Key, Value>}\n */\nexport class SortedMap extends Map {\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   * @param {(a:[Key, Value], b:[Key, Value]) => number} [cmp] - compares [k1, v1] to [k2, v2]\n   */\n  constructor (entries, cmp) {\n    super()\n    this._cmp = cmp || this._defaultSort\n    /** @type {Key[]} */\n    this._keys = []\n    for (const [k, v] of entries || []) {\n      this.set(k, v)\n    }\n  }\n\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {number} i - the index of entry whose position should be updated.\n   */\n  update (i) {\n    if (i < 0 || i >= this._keys.length) {\n      return\n    }\n\n    const k = this._keys[i]\n    this._keys.splice(i, 1)\n    const newIdx = this._find(k)\n    this._keys.splice(newIdx, 0, k)\n  }\n\n  /**\n   * @param {Key} k\n   * @param {Value} v\n   */\n  set (k, v) {\n    // If the key is already in the map, remove it from the ordering and\n    // re-insert it below\n    if (this.has(k)) {\n      const i = this.indexOf(k)\n      this._keys.splice(i, 1)\n    }\n\n    // Update / insert the k/v into the map\n    super.set(k, v)\n\n    // Find the correct position of the newly inserted k/v in the order\n    const i = this._find(k)\n    this._keys.splice(i, 0, k)\n\n    return this\n  }\n\n  clear () {\n    super.clear()\n    this._keys = []\n  }\n\n  /**\n   * @param {Key} k\n   */\n  delete (k) {\n    if (!this.has(k)) {\n      return false\n    }\n\n    const i = this.indexOf(k)\n    this._keys.splice(i, 1)\n    return super.delete(k)\n  }\n\n  /**\n   * @param {Key} k\n   */\n  indexOf (k) {\n    if (!this.has(k)) {\n      return -1\n    }\n\n    const i = this._find(k)\n    if (this._keys[i] === k) {\n      return i\n    }\n\n    // There may be more than one key with the same ordering\n    // eg { k1: <priority 5>, k2: <priority 5> }\n    // so scan outwards until the key matches\n    for (let j = 1; j < this._keys.length; j++) {\n      if (this._keys[i + j] === k) return i + j\n      if (this._keys[i - j] === k) return i - j\n    }\n\n    return -1 // should never happen for existing key\n  }\n\n  /**\n   * @private\n   * @param {Key} k\n   * @returns {number}\n   */\n\n  _find (k) {\n    let lower = 0\n    let upper = this._keys.length\n    while (lower < upper) {\n      const pivot = (lower + upper) >>> 1 // lower + (upper - lower) / 2\n      const cmp = this._kCmp(this._keys[pivot], k)\n      // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n      if (cmp < 0) { // pivot < k\n        lower = pivot + 1\n      } else if (cmp > 0) { // pivot > k\n        upper = pivot\n      } else { // pivot == k\n        return pivot\n      }\n    }\n    return lower\n  }\n\n  * keys () {\n    for (const k of this._keys) {\n      yield k\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<Value>}\n   */\n  * values () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield this.get(k)\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<[Key, Value]>}\n   */\n  * entries () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield [k, this.get(k)]\n    }\n\n    return undefined\n  }\n\n  * [Symbol.iterator] () {\n    yield * this.entries()\n  }\n\n  /**\n   * @template This\n   * @param {(entry:[Key, Value]) => void} cb\n   * @param {This} [thisArg]\n   */\n  // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n  forEach (cb, thisArg) {\n    if (!cb) {\n      return\n    }\n\n    for (const k of this._keys) {\n      cb.apply(thisArg, [[k, /** @type {Value} */(this.get(k))]])\n    }\n  }\n\n  /**\n   * @private\n   * @param {[Key, Value]} a\n   * @param {[Key, Value]} b\n   * @returns {0|1|-1}\n   */\n  _defaultSort (a, b) {\n    if (a[0] < b[0]) return -1\n    if (b[0] < a[0]) return 1\n    return 0\n  }\n\n  /**\n   * @private\n   * @param {Key} a\n   * @param {Key} b\n   */\n  _kCmp (a, b) {\n    return this._cmp(\n      // @ts-ignore - get may return undefined\n      [a, this.get(a)],\n      // @ts-ignore - get may return undefined\n      [b, this.get(b)]\n    )\n  }\n}\n","import { SortedMap } from '../utils/sorted-map.js'\n\n/**\n * @typedef {object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\nconst DefaultTaskMerger = {\n  hasNewInfo () {\n    return false\n  },\n\n  merge () {}\n}\n\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nexport class RequestQueue {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  constructor (taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger\n    /** @type {SortedMap<string, PeerTasks>} */\n    this._byPeer = new SortedMap([], PeerTasks.compare)\n  }\n\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toString())\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger)\n    }\n\n    peerTasks.pushTasks(tasks)\n    this._byPeer.set(peerId.toString(), peerTasks)\n  }\n\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   *\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n    const peerTasks = this._head()\n    if (peerTasks === undefined) {\n      return { tasks: [], pendingSize: 0 }\n    }\n\n    const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes)\n    if (tasks.length === 0) {\n      return { tasks, pendingSize }\n    }\n\n    const peerId = peerTasks.peerId\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toString())\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0)\n    }\n\n    return {\n      peerId, tasks, pendingSize\n    }\n  }\n\n  /**\n   * @private\n   * @returns {PeerTasks|undefined}\n   */\n  _head () {\n    // Shortcut\n    if (this._byPeer.size === 0) {\n      return undefined\n    }\n\n    // eslint-disable-next-line no-unreachable-loop\n    for (const [, v] of this._byPeer) {\n      return v\n    }\n\n    return undefined\n  }\n\n  /**\n   * Remove the task with the given topic for the given peer.\n   *\n   * @param {string} topic\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  remove (topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toString())\n    peerTasks && peerTasks.remove(topic)\n  }\n\n  /**\n   * Called when the tasks for the given peer complete.\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  tasksDone (peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toString())\n    if (!peerTasks) {\n      return\n    }\n\n    const i = this._byPeer.indexOf(peerId.toString())\n    for (const task of tasks) {\n      peerTasks.taskDone(task)\n    }\n\n    // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n    this._byPeer.update(i)\n  }\n}\n\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor (peerId, taskMerger) {\n    this.peerId = peerId\n    this._taskMerger = taskMerger\n    this._activeTotalSize = 0\n    this._pending = new PendingTasks()\n    this._active = new Set()\n  }\n\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (tasks) {\n    for (const t of tasks) {\n      this._pushTask(t)\n    }\n  }\n\n  /**\n   * @private\n   * @param {Task} task\n   * @returns {void}\n   */\n\n  _pushTask (task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return\n    }\n\n    // If there is already a non-active (pending) task with this topic\n    const existingTask = this._pending.get(task.topic)\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority)\n      }\n\n      // Merge the information from the new task into the existing task\n      this._taskMerger.merge(task, existingTask)\n\n      // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n      return\n    }\n\n    // Push the new task onto the queue\n    this._pending.add(task)\n  }\n\n  /**\n   * Indicates whether the new task adds any more information over tasks that are\n   * already in the active task queue\n   *\n   * @private\n   * @param {Task} task\n   * @returns {boolean}\n   */\n  _taskHasMoreInfoThanActiveTasks (task) {\n    const tasksWithTopic = []\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask)\n      }\n    }\n\n    // No tasks with that topic, so the new task adds information\n    if (tasksWithTopic.length === 0) {\n      return true\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic)\n  }\n\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   *\n   * @param {number} targetMinBytes\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    let size = 0\n    const tasks = []\n\n    // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n    const pendingTasks = this._pending.tasks()\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i]\n      tasks.push(task)\n      size += task.size\n\n      // Move tasks from pending to active\n      this._pending.delete(task.topic)\n      this._activeTotalSize += task.size\n      this._active.add(task)\n    }\n\n    return {\n      tasks, pendingSize: this._pending.totalSize\n    }\n  }\n\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   *\n   * @param {Task} task\n   * @returns {void}\n   */\n  taskDone (task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size\n      this._active.delete(task)\n    }\n  }\n\n  /**\n   * Remove pending tasks with the given topic\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n  remove (topic) {\n    this._pending.delete(topic)\n  }\n\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   *\n   * @returns {boolean}\n   */\n  isIdle () {\n    return this._pending.length === 0 && this._active.size === 0\n  }\n\n  /**\n   * Compare PeerTasks\n   *\n   * @template Key\n   * @param {[Key, PeerTasks]} a\n   * @param {[Key, PeerTasks]} b\n   * @returns {number}\n   */\n  static compare (a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1\n    }\n    if (b[1]._pending.length === 0) {\n      return -1\n    }\n\n    // If the amount of active work is the same\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length\n    }\n\n    // Choose the peer with the least amount of active work (\"keep peers busy\")\n    return a[1]._activeTotalSize - b[1]._activeTotalSize\n  }\n}\n\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n  constructor () {\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare)\n  }\n\n  get length () {\n    return this._tasks.size\n  }\n\n  /**\n   * Sum of the size of all pending tasks\n   *\n   * @type {number}\n   **/\n  get totalSize () {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0)\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {Task|void}\n   */\n  get (topic) {\n    return (this._tasks.get(topic) || {}).task\n  }\n\n  /**\n   * @param {Task} task\n   */\n  add (task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    })\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {void}\n   */\n  delete (topic) {\n    this._tasks.delete(topic)\n  }\n\n  // All pending tasks, in priority order\n  tasks () {\n    return [...this._tasks.values()].map(i => i.task)\n  }\n\n  /**\n   * Update the priority of the task with the given topic, and update the order\n   *\n   * @param {string} topic\n   * @param {number} priority\n   * @returns {void}\n   **/\n  updatePriority (topic, priority) {\n    const obj = this._tasks.get(topic)\n    if (!obj) {\n      return\n    }\n\n    const i = this._tasks.indexOf(topic)\n    obj.task.priority = priority\n    this._tasks.update(i)\n  }\n\n  /**\n   * Sort by priority desc then FIFO\n   *\n   * @param {[string, PendingTask]} a\n   * @param {[string, PendingTask]} b\n   * @returns {number}\n   * @private\n   */\n  _compare (a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created\n    }\n    // Priority high -> low\n    return b[1].task.priority - a[1].task.priority\n  }\n}\n","/**\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMergerAPI\n */\n\n/** @type {TaskMergerAPI} */\nexport const TaskMerger = {\n  /**\n   * Indicates whether the given task has newer information than the active\n   * tasks with the same topic.\n   *\n   * @param {Task} task\n   * @param {Task[]} tasksWithTopic\n   * @returns {boolean}\n   */\n  hasNewInfo (task, tasksWithTopic) {\n    let haveBlock = false\n    let isWantBlock = false\n    for (const existing of tasksWithTopic) {\n      if (existing.data.haveBlock) {\n        haveBlock = true\n      }\n\n      if (existing.data.isWantBlock) {\n        isWantBlock = true\n      }\n    }\n\n    // If there is no active want-block and the new task is a want-block,\n    // the new task is better\n    if (!isWantBlock && task.data.isWantBlock) {\n      return true\n    }\n\n    // If we didn't have the block, and the new task indicates that we now\n    // do have the block, then we must also have size information for the\n    // block, so the new task has new information.\n    if (!haveBlock && task.data.haveBlock) {\n      return true\n    }\n\n    return false\n  },\n\n  /**\n   * Merge the information from the given task into the existing task (with the\n   * same topic)\n   *\n   * @param {Task} newTask\n   * @param {Task} existingTask\n   */\n  merge (newTask, existingTask) {\n    // The merge function ignores the topic and priority as these don't change.\n    //\n    // We may receive new information about a want before the want has been\n    // popped from the queue in the following scenarios:\n    //\n    // - Replace want type:\n    //   1. Client sends want-have CID1\n    //   2. Client sends want-block CID1\n    //   In this case we should replace want-have with want-block, including\n    //   updating the task size to be the block size.\n    //\n    // - Replace DONT_HAVE with want:\n    //   1. Client sends want-have CID1 or want-block CID1\n    //   2. Local node doesn't have block for CID1\n    //   3. Local node receives block for CID1 from peer\n    //   In this case we should replace DONT_HAVE with the want, including\n    //   updating the task size and block size.\n    const taskData = newTask.data\n    const existingData = existingTask.data\n\n    // If we didn't have block size information (because we didn't have the\n    // block) and we receive the block from a peer, update the task with the\n    // new block size\n    if (!existingData.haveBlock && taskData.haveBlock) {\n      existingData.haveBlock = taskData.haveBlock\n      existingData.blockSize = taskData.blockSize\n    }\n\n    // If replacing a want-have with a want-block\n    if (!existingData.isWantBlock && taskData.isWantBlock) {\n      // Change the type from want-have to want-block\n      existingData.isWantBlock = true\n      // If the want-have was a DONT_HAVE, or the want-block has a size\n      if (!existingData.haveBlock || taskData.haveBlock) {\n        // Update the entry size\n        existingData.haveBlock = taskData.haveBlock\n        existingTask.size = newTask.size\n      }\n    }\n\n    // If the task is a want-block, make sure the entry size is equal\n    // to the block size (because we will send the whole block)\n    if (existingData.isWantBlock && existingData.haveBlock) {\n      existingTask.size = existingData.blockSize\n    }\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport { Ledger } from './ledger.js'\nimport { RequestQueue } from './req-queue.js'\nimport { TaskMerger } from './task-merger.js'\nimport { logger } from '../utils/index.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\n\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor (peerId, blockstore, network, stats, libp2p, opts = {}) {\n    this._log = logger(peerId, 'engine')\n    this.blockstore = blockstore\n    this.network = network\n    this._stats = stats\n    this._opts = this._processOpts(opts)\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    })\n    this._running = false\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger)\n  }\n\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts (opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    }\n  }\n\n  _scheduleProcessTasks () {\n    setTimeout(() => {\n      this._processTasks()\n    })\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks () {\n    if (!this._running) {\n      return\n    }\n\n    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)\n\n    if (tasks.length === 0) {\n      return\n    }\n\n    // Create a new message\n    const msg = new Message(false)\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize)\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = []\n    const blockTasks = new Map()\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic)\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid)\n          blockTasks.set(task.topic, task.data)\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid)\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid)\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids)\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic)\n      const blk = blocks.get(topic)\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk)\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid)\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks()\n\n      return\n    }\n\n    try {\n      // Send the message\n      peerId && await this.network.sendMessage(peerId, msg)\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block)\n      }\n    } catch (err) {\n      this._log.error(err)\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n  wantlistForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    return ledger ? ledger.wantlist.sortedEntries() : new Map()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n\n    const ledger = this.ledgerMap.get(peerIdStr)\n\n    if (!ledger) {\n      return null\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers () {\n    return Array.from(this.ledgerMap.values()).map((l) => l.partner)\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks (blocks) {\n    if (!blocks.length) {\n      return\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid)\n\n        if (!want) {\n          continue\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }])\n      }\n    }\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived (peerId, msg) {\n    const ledger = this._findOrCreate(peerId)\n\n    if (msg.empty) {\n      return\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist()\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger)\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks()\n      return\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = []\n    /** @type {BitswapMessageEntry[]} */\n    const wants = []\n    msg.wantlist.forEach((entry) => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid)\n        cancels.push(entry.cid)\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType)\n        wants.push(entry)\n      }\n    })\n\n    this._cancelWants(peerId, cancels)\n    await this._addWants(peerId, wants)\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants (peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants (peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))\n\n    const tasks = []\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc)\n      const blockSize = blockSizes.get(id)\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          })\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        })\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks)\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock (wantType, blockSize) {\n    return wantType === WantType.Block ||\n      blockSize <= this._opts.maxSizeReplaceHasWithBlock\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes (cids) {\n    const blocks = await this._getBlocks(cids)\n    return new Map([...blocks].map(([k, v]) => [k, v.length]))\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks (cids) {\n    const res = new Map()\n    await Promise.all(cids.map(async (cid) => {\n      try {\n        const block = await this.blockstore.get(cid)\n        res.set(cid.toString(base58btc), block)\n      } catch (/** @type {any} */ e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e)\n        }\n      }\n    }))\n    return res\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting (blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length)\n      ledger.receivedBytes(block.length)\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent (peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId)\n    ledger.sentBytes(block.length)\n    ledger.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv\n  }\n\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n  peerDisconnected (peerId) {\n    this.ledgerMap.delete(peerId.toString())\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    if (ledger) {\n      return ledger\n    }\n\n    const l = new Ledger(peerId)\n\n    this.ledgerMap.set(peerIdStr, l)\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1)\n    }\n\n    return l\n  }\n\n  start () {\n    this._running = true\n  }\n\n  stop () {\n    this._running = false\n  }\n}\n","import { EventEmitter } from 'events'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n","import { EventEmitter } from 'events'\nimport MovingAverage from '@vascosantos/moving-average'\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nexport class Stat extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    /** @type {Op[]} */\n    this._queue = []\n    /** @type {Record<string, bigint>} */\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    /** @type {Record<string, number>} */\n    this._frequencyAccumulators = {}\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = BigInt(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  /**\n   * @private\n   */\n  _update () {\n    this._timeout = null\n\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        op && this._applyOp(op)\n      }\n\n      last && this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach((key) => {\n        this._updateFrequencyFor(key, timeDiff, latestTime)\n      })\n    }\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  /**\n   * @private\n   * @param {Op} op\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`)\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0)\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n","import { EventEmitter } from 'events'\nimport { Stat } from './stat.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @typedef {[number, number, number]} AverageIntervals\n */\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals: /** @type {AverageIntervals} */ ([\n    60 * 1000, // 1 minute\n    5 * 60 * 1000, // 5 minutes\n    15 * 60 * 1000 // 15 minutes\n  ])\n}\n\nexport class Stats extends EventEmitter {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {string[]} [initialCounters]\n   * @param {object} _options\n   * @param {boolean} _options.enabled\n   * @param {number} _options.computeThrottleTimeout\n   * @param {number} _options.computeThrottleMaxQueueSize\n   */\n  constructor (libp2p, initialCounters = [], _options = defaultOptions) {\n    super()\n\n    const options = Object.assign({}, defaultOptions, _options)\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout')\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize')\n    }\n\n    this._initialCounters = initialCounters\n    this._options = options\n    this._enabled = this._options.enabled\n\n    this._global = new Stat(initialCounters, options)\n    this._global.on('update', (stats) => this.emit('update', stats))\n\n    /** @type {Map<string, Stat>} */\n    this._peers = trackedMap({\n      name: 'ipfs_bitswap_stats_peers',\n      metrics: libp2p.metrics\n    })\n  }\n\n  enable () {\n    this._enabled = true\n    this._options.enabled = true\n    this._global.enable()\n  }\n\n  disable () {\n    this._enabled = false\n    this._options.enabled = false\n    this._global.disable()\n  }\n\n  stop () {\n    this._enabled = false\n    this._global.stop()\n    for (const peerStat of this._peers) {\n      peerStat[1].stop()\n    }\n  }\n\n  get snapshot () {\n    return this._global.snapshot\n  }\n\n  get movingAverages () {\n    return this._global.movingAverages\n  }\n\n  /**\n   * @param {PeerId|string} peerId\n   * @returns {Stat|undefined}\n   */\n  forPeer (peerId) {\n    const peerIdStr = (typeof peerId !== 'string' && peerId.toString)\n      ? peerId.toString()\n      : `${peerId}`\n\n    return this._peers.get(peerIdStr)\n  }\n\n  /**\n   *\n   * @param {string|null} peer\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc)\n\n      if (peer) {\n        let peerStats = this._peers.get(peer)\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options)\n          this._peers.set(peer, peerStats)\n        }\n\n        peerStats.push(counter, inc)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peer\n   */\n  disconnected (peer) {\n    const peerId = peer.toString()\n    const peerStats = this._peers.get(peerId)\n    if (peerStats) {\n      peerStats.stop()\n      this._peers.delete(peerId)\n    }\n  }\n}\n","import { WantManager } from './want-manager/index.js'\nimport { Network } from './network.js'\nimport { DecisionEngine } from './decision-engine/index.js'\nimport { Notifications } from './notifications.js'\nimport { logger } from './utils/index.js'\nimport { Stats } from './stats/index.js'\nimport { anySignal } from 'any-signal'\nimport { BaseBlockstore } from 'blockstore-core/base'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n * @typedef {import('./message').BitswapMessage} BitswapMessage\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n */\n\nconst defaultOptions = {\n  statsEnabled: false,\n  statsComputeThrottleTimeout: 1000,\n  statsComputeThrottleMaxQueueSize: 1000\n}\nconst statsKeys = [\n  'blocksReceived',\n  'dataReceived',\n  'dupBlksReceived',\n  'dupDataReceived',\n  'blocksSent',\n  'dataSent',\n  'providesBufferLength',\n  'wantListLength',\n  'peerCount'\n]\n\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n *\n * @implements {IPFSBitswap}\n */\nexport class Bitswap extends BaseBlockstore {\n  /**\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {Blockstore} blockstore\n   * @param {object} [options]\n   * @param {boolean} [options.statsEnabled=false]\n   * @param {number} [options.statsComputeThrottleTimeout=1000]\n   * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n   * @param {number} [options.maxInboundStreams=32]\n   * @param {number} [options.maxOutboundStreams=32]\n   * @param {number} [options.incomingStreamTimeout=30000]\n   * @param {MultihashHasherLoader} [options.hashLoader]\n   */\n  constructor (libp2p, blockstore, options = {}) {\n    super()\n\n    this._libp2p = libp2p\n    this._log = logger(this.peerId)\n\n    this._options = Object.assign({}, defaultOptions, options)\n\n    // stats\n    this._stats = new Stats(libp2p, statsKeys, {\n      enabled: this._options.statsEnabled,\n      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,\n      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize\n    })\n\n    // the network delivers messages\n    this.network = new Network(libp2p, this, this._stats, {\n      hashLoader: options.hashLoader,\n      maxInboundStreams: options.maxInboundStreams,\n      maxOutboundStreams: options.maxOutboundStreams,\n      incomingStreamTimeout: options.incomingStreamTimeout\n    })\n\n    // local database\n    this.blockstore = blockstore\n\n    this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this._stats, libp2p)\n\n    // handle message sending\n    this.wm = new WantManager(this.peerId, this.network, this._stats, libp2p)\n\n    this.notifications = new Notifications(this.peerId)\n\n    this.started = false\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  /**\n   * @type {PeerId}\n   */\n  get peerId () {\n    return this._libp2p.peerId\n  }\n\n  /**\n   * handle messages received through the network\n   *\n   * @param {PeerId} peerId\n   * @param {BitswapMessage} incoming\n   */\n  async _receiveMessage (peerId, incoming) {\n    try {\n      // Note: this allows the engine to respond to any wants in the message.\n      // Processing of the blocks in the message happens below, after the\n      // blocks have been added to the blockstore.\n      await this.engine.messageReceived(peerId, incoming)\n    } catch (err) {\n      // Log instead of throwing an error so as to process as much as\n      // possible of the message. Currently `messageReceived` does not\n      // throw any errors, but this could change in the future.\n      this._log('failed to receive message', incoming)\n    }\n\n    if (incoming.blocks.size === 0) {\n      return\n    }\n\n    /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */\n    const received = []\n\n    for (const [cidStr, data] of incoming.blocks.entries()) {\n      const cid = CID.parse(cidStr)\n\n      received.push({\n        wasWanted: this.wm.wantlist.contains(cid),\n        cid,\n        data\n      })\n    }\n\n    // quickly send out cancels, reduces chances of duplicate block receives\n    this.wm.cancelWants(\n      received\n        .filter(({ wasWanted }) => wasWanted)\n        .map(({ cid }) => cid)\n    )\n\n    await Promise.all(\n      received.map(\n        ({ cid, wasWanted, data }) => this._handleReceivedBlock(peerId, cid, data, wasWanted)\n      )\n    )\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   * @param {boolean} wasWanted\n   */\n  async _handleReceivedBlock (peerId, cid, data, wasWanted) {\n    this._log('received block')\n\n    const has = await this.blockstore.has(cid)\n\n    this._updateReceiveCounters(peerId.toString(), cid, data, has)\n\n    if (!wasWanted) {\n      return\n    }\n\n    await this.put(cid, data)\n  }\n\n  /**\n   * @private\n   * @param {string} peerIdStr\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   * @param {boolean} exists\n   */\n  _updateReceiveCounters (peerIdStr, cid, data, exists) {\n    this._stats.push(peerIdStr, 'blocksReceived', 1)\n    this._stats.push(peerIdStr, 'dataReceived', data.length)\n\n    if (exists) {\n      this._stats.push(peerIdStr, 'dupBlksReceived', 1)\n      this._stats.push(peerIdStr, 'dupDataReceived', data.length)\n    }\n  }\n\n  /**\n   * handle errors on the receiving channel\n   *\n   * @param {Error} err\n   */\n  _receiveError (err) {\n    this._log.error('ReceiveError: %s', err.message)\n  }\n\n  /**\n   * handle new peers\n   *\n   * @param {PeerId} peerId\n   */\n  _onPeerConnected (peerId) {\n    this.wm.connected(peerId)\n  }\n\n  /**\n   * handle peers being disconnected\n   *\n   * @param {PeerId} peerId\n   */\n  _onPeerDisconnected (peerId) {\n    this.wm.disconnected(peerId)\n    this.engine.peerDisconnected(peerId)\n    this._stats.disconnected(peerId)\n  }\n\n  enableStats () {\n    this._stats.enable()\n  }\n\n  disableStats () {\n    this._stats.disable()\n  }\n\n  /**\n   * Return the current wantlist for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   * @param {any} [_options]\n   */\n  wantlistForPeer (peerId, _options) {\n    return this.engine.wantlistForPeer(peerId)\n  }\n\n  /**\n   * Return ledger information for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    return this.engine.ledgerForPeer(peerId)\n  }\n\n  /**\n   * Fetch a given block by cid. If the block is in the local\n   * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async get (cid, options = {}) {\n    /**\n     * @param {CID} cid\n     * @param {object} options\n     * @param {AbortSignal} options.signal\n     */\n    const fetchFromNetwork = (cid, options) => {\n      // add it to the want list - n.b. later we will abort the AbortSignal\n      // so no need to remove the blocks from the wantlist after we have it\n      this.wm.wantBlocks([cid], options)\n\n      return this.notifications.wantBlock(cid, options)\n    }\n\n    let promptedNetwork = false\n\n    /**\n     *\n     * @param {CID} cid\n     * @param {object} options\n     * @param {AbortSignal} options.signal\n     */\n    const loadOrFetchFromNetwork = async (cid, options) => {\n      try {\n        // have to await here as we want to handle ERR_NOT_FOUND\n        const block = await this.blockstore.get(cid, options)\n\n        return block\n      } catch (/** @type {any} */ err) {\n        if (err.code !== 'ERR_NOT_FOUND') {\n          throw err\n        }\n\n        if (!promptedNetwork) {\n          promptedNetwork = true\n\n          this.network.findAndConnect(cid, options)\n            .catch((err) => this._log.error(err))\n        }\n\n        // we don't have the block locally so fetch it from the network\n        return fetchFromNetwork(cid, options)\n      }\n    }\n\n    // depending on implementation it's possible for blocks to come in while\n    // we do the async operations to get them from the blockstore leading to\n    // a race condition, so register for incoming block notifications as well\n    // as trying to get it from the datastore\n    const controller = new AbortController()\n    const signal = options.signal\n      ? anySignal([options.signal, controller.signal])\n      : controller.signal\n\n    try {\n      const block = await Promise.race([\n        this.notifications.wantBlock(cid, {\n          signal\n        }),\n        loadOrFetchFromNetwork(cid, {\n          signal\n        })\n      ])\n\n      return block\n    } finally {\n      // since we have the block we can now remove our listener\n      controller.abort()\n    }\n  }\n\n  /**\n   * Fetch a a list of blocks by cid. If the blocks are in the local\n   * blockstore they are returned, otherwise the blocks are added to the wantlist and returned once another node sends them to us.\n   *\n   * @param {AsyncIterable<CID>|Iterable<CID>} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async * getMany (cids, options = {}) {\n    for await (const cid of cids) {\n      yield this.get(cid, options)\n    }\n  }\n\n  /**\n   * Removes the given CIDs from the wantlist independent of any ref counts.\n   *\n   * This will cause all outstanding promises for a given block to reject.\n   *\n   * If you want to cancel the want for a block without doing that, pass an\n   * AbortSignal in to `.get` or `.getMany` and abort it.\n   *\n   * @param {CID[]|CID} cids\n   */\n  unwant (cids) {\n    const cidsArray = Array.isArray(cids) ? cids : [cids]\n\n    this.wm.unwantBlocks(cidsArray)\n    cidsArray.forEach((cid) => this.notifications.unwantBlock(cid))\n  }\n\n  /**\n   * Removes the given keys from the want list. This may cause pending promises\n   * for blocks to never resolve.  If you wish these promises to abort instead\n   * call `unwant(cids)` instead.\n   *\n   * @param {CID[]|CID} cids\n   */\n  cancelWants (cids) {\n    this.wm.cancelWants(Array.isArray(cids) ? cids : [cids])\n  }\n\n  /**\n   * Put the given block to the underlying blockstore and\n   * send it to nodes that have it in their wantlist.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {any} [_options]\n   */\n  async put (cid, block, _options) {\n    await this.blockstore.put(cid, block)\n    this._sendHaveBlockNotifications(cid, block)\n  }\n\n  /**\n   * Put the given blocks to the underlying blockstore and\n   * send it to nodes that have it them their wantlist.\n   *\n   * @param {Iterable<Pair> | AsyncIterable<Pair>} source\n   * @param {Options} [options]\n   */\n  async * putMany (source, options) {\n    for await (const { key, value } of this.blockstore.putMany(source, options)) {\n      this._sendHaveBlockNotifications(key, value)\n\n      yield { key, value }\n    }\n  }\n\n  /**\n   * Sends notifications about the arrival of a block\n   *\n   * @private\n   * @param {CID} cid\n   * @param {Uint8Array} data\n   */\n  _sendHaveBlockNotifications (cid, data) {\n    this.notifications.hasBlock(cid, data)\n    this.engine.receivedBlocks([{ cid, data }])\n    // Note: Don't wait for provide to finish before returning\n    this.network.provide(cid).catch((err) => {\n      this._log.error('Failed to provide: %s', err.message)\n    })\n  }\n\n  /**\n   * Get the current list of wants\n   */\n  getWantlist () {\n    return this.wm.wantlist.entries()\n  }\n\n  /**\n   * Get the current list of partners\n   */\n  peers () {\n    return this.engine.peers()\n  }\n\n  /**\n   * Get stats about the bitswap node\n   */\n  stat () {\n    return this._stats\n  }\n\n  /**\n   * Start the bitswap node\n   */\n  async start () {\n    this.wm.start()\n    await this.network.start()\n    this.engine.start()\n    this.started = true\n  }\n\n  /**\n   * Stop the bitswap node\n   */\n  async stop () {\n    this._stats.stop()\n    this.wm.stop()\n    await this.network.stop()\n    this.engine.stop()\n    this.started = false\n  }\n\n  unwrap () {\n    return this.blockstore\n  }\n\n  /**\n   * @param {CID} cid\n   * @returns {Promise<boolean>}\n   */\n  has (cid) {\n    return this.blockstore.has(cid)\n  }\n}\n","import { Bitswap } from './bitswap.js'\n\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('./types').MultihashHasherLoader} MultihashHasherLoader\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('./message')} BitswapMessage\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n */\n\n/**\n * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n * @param {Blockstore} blockstore\n * @param {object} [options]\n * @param {boolean} [options.statsEnabled=false]\n * @param {number} [options.statsComputeThrottleTimeout=1000]\n * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n * @param {number} [options.maxInboundStreams=32]\n * @param {number} [options.maxOutboundStreams=128]\n * @param {number} [options.incomingStreamTimeout=30000]\n * @param {MultihashHasherLoader} [options.hashLoader]\n * @returns {IPFSBitswap}\n */\nexport const createBitswap = (libp2p, blockstore, options = {}) => {\n  return new Bitswap(libp2p, blockstore, options)\n}\n","import { BaseBlockstore } from 'blockstore-core'\nimport merge from 'it-merge'\nimport { pushable } from 'it-pushable'\nimport filter from 'it-filter'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport class BlockStorage extends BaseBlockstore {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable({ objectMode: true })\n    const getFromChild = pushable({ objectMode: true })\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n","import { createBitswap } from 'ipfs-bitswap'\nimport { createLibp2p } from './libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { BlockStorage } from '../block-storage.js'\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, hashers, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    await libp2p.start()\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await network.bitswap.stop()\n    await network.libp2p.stop()\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').AddrsResult} AddrsResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"addrs\"]}\n   */\n  async function addrs (options = {}) { // eslint-disable-line require-await\n    /** @type {AddrsResult[]} */\n    const peers = []\n    const { libp2p } = await network.use(options)\n\n    await libp2p.peerStore.forEach(peer => {\n      peers.push({\n        id: peer.id,\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    })\n\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  async function connect (multiaddrOrPeerId, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(multiaddrOrPeerId, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createDisconnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.hangUp(addr)\n  }\n\n  return withTimeoutOption(disconnect)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createLocalAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.getMultiaddrs()\n  }\n\n  return withTimeoutOption(localAddrs)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (options.verbose) {\n      const peers = []\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n\n      return peers\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map()\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      }\n\n      peers.set(connection.remotePeer.toString(), peer)\n    }\n\n    return Array.from(peers.values())\n  }\n\n  return withTimeoutOption(peers)\n}\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\nexport class SwarmAPI {\n  /**\n   * @param {object} config\n   * @param {import('../../types').NetworkService} config.network\n   */\n  constructor ({ network }) {\n    this.addrs = createAddrs({ network })\n    this.connect = createConnect({ network })\n    this.disconnect = createDisconnect({ network })\n    this.localAddrs = createLocalAddrs({ network })\n    this.peers = createPeers({ network })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = { success: true, time: 0, text: '' }\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createPing ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const { libp2p } = await network.use()\n    options.count = options.count || 10\n\n    const storedPeer = await libp2p.peerStore.get(peerId)\n    let id = storedPeer && storedPeer.id\n\n    if (!id) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      const remotePeer = await libp2p.peerRouting.findPeer(peerId)\n\n      id = remotePeer && remotePeer.id\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found')\n    }\n\n    yield { ...basePacket, text: `PING ${id.toString()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (/** @type {any} */ err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  }\n\n  return withTimeoutOption(ping)\n}\n","import errCode from 'err-code'\nimport { NotEnabledError } from '../errors.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base36 } from 'multiformats/bases/base36'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-dht').QueryEvent} QueryEvent\n * @typedef {import('./network').Network} Network\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst IPNS_PREFIX = '/ipns/'\n\n/**\n * @param {string} str\n */\nfunction toDHTKey (str) {\n  if (str.startsWith(IPNS_PREFIX)) {\n    str = str.substring(IPNS_PREFIX.length)\n  }\n\n  /** @type {Uint8Array|undefined} */\n  let buf\n\n  if (str[0] === '1' || str[0] === 'Q') {\n    // ed25519 key or hash of rsa key\n    str = `z${str}`\n  }\n\n  if (str[0] === 'z') {\n    buf = base58btc.decode(str)\n  }\n\n  if (str[0] === 'k') {\n    // base36 encoded string\n    buf = base36.decode(str)\n  }\n\n  if (!buf) {\n    throw new Error('Could not parse string')\n  }\n\n  if (buf[0] !== 0x01 && buf[1] !== 0x72) {\n    // prefix key with CIDv1 and libp2p-key codec\n    buf = uint8ArrayConcat([\n      [0x01, 0x72],\n      buf\n    ])\n  }\n\n  if (buf.length !== 40) {\n    throw new Error('Incorrect length ' + buf.length)\n  }\n\n  return uint8ArrayConcat([\n    uint8ArrayFromString(IPNS_PREFIX),\n    buf.subarray(2)\n  ])\n}\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {PeerId} config.peerId\n */\nexport function createDht ({ network, repo, peerId }) {\n  const { get, put, findProvs, findPeer, provide, query } = {\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"get\"]}\n     */\n    async * get (key, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.get(dhtKey, options)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"put\"]}\n     */\n    async * put (key, value, options) {\n      const { libp2p } = await use(network, peerId, options)\n\n      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.put(dhtKey, value, options)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"findProvs\"]}\n     */\n    async * findProvs (cid, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.findProviders(cid, {\n        signal: options.signal\n      })\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"findPeer\"]}\n     */\n    async * findPeer (peerIdToFind, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.findPeer(peerIdToFind, {\n        signal: options.signal\n      })\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"provide\"]}\n     */\n    async * provide (cid, options = { recursive: false }) {\n      const { libp2p } = await use(network, peerId, options)\n\n      // ensure blocks are actually local\n      const hasBlock = await repo.blocks.has(cid)\n\n      if (!hasBlock) {\n        throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND')\n      }\n\n      if (options.recursive) {\n        // TODO: Implement recursive providing\n        throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET')\n      }\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.provide(cid)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API<{}>[\"query\"]}\n     */\n    async * query (peerIdToQuery, options = {}) {\n      const { libp2p } = await use(network, peerId, options)\n      let bytes\n      const asCid = CID.asCID(peerIdToQuery)\n\n      if (asCid != null) {\n        bytes = asCid.multihash.bytes\n      } else {\n        bytes = peerIdFromString(peerIdToQuery.toString()).toBytes()\n      }\n\n      if (libp2p.dht == null) {\n        throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n      }\n\n      yield * libp2p.dht.getClosestPeers(bytes, options)\n    }\n  }\n\n  return {\n    get: withTimeoutOption(get),\n    put: withTimeoutOption(put),\n    findProvs: withTimeoutOption(findProvs),\n    findPeer: withTimeoutOption(findPeer),\n    provide: withTimeoutOption(provide),\n    query: withTimeoutOption(query)\n  }\n}\n\n/**\n * @param {import('../types').NetworkService} network\n * @param {PeerId} peerId\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n * @returns {Promise<Network>}\n */\nconst use = async (network, peerId, options) => {\n  const net = await network.use(options)\n  if (net.libp2p.dht != null) {\n    return net\n  } else {\n    const fn = async function * () {\n      yield {\n        from: peerId,\n        name: 'QUERY_ERROR',\n        type: 3,\n        error: new NotEnabledError('dht not enabled')\n      }\n    }\n\n    return {\n      libp2p: {\n        dht: {\n          // @ts-expect-error incomplete implementation\n          get: fn,\n          // @ts-expect-error incomplete implementation\n          put: fn,\n          // @ts-expect-error incomplete implementation\n          findProviders: fn,\n          // @ts-expect-error incomplete implementation\n          findPeer: fn,\n          // @ts-expect-error incomplete implementation\n          provide: fn,\n          // @ts-expect-error incomplete implementation\n          getClosestPeers: fn\n        }\n      }\n    }\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { NotEnabledError } from '../errors.js'\nimport get from 'dlv'\n\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<CustomEvent<Message>>} EventHandler\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageEventHandler\n */\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-core-types/src/config').Config} [config.config]\n */\nexport function createPubsub ({ network, config }) {\n  const isEnabled = get(config || {}, 'Pubsub.Enabled', true)\n\n  /** @type {Record<string, MessageEventHandler[]>} */\n  const handlers = {}\n  /** @type {EventHandler | undefined} */\n  let onMessage\n\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"subscribe\"]}\n   */\n  async function subscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    libp2p.pubsub.subscribe(topic)\n\n    // listen for 'message' events if we aren't already\n    if (onMessage == null) {\n      onMessage = (evt) => {\n        const msg = evt.detail\n\n        if (handlers[msg.topic]) {\n          handlers[msg.topic].forEach(handler => {\n            if (typeof handler === 'function') {\n              handler(msg)\n              return\n            }\n\n            if (handler != null && handler.handleEvent != null) {\n              handler.handleEvent(msg)\n            }\n          })\n        }\n      }\n\n      libp2p.pubsub.addEventListener('message', onMessage)\n    }\n\n    // store handler for future invocation\n    if (handler != null) {\n      if (handlers[topic] == null) {\n        handlers[topic] = []\n      }\n\n      handlers[topic].push(handler)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    // remove handler from local map\n    if (handler != null && handlers[topic] != null) {\n      handlers[topic] = handlers[topic].filter(h => h !== handler)\n\n      if (handlers[topic].length === 0) {\n        delete handlers[topic]\n      }\n    }\n\n    // remove all handlers\n    if (typeof handler !== 'function') {\n      delete handlers[topic]\n    }\n\n    // no more handlers for this topic, unsubscribe\n    if (handlers[topic] == null) {\n      libp2p.pubsub.unsubscribe(topic)\n    }\n\n    // no more pubsub handlers, remove message listener\n    if (Object.keys(handlers).length === 0) {\n      libp2p.pubsub.removeEventListener('message', onMessage)\n      onMessage = undefined\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const { libp2p } = await network.use(options)\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED')\n    }\n\n    await libp2p.pubsub.publish(topic, data)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    return libp2p.pubsub.getTopics()\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/pubsub').API<{}>[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const { libp2p } = await network.use(options)\n\n    return libp2p.pubsub.getSubscribers(topic)\n  }\n}\n\nconst notEnabled = async () => { // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled')\n}\n","import mergeOpts from 'merge-options'\nimport { isTest } from 'ipfs-utils/src/env.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { initAssets } from 'ipfs-core-config/init-assets'\nimport { AlreadyInitializedError } from '../errors.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { createStart } from './start.js'\n\nimport { createStop } from './stop.js'\nimport { createDns } from './dns.js'\nimport { createIsOnline } from './is-online.js'\nimport { createResolve } from './resolve.js'\nimport { PinAPI } from './pin/index.js'\nimport { IPNSAPI } from './ipns.js'\nimport { NameAPI } from './name/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createLocal } from './refs/local.js'\nimport { BitswapAPI } from './bitswap/index.js'\nimport { BootstrapAPI } from './bootstrap/index.js'\nimport { BlockAPI } from './block/index.js'\nimport { RootAPI } from './root.js'\nimport { createVersion } from './version.js'\nimport { createId } from './id.js'\nimport { createConfig } from './config/index.js'\nimport { DagAPI } from './dag/index.js'\nimport { createPreloader } from '../preload.js'\nimport { createMfsPreloader } from '../mfs-preload.js'\nimport { createFiles } from './files/index.js'\nimport { KeyAPI } from './key/index.js'\nimport { ObjectAPI } from './object/index.js'\nimport { RepoAPI } from './repo/index.js'\nimport { StatsAPI } from './stats/index.js'\nimport { Storage } from './storage.js'\nimport { Network } from './network.js'\nimport { Service } from '../utils/service.js'\nimport { SwarmAPI } from './swarm/index.js'\nimport { createPing } from './ping.js'\nimport { createDht } from './dht.js'\nimport { createPubsub } from './pubsub.js'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport { Multibases } from 'ipfs-core-utils/multibases'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs')\n\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloader(options.preload)\n\n    const dns = createDns()\n    const isOnline = createIsOnline({ network })\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolve({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefs({ repo, codecs, resolve, preload }), {\n      local: createLocal({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    })\n\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    })\n\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDht({ network, repo, peerId })\n    this.pubsub = createPubsub({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createId({ network, peerId })\n    this.version = createVersion({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfig({ repo })\n    this.ping = createPing({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\n/**\n * @param {Options} options\n */\nexport async function create (options = {}) {\n  options = mergeOptions(getDefaultOptions(), options)\n  const initOptions = options.init || {}\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  log('creating repo')\n  const storage = await Storage.start(print, multicodecs, options)\n\n  log('getting repo config')\n  const config = await storage.repo.config.getAll()\n\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options, config }\n  })\n\n  log('starting preload')\n  await ipfs.preload.start()\n\n  log('starting storage')\n  ipfs.ipns.startOffline(storage)\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs)\n\n    log('adding default assets')\n    await initAssets({ addAll: ipfs.addAll, print })\n\n    log('initializing IPNS keyspace')\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT)\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      })\n    } finally {\n      timeoutController.clear()\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node')\n    await ipfs.start()\n  }\n\n  return ipfs\n}\n","import { create as createImport } from './components/index.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\nimport urlSourceImport from 'ipfs-utils/src/files/url-source.js'\n\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn\n * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs\n * @typedef {import('./types').InitOptions} InitOptions\n * @typedef {import('./types').RelayOptions} RelayOptions\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions\n * @typedef {import('./types').Preload} Preload\n * @typedef {import('./types').MfsPreload} MfsPreload\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n */\n\nexport const create = createImport\nexport const globSource = globSourceImport\nexport const urlSource = urlSourceImport\n","import {\n  create as createImport,\n  globSource as globSourceImport,\n  urlSource as urlSourceImport\n} from 'ipfs-core'\nimport {\n  path as pathImport\n} from './path.js'\n\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n */\n\nexport const create = createImport\nexport const globSource = globSourceImport\nexport const urlSource = urlSourceImport\nexport const path = pathImport\n","/*\n  Index\n\n  Index contains the state of a datastore, ie. what data we currently have.\n\n  Index receives a call from a Store when the operations log for the Store\n  was updated, ie. new operations were added. In updateIndex, the Index\n  implements its CRDT logic: add, remove or update items in the data\n  structure. Each new operation received from the operations log is applied\n  in order onto the current state, ie. each new operation changes the data\n  and the state changes.\n\n  Implementing each CRDT as an Index, we can implement both operation-based\n  and state-based CRDTs with the same higher level abstractions.\n\n  To read the current state of the database, Index provides a single public\n  function: `get()`. It is up to the Store to decide what kind of query\n  capabilities it provides to the consumer.\n\n  Usage:\n  ```javascript\n  const Index = new Index(userId)\n  ```\n*/\n\nexport default class Index {\n  /*\n    @param id - unique identifier of this index, eg. a user id or a hash\n  */\n  constructor (id) {\n    this.id = id\n    this._index = []\n  }\n\n  /*\n    Returns the state of the datastore, ie. most up-to-date data\n    @return - current state\n  */\n  get () {\n    return this._index\n  }\n\n  /*\n    Applies operations to the Index and updates the state\n    @param oplog - the source operations log that called updateIndex\n    @param entries - operations that were added to the log\n  */\n  async updateIndex (oplog, entries) {\n    this._index = oplog.values\n  }\n}\n","/**\n * Interface for G-Set CRDT\n *\n * From:\n * \"A comprehensive study of Convergent and Commutative Replicated Data Types\"\n * https://hal.inria.fr/inria-00555588\n */\nclass GSet {\n  constructor (values) {} // eslint-disable-line\n  append (value) {}\n  merge (set) {}\n  get (value) {}\n  has (value) {}\n  get values () {}\n  get length () {}\n}\n\nexport default GSet\n","class LamportClock {\n  constructor (id, time) {\n    this.id = id\n    this.time = time || 0\n  }\n\n  tick () {\n    return new LamportClock(this.id, ++this.time)\n  }\n\n  merge (clock) {\n    this.time = Math.max(this.time, clock.time)\n    return new LamportClock(this.id, this.time)\n  }\n\n  clone () {\n    return new LamportClock(this.id, this.time)\n  }\n\n  static compare (a, b) {\n    // Calculate the \"distance\" based on the clock, ie. lower or greater\n    const dist = a.time - b.time\n\n    // If the sequence number is the same (concurrent events),\n    // and the IDs are different, take the one with a \"lower\" id\n    if (dist === 0 && a.id !== b.id) return a.id < b.id ? -1 : 1\n\n    return dist\n  }\n}\n\nexport default LamportClock\n","import * as Block from 'multiformats/block'\nimport { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport { sha256 as hasher } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\n\nconst mhtype = 'sha2-256'\nconst defaultBase = base58btc\nconst unsupportedCodecError = () => new Error('unsupported codec')\n\nconst cidifyString = (str) => {\n  if (!str) {\n    return str\n  }\n\n  if (Array.isArray(str)) {\n    return str.map(cidifyString)\n  }\n\n  return CID.parse(str)\n}\n\nconst stringifyCid = (cid, options = {}) => {\n  if (!cid || typeof cid === 'string') {\n    return cid\n  }\n\n  if (Array.isArray(cid)) {\n    return cid.map(stringifyCid)\n  }\n\n  const base = options.base || defaultBase\n  return cid.toString(base)\n}\n\nconst codecCodes = {\n  [dagPb.code]: dagPb,\n  [dagCbor.code]: dagCbor\n}\nconst codecMap = {\n  // staying backward compatible\n  // old writeObj function was never raw codec; defaulted to cbor via ipfs.dag\n  raw: dagCbor,\n  'dag-pb': dagPb,\n  'dag-cbor': dagCbor\n}\n\n/**\n * Read value from ipfs dag storage\n *\n * @param {IPFS} ipfs the ipfs instance\n * @param {CID | string} cid the cid of the value to read\n * @param {object} [options={}] the options to use\n * @return {any}\n */\nasync function read (ipfs, cid, options = {}) {\n  cid = cidifyString(stringifyCid(cid))\n\n  const codec = codecCodes[cid.code]\n  if (!codec) throw unsupportedCodecError()\n\n  const bytes = await ipfs.block.get(cid, { timeout: options.timeout })\n  const block = await Block.decode({ bytes, codec, hasher })\n\n  if (block.cid.code === dagPb.code) {\n    return JSON.parse(new TextDecoder().decode(block.value.Data))\n  }\n  if (block.cid.code === dagCbor.code) {\n    const value = block.value\n    const links = options.links || []\n    links.forEach((prop) => {\n      if (value[prop]) {\n        value[prop] = stringifyCid(value[prop], options)\n      }\n    })\n    return value\n  }\n}\n\n/**\n * Write value to ipfs dag storage\n *\n * @param {IPFS} ipfs the ipfs instance\n * @param {string} format the codec to use for encoding the value\n * @param {any} value the value to be written\n * @param {object} [options] - the options to use\n * @return {string}\n */\nasync function write (ipfs, format, value, options = {}) {\n  if (options.format === 'dag-pb') format = options.format\n  const codec = codecMap[format]\n  if (!codec) throw unsupportedCodecError()\n\n  if (codec.code === dagPb.code) {\n    value = typeof value === 'string' ? value : JSON.stringify(value)\n    value = { Data: new TextEncoder().encode(value), Links: [] }\n  }\n  if (codec.code === dagCbor.code) {\n    const links = options.links || []\n    links.forEach((prop) => {\n      if (value[prop]) {\n        value[prop] = cidifyString(value[prop])\n      }\n    })\n  }\n\n  const block = await Block.encode({ value, codec, hasher })\n  await ipfs.block.put(block.bytes, {\n    cid: block.cid.bytes,\n    version: block.cid.version,\n    format,\n    mhtype,\n    pin: options.pin,\n    timeout: options.timeout\n  })\n\n  const cid = codec.code === dagPb.code\n    ? block.cid.toV0()\n    : block.cid\n  return cid.toString(options.base || defaultBase)\n}\n\nexport {\n  read,\n  write\n}\n","function difference (a, b, key) {\n  // Indices for quick lookups\n  const processed = {}\n  const existing = {}\n\n  // Create an index of the first collection\n  const addToIndex = e => (existing[key ? e[key] : e] = true)\n  a.forEach(addToIndex)\n\n  // Reduce to entries that are not in the first collection\n  const reducer = (res, entry) => {\n    const isInFirst = existing[key ? entry[key] : entry] !== undefined\n    const hasBeenProcessed = processed[key ? entry[key] : entry] !== undefined\n    if (!isInFirst && !hasBeenProcessed) {\n      res.push(entry)\n      processed[key ? entry[key] : entry] = true\n    }\n    return res\n  }\n\n  return b.reduce(reducer, [])\n}\n\nexport default difference\n","function findUniques (value, key) {\n  // Create an index of the collection\n  const uniques = {}\n  const get = e => uniques[e]\n  const addToIndex = e => (uniques[key ? e[key] : e] = e)\n  value.forEach(addToIndex)\n  return Object.keys(uniques).map(get)\n}\n\nexport default findUniques\n","const isDefined = (arg) => arg !== undefined && arg !== null\n\nexport default isDefined\n","import Clock from './lamport-clock.js'\nimport { read, write } from 'orbit-db-io'\nimport { isDefined } from './utils/index.js'\nimport stringify from 'json-stringify-deterministic'\n\nconst IpfsNotDefinedError = () => new Error('Ipfs instance not defined')\nconst IPLD_LINKS = ['next', 'refs']\nconst getWriteFormatForVersion = v => v === 0 ? 'dag-pb' : 'dag-cbor'\nconst getWriteFormat = e => Entry.isEntry(e) ? getWriteFormatForVersion(e.v) : getWriteFormatForVersion(e)\n\n/*\n * @description\n * An ipfs-log entry\n */\nclass Entry {\n  /**\n   * Create an Entry\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {string} logId The unique identifier for this log\n   * @param {*} data Data of the entry to be added. Can be any JSON.stringifyable data\n   * @param {Array<string|Entry>} [next=[]] Parent hashes or entries\n   * @param {LamportClock} [clock] The lamport clock\n   * @returns {Promise<Entry>}\n   * @example\n   * const entry = await Entry.create(ipfs, identity, 'hello')\n   * console.log(entry)\n   * // { hash: null, payload: \"hello\", next: [] }\n   */\n  static async create (ipfs, identity, logId, data, next = [], clock, refs = [], pin) {\n    if (!isDefined(ipfs)) throw IpfsNotDefinedError()\n    if (!isDefined(identity)) throw new Error('Identity is required, cannot create entry')\n    if (!isDefined(logId)) throw new Error('Entry requires an id')\n    if (!isDefined(data)) throw new Error('Entry requires data')\n    if (!isDefined(next) || !Array.isArray(next)) throw new Error(\"'next' argument is not an array\")\n\n    // Clean the next objects and convert to hashes\n    const toEntry = (e) => e.hash ? e.hash : e\n    const nexts = next.filter(isDefined).map(toEntry)\n\n    const entry = {\n      hash: null, // \"zd...Foo\", we'll set the hash after persisting the entry\n      id: logId, // For determining a unique chain\n      payload: data, // Can be any JSON.stringifyable data\n      next: nexts, // Array of hashes\n      refs,\n      v: 2, // To tag the version of this data structure\n      clock: clock || new Clock(identity.publicKey)\n    }\n\n    const signature = await identity.provider.sign(identity, Entry.toBuffer(entry))\n\n    entry.key = identity.publicKey\n    entry.identity = identity.toJSON()\n    entry.sig = signature\n    entry.hash = await Entry.toMultihash(ipfs, entry, pin)\n\n    return entry\n  }\n\n  /**\n   * Verifies an entry signature.\n   *\n   * @param {IdentityProvider} identityProvider The identity provider to use\n   * @param {Entry} entry The entry being verified\n   * @return {Promise} A promise that resolves to a boolean value indicating if the signature is valid\n   */\n  static async verify (identityProvider, entry) {\n    if (!identityProvider) throw new Error('Identity-provider is required, cannot verify entry')\n    if (!Entry.isEntry(entry)) throw new Error('Invalid Log entry')\n    if (!entry.key) throw new Error(\"Entry doesn't have a key\")\n    if (!entry.sig) throw new Error(\"Entry doesn't have a signature\")\n\n    const e = Entry.toEntry(entry, { presigned: true })\n    const verifier = entry.v < 1 ? 'v0' : 'v1'\n    return identityProvider.verify(entry.sig, entry.key, Entry.toBuffer(e), verifier)\n  }\n\n  /**\n   * Transforms an entry into a Buffer.\n   * @param {Entry} entry The entry\n   * @return {Buffer} The buffer\n   */\n  static toBuffer (entry) {\n    const stringifiedEntry = entry.v === 0 ? JSON.stringify(entry) : stringify(entry)\n    return Buffer.from(stringifiedEntry)\n  }\n\n  /**\n   * Get the multihash of an Entry.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Entry} entry Entry to get a multihash for\n   * @returns {Promise<string>}\n   * @example\n   * const multihash = await Entry.toMultihash(ipfs, entry)\n   * console.log(multihash)\n   * // \"Qm...Foo\"\n   * @deprecated\n   */\n  static async toMultihash (ipfs, entry, pin = false) {\n    if (!ipfs) throw IpfsNotDefinedError()\n    if (!Entry.isEntry(entry)) throw new Error('Invalid object format, cannot generate entry hash')\n\n    // // Ensure `entry` follows the correct format\n    const e = Entry.toEntry(entry)\n    return write(ipfs, getWriteFormat(e.v), e, { links: IPLD_LINKS, pin })\n  }\n\n  static toEntry (entry, { presigned = false, includeHash = false } = {}) {\n    const e = {\n      hash: includeHash ? entry.hash : null,\n      id: entry.id,\n      payload: entry.payload,\n      next: entry.next\n    }\n\n    const v = entry.v\n    if (v > 1) {\n      e.refs = entry.refs // added in v2\n    }\n    e.v = entry.v\n    e.clock = new Clock(entry.clock.id, entry.clock.time)\n\n    if (presigned) {\n      return e // don't include key/sig information\n    }\n\n    e.key = entry.key\n    if (v > 0) {\n      e.identity = entry.identity // added in v1\n    }\n    e.sig = entry.sig\n    return e\n  }\n\n  /**\n   * Create an Entry from a hash.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string} hash The hash to create an Entry from\n   * @returns {Promise<Entry>}\n   * @example\n   * const entry = await Entry.fromMultihash(ipfs, \"zd...Foo\")\n   * console.log(entry)\n   * // { hash: \"Zd...Foo\", payload: \"hello\", next: [] }\n   */\n  static async fromMultihash (ipfs, hash) {\n    if (!ipfs) throw IpfsNotDefinedError()\n    if (!hash) throw new Error(`Invalid hash: ${hash}`)\n    const e = await read(ipfs, hash, { links: IPLD_LINKS })\n\n    const entry = Entry.toEntry(e)\n    entry.hash = hash\n\n    return entry\n  }\n\n  /**\n   * Check if an object is an Entry.\n   * @param {Entry} obj\n   * @returns {boolean}\n   */\n  static isEntry (obj) {\n    return obj && obj.id !== undefined &&\n      obj.next !== undefined &&\n      obj.payload !== undefined &&\n      obj.v !== undefined &&\n      obj.hash !== undefined &&\n      obj.clock !== undefined &&\n      (obj.refs !== undefined || obj.v < 2) // 'refs' added in v2\n  }\n\n  /**\n   * Compares two entries.\n   * @param {Entry} a\n   * @param {Entry} b\n   * @returns {number} 1 if a is greater, -1 is b is greater\n   */\n  static compare (a, b) {\n    const distance = Clock.compare(a.clock, b.clock)\n    if (distance === 0) return a.clock.id < b.clock.id ? -1 : 1\n    return distance\n  }\n\n  /**\n   * Check if an entry equals another entry.\n   * @param {Entry} a\n   * @param {Entry} b\n   * @returns {boolean}\n   */\n  static isEqual (a, b) {\n    return a.hash === b.hash\n  }\n\n  /**\n   * Check if an entry is a parent to another entry.\n   * @param {Entry} entry1 Entry to check\n   * @param {Entry} entry2 The parent Entry\n   * @returns {boolean}\n   */\n  static isParent (entry1, entry2) {\n    return entry2.next.indexOf(entry1.hash) > -1\n  }\n\n  /**\n   * Find entry's children from an Array of entries.\n   * Returns entry's children as an Array up to the last know child.\n   * @param {Entry} entry Entry for which to find the parents\n   * @param {Array<Entry>} values Entries to search parents from\n   * @returns {Array<Entry>}\n   */\n  static findChildren (entry, values) {\n    let stack = []\n    let parent = values.find((e) => Entry.isParent(entry, e))\n    let prev = entry\n    while (parent) {\n      stack.push(parent)\n      prev = parent\n      parent = values.find((e) => Entry.isParent(prev, e))\n    }\n    stack = stack.sort((a, b) => a.clock.time > b.clock.time)\n    return stack\n  }\n}\n\nexport default Entry\nexport { IPLD_LINKS }\nexport { getWriteFormat }\n","import pMap from 'p-map'\nimport pDoWhilst from 'p-do-whilst'\nimport Entry from './entry.js'\n\nconst { isEntry, fromMultihash } = Entry\nconst hasItems = arr => arr && arr.length > 0\n\nclass EntryIO {\n  // Fetch log graphs in parallel\n  static async fetchParallel (ipfs, hashes, { length, exclude = [], shouldExclude, timeout, concurrency, onProgressCallback }) {\n    const fetchOne = async (hash) => EntryIO.fetchAll(ipfs, hash, { length, exclude, shouldExclude, timeout, onProgressCallback, concurrency })\n    const concatArrays = (arr1, arr2) => arr1.concat(arr2)\n    const flatten = (arr) => arr.reduce(concatArrays, [])\n    const res = await pMap(hashes, fetchOne, { concurrency: Math.max(concurrency || hashes.length, 1) })\n    return flatten(res)\n  }\n\n  /**\n   * Fetch log entries\n   *\n   * @param {IPFS} [ipfs] An IPFS instance\n   * @param {string} [hash] Multihash of the entry to fetch\n   * @param {string} [parent] Parent of the node to be fetched\n   * @param {Object} [all] Entries to skip\n   * @param {Number} [amount=-1] How many entries to fetch\n   * @param {Number} [depth=0] Current depth of the recursion\n   * @param {function(entry)} shouldExclude A function that can be passed to determine whether a specific hash should be excluded, ie. not fetched. The function should return true to indicate exclusion, otherwise return false.\n   * @param {function(entry)} onProgressCallback Called when an entry was fetched\n   * @returns {Promise<Array<Entry>>}\n   */\n  static async fetchAll (ipfs, hashes, { length = -1, exclude = [], shouldExclude, timeout, onProgressCallback, onStartProgressCallback, concurrency = 32, delay = 0 } = {}) {\n    const result = []\n    const cache = {}\n    const loadingCache = {}\n    const loadingQueue = Array.isArray(hashes)\n      ? { 0: hashes.slice() }\n      : { 0: [hashes] }\n    let running = 0 // keep track of how many entries are being fetched at any time\n    let maxClock = 0 // keep track of the latest clock time during load\n    let minClock = 0 // keep track of the minimum clock time during load\n    shouldExclude = shouldExclude || (() => false) // default fn returns false to not exclude any hash\n\n    // Does the loading queue have more to process?\n    const loadingQueueHasMore = () => Object.values(loadingQueue).find(hasItems) !== undefined\n\n    // Add a multihash to the loading queue\n    const addToLoadingQueue = (e, idx) => {\n      if (!loadingCache[e] && !shouldExclude(e)) {\n        if (!loadingQueue[idx]) loadingQueue[idx] = []\n        if (!loadingQueue[idx].includes(e)) {\n          loadingQueue[idx].push(e)\n        }\n        loadingCache[e] = true\n      }\n    }\n\n    // Get the next items to process from the loading queue\n    const getNextFromQueue = (length = 1) => {\n      const getNext = (res, key, idx) => {\n        const nextItems = loadingQueue[key]\n        while (nextItems.length > 0 && res.length < length) {\n          const hash = nextItems.shift()\n          res.push(hash)\n        }\n        if (nextItems.length === 0) {\n          delete loadingQueue[key]\n        }\n        return res\n      }\n      return Object.keys(loadingQueue).reduce(getNext, [])\n    }\n\n    // Add entries that we don't need to fetch to the \"cache\"\n    const addToExcludeCache = e => { cache[e.hash || e] = true }\n\n    // Fetch one entry and add it to the results\n    const fetchEntry = async (hash) => {\n      if (!hash || cache[hash] || shouldExclude(hash)) {\n        return\n      }\n\n      /* eslint-disable no-async-promise-executor */\n      return new Promise(async (resolve, reject) => {\n        // Resolve the promise after a timeout (if given) in order to\n        // not get stuck loading a block that is unreachable\n        const timer = timeout && timeout > 0\n          ? setTimeout(() => {\n            console.warn(`Warning: Couldn't fetch entry '${hash}', request timed out (${timeout}ms)`)\n            resolve()\n          }, timeout)\n          : null\n\n        const addToResults = (entry) => {\n          if (isEntry(entry) && !cache[entry.hash] && !shouldExclude(entry.hash)) {\n            const ts = entry.clock.time\n\n            // Update min/max clocks\n            maxClock = Math.max(maxClock, ts)\n            minClock = result.length > 0\n              ? Math.min(result[result.length - 1].clock.time, minClock)\n              : maxClock\n\n            const isLater = (result.length >= length && ts >= minClock)\n            const calculateIndex = (idx) => maxClock - ts + ((idx + 1) * idx)\n\n            // Add the entry to the results if\n            // 1) we're fetching all entries\n            // 2) results is not filled yet\n            // the clock of the entry is later than current known minimum clock time\n            if ((length < 0 || result.length < length || isLater) && !shouldExclude(entry.hash) && !cache[entry.hash]) {\n              result.push(entry)\n              cache[entry.hash] = true\n\n              if (onProgressCallback) {\n                onProgressCallback(entry)\n              }\n            }\n\n            if (length < 0) {\n              // If we're fetching all entries (length === -1), adds nexts and refs to the queue\n              entry.next.forEach(addToLoadingQueue)\n              if (entry.refs) entry.refs.forEach(addToLoadingQueue)\n            } else {\n              // If we're fetching entries up to certain length,\n              // fetch the next if result is filled up, to make sure we \"check\"\n              // the next entry if its clock is later than what we have in the result\n              if (result.length < length || ts > minClock || (ts === minClock && !cache[entry.hash] && !shouldExclude(entry.hash))) {\n                entry.next.forEach(e => addToLoadingQueue(e, calculateIndex(0)))\n              }\n              if (entry.refs && (result.length + entry.refs.length <= length)) {\n                entry.refs.forEach((e, i) => addToLoadingQueue(e, calculateIndex(i)))\n              }\n            }\n          }\n        }\n\n        if (onStartProgressCallback) {\n          onStartProgressCallback(hash, null, 0, result.length)\n        }\n\n        try {\n          // Load the entry\n          const entry = await fromMultihash(ipfs, hash)\n          // Simulate network latency (for debugging purposes)\n          if (delay > 0) {\n            const sleep = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms))\n            await sleep(delay)\n          }\n          // Add it to the results\n          addToResults(entry)\n          resolve()\n        } catch (e) {\n          reject(e)\n        } finally {\n          clearTimeout(timer)\n        }\n      })\n    }\n\n    // One loop of processing the loading queue\n    const _processQueue = async () => {\n      if (running < concurrency) {\n        const nexts = getNextFromQueue(concurrency)\n        running += nexts.length\n        await pMap(nexts, fetchEntry, { concurrency })\n        running -= nexts.length\n      }\n    }\n\n    // Add entries to exclude from processing to the cache before we start\n    exclude.forEach(addToExcludeCache)\n\n    // Fetch entries\n    await pDoWhilst(_processQueue, loadingQueueHasMore)\n\n    return result\n  }\n}\n\nexport default EntryIO\n","import Clock from './lamport-clock.js'\n\n/**\n * Sort two entries as Last-Write-Wins (LWW).\n *\n * Last Write Wins is a conflict resolution strategy for sorting elements\n * where the element with a greater clock (latest) is chosen as the winner.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\nfunction LastWriteWins (a, b) {\n  // Ultimate conflict resolution (take the first/left arg)\n  const First = (a, b) => a\n  // Sort two entries by their clock id, if the same always take the first\n  const sortById = (a, b) => SortByClockId(a, b, First)\n  // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n  const sortByEntryClocks = (a, b) => SortByClocks(a, b, sortById)\n  // Sort entries by clock time as the primary sort criteria\n  return sortByEntryClocks(a, b)\n}\n\n/**\n * Sort two entries by their hash.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\nfunction SortByEntryHash (a, b) {\n  // Ultimate conflict resolution (compare hashes)\n  const compareHash = (a, b) => a.hash < b.hash ? -1 : 1\n  // Sort two entries by their clock id, if the same then compare hashes\n  const sortById = (a, b) => SortByClockId(a, b, compareHash)\n  // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n  const sortByEntryClocks = (a, b) => SortByClocks(a, b, sortById)\n  // Sort entries by clock time as the primary sort criteria\n  return sortByEntryClocks(a, b)\n}\n\n/**\n * Sort two entries by their clock time.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if entries are concurrent (happened at the same time). The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\nfunction SortByClocks (a, b, resolveConflict) {\n  // Compare the clocks\n  const diff = Clock.compare(a.clock, b.clock)\n  // If the clocks are concurrent, use the provided\n  // conflict resolution function to determine which comes first\n  return diff === 0 ? resolveConflict(a, b) : diff\n}\n\n/**\n * Sort two entries by their clock id.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if the clocks ids are the same. The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\nfunction SortByClockId (a, b, resolveConflict) {\n  // Sort by ID if clocks are concurrent,\n  // take the entry with a \"greater\" clock id\n  return a.clock.id === b.clock.id\n    ? resolveConflict(a, b)\n    : a.clock.id < b.clock.id ? -1 : 1\n}\n\n/**\n * A wrapper function to throw an error if the results of a passed function return zero\n * @param {function(a, b)} [tiebreaker] The tiebreaker function to validate.\n * @returns {function(a, b)} 1 if a is greater, -1 if b is greater\n * @throws {Error} if func ever returns 0\n */\nfunction NoZeroes (func) {\n  const msg = `Your log's tiebreaker function, ${func.name}, has returned zero and therefore cannot be`\n\n  const comparator = (a, b) => {\n    // Validate by calling the function\n    const result = func(a, b)\n    if (result === 0) { throw Error(msg) }\n    return result\n  }\n\n  return comparator\n}\n\nexport default {\n  SortByClocks,\n  SortByClockId,\n  LastWriteWins,\n  SortByEntryHash,\n  NoZeroes\n}\n","const IPFSNotDefinedError = () => new Error('IPFS instance not defined')\nconst LogNotDefinedError = () => new Error('Log instance not defined')\nconst NotALogError = () => new Error('Given argument is not an instance of Log')\nconst CannotJoinWithDifferentId = () => new Error('Can\\'t join logs with different IDs')\nconst LtOrLteMustBeStringOrArray = () => new Error('lt or lte must be a string or array of Entries')\n\nexport {\n  IPFSNotDefinedError,\n  LogNotDefinedError,\n  NotALogError,\n  CannotJoinWithDifferentId,\n  LtOrLteMustBeStringOrArray\n}\n","import Entry from './entry.js'\nimport EntryIO from './entry-io.js'\nimport Sorting from './log-sorting.js'\nimport { IPFSNotDefinedError, LogNotDefinedError, NotALogError } from './log-errors.js'\nimport { isDefined, findUniques, difference } from './utils/index.js'\nimport { read, write } from 'orbit-db-io'\n\nconst { LastWriteWins, NoZeroes } = Sorting\nconst { fetchAll, fetchParallel } = EntryIO\nconst { compare, isEntry } = Entry\nconst IPLD_LINKS = ['heads']\nconst last = (arr, n) => arr.slice(arr.length - Math.min(arr.length, n), arr.length)\n\nclass LogIO {\n  //\n  /**\n   * Get the multihash of a Log.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Log} log Log to get a multihash for\n   * @returns {Promise<string>}\n   * @deprecated\n   */\n  static async toMultihash (ipfs, log, { format } = {}) {\n    if (!isDefined(ipfs)) throw IPFSNotDefinedError()\n    if (!isDefined(log)) throw LogNotDefinedError()\n    if (!isDefined(format)) format = 'dag-cbor'\n    if (log.values.length < 1) throw new Error('Can\\'t serialize an empty log')\n\n    return write(ipfs, format, log.toJSON(), { links: IPLD_LINKS })\n  }\n\n  /**\n   * Create a log from a hashes.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string} hash The hash of the log\n   * @param {Object} options\n   * @param {number} options.length How many items to include in the log\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   */\n  static async fromMultihash (ipfs, hash,\n    { length = -1, exclude = [], shouldExclude, timeout, concurrency, sortFn, onProgressCallback }) {\n    if (!isDefined(ipfs)) throw IPFSNotDefinedError()\n    if (!isDefined(hash)) throw new Error(`Invalid hash: ${hash}`)\n\n    const logData = await read(ipfs, hash, { links: IPLD_LINKS })\n\n    if (!logData.heads || !logData.id) throw NotALogError()\n\n    // Use user provided sorting function or the default one\n    sortFn = sortFn || NoZeroes(LastWriteWins)\n    const isHead = e => logData.heads.includes(e.hash)\n\n    const all = await fetchAll(ipfs, logData.heads,\n      { length, exclude, shouldExclude, timeout, concurrency, onProgressCallback })\n\n    const logId = logData.id\n    const entries = length > -1 ? last(all.sort(sortFn), length) : all\n    const heads = entries.filter(isHead)\n    return { logId, entries, heads }\n  }\n\n  /**\n   * Create a log from an entry hash.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string} hash The hash of the entry\n   * @param {Object} options\n   * @param {number} options.length How many items to include in the log\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   */\n  static async fromEntryHash (ipfs, hash,\n    { length = -1, exclude = [], shouldExclude, timeout, concurrency, sortFn, onProgressCallback }) {\n    if (!isDefined(ipfs)) throw IPFSNotDefinedError()\n    if (!isDefined(hash)) throw new Error(\"'hash' must be defined\")\n    // Convert input hash(s) to an array\n    const hashes = Array.isArray(hash) ? hash : [hash]\n    // Fetch given length, return size at least the given input entries\n    length = length > -1 ? Math.max(length, 1) : length\n    const all = await fetchParallel(ipfs, hashes,\n      { length, exclude, shouldExclude, timeout, concurrency, onProgressCallback })\n    // Cap the result at the right size by taking the last n entries,\n    // or if given length is -1, then take all\n    sortFn = sortFn || NoZeroes(LastWriteWins)\n    const entries = length > -1 ? last(all.sort(sortFn), length) : all\n    return { entries }\n  }\n\n  /**\n   * Creates a log data from a JSON object, to be passed to a Log constructor\n   *\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {json} json A json object containing valid log data\n   * @param {Object} options\n   * @param {number} options.length How many entries to include\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   **/\n  static async fromJSON (ipfs, json, { length = -1, timeout, concurrency, onProgressCallback }) {\n    if (!isDefined(ipfs)) throw IPFSNotDefinedError()\n    const { id, heads } = json\n    const headHashes = heads.map(e => e.hash)\n    const all = await fetchParallel(ipfs, headHashes,\n      { length, timeout, concurrency, onProgressCallback })\n    const entries = all.sort(compare)\n    return { logId: id, entries, heads }\n  }\n\n  /**\n   * Create a new log starting from an entry.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Entry|Array<Entry>} sourceEntries An entry or an array of entries to fetch a log from\n   * @param {Object} options\n   * @param {number} options.length How many entries to include\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   */\n  static async fromEntry (ipfs, sourceEntries,\n    { length = -1, exclude = [], shouldExclude, timeout, concurrency, onProgressCallback }) {\n    if (!isDefined(ipfs)) throw IPFSNotDefinedError()\n    if (!isDefined(sourceEntries)) throw new Error(\"'sourceEntries' must be defined\")\n\n    // Make sure we only have Entry objects as input\n    if (!Array.isArray(sourceEntries) && !isEntry(sourceEntries)) {\n      throw new Error('\\'sourceEntries\\' argument must be an array of Entry instances or a single Entry')\n    }\n\n    if (!Array.isArray(sourceEntries)) {\n      sourceEntries = [sourceEntries]\n    }\n\n    // Fetch given length, return size at least the given input entries\n    length = length > -1 ? Math.max(length, sourceEntries.length) : length\n\n    // Make sure we pass hashes instead of objects to the fetcher function\n    const hashes = sourceEntries.map(e => e.hash)\n\n    // Fetch the entries\n    const all = await fetchParallel(ipfs, hashes,\n      { length, exclude, shouldExclude, timeout, concurrency, onProgressCallback })\n\n    // Combine the fetches with the source entries and take only uniques\n    const combined = sourceEntries.concat(all).concat(exclude)\n    const uniques = findUniques(combined, 'hash').sort(compare)\n\n    // Cap the result at the right size by taking the last n entries\n    const sliced = uniques.slice(length > -1 ? -length : -uniques.length)\n\n    // Make sure that the given input entries are present in the result\n    // in order to not lose references\n    const missingSourceEntries = difference(sliced, sourceEntries, 'hash')\n\n    const replaceInFront = (a, withEntries) => {\n      const sliced = a.slice(withEntries.length, a.length)\n      return withEntries.concat(sliced)\n    }\n\n    // Add the input entries at the beginning of the array and remove\n    // as many elements from the array before inserting the original entries\n    const entries = replaceInFront(sliced, missingSourceEntries)\n    const logId = entries[entries.length - 1].id\n    return { logId, entries }\n  }\n}\n\nexport default LogIO\n","class AccessController {\n  async canAppend (entry, identityProvider) {\n    return true\n  }\n}\n\nexport default AccessController\n","class EntryIndex {\n  constructor (entries = {}) {\n    this._cache = entries\n  }\n\n  set (k, v) {\n    this._cache[k] = v\n  }\n\n  get (k) {\n    return this._cache[k]\n  }\n\n  delete (k) {\n    return delete this._cache[k]\n  }\n\n  add (newItems) {\n    this._cache = Object.assign(this._cache, newItems)\n  }\n\n  get length () {\n    return Object.values(this._cache).length\n  }\n}\n\nexport default EntryIndex\n","import pMap from 'p-map'\nimport GSet from './g-set.js'\nimport Entry, { IPLD_LINKS, getWriteFormat } from './entry.js'\nimport LogIO from './log-io.js'\nimport { IPFSNotDefinedError, LtOrLteMustBeStringOrArray, LogNotDefinedError, NotALogError } from './log-errors.js'\nimport Clock from './lamport-clock.js'\nimport Sorting from './log-sorting.js'\nimport AccessController from './default-access-controller.js'\nimport { isDefined, findUniques } from './utils/index.js'\nimport EntryIndex from './entry-index.js'\n\nconst { LastWriteWins, NoZeroes } = Sorting\n\nconst randomId = () => new Date().getTime().toString()\nconst getHash = e => e.hash\nconst flatMap = (res, acc) => res.concat(acc)\nconst getNextPointers = entry => entry.next\nconst maxClockTimeReducer = (res, acc) => Math.max(res, acc.clock.time)\nconst uniqueEntriesReducer = (res, acc) => {\n  res[acc.hash] = acc\n  return res\n}\n\n/**\n * @description\n * Log implements a G-Set CRDT and adds ordering.\n *\n * From:\n * \"A comprehensive study of Convergent and Commutative Replicated Data Types\"\n * https://hal.inria.fr/inria-00555588\n */\nclass Log extends GSet {\n  /**\n   * Create a new Log instance\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Object} identity Identity (https://github.com/orbitdb/orbit-db-identity-provider/blob/master/src/identity.js)\n   * @param {Object} options\n   * @param {string} options.logId ID of the log\n   * @param {Object} options.access AccessController (./default-access-controller)\n   * @param {Array<Entry>} options.entries An Array of Entries from which to create the log\n   * @param {Array<Entry>} options.heads Set the heads of the log\n   * @param {Clock} options.clock Set the clock of the log\n   * @param {Function} options.sortFn The sort function - by default LastWriteWins\n   * @return {Log} The log instance\n   */\n  constructor (ipfs, identity, { logId, access, entries, heads, clock, sortFn, concurrency } = {}) {\n    if (!isDefined(ipfs)) {\n      throw IPFSNotDefinedError()\n    }\n\n    if (!isDefined(identity)) {\n      throw new Error('Identity is required')\n    }\n\n    if (!isDefined(access)) {\n      access = new AccessController()\n    }\n\n    if (isDefined(entries) && !Array.isArray(entries)) {\n      throw new Error('\\'entries\\' argument must be an array of Entry instances')\n    }\n\n    if (isDefined(heads) && !Array.isArray(heads)) {\n      throw new Error('\\'heads\\' argument must be an array')\n    }\n\n    if (!isDefined(sortFn)) {\n      sortFn = LastWriteWins\n    }\n\n    super()\n\n    this._sortFn = NoZeroes(sortFn)\n\n    this._storage = ipfs\n    this._id = logId || randomId()\n\n    // Access Controller\n    this._access = access\n    // Identity\n    this._identity = identity\n\n    // Add entries to the internal cache\n    const uniqueEntries = (entries || []).reduce(uniqueEntriesReducer, {})\n    this._entryIndex = new EntryIndex(uniqueEntries)\n    entries = Object.values(uniqueEntries) || []\n\n    // Set heads if not passed as an argument\n    heads = heads || Log.findHeads(entries)\n    this._headsIndex = heads.reduce(uniqueEntriesReducer, {})\n\n    // Index of all next pointers in this log\n    this._nextsIndex = {}\n    const addToNextsIndex = e => e.next.forEach(a => (this._nextsIndex[a] = e.hash))\n    entries.forEach(addToNextsIndex)\n\n    // Set the length, we calculate the length manually internally\n    this._length = entries.length\n\n    // Set the clock\n    const maxTime = Math.max(clock ? clock.time : 0, this.heads.reduce(maxClockTimeReducer, 0))\n    // Take the given key as the clock id is it's a Key instance,\n    // otherwise if key was given, take whatever it is,\n    // and if it was null, take the given id as the clock id\n    this._clock = new Clock(this._identity.publicKey, maxTime)\n\n    this.joinConcurrency = concurrency || 16\n  }\n\n  /**\n   * Returns the ID of the log.\n   * @returns {string}\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Returns the clock of the log.\n   * @returns {string}\n   */\n  get clock () {\n    return this._clock\n  }\n\n  /**\n   * Returns the length of the log.\n   * @return {number} Length\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * Returns the values in the log.\n   * @returns {Array<Entry>}\n   */\n  get values () {\n    return Object.values(this.traverse(this.heads)).reverse()\n  }\n\n  /**\n   * Returns an array of heads as hashes.\n   * @returns {Array<string>}\n   */\n  get heads () {\n    return Object.values(this._headsIndex).sort(this._sortFn).reverse()\n  }\n\n  /**\n   * Returns an array of Entry objects that reference entries which\n   * are not in the log currently.\n   * @returns {Array<Entry>}\n   */\n  get tails () {\n    return Log.findTails(this.values)\n  }\n\n  /**\n   * Returns an array of hashes that are referenced by entries which\n   * are not in the log currently.\n   * @returns {Array<string>} Array of hashes\n   */\n  get tailHashes () {\n    return Log.findTailHashes(this.values)\n  }\n\n  /**\n   * Set the identity for the log\n   * @param {Identity} [identity] The identity to be set\n   */\n  setIdentity (identity) {\n    this._identity = identity\n    // Find the latest clock from the heads\n    const time = Math.max(this.clock.time, this.heads.reduce(maxClockTimeReducer, 0))\n    this._clock = new Clock(this._identity.publicKey, time)\n  }\n\n  /**\n   * Find an entry.\n   * @param {string} [hash] The hashes of the entry\n   * @returns {Entry|undefined}\n   */\n  get (hash) {\n    return this._entryIndex.get(hash)\n  }\n\n  /**\n   * Checks if a entry is part of the log\n   * @param {string} hash The hash of the entry\n   * @returns {boolean}\n   */\n  has (entry) {\n    return this._entryIndex.get(entry.hash || entry) !== undefined\n  }\n\n  traverse (rootEntries, amount = -1, endHash) {\n    // Sort the given given root entries and use as the starting stack\n    let stack = rootEntries.sort(this._sortFn).reverse()\n\n    // Cache for checking if we've processed an entry already\n    let traversed = {}\n    // End result\n    const result = {}\n    let count = 0\n    // Named function for getting an entry from the log\n    const getEntry = e => this.get(e)\n\n    // Add an entry to the stack and traversed nodes index\n    const addToStack = entry => {\n      // If we've already processed the entry, don't add it to the stack\n      if (!entry || traversed[entry.hash]) {\n        return\n      }\n\n      // Add the entry in front of the stack and sort\n      stack = [entry, ...stack]\n        .sort(this._sortFn)\n        .reverse()\n      // Add to the cache of processed entries\n      traversed[entry.hash] = true\n    }\n\n    const addEntry = rootEntry => {\n      result[rootEntry.hash] = rootEntry\n      traversed[rootEntry.hash] = true\n      count++\n    }\n\n    // Start traversal\n    // Process stack until it's empty (traversed the full log)\n    // or when we have the requested amount of entries\n    // If requested entry amount is -1, traverse all\n    while (stack.length > 0 && (count < amount || amount < 0)) { // eslint-disable-line no-unmodified-loop-condition\n      // Get the next element from the stack\n      const entry = stack.shift()\n      // Add to the result\n      addEntry(entry)\n      // If it is the specified end hash, break out of the while loop\n      if (endHash && endHash === entry.hash) break\n\n      // Add entry's next references to the stack\n      const entries = entry.next.map(getEntry)\n      const defined = entries.filter(isDefined)\n      defined.forEach(addToStack)\n    }\n\n    stack = []\n    traversed = {}\n    // End result\n    return result\n  }\n\n  /**\n   * Append an entry to the log.\n   * @param {Entry} entry Entry to add\n   * @return {Log} New Log containing the appended value\n   */\n  async append (data, pointerCount = 1, pin = false) {\n    // Update the clock (find the latest clock)\n    const newTime = Math.max(this.clock.time, this.heads.reduce(maxClockTimeReducer, 0)) + 1\n    this._clock = new Clock(this.clock.id, newTime)\n\n    const all = Object.values(this.traverse(this.heads, Math.max(pointerCount, this.heads.length)))\n\n    // If pointer count is 4, returns 2\n    // If pointer count is 8, returns 3 references\n    // If pointer count is 512, returns 9 references\n    // If pointer count is 2048, returns 11 references\n    const getEveryPow2 = (maxDistance) => {\n      const entries = new Set()\n      for (let i = 1; i <= maxDistance; i *= 2) {\n        const index = Math.min(i - 1, all.length - 1)\n        entries.add(all[index])\n      }\n      return entries\n    }\n    const references = getEveryPow2(Math.min(pointerCount, all.length))\n\n    // Always include the last known reference\n    if (all.length < pointerCount && all[all.length - 1]) {\n      references.add(all[all.length - 1])\n    }\n\n    // Create the next pointers from heads\n    const nexts = Object.keys(this.heads.reverse().reduce(uniqueEntriesReducer, {}))\n    const isNext = e => !nexts.includes(e)\n    // Delete the heads from the refs\n    const refs = Array.from(references).map(getHash).filter(isNext)\n    // @TODO: Split Entry.create into creating object, checking permission, signing and then posting to IPFS\n    // Create the entry and add it to the internal cache\n    const entry = await Entry.create(\n      this._storage,\n      this._identity,\n      this.id,\n      data,\n      nexts,\n      this.clock,\n      refs,\n      pin\n    )\n\n    const canAppend = await this._access.canAppend(entry, this._identity.provider)\n    if (!canAppend) {\n      throw new Error(`Could not append entry, key \"${this._identity.id}\" is not allowed to write to the log`)\n    }\n\n    this._entryIndex.set(entry.hash, entry)\n    nexts.forEach(e => (this._nextsIndex[e] = entry.hash))\n    this._headsIndex = {}\n    this._headsIndex[entry.hash] = entry\n    // Update the length\n    this._length++\n    return entry\n  }\n\n  /*\n   * Creates a javscript iterator over log entries\n   *\n   * @param {Object} options\n   * @param {string|Array} options.gt Beginning hash of the iterator, non-inclusive\n   * @param {string|Array} options.gte Beginning hash of the iterator, inclusive\n   * @param {string|Array} options.lt Ending hash of the iterator, non-inclusive\n   * @param {string|Array} options.lte Ending hash of the iterator, inclusive\n   * @param {amount} options.amount Number of entried to return to / from the gte / lte hash\n   * @returns {Symbol.Iterator} Iterator object containing log entries\n   *\n   * @examples\n   *\n   * (async () => {\n   *   log1 = new Log(ipfs, testIdentity, { logId: 'X' })\n   *\n   *   for (let i = 0; i <= 100; i++) {\n   *     await log1.append('entry' + i)\n   *   }\n   *\n   *   let it = log1.iterator({\n   *     lte: 'zdpuApFd5XAPkCTmSx7qWQmQzvtdJPtx2K5p9to6ytCS79bfk',\n   *     amount: 10\n   *   })\n   *\n   *   [...it].length // 10\n   * })()\n   *\n   *\n   */\n  iterator ({ gt = undefined, gte = undefined, lt = undefined, lte = undefined, amount = -1 } =\n  {}) {\n    if (amount === 0) return (function * () {})()\n    if (typeof lte === 'string') lte = [this.get(lte)]\n    if (typeof lt === 'string') lt = [this.get(this.get(lt).next[0])]\n\n    if (lte && !Array.isArray(lte)) throw LtOrLteMustBeStringOrArray()\n    if (lt && !Array.isArray(lt)) throw LtOrLteMustBeStringOrArray()\n\n    const start = (lte || (lt || this.heads)).filter(isDefined)\n    const endHash = gte ? this.get(gte).hash : gt ? this.get(gt).hash : null\n    const count = endHash ? -1 : amount || -1\n\n    const entries = this.traverse(start, count, endHash)\n    let entryValues = Object.values(entries)\n\n    // Strip off last entry if gt is non-inclusive\n    if (gt) entryValues.pop()\n\n    // Deal with the amount argument working backwards from gt/gte\n    if ((gt || gte) && amount > -1) {\n      entryValues = entryValues.slice(entryValues.length - amount, entryValues.length)\n    }\n\n    return (function * () {\n      for (const i in entryValues) {\n        yield entryValues[i]\n      }\n    })()\n  }\n\n  /**\n   * Join two logs.\n   *\n   * Joins another log into this one.\n   *\n   * @param {Log} log Log to join with this Log\n   * @param {number} [size=-1] Max size of the joined log\n   * @returns {Promise<Log>} This Log instance\n   * @example\n   * await log1.join(log2)\n   */\n  async join (log, size = -1) {\n    if (!isDefined(log)) throw LogNotDefinedError()\n    if (!Log.isLog(log)) throw NotALogError()\n    if (this.id !== log.id) return\n\n    // Get the difference of the logs\n    const newItems = Log.difference(log, this)\n\n    const identityProvider = this._identity.provider\n    // Verify if entries are allowed to be added to the log and throws if\n    // there's an invalid entry\n    const permitted = async (entry) => {\n      const canAppend = await this._access.canAppend(entry, identityProvider)\n      if (!canAppend) {\n        throw new Error(`Could not append entry, key \"${entry.identity.id}\" is not allowed to write to the log`)\n      }\n    }\n\n    // Verify signature for each entry and throws if there's an invalid signature\n    const verify = async (entry) => {\n      const isValid = await Entry.verify(identityProvider, entry)\n      const publicKey = entry.identity ? entry.identity.publicKey : entry.key\n      if (!isValid) throw new Error(`Could not validate signature \"${entry.sig}\" for entry \"${entry.hash}\" and key \"${publicKey}\"`)\n    }\n\n    const entriesToJoin = Object.values(newItems)\n    await pMap(entriesToJoin, async e => {\n      await permitted(e)\n      await verify(e)\n    }, { concurrency: this.joinConcurrency })\n\n    // Update the internal next pointers index\n    const addToNextsIndex = e => {\n      const entry = this.get(e.hash)\n      if (!entry) this._length++ /* istanbul ignore else */\n      e.next.forEach(a => (this._nextsIndex[a] = e.hash))\n    }\n    Object.values(newItems).forEach(addToNextsIndex)\n\n    // Update the internal entry index\n    this._entryIndex.add(newItems)\n\n    // Merge the heads\n    const notReferencedByNewItems = e => !nextsFromNewItems.find(a => a === e.hash)\n    const notInCurrentNexts = e => !this._nextsIndex[e.hash]\n    const nextsFromNewItems = Object.values(newItems).map(getNextPointers).reduce(flatMap, [])\n    const mergedHeads = Log.findHeads(Object.values(Object.assign({}, this._headsIndex, log._headsIndex)))\n      .filter(notReferencedByNewItems)\n      .filter(notInCurrentNexts)\n      .reduce(uniqueEntriesReducer, {})\n\n    this._headsIndex = mergedHeads\n\n    // Slice to the requested size\n    if (size > -1) {\n      let tmp = this.values\n      tmp = tmp.slice(-size)\n      this._entryIndex = null\n      this._entryIndex = new EntryIndex(tmp.reduce(uniqueEntriesReducer, {}))\n      this._headsIndex = Log.findHeads(tmp).reduce(uniqueEntriesReducer, {})\n      this._length = this._entryIndex.length\n    }\n\n    // Find the latest clock from the heads\n    const maxClock = Object.values(this._headsIndex).reduce(maxClockTimeReducer, 0)\n    this._clock = new Clock(this.clock.id, Math.max(this.clock.time, maxClock))\n    return this\n  }\n\n  /**\n   * Get the log in JSON format.\n   * @returns {Object} An object with the id and heads properties\n   */\n  toJSON () {\n    return {\n      id: this.id,\n      heads: this.heads\n        .sort(this._sortFn) // default sorting\n        .reverse() // we want the latest as the first element\n        .map(getHash) // return only the head hashes\n    }\n  }\n\n  /**\n   * Get the log in JSON format as a snapshot.\n   * @returns {Object} An object with the id, heads and value properties\n   */\n  toSnapshot () {\n    return {\n      id: this.id,\n      heads: this.heads,\n      values: this.values\n    }\n  }\n\n  /**\n   * Get the log as a Buffer.\n   * @returns {Buffer}\n   */\n  toBuffer () {\n    return Buffer.from(JSON.stringify(this.toJSON()))\n  }\n\n  /**\n   * Returns the log entries as a formatted string.\n   * @returns {string}\n   * @example\n   * two\n   * └─one\n   *   └─three\n   */\n  toString (payloadMapper) {\n    return this.values\n      .slice()\n      .reverse()\n      .map((e, idx) => {\n        const parents = Entry.findChildren(e, this.values)\n        const len = parents.length\n        let padding = new Array(Math.max(len - 1, 0))\n        padding = len > 1 ? padding.fill('  ') : padding\n        padding = len > 0 ? padding.concat(['└─']) : padding\n        /* istanbul ignore next */\n        return padding.join('') + (payloadMapper ? payloadMapper(e.payload) : e.payload)\n      })\n      .join('\\n')\n  }\n\n  /**\n   * Check whether an object is a Log instance.\n   * @param {Object} log An object to check\n   * @returns {boolean}\n   */\n  static isLog (log) {\n    return log.id !== undefined &&\n      log.heads !== undefined &&\n      log._entryIndex !== undefined\n  }\n\n  /**\n   * Get the log's multihash.\n   * @returns {Promise<string>} Multihash of the Log as Base58 encoded string.\n   */\n  toMultihash ({ format } = {}) {\n    return LogIO.toMultihash(this._storage, this, { format })\n  }\n\n  /**\n   * Create a log from a hashes.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {string} hash The log hash\n   * @param {Object} options\n   * @param {AccessController} options.access The access controller instance\n   * @param {number} options.length How many items to include in the log\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   * @param {Function} options.sortFn The sort function - by default LastWriteWins\n   * @returns {Promise<Log>}\n   */\n  static async fromMultihash (ipfs, identity, hash,\n    { access, length = -1, exclude = [], shouldExclude, timeout, concurrency, sortFn, onProgressCallback } = {}) {\n    // TODO: need to verify the entries with 'key'\n    const { logId, entries, heads } = await LogIO.fromMultihash(ipfs, hash,\n      { length, exclude, shouldExclude, timeout, onProgressCallback, concurrency, sortFn })\n    return new Log(ipfs, identity, { logId, access, entries, heads, sortFn })\n  }\n\n  /**\n   * Create a log from a single entry's hash.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {string} hash The entry's hash\n   * @param {Object} options\n   * @param {string} options.logId The ID of the log\n   * @param {AccessController} options.access The access controller instance\n   * @param {number} options.length How many entries to include in the log\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   * @param {Function} options.sortFn The sort function - by default LastWriteWins\n   * @return {Promise<Log>} New Log\n   */\n  static async fromEntryHash (ipfs, identity, hash,\n    { logId, access, length = -1, exclude = [], shouldExclude, timeout, concurrency, sortFn, onProgressCallback } = {}) {\n    // TODO: need to verify the entries with 'key'\n    const { entries } = await LogIO.fromEntryHash(ipfs, hash,\n      { length, exclude, shouldExclude, timeout, concurrency, onProgressCallback })\n    return new Log(ipfs, identity, { logId, access, entries, sortFn })\n  }\n\n  /**\n   * Create a log from a Log Snapshot JSON.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {Object} json Log snapshot as JSON object\n   * @param {Object} options\n   * @param {AccessController} options.access The access controller instance\n   * @param {number} options.length How many entries to include in the log\n   * @param {function(hash, entry, parent, depth)} [options.onProgressCallback]\n   * @param {Function} options.sortFn The sort function - by default LastWriteWins\n   * @return {Promise<Log>} New Log\n   */\n  static async fromJSON (ipfs, identity, json,\n    { access, length = -1, timeout, sortFn, onProgressCallback } = {}) {\n    // TODO: need to verify the entries with 'key'\n    const { logId, entries } = await LogIO.fromJSON(ipfs, json,\n      { length, timeout, onProgressCallback })\n    return new Log(ipfs, identity, { logId, access, entries, sortFn })\n  }\n\n  /**\n   * Create a new log from an Entry instance.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {Entry|Array<Entry>} sourceEntries An Entry or an array of entries to fetch a log from\n   * @param {Object} options\n   * @param {AccessController} options.access The access controller instance\n   * @param {number} options.length How many entries to include. Default: infinite.\n   * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n   * @param {function(hash, entry, parent, depth)} [options.onProgressCallback]\n   * @param {Function} options.sortFn The sort function - by default LastWriteWins\n   * @return {Promise<Log>} New Log\n   */\n  static async fromEntry (ipfs, identity, sourceEntries,\n    { access, length = -1, exclude = [], timeout, concurrency, sortFn, onProgressCallback } = {}) {\n    // TODO: need to verify the entries with 'key'\n    const { logId, entries } = await LogIO.fromEntry(ipfs, sourceEntries,\n      { length, exclude, timeout, concurrency, onProgressCallback })\n    return new Log(ipfs, identity, { logId, access, entries, sortFn })\n  }\n\n  /**\n   * Find heads from a collection of entries.\n   *\n   * Finds entries that are the heads of this collection,\n   * ie. entries that are not referenced by other entries.\n   *\n   * @param {Array<Entry>} entries Entries to search heads from\n   * @returns {Array<Entry>}\n   */\n  static findHeads (entries) {\n    const indexReducer = (res, entry, idx, arr) => {\n      const addToResult = e => (res[e] = entry.hash)\n      entry.next.forEach(addToResult)\n      return res\n    }\n\n    const items = entries.reduce(indexReducer, {})\n\n    const exists = e => items[e.hash] === undefined\n    const compareIds = (a, b) => a.clock.id > b.clock.id\n\n    return entries.filter(exists).sort(compareIds)\n  }\n\n  // Find entries that point to another entry that is not in the\n  // input array\n  static findTails (entries) {\n    // Reverse index { next -> entry }\n    const reverseIndex = {}\n    // Null index containing entries that have no parents (nexts)\n    const nullIndex = []\n    // Hashes for all entries for quick lookups\n    const hashes = {}\n    // Hashes of all next entries\n    let nexts = []\n\n    const addToIndex = (e) => {\n      if (e.next.length === 0) {\n        nullIndex.push(e)\n      }\n      const addToReverseIndex = (a) => {\n        /* istanbul ignore else */\n        if (!reverseIndex[a]) reverseIndex[a] = []\n        reverseIndex[a].push(e)\n      }\n\n      // Add all entries and their parents to the reverse index\n      e.next.forEach(addToReverseIndex)\n      // Get all next references\n      nexts = nexts.concat(e.next)\n      // Get the hashes of input entries\n      hashes[e.hash] = true\n    }\n\n    // Create our indices\n    entries.forEach(addToIndex)\n\n    const addUniques = (res, entries, idx, arr) => res.concat(findUniques(entries, 'hash'))\n    const exists = e => hashes[e] === undefined\n    const findFromReverseIndex = e => reverseIndex[e]\n\n    // Drop hashes that are not in the input entries\n    const tails = nexts // For every hash in nexts:\n      .filter(exists) // Remove undefineds and nulls\n      .map(findFromReverseIndex) // Get the Entry from the reverse index\n      .reduce(addUniques, []) // Flatten the result and take only uniques\n      .concat(nullIndex) // Combine with tails the have no next refs (ie. first-in-their-chain)\n\n    return findUniques(tails, 'hash').sort(Entry.compare)\n  }\n\n  // Find the hashes to entries that are not in a collection\n  // but referenced by other entries\n  static findTailHashes (entries) {\n    const hashes = {}\n    const addToIndex = e => (hashes[e.hash] = true)\n    const reduceTailHashes = (res, entry, idx, arr) => {\n      const addToResult = (e) => {\n        /* istanbul ignore else */\n        if (hashes[e] === undefined) {\n          res.splice(0, 0, e)\n        }\n      }\n      entry.next.reverse().forEach(addToResult)\n      return res\n    }\n\n    entries.forEach(addToIndex)\n    return entries.reduce(reduceTailHashes, [])\n  }\n\n  static difference (a, b) {\n    const stack = Object.keys(a._headsIndex)\n    const traversed = {}\n    const res = {}\n\n    const pushToStack = hash => {\n      if (!traversed[hash] && !b.get(hash)) {\n        stack.push(hash)\n        traversed[hash] = true\n      }\n    }\n\n    while (stack.length > 0) {\n      const hash = stack.shift()\n      const entry = a.get(hash)\n      if (entry && !b.get(hash) && entry.id === b.id) {\n        res[entry.hash] = entry\n        traversed[entry.hash] = true\n        entry.next.concat(entry.refs).forEach(pushToStack)\n      }\n    }\n    return res\n  }\n}\n\nexport default Log\nexport { Sorting }\nexport { Entry, IPLD_LINKS, getWriteFormat }\nexport { AccessController }\n","import PQueue from 'p-queue'\nimport Log from 'ipfs-log'\n\nconst getNextAndRefsUnion = e => [...new Set([...e.next, ...e.refs])]\nconst flatMap = (res, val) => res.concat(val)\n\nconst defaultConcurrency = 32\n\nexport default class Replicator {\n  constructor (store, concurrency) {\n    this._store = store\n    this._concurrency = concurrency || defaultConcurrency\n\n    // Tasks processing queue where each log sync request is\n    // added as a task that fetches the log\n    this._q = new PQueue({ concurrency: this._concurrency })\n\n    /* Internal caches */\n\n    // For storing fetched logs before \"load is complete\".\n    // Cleared when processing is complete.\n    this._logs = []\n    // Index of hashes (CIDs) for checking which entries are currently being fetched.\n    // Hashes are added to this cache before fetching a log starts and removed after\n    // the log was fetched.\n    this._fetching = {}\n    // Index of hashes (CIDs) for checking which entries have been fetched.\n    // Cleared when processing is complete.\n    this._fetched = {}\n\n    // Listen for an event when the task queue has emptied\n    // and all tasks have been processed. We call the\n    // onReplicationComplete callback which then updates the Store's\n    // state (eg. index, replication state, etc)\n    this._q.on('idle', async () => {\n      const logs = this._logs.slice()\n      this._logs = []\n      if (this.onReplicationComplete && logs.length > 0 && this._store._oplog) {\n        try {\n          await this.onReplicationComplete(logs)\n          // Remove from internal cache\n          logs.forEach(log => log.values.forEach(e => delete this._fetched[e.hash]))\n        } catch (e) {\n          console.error(e)\n        }\n      }\n    })\n  }\n\n  /**\n   * Returns the number of replication tasks running currently\n   * @return {[Integer]} [Number of replication tasks running]\n   */\n  get tasksRunning () {\n    return this._q.pending\n  }\n\n  /**\n   * Returns the number of replication tasks currently queued\n   * @return {[Integer]} [Number of replication tasks queued]\n   */\n  get tasksQueued () {\n    return this._q.size\n  }\n\n  /**\n   * Returns the hashes currently queued or being processed\n   * @return {[Array]} [Strings of hashes of entries currently queued or being processed]\n   */\n  get unfinished () {\n    return Object.keys(this._fetching)\n  }\n\n  /*\n    Process new heads.\n    Param 'entries' is an Array of Entry instances or strings (of CIDs).\n   */\n  async load (entries) {\n    try {\n      // Add entries to the replication queue\n      this._addToQueue(entries)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  async _addToQueue (entries) {\n    // Function to determine if an entry should be fetched (ie. do we have it somewhere already?)\n    const shouldExclude = (h) => h && this._store._oplog && (this._store._oplog.has(h) || this._fetching[h] !== undefined || this._fetched[h])\n\n    // A task to process a given entries\n    const createReplicationTask = (e) => {\n      // Add to internal \"currently fetching\" cache\n      this._fetching[e.hash || e] = true\n      // The returned function is the processing function / task\n      // to run concurrently\n      return async () => {\n        // Call onReplicationProgress only for entries that have .hash field,\n        // if it is a string don't call it (added internally from .next)\n        if (e.hash && this.onReplicationQueued) {\n          this.onReplicationQueued(e)\n        }\n        try {\n          // Replicate the log starting from the entry's hash (CID)\n          const log = await this._replicateLog(e)\n          // Add the fetched log to the internal cache to wait\n          // for \"onReplicationComplete\"\n          this._logs.push(log)\n        } catch (e) {\n          console.error(e)\n          throw e\n        }\n        // Remove from internal cache\n        delete this._fetching[e.hash || e]\n      }\n    }\n\n    if (entries.length > 0) {\n      // Create a processing tasks from each entry/hash that we\n      // should include based on the exclusion filter function\n      const tasks = entries\n        .filter((e) => !shouldExclude(e.hash || e))\n        .map((e) => createReplicationTask(e))\n      // Add the tasks to the processing queue\n      if (tasks.length > 0) {\n        this._q.addAll(tasks)\n      }\n    }\n  }\n\n  async stop () {\n    // Clear the task queue\n    this._q.pause()\n    this._q.clear()\n    await this._q.onIdle()\n    // Reset internal caches\n    this._logs = []\n    this._fetching = {}\n    this._fetched = {}\n  }\n\n  async _replicateLog (entry) {\n    const hash = entry.hash || entry\n\n    // Notify the Store that we made progress\n    const onProgressCallback = (entry) => {\n      this._fetched[entry.hash] = true\n      if (this.onReplicationProgress) {\n        this.onReplicationProgress(entry)\n      }\n    }\n\n    const shouldExclude = (h) => h && h !== hash && this._store._oplog && (this._store._oplog.has(h) || this._fetching[h] !== undefined || this._fetched[h] !== undefined)\n\n    // Fetch and load a log from the entry hash\n    const log = await Log.fromEntryHash(\n      this._store._ipfs,\n      this._store.identity,\n      hash,\n      {\n        logId: this._store.id,\n        access: this._store.access,\n        length: -1,\n        exclude: [],\n        shouldExclude,\n        concurrency: this._concurrency,\n        onProgressCallback\n      }\n    )\n\n    // Return all next pointers\n    const nexts = log.values.map(getNextAndRefsUnion).reduce(flatMap, [])\n    try {\n      // Add the next (hashes) to the processing queue\n      this._addToQueue(nexts)\n    } catch (e) {\n      console.error(e)\n      throw e\n    }\n    // Return the log\n    return log\n  }\n}\n","export default class ReplicationInfo {\n  constructor () {\n    this.progress = 0\n    this.max = 0\n  }\n\n  reset () {\n    this.progress = 0\n    this.max = 0\n  }\n}\n","import path from 'path'\nimport { EventEmitter } from 'events'\nimport mapSeries from 'p-each-series'\nimport PQueue from 'p-queue'\nimport Index from './Index.js'\nimport Replicator from './Replicator.js'\nimport ReplicationInfo from './replication-info.js'\nimport Logger from 'logplease'\nimport * as io from 'orbit-db-io'\nimport Log, { Entry, IPLD_LINKS, getWriteFormat } from 'ipfs-log'\n\nconst logger = Logger.create('orbit-db.store', { color: Logger.Colors.Blue })\nLogger.setLogLevel('ERROR')\n\nconst DefaultOptions = {\n  Index,\n  maxHistory: -1,\n  fetchEntryTimeout: null,\n  referenceCount: 32,\n  replicationConcurrency: 32,\n  syncLocal: false,\n  sortFn: undefined\n}\n\nclass Store {\n  constructor (ipfs, identity, address, options) {\n    if (!identity) {\n      throw new Error('Identity required')\n    }\n\n    // Set the options\n    const opts = Object.assign({}, DefaultOptions)\n    Object.assign(opts, options)\n    this.options = opts\n\n    // Default type\n    this._type = 'store'\n\n    // Create IDs, names and paths\n    this.id = address.toString()\n    this.identity = identity\n    this.address = address\n    this.dbname = address.path || ''\n    this.events = new EventEmitter()\n\n    this.remoteHeadsPath = path.join(this.id, '_remoteHeads')\n    this.localHeadsPath = path.join(this.id, '_localHeads')\n    this.snapshotPath = path.join(this.id, 'snapshot')\n    this.queuePath = path.join(this.id, 'queue')\n    this.manifestPath = path.join(this.id, '_manifest')\n\n    // External dependencies\n    this._ipfs = ipfs\n    this._cache = options.cache\n\n    // Access mapping\n    const defaultAccess = {\n      canAppend: (entry) => (entry.identity.publicKey === identity.publicKey)\n    }\n    this.access = options.accessController || defaultAccess\n\n    // Create the operations log\n    this._oplog = new Log(this._ipfs, this.identity, { logId: this.id, access: this.access, sortFn: this.options.sortFn })\n\n    // _addOperation and log-joins queue. Adding ops and joins to the queue\n    // makes sure they get processed sequentially to avoid race conditions\n    // between writes and joins (coming from Replicator)\n    this._queue = new PQueue({ concurrency: 1 })\n\n    // Create the index\n    this._index = new this.options.Index(this.address.root)\n\n    // Replication progress info\n    this._replicationStatus = new ReplicationInfo()\n\n    // Statistics\n    this._stats = {\n      snapshot: {\n        bytesLoaded: -1\n      },\n      syncRequestsReceieved: 0\n    }\n\n    try {\n      const onReplicationQueued = async (entry) => {\n        // Update the latest entry state (latest is the entry with largest clock time)\n        this._recalculateReplicationMax(entry.clock ? entry.clock.time : 0)\n        this.events.emit('replicate', this.address.toString(), entry)\n      }\n\n      const onReplicationProgress = async (entry) => {\n        const previousProgress = this.replicationStatus.progress\n        const previousMax = this.replicationStatus.max\n        this._recalculateReplicationStatus(entry.clock.time)\n        if (this._oplog.length + 1 > this.replicationStatus.progress ||\n          this.replicationStatus.progress > previousProgress ||\n          this.replicationStatus.max > previousMax) {\n          this.events.emit('replicate.progress', this.address.toString(), entry.hash, entry, this.replicationStatus.progress, this.replicationStatus.max)\n        }\n      }\n\n      const onReplicationComplete = async (logs) => {\n        const updateState = async () => {\n          try {\n            if (this._oplog && logs.length > 0) {\n              for (const log of logs) {\n                await this._oplog.join(log)\n              }\n\n              // only store heads that has been verified and merges\n              const heads = this._oplog.heads\n              await this._cache.set(this.remoteHeadsPath, heads)\n              logger.debug(`Saved heads ${heads.length} [${heads.map(e => e.hash).join(', ')}]`)\n\n              // update the store's index after joining the logs\n              // and persisting the latest heads\n              await this._updateIndex()\n\n              if (this._oplog.length > this.replicationStatus.progress) {\n                this._recalculateReplicationStatus(this._oplog.length)\n              }\n\n              this.events.emit('replicated', this.address.toString(), logs.length, this)\n            }\n          } catch (e) {\n            console.error(e)\n          }\n        }\n        await this._queue.add(updateState.bind(this))\n      }\n      // Create the replicator\n      this._replicator = new Replicator(this, this.options.replicationConcurrency)\n      // For internal backwards compatibility,\n      // to be removed in future releases\n      this._loader = this._replicator\n      // Hook up the callbacks to the Replicator\n      this._replicator.onReplicationQueued = onReplicationQueued\n      this._replicator.onReplicationProgress = onReplicationProgress\n      this._replicator.onReplicationComplete = onReplicationComplete\n    } catch (e) {\n      console.error('Store Error:', e)\n    }\n    // TODO: verify if this is working since we don't seem to emit \"replicated.progress\" anywhere\n    this.events.on('replicated.progress', (address, hash, entry, progress, have) => {\n      this._procEntry(entry)\n    })\n    this.events.on('write', (address, entry, heads) => {\n      this._procEntry(entry)\n    })\n  }\n\n  get all () {\n    return Array.isArray(this._index._index)\n      ? this._index._index\n      : Object.keys(this._index._index).map(e => this._index._index[e])\n  }\n\n  get index () {\n    return this._index._index\n  }\n\n  get type () {\n    return this._type\n  }\n\n  get key () {\n    return this._key\n  }\n\n  /**\n   * Returns the database's current replication status information\n   * @return {[Object]} [description]\n   */\n  get replicationStatus () {\n    return this._replicationStatus\n  }\n\n  setIdentity (identity) {\n    this.identity = identity\n    this._oplog.setIdentity(identity)\n  }\n\n  async close () {\n    // Stop the Replicator\n    await this._replicator.stop()\n\n    // Wait for the operations queue to finish processing\n    // to make sure everything that all operations that have\n    // been queued will be written to disk\n    await this._queue.onIdle()\n\n    // Reset replication statistics\n    this._replicationStatus.reset()\n\n    // Reset database statistics\n    this._stats = {\n      snapshot: {\n        bytesLoaded: -1\n      },\n      syncRequestsReceieved: 0\n    }\n\n    if (this.options.onClose) {\n      await this.options.onClose(this)\n    }\n\n    // Close store access controller\n    if (this.access.close) {\n      await this.access.close()\n    }\n\n    // Remove all event listeners\n    for (const event in this.events._events) {\n      this.events.removeAllListeners(event)\n    }\n\n    this._oplog = null\n\n    // Database is now closed\n    // TODO: afaik we don't use 'closed' event anymore,\n    // to be removed in future releases\n    this.events.emit('closed', this.address.toString())\n    return Promise.resolve()\n  }\n\n  /**\n   * Drops a database and removes local data\n   * @return {[None]}\n   */\n  async drop () {\n    if (this.options.onDrop) {\n      await this.options.onDrop(this)\n    }\n\n    await this._cache.del(this.localHeadsPath)\n    await this._cache.del(this.remoteHeadsPath)\n    await this._cache.del(this.snapshotPath)\n    await this._cache.del(this.queuePath)\n    await this._cache.del(this.manifestPath)\n\n    await this.close()\n\n    // Reset\n    this._index = new this.options.Index(this.address.root)\n    this._oplog = new Log(this._ipfs, this.identity, { logId: this.id, access: this.access, sortFn: this.options.sortFn })\n    this._cache = this.options.cache\n  }\n\n  async load (amount, opts = {}) {\n    if (typeof amount === 'object') {\n      opts = amount\n      amount = undefined\n    }\n    amount = amount || this.options.maxHistory\n    const fetchEntryTimeout = opts.fetchEntryTimeout || this.options.fetchEntryTimeout\n\n    if (this.options.onLoad) {\n      await this.options.onLoad(this)\n    }\n    const localHeads = await this._cache.get(this.localHeadsPath) || []\n    const remoteHeads = await this._cache.get(this.remoteHeadsPath) || []\n    const heads = localHeads.concat(remoteHeads)\n\n    if (heads.length > 0) {\n      this.events.emit('load', this.address.toString(), heads)\n    }\n\n    // Update the replication status from the heads\n    heads.forEach(h => this._recalculateReplicationMax(h.clock.time))\n\n    // Load the log\n    const log = await Log.fromEntryHash(this._ipfs, this.identity, heads.map(e => e.hash), {\n      logId: this.id,\n      access: this.access,\n      sortFn: this.options.sortFn,\n      length: amount,\n      onProgressCallback: this._onLoadProgress.bind(this),\n      timeout: fetchEntryTimeout,\n      concurrency: this.options.replicationConcurrency\n    })\n\n    this._oplog = log\n\n    // Update the index\n    if (heads.length > 0) {\n      await this._updateIndex()\n    }\n\n    this.events.emit('ready', this.address.toString(), this._oplog.heads)\n  }\n\n  async sync (heads) {\n    this._stats.syncRequestsReceieved += 1\n    logger.debug(`Sync request #${this._stats.syncRequestsReceieved} ${heads.length}`)\n    if (heads.length === 0) {\n      return\n    }\n\n    // To simulate network latency, uncomment this line\n    // and comment out the rest of the function\n    // That way the object (received as head message from pubsub)\n    // doesn't get written to IPFS and so when the Replicator is fetching\n    // the log, it'll fetch it from the network instead from the disk.\n    // return this._replicator.load(heads)\n\n    const saveToIpfs = async (head) => {\n      if (!head) {\n        console.warn(\"Warning: Given input entry was 'null'.\")\n        return Promise.resolve(null)\n      }\n\n      const identityProvider = this.identity.provider\n      if (!identityProvider) throw new Error('Identity-provider is required, cannot verify entry')\n\n      const canAppend = await this.access.canAppend(head, identityProvider)\n      if (!canAppend) {\n        console.warn('Warning: Given input entry is not allowed in this log and was discarded (no write access).')\n        return Promise.resolve(null)\n      }\n\n      const logEntry = Entry.toEntry(head)\n      const hash = await io.write(this._ipfs, getWriteFormat(logEntry), logEntry, { links: IPLD_LINKS, onlyHash: true })\n\n      if (hash !== head.hash) {\n        console.warn('\"WARNING! Head hash didn\\'t match the contents')\n      }\n\n      return head\n    }\n\n    return mapSeries(heads, saveToIpfs)\n      .then(async (saved) => {\n        return this._replicator.load(saved.filter(e => e !== null))\n      })\n  }\n\n  loadMoreFrom (amount, entries) {\n    this._replicator.load(entries)\n  }\n\n  async saveSnapshot () {\n    const unfinished = this._replicator.unfinished\n\n    const snapshotData = this._oplog.toSnapshot()\n    const buf = Buffer.from(JSON.stringify({\n      id: snapshotData.id,\n      heads: snapshotData.heads,\n      size: snapshotData.values.length,\n      values: snapshotData.values,\n      type: this.type\n    }))\n\n    const snapshot = await this._ipfs.add(buf)\n\n    snapshot.hash = snapshot.cid.toString() // js-ipfs >= 0.41, ipfs.add results contain a cid property (a CID instance) instead of a string hash property\n    await this._cache.set(this.snapshotPath, snapshot)\n    await this._cache.set(this.queuePath, unfinished)\n\n    logger.debug(`Saved snapshot: ${snapshot.hash}, queue length: ${unfinished.length}`)\n\n    return [snapshot]\n  }\n\n  async loadFromSnapshot (onProgressCallback) {\n    if (this.options.onLoad) {\n      await this.options.onLoad(this)\n    }\n\n    this.events.emit('load', this.address.toString()) // TODO emits inconsistent params, missing heads param\n\n    const maxClock = (res, val) => Math.max(res, val.clock.time)\n\n    const queue = await this._cache.get(this.queuePath)\n    this.sync(queue || [])\n\n    const snapshot = await this._cache.get(this.snapshotPath)\n\n    if (snapshot) {\n      const chunks = []\n      for await (const chunk of this._ipfs.cat(snapshot.hash)) {\n        chunks.push(chunk)\n      }\n      const buffer = Buffer.concat(chunks)\n      const snapshotData = JSON.parse(buffer.toString())\n\n      // Fetch the entries\n      // Timeout 1 sec to only load entries that are already fetched (in order to not get stuck at loading)\n      this._recalculateReplicationMax(snapshotData.values.reduce(maxClock, 0))\n      if (snapshotData) {\n        this._oplog = await Log.fromJSON(this._ipfs, this.identity, snapshotData, {\n          access: this.access,\n          sortFn: this.options.sortFn,\n          length: -1,\n          timeout: 1000,\n          onProgressCallback: this._onLoadProgress.bind(this)\n        })\n        await this._updateIndex()\n        this.events.emit('replicated', this.address.toString()) // TODO: inconsistent params, count param not emited\n      }\n      this.events.emit('ready', this.address.toString(), this._oplog.heads)\n    } else {\n      throw new Error(`Snapshot for ${this.address} not found!`)\n    }\n\n    return this\n  }\n\n  async _updateIndex () {\n    await this._index.updateIndex(this._oplog)\n  }\n\n  async syncLocal () {\n    const localHeads = await this._cache.get(this.localHeadsPath) || []\n    const remoteHeads = await this._cache.get(this.remoteHeadsPath) || []\n    const heads = localHeads.concat(remoteHeads)\n    for (let i = 0; i < heads.length; i++) {\n      const head = heads[i]\n      if (!this._oplog.heads.includes(head)) {\n        await this.load()\n        break\n      }\n    }\n  }\n\n  async _addOperation (data, { onProgressCallback, pin = false } = {}) {\n    async function addOperation () {\n      if (this._oplog) {\n        // check local cache for latest heads\n        if (this.options.syncLocal) {\n          await this.syncLocal()\n        }\n        const entry = await this._oplog.append(data, this.options.referenceCount, pin)\n        this._recalculateReplicationStatus(entry.clock.time)\n        await this._cache.set(this.localHeadsPath, [entry])\n        await this._updateIndex()\n        this.events.emit('write', this.address.toString(), entry, this._oplog.heads)\n        if (onProgressCallback) onProgressCallback(entry)\n        return entry.hash\n      }\n    }\n    return this._queue.add(addOperation.bind(this))\n  }\n\n  _addOperationBatch (data, batchOperation, lastOperation, onProgressCallback) {\n    throw new Error('Not implemented!')\n  }\n\n  _procEntry (entry) {\n    const { payload, hash } = entry\n    const { op } = payload\n    if (op) {\n      this.events.emit(`log.op.${op}`, this.address.toString(), hash, payload)\n    } else {\n      this.events.emit('log.op.none', this.address.toString(), hash, payload)\n    }\n    this.events.emit('log.op', op, this.address.toString(), hash, payload)\n  }\n\n  // Replication Status state updates\n  _recalculateReplicationProgress () {\n    this._replicationStatus.progress = Math.max(\n      Math.min(this._replicationStatus.progress + 1, this._replicationStatus.max),\n      this._oplog ? this._oplog.length : 0\n    )\n  }\n\n  _recalculateReplicationMax (max) {\n    this._replicationStatus.max = Math.max.apply(null, [\n      this.replicationStatus.max,\n      this._oplog ? this._oplog.length : 0,\n      (max || 0)\n    ])\n  }\n\n  _recalculateReplicationStatus (maxTotal) {\n    this._recalculateReplicationMax(maxTotal)\n    this._recalculateReplicationProgress()\n  }\n\n  // Loading progress callback\n  _onLoadProgress (entry) {\n    this._recalculateReplicationStatus(entry.clock.time)\n    this.events.emit('load.progress', this.address.toString(), entry.hash, entry, this.replicationStatus.progress, this.replicationStatus.max)\n  }\n}\n\nexport {\n  Store as default,\n  DefaultOptions\n}\n","// Set utils\nconst difference = (set1, set2) => new Set([...set1].filter(x => !set2.has(x)))\n\n// Poll utils\nconst sleep = (time) => new Promise(resolve => setTimeout(resolve, time))\n\nconst runWithDelay = async (func, topic, interval) => {\n  const peers = await func(topic)\n  await sleep(interval)\n  return peers\n}\n\nexport {\n  runWithDelay,\n  difference\n}\n","import { difference } from './utils.js'\nimport EventEmitter from 'events'\n\nconst DEFAULT_OPTIONS = {\n  start: true,\n  pollInterval: 1000,\n}\n\nexport default class IpfsPubsubPeerMonitor extends EventEmitter {\n  constructor (ipfsPubsub, topic, options) {\n    super()\n    this._pubsub = ipfsPubsub\n    this._topic = topic\n    this._options = Object.assign({}, DEFAULT_OPTIONS, options)\n    this._peers = []\n    this._interval = null\n\n    if (this._options.start)\n      this.start()\n  }\n\n  get started () { return this._interval !== null }\n  set started (val) { throw new Error(\"'started' is read-only\") }\n\n  start () {\n    if (this._interval)\n      this.stop()\n\n    this._interval = setInterval(\n      this._pollPeers.bind(this),\n      this._options.pollInterval\n    )\n    this._pollPeers()\n  }\n\n  stop () {\n    clearInterval(this._interval)\n    this._interval = null\n    this.removeAllListeners('error')\n    this.removeAllListeners('join')\n    this.removeAllListeners('leave')\n  }\n\n  async getPeers () {\n    this._peers = await this._pubsub.peers(this._topic)\n    return this._peers.slice()\n  }\n\n  hasPeer (peer) {\n    return this._peers.includes(peer)\n  }\n\n  async _pollPeers () {\n    try {\n      const peers = await this._pubsub.peers(this._topic)\n      IpfsPubsubPeerMonitor._emitJoinsAndLeaves(new Set(this._peers), new Set(peers), this)\n      this._peers = peers\n    } catch (err) {\n      clearInterval(this._interval)\n      this.emit('error', err)\n    }\n  }\n\n  static _emitJoinsAndLeaves (oldValues, newValues, events) {\n    const emitJoin = addedPeer => events.emit('join', addedPeer)\n    const emitLeave = removedPeer => events.emit('leave', removedPeer)\n    difference(newValues, oldValues).forEach(emitJoin)\n    difference(oldValues, newValues).forEach(emitLeave)\n  }\n}\n","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import {\n  bytes as binary,\n  CID\n} from './index.js';\nconst readonly = ({enumerable = true, configurable = false} = {}) => ({\n  enumerable,\n  configurable,\n  writable: false\n});\nconst links = function* (source, base) {\n  if (source == null)\n    return;\n  if (source instanceof Uint8Array)\n    return;\n  for (const [key, value] of Object.entries(source)) {\n    const path = [\n      ...base,\n      key\n    ];\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [\n            ...path,\n            index\n          ];\n          const cid = CID.asCID(element);\n          if (cid) {\n            yield [\n              elementPath.join('/'),\n              cid\n            ];\n          } else if (typeof element === 'object') {\n            yield* links(element, elementPath);\n          }\n        }\n      } else {\n        const cid = CID.asCID(value);\n        if (cid) {\n          yield [\n            path.join('/'),\n            cid\n          ];\n        } else {\n          yield* links(value, path);\n        }\n      }\n    }\n  }\n};\nconst tree = function* (source, base) {\n  if (source == null)\n    return;\n  for (const [key, value] of Object.entries(source)) {\n    const path = [\n      ...base,\n      key\n    ];\n    yield path.join('/');\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [\n            ...path,\n            index\n          ];\n          yield elementPath.join('/');\n          if (typeof element === 'object' && !CID.asCID(element)) {\n            yield* tree(element, elementPath);\n          }\n        }\n      } else {\n        yield* tree(value, path);\n      }\n    }\n  }\n};\nconst get = (source, path) => {\n  let node = source;\n  for (const [index, key] of path.entries()) {\n    node = node[key];\n    if (node == null) {\n      throw new Error(`Object has no property at ${ path.slice(0, index + 1).map(part => `[${ JSON.stringify(part) }]`).join('') }`);\n    }\n    const cid = CID.asCID(node);\n    if (cid) {\n      return {\n        value: cid,\n        remaining: path.slice(index + 1).join('/')\n      };\n    }\n  }\n  return { value: node };\n};\nclass Block {\n  constructor({cid, bytes, value}) {\n    if (!cid || !bytes || typeof value === 'undefined')\n      throw new Error('Missing required argument');\n    this.cid = cid;\n    this.bytes = bytes;\n    this.value = value;\n    this.asBlock = this;\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    });\n  }\n  links() {\n    return links(this.value, []);\n  }\n  tree() {\n    return tree(this.value, []);\n  }\n  get(path = '/') {\n    return get(this.value, path.split('/').filter(Boolean));\n  }\n}\nconst encode = async ({value, codec, hasher}) => {\n  if (typeof value === 'undefined')\n    throw new Error('Missing required argument \"value\"');\n  if (!codec || !hasher)\n    throw new Error('Missing required argument: codec or hasher');\n  const bytes = codec.encode(value);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\nconst decode = async ({bytes, codec, hasher}) => {\n  if (!bytes)\n    throw new Error('Missing required argument \"bytes\"');\n  if (!codec || !hasher)\n    throw new Error('Missing required argument: codec or hasher');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n};\nconst createUnsafe = ({\n  bytes,\n  cid,\n  value: maybeValue,\n  codec\n}) => {\n  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);\n  if (value === undefined)\n    throw new Error('Missing required argument, must either provide \"value\" or \"codec\"');\n  return new Block({\n    cid,\n    bytes,\n    value\n  });\n};\nconst create = async ({bytes, cid, hasher, codec}) => {\n  if (!bytes)\n    throw new Error('Missing required argument \"bytes\"');\n  if (!hasher)\n    throw new Error('Missing required argument \"hasher\"');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes');\n  }\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  });\n};\nexport {\n  encode,\n  decode,\n  create,\n  createUnsafe,\n  Block\n};","import { EventEmitter } from 'events'\n\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\nexport default class AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create (orbitdb, options) {}\n\n  /* Return the type for this controller */\n  static get type () {\n    throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class')\n  }\n\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n  get type () {\n    return this.constructor.type\n  }\n\n  /* Each Access Controller has some address to anchor to */\n  get address () {}\n\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n  async canAppend (entry, identityProvider) {}\n\n  /* Add and remove access */\n  async grant (access, identity) { return false }\n  async revoke (access, identity) { return false }\n\n  /* AC creation and loading */\n  async load (address) {}\n  /* Returns AC manifest parameters object */\n  async save () {}\n  /* Called when the database for this AC gets closed */\n  async close () {}\n}\n","import * as io from 'orbit-db-io'\n\nexport default class AccessControllerManifest {\n  constructor (type, params = {}) {\n    this.type = type\n    this.params = params\n  }\n\n  static async resolve (ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required')\n      }\n      return new AccessControllerManifest(options.type, { address: manifestHash })\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) { manifestHash = manifestHash.split('/')[2] }\n      const { type, params } = await io.read(ipfs, manifestHash)\n      return new AccessControllerManifest(type, params)\n    }\n  }\n\n  static async create (ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address\n    }\n    const manifest = {\n      type,\n      params\n    }\n    return io.write(ipfs, 'dag-cbor', manifest)\n  }\n}\n","import * as io from 'orbit-db-io'\nimport { Buffer } from 'safe-buffer'\nimport AccessController from './interface.js'\nconst type = 'legacy-ipfs'\n\nexport default class LegacyIPFSAccessController extends AccessController {\n  constructor (ipfs, options) {\n    super()\n    this._ipfs = ipfs\n    this._write = Array.from(options.write || [])\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Return a Set of keys that have `access` capability\n  get write () {\n    return this._write\n  }\n\n  async canAppend (entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.key\n    if (this.write.includes(publicKey) ||\n      this.write.includes('*')) {\n      return true\n    }\n    return false\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) { address = address.split('/')[2] }\n\n    try {\n      const access = await io.read(this._ipfs, address)\n      this._write = access.write\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.load ERROR:', e)\n    }\n  }\n\n  async save (options) {\n    let cid\n    const access = { admin: [], write: this.write, read: [] }\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), { format: 'dag-pb' })\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.save ERROR:', e)\n    }\n    // return the manifest data\n    return { address: cid, skipManifest: true }\n  }\n\n  static async create (orbitdb, options = {}) {\n    options = { ...options, ...{ write: options.write || [orbitdb.identity.publicKey] } }\n    return new LegacyIPFSAccessController(orbitdb._ipfs, options)\n  }\n}\n","import * as io from 'orbit-db-io'\n\nconst read = async (ipfs, cid, options = {}) => {\n  const access = await io.read(ipfs, cid, options)\n  return (typeof access.write === 'string') ? JSON.parse(access.write) : access.write // v0 access.write not stringified\n}\n\nconst write = io.write\n\nexport {\n  read,\n  write\n}\n","import * as io from '../utils/index.js'\nimport AccessController from './interface.js'\nconst type = 'ipfs'\n\nexport default class IPFSAccessController extends AccessController {\n  constructor (ipfs, options) {\n    super()\n    this._ipfs = ipfs\n    this._write = Array.from(options.write || [])\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Return a Set of keys that have `access` capability\n  get write () {\n    return this._write\n  }\n\n  async canAppend (entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const key = entry.identity.id\n    if (this.write.includes(key) || this.write.includes('*')) {\n      // check identity is valid\n      return identityProvider.verifyIdentity(entry.identity)\n    }\n    return false\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) { address = address.split('/')[2] }\n\n    try {\n      this._write = await io.read(this._ipfs, address)\n    } catch (e) {\n      console.log('IPFSAccessController.load ERROR:', e)\n    }\n  }\n\n  async save () {\n    let cid\n    try {\n      cid = await io.write(this._ipfs, 'dag-cbor', { write: JSON.stringify(this.write, null, 2) })\n    } catch (e) {\n      console.log('IPFSAccessController.save ERROR:', e)\n    }\n    // return the manifest data\n    return { address: cid }\n  }\n\n  static async create (orbitdb, options = {}) {\n    options = { ...options, ...{ write: options.write || [orbitdb.identity.id] } }\n    return new IPFSAccessController(orbitdb._ipfs, options)\n  }\n}\n","import path from 'path'\n\n// Make sure the given address has '/_access' as the last part\nexport default address => {\n  const suffix = address.toString().split('/').pop()\n  return suffix === '_access'\n    ? address\n    : path.join(address, '/_access')\n}\n","import pMapSeries from 'p-map-series'\nimport AccessController from './interface.js'\nimport ensureAddress from '../utils/ensure-ac-address.js'\n\nconst type = 'orbitdb'\n\nexport default class OrbitDBAccessController extends AccessController {\n  constructor (orbitdb, options) {\n    super()\n    this._orbitdb = orbitdb\n    this._db = null\n    this._options = options || {}\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Returns the address of the OrbitDB used as the AC\n  get address () {\n    return this._db.address\n  }\n\n  // Return true if entry is allowed to be added to the database\n  async canAppend (entry, identityProvider) {\n    // Write keys and admins keys are allowed\n    const access = new Set([...this.get('write'), ...this.get('admin')])\n    // If the ACL contains the writer's public key or it contains '*'\n    if (access.has(entry.identity.id) || access.has('*')) {\n      const verifiedIdentity = await identityProvider.verifyIdentity(entry.identity)\n      // Allow access if identity verifies\n      return verifiedIdentity\n    }\n\n    return false\n  }\n\n  get capabilities () {\n    if (this._db) {\n      const capabilities = this._db.index\n\n      const toSet = (e) => {\n        const key = e[0]\n        capabilities[key] = new Set([...(capabilities[key] || []), ...e[1]])\n      }\n\n      // Merge with the access controller of the database\n      // and make sure all values are Sets\n      Object.entries({\n        ...capabilities,\n        // Add the root access controller's 'write' access list\n        // as admins on this controller\n        ...{ admin: new Set([...(capabilities.admin || []), ...this._db.access.write]) }\n      }).forEach(toSet)\n\n      return capabilities\n    }\n    return {}\n  }\n\n  get (capability) {\n    return this.capabilities[capability] || new Set([])\n  }\n\n  async close () {\n    await this._db.close()\n  }\n\n  async load (address) {\n    if (this._db) { await this._db.close() }\n\n    // Force '<address>/_access' naming for the database\n    this._db = await this._orbitdb.keyvalue(ensureAddress(address), {\n      // use ipfs controller as a immutable \"root controller\"\n      accessController: {\n        type: 'ipfs',\n        write: this._options.admin || [this._orbitdb.identity.id]\n      },\n      sync: true\n    })\n\n    this._db.events.on('ready', this._onUpdate.bind(this))\n    this._db.events.on('write', this._onUpdate.bind(this))\n    this._db.events.on('replicated', this._onUpdate.bind(this))\n\n    await this._db.load()\n  }\n\n  async save () {\n    // return the manifest data\n    return {\n      address: this._db.address.toString()\n    }\n  }\n\n  async hasCapability (capability, identity) {\n    // Write keys and admins keys are allowed\n    const access = new Set(this.get(capability))\n    return access.has(identity.id) || access.has('*')\n  }\n\n  async grant (capability, key) {\n    // Merge current keys with the new key\n    const capabilities = new Set([...(this._db.get(capability) || []), ...[key]])\n    await this._db.put(capability, Array.from(capabilities.values()))\n  }\n\n  async revoke (capability, key) {\n    const capabilities = new Set(this._db.get(capability) || [])\n    capabilities.delete(key)\n    if (capabilities.size > 0) {\n      await this._db.put(capability, Array.from(capabilities.values()))\n    } else {\n      await this._db.del(capability)\n    }\n  }\n\n  /* Private methods */\n  _onUpdate () {\n    this.emit('updated')\n  }\n\n  /* Factory */\n  static async create (orbitdb, options = {}) {\n    const ac = new OrbitDBAccessController(orbitdb, options)\n    await ac.load(options.address || options.name || 'default-access-controller')\n\n    // Add write access from options\n    if (options.write && !options.address) {\n      await pMapSeries(options.write, async (e) => ac.grant('write', e))\n    }\n\n    return ac\n  }\n}\n","import AccessController from './access-controllers/interface.js'\nimport AccessControllerManifest from './access-controllers/manifest.js'\nimport LegacyIPFSAccessController from './access-controllers/legacy-ipfs.js'\nimport IPFSAccessController from './access-controllers/ipfs.js'\nimport OrbitDBAccessController from './access-controllers/orbitdb.js'\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n}\n\nconst getHandlerFor = (type) => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`)\n  }\n  return supportedTypes[type]\n}\n\nexport default class AccessControllers {\n  static get AccessController () { return AccessController }\n\n  static isSupported (type) {\n    return Object.keys(supportedTypes).includes(type)\n  }\n\n  static addAccessController (options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option')\n    }\n\n    if (!options.AccessController.type ||\n      typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.')\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController\n  }\n\n  static addAccessControllers (options) {\n    const accessControllers = options.AccessControllers\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option')\n    }\n\n    accessControllers.forEach((accessController) => {\n      AccessControllers.addAccessController({ AccessController: accessController })\n    })\n  }\n\n  static removeAccessController (type) {\n    delete supportedTypes[type]\n  }\n\n  static async resolve (orbitdb, manifestAddress, options = {}) {\n    const { type, params } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options)\n    const AccessController = getHandlerFor(type)\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params))\n    await accessController.load(params.address)\n    return accessController\n  }\n\n  static async create (orbitdb, type, options = {}) {\n    const AccessController = getHandlerFor(type)\n    const ac = await AccessController.create(orbitdb, options)\n    const params = await ac.save()\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params)\n    return hash\n  }\n}\n","import path from 'path'\nimport { CID } from 'multiformats/cid'\n\nconst notEmpty = e => e !== '' && e !== ' '\n\nexport default class OrbitDBAddress {\n  constructor (root, path) {\n    this.root = root\n    this.path = path\n  }\n\n  toString () {\n    return OrbitDBAddress.join(this.root, this.path)\n  }\n\n  static isValid (address) {\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const containsProtocolPrefix = (e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb')\n\n    const parts = address.toString()\n      .split('/')\n      .filter(containsProtocolPrefix)\n      .filter(notEmpty)\n\n    let accessControllerHash\n\n    const validateHash = (hash) => {\n      const prefixes = ['zd', 'Qm', 'ba', 'k5']\n      for (const p of prefixes) {\n        if (hash.indexOf(p) > -1) {\n          return true\n        }\n      }\n      return false\n    }\n\n    try {\n      accessControllerHash = validateHash(parts[0])\n        ? CID.parse(parts[0]).toString()\n        : null\n    } catch (e) {\n      return false\n    }\n\n    return accessControllerHash !== null\n  }\n\n  static parse (address) {\n    if (!address) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    if (!OrbitDBAddress.isValid(address)) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const parts = address.toString()\n      .split('/')\n      .filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb'))\n      .filter(e => e !== '' && e !== ' ')\n\n    return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'))\n  }\n\n  static join (...paths) {\n    return (path.posix || path).join('/orbitdb', ...paths)\n  }\n}\n","import path from 'path'\nimport * as io from 'orbit-db-io'\n\n// Creates a DB manifest file and saves it in IPFS\nexport default async (ipfs, name, type, accessControllerAddress, options) => {\n  const manifest = Object.assign({\n    name,\n    type,\n    accessController: (path.posix || path).join('/ipfs', accessControllerAddress)\n  },\n  // meta field is only added to manifest if options.meta is defined\n  options.meta !== undefined ? { meta: options.meta } : {}\n  )\n\n  return io.write(ipfs, options.format || 'dag-cbor', manifest, options)\n}\n","export default 'ipfs-pubsub-direct-channel/v1'\n","import { Buffer } from 'safe-buffer'\n\nexport default (_message) => {\n  let message = _message\n  if (!Buffer.isBuffer(message)) {\n    message = Buffer.from(message)\n  }\n  return message\n}\n","export default async (ipfs, peersToWait, topic, isClosed) => {\n  const checkPeers = async () => {\n    const peers = await ipfs.pubsub.peers(topic)\n    const idPeersToWait = peersToWait.map(e => String(e))\n    const idPeers = peers.map(e => String(e))\n    const hasAllPeers = idPeersToWait.map((e) => idPeers.includes(e)).filter((e) => e === false).length === 0\n    return hasAllPeers\n  }\n\n  if (await checkPeers()) {\n    return Promise.resolve()\n  }\n\n  return new Promise((resolve, reject) => {\n    const interval = setInterval(async () => {\n      try {\n        if (isClosed()) {\n          clearInterval(interval)\n        } else if (await checkPeers()) {\n          clearInterval(interval)\n          resolve()\n        }\n      } catch (e) {\n        reject(e)\n      }\n    }, 100)\n  })\n}\n","export default async (ipfs) => {\n  const peerInfo = await ipfs.id()\n  return peerInfo.id\n}\n","import EventEmitter from 'events'\nimport PROTOCOL from './protocol.js'\nimport encode from './encoding.js'\nimport waitForPeers from './wait-for-peers.js'\nimport getPeerID from './get-peer-id.js'\n\n/**\n * Communication channel over Pubsub between two IPFS nodes\n */\nexport default class DirectChannel extends EventEmitter {\n  constructor (ipfs, receiverID) {\n    super()\n\n    // IPFS instance to use internally\n    this._ipfs = ipfs\n\n    if (!ipfs.pubsub) {\n      throw new Error('This IPFS node does not support pubsub.')\n    }\n\n    this._closed = false\n    this._isClosed = () => this._closed\n    this._receiverID = receiverID\n\n    if (!this._receiverID) {\n      throw new Error('Receiver ID was undefined')\n    }\n    // See _setup() for more state initialization\n  }\n\n  /**\n   * Channel ID\n   * @return {[String]} Channel's ID\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Peers participating in this channel\n   * @return {[Array]} Array of peer IDs participating in this channel\n   */\n  get peers () {\n    return this._peers\n  }\n\n  async connect () {\n    await waitForPeers(this._ipfs, [this._receiverID], this._id, this._isClosed)\n  }\n\n  /**\n   * Send a message to the other peer\n   * @param  {[Any]} message Payload\n   */\n  async send (message) {\n    if (this._closed) return\n    const m = encode(message)\n    await this._ipfs.pubsub.publish(this._id, m)\n  }\n\n  /**\n   * Close the channel\n   */\n  close () {\n    this._closed = true\n    this.removeAllListeners('message')\n    this._ipfs.pubsub.unsubscribe(this._id, this._messageHandler)\n  }\n\n  async _setup () {\n    this._senderID = await getPeerID(this._ipfs)\n\n    // Channel's participants\n    this._peers = Array.from([this._senderID, this._receiverID]).sort()\n\n    // ID of the channel is \"<peer1 id>/<peer 2 id>\"\"\n    this._id = '/' + PROTOCOL + '/' + this._peers.join('/')\n\n    // Function to use to handle incoming messages\n    this._messageHandler = message => {\n      // Make sure the message is coming from the correct peer\n      const isValid = message && String(message.from) === String(this._receiverID)\n      // Filter out all messages that didn't come from the second peer\n      if (isValid) {\n        this.emit('message', message)\n      }\n    }\n  }\n\n  async _openChannel () {\n    this._closed = false\n    await this._setup()\n    await this._ipfs.pubsub.subscribe(this._id, this._messageHandler)\n  }\n\n  static async open (ipfs, receiverID) {\n    const channel = new DirectChannel(ipfs, receiverID)\n    await channel._openChannel()\n    return channel\n  }\n}\n","import Channel from 'ipfs-pubsub-1on1'\nimport Logger from 'logplease'\nconst logger = Logger.create('exchange-heads', { color: Logger.Colors.Yellow })\nLogger.setLogLevel('ERROR')\n\nconst getHeadsForDatabase = async store => {\n  if (!(store && store._cache)) return []\n  const localHeads = await store._cache.get(store.localHeadsPath) || []\n  const remoteHeads = await store._cache.get(store.remoteHeadsPath) || []\n  return [...localHeads, ...remoteHeads]\n}\n\nexport default async (ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated) => {\n  const _handleMessage = message => {\n    const msg = JSON.parse(Buffer.from(message.data).toString())\n    const { address, heads } = msg\n    onMessage(address, heads)\n  }\n\n  let channel = getDirectConnection(peer)\n  if (!channel) {\n    try {\n      logger.debug(`Create a channel to ${peer}`)\n      channel = await Channel.open(ipfs, peer)\n      channel.on('message', _handleMessage)\n      logger.debug(`Channel created to ${peer}`)\n      onChannelCreated(channel)\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n\n  // Wait for the direct channel to be fully connected\n  await channel.connect()\n  logger.debug(`Connected to ${peer}`)\n\n  // Send the heads if we have any\n  const heads = await getHeadsForDatabase(getStore(address))\n  logger.debug(`Send latest heads of '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n  if (heads) {\n    await channel.send(JSON.stringify({ address, heads }))\n  }\n\n  return channel\n}\n","export default (arg) => arg !== undefined && arg !== null\n","/* eslint-disable */\nimport { isElectronMain } from 'wherearewe'\nimport * as fs_ from 'fs'\n\nexport const fs = (!isElectronMain && (typeof window === 'object' || typeof self === 'object'))\n  ? null\n  : fs_\n\nexport default fs\n","import path from 'path'\nimport fs from '../fs-shim.js'\nimport Cache from 'orbit-db-cache'\nimport Logger from 'logplease'\nconst logger = Logger.create('orbit-db')\nLogger.setLogLevel('ERROR')\n\nexport default async function migrate (OrbitDB, options, dbAddress) {\n  let oldCache = options.cache || (OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null)\n  let oldStore\n\n  if (!oldCache) {\n    const addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path)\n    if (fs && fs.existsSync && !fs.existsSync(addr)) return\n    oldStore = await OrbitDB.storage.createStore(addr)\n    oldCache = new Cache(oldStore)\n  }\n  const _localHeads = await oldCache.get('_localHeads')\n  if (!_localHeads) return\n\n  const keyRoot = dbAddress.toString()\n  logger.debug('Attempting to migrate from old cache location')\n  const migrationKeys = [\n    '_remoteHeads',\n    '_localHeads',\n    'snapshot',\n    'queue'\n  ]\n\n  for (const i in migrationKeys) {\n    try {\n      const key = path.join(keyRoot, migrationKeys[i])\n      const val = await oldCache.get(migrationKeys[i])\n      if (val) await options.cache.set(key, val)\n    } catch (e) {\n      logger.debug(e.message)\n    }\n  }\n  await options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root)\n  if (oldStore) await oldStore.close()\n}\n","import from021To022 from './0.21-0.22.js'\n\nconst migrations = [from021To022]\n\nexport const run = async (OrbitDB, options, dbAddress) => {\n  for (let i = 0; i < migrations.length; i++) {\n    await migrations[i](OrbitDB, options, dbAddress)\n  }\n}\n","import path from 'path'\nimport EventStore from 'orbit-db-eventstore'\nimport FeedStore from 'orbit-db-feedstore'\nimport KeyValueStore from 'orbit-db-kvstore'\nimport CounterStore from 'orbit-db-counterstore'\nimport Store from 'orbit-db-store'\nimport DocumentStore from 'orbit-db-docstore'\nimport Pubsub from 'orbit-db-pubsub'\nimport Cache from 'orbit-db-cache'\nimport Keystore from 'orbit-db-keystore'\nimport Identities from 'orbit-db-identity-provider'\nimport DefaultAccessControllers from 'orbit-db-access-controllers'\nimport OrbitDBAddress from './orbit-db-address.js'\nimport createDBManifest from './db-manifest.js'\nimport exchangeHeads from './exchange-heads.js'\nimport { isDefined, io } from './utils/index.js'\nimport Storage from 'orbit-db-storage-adapter'\nimport * as migrations from './migrations/index.js'\nimport Logger from 'logplease'\n\nconst logger = Logger.create('orbit-db')\nLogger.setLogLevel('ERROR')\n\n// Mapping for 'database type' -> Class\nconst databaseTypes = {\n  counter: CounterStore,\n  eventlog: EventStore,\n  feed: FeedStore,\n  docstore: DocumentStore,\n  keyvalue: KeyValueStore\n}\n\nconst defaultTimeout = 30000 // 30 seconds\nlet AccessControllers = DefaultAccessControllers\n\nexport default class OrbitDB {\n  constructor (ipfs, identity, options = {}) {\n    if (!isDefined(ipfs)) { throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance') }\n\n    if (!isDefined(identity)) { throw new Error('identity is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance') }\n\n    this._ipfs = ipfs\n    this.identity = identity\n    this.id = options.peerId\n    this._pubsub = !options.offline\n      ? new (\n        options.broker ? options.broker : Pubsub\n      )(this._ipfs, this.id)\n      : null\n    this.directory = options.directory || './orbitdb'\n    this.storage = options.storage\n    this._directConnections = {}\n\n    this.caches = {}\n    this.caches[this.directory] = { cache: options.cache, handlers: new Set() }\n    this.keystore = options.keystore\n    this.stores = {}\n\n    // AccessControllers module can be passed in to enable\n    // testing with orbit-db-access-controller\n    AccessControllers = options.AccessControllers || AccessControllers\n  }\n\n  static get Pubsub () { return Pubsub }\n  static get Cache () { return Cache }\n  static get Keystore () { return Keystore }\n  static get Identities () { return Identities }\n  static get AccessControllers () { return AccessControllers }\n  static get Storage () { return Storage }\n  static get OrbitDBAddress () { return OrbitDBAddress }\n\n  static get Store () { return Store }\n  static get EventStore () { return EventStore }\n  static get FeedStore () { return FeedStore }\n  static get KeyValueStore () { return KeyValueStore }\n  static get CounterStore () { return CounterStore }\n  static get DocumentStore () { return DocumentStore }\n\n  get cache () { return this.caches[this.directory].cache }\n\n  static async createInstance (ipfs, options = {}) {\n    if (!isDefined(ipfs)) { throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance') }\n\n    if (options.offline === undefined) {\n      options.offline = false\n    }\n\n    if (options.offline && !options.id) {\n      throw new Error('Offline mode requires passing an `id` in the options')\n    }\n\n    const { id } = options.id || options.offline ? ({ id: options.id }) : await ipfs.id()\n\n    if (!options.directory) { options.directory = './orbitdb' }\n\n    if (!options.storage) {\n      const storageOptions = {}\n\n      // Create default `level` store\n      options.storage = Storage(null, storageOptions)\n    }\n\n    if (options.identity && options.identity.provider.keystore) {\n      options.keystore = options.identity.provider.keystore\n    }\n\n    if (!options.keystore) {\n      const keystorePath = path.join(options.directory, typeof id !== 'object' ? id : id.toString(), '/keystore')\n      const keyStorage = await options.storage.createStore(keystorePath)\n      options.keystore = new Keystore(keyStorage)\n    }\n\n    if (!options.identity) {\n      options.identity = await Identities.createIdentity({\n        id,\n        keystore: options.keystore\n      })\n    }\n\n    if (!options.cache) {\n      const cachePath = path.join(options.directory, typeof id !== 'object' ? id : id.toString(), '/cache')\n      const cacheStorage = await options.storage.createStore(cachePath)\n      options.cache = new Cache(cacheStorage)\n    }\n\n    const finalOptions = Object.assign({}, options, { peerId: typeof id !== 'object' ? id : id.toString() })\n    return new OrbitDB(ipfs, options.identity, finalOptions)\n  }\n\n  /* Databases */\n  async feed (address, options = {}) {\n    options = Object.assign({ create: true, type: 'feed' }, options)\n    return this.open(address, options)\n  }\n\n  async log (address, options = {}) {\n    options = Object.assign({ create: true, type: 'eventlog' }, options)\n    return this.open(address, options)\n  }\n\n  async eventlog (address, options = {}) {\n    return this.log(address, options)\n  }\n\n  async keyvalue (address, options = {}) {\n    options = Object.assign({ create: true, type: 'keyvalue' }, options)\n    return this.open(address, options)\n  }\n\n  async kvstore (address, options = {}) {\n    return this.keyvalue(address, options)\n  }\n\n  async counter (address, options = {}) {\n    options = Object.assign({ create: true, type: 'counter' }, options)\n    return this.open(address, options)\n  }\n\n  async docs (address, options = {}) {\n    options = Object.assign({ create: true, type: 'docstore' }, options)\n    return this.open(address, options)\n  }\n\n  async docstore (address, options = {}) {\n    return this.docs(address, options)\n  }\n\n  /**\n   * Close network connections, the keystore, databases and caches opened by this OrbitDB instance.\n   */\n  async disconnect () {\n    // Close a direct connection and remove it from internal state\n\n    for (const connection of Object.values(this._directConnections)) {\n      connection.close()\n    }\n\n    this._directConnections = {}\n\n    // Disconnect from pubsub\n    if (this._pubsub) {\n      await this._pubsub.disconnect()\n    }\n\n    // close keystore\n    await this.keystore.close()\n\n    // Close all open databases\n    const databases = Object.values(this.stores)\n    for (const db of databases) {\n      await db.close()\n    }\n    this.stores = {}\n\n    const caches = Object.values(this.caches)\n    for (const cache of caches) {\n      await cache.cache.close()\n    }\n    this.caches = {}\n\n    // Remove all databases from the state\n    this.stores = {}\n  }\n\n  // Alias for disconnect()\n  async stop () {\n    await this.disconnect()\n  }\n\n  async _createCache (path) {\n    const cacheStorage = await this.storage.createStore(path)\n    return new Cache(cacheStorage)\n  }\n\n  /* Private methods */\n  async _createStore (type, address, options) {\n    // Get the type -> class mapping\n    const Store = databaseTypes[type]\n\n    if (!Store) { throw new Error(`Invalid database type '${type}'`) }\n\n    let accessController\n    if (options.accessControllerAddress) {\n      accessController = await AccessControllers.resolve(this, options.accessControllerAddress, options.accessController)\n    }\n\n    const opts = Object.assign({ replicate: true }, options, {\n      accessController,\n      cache: options.cache,\n      onClose: this._onClose.bind(this),\n      onDrop: this._onDrop.bind(this),\n      onLoad: this._onLoad.bind(this)\n    })\n    const identity = options.identity || this.identity\n\n    const store = new Store(this._ipfs, identity, address, opts)\n    store.events.on('write', this._onWrite.bind(this))\n\n    // ID of the store is the address as a string\n    const addr = address.toString()\n    this.stores[addr] = store\n\n    // Subscribe to pubsub to get updates from peers,\n    // this is what hooks us into the message propagation layer\n    // and the p2p network\n    if (opts.replicate && this._pubsub) { await this._pubsub.subscribe(addr, this._onMessage.bind(this), this._onPeerConnected.bind(this)) }\n\n    return store\n  }\n\n  // Callback for local writes to the database. We the update to pubsub.\n  _onWrite (address, entry, heads) {\n    if (!heads) throw new Error(\"'heads' not defined\")\n    if (this._pubsub) this._pubsub.publish(address, heads)\n  }\n\n  // Callback for receiving a message from the network\n  async _onMessage (address, heads, peer) {\n    const store = this.stores[address]\n    try {\n      logger.debug(`Received ${heads.length} heads for '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n      if (store && heads) {\n        if (heads.length > 0) {\n          await store.sync(heads)\n        }\n        store.events.emit('peer.exchanged', peer, address, heads)\n      }\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n\n  // Callback for when a peer connected to a database\n  async _onPeerConnected (address, peer) {\n    logger.debug(`New peer '${peer}' connected to '${address}'`)\n\n    const getStore = address => this.stores[address]\n    const getDirectConnection = peer => this._directConnections[peer]\n    const onChannelCreated = channel => { this._directConnections[channel._receiverID] = channel }\n\n    const onMessage = (address, heads) => this._onMessage(address, heads, peer)\n\n    await exchangeHeads(\n      this._ipfs,\n      address,\n      peer,\n      getStore,\n      getDirectConnection,\n      onMessage,\n      onChannelCreated\n    )\n\n    if (getStore(address)) { getStore(address).events.emit('peer', peer) }\n  }\n\n  // Callback when database was closed\n  async _onClose (db) {\n    const address = db.address.toString()\n    logger.debug(`Close ${address}`)\n\n    // Unsubscribe from pubsub\n    if (this._pubsub) {\n      await this._pubsub.unsubscribe(address)\n    }\n\n    const dir = db && db.options.directory ? db.options.directory : this.directory\n    const cache = this.caches[dir]\n\n    if (cache && cache.handlers.has(address)) {\n      cache.handlers.delete(address)\n      if (!cache.handlers.size) await cache.cache.close()\n    }\n\n    delete this.stores[address]\n  }\n\n  async _onDrop (db) {\n    const address = db.address.toString()\n    const dir = db && db.options.directory ? db.options.directory : this.directory\n    await this._requestCache(address, dir, db._cache)\n  }\n\n  async _onLoad (db) {\n    const address = db.address.toString()\n    const dir = db && db.options.directory ? db.options.directory : this.directory\n    await this._requestCache(address, dir, db._cache)\n    this.stores[address] = db\n  }\n\n  async _determineAddress (name, type, options = {}) {\n    if (!OrbitDB.isValidType(type)) { throw new Error(`Invalid database type '${type}'`) }\n\n    if (OrbitDBAddress.isValid(name)) { throw new Error('Given database name is an address. Please give only the name of the database!') }\n\n    // Create an AccessController, use IPFS AC as the default\n    options.accessController = Object.assign({}, { name, type: 'ipfs' }, options.accessController)\n    const accessControllerAddress = await AccessControllers.create(this, options.accessController.type, options.accessController || {})\n\n    // Save the manifest to IPFS\n    const manifestHash = await createDBManifest(this._ipfs, name, type, accessControllerAddress, options)\n\n    // Create the database address\n    return OrbitDBAddress.parse(OrbitDBAddress.join(manifestHash, name))\n  }\n\n  /* Create and Open databases */\n\n  /*\n    options = {\n      accessController: { write: [] } // array of keys that can write to this database\n      overwrite: false, // whether we should overwrite the existing database if it exists\n    }\n  */\n  async create (name, type, options = {}) {\n    logger.debug('create()')\n\n    logger.debug(`Creating database '${name}' as ${type}`)\n\n    // Create the database address\n    const dbAddress = await this._determineAddress(name, type, options)\n\n    options.cache = await this._requestCache(dbAddress.toString(), options.directory)\n\n    // Check if we have the database locally\n    const haveDB = await this._haveLocalData(options.cache, dbAddress)\n\n    if (haveDB && !options.overwrite) { throw new Error(`Database '${dbAddress}' already exists!`) }\n\n    await this._migrate({ ...options, ...{ directory: this.directory } }, dbAddress)\n\n    // Save the database locally\n    await this._addManifestToCache(options.cache, dbAddress)\n\n    logger.debug(`Created database '${dbAddress}'`)\n\n    // Open the database\n    return this.open(dbAddress, options)\n  }\n\n  async determineAddress (name, type, options = {}) {\n    const opts = Object.assign({}, { onlyHash: true }, options)\n    return this._determineAddress(name, type, opts)\n  }\n\n  async _requestCache (address, directory, existingCache) {\n    const dir = directory || this.directory\n    if (!this.caches[dir]) {\n      const newCache = existingCache || await this._createCache(dir)\n      this.caches[dir] = { cache: newCache, handlers: new Set() }\n    }\n    this.caches[dir].handlers.add(address)\n    const cache = this.caches[dir].cache\n\n    // \"Wake up\" the caches if they need it\n    if (cache) await cache.open()\n\n    return cache\n  }\n\n  /*\n      options = {\n        localOnly: false // if set to true, throws an error if database can't be found locally\n        create: false // whether to create the database\n        type: TODO\n        overwrite: TODO\n\n      }\n   */\n  async open (address, options = {}) {\n    logger.debug('open()')\n\n    options = Object.assign({ localOnly: false, create: false }, options)\n    logger.debug(`Open database '${address}'`)\n\n    // If address is just the name of database, check the options to crate the database\n    if (!OrbitDBAddress.isValid(address)) {\n      if (!options.create) {\n        throw new Error('\\'options.create\\' set to \\'false\\'. If you want to create a database, set \\'options.create\\' to \\'true\\'.')\n      } else if (options.create && !options.type) {\n        throw new Error(`Database type not provided! Provide a type with 'options.type' (${OrbitDB.databaseTypes.join('|')})`)\n      } else {\n        logger.warn(`Not a valid OrbitDB address '${address}', creating the database`)\n        options.overwrite = options.overwrite ? options.overwrite : true\n        return this.create(address, options.type, options)\n      }\n    }\n\n    // Parse the database address\n    const dbAddress = OrbitDBAddress.parse(address)\n\n    // If database is already open, return early by returning the instance\n    // if (this.stores[dbAddress]) {\n    //   return this.stores[dbAddress]\n    // }\n\n    options.cache = await this._requestCache(dbAddress.toString(), options.directory)\n\n    // Check if we have the database\n    const haveDB = await this._haveLocalData(options.cache, dbAddress)\n\n    logger.debug((haveDB ? 'Found' : 'Didn\\'t find') + ` database '${dbAddress}'`)\n\n    // If we want to try and open the database local-only, throw an error\n    // if we don't have the database locally\n    if (options.localOnly && !haveDB) {\n      logger.warn(`Database '${dbAddress}' doesn't exist!`)\n      throw new Error(`Database '${dbAddress}' doesn't exist!`)\n    }\n\n    logger.debug(`Loading Manifest for '${dbAddress}'`)\n\n    let manifest\n    try {\n      // Get the database manifest from IPFS\n      manifest = await io.read(this._ipfs, dbAddress.root, { timeout: options.timeout || defaultTimeout })\n      logger.debug(`Manifest for '${dbAddress}':\\n${JSON.stringify(manifest, null, 2)}`)\n    } catch (e) {\n      if (e.name === 'TimeoutError' && e.code === 'ERR_TIMEOUT') {\n        console.error(e)\n        throw new Error('ipfs unable to find and fetch manifest for this address.')\n      } else {\n        throw e\n      }\n    }\n\n    if (manifest.name !== dbAddress.path) {\n      logger.warn(`Manifest name '${manifest.name}' and path name '${dbAddress.path}' do not match`)\n    }\n\n    // Make sure the type from the manifest matches the type that was given as an option\n    if (options.type && manifest.type !== options.type) {\n      throw new Error(`Database '${dbAddress}' is type '${manifest.type}' but was opened as '${options.type}'`)\n    }\n\n    // Save the database locally\n    await this._addManifestToCache(options.cache, dbAddress)\n\n    // Open the the database\n    options = Object.assign({}, options, { accessControllerAddress: manifest.accessController, meta: manifest.meta })\n    return this._createStore(options.type || manifest.type, dbAddress, options)\n  }\n\n  // Save the database locally\n  async _addManifestToCache (cache, dbAddress) {\n    await cache.set(path.join(dbAddress.toString(), '_manifest'), dbAddress.root)\n    logger.debug(`Saved manifest to IPFS as '${dbAddress.root}'`)\n  }\n\n  /**\n   * Check if we have the database, or part of it, saved locally\n   * @param  {[Cache]} cache [The OrbitDBCache instance containing the local data]\n   * @param  {[OrbitDBAddress]} dbAddress [Address of the database to check]\n   * @return {[Boolean]} [Returns true if we have cached the db locally, false if not]\n   */\n  async _haveLocalData (cache, dbAddress) {\n    if (!cache) {\n      return false\n    }\n\n    const addr = dbAddress.toString()\n    const data = await cache.get(path.join(addr, '_manifest'))\n    return data !== undefined && data !== null\n  }\n\n  /**\n   * Runs all migrations inside the src/migration folder\n   * @param Object options  Options to pass into the migration\n   * @param OrbitDBAddress dbAddress Address of database in OrbitDBAddress format\n   */\n  async _migrate (options, dbAddress) {\n    await migrations.run(this, options, dbAddress)\n  }\n\n  /**\n   * Returns supported database types as an Array of strings\n   * Eg. [ 'counter', 'eventlog', 'feed', 'docstore', 'keyvalue']\n   * @return {[Array]} [Supported database types]\n   */\n  static get databaseTypes () {\n    return Object.keys(databaseTypes)\n  }\n\n  static isValidType (type) {\n    return Object.keys(databaseTypes).includes(type)\n  }\n\n  static addDatabaseType (type, store) {\n    if (databaseTypes[type]) throw new Error(`Type already exists: ${type}`)\n    databaseTypes[type] = store\n  }\n\n  static getDatabaseTypes () {\n    return databaseTypes\n  }\n\n  static isValidAddress (address) {\n    return OrbitDBAddress.isValid(address)\n  }\n\n  static parseAddress (address) {\n    return OrbitDBAddress.parse(address)\n  }\n}\n\nOrbitDB.prototype.AccessControllers = AccessControllers\nOrbitDB.prototype.Identities = Identities\nOrbitDB.prototype.Keystore = Keystore\n"],"names":["isElectron","require$$0","IS_ENV_WITH_DOM","IS_ELECTRON","IS_BROWSER","IS_ELECTRON_MAIN","IS_ELECTRON_RENDERER","IS_NODE","require","process","IS_WEBWORKER","IS_TEST","IS_REACT_NATIVE","env","base","ALPHABET","name","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","str","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","src","_brrp__multiformats_scope_baseX","empty","fromHex","hex","hexes","b","equals","aa","bb","ii","coerce","o","fromString","toString","Encoder$2","prefix","baseEncode","bytes","Decoder$2","baseDecode","text","decoder","or","ComposedDecoder$2","decoders","input","left","right","ComposedDecoder","Codec$2","Encoder","Decoder","from","Codec","baseX","alphabet","basex","bitsPerChar","codes","end","out","bits","written","value","data","pad","mask","rfc4648","base58btc","base58flickr","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base64","base64pad","base64url","base64urlpad","$Reader","$protobuf","$Writer","$util","$root","Data","p","ks","m","w","r","l","c","t","c2","d","n","valuesById","values","UnixTime","Metadata","PBData","Pb.Data","types","dirTypes","DEFAULT_FILE_MODE","DEFAULT_DIRECTORY_MODE","parseMode","mode","parseMtime","mtime","ms","secs","errcode","UnixFS","marshaled","message","decoded","options","type","blockSizes","hashType","fanout","parsedMode","index","sum","parsed","pbData","encode_1","MSB","REST","MSBALL","INT","num","offset","oldOffset","read","MSB$1","REST$1","buf","res","shift","counter","N1","N2","N3","N4","N5","N6","N7","N8","N9","varint","_brrp_varint","encodeTo","int","target","encodingLength","create","code","digest","sizeOffset","varint.encodingLength","digestOffset","varint.encodeTo","Digest","multihash","varint.decode","a","equalBytes","Digest$1","format","link","version","toStringV0","baseCache","toStringV1","cache","cid","CID$1","CID","DAG_PB_CODE","SHA_256_CODE","Digest.create","other","self","unknown","Digest.equals","encodeCID","cidSymbol","Digest.decode","remainder","specs","prefixSize","multihashBytes","digestBytes","Digest.Digest","initialBytes","next","codec","multihashCode","digestSize","multihashSize","parseCIDtoBytes","codeOffset","hashOffset","Hasher","Hasher$1","result","identity","base2","base8","base10","base16","base16upper","base36","base36upper","alphabetBytesToChars","alphabetCharsToBytes","byts","char","byt","base256emoji","sha","sha256","sha512","node","textEncoder","textDecoder","bases","identityBase","base58","hashes","sha2","codecs","raw","json","NotInitializedError","AlreadyInitializingError","AlreadyInitializedError","NotStartedError","AlreadyStartingError","AlreadyStartedError","NotEnabledError","isV4","isIPv4","isV6","isIPv6","toBytes","ip","byte","sections","isv4","v4Buffer","uint8ArrayToString","argv","word","view","V","names","table","row","proto","createProtocol","resolvable","path","getProtocol","convertToString","bytes2ip","bytes2str","bytes2port","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh2bytes","onion2bytes","onion32bytes","mb2bytes","uint8ArrayFromString","anybaseDecoder","acc","ipString","ip.isIP","ip.toBytes","ipBuff","ip.toString","port","uint8ArrayConcat","hash","mh","mbstr","mb","address","addr","portBuf","addrBytes","portBytes","stringToStringTuples","tuples","parts","part","ParseError","cleanPath","stringTuplesToString","tup","protoFromTuple","stringTuplesToTuples","tuplesToStringTuples","tuplesToBytes","fromBytes","sizeForAddr","bytesToTuples","bytesToString","stringToBytes","err","validateBytes","__classPrivateFieldGet","this","receiver","state","kind","f","__classPrivateFieldSet","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","inspect","DNS_CODES","resolvers","symbol","fromNodeAddress","transport","host","DefaultMultiaddr","isName","isMultiaddr","DefaultMultiaddr$1","codec.fromBytes","codec.fromString","codec.bytesToString","family","zone","tcp","udp","ip4","ip6","dns6","ip6zone","codec.sizeForAddr","codec.bytesToTuples","codec.tuplesToStringTuples","addrString","s","codec.tuplesToBytes","tuple","peerIdStr","uint8ArrayEquals","resolvableProto","resolver","errCode","protos","multiaddr","_DefaultMultiaddr","__publicField","__privateAdd","_string","_tuples","_stringTuples","_path","__privateGet","__privateSet","CodeError","DNS4","DNS6","DNSADDR","DNS","IP","TCP","and","UDP","UTP","QUIC","WebSockets","WebSocketsSecure","HTTP","HTTPS","_WebRTC","WebRTC","WebRTCStar","WebRTCDirect","Reliable","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","IPFS","makeMatchesFunction","partialMatch","matches","ma","args","arg","pnames","pathPattern","defaultProtocolMatch","defaultHashMath","subdomainGatewayPattern","fqdnWithTld","isCID","isString","isIpfs","pattern","protocolMatch","hashMatch","formatted","match","isIpns","ipnsId","hostname","URL","ipfsPath","ipnsPath","TimeoutError","withTimeoutOption","fn","optionsArgIndex","timeout","parseDuration","controller","TimeoutController","anySignal","fnRes","timeoutPromise","_resolve","reject","start","maybeThrowTimeoutError","it","done","IPFS_PREFIX","toCidAndPath","ERR_BAD_PATH","OFFLINE_ERROR","MFS_ROOT_KEY","Key","MFS_MAX_CHUNK_SIZE","normalizePath","pathStr","isIpfs.path","normalizeCidPath","resolvePath","repo","lastCid","lastRemainderPath","remainderPath","resolve","mapFile","file","output","withTimeout","promise","_options","load","block","key","dagPB.code","Service","stop","service","activate","error","deactivate","status","createStart","network","preload","peerId","keychain","ipns","mfsPreload","print","hashers","libp2p","createStop","TLRU$1","maxSize","hashlru","ttl","AbortError","response","HTTPError","fetch_browser","Response","Request","Headers","fetch","require$$1","fetchWithProgress","url","request","headers","handleEvent","event","ResponseWithURL","parseHeaders","fetchWithStreaming","fetchWith","line","body","merge","require$$2","URLSearchParams","require$$3","require$$4","browserReableStreamToIt","require$$5","isBrowser","isWebWorker","require$$6","all","require$$7","abortController","timedOut","timeoutID","after","defaults","HTTP$1","resource","opts","searchParams","transformSearchParams","signal","fromStream","chunk","ndjson","lines","isAsyncIterable","isNodeReadableStream","iter","isWebReadableStream","reader","http","TLRU","Queue","PQueue","httpQueue","resolveDnslink","fqdn","query","fqdnFixups","domain","createDns","createIsOnline","net","createResolve","isIpfs.ipnsPath","resolvedPath","schema","rest","parseBytes","results","peerIdFromString","createAdd","addAll","last","isIterable","thing","normaliseInput","toPin","iterator","first","obj","pin","PinTypes","createAddAll","pinAdd","recursive","metadata","reason","release","createLs","ls","matched","pinned","parent","createRm","rmAll","rm","createRmAll","PinAPI","credentials","log","logger","ERR_NOT_FOUND","notFoundError","defaultRecordLifetime","IpnsPublisher","routing","datastore","lifetime","record","isPeerId","errMsg","routingKey","ipns.peerIdToRoutingKey","entry","checkRouting","dsVal","ipns.getLocalKey","ipns.unmarshal","getPublishedOptions","seqNumber","entryData","ipns.create","ipns.marshal","minute","hour","defaultBroadcastInterval","IpnsRepublisher","publisher","republishHandle","period","pass","firstRun","timeoutController","keys","pem","privKey","importKey","peerIdKey","peerIdFromKeys","Errors.notFoundError","defaultMaximumRecursiveDepth","IpnsResolver","nameSegments","depth","ipnsValidator","ipnsEntry","defaultRecordTtl","IPNS","id","ttEol","IpnsPubsubDatastore","pubsub","localDatastore","PubSubDatastore","ipnsSelector","e","ns","namespaceLength","namespace","stringifiedTopic","subscriber","peerIdToRoutingKey","sub","bufTopic","OfflineDatastore","Libp2pRecord","DHTDatastore","dht","drain","createRouting","ipnsStores","pubsubDs","get","offlineDatastore","TieredDatastore","IPNSAPI","isIPFS.ipnsPath","createPublish","isOnline","lookupKey","keyName","privateKey","unmarshalPrivateKey","publish","pubLifetime","mergeOptions","mergeOpts","appendRemainder","dns","offline","ipnsName","isDomain","getPubsubRouting","createCancel","experimental","cancel","createState","createSubs","subs","PubSubAPI","NameAPI","Format","createRefs","refs","signals","paths","getFullPath","refsStream","resPath","maxDepth","unique","objectStream","formatLink","srcCid","dstCid","linkName","rootCid","uniqueOnly","seen","traverseLevel","nextLevelDepth","getLinks","isDagPb","links","element","elementPath","createLocal","refsLocal","createWantlist","wantlist","bitswap","list","createWantlistForPeer","wantlistForPeer","createUnwant","unwant","cids","createStat","stat","snapshot","BitswapAPI","isValidMultiaddr","add","config","boostrappers","createClear","clear","removed","createList","getDefaultConfig","createReset","reset","defaultConfig","BootstrapAPI","createGet","createPut","put","cidVersion","codecName","cleanCid","BLOCK_RM_CONCURRENCY","pipe","map","parallel","filter","BlockAPI","isBytes","isBlob","isFileObject","isReadableStream","toAsyncIterable","normaliseContent","blobToIt","browserStreamToIt","peekable","itPeekable","normaliseCandidateSingle","toFileObject","content","murmur3128","bytes.fromHex","mur","hamtHashFn","defaultOptions","defaultOptions$g","persist","blockstore","dagPb","dirBuilder","item","unixfs","prepare","flat","reduce","balanced","reduceToParents","roots","chunked","batch","trickleStream","root","Root","iteration","subTree","layer","SubTree","layerRepeat","distantRelative","nextNode","children","child","bufferImporter","dagPb.encode","dagBuilders","dagFlat","dagBalanced","dagTrickle","buildFileBatch","count","previous","bufferImporterFn","parallelBatch","reducer","leaves","leaf","rawCodec.code","curr","fileBuilder","dagBuilder","rabinChunker","min","max","avg","sizepow","rabin","buffers","Uint8ArrayList","sizes","fixedSizeChunker","currentLength","emitted","maxChunkSize","newBl","validateChunks","contentAsAsyncIterable","chunker","fixedSize","chunkValidator","dir","Dir$1","props","DirFlat","Dir","createHAMT","flush","bucket","shardRoot","childrenSize","labelPrefix","Bucket","shard","subShard","flushedDir","label","flatToShard","threshold","newDir","convertToShard","oldDir","DirSharded","toPathComponents","addToTree","elem","tree","pathElems","lastIndex","currentPath","pathElem","flushAndYield","treeBuilder","unwrapped","importer","dagBuilderFn","treeBuilderFn","candidates","normaliseCandidateMultiple","parseChunkerString","sizeStr","parseRabinString","parseChunkSize","isShardingEnabled","totals","prog","hasher","transformFile","preloadFile","pinFile","releaseLock","added","maybePreloadFile","maybePinFile","isRootDir","hashFn","addLinksToHamtBucket","rootBucket","pos","toPrefix","position","toBucketPath","findShardCid","context","bucketPath","entryPrefix","entryName","extractDataFromBlock","blockStart","requestedStart","requestedEnd","blockLength","blockEnd","validateOffsetAndLength","walkDAG","queue","streamPosition","walkQueue","childOps","childLink","childStart","childEnd","op","dagPb.code","dagPb.decode","raw.code","fileContent","yieldFileContent","fileSize","pushable","directoryContent","yieldDirectoryContent","hamtShardedDirectoryContent","yieldHamtDirectoryContent","listDirectory","findLinkCid","contentExporters","contentFile","contentDirectory","contentHamtShardedDirectory","unixFsResolver","toResolve","linkCid","nextName","nextPath","rawContent","contentGenerator","object","dagCbor.decode","subObject","subPath","prop","subObjectCid","mh.decode","dagPbResolver","rawResolver","dagCbor.code","dagCborResolver","identifyResolver","cidAndRest","walkPath","entryPath","startingDepth","exporter","recurse","createCat","cat","pathComponents","DEFAULT_COMPRESSION_LEVEL","ipfsPathOrCid","pack","toBuffer","Pako","legacyPath","RootAPI","ipfsCore","commit","interfaceIpfsCore","createVersion","repoVersion","createId","pkgversion","peerIdToId","peer","findPeer","agentVersion","protocolVersion","idStr","publicKeyStr","findPeerOnDht","publicKey","profiles","set","Swarm","ConnMgr","createConfig","getAll","replace","applyProfile","listProfiles","profileName","dryRun","profile","oldCfg","newCfg","readonly","enumerable","configurable","linksWithin","treeWithin","Block$1","Block","createUnsafe","maybeValue","walk","b58Cid","NO_LINKS_CODECS","json.code","createExport","dagExport","writer","CarWriter","makeLoader","createImport","dagImport","sources","abortOptions","cars","car","importCar","pinErrorMsg","CarBlockIterator","dagNode","storeCodec","inputCodec","dagResolve","DagAPI","reduceValue","_","v","tcpUri","protocol","explicitPort","Reducers","multiaddrToUri","createPreloader","stopped","requests","apiUris","api","fallbackApiUris","shuffle","success","now","uri","createMfsPreloader","files","noop","timeoutId","preloadMfs","stats","nextRootCid","lock","createLock","repoOwner","mutex","mortice","func","loadMfsRoot","dagPB.encode","toMfsPath","mfsDirectory","mfsPath","cidPath","mfsStat","exportPath","statters","toTrail","fsEntry","dagPB","hamtHashCode","hamtBucketBits","updateHamtDirectory","recreateHamtLevel","parentBucket","positionAtParent","recreateInitialHamtLevel","subBucket","dagPB.decode","generatePath","fileName","rootNode","currentBucket","segment","nextSegment","createShard","contents","addLink","parentCid","meta","addToShardedDirectory","convertToShardedDirectory","addToDirectory","parentLinks","dagPB.prepare","addFileToShardedDirectory","newLink","positionInBucket","updateTree","trail","updateMfsRoot","createNode","createMkdir","mfsMkdir","emptyDir","subPathComponents","addEmptyDir","newRootCid","childName","createCp","mfsCp","to","destination","missing","destinationIsDirectory","isDirectory","parentFolder","destinationPath","destinationName","copyToFile","copyToDirectory","destinationTrail","addSourceToParent","sourceBlock","removeLink","removeFromShardedDirectory","removeFromDirectory","parentBlock","updateShard","positions","nodeLink","newName","updateShardParent","oldName","mfsRm","removePath","calculateModification","originalMode","modification","calculateUGO","references","ugo","calculateSpecial","parseSymbolicMode","operator","calculateMode","strMode","createChmod","mfsChmod","nodes","updatedBlock","hashAlg","updatedCid","parentNode","createFlush","mfsFlush","createMv","mfsMv","createTouch","mfsTouch","settings","exists","createRead","mfsRead","toAsyncIterator","global","createWrite","mfsWrite","updateOrImport","write","parentExists","updatedPath","extra","asyncZeroes","limitAsyncStreamBytes","countBytesStreamed","catAsyncIterators","bytesWritten","stream","limit","chunkSize","_asyncZeroes","notify","wrote","toOutput","mfsLs","readOperations","writeOperations","unwrappedOperations","wrap","mfs","operations","createMfs","readLock","operation","writeLock","createFiles","constructorOptions","methods","withPreload","isIpfs.ipfsPath","isIpfs.cid","password","DEFAULT_KEY_TYPE","DEFAULT_KEY_SIZE","createGen","createInfo","createRename","KeyAPI","createData","findLinks","val","createLinks","dagCBOR.code","dagJSON.code","createNew","_new","blockSize","linkLength","createAddLink","createAppendData","appendData","newData","createRmLink","rmLink","createSetData","setData","ObjectPatchAPI","ObjectAPI","createGc","gc","mfsRootCid","RepoAPI","getBandwidthStats","createBw","interval","StatsAPI","createRepo","createBitswap","debug","unwrap","keyToMultihash","multihashStr","keyToCid","mhd.decode","backends","onProgress","keyFunction","blockCount","newKey","migration","ipfs","Set","PIN_DS_KEY","DEFAULT_FANOUT","MAX_ITEMS","EMPTY_KEY","cidToKey","PinSet","readHeader","rootData","hdrLength","vBytes","hdrSlice","header","seed","encodedKey","fnv1a","walkItems","pbh","idx","linkHash","loadSet","storeItems","items","storePins","pins","pbHeader","headerBuf","fanoutLinks","uint8ArrayCompare","rootLinks","bins","bin","storeChild","binIdx","storeSet","pinsToDatastore","pinstore","pinRootBuf","pinRoot","pinCount","pinset.loadSet","cbor.encode","pinsToDAG","recursivePins","directPins","cbor.decode","pinset.storeSet","CONFIG_KEY","VERSION_KEY","findLevelJs","store","db","hasWithFallback","has","levelJs","req","getWithFallback","wrapStore","originalGet","originalHas","wrapBackends","keysToBinary","withEach","keysToStrings","datastores","backend","migrated","progress","transaction","loop","handleNext","handleEnd","err2","storeMfsRootInDatastore","storeMfsRootInRoot","Protocols","Addresses","Address","$oneOfFields","CertifiedRecord","Peer","Envelope","PeerRecord","AddressInfo","storePeerUnderSingleDatastoreKey","peers","keyStr","metadataKey","addrs","storePeerUnderMultipleDatastoreKeys","peerRecordEnvelope","certifiedRecord","envelope","emptyMigration","defaultMigrations","migration8","migration9","migration10","migration11","migration12","NonReversibleMigrationError","NotInitializedRepoError","RequiredParameterError","InvalidValueError","MissingRepoOptionsError","isRepoInitialized","versionCheck","configCheck","getVersion","setVersion","getLatestMigrationVersion","migrations","migrate","repoOptions","toVersion","ignoreLock","isDryRun","errors","currentVersion","repoVersion.getVersion","verifyAvailableMigrations","progressCallback","percent","lastSuccessfullyMigratedVersion","repoVersion.setVersion","revert","reversedMigrationArray","lastSuccessfullyRevertedVersion","fromVersion","checkReversibility","migrationCounter","Errors","LockExistsError","NotFoundError","InvalidRepoVersionError","ERR_REPO_NOT_INITIALIZED","ERR_REPO_ALREADY_OPEN","ERR_REPO_ALREADY_CLOSED","versionKey","expected","configKey","setQueue","configStore","encodedValue","_get","_maybeDoSet","_set","_saveAll","specKey","spec","sortKeys","apiFile","apiAddr","createIdStore","extracted","extractContents","isIdentity","pairs","k","lockFile","LOCKS","locked","MemoryLock","defaultOptions$2","defaultDatastore","encoded","walkDag","loadCodec","childCid","CID_CACHE_MAX_SIZE","invalidPinTypeErr","PinManager","cborg.encode","cborg.decode","direct","indirect","findChild","QuickLRU","createPinnedBlockstore","ensureNotPinned","gcLock","markedSet","createMarkedSet","blockKeys","deleteUnmarkedBlocks","mfsSource","pinsSource","blocksCount","removedBlocksCount","b32","msg","noLimit","AUTO_MIGRATE_CONFIG_KEY","Repo","pinnedBlockstore","buildConfig","buildDatastoreSpec","CONSTANTS.repoVersion","ERRORS.ERR_REPO_ALREADY_OPEN","ERRORS.InvalidRepoVersionError","lockfile","ERRORS.ERR_REPO_NOT_INITIALIZED","ERRORS.ERR_REPO_ALREADY_CLOSED","storageMax","blocks","getSize","autoMigrateConfig","ERRORS.NotFoundError","migrator.revert","migrator.migrate","_config","mounting","repoPath","codeOrName","LevelDatastore","BlockstoreDatastoreAdapter","Encoder$1","Decoder$1","ComposedDecoder$1","Codec$1","LOAD_BASE","Multibases","nameOrPrefix","LOAD_CODEC","Multicodecs","LOAD_HASHER","Multihashes","toUrlString","getAgent","DEFAULT_PROTOCOL","DEFAULT_HOST","DEFAULT_PORT","normalizeOptions","agent","isNode","Agent","errorHandler","KEBAB_REGEX","kebabCase","parseTimeout","Client","search","configure","modeToString","toUrlSearchParams","urlSearchParams","toCoreInterface","itToBlob","multipartRequest","formData","total","fileSuffix","fieldName","qs","nsecs","abortSignal","createBlock","Peers","createBootstrap","createApply","apply","objectToCamel","caps","camelObj","createProfiles","createGetAll","createReplace","createSet","params","encodeParam","getBlock","createBlockGet","Cid","PinErrorMsg","serialized","createDag","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","mapEvent","ID","Addrs","createFindPeer","createFindProvs","findProvs","createProvide","provide","cidArr","createQuery","createDht","createCmds","cmds","createNet","createSys","sys","createDiag","chmod","cp","sourceArr","objectToCamelWithMetadata","mkdir","mv","toIterable","touch","gen","rename","createKey","createLevel","level","subsystem","createTail","tail","createLog","createPubsub","createName","newObject","Hash","dagPut","createDagPut","dLink","createPatch","createObject","decodePin","encodeService","encodeQuery","encodeAddParams","background","origins","origin","client","encodeEndpoint","href","decodeRemoteService","decodeStat","Pinning","Pinned","Queued","Failed","endpoint","RemoteServices","createService","createRemote","createPin","rpcArrayToTextArray","strings","rpcToText","rpcToBytes","rpcToBigInt","textToUrlSafeRpc","Strings","createPeers","topic","createSubscribe","subsTracker","subscribe","handler","fail","ffWorkaround","readMessages","onMessage","onEnd","onError","isAbortError","createUnsubscribe","unsubscribe","SubscriptionTracker","topicSubs","unsubs","subscriptionTracker","argsArr","bw","createStats","createAddrs","createConnect","connect","createDisconnect","disconnect","createLocalAddrs","localAddrs","createSwarm","progressFn","onUploadProgress","createProgressHandler","createOnUploadProgress","loaded","mtimeNsecs","createCommands","createGetEndpointConfig","mapLink","typeOf","createMount","mount","createPing","ping","Path","fs$1","multibaseCodecs","multibases","blockCodecs","dagCBOR","dagJSON","dagJOSE","multicodecs","multihashHashers","multihashes","dnsaddrCode","dnsaddrResolver","Resolver","addresses","QUICV1","_WebRTCDirect","_WebTransport","WebTransport","P2PWebRTCStar","P2PWebRTCDirect","Storage","isNew","repoAutoMigrate","inputRepo","onMigrationProgress","loadRepo","configureRepo","initRepo","initOptions","decodePeerId","initPeerId","peerIdToIdentity","applyProfiles","keychainConfig","createLibp2p","rawPrivateKey","algorithm","createEd25519PeerId","createRSAPeerId","original","changed","mergeConfigs","changes","configProfiles","varintEncoder","varint.default","varint.encode","WantListEntry","priority","wantType","Message","typeUrlPrefix","Wantlist","Entry","BlockPresence","WantType","sortBy","trackedMap","cidStr","WantlistEntry","BitswapMessageEntry","sendDontHave","createLogger","isMapEqual","valueA","valueB","BitswapMessage","full","digestLength","ve","bpType","hashLoader","isFull","blockPresence","vd","multicodec","maxProvidersPerRequest","kMaxPriority","maxListeners","wantlistSendDebounceMs","MsgQueue","selfPeerId","otherPeerId","debounce","entries","WantManager","force","CONSTANTS.kMaxPriority","mq","fullwantlist","BITSWAP100","BITSWAP110","BITSWAP120","DEFAULT_MAX_INBOUND_STREAMS","DEFAULT_MAX_OUTBOUND_STREAMS","DEFAULT_INCOMING_STREAM_TIMEOUT","Network$1","topology","createTopology","conn","connection","abortableSource","lp.decode","connectAttempts","found","provider","CONSTANTS.maxProvidersPerRequest","stringId","writeMessage","lp.encode","Ledger","SortedMap","cmp","newIdx","lower","upper","pivot","cb","thisArg","DefaultTaskMerger","RequestQueue","taskMerger","PeerTasks","tasks","peerTasks","targetMinBytes","pendingSize","task","PendingTasks","existingTask","tasksWithTopic","activeTask","pendingTasks","TaskMerger","haveBlock","isWantBlock","existing","newTask","taskData","existingData","TARGET_MESSAGE_SIZE","MAX_SIZE_REPLACE_HAS_WITH_BLOCK","DecisionEngine","blockCids","blockTasks","blk","ledger","want","entrySize","cancels","wants","blocksMap","unwantEvent","blockEvent","Notifications","EventEmitter","CONSTANTS.maxListeners","blockEvt","unwantEvt","onUnwant","onBlock","Stat","initialCounters","MovingAverage","inc","urgency","latestTime","timeDiff","timeDiffMS","hz","movingAverages","movingAverageInterval","movingAverage","Stats","peerStat","peerStats","statsKeys","Bitswap","BaseBlockstore","Network","incoming","received","wasWanted","fetchFromNetwork","promptedNetwork","loadOrFetchFromNetwork","cidsArray","BlockStorage","missingBlocks","getFromBitswap","getFromChild","q","readAddrs","swarm","WEBSOCKET_STAR_PROTO_CODE","maId","mi","multiaddrOrPeerId","SwarmAPI","basePacket","storedPeer","remotePeer","packetCount","totalTime","time","average","IPNS_PREFIX","toDHTKey","use","dhtKey","peerIdToFind","peerIdToQuery","asCid","isEnabled","handlers","notEnabled","evt","h","IPNS_INIT_KEYSPACE_TIMEOUT","storage","dag","notImplemented","notImplementedIter","getDefaultOptions","isTest","Index","oplog","GSet","LamportClock","clock","dist","mhtype","defaultBase","unsupportedCodecError","cidifyString","stringifyCid","codecCodes","dagCbor","codecMap","Block.decode","Block.encode","difference","processed","addToIndex","isInFirst","hasBeenProcessed","findUniques","uniques","isDefined","IpfsNotDefinedError","IPLD_LINKS","getWriteFormatForVersion","getWriteFormat","logId","toEntry","nexts","Clock","signature","identityProvider","verifier","stringifiedEntry","stringify","Buffer","presigned","includeHash","distance","entry1","entry2","stack","prev","isEntry","fromMultihash","hasItems","arr","EntryIO","exclude","shouldExclude","concurrency","onProgressCallback","fetchOne","concatArrays","arr1","arr2","flatten","pMap","onStartProgressCallback","delay","loadingCache","loadingQueue","running","maxClock","minClock","loadingQueueHasMore","addToLoadingQueue","getNextFromQueue","getNext","nextItems","addToExcludeCache","fetchEntry","timer","addToResults","ts","isLater","calculateIndex","_processQueue","pDoWhilst","LastWriteWins","First","sortById","SortByClockId","SortByClocks","SortByEntryHash","compareHash","resolveConflict","diff","NoZeroes","Sorting","IPFSNotDefinedError","LogNotDefinedError","NotALogError","LtOrLteMustBeStringOrArray","fetchAll","fetchParallel","compare","LogIO","sortFn","logData","isHead","heads","headHashes","sourceEntries","combined","sliced","missingSourceEntries","withEntries","AccessController$1","EntryIndex","newItems","randomId","getHash","flatMap","getNextPointers","maxClockTimeReducer","uniqueEntriesReducer","Log","access","AccessController","uniqueEntries","addToNextsIndex","maxTime","rootEntries","amount","endHash","traversed","getEntry","addToStack","addEntry","rootEntry","pointerCount","newTime","maxDistance","isNext","gt","gte","lt","lte","entryValues","permitted","verify","isValid","entriesToJoin","notReferencedByNewItems","nextsFromNewItems","notInCurrentNexts","mergedHeads","tmp","payloadMapper","len","padding","indexReducer","addToResult","compareIds","reverseIndex","nullIndex","addToReverseIndex","addUniques","findFromReverseIndex","tails","reduceTailHashes","pushToStack","getNextAndRefsUnion","defaultConcurrency","Replicator","logs","createReplicationTask","ReplicationInfo","Logger","DefaultOptions","Store","defaultAccess","onReplicationQueued","onReplicationProgress","previousProgress","previousMax","onReplicationComplete","updateState","have","fetchEntryTimeout","localHeads","remoteHeads","mapSeries","head","logEntry","io.write","saved","unfinished","snapshotData","chunks","addOperation","batchOperation","lastOperation","payload","maxTotal","set1","set2","DEFAULT_OPTIONS","IpfsPubsubPeerMonitor","ipfsPubsub","oldValues","newValues","events","emitJoin","addedPeer","emitLeave","removedPeer","hidden","_baseCache","deprecate","IS_CID_DEPRECATION","range","orbitdb","AccessControllerManifest","manifestHash","io.read","LegacyIPFSAccessController","IPFSAccessController","ensureAddress","OrbitDBAccessController","capabilities","toSet","capability","ac","pMapSeries","supportedTypes","getHandlerFor","AccessControllers","AccessControllers$1","accessControllers","accessController","manifestAddress","notEmpty","OrbitDBAddress","containsProtocolPrefix","accessControllerHash","validateHash","prefixes","createDBManifest","accessControllerAddress","manifest","PROTOCOL","_message","waitForPeers","peersToWait","isClosed","checkPeers","idPeersToWait","idPeers","getPeerID","DirectChannel","receiverID","channel","getHeadsForDatabase","exchangeHeads","getStore","getDirectConnection","onChannelCreated","_handleMessage","Channel","fs","isElectronMain","fs_","OrbitDB","dbAddress","oldCache","oldStore","Cache","keyRoot","migrationKeys","from021To022","run","databaseTypes","CounterStore","EventStore","FeedStore","DocumentStore","KeyValueStore","defaultTimeout","DefaultAccessControllers","Pubsub","Keystore","Identities","storageOptions","keystorePath","keyStorage","cachePath","cacheStorage","finalOptions","databases","caches","directory","existingCache","newCache","haveDB","migrations.run"],"mappings":"8gEACA,MAAMA,GAAaC,GAEbC,GAAkB,OAAO,QAAW,UAAY,OAAO,UAAa,UAAY,SAAS,WAAa,EAEtGC,GAAcH,GAAY,EAC1BI,GAAaF,IAAmB,CAACC,GACjCE,GAAmBF,IAAe,CAACD,GACnCI,GAAuBH,IAAeD,GACtCK,GAAU,OAAOC,IAAY,YAAc,OAAOC,GAAY,KAAe,OAAOA,GAAQ,QAAY,KAAeA,GAAQ,QAAQ,OAAS,QAAU,CAACN,GAE3JO,GAAe,OAAO,eAAkB,YAAc,OAAO,KAAS,KAAe,OAAO,kBAAsB,KAAe,gBAAgB,kBACjJC,GAAU,OAAOF,GAAY,KAAe,OAAOA,GAAQ,IAAQ,KAAe,GAClFG,GAAkB,OAAO,UAAc,KAAe,UAAU,UAAY,cAElF,IAAAC,GAAiB,CACf,OAAQF,GACR,WAAYR,GACZ,eAAgBE,GAChB,mBAAoBC,GACpB,OAAQC,GAIR,UAAWH,GACX,YAAaM,GACb,aAAcR,GACd,cAAeU,EACjB,ECvBA,SAASE,GAAMC,EAAUC,EAAM,CAC7B,GAAID,EAAS,QAAU,IAAO,MAAM,IAAI,UAAU,mBAAmB,EAErE,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACnCD,EAASC,CAAC,EAAI,IAEhB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACxC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IAAO,MAAM,IAAI,UAAUD,EAAI,eAAe,EACnEH,EAASI,CAAE,EAAIF,CAChB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAC3C,SAASI,EAAQC,EAAQ,CAMvB,GALIA,aAAkB,aAAuB,YAAY,OAAOA,CAAM,EACpEA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAClE,MAAM,QAAQA,CAAM,IAC7BA,EAAS,WAAW,KAAKA,CAAM,IAE7B,EAAEA,aAAkB,YAAe,MAAM,IAAI,UAAU,qBAAqB,EAChF,GAAIA,EAAO,SAAW,EAAK,MAAO,GAMlC,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GAC3CA,IACAF,IAMF,QAHII,GAASD,EAAOD,GAAUL,EAAU,IAAO,EAC3CQ,EAAM,IAAI,WAAWD,CAAI,EAEtBF,IAAWC,GAAM,CAItB,QAHIG,EAAQP,EAAOG,CAAM,EAErBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYM,IAAQ,GAAKA,IAAOhB,IAC3Ee,GAAU,IAAMD,EAAIE,CAAG,IAAO,EAC9BF,EAAIE,CAAG,EAAKD,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE7B,GAAIY,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACTW,GACD,CAGD,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAClCA,IAIF,QADIC,EAAMd,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EAAOC,GAAOtB,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAC3D,OAAOC,CACR,CACD,SAASC,EAAcX,EAAQ,CAC7B,GAAI,OAAOA,GAAW,SAAY,MAAM,IAAI,UAAU,iBAAiB,EACvE,GAAIA,EAAO,SAAW,EAAK,OAAO,IAAI,WACtC,IAAIY,EAAM,EAEV,GAAIZ,EAAOY,CAAG,IAAM,IAIpB,SAFIX,EAAS,EACTC,EAAS,EACNF,EAAOY,CAAG,IAAMhB,GACrBK,IACAW,IAMF,QAHIP,GAAUL,EAAO,OAASY,GAAOf,EAAU,IAAO,EAClDgB,EAAO,IAAI,WAAWR,CAAI,EAEvBL,EAAOY,CAAG,GAAG,CAElB,IAAIL,EAAQjB,EAASU,EAAO,WAAWY,CAAG,CAAC,EAE3C,GAAIL,IAAU,IAAO,OAErB,QADIf,EAAI,EACCsB,EAAMT,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYY,IAAQ,GAAKA,IAAOtB,IAC3Ee,GAAUZ,EAAOkB,EAAKC,CAAG,IAAO,EAChCD,EAAKC,CAAG,EAAKP,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAIA,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACToB,GACD,CAED,GAAIZ,EAAOY,CAAG,IAAM,IAGpB,SADIG,EAAMV,EAAOH,EACVa,IAAQV,GAAQQ,EAAKE,CAAG,IAAM,GACnCA,IAIF,QAFIC,EAAM,IAAI,WAAWf,GAAUI,EAAOU,EAAI,EAC1CxB,EAAIU,EACDc,IAAQV,GACbW,EAAIzB,GAAG,EAAIsB,EAAKE,GAAK,EAEvB,OAAOC,GACR,CACD,SAASC,EAAQC,EAAQ,CACvB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EAAU,OAAOA,EACrB,MAAM,IAAI,MAAM,OAAO9B,CAAI,YAAY,CACxC,CACD,MAAO,CACL,OAAQU,EACR,aAAcY,EACd,OAAQM,CACT,CACH,CACA,IAAIG,GAAMjC,GAENkC,GAAkCD,GC5HtC,MAAME,GAAQ,IAAI,WAAW,CAAC,EAUxBC,GAAUC,GAAO,CACrB,MAAMC,EAAQD,EAAI,MAAM,KAAK,EAC7B,OAAOC,EAAQ,IAAI,WAAWA,EAAM,IAAIC,GAAK,SAASA,EAAG,EAAE,CAAC,CAAC,EAAIJ,EACnE,EAMMK,GAAS,CAACC,EAAIC,IAAO,CACzB,GAAID,IAAOC,EAAI,MAAO,GACtB,GAAID,EAAG,aAAeC,EAAG,WACvB,MAAO,GAGT,QAASC,EAAK,EAAGA,EAAKF,EAAG,WAAYE,IACnC,GAAIF,EAAGE,CAAE,IAAMD,EAAGC,CAAE,EAClB,MAAO,GAIX,MAAO,EACT,EAMMC,GAASC,GAAK,CAClB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aAAc,OAAOA,EAC3E,GAAIA,aAAa,YAAa,OAAO,IAAI,WAAWA,CAAC,EACrD,GAAI,YAAY,OAAOA,CAAC,EACtB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE5D,MAAM,IAAI,MAAM,mCAAmC,CACrD,EAaMC,GAAavB,GAAQ,IAAI,YAAW,EAAI,OAAOA,CAAG,EAMlDwB,GAAWR,GAAM,IAAI,YAAa,EAAE,OAAOA,CAAC,EC/ClD,IAAAS,GAAA,KAAc,CAMZ,YAAa9C,EAAM+C,EAAQC,EAAY,CACrC,KAAK,KAAOhD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,CACnB,CAMD,OAAQC,EAAO,CACb,GAAIA,aAAiB,WACnB,MAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAWA,CAAK,CAAC,GAE9C,MAAM,MAAM,mCAAmC,CAElD,CACH,EAiBAC,GAAA,KAAc,CAMZ,YAAalD,EAAM+C,EAAQI,EAAY,CAIrC,GAHA,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EAEVA,EAAO,YAAY,CAAC,IAAM,OAC5B,MAAM,IAAI,MAAM,0BAA0B,EAG5C,KAAK,gBAAyCA,EAAO,YAAY,CAAC,EAClE,KAAK,WAAaI,CACnB,CAKD,OAAQC,EAAM,CACZ,GAAI,OAAOA,GAAS,SAAU,CAC5B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC/B,MAAM,MAAM,qCAAqC,KAAK,UAAUA,CAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE,EAEjJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CAC3D,KACM,OAAM,MAAM,mCAAmC,CAElD,CAOD,GAAIC,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CACH,EAYAE,GAAA,KAAsB,CAIpB,YAAaC,EAAU,CACrB,KAAK,SAAWA,CACjB,CAOD,GAAIH,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CAMD,OAAQI,EAAO,CACb,MAAMV,EAAgCU,EAAM,CAAC,EACvCJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,EACF,OAAOA,EAAQ,OAAOI,CAAK,EAE3B,MAAM,WAAW,qCAAqC,KAAK,UAAUA,CAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAEvJ,CACH,EASO,MAAMH,GAAK,CAACI,EAAMC,IAAU,IAAIC,GAA6C,CAClF,GAAIF,EAAK,UAAY,CAAE,CAAoCA,EAAM,MAAM,EAAGA,GAC1E,GAAIC,EAAM,UAAY,CAAE,CAAoCA,EAAO,MAAM,EAAGA,EAC9E,CAAG,EAaI,IAAAE,GAAA,KAAY,CAOjB,YAAa7D,EAAM+C,EAAQC,EAAYG,EAAY,CACjD,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQ9D,EAAM+C,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQ/D,EAAM+C,EAAQI,CAAU,CACpD,CAKD,OAAQM,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CAKD,OAAQA,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CACH,EAYO,MAAMO,GAAO,CAAC,CAAE,KAAAhE,EAAM,OAAA+C,EAAQ,OAAArC,EAAQ,OAAAkB,CAAQ,IACnD,IAAIqC,GAAMjE,EAAM+C,EAAQrC,EAAQkB,CAAM,EAW3BsC,GAAQ,CAAC,CAAE,OAAAnB,EAAQ,KAAA/C,EAAM,SAAAmE,CAAQ,IAAO,CACnD,KAAM,CAAE,OAAAzD,EAAQ,OAAAkB,CAAM,EAAKwC,GAAMD,EAAUnE,CAAI,EAC/C,OAAOgE,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAAU,EAIA,OAAQ0C,GAAQV,GAAOd,EAAOwB,CAAI,CAAC,CACvC,CAAG,CACH,EASMxB,GAAS,CAACC,EAAQsC,EAAUE,EAAarE,IAAS,CAGtD,MAAMsE,EAAQ,CAAE,EAChB,QAASnE,EAAI,EAAGA,EAAIgE,EAAS,OAAQ,EAAEhE,EACrCmE,EAAMH,EAAShE,CAAC,CAAC,EAAIA,EAIvB,IAAIoE,EAAM1C,EAAO,OACjB,KAAOA,EAAO0C,EAAM,CAAC,IAAM,KACzB,EAAEA,EAIJ,MAAMC,EAAM,IAAI,WAAYD,EAAMF,EAAc,EAAK,CAAC,EAGtD,IAAII,EAAO,EACP3C,EAAS,EACT4C,EAAU,EACd,QAASvE,EAAI,EAAGA,EAAIoE,EAAK,EAAEpE,EAAG,CAE5B,MAAMwE,EAAQL,EAAMzC,EAAO1B,CAAC,CAAC,EAC7B,GAAIwE,IAAU,OACZ,MAAM,IAAI,YAAY,OAAO3E,CAAI,YAAY,EAI/C8B,EAAUA,GAAUuC,EAAeM,EACnCF,GAAQJ,EAGJI,GAAQ,IACVA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAQ5C,GAAU2C,EAEtC,CAGD,GAAIA,GAAQJ,GAAe,IAAQvC,GAAW,EAAI2C,EAChD,MAAM,IAAI,YAAY,wBAAwB,EAGhD,OAAOD,CACT,EAQM9D,GAAS,CAACkE,EAAMT,EAAUE,IAAgB,CAC9C,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GAENC,EAAO,EACP3C,EAAS,EACb,QAAS3B,EAAI,EAAGA,EAAIyE,EAAK,OAAQ,EAAEzE,EAMjC,IAJA2B,EAAUA,GAAU,EAAK8C,EAAKzE,CAAC,EAC/BsE,GAAQ,EAGDA,EAAOJ,GACZI,GAAQJ,EACRG,GAAOL,EAASW,EAAQhD,GAAU2C,CAAK,EAU3C,GALIA,IACFD,GAAOL,EAASW,EAAQhD,GAAWuC,EAAcI,CAAM,GAIrDI,EACF,KAAQL,EAAI,OAASH,EAAe,GAClCG,GAAO,IAIX,OAAOA,CACT,EAaaO,GAAU,CAAC,CAAE,KAAA/E,EAAM,OAAA+C,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,IACpDH,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAQyD,EAAO,CACb,OAAO/C,GAAO+C,EAAOU,EAAUE,CAAW,CAC3C,EACD,OAAQZ,EAAO,CACb,OAAO7B,GAAO6B,EAAOU,EAAUE,EAAarE,CAAI,CACjD,CACL,CAAG,ECvVUgF,EAAYd,GAAM,CAC7B,KAAM,YACN,OAAQ,IACR,SAAU,4DACZ,CAAC,EAEYe,GAAef,GAAM,CAChC,KAAM,eACN,OAAQ,IACR,SAAU,4DACZ,CAAC,4HCVYgB,GAASH,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYI,GAAcJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYK,GAAYL,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYM,GAAiBN,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYO,GAAYP,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYQ,GAAiBR,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYS,GAAeT,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYU,GAAoBV,GAAQ,CACvC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYW,GAAUX,GAAQ,CAC7B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACf,CAAC,uOC3DYY,GAASZ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEYa,GAAYb,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACf,CAAC,EAEYc,GAAYd,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEYe,GAAef,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACf,CAAC,oJC1BKgB,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,EAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,aAAa,IAAMA,EAAU,MAAM,aAAa,EAAI,CAAA,GAErEI,GAAOD,GAAM,MAAQ,IAAM,CAwBpC,SAASC,EAAKC,EAAG,CAEb,GADA,KAAK,WAAa,GACdA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAiG,EAAK,UAAU,KAAO,EAQtBA,EAAK,UAAU,KAAOF,EAAM,UAAU,CAAE,CAAA,EAQxCE,EAAK,UAAU,SAAWF,EAAM,KAAOA,EAAM,KAAK,SAAS,EAAE,EAAE,EAAI,EAAI,EAQvEE,EAAK,UAAU,WAAaF,EAAM,WAQlCE,EAAK,UAAU,SAAWF,EAAM,KAAOA,EAAM,KAAK,SAAS,EAAE,EAAE,EAAI,EAAI,EAQvEE,EAAK,UAAU,OAASF,EAAM,KAAOA,EAAM,KAAK,SAAS,EAAE,EAAE,EAAI,EAAI,EAQrEE,EAAK,UAAU,KAAO,EAQtBA,EAAK,UAAU,MAAQ,KAWvBA,EAAK,OAAS,SAAgBG,EAAGC,EAAG,CAQhC,GAPKA,IACDA,EAAIP,GAAQ,UAChBO,EAAE,OAAO,CAAC,EAAE,MAAMD,EAAE,IAAI,EACpBA,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,IAAI,EACzBA,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,QAAQ,EAC9BA,EAAE,YAAc,MAAQA,EAAE,WAAW,OACrC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,WAAW,OAAQ,EAAEpG,EACvCqG,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,WAAWpG,CAAC,CAAC,EAE3C,OAAIoG,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,QAAQ,EAC9BA,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,MAAM,EAC5BA,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,IAAI,EAC1BA,EAAE,OAAS,MAAQ,OAAO,eAAe,KAAKA,EAAG,OAAO,GACxDJ,GAAM,SAAS,OAAOI,EAAE,MAAOC,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,OAAM,EACvDA,CACf,EAaIJ,EAAK,OAAS,SAAgBK,EAAGC,EAAG,CAC1BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,KACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,KAAOE,EAAE,QACX,MACJ,IAAK,GACDF,EAAE,KAAOE,EAAE,QACX,MACJ,IAAK,GACDF,EAAE,SAAWE,EAAE,SACf,MACJ,IAAK,GAGD,GAFMF,EAAE,YAAcA,EAAE,WAAW,SAC/BA,EAAE,WAAa,KACdK,EAAI,KAAO,EAEZ,QADIC,EAAKJ,EAAE,OAAM,EAAKA,EAAE,IACjBA,EAAE,IAAMI,GACXN,EAAE,WAAW,KAAKE,EAAE,OAAQ,CAAA,OAEhCF,EAAE,WAAW,KAAKE,EAAE,OAAQ,CAAA,EAChC,MACJ,IAAK,GACDF,EAAE,SAAWE,EAAE,SACf,MACJ,IAAK,GACDF,EAAE,OAASE,EAAE,SACb,MACJ,IAAK,GACDF,EAAE,KAAOE,EAAE,SACX,MACJ,IAAK,GACDF,EAAE,MAAQJ,GAAM,SAAS,OAAOM,EAAGA,EAAE,OAAM,CAAE,EAC7C,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,GAAI,CAACL,EAAE,eAAe,MAAM,EACxB,MAAML,EAAM,cAAc,0BAA2B,CAAE,SAAUK,CAAC,CAAE,EACxE,OAAOA,CACf,EAUIH,EAAK,WAAa,SAAoBU,EAAG,CACrC,GAAIA,aAAaX,GAAM,KACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,KAClB,OAAQW,EAAE,KAAI,CACd,IAAK,MACL,IAAK,GACDP,EAAE,KAAO,EACT,MACJ,IAAK,YACL,IAAK,GACDA,EAAE,KAAO,EACT,MACJ,IAAK,OACL,IAAK,GACDA,EAAE,KAAO,EACT,MACJ,IAAK,WACL,IAAK,GACDA,EAAE,KAAO,EACT,MACJ,IAAK,UACL,IAAK,GACDA,EAAE,KAAO,EACT,MACJ,IAAK,YACL,IAAK,GACDA,EAAE,KAAO,EACT,KACH,CAiBD,GAhBIO,EAAE,MAAQ,OACN,OAAOA,EAAE,MAAS,SAClBZ,EAAM,OAAO,OAAOY,EAAE,KAAMP,EAAE,KAAOL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,IAAI,CAAC,EAAG,CAAC,EAC/EA,EAAE,KAAK,SACZP,EAAE,KAAOO,EAAE,OAEfA,EAAE,UAAY,OACVZ,EAAM,MACLK,EAAE,SAAWL,EAAM,KAAK,UAAUY,EAAE,QAAQ,GAAG,SAAW,GACtD,OAAOA,EAAE,UAAa,SAC3BP,EAAE,SAAW,SAASO,EAAE,SAAU,EAAE,EAC/B,OAAOA,EAAE,UAAa,SAC3BP,EAAE,SAAWO,EAAE,SACV,OAAOA,EAAE,UAAa,WAC3BP,EAAE,SAAW,IAAIL,EAAM,SAASY,EAAE,SAAS,MAAQ,EAAGA,EAAE,SAAS,OAAS,CAAC,EAAE,SAAS,EAAI,IAE9FA,EAAE,WAAY,CACd,GAAI,CAAC,MAAM,QAAQA,EAAE,UAAU,EAC3B,MAAM,UAAU,kCAAkC,EACtDP,EAAE,WAAa,GACf,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,WAAW,OAAQ,EAAE3G,EACnC+F,EAAM,MACLK,EAAE,WAAWpG,CAAC,EAAI+F,EAAM,KAAK,UAAUY,EAAE,WAAW3G,CAAC,CAAC,GAAG,SAAW,GAChE,OAAO2G,EAAE,WAAW3G,CAAC,GAAM,SAChCoG,EAAE,WAAWpG,CAAC,EAAI,SAAS2G,EAAE,WAAW3G,CAAC,EAAG,EAAE,EACzC,OAAO2G,EAAE,WAAW3G,CAAC,GAAM,SAChCoG,EAAE,WAAWpG,CAAC,EAAI2G,EAAE,WAAW3G,CAAC,EAC3B,OAAO2G,EAAE,WAAW3G,CAAC,GAAM,WAChCoG,EAAE,WAAWpG,CAAC,EAAI,IAAI+F,EAAM,SAASY,EAAE,WAAW3G,CAAC,EAAE,MAAQ,EAAG2G,EAAE,WAAW3G,CAAC,EAAE,OAAS,CAAC,EAAE,SAAS,EAAI,EAEpH,CAwBD,GAvBI2G,EAAE,UAAY,OACVZ,EAAM,MACLK,EAAE,SAAWL,EAAM,KAAK,UAAUY,EAAE,QAAQ,GAAG,SAAW,GACtD,OAAOA,EAAE,UAAa,SAC3BP,EAAE,SAAW,SAASO,EAAE,SAAU,EAAE,EAC/B,OAAOA,EAAE,UAAa,SAC3BP,EAAE,SAAWO,EAAE,SACV,OAAOA,EAAE,UAAa,WAC3BP,EAAE,SAAW,IAAIL,EAAM,SAASY,EAAE,SAAS,MAAQ,EAAGA,EAAE,SAAS,OAAS,CAAC,EAAE,SAAS,EAAI,IAE9FA,EAAE,QAAU,OACRZ,EAAM,MACLK,EAAE,OAASL,EAAM,KAAK,UAAUY,EAAE,MAAM,GAAG,SAAW,GAClD,OAAOA,EAAE,QAAW,SACzBP,EAAE,OAAS,SAASO,EAAE,OAAQ,EAAE,EAC3B,OAAOA,EAAE,QAAW,SACzBP,EAAE,OAASO,EAAE,OACR,OAAOA,EAAE,QAAW,WACzBP,EAAE,OAAS,IAAIL,EAAM,SAASY,EAAE,OAAO,MAAQ,EAAGA,EAAE,OAAO,OAAS,CAAC,EAAE,SAAS,EAAI,IAExFA,EAAE,MAAQ,OACVP,EAAE,KAAOO,EAAE,OAAS,GAEpBA,EAAE,OAAS,KAAM,CACjB,GAAI,OAAOA,EAAE,OAAU,SACnB,MAAM,UAAU,8BAA8B,EAClDP,EAAE,MAAQJ,GAAM,SAAS,WAAWW,EAAE,KAAK,CAC9C,CACD,OAAOP,CACf,EAWIH,EAAK,SAAW,SAAkBG,EAAG5D,EAAG,CAC/BA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAIR,IAHInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,WAAa,IAEfnE,EAAE,SAAU,CASZ,GARAmE,EAAE,KAAOnE,EAAE,QAAU,OAAS,MAAQ,EAClCA,EAAE,QAAU,OACZmE,EAAE,KAAO,IAETA,EAAE,KAAO,GACLnE,EAAE,QAAU,QACZmE,EAAE,KAAOZ,EAAM,UAAUY,EAAE,IAAI,IAEnCZ,EAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,EAAM,KAAK,EAAG,EAAG,EAAI,EACjCY,EAAE,SAAWnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACxF,MACGD,EAAE,SAAWnE,EAAE,QAAU,OAAS,IAAM,EAC5C,GAAIuD,EAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,EAAM,KAAK,EAAG,EAAG,EAAI,EACjCY,EAAE,SAAWnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACxF,MACGD,EAAE,SAAWnE,EAAE,QAAU,OAAS,IAAM,EAC5C,GAAIuD,EAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,EAAM,KAAK,EAAG,EAAG,EAAI,EACjCY,EAAE,OAASnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACtF,MACGD,EAAE,OAASnE,EAAE,QAAU,OAAS,IAAM,EAC1CmE,EAAE,KAAO,EACTA,EAAE,MAAQ,IACb,CAaD,GAZIP,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOnE,EAAE,QAAU,OAASwD,GAAM,KAAK,SAASI,EAAE,IAAI,EAAIA,EAAE,MAE9DA,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,KAAM,EAAGA,EAAE,KAAK,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,IAAI,EAAIA,EAAE,MAEzIA,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IAC7C,OAAOA,EAAE,UAAa,SACtBO,EAAE,SAAWnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,QAAQ,EAAIA,EAAE,SAEzDO,EAAE,SAAWnE,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,QAAQ,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,SAAS,MAAQ,EAAGA,EAAE,SAAS,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIA,EAAE,UAE/LA,EAAE,YAAcA,EAAE,WAAW,OAAQ,CACrCO,EAAE,WAAa,GACf,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,WAAW,OAAQ,EAAErG,EACnC,OAAOqG,EAAE,WAAWrG,CAAC,GAAM,SAC3B4G,EAAE,WAAW5G,CAAC,EAAIyC,EAAE,QAAU,OAAS,OAAO4D,EAAE,WAAWrG,CAAC,CAAC,EAAIqG,EAAE,WAAWrG,CAAC,EAE/E4G,EAAE,WAAW5G,CAAC,EAAIyC,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,WAAWrG,CAAC,CAAC,EAAIyC,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,WAAWrG,CAAC,EAAE,MAAQ,EAAGqG,EAAE,WAAWrG,CAAC,EAAE,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIqG,EAAE,WAAWrG,CAAC,CAEtO,CACD,OAAIqG,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IAC7C,OAAOA,EAAE,UAAa,SACtBO,EAAE,SAAWnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,QAAQ,EAAIA,EAAE,SAEzDO,EAAE,SAAWnE,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,QAAQ,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,SAAS,MAAQ,EAAGA,EAAE,SAAS,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIA,EAAE,UAE/LA,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IACzC,OAAOA,EAAE,QAAW,SACpBO,EAAE,OAASnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,MAAM,EAAIA,EAAE,OAErDO,EAAE,OAASnE,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,MAAM,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,OAAO,MAAQ,EAAGA,EAAE,OAAO,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIA,EAAE,QAEvLA,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOP,EAAE,MAEXA,EAAE,OAAS,MAAQA,EAAE,eAAe,OAAO,IAC3CO,EAAE,MAAQX,GAAM,SAAS,SAASI,EAAE,MAAO5D,CAAC,GAEzCmE,CACf,EASIV,EAAK,UAAU,OAAS,UAAkB,CACtC,OAAO,KAAK,YAAY,SAAS,KAAMJ,EAAU,KAAK,aAAa,CAC3E,EAaII,EAAK,SAAY,UAAW,CACxB,MAAMY,EAAa,CAAA,EAAIC,EAAS,OAAO,OAAOD,CAAU,EACxD,OAAAC,EAAOD,EAAW,CAAC,EAAI,KAAK,EAAI,EAChCC,EAAOD,EAAW,CAAC,EAAI,WAAW,EAAI,EACtCC,EAAOD,EAAW,CAAC,EAAI,MAAM,EAAI,EACjCC,EAAOD,EAAW,CAAC,EAAI,UAAU,EAAI,EACrCC,EAAOD,EAAW,CAAC,EAAI,SAAS,EAAI,EACpCC,EAAOD,EAAW,CAAC,EAAI,WAAW,EAAI,EAC/BC,CACf,IAEWb,CACX,KAEwBD,GAAM,UAAY,IAAM,CAkB5C,SAASe,EAASb,EAAG,CACjB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAA+G,EAAS,UAAU,QAAUhB,EAAM,KAAOA,EAAM,KAAK,SAAS,EAAE,EAAE,EAAK,EAAI,EAQ3EgB,EAAS,UAAU,sBAAwB,EAW3CA,EAAS,OAAS,SAAgBX,EAAGC,EAAG,CACpC,OAAKA,IACDA,EAAIP,GAAQ,UAChBO,EAAE,OAAO,CAAC,EAAE,MAAMD,EAAE,OAAO,EACvBA,EAAE,uBAAyB,MAAQ,OAAO,eAAe,KAAKA,EAAG,uBAAuB,GACxFC,EAAE,OAAO,EAAE,EAAE,QAAQD,EAAE,qBAAqB,EACzCC,CACf,EAaIU,EAAS,OAAS,SAAgBT,EAAGC,EAAG,CAC9BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,SACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,QAAUE,EAAE,QACd,MACJ,IAAK,GACDF,EAAE,sBAAwBE,EAAE,UAC5B,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,GAAI,CAACL,EAAE,eAAe,SAAS,EAC3B,MAAML,EAAM,cAAc,6BAA8B,CAAE,SAAUK,CAAC,CAAE,EAC3E,OAAOA,CACf,EAUIW,EAAS,WAAa,SAAoBJ,EAAG,CACzC,GAAIA,aAAaX,GAAM,SACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,SAClB,OAAIW,EAAE,SAAW,OACTZ,EAAM,MACLK,EAAE,QAAUL,EAAM,KAAK,UAAUY,EAAE,OAAO,GAAG,SAAW,GACpD,OAAOA,EAAE,SAAY,SAC1BP,EAAE,QAAU,SAASO,EAAE,QAAS,EAAE,EAC7B,OAAOA,EAAE,SAAY,SAC1BP,EAAE,QAAUO,EAAE,QACT,OAAOA,EAAE,SAAY,WAC1BP,EAAE,QAAU,IAAIL,EAAM,SAASY,EAAE,QAAQ,MAAQ,EAAGA,EAAE,QAAQ,OAAS,CAAC,EAAE,SAAQ,IAEtFA,EAAE,uBAAyB,OAC3BP,EAAE,sBAAwBO,EAAE,wBAA0B,GAEnDP,CACf,EAWIW,EAAS,SAAW,SAAkBX,EAAG5D,EAAG,CACnCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,GAAInE,EAAE,SAAU,CACZ,GAAIuD,EAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,EAAM,KAAK,EAAG,EAAG,EAAK,EAClCY,EAAE,QAAUnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACvF,MACGD,EAAE,QAAUnE,EAAE,QAAU,OAAS,IAAM,EAC3CmE,EAAE,sBAAwB,CAC7B,CACD,OAAIP,EAAE,SAAW,MAAQA,EAAE,eAAe,SAAS,IAC3C,OAAOA,EAAE,SAAY,SACrBO,EAAE,QAAUnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,OAAO,EAAIA,EAAE,QAEvDO,EAAE,QAAUnE,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,OAAO,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,QAAQ,MAAQ,EAAGA,EAAE,QAAQ,OAAS,CAAC,EAAE,SAAQ,EAAKA,EAAE,SAEvLA,EAAE,uBAAyB,MAAQA,EAAE,eAAe,uBAAuB,IAC3EO,EAAE,sBAAwBP,EAAE,uBAEzBO,CACf,EASII,EAAS,UAAU,OAAS,UAAkB,CAC1C,OAAO,KAAK,YAAY,SAAS,KAAMlB,EAAU,KAAK,aAAa,CAC3E,EAEWkB,CACX,GAAK,EAEmBf,GAAM,UAAY,IAAM,CAiB5C,SAASgB,EAASd,EAAG,CACjB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAgH,EAAS,UAAU,SAAW,GAW9BA,EAAS,OAAS,SAAgBZ,EAAGC,EAAG,CACpC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,QAAQ,EAC3BC,CACf,EAaIW,EAAS,OAAS,SAAgBV,EAAGC,EAAG,CAC9BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,SACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,SAAWE,EAAE,SACf,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUIY,EAAS,WAAa,SAAoBL,EAAG,CACzC,GAAIA,aAAaX,GAAM,SACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,SAClB,OAAIW,EAAE,UAAY,OACdP,EAAE,SAAW,OAAOO,EAAE,QAAQ,GAE3BP,CACf,EAWIY,EAAS,SAAW,SAAkBZ,EAAG5D,EAAG,CACnCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACFmE,EAAE,SAAW,IAEbP,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IACjDO,EAAE,SAAWP,EAAE,UAEZO,CACf,EASIK,EAAS,UAAU,OAAS,UAAkB,CAC1C,OAAO,KAAK,YAAY,SAAS,KAAMnB,EAAU,KAAK,aAAa,CAC3E,EAEWmB,CACX,GAAC,ECzsBD,MAAMC,GAASC,GAOTC,GAAQ,CACZ,MACA,YACA,OACA,WACA,UACA,wBACF,EAEMC,GAAW,CACf,YACA,wBACF,EAEMC,GAAoB,SAAS,OAAQ,CAAC,EACtCC,GAAyB,SAAS,OAAQ,CAAC,EAK1C,SAASC,GAAWC,EAAM,CAC/B,GAAIA,GAAQ,KAIZ,OAAI,OAAOA,GAAS,SACXA,EAAO,MAGhBA,EAAOA,EAAK,SAAU,EAElBA,EAAK,UAAU,EAAG,CAAC,IAAM,IAEpB,SAASA,EAAM,CAAC,EAAI,KAItB,SAASA,EAAM,EAAE,EAAI,KAC9B,CAKO,SAASC,GAAYnE,EAAO,CACjC,GAAIA,GAAS,KACX,OAIF,IAAIoE,EA2BJ,GAxBIpE,EAAM,MAAQ,OAChBoE,EAAQ,CACN,KAAMpE,EAAM,KACZ,MAAOA,EAAM,KACd,GAICA,EAAM,SAAW,OACnBoE,EAAQ,CACN,KAAMpE,EAAM,QACZ,MAAOA,EAAM,qBACd,GAIC,MAAM,QAAQA,CAAK,IACrBoE,EAAQ,CACN,KAAMpE,EAAM,CAAC,EACb,MAAOA,EAAM,CAAC,CACf,GAICA,aAAiB,KAAM,CACzB,MAAMqE,EAAKrE,EAAM,QAAS,EACpBsE,EAAO,KAAK,MAAMD,EAAK,GAAI,EAEjCD,EAAQ,CACN,KAAME,EACN,OAAQD,EAAMC,EAAO,KAAS,GAC/B,CACF,CAiBD,GAAK,OAAO,UAAU,eAAe,KAAKF,EAAO,MAAM,EAIvD,IAAIA,GAAS,MAAQA,EAAM,OAAS,OAASA,EAAM,MAAQ,GAAKA,EAAM,MAAQ,WAC5E,MAAMG,EAAQ,IAAI,MAAM,oDAAoD,EAAG,yBAAyB,EAG1G,OAAOH,EACT,CAEA,MAAMI,CAAO,CAMX,OAAO,UAAWC,EAAW,CAC3B,MAAMC,EAAUf,GAAO,OAAOc,CAAS,EACjCE,EAAUhB,GAAO,SAASe,EAAS,CACvC,SAAU,GACV,OAAQ,GACR,MAAO,OACP,QAAS,EACf,CAAK,EAEKvD,EAAO,IAAIqD,EAAO,CACtB,KAAMX,GAAMc,EAAQ,IAAI,EACxB,KAAMA,EAAQ,KACd,WAAYA,EAAQ,WACpB,KAAMA,EAAQ,KACd,MAAOA,EAAQ,MACX,CACE,KAAMA,EAAQ,MAAM,QACpB,MAAOA,EAAQ,MAAM,qBACtB,EACD,MACV,CAAK,EAGD,OAAAxD,EAAK,cAAgBwD,EAAQ,MAAQ,EAE9BxD,CACR,CAYD,YAAayD,EAAU,CACrB,KAAM,MACV,EAAK,CACD,KAAM,CACJ,KAAAC,EACA,KAAA1D,EACA,WAAA2D,EACA,SAAAC,EACA,OAAAC,EACA,MAAAZ,EACA,KAAAF,CACN,EAAQU,EAEJ,GAAIC,GAAQ,CAAChB,GAAM,SAASgB,CAAI,EAC9B,MAAMN,EAAQ,IAAI,MAAM,SAAWM,EAAO,eAAe,EAAG,kBAAkB,EAGhF,KAAK,KAAOA,GAAQ,OACpB,KAAK,KAAO1D,EACZ,KAAK,SAAW4D,EAChB,KAAK,OAASC,EAGd,KAAK,WAAaF,GAAc,CAAE,EAClC,KAAK,cAAgB,EACrB,KAAK,KAAOb,GAAUC,CAAI,EAEtBE,IACF,KAAK,MAAQD,GAAWC,CAAK,EAEzB,KAAK,OAAS,CAAC,KAAK,MAAM,QAC5B,KAAK,MAAM,MAAQ,GAGxB,CAKD,IAAI,KAAMF,EAAM,CACd,KAAK,MAAQ,KAAK,YAAa,EAAGF,GAAyBD,GAE3D,MAAMkB,EAAahB,GAAUC,CAAI,EAE7Be,IAAe,SACjB,KAAK,MAAQA,EAEhB,CAKD,IAAI,MAAQ,CACV,OAAO,KAAK,KACb,CAED,aAAe,CACb,MAAO,GAAQ,KAAK,MAAQnB,GAAS,SAAS,KAAK,IAAI,EACxD,CAKD,aAAcvG,EAAM,CAClB,KAAK,WAAW,KAAKA,CAAI,CAC1B,CAKD,gBAAiB2H,EAAO,CACtB,KAAK,WAAW,OAAOA,EAAO,CAAC,CAChC,CAKD,UAAY,CACV,GAAI,KAAK,cAEP,MAAO,GAGT,IAAIC,EAAM,EACV,YAAK,WAAW,QAAS5H,GAAS,CAChC4H,GAAO5H,CACb,CAAK,EAEG,KAAK,OACP4H,GAAO,KAAK,KAAK,QAGZA,CACR,CAKD,SAAW,CACT,IAAIN,EAEJ,OAAQ,KAAK,KAAI,CACf,IAAK,MAAOA,EAAOlB,GAAO,SAAS,IAAK,MACxC,IAAK,YAAakB,EAAOlB,GAAO,SAAS,UAAW,MACpD,IAAK,OAAQkB,EAAOlB,GAAO,SAAS,KAAM,MAC1C,IAAK,WAAYkB,EAAOlB,GAAO,SAAS,SAAU,MAClD,IAAK,UAAWkB,EAAOlB,GAAO,SAAS,QAAS,MAChD,IAAK,yBAA0BkB,EAAOlB,GAAO,SAAS,UAAW,MACjE,QACE,MAAMY,EAAQ,IAAI,MAAM,SAAWM,EAAO,eAAe,EAAG,kBAAkB,CACjF,CAED,IAAI1D,EAAO,KAAK,MAEZ,CAAC,KAAK,MAAQ,CAAC,KAAK,KAAK,UAC3BA,EAAO,QAGT,IAAI+C,EAEA,KAAK,MAAQ,OACfA,EAAQ,KAAK,cAAgB,YAAeD,GAAU,KAAK,IAAI,GAAK,GAEhEC,IAASH,IAAqB,CAAC,KAAK,YAAW,IACjDG,EAAO,QAGLA,IAASF,IAA0B,KAAK,YAAW,IACrDE,EAAO,SAIX,IAAIE,EAEJ,GAAI,KAAK,OAAS,KAAM,CACtB,MAAMgB,EAASjB,GAAW,KAAK,KAAK,EAEhCiB,IACFhB,EAAQ,CACN,QAASgB,EAAO,KAChB,sBAAuBA,EAAO,KAC/B,EAEGhB,EAAM,wBAA0B,GAClC,OAAOA,EAAM,sBAGlB,CAED,MAAMiB,EAAS,CACb,KAAMR,EACN,KAAM1D,EACN,SAAU,KAAK,YAAW,EAAK,OAAY,KAAK,SAAU,EAC1D,WAAY,KAAK,WACjB,SAAU,KAAK,SACf,OAAQ,KAAK,OACb,KAAA+C,EACA,MAAAE,CACD,EAED,OAAOT,GAAO,OAAO0B,CAAM,EAAE,OAAQ,CACtC,CACH,CCvUA,IAAIC,GAAWrI,GAEXsI,GAAM,IACNC,GAAO,IACPC,GAAS,CAACD,GACVE,GAAM,KAAK,IAAI,EAAG,EAAE,EAExB,SAASzI,GAAO0I,EAAK5E,EAAK6E,EAAQ,CAChC7E,EAAMA,GAAO,GACb6E,EAASA,GAAU,EAGnB,QAFIC,EAAYD,EAEVD,GAAOD,IACX3E,EAAI6E,GAAQ,EAAKD,EAAM,IAAQJ,GAC/BI,GAAO,IAET,KAAMA,EAAMF,IACV1E,EAAI6E,GAAQ,EAAKD,EAAM,IAAQJ,GAC/BI,KAAS,EAEX,OAAA5E,EAAI6E,CAAM,EAAID,EAAM,EAEpB1I,GAAO,MAAQ2I,EAASC,EAAY,EAE7B9E,CACT,CAEA,IAAI5C,GAAS2H,GAETC,GAAQ,IACRC,GAAS,IAEb,SAASF,GAAKG,EAAKL,EAAQ,CACzB,IAAIM,EAAS,EACTN,EAASA,GAAU,EACnBO,EAAS,EACTC,EAAUR,EACVhH,EACAqE,EAAIgD,EAAI,OAEZ,EAAG,CACD,GAAIG,GAAWnD,EACb6C,MAAAA,GAAK,MAAQ,EACP,IAAI,WAAW,yBAAyB,EAEhDlH,EAAIqH,EAAIG,GAAS,EACjBF,GAAOC,EAAQ,IACVvH,EAAIoH,KAAWG,GACfvH,EAAIoH,IAAU,KAAK,IAAI,EAAGG,CAAK,EACpCA,GAAS,CACb,OAAWvH,GAAKmH,IAEdD,OAAAA,GAAK,MAAQM,EAAUR,EAEhBM,CACT,CAEA,IAAIG,GAAK,KAAK,IAAI,EAAI,CAAC,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EAEnBzJ,GAAS,SAAU8D,EAAO,CAC5B,OACEA,EAAQmF,GAAK,EACbnF,EAAQoF,GAAK,EACbpF,EAAQqF,GAAK,EACbrF,EAAQsF,GAAK,EACbtF,EAAQuF,GAAK,EACbvF,EAAQwF,GAAK,EACbxF,EAAQyF,GAAK,EACbzF,EAAQ0F,GAAK,EACb1F,EAAQ2F,GAAK,EACA,EAEjB,EAEIC,GAAS,CACT,OAAQxB,GACR,OAAQnH,GACR,eAAgBf,EACpB,EAEI2J,GAAeD,GCjFZ,MAAM3I,GAAS,CAACgD,EAAMyE,EAAS,IAE7B,CADMkB,GAAO,OAAO3F,EAAMyE,CAAM,EACzBkB,GAAO,OAAO,KAAK,EAQtBE,GAAW,CAACC,EAAKC,EAAQtB,EAAS,KAC7CkB,GAAO,OAAOG,EAAKC,EAAQtB,CAAM,EAC1BsB,GAOIC,GAAkBF,GACtBH,GAAO,eAAeG,CAAG,ECjBrBG,GAAS,CAACC,EAAMC,IAAW,CACtC,MAAM/J,EAAO+J,EAAO,WACdC,EAAaC,GAAsBH,CAAI,EACvCI,EAAeF,EAAaC,GAAsBjK,CAAI,EAEtDiC,EAAQ,IAAI,WAAWiI,EAAelK,CAAI,EAChDmK,OAAAA,GAAgBL,EAAM7H,EAAO,CAAC,EAC9BkI,GAAgBnK,EAAMiC,EAAO+H,CAAU,EACvC/H,EAAM,IAAI8H,EAAQG,CAAY,EAEvB,IAAIE,GAAON,EAAM9J,EAAM+J,EAAQ9H,CAAK,CAC7C,EAQarB,GAAUyJ,GAAc,CACnC,MAAMpI,EAAQP,GAAO2I,CAAS,EACxB,CAACP,EAAME,CAAU,EAAIM,GAAcrI,CAAK,EACxC,CAACjC,EAAMkK,CAAY,EAAII,GAAcrI,EAAM,SAAS+H,CAAU,CAAC,EAC/DD,EAAS9H,EAAM,SAAS+H,EAAaE,CAAY,EAEvD,GAAIH,EAAO,aAAe/J,EACxB,MAAM,IAAI,MAAM,kBAAkB,EAGpC,OAAO,IAAIoK,GAAON,EAAM9J,EAAM+J,EAAQ9H,CAAK,CAC7C,EAOaX,GAAS,CAACiJ,EAAGlJ,IAAM,CAC9B,GAAIkJ,IAAMlJ,EACR,MAAO,GACF,CACL,MAAMuC,EAAqEvC,EAE3E,OACEkJ,EAAE,OAAS3G,EAAK,MAChB2G,EAAE,OAAS3G,EAAK,MAChBA,EAAK,iBAAiB,YACtB4G,GAAWD,EAAE,MAAO3G,EAAK,KAAK,CAEjC,CACH,EAeO,IAAA6G,GAAA,KAAa,CASlB,YAAaX,EAAM9J,EAAM+J,EAAQ9H,EAAO,CACtC,KAAK,KAAO6H,EACZ,KAAK,KAAO9J,EACZ,KAAK,OAAS+J,EACd,KAAK,MAAQ9H,CACd,CACH,ECvEO,MAAMyI,GAAS,CAACC,EAAM7L,IAAS,CACpC,KAAM,CAAE,MAAAmD,EAAO,QAAA2I,CAAO,EAAKD,EAC3B,OAAQC,EAAO,CACb,IAAK,GACH,OAAOC,GACL5I,EACA6I,GAAUH,CAAI,EAC4B7L,GAASkF,EAAU,OAC9D,EACH,QACE,OAAO+G,GACL9I,EACA6I,GAAUH,CAAI,EAC+B7L,GAAQoF,GAAO,OAC7D,CACJ,CACH,EAmBM8G,GAAQ,IAAI,QAMZF,GAAYG,GAAO,CACvB,MAAMH,EAAYE,GAAM,IAAIC,CAAG,EAC/B,GAAIH,GAAa,KAAM,CACrB,MAAMA,EAAY,IAAI,IACtBE,OAAAA,GAAM,IAAIC,EAAKH,CAAS,EACjBA,CACR,CACD,OAAOA,CACT,EAUO,IAAAI,EAAA,MAAMC,EAAI,CAQf,YAAaP,EAASd,EAAMO,EAAWpI,EAAO,CAE5C,KAAK,KAAO6H,EAEZ,KAAK,QAAUc,EAEf,KAAK,UAAYP,EAEjB,KAAK,MAAQpI,EAKb,KAAK,GAAG,EAAIA,CACb,CAQD,IAAI,OAAS,CACX,OAAO,IACR,CAGD,IAAI,YAAc,CAChB,OAAO,KAAK,MAAM,UACnB,CAGD,IAAI,YAAc,CAChB,OAAO,KAAK,MAAM,UACnB,CAKD,MAAQ,CACN,OAAQ,KAAK,QAAO,CAClB,IAAK,GACH,OAA6D,KAE/D,IAAK,GAAG,CACN,KAAM,CAAE,KAAA6H,EAAM,UAAAO,CAAS,EAAK,KAE5B,GAAIP,IAASsB,GACX,MAAM,IAAI,MAAM,0CAA0C,EAI5D,GAAIf,EAAU,OAASgB,GACrB,MAAM,IAAI,MAAM,oDAAoD,EAGtE,OACEF,GAAI,SAC+Cd,CAClD,CAEJ,CACD,QACE,MAAM,MACJ,+BAA+B,KAAK,OAAO,4CAC5C,CAEJ,CACF,CAKD,MAAQ,CACN,OAAQ,KAAK,QAAO,CAClB,IAAK,GAAG,CACN,KAAM,CAAE,KAAAP,EAAM,OAAAC,CAAQ,EAAG,KAAK,UACxBM,EAAYiB,GAAcxB,EAAMC,CAAM,EAC5C,OACEoB,GAAI,SAAS,KAAK,KAAMd,CAAS,CAEpC,CACD,IAAK,GACH,OAAiD,KAEnD,QACE,MAAM,MACJ,+BAA+B,KAAK,OAAO,4CAC5C,CAEJ,CACF,CAMD,OAAQkB,EAAO,CACb,OAAOJ,GAAI,OAAO,KAAMI,CAAK,CAC9B,CAWD,OAAO,OAAQC,EAAMD,EAAO,CAC1B,MAAME,EAEFF,EAEJ,OACEE,GACAD,EAAK,OAASC,EAAQ,MACtBD,EAAK,UAAYC,EAAQ,SACzBC,GAAcF,EAAK,UAAWC,EAAQ,SAAS,CAElD,CAMD,SAAU3M,EAAM,CACd,OAAO4L,GAAO,KAAM5L,CAAI,CACzB,CAED,QAAU,CACR,MAAO,CAAE,IAAK4L,GAAO,IAAI,CAAG,CAC7B,CAED,MAAQ,CACN,OAAO,IACR,CAED,IAAK,OAAO,WAAW,GAAK,CAC1B,MAAO,KACR,CAID,CAAC,OAAO,IAAI,4BAA4B,CAAC,GAAK,CAC5C,MAAO,OAAO,KAAK,SAAQ,CAAE,GAC9B,CAoBD,OAAO,MAAOjI,EAAO,CACnB,GAAIA,GAAS,KACX,OAAO,KAGT,MAAMkB,EAA4BlB,EAClC,GAAIkB,aAAiBwH,GAEnB,OAAOxH,EACF,GAAKA,EAAM,GAAG,GAAK,MAAQA,EAAM,GAAG,IAAMA,EAAM,OAAUA,EAAM,QAAUA,EAAO,CAMtF,KAAM,CAAE,QAAAiH,EAAS,KAAAd,EAAM,UAAAO,EAAW,MAAApI,CAAO,EAAG0B,EAC5C,OAAO,IAAIwH,GACTP,EACAd,EACyCO,EACzCpI,GAAS0J,GAAUf,EAASd,EAAMO,EAAU,KAAK,CAClD,CACF,SAAU1G,EAAMiI,EAAS,IAAM,GAAM,CAIpC,KAAM,CAAE,QAAAhB,EAAS,UAAAP,EAAW,KAAAP,CAAM,EAAGnG,EAC/BoG,EAEH8B,GAAcxB,CAAS,EAC1B,OAAOc,GAAI,OAAOP,EAASd,EAAMC,CAAM,CAC7C,KAGM,QAAO,IAEV,CAaD,OAAO,OAAQa,EAASd,EAAMC,EAAQ,CACpC,GAAI,OAAOD,GAAS,SAClB,MAAM,IAAI,MAAM,uCAAuC,EAGzD,GAAI,EAAEC,EAAO,iBAAiB,YAC5B,MAAM,IAAI,MAAM,gBAAgB,EAGlC,OAAQa,EAAO,CACb,IAAK,GAAG,CACN,GAAId,IAASsB,GACX,MAAM,IAAI,MACR,wCAAwCA,EAAW,kBACpD,EAED,OAAO,IAAID,GAAIP,EAASd,EAAMC,EAAQA,EAAO,KAAK,CAErD,CACD,IAAK,GAAG,CACN,MAAM9H,EAAQ0J,GAAUf,EAASd,EAAMC,EAAO,KAAK,EACnD,OAAO,IAAIoB,GAAIP,EAASd,EAAMC,EAAQ9H,CAAK,CAC5C,CACD,QACE,MAAM,IAAI,MAAM,iBAAiB,CAEpC,CACF,CASD,OAAO,SAAU8H,EAAQ,CACvB,OAAOoB,GAAI,OAAO,EAAGC,GAAarB,CAAM,CACzC,CAYD,OAAO,SAAUD,EAAMC,EAAQ,CAC7B,OAAOoB,GAAI,OAAO,EAAGrB,EAAMC,CAAM,CAClC,CAgBD,OAAO,OAAQ9H,EAAO,CACpB,KAAM,CAACgJ,EAAKa,CAAS,EAAIX,GAAI,YAAYlJ,CAAK,EAC9C,GAAI6J,EAAU,OACZ,MAAM,IAAI,MAAM,kBAAkB,EAEpC,OAAOb,CACR,CAkBD,OAAO,YAAahJ,EAAO,CACzB,MAAM8J,EAAQZ,GAAI,aAAalJ,CAAK,EAC9B+J,EAAaD,EAAM,KAAOA,EAAM,cAChCE,EAAiBvK,GACrBO,EAAM,SAAS+J,EAAYA,EAAaD,EAAM,aAAa,CAC5D,EACD,GAAIE,EAAe,aAAeF,EAAM,cACtC,MAAM,IAAI,MAAM,kBAAkB,EAEpC,MAAMG,EAAcD,EAAe,SACjCF,EAAM,cAAgBA,EAAM,UAC7B,EACKhC,EAAS,IAAIoC,GACjBJ,EAAM,cACNA,EAAM,WACNG,EACAD,CACD,EAKD,MAAO,CAHLF,EAAM,UAAY,EACdZ,GAAI,SAA0DpB,CAAQ,EACtEoB,GAAI,SAASY,EAAM,MAAOhC,CAAM,EACO9H,EAAM,SAAS8J,EAAM,IAAI,CAAC,CACxE,CAkBD,OAAO,aAAcK,EAAc,CACjC,IAAI/D,EAAS,EACb,MAAMgE,EAAO,IAAM,CACjB,KAAM,CAAClN,EAAGU,CAAM,EAAIyK,GAAc8B,EAAa,SAAS/D,CAAM,CAAC,EAC/D,OAAAA,GAAUxI,EACHV,CACR,EAED,IAAIyL,EAA4ByB,IAC5BC,EAA0BlB,GAS9B,GAR0BR,IAAa,IAErCA,EAA4B,EAC5BvC,EAAS,GAETiE,EAA0BD,EAAI,EAG5BzB,IAAY,GAAKA,IAAY,EAC/B,MAAM,IAAI,WAAW,uBAAuBA,CAAO,EAAE,EAGvD,MAAMoB,EAAa3D,EACbkE,EAAkCF,IAClCG,EAAaH,EAAM,EACnBrM,EAAOqI,EAASmE,EAChBC,EAAgBzM,EAAOgM,EAE7B,MAAO,CAAE,QAAApB,EAAS,MAAA0B,EAAO,cAAAC,EAAe,WAAAC,EAAY,cAAAC,EAAe,KAAAzM,CAAM,CAC1E,CAiBD,OAAO,MAAOL,EAAQb,EAAM,CAC1B,KAAM,CAACiD,EAAQE,CAAK,EAAIyK,GAAgB/M,EAAQb,CAAI,EAE9CmM,EAAME,GAAI,OAAOlJ,CAAK,EAE5B,GAAIgJ,EAAI,UAAY,GAAKtL,EAAO,CAAC,IAAM,IACrC,MAAM,MAAM,wDAAwD,EAItE,OAAAmL,GAAUG,CAAG,EAAE,IAAIlJ,EAAQpC,CAAM,EAE1BsL,CACR,CACH,EAYA,MAAMyB,GAAkB,CAAC/M,EAAQb,IAAS,CACxC,OAAQa,EAAO,CAAC,EAAC,CAEf,IAAK,IAAK,CACR,MAAM0C,EAAUvD,GAAQkF,EACxB,MAAO,CACkBA,EAAU,OACjC3B,EAAQ,OAAO,GAAG2B,EAAU,MAAM,GAAGrE,CAAM,EAAE,CAC9C,CACF,CACD,KAAKqE,EAAU,OAAQ,CACrB,MAAM3B,EAAUvD,GAAQkF,EACxB,MAAO,CAAuBA,EAAU,OAAS3B,EAAQ,OAAO1C,CAAM,CAAC,CACxE,CACD,KAAKuE,GAAO,OAAQ,CAClB,MAAM7B,EAAUvD,GAAQoF,GACxB,MAAO,CAAuBA,GAAO,OAAS7B,EAAQ,OAAO1C,CAAM,CAAC,CACrE,CACD,QAAS,CACP,GAAIb,GAAQ,KACV,MAAM,MACJ,iFACD,EAEH,MAAO,CAAuBa,EAAO,CAAC,EAAIb,EAAK,OAAOa,CAAM,CAAC,CAC9D,CACF,CACH,EAQMkL,GAAa,CAAC5I,EAAO+I,EAAOlM,IAAS,CACzC,KAAM,CAAE,OAAAiD,CAAM,EAAKjD,EACnB,GAAIiD,IAAWiC,EAAU,OACvB,MAAM,MAAM,8BAA8BlF,EAAK,IAAI,WAAW,EAGhE,MAAMmM,EAAMD,EAAM,IAAIjJ,CAAM,EAC5B,GAAIkJ,GAAO,KAAM,CACf,MAAMA,EAAMnM,EAAK,OAAOmD,CAAK,EAAE,MAAM,CAAC,EACtC,OAAA+I,EAAM,IAAIjJ,EAAQkJ,CAAG,EACdA,CACX,KACI,QAAOA,CAEX,EAQMF,GAAa,CAAC9I,EAAO+I,EAAOlM,IAAS,CACzC,KAAM,CAAE,OAAAiD,CAAM,EAAKjD,EACbmM,EAAMD,EAAM,IAAIjJ,CAAM,EAC5B,GAAIkJ,GAAO,KAAM,CACf,MAAMA,EAAMnM,EAAK,OAAOmD,CAAK,EAC7B,OAAA+I,EAAM,IAAIjJ,EAAQkJ,CAAG,EACdA,CACX,KACI,QAAOA,CAEX,EAEMG,GAAc,IACdC,GAAe,GAQfM,GAAY,CAACf,EAASd,EAAMO,IAAc,CAC9C,MAAMsC,EAAa1C,GAAsBW,CAAO,EAC1CgC,EAAaD,EAAa1C,GAAsBH,CAAI,EACpD7H,EAAQ,IAAI,WAAW2K,EAAavC,EAAU,UAAU,EAC9DF,OAAAA,GAAgBS,EAAS3I,EAAO,CAAC,EACjCkI,GAAgBL,EAAM7H,EAAO0K,CAAU,EACvC1K,EAAM,IAAIoI,EAAWuC,CAAU,EACxB3K,CACT,EAEM2J,GAAY,OAAO,IAAI,kBAAkB,ECzkBlC5I,GAAO,CAAC,CAAE,KAAAhE,EAAM,KAAA8K,EAAM,OAAApK,KAAa,IAAImN,GAAO7N,EAAM8K,EAAMpK,CAAM,EAWtE,IAAAoN,GAAA,KAAa,CAOlB,YAAa9N,EAAM8K,EAAMpK,EAAQ,CAC/B,KAAK,KAAOV,EACZ,KAAK,KAAO8K,EACZ,KAAK,OAASpK,CACf,CAMD,OAAQ+C,EAAO,CACb,GAAIA,aAAiB,WAAY,CAC/B,MAAMsK,EAAS,KAAK,OAAOtK,CAAK,EAChC,OAAOsK,aAAkB,WACrBzB,GAAc,KAAK,KAAMyB,CAAM,EAE/BA,EAAO,KAAKhD,GAAUuB,GAAc,KAAK,KAAMvB,CAAM,CAAC,CAChE,KACM,OAAM,MAAM,mCAAmC,CAGlD,CACH,EC/CA,MAAMD,GAAO,EACP9K,GAAO,WAGPU,GAASgC,GAMTqI,GAAUtH,GAAU6I,GAAcxB,GAAMpK,GAAO+C,CAAK,CAAC,EAE9CuK,GAAW,CAAElD,KAAAA,QAAM9K,GAAI,OAAEU,GAAM,OAAEqK,EAAM,4GCVvCiD,GAAWhK,GAAK,CAC3B,OAAQ,KACR,KAAM,WACN,OAAS0F,GAAQ7G,GAAS6G,CAAG,EAC7B,OAASrI,GAAQuB,GAAWvB,CAAG,CACjC,CAAC,4GCNY4M,GAAQlJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACf,CAAC,yGCLYmJ,GAAQnJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACf,CAAC,yGCPYoJ,GAASjK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,YACZ,CAAC,0GCFYkK,GAASrJ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACf,CAAC,EAEYsJ,GAActJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACf,CAAC,yHCdYuJ,GAASpK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,sCACZ,CAAC,EAEYqK,GAAcrK,GAAM,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,sCACZ,CAAC,yHCVKC,GAAW,MAAM,KAAK,weAAwe,EAC9fqK,GAAgDrK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAAQkG,EAAElG,CAAC,EAAIwG,EAAUN,GAA6B,CAAE,CAAA,EAC/HoI,GAAgDtK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAAQkG,EAAyBM,EAAE,YAAY,CAAC,GAAMxG,EAAUkG,GAA6B,CAAA,GAM1K,SAAS3F,GAAQkE,EAAM,CACrB,OAAOA,EAAK,OAAO,CAACyB,EAAGM,KACrBN,GAAKmI,GAAqB7H,CAAC,EACpBN,GACN,EAAE,CACP,CAMA,SAASzE,GAAQP,EAAK,CACpB,MAAMqN,EAAO,CAAE,EACf,UAAWC,KAAQtN,EAAK,CACtB,MAAMuN,EAAMH,GAA4CE,EAAK,YAAY,CAAC,CAAG,EAC7E,GAAIC,IAAQ,OACV,MAAM,IAAI,MAAM,+BAA+BD,CAAI,EAAE,EAEvDD,EAAK,KAAKE,CAAG,CACd,CACD,OAAO,IAAI,WAAWF,CAAI,CAC5B,CAEO,MAAMG,GAAe7K,GAAK,CAC/B,OAAQ,KACR,KAAM,eACR,OAAEtD,GACF,OAAEkB,EACF,CAAC,gHC/BKkN,GAAM9O,GAIV,MAAM4E,GAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAO5E,EAAM4E,CAAI,CAAC,EAExDmK,GAAS/K,GAAK,CACzB,KAAM,WACN,KAAM,GACN,OAAQ8K,GAAI,SAAS,CACvB,CAAC,EAEYE,GAAShL,GAAK,CACzB,KAAM,WACN,KAAM,GACN,OAAQ8K,GAAI,SAAS,CACvB,CAAC,oHCdY9O,GAAO,MACP8K,GAAO,GAMPpK,GAAUuO,GAASvM,GAAOuM,CAAI,EAM9BrN,GAAUgD,GAASlC,GAAOkC,CAAI,oICfrCsK,GAAc,IAAI,YAClBC,GAAc,IAAI,YAEXnP,GAAO,OACP8K,GAAO,IAOPpK,GAAUuO,GAASC,GAAY,OAAO,KAAK,UAAUD,CAAI,CAAC,EAO1DrN,GAAUgD,GAAS,KAAK,MAAMuK,GAAY,OAAOvK,CAAI,CAAC,oICL7DwK,GAAQ,CAAE,GAAGC,GAAc,GAAGpB,GAAO,GAAGC,GAAO,GAAGC,GAAQ,GAAGC,GAAQ,GAAGlJ,GAAQ,GAAGoJ,GAAQ,GAAGgB,GAAQ,GAAG3J,GAAQ,GAAGkJ,EAAc,EAClIU,GAAS,CAAE,GAAGC,GAAM,GAAGxB,EAAU,EACjCyB,GAAS,CAAE,IAAAC,GAAK,KAAAC,EAAI,ECrBnB,MAAMC,WAA4B,KAAM,CAC7C,YAAazH,EAAU,kBAAmB,CACxC,MAAMA,CAAO,EACb,KAAK,KAAO,sBACZ,KAAK,KAAOyH,GAAoB,IACjC,CACH,CACAA,GAAoB,KAAO,sBAEpB,MAAMC,WAAiC,KAAM,CAClD,YAAa1H,EAAU,yCAA0C,CAC/D,MAAMA,CAAO,EACb,KAAK,KAAO,2BACZ,KAAK,KAAO2H,GAAwB,IACrC,CACH,CACAD,GAAyB,KAAO,2BAEzB,MAAMC,WAAgC,KAAM,CACjD,YAAa3H,EAAU,2CAA4C,CACjE,MAAMA,CAAO,EACb,KAAK,KAAO,0BACZ,KAAK,KAAO2H,GAAwB,IACrC,CACH,CACAA,GAAwB,KAAO,0BAExB,MAAMC,WAAwB,KAAM,CACzC,YAAa5H,EAAU,cAAe,CACpC,MAAMA,CAAO,EACb,KAAK,KAAO,kBACZ,KAAK,KAAO4H,GAAgB,IAC7B,CACH,CACAA,GAAgB,KAAO,kBAEhB,MAAMC,WAA6B,KAAM,CAC9C,YAAa7H,EAAU,gCAAiC,CACtD,MAAMA,CAAO,EACb,KAAK,KAAO,uBACZ,KAAK,KAAO6H,GAAqB,IAClC,CACH,CACAA,GAAqB,KAAO,uBAErB,MAAMC,WAA4B,KAAM,CAC7C,YAAa9H,EAAU,gCAAiC,CACtD,MAAMA,CAAO,EACb,KAAK,KAAO,sBACZ,KAAK,KAAO8H,GAAoB,IACjC,CACH,CACAA,GAAoB,KAAO,sBAEpB,MAAMC,WAAwB,KAAM,CACzC,YAAa/H,EAAU,cAAe,CACpC,MAAMA,CAAO,EACb,KAAK,KAAO,kBACZ,KAAK,KAAO+H,GAAgB,IAC7B,CACH,CACAA,GAAgB,KAAO,kBC3DhB,MAAMC,GAAOC,GACPC,GAAOC,GAGPC,GAAU,SAAUC,EAAI,CACjC,IAAInH,EAAS,EAEb,GADAmH,EAAKA,EAAG,SAAU,EAAC,KAAI,EACnBL,GAAKK,CAAE,EAAG,CACV,MAAMvN,EAAQ,IAAI,WAAWoG,EAAS,CAAC,EACvC,OAAAmH,EAAG,MAAM,KAAK,EAAE,QAASC,GAAS,CAC9BxN,EAAMoG,GAAQ,EAAI,SAASoH,EAAM,EAAE,EAAI,GACnD,CAAS,EACMxN,CACV,CACD,GAAIoN,GAAKG,CAAE,EAAG,CACV,MAAME,EAAWF,EAAG,MAAM,IAAK,CAAC,EAChC,IAAIrQ,EACJ,IAAKA,EAAI,EAAGA,EAAIuQ,EAAS,OAAQvQ,IAAK,CAClC,MAAMwQ,EAAOR,GAAKO,EAASvQ,CAAC,CAAC,EAC7B,IAAIyQ,EACAD,IACAC,EAAWL,GAAQG,EAASvQ,CAAC,CAAC,EAC9BuQ,EAASvQ,CAAC,EAAI0Q,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,GAE/DA,GAAY,MAAQ,EAAEzQ,EAAI,GAC1BuQ,EAAS,OAAOvQ,EAAG,EAAG0Q,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,CAAC,CAE/E,CACD,GAAIF,EAAS,CAAC,IAAM,GAChB,KAAOA,EAAS,OAAS,GACrBA,EAAS,QAAQ,GAAG,UAEnBA,EAASA,EAAS,OAAS,CAAC,IAAM,GACvC,KAAOA,EAAS,OAAS,GACrBA,EAAS,KAAK,GAAG,UAEhBA,EAAS,OAAS,EAAG,CAC1B,IAAKvQ,EAAI,EAAGA,EAAIuQ,EAAS,QAAUA,EAASvQ,CAAC,IAAM,GAAIA,IACnD,CACJ,MAAM2Q,EAAO,CAAC3Q,EAAG,CAAC,EAClB,IAAKA,EAAI,EAAIuQ,EAAS,OAAQvQ,EAAI,EAAGA,IACjC2Q,EAAK,KAAK,GAAG,EAEjBJ,EAAS,OAAO,MAAMA,EAAUI,CAAI,CACvC,CACD,MAAM7N,EAAQ,IAAI,WAAWoG,EAAS,EAAE,EACxC,IAAKlJ,EAAI,EAAGA,EAAIuQ,EAAS,OAAQvQ,IAAK,CAClC,MAAM4Q,EAAO,SAASL,EAASvQ,CAAC,EAAG,EAAE,EACrC8C,EAAMoG,GAAQ,EAAK0H,GAAQ,EAAK,IAChC9N,EAAMoG,GAAQ,EAAI0H,EAAO,GAC5B,CACD,OAAO9N,CACV,CACD,MAAM,IAAI,MAAM,oBAAoB,CACxC,EAEaJ,GAAW,SAAU6G,EAAKL,EAAS,EAAGxI,EAAQ,CACvDwI,EAAS,CAAC,CAACA,EACXxI,EAASA,GAAW6I,EAAI,OAASL,EACjC,MAAM2H,EAAO,IAAI,SAAStH,EAAI,MAAM,EACpC,GAAI7I,IAAW,EAAG,CACd,MAAMkN,EAAS,CAAA,EAEf,QAAS5N,EAAI,EAAGA,EAAIU,EAAQV,IACxB4N,EAAO,KAAKrE,EAAIL,EAASlJ,CAAC,CAAC,EAE/B,OAAO4N,EAAO,KAAK,GAAG,CACzB,CACD,GAAIlN,IAAW,GAAI,CACf,MAAMkN,EAAS,CAAA,EAEf,QAAS5N,EAAI,EAAGA,EAAIU,EAAQV,GAAK,EAC7B4N,EAAO,KAAKiD,EAAK,UAAU3H,EAASlJ,CAAC,EAAE,SAAS,EAAE,CAAC,EAEvD,OAAO4N,EAAO,KAAK,GAAG,EACjB,QAAQ,qBAAsB,QAAQ,EACtC,QAAQ,SAAU,IAAI,CAC9B,CACD,MAAO,EACX,EClFMkD,GAAI,GACGC,GAAQ,CAAA,EACR5M,GAAQ,CAAA,EACR6M,GAAQ,CACjB,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,GAAI,GAAI,MAAM,EACf,CAAC,GAAI,IAAK,KAAK,EACf,CAAC,GAAIF,GAAG,SAAS,EACjB,CAAC,GAAI,EAAG,QAAQ,EAChB,CAAC,GAAIA,GAAG,MAAO,EAAI,EACnB,CAAC,GAAIA,GAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,GAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,GAAG,UAAW,EAAI,EACvB,CAAC,IAAK,GAAI,MAAM,EAChB,CAAC,IAAK,GAAI,KAAK,EACf,CAAC,IAAK,EAAG,iBAAiB,EAC1B,CAAC,IAAK,EAAG,mBAAmB,EAC5B,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAK,EAAG,QAAQ,EACjB,CAAC,IAAK,EAAG,YAAY,EACrB,CAAC,IAAK,EAAG,aAAa,EACtB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,GAAG,OAAQ,GAAO,EAAI,EAI5B,CAAC,IAAKA,GAAG,MAAM,EAEf,CAAC,IAAKA,GAAG,KAAK,EACd,CAAC,IAAK,EAAG,OAAO,EAChB,CAAC,IAAK,GAAI,OAAO,EACjB,CAAC,IAAK,IAAK,QAAQ,EACnB,CAAC,IAAKA,GAAG,UAAU,EACnB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,GAAG,KAAK,EACd,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAK,EAAG,SAAS,EAClB,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAKA,GAAG,UAAU,EACnB,CAAC,IAAK,EAAG,IAAI,EACb,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,oBAAoB,EAC7B,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAKA,GAAG,QAAQ,CACrB,EAEAE,GAAM,QAAQC,GAAO,CACjB,MAAMC,EAAQC,GAAe,GAAGF,CAAG,EACnC9M,GAAM+M,EAAM,IAAI,EAAIA,EACpBH,GAAMG,EAAM,IAAI,EAAIA,CACxB,CAAC,EACM,SAASC,GAAexG,EAAM9J,EAAMhB,EAAMuR,EAAYC,EAAM,CAC/D,MAAO,CACH,KAAA1G,EACA,KAAA9J,EACA,KAAAhB,EACA,WAAY,EAAQuR,EACpB,KAAM,EAAQC,CACtB,CACA,CAaO,SAASC,GAAYJ,EAAO,CAC/B,GAAI,OAAOA,GAAU,SAAU,CAC3B,GAAI/M,GAAM+M,CAAK,GAAK,KAChB,OAAO/M,GAAM+M,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,SACQ,OAAOA,GAAU,SAAU,CAChC,GAAIH,GAAMG,CAAK,GAAK,KAChB,OAAOH,GAAMG,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,CACD,MAAM,IAAI,MAAM,6BAA6B,OAAOA,CAAK,EAAE,CAC/D,CC7DO,SAASK,GAAgBL,EAAO3H,EAAK,CAExC,OADiB+H,GAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACL,IAAK,IACD,OAAOM,GAASjI,CAAG,EACvB,IAAK,IACD,OAAOkI,GAAUlI,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAOmI,GAAWnI,CAAG,EAAE,WAC3B,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAOkI,GAAUlI,CAAG,EACxB,IAAK,KACD,OAAOoI,GAASpI,CAAG,EACvB,IAAK,KACD,OAAOqI,GAAYrI,CAAG,EAC1B,IAAK,KACD,OAAOqI,GAAYrI,CAAG,EAC1B,IAAK,KACD,OAAOsI,GAAStI,CAAG,EACvB,QACI,OAAOmH,EAAmBnH,EAAK,QAAQ,CAC9C,CACL,CACO,SAASuI,GAAeZ,EAAOhQ,EAAK,CAEvC,OADiBoQ,GAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACD,OAAOa,GAAS7Q,CAAG,EACvB,IAAK,IACD,OAAO6Q,GAAS7Q,CAAG,EACvB,IAAK,IACD,OAAO8Q,GAAU9Q,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAO+Q,GAAW,SAAS/Q,EAAK,EAAE,CAAC,EACvC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAO8Q,GAAU9Q,CAAG,EACxB,IAAK,KACD,OAAOgR,GAAShR,CAAG,EACvB,IAAK,KACD,OAAOiR,GAAYjR,CAAG,EAC1B,IAAK,KACD,OAAOkR,GAAalR,CAAG,EAC3B,IAAK,KACD,OAAOmR,GAASnR,CAAG,EACvB,QACI,OAAOoR,EAAqBpR,EAAK,QAAQ,CAChD,CACL,CACA,MAAMmC,GAAW,OAAO,OAAO4L,EAAK,EAAE,IAAKzI,GAAMA,EAAE,OAAO,EACpD+L,GAAkB,UAAY,CAChC,IAAIC,EAAMnP,GAAS,CAAC,EAAE,GAAGA,GAAS,CAAC,CAAC,EACpCA,OAAAA,GAAS,MAAM,CAAC,EAAE,QAASsD,GAAO6L,EAAMA,EAAI,GAAG7L,CAAC,CAAE,EAC3C6L,CACX,IACA,SAAST,GAASU,EAAU,CACxB,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOE,GAAWF,CAAQ,CAC9B,CACA,SAASjB,GAASoB,EAAQ,CACtB,MAAMH,EAAWI,GAAYD,EAAQ,EAAGA,EAAO,MAAM,EACrD,GAAIH,GAAY,KACZ,MAAM,IAAI,MAAM,oBAAoB,EAExC,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOA,CACX,CACA,SAASR,GAAWa,EAAM,CACtB,MAAMvJ,EAAM,IAAI,YAAY,CAAC,EAE7B,OADa,IAAI,SAASA,CAAG,EACxB,UAAU,EAAGuJ,CAAI,EACf,IAAI,WAAWvJ,CAAG,CAC7B,CACA,SAASmI,GAAWnI,EAAK,CAErB,OADa,IAAI,SAASA,EAAI,MAAM,EACxB,UAAUA,EAAI,UAAU,CACxC,CACA,SAASyI,GAAU9Q,EAAK,CACpB,MAAMqI,EAAM+I,EAAqBpR,CAAG,EAC9BL,EAAO,WAAW,KAAKuJ,EAAO,OAAOb,EAAI,MAAM,CAAC,EACtD,OAAOwJ,GAAiB,CAAClS,EAAM0I,CAAG,EAAG1I,EAAK,OAAS0I,EAAI,MAAM,CACjE,CACA,SAASkI,GAAUlI,EAAK,CACpB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EAE9B,GADAA,EAAMA,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC/Bb,EAAI,SAAW1I,EACf,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAO6P,EAAmBnH,CAAG,CACjC,CACA,SAAS2I,GAASc,EAAM,CACpB,IAAIC,EACAD,EAAK,CAAC,IAAM,KAAOA,EAAK,CAAC,IAAM,IAC/BC,EAAKvG,GAAc7H,EAAU,OAAO,IAAImO,CAAI,EAAE,CAAC,EAAE,MAGjDC,EAAKjH,EAAI,MAAMgH,CAAI,EAAE,UAAU,MAGnC,MAAMnS,EAAO,WAAW,KAAKuJ,EAAO,OAAO6I,EAAG,MAAM,CAAC,EACrD,OAAOF,GAAiB,CAAClS,EAAMoS,CAAE,EAAGpS,EAAK,OAASoS,EAAG,MAAM,CAC/D,CACA,SAASZ,GAASa,EAAO,CACrB,MAAMC,EAAKZ,GAAe,OAAOW,CAAK,EAChCrS,EAAO,WAAW,KAAKuJ,EAAO,OAAO+I,EAAG,MAAM,CAAC,EACrD,OAAOJ,GAAiB,CAAClS,EAAMsS,CAAE,EAAGtS,EAAK,OAASsS,EAAG,MAAM,CAC/D,CACA,SAAStB,GAAStI,EAAK,CACnB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EACxByJ,EAAOzJ,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC1C,GAAI4I,EAAK,SAAWnS,EAChB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,MAAO,IAAM6P,EAAmBsC,EAAM,WAAW,CACrD,CAIA,SAASrB,GAASpI,EAAK,CACnB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EACxB6J,EAAU7J,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC7C,GAAIgJ,EAAQ,SAAWvS,EACnB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAO6P,EAAmB0C,EAAS,WAAW,CAClD,CACA,SAASjB,GAAYjR,EAAK,CACtB,MAAMmS,EAAOnS,EAAI,MAAM,GAAG,EAC1B,GAAImS,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,2BAA2B,EAGrF,MAAM9J,EAAMxE,GAAO,OAAO,IAAMsO,EAAK,CAAC,CAAC,EAEjCP,EAAO,SAASO,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIP,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMQ,EAAUrB,GAAWa,CAAI,EAC/B,OAAOC,GAAiB,CAACxJ,EAAK+J,CAAO,EAAG/J,EAAI,OAAS+J,EAAQ,MAAM,CACvE,CACA,SAASlB,GAAalR,EAAK,CACvB,MAAMmS,EAAOnS,EAAI,MAAM,GAAG,EAC1B,GAAImS,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,4BAA4B,EAGtF,MAAM9J,EAAMxE,GAAO,OAAO,IAAIsO,EAAK,CAAC,CAAC,EAAE,EAEjCP,EAAO,SAASO,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIP,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMQ,EAAUrB,GAAWa,CAAI,EAC/B,OAAOC,GAAiB,CAACxJ,EAAK+J,CAAO,EAAG/J,EAAI,OAAS+J,EAAQ,MAAM,CACvE,CACA,SAAS1B,GAAYrI,EAAK,CACtB,MAAMgK,EAAYhK,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,EACvCiK,EAAYjK,EAAI,MAAMA,EAAI,OAAS,CAAC,EACpC8J,EAAO3C,EAAmB6C,EAAW,QAAQ,EAC7CT,EAAOpB,GAAW8B,CAAS,EACjC,MAAO,GAAGH,CAAI,IAAIP,CAAI,EAC1B,CCjNO,SAASW,GAAqBvS,EAAK,CACtC,MAAMwS,EAAS,CAAA,EACTC,EAAQzS,EAAI,MAAM,GAAG,EAAE,MAAM,CAAC,EACpC,GAAIyS,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,GACnC,MAAO,GAEX,QAASzN,EAAI,EAAGA,EAAIyN,EAAM,OAAQzN,IAAK,CACnC,MAAM0N,EAAOD,EAAMzN,CAAC,EACdgL,EAAQI,GAAYsC,CAAI,EAC9B,GAAI1C,EAAM,OAAS,EAAG,CAClBwC,EAAO,KAAK,CAACE,CAAI,CAAC,EAElB,QACH,CAED,GADA1N,IACIA,GAAKyN,EAAM,OACX,MAAME,GAAW,oBAAsB3S,CAAG,EAG9C,GAAIgQ,EAAM,OAAS,GAAM,CACrBwC,EAAO,KAAK,CACRE,EAIAE,GAAUH,EAAM,MAAMzN,CAAC,EAAE,KAAK,GAAG,CAAC,CAClD,CAAa,EACD,KACH,CACDwN,EAAO,KAAK,CAACE,EAAMD,EAAMzN,CAAC,CAAC,CAAC,CAC/B,CACD,OAAOwN,CACX,CAIO,SAASK,GAAqBL,EAAQ,CACzC,MAAMC,EAAQ,CAAA,EACd,OAAAD,EAAO,IAAKM,GAAQ,CAChB,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAAL,EAAM,KAAKzC,EAAM,IAAI,EACjB8C,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,MAC5BL,EAAM,KAAKK,EAAI,CAAC,CAAC,EAEd,IACf,CAAK,EACMF,GAAUH,EAAM,KAAK,GAAG,CAAC,CACpC,CAIO,SAASO,GAAqBR,EAAQ,CACzC,OAAOA,EAAO,IAAKM,GAAQ,CAClB,MAAM,QAAQA,CAAG,IAClBA,EAAM,CAACA,CAAG,GAEd,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAIA,EAAI,OAAS,EACN,CAAC9C,EAAM,KAAMY,GAAeZ,EAAM,KAAM8C,EAAI,CAAC,CAAC,CAAC,EAEnD,CAAC9C,EAAM,IAAI,CAC1B,CAAK,CACL,CAMO,SAASiD,GAAqBT,EAAQ,CACzC,OAAOA,EAAO,IAAIM,GAAO,CACrB,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAIA,EAAI,CAAC,GAAK,KACH,CAAC9C,EAAM,KAAMK,GAAgBL,EAAM,KAAM8C,EAAI,CAAC,CAAC,CAAC,EAEpD,CAAC9C,EAAM,IAAI,CAC1B,CAAK,CACL,CAIO,SAASkD,GAAcV,EAAQ,CAClC,OAAOW,GAAUtB,GAAiBW,EAAO,IAAKM,GAAQ,CAClD,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,IAAIzK,EAAM,WAAW,KAAKa,EAAO,OAAO8G,EAAM,IAAI,CAAC,EACnD,OAAI8C,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,OAC5BzK,EAAMwJ,GAAiB,CAACxJ,EAAKyK,EAAI,CAAC,CAAC,CAAC,GAEjCzK,CACV,CAAA,CAAC,CAAC,CACP,CAIO,SAAS+K,GAAYpO,EAAGmN,EAAM,CACjC,OAAInN,EAAE,KAAO,EACFA,EAAE,KAAO,EAEXA,EAAE,OAAS,EACT,EAGMkE,EAAO,OAAOiJ,CAAI,GAChBjJ,EAAO,OAAO,OAAS,EAE9C,CACO,SAASmK,GAAchL,EAAK,CAC/B,MAAMmK,EAAS,CAAA,EACf,IAAI1T,EAAI,EACR,KAAOA,EAAIuJ,EAAI,QAAQ,CACnB,MAAMoB,EAAOP,EAAO,OAAOb,EAAKvJ,CAAC,EAC3B,EAAIoK,EAAO,OAAO,OAAS,EAC3BlE,EAAIoL,GAAY3G,CAAI,EACpB9J,EAAOyT,GAAYpO,EAAGqD,EAAI,MAAMvJ,EAAI,CAAC,CAAC,EAC5C,GAAIa,IAAS,EAAG,CACZ6S,EAAO,KAAK,CAAC/I,CAAI,CAAC,EAClB3K,GAAK,EAEL,QACH,CACD,MAAMqT,EAAO9J,EAAI,MAAMvJ,EAAI,EAAGA,EAAI,EAAIa,CAAI,EAE1C,GADAb,GAAMa,EAAO,EACTb,EAAIuJ,EAAI,OACR,MAAMsK,GAAW,+BAAiCnD,EAAmBnH,EAAK,QAAQ,CAAC,EAGvFmK,EAAO,KAAK,CAAC/I,EAAM0I,CAAI,CAAC,CAC3B,CACD,OAAOK,CACX,CAIO,SAASc,GAAcjL,EAAK,CAC/B,MAAM6B,EAAImJ,GAAchL,CAAG,EACrBrH,EAAIiS,GAAqB/I,CAAC,EAChC,OAAO2I,GAAqB7R,CAAC,CACjC,CAIO,SAASuS,GAAcvT,EAAK,CAC/BA,EAAM4S,GAAU5S,CAAG,EACnB,MAAMkK,EAAIqI,GAAqBvS,CAAG,EAC5BgB,EAAIgS,GAAqB9I,CAAC,EAChC,OAAOgJ,GAAclS,CAAC,CAC1B,CAIO,SAASO,GAAWvB,EAAK,CAC5B,OAAOuT,GAAcvT,CAAG,CAC5B,CAIO,SAASmT,GAAU9K,EAAK,CAC3B,MAAMmL,EAAMC,GAAcpL,CAAG,EAC7B,GAAImL,GAAO,KACP,MAAMA,EAEV,OAAO,WAAW,KAAKnL,CAAG,CAC9B,CACO,SAASoL,GAAcpL,EAAK,CAC/B,GAAI,CACAgL,GAAchL,CAAG,CACpB,OACMmL,EAAK,CACR,OAAOA,CACV,CACL,CAIO,SAASZ,GAAU5S,EAAK,CAC3B,MAAO,IAAMA,EAAI,KAAM,EAAC,MAAM,GAAG,EAAE,OAAQkK,GAAMA,CAAC,EAAE,KAAK,GAAG,CAChE,CACO,SAASyI,GAAW3S,EAAK,CAC5B,OAAO,IAAI,MAAM,0BAA4BA,CAAG,CACpD,CACO,SAAS+S,GAAeD,EAAK,CAEhC,OADc1C,GAAY0C,EAAI,CAAC,CAAC,CAEpC,CCjLA,IAAIY,GAA0BC,YAAQA,WAAK,wBAA2B,SAAUC,EAAUC,EAAOC,EAAMC,EAAG,CACtG,GAAID,IAAS,KAAO,CAACC,EAAG,MAAM,IAAI,UAAU,+CAA+C,EAC3F,GAAI,OAAOF,GAAU,WAAaD,IAAaC,GAAS,CAACE,EAAI,CAACF,EAAM,IAAID,CAAQ,EAAG,MAAM,IAAI,UAAU,0EAA0E,EACjL,OAAOE,IAAS,IAAMC,EAAID,IAAS,IAAMC,EAAE,KAAKH,CAAQ,EAAIG,EAAIA,EAAE,MAAQF,EAAM,IAAID,CAAQ,CAChG,EACII,GAA0BL,YAAQA,WAAK,wBAA2B,SAAUC,EAAUC,EAAOvQ,EAAOwQ,EAAMC,EAAG,CAC7G,GAAID,IAAS,IAAK,MAAM,IAAI,UAAU,gCAAgC,EACtE,GAAIA,IAAS,KAAO,CAACC,EAAG,MAAM,IAAI,UAAU,+CAA+C,EAC3F,GAAI,OAAOF,GAAU,WAAaD,IAAaC,GAAS,CAACE,EAAI,CAACF,EAAM,IAAID,CAAQ,EAAG,MAAM,IAAI,UAAU,yEAAyE,EAChL,OAAQE,IAAS,IAAMC,EAAE,KAAKH,EAAUtQ,CAAK,EAAIyQ,EAAIA,EAAE,MAAQzQ,EAAQuQ,EAAM,IAAID,EAAUtQ,CAAK,EAAIA,CACxG,EACI2Q,GAA0BC,GAA0BC,GAAgCC,GASxF,MAAMC,GAAU,OAAO,IAAI,4BAA4B,EACjDC,GAAY,CACdlE,GAAY,KAAK,EAAE,KACnBA,GAAY,MAAM,EAAE,KACpBA,GAAY,MAAM,EAAE,KACpBA,GAAY,SAAS,EAAE,IAC3B,EAIamE,GAAY,IAAI,IACvBC,GAAS,OAAO,IAAI,sCAAsC,EAYzD,SAASC,GAAgBtC,EAAMuC,EAAW,CAC7C,GAAIvC,GAAQ,KACR,MAAM,IAAI,MAAM,8BAA8B,EAElD,GAAIuC,GAAa,KACb,MAAM,IAAI,MAAM,6BAA6B,EAEjD,IAAIvF,EACAwF,EAAOxC,EAAK,QAChB,OAAQA,EAAK,OAAM,CACf,IAAK,GACDhD,EAAK,MACL,MACJ,IAAK,GAED,GADAA,EAAK,MACDwF,EAAK,SAAS,GAAG,EAAG,CACpB,MAAMlC,EAAQkC,EAAK,MAAM,GAAG,EAC5B,GAAIlC,EAAM,SAAW,EACjB,MAAM,MAAM,iCAAiC,EAEjDkC,EAAOlC,EAAM,CAAC,EAEdtD,EAAK,YADQsD,EAAM,CAAC,CACC,MACxB,CACD,MACJ,QACI,MAAM,MAAM,wCAAwC,CAC3D,CACD,OAAO,IAAImC,GAAiB,IAAM,CAACzF,EAAIwF,EAAMD,EAAWvC,EAAK,IAAI,EAAE,KAAK,GAAG,CAAC,CAChF,CAeO,SAAS0C,GAAO1C,EAAM,CACzB,OAAK2C,GAAY3C,CAAI,EAIdA,EAAK,SAAS,KAAMnC,GAAUA,EAAM,UAAU,EAH1C,EAIf,CAeO,SAAS8E,GAAYxR,EAAO,CAC/B,MAAO,EAAQA,IAAQkR,EAAM,CACjC,CAIA,IAAAO,GAAA,MAAMH,EAAiB,CACnB,YAAYzC,EAAM,CASd,GARA8B,GAAyB,IAAI,KAAM,MAAM,EACzCC,GAAyB,IAAI,KAAM,MAAM,EACzCC,GAA+B,IAAI,KAAM,MAAM,EAC/C,KAAKC,EAAE,EAAI,GAEPjC,GAAQ,OACRA,EAAO,IAEPA,aAAgB,WAChB,KAAK,MAAQ6C,GAAgB7C,CAAI,UAE5B,OAAOA,GAAS,SAAU,CAC/B,GAAIA,EAAK,OAAS,GAAKA,EAAK,OAAO,CAAC,IAAM,IACtC,MAAM,IAAI,MAAM,cAAcA,CAAI,yBAAyB,EAE/D,KAAK,MAAQ8C,GAAiB9C,CAAI,CACrC,SACQ2C,GAAY3C,CAAI,EACrB,KAAK,MAAQ6C,GAAgB7C,EAAK,KAAK,MAGvC,OAAM,IAAI,MAAM,qDAAqD,CAE5E,CACD,UAAW,CACP,OAAIuB,GAAuB,KAAMO,GAA0B,GAAG,GAAK,MAC/DD,GAAuB,KAAMC,GAA0BiB,GAAoB,KAAK,KAAK,EAAG,GAAG,EAExFxB,GAAuB,KAAMO,GAA0B,GAAG,CACpE,CACD,QAAS,CACL,OAAO,KAAK,UACf,CACD,WAAY,CACR,IAAIkB,EACAT,EACAC,EACA/C,EACAwD,EAAO,GACX,MAAMC,EAAMjF,GAAY,KAAK,EACvBkF,EAAMlF,GAAY,KAAK,EACvBmF,EAAMnF,GAAY,KAAK,EACvBoF,EAAMpF,GAAY,KAAK,EACvBqF,EAAOrF,GAAY,MAAM,EACzBsF,EAAUtF,GAAY,SAAS,EACrC,SAAW,CAAC3G,EAAMnG,CAAK,IAAK,KAAK,aAAY,EACrCmG,IAASiM,EAAQ,OACjBN,EAAO,IAAI9R,GAAS,EAAE,IAGtBgR,GAAU,SAAS7K,CAAI,IACvBiL,EAAYW,EAAI,KAChBzD,EAAO,IACP+C,EAAO,GAAGrR,GAAS,EAAE,GAAG8R,CAAI,GAC5BD,EAAS1L,IAASgM,EAAK,KAAO,EAAI,IAElChM,IAAS4L,EAAI,MAAQ5L,IAAS6L,EAAI,QAClCZ,EAAYtE,GAAY3G,CAAI,EAAE,KAC9BmI,EAAO,SAAStO,GAAS,EAAE,IAE3BmG,IAAS8L,EAAI,MAAQ9L,IAAS+L,EAAI,QAClCd,EAAYtE,GAAY3G,CAAI,EAAE,KAC9BkL,EAAO,GAAGrR,GAAS,EAAE,GAAG8R,CAAI,GAC5BD,EAAS1L,IAAS+L,EAAI,KAAO,EAAI,GAGzC,GAAIL,GAAU,MAAQT,GAAa,MAAQC,GAAQ,MAAQ/C,GAAQ,KAC/D,MAAM,IAAI,MAAM,qGAAqG,EAQzH,MANa,CACT,OAAAuD,EACA,KAAAR,EACA,UAAAD,EACA,KAAA9C,CACZ,CAEK,CACD,QAAS,CACL,OAAO,KAAK,aAAa,IAAInI,GAAQ,OAAO,OAAO,GAAI2G,GAAY3G,CAAI,CAAC,CAAC,CAC5E,CACD,YAAa,CACT,MAAMxG,EAAQ,CAAA,EACRoF,EAAM,KAAK,MACjB,IAAIvJ,EAAI,EACR,KAAOA,EAAIuJ,EAAI,QAAQ,CACnB,MAAMoB,EAAOP,EAAO,OAAOb,EAAKvJ,CAAC,EAC3B4G,EAAIwD,EAAO,OAAO,OAAS,EAC3BlE,EAAIoL,GAAY3G,CAAI,EACpB9J,EAAOgW,GAAkB3Q,EAAGqD,EAAI,MAAMvJ,EAAI4G,CAAC,CAAC,EAClD5G,GAAMa,EAAO+F,EACbzC,EAAM,KAAKwG,CAAI,CAClB,CACD,OAAOxG,CACV,CACD,YAAa,CACT,OAAO,KAAK,SAAS,IAAI+M,GAASA,EAAM,IAAI,CAC/C,CACD,QAAS,CACL,OAAI0D,GAAuB,KAAMQ,GAA0B,GAAG,GAAK,MAC/DF,GAAuB,KAAME,GAA0B0B,GAAoB,KAAK,KAAK,EAAG,GAAG,EAExFlC,GAAuB,KAAMQ,GAA0B,GAAG,CACpE,CACD,cAAe,CACX,OAAIR,GAAuB,KAAMS,GAAgC,GAAG,GAAK,MACrEH,GAAuB,KAAMG,GAAgC0B,GAA2B,KAAK,OAAQ,CAAA,EAAG,GAAG,EAExGnC,GAAuB,KAAMS,GAAgC,GAAG,CAC1E,CACD,YAAYhC,EAAM,CACd,OAAAA,EAAO,IAAIyC,GAAiBzC,CAAI,EACzB,IAAIyC,GAAiB,KAAK,SAAU,EAAGzC,EAAK,SAAQ,CAAE,CAChE,CACD,YAAYA,EAAM,CACd,MAAM2D,EAAa3D,EAAK,WAClB4D,EAAI,KAAK,WACTjX,EAAIiX,EAAE,YAAYD,CAAU,EAClC,GAAIhX,EAAI,EACJ,MAAM,IAAI,MAAM,WAAW,KAAK,UAAU,iCAAiCqT,EAAK,SAAU,CAAA,EAAE,EAEhG,OAAO,IAAIyC,GAAiBmB,EAAE,MAAM,EAAGjX,CAAC,CAAC,CAC5C,CACD,gBAAgB2K,EAAM,CAClB,MAAM+I,EAAS,KAAK,SACpB,QAAS1T,EAAI0T,EAAO,OAAS,EAAG1T,GAAK,EAAGA,IACpC,GAAI0T,EAAO1T,CAAC,EAAE,CAAC,IAAM2K,EACjB,OAAO,IAAImL,GAAiBoB,GAAoBxD,EAAO,MAAM,EAAG1T,CAAC,CAAC,CAAC,EAG3E,OAAO,IACV,CACD,WAAY,CACR,GAAI,CAQA,MAAMmX,EAPS,KAAK,aAAc,EAAC,OAAQA,GACnCA,EAAM,CAAC,IAAMpG,GAAM,KAAK,IAI/B,EAEoB,MACrB,GAAIoG,IAAQ,CAAC,GAAK,KAAM,CACpB,MAAMC,EAAYD,EAAM,CAAC,EAGzB,OAAIC,EAAU,CAAC,IAAM,KAAOA,EAAU,CAAC,IAAM,IAClC1G,EAAmB7L,EAAU,OAAO,IAAIuS,CAAS,EAAE,EAAG,WAAW,EAGrE1G,EAAmB1E,EAAI,MAAMoL,CAAS,EAAE,UAAU,MAAO,WAAW,CAC9E,CACD,OAAO,IACV,MACS,CACN,OAAO,IACV,CACJ,CACD,SAAU,CACN,IAAI/F,EAAO,KACX,GAAI,CACAA,EAAO,KAAK,aAAc,EAAC,OAAQ8F,GACjB7F,GAAY6F,EAAM,CAAC,CAAC,EACxB,OAAS,EAItB,EAAE,CAAC,EAAE,CAAC,EACH9F,GAAQ,OACRA,EAAO,KAEd,MACK,CACFA,EAAO,IACV,CACD,OAAOA,CACV,CACD,OAAOgC,EAAM,CACT,OAAOgE,GAAiB,KAAK,MAAOhE,EAAK,KAAK,CACjD,CACD,MAAM,QAAQnL,EAAS,CACnB,MAAMoP,EAAkB,KAAK,OAAQ,EAAC,KAAMpR,GAAMA,EAAE,UAAU,EAE9D,GAAIoR,GAAmB,KACnB,MAAO,CAAC,IAAI,EAEhB,MAAMC,EAAW9B,GAAU,IAAI6B,EAAgB,IAAI,EACnD,GAAIC,GAAY,KACZ,MAAMC,EAAQ,IAAI,MAAM,6BAA6BF,EAAgB,IAAI,EAAE,EAAG,2BAA2B,EAG7G,OADkB,MAAMC,EAAS,KAAMrP,CAAO,GAC7B,IAAK,GAAM,IAAI4N,GAAiB,CAAC,CAAC,CACtD,CACD,aAAc,CACV,MAAM5N,EAAU,KAAK,YACrB,GAAIA,EAAQ,YAAc,OAASA,EAAQ,YAAc,MACrD,MAAM,IAAI,MAAM,gEAAgEA,EAAQ,SAAS,uDAAuD,EAE5J,MAAO,CACH,OAAQA,EAAQ,OAChB,QAASA,EAAQ,KACjB,KAAMA,EAAQ,IAC1B,CACK,CACD,mBAAmBmL,EAAM,CACrB,MAAMoE,GAAUpE,GAAQ,MAAM,OAAM,EAOpC,MANI,EAAAoE,EAAO,SAAW,GAGlBA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAG3CA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAIlD,CAaD,EAAEtC,GAA2B,IAAI,QAAWC,GAA2B,IAAI,QAAWC,GAAiC,IAAI,QAAWC,GAAKI,GAAQH,GAAO,GAAK,CAC3J,MAAO,aAAaa,GAAoB,KAAK,KAAK,CAAC,GACtD,CACL,EAcO,SAASsB,GAAUrE,EAAM,CAC5B,OAAO,IAAIyC,GAAiBzC,CAAI,CACpC,CCrXO,MAAMrD,GAAOC,GACPC,GAAOC,GAGPC,GAAU,SAAUC,EAAI,CACjC,IAAInH,EAAS,EAEb,GADAmH,EAAKA,EAAG,SAAU,EAAC,KAAI,EACnBL,GAAKK,CAAE,EAAG,CACV,MAAMvN,EAAQ,IAAI,WAAWoG,EAAS,CAAC,EACvC,OAAAmH,EAAG,MAAM,KAAK,EAAE,QAASC,GAAS,CAC9BxN,EAAMoG,GAAQ,EAAI,SAASoH,EAAM,EAAE,EAAI,GACnD,CAAS,EACMxN,CACV,CACD,GAAIoN,GAAKG,CAAE,EAAG,CACV,MAAME,EAAWF,EAAG,MAAM,IAAK,CAAC,EAChC,IAAIrQ,EACJ,IAAKA,EAAI,EAAGA,EAAIuQ,EAAS,OAAQvQ,IAAK,CAClC,MAAMwQ,EAAOR,GAAKO,EAASvQ,CAAC,CAAC,EAC7B,IAAIyQ,EACAD,IACAC,EAAWL,GAAQG,EAASvQ,CAAC,CAAC,EAC9BuQ,EAASvQ,CAAC,EAAI0Q,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,GAE/DA,GAAY,MAAQ,EAAEzQ,EAAI,GAC1BuQ,EAAS,OAAOvQ,EAAG,EAAG0Q,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,CAAC,CAE/E,CACD,GAAIF,EAAS,CAAC,IAAM,GAChB,KAAOA,EAAS,OAAS,GACrBA,EAAS,QAAQ,GAAG,UAEnBA,EAASA,EAAS,OAAS,CAAC,IAAM,GACvC,KAAOA,EAAS,OAAS,GACrBA,EAAS,KAAK,GAAG,UAEhBA,EAAS,OAAS,EAAG,CAC1B,IAAKvQ,EAAI,EAAGA,EAAIuQ,EAAS,QAAUA,EAASvQ,CAAC,IAAM,GAAIA,IACnD,CACJ,MAAM2Q,EAAO,CAAC3Q,EAAG,CAAC,EAClB,IAAKA,EAAI,EAAIuQ,EAAS,OAAQvQ,EAAI,EAAGA,IACjC2Q,EAAK,KAAK,GAAG,EAEjBJ,EAAS,OAAO,MAAMA,EAAUI,CAAI,CACvC,CACD,MAAM7N,EAAQ,IAAI,WAAWoG,EAAS,EAAE,EACxC,IAAKlJ,EAAI,EAAGA,EAAIuQ,EAAS,OAAQvQ,IAAK,CAClC,MAAM4Q,EAAO,SAASL,EAASvQ,CAAC,EAAG,EAAE,EACrC8C,EAAMoG,GAAQ,EAAK0H,GAAQ,EAAK,IAChC9N,EAAMoG,GAAQ,EAAI0H,EAAO,GAC5B,CACD,OAAO9N,CACV,CACD,MAAM,IAAI,MAAM,oBAAoB,CACxC,EAEaJ,GAAW,SAAU6G,EAAKL,EAAS,EAAGxI,EAAQ,CACvDwI,EAAS,CAAC,CAACA,EACXxI,EAASA,GAAW6I,EAAI,OAASL,EACjC,MAAM2H,EAAO,IAAI,SAAStH,EAAI,MAAM,EACpC,GAAI7I,IAAW,EAAG,CACd,MAAMkN,EAAS,CAAA,EAEf,QAAS5N,EAAI,EAAGA,EAAIU,EAAQV,IACxB4N,EAAO,KAAKrE,EAAIL,EAASlJ,CAAC,CAAC,EAE/B,OAAO4N,EAAO,KAAK,GAAG,CACzB,CACD,GAAIlN,IAAW,GAAI,CACf,MAAMkN,EAAS,CAAA,EAEf,QAAS5N,EAAI,EAAGA,EAAIU,EAAQV,GAAK,EAC7B4N,EAAO,KAAKiD,EAAK,UAAU3H,EAASlJ,CAAC,EAAE,SAAS,EAAE,CAAC,EAEvD,OAAO4N,EAAO,KAAK,GAAG,EACjB,QAAQ,qBAAsB,QAAQ,EACtC,QAAQ,SAAU,IAAI,CAC9B,CACD,MAAO,EACX,EClFMkD,GAAI,GACGC,GAAQ,CAAA,EACR5M,GAAQ,CAAA,EACR6M,GAAQ,CACjB,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,GAAI,GAAI,MAAM,EACf,CAAC,GAAI,IAAK,KAAK,EACf,CAAC,GAAIF,GAAG,SAAS,EACjB,CAAC,GAAI,EAAG,QAAQ,EAChB,CAAC,GAAIA,GAAG,MAAO,EAAI,EACnB,CAAC,GAAIA,GAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,GAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,GAAG,UAAW,EAAI,EACvB,CAAC,IAAK,GAAI,MAAM,EAChB,CAAC,IAAK,GAAI,KAAK,EACf,CAAC,IAAK,EAAG,iBAAiB,EAC1B,CAAC,IAAK,EAAG,mBAAmB,EAC5B,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAK,EAAG,eAAe,EACxB,CAAC,IAAK,EAAG,QAAQ,EACjB,CAAC,IAAK,EAAG,aAAa,EACtB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,GAAG,OAAQ,GAAO,EAAI,EAI5B,CAAC,IAAKA,GAAG,MAAM,EAEf,CAAC,IAAKA,GAAG,KAAK,EACd,CAAC,IAAK,EAAG,OAAO,EAChB,CAAC,IAAK,GAAI,OAAO,EACjB,CAAC,IAAK,IAAK,QAAQ,EACnB,CAAC,IAAKA,GAAG,UAAU,EACnB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,GAAG,KAAK,EACd,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAK,EAAG,SAAS,EAClB,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAKA,GAAG,UAAU,EACnB,CAAC,IAAK,EAAG,IAAI,EACb,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,oBAAoB,EAC7B,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAKA,GAAG,QAAQ,CACrB,EAEAE,GAAM,QAAQC,GAAO,CACjB,MAAMC,EAAQC,GAAe,GAAGF,CAAG,EACnC9M,GAAM+M,EAAM,IAAI,EAAIA,EACpBH,GAAMG,EAAM,IAAI,EAAIA,CACxB,CAAC,EACM,SAASC,GAAexG,EAAM9J,EAAMhB,EAAMuR,EAAYC,EAAM,CAC/D,MAAO,CACH,KAAA1G,EACA,KAAA9J,EACA,KAAAhB,EACA,WAAY,EAAQuR,EACpB,KAAM,EAAQC,CACtB,CACA,CAaO,SAASC,GAAYJ,EAAO,CAC/B,GAAI,OAAOA,GAAU,SAAU,CAC3B,GAAI/M,GAAM+M,CAAK,GAAK,KAChB,OAAO/M,GAAM+M,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,SACQ,OAAOA,GAAU,SAAU,CAChC,GAAIH,GAAMG,CAAK,GAAK,KAChB,OAAOH,GAAMG,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,CACD,MAAM,IAAI,MAAM,6BAA6B,OAAOA,CAAK,EAAE,CAC/D,CCvEoBI,GAAY,KAAK,EACjBA,GAAY,KAAK,EACdA,GAAY,QAAQ,EAYpC,SAASC,GAAgBL,EAAO3H,EAAK,CAExC,OADiB+H,GAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACL,IAAK,IACD,OAAOM,GAASjI,CAAG,EACvB,IAAK,IACD,OAAOkI,GAAUlI,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAOmI,GAAWnI,CAAG,EAAE,WAC3B,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAOkI,GAAUlI,CAAG,EACxB,IAAK,KACD,OAAOoI,GAASpI,CAAG,EACvB,IAAK,KACD,OAAOqI,GAAYrI,CAAG,EAC1B,IAAK,KACD,OAAOqI,GAAYrI,CAAG,EAC1B,IAAK,KACD,OAAOsI,GAAStI,CAAG,EACvB,QACI,OAAOmH,EAAmBnH,EAAK,QAAQ,CAC9C,CACL,CACO,SAASuI,GAAeZ,EAAOhQ,EAAK,CAEvC,OADiBoQ,GAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACD,OAAOa,GAAS7Q,CAAG,EACvB,IAAK,IACD,OAAO6Q,GAAS7Q,CAAG,EACvB,IAAK,IACD,OAAO8Q,GAAU9Q,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAO+Q,GAAW,SAAS/Q,EAAK,EAAE,CAAC,EACvC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAO8Q,GAAU9Q,CAAG,EACxB,IAAK,KACD,OAAOgR,GAAShR,CAAG,EACvB,IAAK,KACD,OAAOiR,GAAYjR,CAAG,EAC1B,IAAK,KACD,OAAOkR,GAAalR,CAAG,EAC3B,IAAK,KACD,OAAOmR,GAASnR,CAAG,EACvB,QACI,OAAOoR,EAAqBpR,EAAK,QAAQ,CAChD,CACL,CAiBA,MAAMmC,GAAW,OAAO,OAAO4L,EAAK,EAAE,IAAKzI,GAAMA,EAAE,OAAO,EACpD+L,GAAkB,UAAY,CAChC,IAAIC,EAAMnP,GAAS,CAAC,EAAE,GAAGA,GAAS,CAAC,CAAC,EACpC,OAAAA,GAAS,MAAM,CAAC,EAAE,QAASsD,GAAO6L,EAAMA,EAAI,GAAG7L,CAAC,CAAE,EAC3C6L,CACX,IACA,SAAST,GAASU,EAAU,CACxB,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOE,GAAWF,CAAQ,CAC9B,CACA,SAASjB,GAASoB,EAAQ,CACtB,MAAMH,EAAWI,GAAYD,EAAQ,EAAGA,EAAO,MAAM,EACrD,GAAIH,GAAY,KACZ,MAAM,IAAI,MAAM,oBAAoB,EAExC,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOA,CACX,CACA,SAASR,GAAWa,EAAM,CACtB,MAAMvJ,EAAM,IAAI,YAAY,CAAC,EAE7B,OADa,IAAI,SAASA,CAAG,EACxB,UAAU,EAAGuJ,CAAI,EACf,IAAI,WAAWvJ,CAAG,CAC7B,CACA,SAASmI,GAAWnI,EAAK,CAErB,OADa,IAAI,SAASA,EAAI,MAAM,EACxB,UAAUA,EAAI,UAAU,CACxC,CACA,SAASyI,GAAU9Q,EAAK,CACpB,MAAMqI,EAAM+I,EAAqBpR,CAAG,EAC9BL,EAAO,WAAW,KAAKuJ,EAAO,OAAOb,EAAI,MAAM,CAAC,EACtD,OAAOwJ,GAAiB,CAAClS,EAAM0I,CAAG,EAAG1I,EAAK,OAAS0I,EAAI,MAAM,CACjE,CACA,SAASkI,GAAUlI,EAAK,CACpB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EAE9B,GADAA,EAAMA,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC/Bb,EAAI,SAAW1I,EACf,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAO6P,EAAmBnH,CAAG,CACjC,CACA,SAAS2I,GAASc,EAAM,CACpB,IAAIC,EACAD,EAAK,CAAC,IAAM,KAAOA,EAAK,CAAC,IAAM,IAC/BC,EAAKvG,GAAc7H,EAAU,OAAO,IAAImO,CAAI,EAAE,CAAC,EAAE,MAGjDC,EAAKjH,EAAI,MAAMgH,CAAI,EAAE,UAAU,MAGnC,MAAMnS,EAAO,WAAW,KAAKuJ,EAAO,OAAO6I,EAAG,MAAM,CAAC,EACrD,OAAOF,GAAiB,CAAClS,EAAMoS,CAAE,EAAGpS,EAAK,OAASoS,EAAG,MAAM,CAC/D,CACA,SAASZ,GAASa,EAAO,CACrB,MAAMC,EAAKZ,GAAe,OAAOW,CAAK,EAChCrS,EAAO,WAAW,KAAKuJ,EAAO,OAAO+I,EAAG,MAAM,CAAC,EACrD,OAAOJ,GAAiB,CAAClS,EAAMsS,CAAE,EAAGtS,EAAK,OAASsS,EAAG,MAAM,CAC/D,CACA,SAAStB,GAAStI,EAAK,CACnB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EACxByJ,EAAOzJ,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC1C,GAAI4I,EAAK,SAAWnS,EAChB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,MAAO,IAAM6P,EAAmBsC,EAAM,WAAW,CACrD,CAIA,SAASrB,GAASpI,EAAK,CACnB,MAAM1I,EAAOuJ,EAAO,OAAOb,CAAG,EACxB6J,EAAU7J,EAAI,MAAMa,EAAO,OAAO,KAAK,EAC7C,GAAIgJ,EAAQ,SAAWvS,EACnB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAO6P,EAAmB0C,EAAS,WAAW,CAClD,CACA,SAASjB,GAAYjR,EAAK,CACtB,MAAMmS,EAAOnS,EAAI,MAAM,GAAG,EAC1B,GAAImS,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,2BAA2B,EAGrF,MAAM9J,EAAMxE,GAAO,OAAO,IAAMsO,EAAK,CAAC,CAAC,EAEjCP,EAAO,SAASO,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIP,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMQ,EAAUrB,GAAWa,CAAI,EAC/B,OAAOC,GAAiB,CAACxJ,EAAK+J,CAAO,EAAG/J,EAAI,OAAS+J,EAAQ,MAAM,CACvE,CACA,SAASlB,GAAalR,EAAK,CACvB,MAAMmS,EAAOnS,EAAI,MAAM,GAAG,EAC1B,GAAImS,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,4BAA4B,EAGtF,MAAM9J,EAAMxE,GAAO,OAAO,IAAIsO,EAAK,CAAC,CAAC,EAAE,EAEjCP,EAAO,SAASO,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIP,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMQ,EAAUrB,GAAWa,CAAI,EAC/B,OAAOC,GAAiB,CAACxJ,EAAK+J,CAAO,EAAG/J,EAAI,OAAS+J,EAAQ,MAAM,CACvE,CACA,SAAS1B,GAAYrI,EAAK,CACtB,MAAMgK,EAAYhK,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,EACvCiK,EAAYjK,EAAI,MAAMA,EAAI,OAAS,CAAC,EACpC8J,EAAO3C,EAAmB6C,EAAW,QAAQ,EAC7CT,EAAOpB,GAAW8B,CAAS,EACjC,MAAO,GAAGH,CAAI,IAAIP,CAAI,EAC1B,CCrOO,SAASW,GAAqBvS,EAAK,CACtC,MAAMwS,EAAS,CAAA,EACTC,EAAQzS,EAAI,MAAM,GAAG,EAAE,MAAM,CAAC,EACpC,GAAIyS,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,GACnC,MAAO,GAEX,QAASzN,EAAI,EAAGA,EAAIyN,EAAM,OAAQzN,IAAK,CACnC,MAAM0N,EAAOD,EAAMzN,CAAC,EACdgL,EAAQI,GAAYsC,CAAI,EAC9B,GAAI1C,EAAM,OAAS,EAAG,CAClBwC,EAAO,KAAK,CAACE,CAAI,CAAC,EAElB,QACH,CAED,GADA1N,IACIA,GAAKyN,EAAM,OACX,MAAME,GAAW,oBAAsB3S,CAAG,EAG9C,GAAIgQ,EAAM,OAAS,GAAM,CACrBwC,EAAO,KAAK,CACRE,EAIAE,GAAUH,EAAM,MAAMzN,CAAC,EAAE,KAAK,GAAG,CAAC,CAClD,CAAa,EACD,KACH,CACDwN,EAAO,KAAK,CAACE,EAAMD,EAAMzN,CAAC,CAAC,CAAC,CAC/B,CACD,OAAOwN,CACX,CAIO,SAASK,GAAqBL,EAAQ,CACzC,MAAMC,EAAQ,CAAA,EACd,OAAAD,EAAO,IAAKM,GAAQ,CAChB,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAAL,EAAM,KAAKzC,EAAM,IAAI,EACjB8C,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,MAC5BL,EAAM,KAAKK,EAAI,CAAC,CAAC,EAEd,IACf,CAAK,EACMF,GAAUH,EAAM,KAAK,GAAG,CAAC,CACpC,CAIO,SAASO,GAAqBR,EAAQ,CACzC,OAAOA,EAAO,IAAKM,GAAQ,CAClB,MAAM,QAAQA,CAAG,IAClBA,EAAM,CAACA,CAAG,GAEd,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAIA,EAAI,OAAS,EACN,CAAC9C,EAAM,KAAMY,GAAeZ,EAAM,KAAM8C,EAAI,CAAC,CAAC,CAAC,EAEnD,CAAC9C,EAAM,IAAI,CAC1B,CAAK,CACL,CAMO,SAASiD,GAAqBT,EAAQ,CACzC,OAAOA,EAAO,IAAIM,GAAO,CACrB,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,OAAIA,EAAI,CAAC,GAAK,KACH,CAAC9C,EAAM,KAAMK,GAAgBL,EAAM,KAAM8C,EAAI,CAAC,CAAC,CAAC,EAEpD,CAAC9C,EAAM,IAAI,CAC1B,CAAK,CACL,CAIO,SAASkD,GAAcV,EAAQ,CAClC,OAAOW,GAAUtB,GAAiBW,EAAO,IAAKM,GAAQ,CAClD,MAAM9C,EAAQ+C,GAAeD,CAAG,EAChC,IAAIzK,EAAM,WAAW,KAAKa,EAAO,OAAO8G,EAAM,IAAI,CAAC,EACnD,OAAI8C,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,OAC5BzK,EAAMwJ,GAAiB,CAACxJ,EAAKyK,EAAI,CAAC,CAAC,CAAC,GAEjCzK,CACV,CAAA,CAAC,CAAC,CACP,CAIO,SAAS+K,GAAYpO,EAAGmN,EAAM,CACjC,OAAInN,EAAE,KAAO,EACFA,EAAE,KAAO,EAEXA,EAAE,OAAS,EACT,EAGMkE,EAAO,OAAOiJ,CAAI,GAChBjJ,EAAO,OAAO,OAAS,EAE9C,CACO,SAASmK,GAAchL,EAAK,CAC/B,MAAMmK,EAAS,CAAA,EACf,IAAI1T,EAAI,EACR,KAAOA,EAAIuJ,EAAI,QAAQ,CACnB,MAAMoB,EAAOP,EAAO,OAAOb,EAAKvJ,CAAC,EAC3B,EAAIoK,EAAO,OAAO,OAAS,EAC3BlE,EAAIoL,GAAY3G,CAAI,EACpB9J,EAAOyT,GAAYpO,EAAGqD,EAAI,MAAMvJ,EAAI,CAAC,CAAC,EAC5C,GAAIa,IAAS,EAAG,CACZ6S,EAAO,KAAK,CAAC/I,CAAI,CAAC,EAClB3K,GAAK,EAEL,QACH,CACD,MAAMqT,EAAO9J,EAAI,MAAMvJ,EAAI,EAAGA,EAAI,EAAIa,CAAI,EAE1C,GADAb,GAAMa,EAAO,EACTb,EAAIuJ,EAAI,OACR,MAAMsK,GAAW,+BAAiCnD,EAAmBnH,EAAK,QAAQ,CAAC,EAGvFmK,EAAO,KAAK,CAAC/I,EAAM0I,CAAI,CAAC,CAC3B,CACD,OAAOK,CACX,CAIO,SAASc,GAAcjL,EAAK,CAC/B,MAAM6B,EAAImJ,GAAchL,CAAG,EACrBrH,EAAIiS,GAAqB/I,CAAC,EAChC,OAAO2I,GAAqB7R,CAAC,CACjC,CAIO,SAASuS,GAAcvT,EAAK,CAC/BA,EAAM4S,GAAU5S,CAAG,EACnB,MAAMkK,EAAIqI,GAAqBvS,CAAG,EAC5BgB,EAAIgS,GAAqB9I,CAAC,EAChC,OAAOgJ,GAAclS,CAAC,CAC1B,CAIO,SAASO,GAAWvB,EAAK,CAC5B,OAAOuT,GAAcvT,CAAG,CAC5B,CAIO,SAASmT,GAAU9K,EAAK,CAC3B,MAAMmL,EAAMC,GAAcpL,CAAG,EAC7B,GAAImL,GAAO,KACP,MAAMA,EAEV,OAAO,WAAW,KAAKnL,CAAG,CAC9B,CACO,SAASoL,GAAcpL,EAAK,CAC/B,GAAI,CACAgL,GAAchL,CAAG,CACpB,OACMmL,EAAK,CACR,OAAOA,CACV,CACL,CAIO,SAASZ,GAAU5S,EAAK,CAC3B,MAAO,IAAMA,EAAI,KAAM,EAAC,MAAM,GAAG,EAAE,OAAQkK,GAAMA,CAAC,EAAE,KAAK,GAAG,CAChE,CACO,SAASyI,GAAW3S,EAAK,CAC5B,OAAO,IAAI,MAAM,0BAA4BA,CAAG,CACpD,CACO,SAAS+S,GAAeD,EAAK,CAEhC,OADc1C,GAAY0C,EAAI,CAAC,CAAC,CAEpC,CCzKA,MAAMuB,GAAU,OAAO,IAAI,4BAA4B,EACjDC,GAAY,CACdlE,GAAY,KAAK,EAAE,KACnBA,GAAY,MAAM,EAAE,KACpBA,GAAY,MAAM,EAAE,KACpBA,GAAY,SAAS,EAAE,IAC3B,EAIamE,GAAY,IAAI,IACvBC,GAAS,OAAO,IAAI,sCAAsC,EA8EzD,SAASM,GAAYxR,EAAO,CAC/B,MAAO,EAAQA,IAAQkR,EAAM,CACjC,oBAIA,MAAMiC,GAAN,MAAMA,EAAiB,CAOnB,YAAYtE,EAAM,CANlBuE,GAAA,cACAC,GAAA,KAAAC,GAAA,QACAD,GAAA,KAAAE,GAAA,QACAF,GAAA,KAAAG,GAAA,QACAH,GAAA,KAAAI,GAAA,QACAL,GAAA,KAACtC,GAAU,IAMP,GAHIjC,GAAQ,OACRA,EAAO,IAEPA,aAAgB,WAChB,KAAK,MAAQ6C,GAAgB7C,CAAI,UAE5B,OAAOA,GAAS,SAAU,CAC/B,GAAIA,EAAK,OAAS,GAAKA,EAAK,OAAO,CAAC,IAAM,IACtC,MAAM,IAAI,MAAM,cAAcA,CAAI,yBAAyB,EAE/D,KAAK,MAAQ8C,GAAiB9C,CAAI,CACrC,SACQ2C,GAAY3C,CAAI,EACrB,KAAK,MAAQ6C,GAAgB7C,EAAK,KAAK,MAGvC,OAAM,IAAI,MAAM,qDAAqD,CAE5E,CACD,UAAW,CACP,OAAI6E,GAAA,KAAKJ,KAAW,MAChBK,GAAA,KAAKL,GAAU1B,GAAoB,KAAK,KAAK,GAE1C8B,GAAA,KAAKJ,GACf,CACD,QAAS,CACL,OAAO,KAAK,UACf,CACD,WAAY,CACR,IAAIzB,EACAT,EACAC,EACA/C,EACAwD,EAAO,GACX,MAAMC,EAAMjF,GAAY,KAAK,EACvBkF,EAAMlF,GAAY,KAAK,EACvBmF,EAAMnF,GAAY,KAAK,EACvBoF,EAAMpF,GAAY,KAAK,EACvBqF,EAAOrF,GAAY,MAAM,EACzBsF,EAAUtF,GAAY,SAAS,EACrC,SAAW,CAAC3G,EAAMnG,CAAK,IAAK,KAAK,aAAY,EACrCmG,IAASiM,EAAQ,OACjBN,EAAO,IAAI9R,GAAS,EAAE,IAGtBgR,GAAU,SAAS7K,CAAI,IACvBiL,EAAYW,EAAI,KAChBzD,EAAO,IACP+C,EAAO,GAAGrR,GAAS,EAAE,GAAG8R,CAAI,GAC5BD,EAAS1L,IAASgM,EAAK,KAAO,EAAI,IAElChM,IAAS4L,EAAI,MAAQ5L,IAAS6L,EAAI,QAClCZ,EAAYtE,GAAY3G,CAAI,EAAE,KAC9BmI,EAAO,SAAStO,GAAS,EAAE,IAE3BmG,IAAS8L,EAAI,MAAQ9L,IAAS+L,EAAI,QAClCd,EAAYtE,GAAY3G,CAAI,EAAE,KAC9BkL,EAAO,GAAGrR,GAAS,EAAE,GAAG8R,CAAI,GAC5BD,EAAS1L,IAAS+L,EAAI,KAAO,EAAI,GAGzC,GAAIL,GAAU,MAAQT,GAAa,MAAQC,GAAQ,MAAQ/C,GAAQ,KAC/D,MAAM,IAAI,MAAM,qGAAqG,EAQzH,MANa,CACT,OAAAuD,EACA,KAAAR,EACA,UAAAD,EACA,KAAA9C,CACZ,CAEK,CACD,QAAS,CACL,OAAO,KAAK,aAAa,IAAInI,GAAQ,OAAO,OAAO,GAAI2G,GAAY3G,CAAI,CAAC,CAAC,CAC5E,CACD,YAAa,CACT,MAAMxG,EAAQ,CAAA,EACRoF,EAAM,KAAK,MACjB,IAAIvJ,EAAI,EACR,KAAOA,EAAIuJ,EAAI,QAAQ,CACnB,MAAMoB,EAAOP,EAAO,OAAOb,EAAKvJ,CAAC,EAC3B4G,EAAIwD,EAAO,OAAO,OAAS,EAC3BlE,EAAIoL,GAAY3G,CAAI,EACpB9J,EAAOgW,GAAkB3Q,EAAGqD,EAAI,MAAMvJ,EAAI4G,CAAC,CAAC,EAClD5G,GAAMa,EAAO+F,EACbzC,EAAM,KAAKwG,CAAI,CAClB,CACD,OAAOxG,CACV,CACD,YAAa,CACT,OAAO,KAAK,SAAS,IAAI+M,GAASA,EAAM,IAAI,CAC/C,CACD,QAAS,CACL,OAAIgH,GAAA,KAAKH,KAAW,MAChBI,GAAA,KAAKJ,GAAUjB,GAAoB,KAAK,KAAK,GAE1CoB,GAAA,KAAKH,GACf,CACD,cAAe,CACX,OAAIG,GAAA,KAAKF,KAAiB,MACtBG,GAAA,KAAKH,GAAgBjB,GAA2B,KAAK,OAAQ,CAAA,GAE1DmB,GAAA,KAAKF,GACf,CACD,YAAY3E,EAAM,CACd,OAAAA,EAAO,IAAIsE,GAAiBtE,CAAI,EACzB,IAAIsE,GAAiB,KAAK,SAAU,EAAGtE,EAAK,SAAQ,CAAE,CAChE,CACD,YAAYA,EAAM,CACd,MAAM2D,EAAa3D,EAAK,WAClB4D,EAAI,KAAK,WACTjX,EAAIiX,EAAE,YAAYD,CAAU,EAClC,GAAIhX,EAAI,EACJ,MAAM,IAAI,MAAM,WAAW,KAAK,UAAU,iCAAiCqT,EAAK,SAAU,CAAA,EAAE,EAEhG,OAAO,IAAIsE,GAAiBV,EAAE,MAAM,EAAGjX,CAAC,CAAC,CAC5C,CACD,gBAAgB2K,EAAM,CAClB,MAAM+I,EAAS,KAAK,SACpB,QAAS1T,EAAI0T,EAAO,OAAS,EAAG1T,GAAK,EAAGA,IACpC,GAAI0T,EAAO1T,CAAC,EAAE,CAAC,IAAM2K,EACjB,OAAO,IAAIgN,GAAiBT,GAAoBxD,EAAO,MAAM,EAAG1T,CAAC,CAAC,CAAC,EAG3E,OAAO,IACV,CACD,WAAY,CACR,GAAI,CAQA,MAAMmX,EAPS,KAAK,aAAc,EAAC,OAAQA,GACnCA,EAAM,CAAC,IAAMpG,GAAM,KAAK,IAI/B,EAEoB,MACrB,GAAIoG,IAAQ,CAAC,GAAK,KAAM,CACpB,MAAMC,EAAYD,EAAM,CAAC,EAGzB,OAAIC,EAAU,CAAC,IAAM,KAAOA,EAAU,CAAC,IAAM,IAClC1G,EAAmB7L,EAAU,OAAO,IAAIuS,CAAS,EAAE,EAAG,WAAW,EAGrE1G,EAAmB1E,EAAI,MAAMoL,CAAS,EAAE,UAAU,MAAO,WAAW,CAC9E,CACD,OAAO,IACV,MACS,CACN,OAAO,IACV,CACJ,CACD,SAAU,CAGN,GAAIc,GAAA,KAAKD,MAAU,OACf,GAAI,CACAE,GAAA,KAAKF,GAAQ,KAAK,aAAY,EAAG,OAAQd,GACvB7F,GAAY6F,EAAM,CAAC,CAAC,EACxB,OAAS,EAItB,EAAE,CAAC,EAAE,CAAC,GACHe,GAAA,KAAKD,KAAS,MACdE,GAAA,KAAKF,GAAQ,KAEpB,MACK,CACFE,GAAA,KAAKF,GAAQ,KAChB,CAEL,OAAOC,GAAA,KAAKD,GACf,CACD,OAAO5E,EAAM,CACT,OAAOgE,GAAiB,KAAK,MAAOhE,EAAK,KAAK,CACjD,CACD,MAAM,QAAQnL,EAAS,CACnB,MAAMoP,EAAkB,KAAK,OAAQ,EAAC,KAAMpR,GAAMA,EAAE,UAAU,EAE9D,GAAIoR,GAAmB,KACnB,MAAO,CAAC,IAAI,EAEhB,MAAMC,EAAW9B,GAAU,IAAI6B,EAAgB,IAAI,EACnD,GAAIC,GAAY,KACZ,MAAM,IAAIa,GAAU,6BAA6Bd,EAAgB,IAAI,GAAI,2BAA2B,EAGxG,OADkB,MAAMC,EAAS,KAAMrP,CAAO,GAC7B,IAAK,GAAM,IAAIyP,GAAiB,CAAC,CAAC,CACtD,CACD,aAAc,CACV,MAAMzP,EAAU,KAAK,YACrB,GAAIA,EAAQ,YAAc,OAASA,EAAQ,YAAc,MACrD,MAAM,IAAI,MAAM,gEAAgEA,EAAQ,SAAS,uDAAuD,EAE5J,MAAO,CACH,OAAQA,EAAQ,OAChB,QAASA,EAAQ,KACjB,KAAMA,EAAQ,IAC1B,CACK,CACD,mBAAmBmL,EAAM,CACrB,MAAMoE,GAAUpE,GAAQ,MAAM,OAAM,EAOpC,MANI,EAAAoE,EAAO,SAAW,GAGlBA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAG3CA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAIlD,CAaD,EArOCnC,GAAAI,GAqOAH,GAAO,GAAI,CACR,MAAO,aAAaa,GAAoB,KAAK,KAAK,CAAC,GACtD,CACL,EA5OI0B,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YALJ,IAAMnC,GAAN6B,GA4PO,SAASD,GAAUrE,EAAM,CAC5B,OAAO,IAAIyC,GAAiBzC,CAAI,CACpC,CC9WO,MAAMgF,GAAO1Y,EAAK,MAAM,EAClB2Y,GAAO3Y,EAAK,MAAM,EAClB4Y,GAAU5Y,EAAK,SAAS,EACxB6Y,GAAMrV,GAAGxD,EAAK,KAAK,EAAG4Y,GAASF,GAAMC,EAAI,EACzCG,GAAKtV,GAAGxD,EAAK,KAAK,EAAGA,EAAK,KAAK,CAAC,EAChC+Y,GAAMvV,GAAGwV,EAAIF,GAAI9Y,EAAK,KAAK,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,CAAC,CAAC,EACpDiZ,GAAMD,EAAIF,GAAI9Y,EAAK,KAAK,CAAC,EACzBkZ,GAAMF,EAAIC,GAAKjZ,EAAK,KAAK,CAAC,EAC1BmZ,GAAOH,EAAIC,GAAKjZ,EAAK,MAAM,CAAC,EAC5BoZ,GAAa5V,GAAGwV,EAAID,GAAK/Y,EAAK,IAAI,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,IAAI,CAAC,CAAC,EAC1DqZ,GAAmB7V,GAAGwV,EAAID,GAAK/Y,EAAK,KAAK,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,CAAC,EAAGgZ,EAAID,GAAK/Y,EAAK,KAAK,EAAGA,EAAK,IAAI,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,EAAGA,EAAK,IAAI,CAAC,CAAC,EACxIsZ,GAAO9V,GAAGwV,EAAID,GAAK/Y,EAAK,MAAM,CAAC,EAAGgZ,EAAIF,GAAI9Y,EAAK,MAAM,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,MAAM,CAAC,CAAC,EAC/EuZ,GAAQ/V,GAAGwV,EAAID,GAAK/Y,EAAK,OAAO,CAAC,EAAGgZ,EAAIF,GAAI9Y,EAAK,OAAO,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,OAAO,CAAC,CAAC,EAC1FwZ,GAAUR,EAAIC,GAAKjZ,EAAK,QAAQ,EAAGA,EAAK,UAAU,CAAC,EAC5CyZ,GAASjW,GAAGwV,EAAIQ,GAASxZ,EAAK,KAAK,CAAC,EAAGwZ,EAAO,EAC9CE,GAAalW,GAAGwV,EAAII,GAAYpZ,EAAK,iBAAiB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIK,GAAkBrZ,EAAK,iBAAiB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAII,GAAYpZ,EAAK,iBAAiB,CAAC,EAAGgZ,EAAIK,GAAkBrZ,EAAK,iBAAiB,CAAC,CAAC,EAE5N2Z,GAAenW,GAAGwV,EAAIM,GAAMtZ,EAAK,mBAAmB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIO,GAAOvZ,EAAK,mBAAmB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIM,GAAMtZ,EAAK,mBAAmB,CAAC,EAAGgZ,EAAIO,GAAOvZ,EAAK,mBAAmB,CAAC,CAAC,EACpM4Z,GAAWpW,GAAG4V,GAAYC,GAAkBC,GAAMC,GAAOG,GAAYC,GAAcZ,GAAKG,GAAKC,GAAMN,GAAKY,EAAM,EAGrHI,GAAOrW,GAAGwV,EAAIY,GAAU5Z,EAAK,KAAK,CAAC,EAAG0Z,GAAYC,GAAcF,GAAQzZ,EAAK,KAAK,CAAC,EACnF8Z,GAAWtW,GAAGwV,EAAIa,GAAM7Z,EAAK,aAAa,EAAG6Z,EAAI,EAAGb,EAAIa,GAAM7Z,EAAK,aAAa,CAAC,EAAGgZ,EAAIhZ,EAAK,aAAa,EAAG6Z,EAAI,EAAGb,EAAIY,GAAU5Z,EAAK,aAAa,CAAC,EAAGgZ,EAAIhZ,EAAK,aAAa,EAAG4Z,EAAQ,EAAG5Z,EAAK,aAAa,CAAC,EAC/M+Z,GAAmB,IAAMvW,GAAGwV,EAAIc,GAAUC,EAAgB,EAAGD,EAAQ,EAC9DE,GAAUD,GAAmB,EAC7BE,GAAMzW,GAAGwV,EAAIgB,GAASH,GAAMG,EAAO,EAAGhB,EAAIa,GAAMG,EAAO,EAAGhB,EAAIgB,GAASH,EAAI,EAAGG,GAASH,EAAI,EAC3FK,GAAOD,GAIpB,SAASE,GAAoBC,EAAc,CACvC,SAASC,EAAQ5O,EAAG,CAChB,IAAI6O,EACJ,GAAI,CACAA,EAAKvC,GAAUtM,CAAC,CACnB,MACW,CACR,MAAO,EACV,CACD,MAAM/G,EAAM0V,EAAaE,EAAG,WAAY,CAAA,EACxC,OAAI5V,IAAQ,KACD,GAEPA,IAAQ,IAAQA,IAAQ,GACjBA,EAEJA,EAAI,SAAW,CACzB,CACD,OAAO2V,CACX,CACA,SAASrB,KAAOuB,EAAM,CAClB,SAASH,EAAa3O,EAAG,CACrB,GAAIA,EAAE,OAAS8O,EAAK,OAChB,OAAO,KAEX,IAAI7V,EAAM+G,EACV,OAAA8O,EAAK,KAAMC,IACP9V,EAAM,OAAO8V,GAAQ,WACfA,EAAK,EAAC,aAAa/O,CAAC,EACpB+O,EAAI,aAAa/O,CAAC,EACpB,MAAM,QAAQ/G,CAAG,IACjB+G,EAAI/G,GAEJA,IAAQ,KAIf,EACMA,CACV,CACD,MAAO,CACH,SAAU,UAAY,CAAE,MAAO,KAAO6V,EAAK,KAAK,GAAG,EAAI,IAAO,EAC9D,MAAOA,EACP,QAASJ,GAAoBC,CAAY,EACzC,aAAAA,CACR,CACA,CACA,SAAS5W,MAAM+W,EAAM,CACjB,SAASH,EAAa3O,EAAG,CACrB,IAAI/G,EAAM,KACV,OAAA6V,EAAK,KAAMC,GAAQ,CACf,MAAM3Q,EAAM,OAAO2Q,GAAQ,WACrBA,EAAK,EAAC,aAAa/O,CAAC,EACpB+O,EAAI,aAAa/O,CAAC,EACxB,OAAI5B,GAAO,MACPnF,EAAMmF,EACC,IAEJ,EACnB,CAAS,EACMnF,CACV,CAOD,MANe,CACX,SAAU,UAAY,CAAE,MAAO,KAAO6V,EAAK,KAAK,GAAG,EAAI,IAAO,EAC9D,MAAOA,EACP,QAASJ,GAAoBC,CAAY,EACzC,aAAAA,CACR,CAEA,CACA,SAASpa,EAAKiH,EAAG,CACb,MAAM/G,EAAO+G,EACb,SAASoT,EAAQ5O,EAAG,CAChB,IAAI6O,EACJ,GAAI,CACAA,EAAKvC,GAAUtM,CAAC,CACnB,MACW,CACR,MAAO,EACV,CACD,MAAMgP,EAASH,EAAG,aAClB,OAAIG,EAAO,SAAW,GAAKA,EAAO,CAAC,IAAMva,CAI5C,CACD,SAASka,EAAatC,EAAQ,CAC1B,OAAIA,EAAO,SAAW,EACX,KAEPA,EAAO,CAAC,IAAM5X,EACP4X,EAAO,MAAM,CAAC,EAElB,IACV,CACD,MAAO,CACH,SAAU,UAAY,CAAE,OAAO5X,CAAO,EACtC,QAAAma,EACA,aAAAD,CACR,CACA,CC7HO,MAAMM,GAAc,0BACrBC,GAAuB,EACvBC,GAAkB,EAEXC,GAA0B,yCAIjCC,GAAc,oFAyCpB,SAASC,GAAM1H,EAAM,CACjB,GAAI,CACA,OAAI2H,GAAS3H,CAAI,EACN,EAAQhH,EAAI,MAAMgH,CAAI,EAE7BA,aAAgB,WACT,EAAQhH,EAAI,OAAOgH,CAAI,EAE3B,EAAQhH,EAAI,MAAMgH,CAAI,CAChC,MACK,CACF,MAAO,EACV,CACL,CAaA,SAAS4H,GAAOtX,EAAOuX,EAASC,EAAgBR,GAAsBS,EAAYR,GAAiB,CAC/F,MAAMS,EAAYzJ,GAAgBjO,CAAK,EACvC,GAAI0X,IAAc,GACd,MAAO,GAEX,MAAMC,EAAQD,EAAU,MAAMH,CAAO,EAIrC,GAHII,GAAS,MAGTA,EAAMH,CAAa,IAAM,OACzB,MAAO,GAEX,IAAI9H,EAAOiI,EAAMF,CAAS,EAC1B,OAAI/H,GAAQ,MAAQ6H,IAAYL,KAI5BxH,EAAOA,EAAK,eAET0H,GAAM1H,CAAI,CACrB,CAQA,SAASkI,GAAO5X,EAAOuX,EAASC,EAAgBR,GAAsBS,EAAYR,GAAiB,CAC/F,MAAMS,EAAYzJ,GAAgBjO,CAAK,EACvC,GAAI0X,IAAc,GACd,MAAO,GAEX,MAAMC,EAAQD,EAAU,MAAMH,CAAO,EAIrC,GAHII,GAAS,MAGTA,EAAMH,CAAa,IAAM,OACzB,MAAO,GAEX,IAAIK,EAASF,EAAMF,CAAS,EAC5B,GAAII,GAAU,MAAQN,IAAYL,GAAyB,CAMvD,GAFAW,EAASA,EAAO,cAEZT,GAAMS,CAAM,EACZ,MAAO,GAEX,GAAI,CACI,CAACA,EAAO,SAAS,GAAG,GAAKA,EAAO,SAAS,GAAG,IAI5CA,EAASA,EAAO,QAAQ,MAAO,GAAG,EAAE,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,GAG5E,KAAM,CAAE,SAAAC,CAAQ,EAAK,IAAIC,GAAAA,IAAI,UAAUF,CAAM,EAAE,EAE/C,OAAOV,GAAY,KAAKW,CAAQ,CACnC,MACS,CACN,MAAO,EACV,CACJ,CACD,MAAO,EACX,CAIA,SAAST,GAASrX,EAAO,CACrB,OAAO,OAAOA,GAAU,QAC5B,CAIA,SAASiO,GAAgBjO,EAAO,CAC5B,OAAIA,aAAiB,WACVoN,EAAmBpN,EAAO,WAAW,EAE5CqX,GAASrX,CAAK,EACPA,EAEJ,EACX,CAOO,MAAM+N,GAAQA,GAASuJ,GAAOvJ,EAAMgJ,EAAW,GAAKa,GAAO7J,EAAMgJ,EAAW,EAMtEiB,GAAYjK,GAASuJ,GAAOvJ,EAAMgJ,EAAW,EAC7CkB,GAAYlK,GAAS6J,GAAO7J,EAAMgJ,EAAW,SCtLnD,MAAMmB,WAAqB,KAAM,CACtC,YAAaxT,EAAU,oBAAqB,CAC1C,MAAMA,CAAO,EACb,KAAK,KAAO,eACZ,KAAK,KAAOwT,GAAa,IAC1B,CACH,EAEAA,GAAa,KAAO,cCKb,SAASC,EAAmBC,EAAIC,EAAiB,CAEtD,MAA0B,IAAuBzB,IAAS,CACxD,MAAMhS,EAAUgS,EAAKyB,GAA0BzB,EAAK,OAAS,CAAmB,EAChF,GAAI,CAAChS,GAAW,CAACA,EAAQ,QAAS,OAAOwT,EAAG,GAAGxB,CAAI,EAEnD,MAAM0B,EAAU,OAAO1T,EAAQ,SAAY,SACvC2T,GAAc3T,EAAQ,OAAO,EAC7BA,EAAQ,QAEN4T,EAAa,IAAIC,GAAiB,kBAACH,CAAO,EAEhD1T,EAAQ,OAAS8T,GAAU,CAAC9T,EAAQ,OAAQ4T,EAAW,MAAM,CAAC,EAE9D,MAAMG,EAAQP,EAAG,GAAGxB,CAAI,EAElBgC,EAAiB,IAAI,QAAQ,CAACC,EAAUC,IAAW,CACvDN,EAAW,OAAO,iBAAiB,QAAS,IAAM,CAChDM,EAAO,IAAIZ,EAAc,CACjC,CAAO,CACP,CAAK,EAEKa,EAAQ,KAAK,IAAK,EAElBC,EAAyB,IAAM,CACnC,GAAIR,EAAW,OAAO,QACpB,MAAM,IAAIN,GAQZ,GALkB,KAAK,IAAG,EAAKa,EAKfT,EACd,MAAAE,EAAW,MAAO,EACZ,IAAIN,EAEb,EAGD,OAAIS,EAAM,OAAO,aAAa,EAEpB,iBAAoB,CAE1B,MAAMM,EAAKN,EAAM,OAAO,aAAa,EAAG,EAExC,GAAI,CACF,OAAa,CACX,KAAM,CAAE,MAAAzX,EAAO,KAAAgY,CAAM,EAAG,MAAM,QAAQ,KAAK,CAACD,EAAG,OAAQL,CAAc,CAAC,EAEtE,GAAIM,EACF,MAGFF,EAAwB,EAExB,MAAM9X,CACP,CACF,OAA2BkQ,EAAK,CAC/B,MAAA4H,EAAwB,EAElB5H,CAChB,QAAkB,CACRoH,EAAW,MAAO,EAEdS,EAAG,QACLA,EAAG,OAAQ,CAEd,CACT,EAAU,GAIE,SAAY,CAClB,GAAI,CACF,MAAM/S,EAAM,MAAM,QAAQ,KAAK,CAACyS,EAAOC,CAAc,CAAC,EAEtD,OAAAI,EAAwB,EAEjB9S,CACR,OAA2BkL,EAAK,CAC/B,MAAA4H,EAAwB,EAElB5H,CACd,QAAgB,CACRoH,EAAW,MAAO,CACnB,CACP,GAAQ,CACL,CACH,CCrGA,MAAMW,GAAc,SAMb,SAASC,GAAchb,EAAQ,CACpC,GAAIA,aAAkB,WACpB,GAAI,CACFA,EAASsK,EAAI,OAAOtK,CAAM,CAC3B,OAA2BgT,EAAK,CAC/B,MAAM8C,EAAQ9C,EAAK,iBAAiB,CACrC,CAGH,IAAI5I,EAAME,EAAI,MAAMtK,CAAM,EAE1B,GAAIoK,EACF,MAAO,CACL,IAAAA,EACA,KAAM,MACP,EAGHpK,EAASA,EAAO,SAAU,EAEtBA,EAAO,WAAW+a,EAAW,IAC/B/a,EAASA,EAAO,UAAU+a,GAAY,MAAM,GAG9C,MAAM9I,EAAQjS,EAAO,MAAM,GAAG,EAC9B,IAAI2P,EAEJ,GAAI,CACFvF,EAAME,EAAI,MAAM2H,EAAM,MAAK,GAAM,EAAE,CACpC,OAA2Be,EAAK,CAC/B,MAAM8C,EAAQ9C,EAAK,iBAAiB,CACrC,CAED,OAAIf,EAAM,SACRtC,EAAO,IAAIsC,EAAM,KAAK,GAAG,CAAC,IAGrB,CACL,IAAA7H,EACA,KAAAuF,CACD,CACH,CCnCA,MAAMsL,GAAe,eAERC,GAAgB,4EAChBC,GAAe,IAAIC,GAAI,kBAAkB,EACzCC,GAAqB,OAWrBC,GAAiBC,GAAY,CAGxC,GAFYjR,EAAI,MAAMiR,CAAO,EAG3B,MAAO,SAASA,CAAO,GAGzB,MAAM/b,EAAM+b,EAAQ,SAAU,EAE9B,GAAI,CACF,MAAO,SAASjR,EAAI,MAAM9K,CAAG,CAAC,EAC/B,MAAO,CAAE,CAEV,GAAIgc,GAAYhc,CAAG,EACjB,OAAOA,EAEP,MAAMsW,EAAQ,IAAI,MAAM,iBAAiByF,CAAO,EAAE,EAAGN,EAAY,CAErE,EAOaQ,GAAoB9L,GAC3BA,aAAgB,WACXrF,EAAI,OAAOqF,CAAI,EAAE,SAAU,GAGpCA,EAAOA,EAAK,SAAU,EAElBA,EAAK,QAAQ,QAAQ,IAAM,IAC7BA,EAAOA,EAAK,UAAU,CAAe,GAGnCA,EAAK,OAAOA,EAAK,OAAS,CAAC,IAAM,MACnCA,EAAOA,EAAK,UAAU,EAAGA,EAAK,OAAS,CAAC,GAGnCA,GAaI+L,GAAc,eAAgBC,EAAM/N,EAAQgM,EAAUpT,EAAU,CAAA,EAAI,CAC/E,KAAM,CACJ,IAAA4D,EACA,KAAAuF,CACJ,EAAMqL,GAAapB,CAAQ,EAErBjK,IACFnJ,EAAQ,KAAOmJ,GAGjB,IAAIiM,EAAUxR,EACVyR,EAAoBrV,EAAQ,MAAQ,GAMxC,GAJIqV,EAAkB,WAAW,GAAG,IAClCA,EAAoBA,EAAkB,UAAU,CAAC,GAG/CrV,EAAQ,KACV,GAAI,CACF,eAAiB,CAAE,MAAA1D,EAAO,cAAAgZ,KAAmBC,GAAQ3R,EAAK5D,EAAQ,KAAMoH,EAAQ+N,EAAM,CACpF,OAAQnV,EAAQ,MACxB,CAAO,EAAG,CACF,GAAI,CAAC8D,EAAI,MAAMxH,CAAK,EAClB,MAGF+Y,EAAoBC,EACpBF,EAAU9Y,CACX,CACF,OAA2BkQ,EAAK,CAE/B,MAAIA,EAAI,QAAQ,WAAW,wBAAwB,IACjDA,EAAI,QAAU,kBAAkB6I,EAAkB,MAAM,GAAG,EAAE,CAAC,CAAC,WAAWD,CAAO,GACjF5I,EAAI,KAAO,eAEPA,CACP,CAGH,MAAO,CACL,IAAK4I,EACL,cAAeC,GAAqB,EACrC,CACH,EAOaG,GAAWC,GAAS,CAC/B,GAAIA,EAAK,OAAS,QAAUA,EAAK,OAAS,aAAeA,EAAK,OAAS,MAErE,MAAM,IAAI,MAAM,sBAAsBA,EAAK,IAAI,GAAG,EAIpD,MAAMC,EAAS,CACb,IAAKD,EAAK,IACV,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,KAAM,MACP,EAED,OAAIA,EAAK,OAAS,cAEhBC,EAAO,KAAO,OAGZD,EAAK,OAAS,SAChBC,EAAO,KAAOD,EAAK,OAAO,SAAU,IAGlCA,EAAK,OAAS,QAAUA,EAAK,OAAS,eACxCC,EAAO,KAAOD,EAAK,OAAO,KAEtBA,EAAK,OAAO,QAAU,SACxBC,EAAO,MAAQD,EAAK,OAAO,QAIxBC,CACT,EAEaC,GAAcpC,EAOzB,MAAOqC,EAASC,IAAa,MAAMD,CACrC,EAWaL,GAAU,gBAAkB3R,EAAKuF,EAAM/B,EAAQ+N,EAAMnV,EAAS,CAIzE,MAAM8V,EAAO,MAAOlS,GAAQ,CAC1B,MAAMqB,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EACtCmS,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAEhD,OAAOiF,EAAM,OAAO8Q,CAAK,CAC1B,EAEKtK,EAAQtC,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAC5C,IAAI7M,EAAQ,MAAMwZ,EAAKlS,CAAG,EACtBwR,EAAUxR,EAGd,KAAO6H,EAAM,QAAQ,CACnB,MAAMuK,EAAMvK,EAAM,MAAO,EAEzB,GAAI,CAACuK,EACH,MAAM1G,EAAQ,IAAI,MAAM,2BAA2BnG,CAAI,GAAG,EAAG,kBAAkB,EAIjF,GAAIvF,EAAI,OAASqS,GAAc,MAAM,QAAQ3Z,EAAM,KAAK,EAAG,CACzD,MAAMgH,EAAOhH,EAAM,MAAM,KAA4B+B,GAAMA,EAAE,OAAS2X,CAAG,EAEzE,GAAI1S,EAAM,CACR,KAAM,CACJ,MAAOA,EAAK,KACZ,cAAemI,EAAM,KAAK,GAAG,CAC9B,EAEDnP,EAAQ,MAAMwZ,EAAKxS,EAAK,IAAI,EAC5B8R,EAAU9R,EAAK,KAEf,QACD,CACF,CAED,GAAI,OAAO,UAAU,eAAe,KAAKhH,EAAO0Z,CAAG,EACjD1Z,EAAQA,EAAM0Z,CAAG,EAEjB,KAAM,CACJ,MAAA1Z,EACA,cAAemP,EAAM,KAAK,GAAG,CAC9B,MAED,OAAM6D,EAAQ,IAAI,MAAM,kBAAkB0G,CAAG,WAAWZ,CAAO,EAAE,EAAG,aAAa,EAG/EtR,EAAI,MAAMxH,CAAK,IACjB8Y,EAAU9Y,EACVA,EAAQ,MAAMwZ,EAAKxZ,CAAK,EAE3B,CAED,KAAM,CACJ,MAAAA,EACA,cAAe,EAChB,CACH,EChNO,MAAM4Z,EAAQ,CAYnB,OAAO,OAAQ,CAAE,MAAA/B,EAAO,KAAAgC,CAAI,EAAI,CAC9B,OAAO,IAAID,GAAQ/B,EAAOgC,CAAI,CAC/B,CAWD,aAAa,MAAOC,EAASpW,EAAS,CACpC,KAAM,CAAE,MAAA6M,EAAO,SAAAwJ,CAAQ,EAAKD,EAC5B,OAAQvJ,EAAM,OAAM,CAQlB,IAAK,UACH,GAAI,CACF,MAAM+I,EAAUS,EAASrW,CAAO,EAChCoW,EAAQ,MAAQ,CAAE,OAAQ,WAAY,MAAOR,CAAS,EAGtD,MAAMlQ,EAAS,MAAMkQ,EACrB,OAAAQ,EAAQ,MAAQ,CAAE,OAAQ,UAAW,MAAO1Q,CAAQ,EAC7CA,CAGR,OAA2B4Q,EAAO,CACjC,MAAAF,EAAQ,MAAQ,CAAE,OAAQ,SAAW,EAC/BE,CACP,CAEH,IAAK,WACH,MAAM,IAAI3O,GAEZ,IAAK,UACH,MAAM,IAAIC,GAIZ,IAAK,WACH,aAAMiF,EAAM,MACL,MAAMqJ,GAAQ,MAAME,EAASpW,CAAO,EAE7C,QACE,OAAOkW,GAAQ,MAAME,CAAO,CAE/B,CACF,CAYD,aAAa,KAAMA,EAAS,CAC1B,KAAM,CAAE,MAAAvJ,EAAO,WAAA0J,CAAU,EAAKH,EAC9B,OAAQvJ,EAAM,OAAM,CAElB,IAAK,UACH,MAIF,IAAK,WAAY,CAEf,GAAI,CAAE,MAAMA,EAAM,KAAK,MAAgC,CAAE,CACzD,OAAO,MAAMqJ,GAAQ,KAAKE,CAAO,CAClC,CAED,IAAK,WACH,OAAO,MAAMvJ,EAAM,MAErB,IAAK,UAAW,CACV0J,GACF,MAAMA,EAAW1J,EAAM,KAAK,EAE9BuJ,EAAQ,MAAQ,CAAE,OAAQ,SAAW,EACrC,KACD,CACD,QACEF,GAAQ,MAAMrJ,CAAK,CAEtB,CACF,CAOD,OAAO,IAAK,CAAE,MAAAA,GAAS,CACrB,OAAQA,EAAM,OAAM,CAClB,IAAK,UACH,OAAOA,EAAM,MACf,QACE,OAAO,IACV,CACF,CAYD,aAAa,IAAK,CAAE,MAAAA,CAAK,EAAI7M,EAAS,CACpC,OAAQ6M,EAAM,OAAM,CAClB,IAAK,UACH,OAAOA,EAAM,MACf,IAAK,WACH,OAAO,MAAM8I,GAAY9I,EAAM,MAAO7M,CAAO,EAC/C,QACE,MAAM,IAAI0H,EACb,CACF,CAQD,OAAO,MAAO,CAAE,MAAAmF,GAAS,CACvB,MAAM2J,EAAS,KAAK,UAAU,CAAE,OAAQ3J,EAAM,OAAQ,EACtD,MAAM,WAAW,4BAA4B2J,CAAM,2DAA2D,CAC/G,CAUD,YAAaH,EAAUE,EAAY,CACjC,KAAK,SAAWF,EAChB,KAAK,WAAaE,EAQlB,KAAK,MAAQ,CAAE,OAAQ,SAAW,CACnC,CAWD,MAAM,IAAKvW,EAAS,CAClB,OAAO,MAAMkW,GAAQ,IAAI,KAAMlW,CAAO,CACvC,CAKD,KAAO,CACL,OAAOkW,GAAQ,IAAI,IAAI,CACxB,CACH,CC7NO,SAASO,GAAa,CAAE,QAAAC,EAAS,QAAAC,EAAS,OAAAC,EAAQ,SAAAC,EAAU,KAAA1B,EAAM,KAAA2B,EAAM,WAAAC,EAAY,MAAAC,EAAO,QAAAC,EAAS,QAAAjX,CAAO,EAAI,CAoBpH,MAhBc,UAAY,CACxB,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMhB,GAAQ,MAAMQ,EAAS,CAC9C,OAAAE,EACA,KAAAzB,EACA,MAAA6B,EACA,QAAAC,EACA,QAAAjX,CACN,CAAK,EAED,MAAM,QAAQ,IAAI,CAChB8W,EAAK,YAAY,CAAE,SAAAD,EAAU,OAAAK,EAAQ,OAAAN,EAAQ,KAAAzB,EAAM,EACnDwB,EAAQ,MAAO,EACfI,EAAW,MAAO,CACxB,CAAK,CACF,CAGH,CC1BO,SAASI,GAAY,CAAE,QAAAT,EAAS,QAAAC,EAAS,KAAAG,EAAM,KAAA3B,EAAM,WAAA4B,GAAc,CAkBxE,MAda,UAAY,CACvB,MAAM,QAAQ,IAAI,CAChBJ,EAAQ,KAAM,EACdG,EAAK,KAAM,EACXC,EAAW,KAAM,CACvB,CAAK,EAED,MAAMb,GAAQ,KAAKQ,CAAO,EAI1B,MAAMvB,EAAK,MAAO,CACnB,CAGH,CClBO,IAAAiC,GAAA,KAAW,CAMhB,YAAaC,EAAS,CACpB,KAAK,IAAMC,GAAQD,CAAO,CAC3B,CASD,IAAKrB,EAAK,CACR,MAAM1Z,EAAQ,KAAK,IAAI,IAAI0Z,CAAG,EAC9B,GAAI1Z,EAAO,CACT,GAAKA,EAAM,QAAYA,EAAM,OAAS,KAAK,IAAG,EAAK,CACjD,KAAK,IAAI,OAAO0Z,CAAG,EACnB,MACD,CACD,OAAO1Z,EAAM,KACd,CAEF,CAUD,IAAK0Z,EAAK1Z,EAAOib,EAAK,CACpB,KAAK,IAAI,IAAIvB,EAAK,CAAE,MAAA1Z,EAAO,OAAQ,KAAK,MAAQib,EAAK,CACtD,CAQD,IAAKvB,EAAK,CAER,MADc,OAAK,IAAIA,CAAG,CAK3B,CAOD,OAAQA,EAAK,CACX,KAAK,IAAI,OAAOA,CAAG,CACpB,CAOD,OAAS,CACP,KAAK,IAAI,MAAO,CACjB,CACH,mBCjFA,cAA2B,KAAM,CAC/B,YAAalW,EAAU,oBAAqB,CAC1C,MAAMA,CAAO,EACb,KAAK,KAAO,cACb,CACH,EACAwW,GAAA,aAAuBhD,UAEvB,cAAyB,KAAM,CAC7B,YAAaxT,EAAU,6BAA8B,CACnD,MAAMA,CAAO,EACb,KAAK,KAAO,YACb,CACH,EACAwW,GAAA,WAAqBkB,UAErB,cAAwB,KAAM,CAI5B,YAAaC,EAAU,CACrB,MAAMA,EAAS,UAAU,EACzB,KAAK,KAAO,YACZ,KAAK,SAAWA,CACjB,CACH,EACAnB,GAAA,UAAoBoB,GCnBpB,IAAAC,GAAiB/gB,GCPjB,KAAM,cAAE0c,GAAc,WAAAkE,EAAU,EAAK5gB,GAE/B,CAAE,SAAAghB,GAAUC,QAAAA,GAASC,QAAAA,GAAS,QAASC,EAAO,EAAGC,GAcjDC,GAAoB,CAACC,EAAKlY,EAAU,KAAO,CAC/C,MAAMmY,EAAU,IAAI,eACpBA,EAAQ,KAAKnY,EAAQ,QAAU,MAAOkY,EAAI,SAAU,EAAE,EAAI,EAE1D,KAAM,CAAE,QAAAxE,EAAS,QAAA0E,CAAO,EAAKpY,EAU7B,GARI0T,GAAWA,EAAU,GAAKA,EAAU,MACtCyE,EAAQ,QAAUzE,GAGhB1T,EAAQ,kBAAoB,MAC9BmY,EAAQ,iBAAiBnY,EAAQ,gBAAgB,EAG/CoY,EACF,SAAW,CAACzgB,EAAM2E,CAAK,IAAK,IAAIwb,GAAQM,CAAO,EAC7CD,EAAQ,iBAAiBxgB,EAAM2E,CAAK,EAIxC,OAAI0D,EAAQ,SACVA,EAAQ,OAAO,QAAU,IAAMmY,EAAQ,MAAO,GAG5CnY,EAAQ,mBACVmY,EAAQ,OAAO,WAAanY,EAAQ,kBAQtCmY,EAAQ,aAAe,cAEhB,IAAI,QAAQ,CAAC5C,EAASrB,IAAW,CAItC,MAAMmE,EAAeC,GAAU,CAC7B,OAAQA,EAAM,KAAI,CAChB,IAAK,QAAS,CACZ/C,EAAQqC,GAAS,OAAO,EACxB,KACD,CACD,IAAK,OAAQ,CACXrC,EACE,IAAIgD,GAAgBJ,EAAQ,YAAaA,EAAQ,SAAU,CACzD,OAAQA,EAAQ,OAChB,WAAYA,EAAQ,WACpB,QAASK,GAAaL,EAAQ,uBAAuB,CACnE,CAAa,CACF,EACD,KACD,CACD,IAAK,UAAW,CACdjE,EAAO,IAAIZ,EAAc,EACzB,KACD,CACD,IAAK,QAAS,CACZY,EAAO,IAAIsD,EAAY,EACvB,KACD,CAIF,CACF,EACDW,EAAQ,QAAUE,EAClBF,EAAQ,OAASE,EACjBF,EAAQ,UAAYE,EACpBF,EAAQ,QAAUE,EAIlBF,EAAQ,KAAKnY,EAAQ,IAAI,CAC7B,CAAG,CACH,EAEMyY,GAAqBV,GAMrBW,GAAY,CAACR,EAAKlY,EAAU,CAAE,IACjCA,EAAQ,kBAAoB,KACzBiY,GAAkBC,EAAKlY,CAAO,EAC9ByY,GAAmBP,EAAKlY,CAAO,EAQ/BwY,GAAgBpd,GAAU,CAC9B,MAAMgd,EAAU,IAAIN,GACpB,UAAWa,KAAQvd,EAAM,KAAI,EAAG,MAAM,SAAS,EAAG,CAChD,MAAMkF,EAAQqY,EAAK,QAAQ,IAAI,EAC3BrY,EAAQ,GACV8X,EAAQ,IAAIO,EAAK,MAAM,EAAGrY,CAAK,EAAGqY,EAAK,MAAMrY,EAAQ,CAAC,CAAC,CAE1D,CAED,OAAO8X,CACT,EAEA,MAAMG,WAAwBX,EAAS,CAMrC,YAAaM,EAAKU,EAAM5Y,EAAS,CAC/B,MAAM4Y,EAAM5Y,CAAO,EACnB,OAAO,eAAe,KAAM,MAAO,CAAE,MAAOkY,EAAK,CAClD,CACH,CAEA,IAAAP,GAAiB,CACf,MAAOe,GACT,QAAEb,GACF,QAAEC,EACF,EC3IA,KAAM,CAAE,MAAAC,GAAO,QAAAF,GAAS,QAAAC,EAAO,EAAKlhB,GAC9B,CAAE,aAAA0c,GAAc,UAAAoE,EAAS,EAAKM,GAC9Ba,GAAQC,GAAyB,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAC/D,KAAE3F,GAAG,gBAAE4F,EAAe,EAAKC,GAC3BlF,GAAYmF,GACZC,GAA0BC,GAC1B,CAAE,UAAAC,GAAW,YAAAC,EAAW,EAAKC,GAC7BC,GAAMC,GAeN9F,GAAU,CAACkC,EAASnW,EAAIga,IAAoB,CAChD,GAAIha,IAAO,OACT,OAAOmW,EAGT,MAAMzB,EAAQ,KAAK,IAAK,EAElBuF,EAAW,IACF,KAAK,IAAG,EAAKvF,GAEX1U,EAGjB,OAAO,IAAI,QAAQ,CAAC8V,EAASrB,IAAW,CACtC,MAAMyF,EAAY,WAAW,IAAM,CAC7BD,EAAQ,IACVxF,EAAO,IAAIZ,EAAc,EACzBmG,EAAgB,MAAO,EAE1B,EAAEha,CAAE,EAKCma,EAAS5U,GAID1D,GAAQ,CAGlB,GAFA,aAAaqY,CAAS,EAElBD,EAAQ,EAAI,CACdxF,EAAO,IAAIZ,EAAc,EACzB,MACD,CAEDtO,EAAK1D,CAAG,CACT,EAIHsU,EACG,KAAKgE,EAAMrE,CAAO,EAAGqE,EAAM1F,CAAM,CAAC,CACzC,CAAG,CACH,EAEM2F,GAAW,CACf,gBAAiB,GACjB,YAAa,aACf,EAEA,IAAAC,GAAA,KAAW,CAKT,YAAa9Z,EAAU,GAAI,CAEzB,KAAK,KAAO6Y,GAAMgB,GAAU7Z,CAAO,CACpC,CASD,MAAM,MAAO+Z,EAAU/Z,EAAU,CAAA,EAAI,CAEnC,MAAMga,EAAOnB,GAAM,KAAK,KAAM7Y,CAAO,EAE/BoY,EAAU,IAAIN,GAAQkC,EAAK,OAAO,EAIxC,GAAI,OAAOD,GAAa,UAAY,EAAEA,aAAoB5G,IAAO4G,aAAoBlC,IACnF,MAAM,IAAI,UAAU,8CAA8C,EAGpE,MAAMK,EAAM,IAAI/E,GAAI4G,EAAS,SAAU,EAAEC,EAAK,IAAI,EAE5C,CACJ,aAAAC,EACA,sBAAAC,EACA,KAAA5S,CACN,EAAQ0S,EAEAC,IACE,OAAOC,GAA0B,WAEnChC,EAAI,OAASgC,EAAsB,IAAInB,GAAgBiB,EAAK,YAAY,CAAC,EAGzE9B,EAAI,OAAS,IAAIa,GAAgBiB,EAAK,YAAY,GAIlD1S,IACF0S,EAAK,KAAO,KAAK,UAAUA,EAAK,IAAI,EACpC5B,EAAQ,IAAI,eAAgB,kBAAkB,GAGhD,MAAMqB,EAAkB,IAAI,gBAEtBU,EAASrG,GAAU,CAAC2F,EAAgB,OAAQO,EAAK,MAAM,CAAC,EAE1D,WAAW,gBAAkB,MAAQA,EAAK,gBAAgB,WAAW,iBAAmBZ,IAAaC,MAEvGW,EAAK,KAAO,IAAI,KAAK,MAAMT,GAAIL,GAAwBc,EAAK,IAAI,CAAC,CAAC,GAKpE,MAAMvC,EAAW,MAAM/D,GACrBqE,GACEG,EAAI,SAAU,EACd,CACE,GAAG8B,EACH,OAAAG,EAEA,QAAS,OACT,QAAA/B,EAIA,OAAQ,MACT,CACF,EACD4B,EAAK,QACLP,CACD,EAED,GAAI,CAAChC,EAAS,IAAMuC,EAAK,gBACvB,MAAIA,EAAK,aACP,MAAMA,EAAK,YAAYvC,CAAQ,EAE3B,IAAIC,GAAUD,CAAQ,EAG9B,OAAAA,EAAS,SAAW,iBAAoB,CACtC,MAAQ2C,GAAW3C,EAAS,IAAI,CACjC,EAEDA,EAAS,OAAS,iBAAoB,CACpC,gBAAiB4C,KAASC,GAAO7C,EAAS,SAAU,CAAA,EAC9CzX,EAAQ,UACV,MAAMA,EAAQ,UAAUqa,CAAK,EAE7B,MAAMA,CAGX,EAEM5C,CACR,CAMD,KAAMsC,EAAU/Z,EAAU,GAAI,CAC5B,OAAO,KAAK,MAAM+Z,EAAU,CAAE,GAAG/Z,EAAS,OAAQ,OAAQ,CAC3D,CAMD,IAAK+Z,EAAU/Z,EAAU,GAAI,CAC3B,OAAO,KAAK,MAAM+Z,EAAU,CAAE,GAAG/Z,EAAS,OAAQ,MAAO,CAC1D,CAMD,IAAK+Z,EAAU/Z,EAAU,GAAI,CAC3B,OAAO,KAAK,MAAM+Z,EAAU,CAAE,GAAG/Z,EAAS,OAAQ,MAAO,CAC1D,CAMD,OAAQ+Z,EAAU/Z,EAAU,GAAI,CAC9B,OAAO,KAAK,MAAM+Z,EAAU,CAAE,GAAG/Z,EAAS,OAAQ,SAAU,CAC7D,CAMD,QAAS+Z,EAAU/Z,EAAU,GAAI,CAC/B,OAAO,KAAK,MAAM+Z,EAAU,CAAE,GAAG/Z,EAAS,OAAQ,UAAW,CAC9D,CACH,EAQA,MAAMsa,GAAS,gBAAkBhiB,EAAQ,CACvC,MAAM0C,EAAU,IAAI,YACpB,IAAIqG,EAAM,GAEV,gBAAiBgZ,KAAS/hB,EAAQ,CAChC+I,GAAOrG,EAAQ,OAAOqf,EAAO,CAAE,OAAQ,GAAM,EAC7C,MAAME,EAAQlZ,EAAI,MAAM,OAAO,EAE/B,QAASvJ,EAAI,EAAGA,EAAIyiB,EAAM,OAAS,EAAGziB,IAAK,CACzC,MAAMuG,EAAIkc,EAAMziB,CAAC,EAAE,KAAM,EACrBuG,EAAE,OAAS,IACb,MAAM,KAAK,MAAMA,CAAC,EAErB,CACDgD,EAAMkZ,EAAMA,EAAM,OAAS,CAAC,CAC7B,CACDlZ,GAAOrG,EAAQ,OAAQ,EACvBqG,EAAMA,EAAI,KAAM,EACZA,EAAI,SAAW,IACjB,MAAM,KAAK,MAAMA,CAAG,EAExB,EASM+Y,GAAc9hB,GAAW,CAC7B,GAAIkiB,GAAgBliB,CAAM,EACxB,OAAOA,EAIT,GAAImiB,GAAqBniB,CAAM,EAAG,CAChC,MAAMoiB,EAAOpiB,EAAO,OAAO,aAAa,EAAG,EAC3C,MAAO,CACL,CAAC,OAAO,aAAa,GAAK,CACxB,MAAO,CACL,KAAMoiB,EAAK,KAAK,KAAKA,CAAI,EACzB,OAAQpe,EAAO,CAEb,OADAhE,EAAO,QAAS,EACZ,OAAOoiB,EAAK,QAAW,WAClBA,EAAK,OAAQ,EAEf,QAAQ,QAAQ,CAAE,KAAM,GAAM,MAAApe,CAAK,CAAE,CAC7C,CACF,CACF,CACF,CACF,CAED,GAAIqe,GAAoBriB,CAAM,EAAG,CAC/B,MAAMsiB,EAAStiB,EAAO,UAAW,EACjC,OAAQ,iBAAoB,CAC1B,GAAI,CACF,OAAa,CAEX,KAAM,CAAE,KAAAgc,EAAM,MAAAhY,CAAO,EAAG,MAAMse,EAAO,KAAM,EAE3C,GAAItG,EAAM,OAENhY,IACF,MAAMA,EAET,CACT,QAAgB,CACRse,EAAO,YAAa,CACrB,CACP,EAAQ,CACL,CAED,MAAM,IAAI,UAAU,0CAA2C,CACjE,EAUMJ,GAAmBle,GAChB,OAAOA,GAAU,UACxBA,IAAU,MACV,OAA0BA,EAAO,OAAO,aAAa,GAAM,WAWvDqe,GAAuBre,GACpBA,GAAS,OAA0BA,EAAO,WAAc,WAO3Dme,GAAwBne,GAC5B,OAAO,UAAU,eAAe,KAAKA,EAAO,UAAU,GACtD,OAAO,UAAU,eAAe,KAAKA,EAAO,UAAU,EAExDyU,GAAK,UAAY2G,GACjB3G,GAAK,aAAeuC,GACpBvC,GAAK,sBAAwBqJ,GAM7BrJ,GAAK,KAAO,CAACgJ,EAAU/Z,IAAY,IAAI+Q,GAAK/Q,CAAO,EAAE,KAAK+Z,EAAU/Z,CAAO,EAM3E+Q,GAAK,IAAM,CAACgJ,EAAU/Z,IAAY,IAAI+Q,GAAK/Q,CAAO,EAAE,IAAI+Z,EAAU/Z,CAAO,EAMzE+Q,GAAK,IAAM,CAACgJ,EAAU/Z,IAAY,IAAI+Q,GAAK/Q,CAAO,EAAE,IAAI+Z,EAAU/Z,CAAO,EAMzE+Q,GAAK,OAAS,CAACgJ,EAAU/Z,IAAY,IAAI+Q,GAAK/Q,CAAO,EAAE,OAAO+Z,EAAU/Z,CAAO,EAM/E+Q,GAAK,QAAU,CAACgJ,EAAU/Z,IAAY,IAAI+Q,GAAK/Q,CAAO,EAAE,QAAQ+Z,EAAU/Z,CAAO,EAEjF,IAAA6a,GAAiB9J,mBC/WXpN,GAAQ,IAAImX,GAAK,GAAI,EAIrBvD,GAAM,GAAK,IAGXwD,GAAQC,GAAO,QAAUA,GAAO,QAAUA,GAI1CC,GAAY,IAAIF,GAAM,CAAE,YAAa,CAAC,CAAE,EAKxC3H,GAAYqE,GAAa,CAC7B,GAAIA,EAAS,KAAM,OAAOA,EAAS,KACnC,MAAM,IAAI,MAAMA,EAAS,OAAO,CAClC,EAMO,eAAeyD,GAAgBC,EAAMnB,EAAM,CAgChD,OA1BgB,MAAOmB,EAAMnB,EAAO,CAAA,IAAO,CAEzC,MAAMC,EAAe,IAAI,gBAAgBD,CAAI,EAC7CC,EAAa,IAAI,MAAOkB,CAAI,EAG5B,MAAMC,EAAQnB,EAAa,SAAU,EACrC,GAAI,CAACD,EAAK,SAAWrW,GAAM,IAAIyX,CAAK,EAAG,CACrC,MAAM3D,EAAW9T,GAAM,IAAIyX,CAAK,EAChC,OAAOhI,GAASqE,CAAQ,CACzB,CAGD,MAAMA,EAAW,MAAMwD,GAAU,IAAI,SAAY,CAG/C,MAAM3Z,EAAM,MAAMyP,GAAK,IAAI,6BAA8B,CAAE,aAAAkJ,EAAc,EACnEmB,EAAQ,IAAI,IAAI9Z,EAAI,GAAG,EAAE,OAAO,MAAM,CAAC,EACvCgG,EAAO,MAAMhG,EAAI,KAAM,EAC7B,OAAAqC,GAAM,IAAIyX,EAAO9T,EAAMiQ,EAAG,EAEnBjQ,CACb,CAAK,EACD,OAAO8L,GAASqE,CAAQ,CACzB,GAEc0D,EAAMnB,CAAI,CAC3B,CCzDA,SAASqB,GAAYC,EAAQ,CAG3B,OAAIA,EAAO,SAAS,MAAM,IACxBA,EAASA,EAAO,QAAQ,QAAS,WAAW,GAEvCA,CACT,CAEO,SAASC,IAAa,CAc3B,OAAOhI,EAVY,MAAO+H,EAAQtb,EAAU,CAAE,UAAW,MAAW,CAClE,GAAI,OAAOsb,GAAW,SACpB,MAAM,IAAI,MAAM,4CAA4C,EAG9D,OAAAA,EAASD,GAAWC,CAAM,EAEnBJ,GAAeI,EAAQtb,CAAO,CACtC,CAEkC,CACrC,CC3BO,SAASwb,GAAgB,CAAE,QAAA9E,GAAW,CAI3C,MAAO,IAAM,CACX,MAAM+E,EAAM/E,EAAQ,IAAK,EACzB,OAAO+E,GAAO,MAAQ,EAAQA,EAAI,OAAO,WAC1C,CACH,CCAO,SAASC,GAAe,CAAE,KAAAvG,EAAM,OAAA/N,EAAQ,MAAAL,EAAO,KAAApP,CAAI,EAAI,CAI5D,eAAe4d,EAASpM,EAAM6Q,EAAO,GAAI,CACvC,GAAI,CAAChF,GAAY7L,CAAI,EACnB,MAAM,IAAI,MAAM,oBAAsBA,CAAI,EAG5C,GAAIwS,GAAgBxS,CAAI,EACtB,gBAAiByS,KAAgBjkB,EAAK,QAAQwR,EAAM6Q,CAAI,EACtD7Q,EAAOyS,EAIX,KAAM,CAAA,CAAGC,EAAQ/Q,EAAM,GAAGgR,CAAI,EAAI3S,EAAK,MAAM,GAAG,EAC1C1R,EAAOuiB,EAAK,QAAU,MAAMjT,EAAM,QAAQiT,EAAK,OAAO,EAAI,OAC1Dpf,EAAQmhB,GAAWjR,CAAI,EAG7B,GAAIgR,EAAK,SAAW,EAAG,CACrB,MAAM9iB,EAAMvB,EAAOA,EAAK,QAAQ,OAAOmD,CAAK,EAAIkQ,EAEhD,MAAO,IAAI+Q,CAAM,IAAI7iB,CAAG,EACzB,CAED,MAAM4K,EAAME,EAAI,OAAOlJ,CAAK,EAE5BuO,EAAO2S,EAAK,KAAK,GAAG,EAEpB,MAAME,EAAU1a,GAAIsC,EAAKuF,EAAM/B,EAAQ+N,EAAM6E,CAAI,EACjD,IAAI1d,EAAQsH,EACR0R,EAAgBnM,EAEpB,gBAAiBzD,KAAUsW,EACrBlY,EAAI,MAAM4B,EAAO,KAAK,IACxBpJ,EAAQoJ,EAAO,MACf4P,EAAgB5P,EAAO,eAI3B,MAAO,SAASpJ,EAAM,SAAS7E,GAAQA,EAAK,OAAO,CAAC,GAAG6d,EAAgB,IAAMA,EAAgB,EAAE,EAChG,CAED,OAAO/B,EAAkBgC,CAAO,CAClC,CAOA,SAASwG,GAAY/iB,EAAK,CACxB,GAAI,CACF,OAAOijB,GAAiBjjB,CAAG,EAAE,QAAS,CAC1C,MAAU,CACN,OAAO8K,EAAI,MAAM9K,CAAG,EAAE,KACvB,CACH,CChEO,SAASkjB,GAAW,CAAE,OAAAC,GAAU,CAIrC,MAAO,CAAChT,EAAMnJ,EAAU,KAAO,CAC7B,IAAI0a,EAEJ,MAAM9W,EAAME,EAAI,MAAMqF,CAAI,EAE1B,OAAIvF,EACF8W,EAAOyB,EAAO,CAAC,CACb,IAAAvY,EACA,GAAG5D,CACJ,CAAA,EAAGA,CAAO,EAEX0a,EAAOyB,EAAO,CAAC,CACb,KAAMhT,EAAK,SAAU,EACrB,GAAGnJ,CACJ,CAAA,EAAGA,CAAO,EAINoc,GAAK1B,CAAI,CACjB,CACH,CCRA,SAAS2B,GAAYC,EAAO,CAC1B,OAAO,OAAO,YAAYA,CAC5B,CAMA,SAAS9B,GAAiB8B,EAAO,CAC/B,OAAO,OAAO,iBAAiBA,CACjC,CAMA,SAAS9J,GAAO8J,EAAO,CACrB,OAAOxY,EAAI,MAAMwY,CAAK,GAAK,IAC7B,CA6BO,eAAiBC,GAAgBnhB,EAAO,CAE7C,GAAIA,GAAU,KACZ,MAAMkU,EAAQ,IAAI,MAAM,qBAAqBlU,CAAK,EAAE,EAAG,sBAAsB,EAI/E,MAAMwI,EAAME,EAAI,MAAM1I,CAAK,EAE3B,GAAIwI,EAAK,CACP,MAAM4Y,GAAM,CAAE,IAAA5Y,EAAK,EACnB,MACD,CAED,GAAIxI,aAAiB,QAAU,OAAOA,GAAU,SAAU,CACxD,MAAMohB,GAAM,CAAE,KAAMphB,EAAO,EAC3B,MACD,CAID,GAAIA,EAAM,KAAO,MAAQA,EAAM,MAAQ,KAErC,OAAO,MAAMohB,GAAMphB,CAAK,EAI1B,GAAIihB,GAAWjhB,CAAK,EAAG,CACrB,MAAMqhB,EAAWrhB,EAAM,OAAO,QAAQ,EAAG,EACnCshB,EAAQD,EAAS,KAAM,EAE7B,GAAIC,EAAM,KACR,OAAOD,EAIT,GAAIjK,GAAMkK,EAAM,KAAK,EAAG,CACtB,MAAMF,GAAM,CAAE,IAAKE,EAAM,KAAK,CAAE,EAChC,UAAW9Y,KAAO6Y,EAChB,MAAMD,GAAM,CAAE,IAAA5Y,EAAK,EAErB,MACD,CAGD,GAAI8Y,EAAM,iBAAiB,QAAU,OAAOA,EAAM,OAAU,SAAU,CACpE,MAAMF,GAAM,CAAE,KAAME,EAAM,KAAK,CAAE,EACjC,UAAWvT,KAAQsT,EACjB,MAAMD,GAAM,CAAE,KAAArT,EAAM,EAEtB,MACD,CAGD,GAAIuT,EAAM,MAAM,KAAO,MAAQA,EAAM,MAAM,MAAQ,KAAM,CACvD,MAAMF,GAAME,EAAM,KAAK,EACvB,UAAWC,KAAOF,EAChB,MAAMD,GAAMG,CAAG,EAEjB,MACD,CAED,MAAMrN,EAAQ,IAAI,MAAM,qBAAuB,OAAOlU,CAAK,EAAG,sBAAsB,CACrF,CAGD,GAAIof,GAAgBpf,CAAK,EAAG,CAC1B,MAAMqhB,EAAWrhB,EAAM,OAAO,aAAa,EAAG,EACxCshB,EAAQ,MAAMD,EAAS,KAAM,EACnC,GAAIC,EAAM,KAAM,OAAOD,EAGvB,GAAIjK,GAAMkK,EAAM,KAAK,EAAG,CACtB,MAAMF,GAAM,CAAE,IAAKE,EAAM,KAAK,CAAE,EAChC,gBAAiB9Y,KAAO6Y,EACtB,MAAMD,GAAM,CAAE,IAAA5Y,EAAK,EAErB,MACD,CAGD,GAAI8Y,EAAM,iBAAiB,QAAU,OAAOA,EAAM,OAAU,SAAU,CACpE,MAAMF,GAAM,CAAE,KAAME,EAAM,KAAK,CAAE,EACjC,gBAAiBvT,KAAQsT,EACvB,MAAMD,GAAM,CAAE,KAAArT,EAAM,EAEtB,MACD,CAGD,GAAIuT,EAAM,MAAM,KAAO,MAAQA,EAAM,MAAM,MAAQ,KAAM,CACvD,MAAMF,GAAME,EAAM,KAAK,EACvB,gBAAiBC,KAAOF,EACtB,MAAMD,GAAMG,CAAG,EAEjB,MACD,CAED,MAAMrN,EAAQ,IAAI,MAAM,qBAAuB,OAAOlU,CAAK,EAAG,sBAAsB,CACrF,CAED,MAAMkU,EAAQ,IAAI,MAAM,qBAAuB,OAAOlU,CAAK,EAAG,sBAAsB,CACtF,CAKA,SAASohB,GAAOphB,EAAO,CACrB,MAAM+N,EAAO/N,EAAM,KAAO,GAAGA,EAAM,IAAI,GAEvC,GAAI,CAAC+N,EACH,MAAMmG,EAAQ,IAAI,MAAM,4DAA4D,EAAG,sBAAsB,EAI/G,MAAMsN,EAAM,CACV,KAAAzT,EACA,UAAW/N,EAAM,YAAc,EAChC,EAED,OAAIA,EAAM,UAAY,OACpBwhB,EAAI,SAAWxhB,EAAM,UAGhBwhB,CACT,CClMO,MAAMC,EAAW,CAEtB,OAAQ,SAER,UAAW,YAEX,SAAU,WAEV,IAAK,KACP,ECcO,SAASC,GAAc,CAAE,KAAA3H,EAAM,OAAA/N,GAAU,CAI9C,eAAiB+U,EAAQ7jB,EAAQ0H,EAAU,GAAI,CAI7C,MAAM+c,EAAS,iBAAoB,CACjC,eAAiB,CAAE,KAAA5T,EAAM,UAAA6T,EAAW,SAAAC,CAAQ,IAAMV,GAAejkB,CAAM,EAAG,CACxE,KAAM,CAAE,IAAAsL,CAAG,EAAK,MAAMsR,GAAYC,EAAM/N,EAAQ+B,CAAI,EAG9C,CAAE,OAAA+T,CAAM,EAAK,MAAM/H,EAAK,KAAK,iBAAiBvR,EAAK,CAACiZ,EAAS,UAAWA,EAAS,MAAM,CAAC,EAE9F,GAAIK,IAAW,aAAe,CAACF,EAE7B,MAAM,IAAI,MAAM,GAAGpZ,CAAG,6BAA6B,EAGjDoZ,EACF,MAAM7H,EAAK,KAAK,eAAevR,EAAK,CAAE,SAAAqZ,CAAQ,CAAE,EAEhD,MAAM9H,EAAK,KAAK,YAAYvR,EAAK,CAAE,SAAAqZ,CAAQ,CAAE,EAG/C,MAAMrZ,CACP,CACF,EAMD,GAAI,CAFS,EAAQ5D,EAAQ,KAElB,CACT,MAAQ+c,EAAQ,EAChB,MACD,CAED,MAAMI,EAAU,MAAMhI,EAAK,OAAO,SAAU,EAE5C,GAAI,CACF,MAAQ4H,EAAQ,CACtB,QAAc,CACRI,EAAS,CACV,CACF,CAED,OAAO5J,EAAkB4I,CAAM,CACjC,CCxDA,SAASK,GAAOvc,EAAM2D,EAAKqZ,EAAU,CAEnC,MAAMvH,EAAS,CACb,KAAAzV,EACA,IAAA2D,CACD,EAED,OAAIqZ,IACFvH,EAAO,SAAWuH,GAGbvH,CACT,CAOO,SAAS0H,GAAU,CAAE,KAAAjI,EAAM,OAAA/N,GAAU,CAI1C,eAAiBiW,EAAIrd,EAAU,GAAI,CAEjC,IAAIC,EAAO4c,EAAS,IAEpB,GAAI7c,EAAQ,OACVC,EAAOD,EAAQ,KAEX,CAAC,OAAO,KAAK6c,CAAQ,EAAE,SAAS5c,CAAI,GACtC,MAAMqP,EAAQ,IAAI,MAAM,kBAAkB,EAAG,sBAAsB,EAIvE,GAAItP,EAAQ,MAAO,CAEjB,IAAIsd,EAAU,GAEd,eAAiB,CAAE,KAAAnU,CAAM,IAAIoT,GAAevc,EAAQ,KAAK,EAAG,CAC1D,KAAM,CAAE,IAAA4D,CAAG,EAAK,MAAMsR,GAAYC,EAAM/N,EAAQ+B,CAAI,EAC9C,CAAE,OAAA+T,EAAQ,OAAAK,EAAQ,OAAAC,EAAQ,SAAAP,CAAQ,EAAK,MAAM9H,EAAK,KAAK,iBAAiBvR,EAAK3D,CAAI,EAEvF,GAAI,CAACsd,EACH,MAAMjO,EAAQ,IAAI,MAAM,SAASnG,CAAI,iBAAiB,EAAG,gBAAgB,EAG3E,OAAQ+T,EAAM,CACZ,KAAKL,EAAS,OACd,KAAKA,EAAS,UACZS,EAAU,GACV,MAAMd,GAAMU,EAAQtZ,EAAKqZ,CAAQ,EACjC,MACF,QACEK,EAAU,GACV,MAAMd,GAAM,GAAGK,EAAS,QAAQ,YAAYW,CAAM,GAAI5Z,EAAKqZ,CAAQ,CACtE,CACF,CAED,GAAI,CAACK,EACH,MAAM,IAAI,MAAM,gBAAgB,EAGlC,MACD,CAED,GAAIrd,IAAS4c,EAAS,WAAa5c,IAAS4c,EAAS,IACnD,eAAiB,CAAE,IAAAjZ,EAAK,SAAAqZ,CAAQ,IAAM9H,EAAK,KAAK,gBAC9C,MAAMqH,GAAMK,EAAS,UAAWjZ,EAAKqZ,CAAQ,EAIjD,GAAIhd,IAAS4c,EAAS,UAAY5c,IAAS4c,EAAS,IAClD,gBAAiBjZ,KAAOuR,EAAK,KAAK,aAAanV,CAAO,EACpD,MAAMwc,GAAMK,EAAS,SAAUjZ,CAAG,EAItC,GAAI3D,IAAS4c,EAAS,QAAU5c,IAAS4c,EAAS,IAChD,eAAiB,CAAE,IAAAjZ,EAAK,SAAAqZ,CAAQ,IAAM9H,EAAK,KAAK,aAC9C,MAAMqH,GAAMK,EAAS,OAAQjZ,EAAKqZ,CAAQ,CAG/C,CAED,OAAO1J,EAAkB8J,CAAE,CAC7B,CCjGO,SAASI,GAAU,CAAE,MAAAC,GAAS,CAInC,eAAeC,EAAIxU,EAAMnJ,EAAU,GAAI,CAErC,MAAM4D,EAAM,MAAMwY,GAAKsB,EAAM,CAAC,CAAE,KAAAvU,EAAM,GAAGnJ,CAAO,CAAE,EAAGA,CAAO,CAAC,EAE7D,GAAI,CAAC4D,EACH,MAAM,IAAI,MAAM,cAAc,EAGhC,OAAOA,CACR,CAED,OAAO+Z,CACT,CCZO,SAASC,GAAa,CAAE,KAAAzI,EAAM,OAAA/N,GAAU,CAI7C,eAAiBsW,EAAOplB,EAAQud,EAAW,GAAI,CAC7C,MAAMsH,EAAU,MAAMhI,EAAK,OAAO,SAAU,EAE5C,GAAI,CAEF,eAAiB,CAAE,KAAAhM,EAAM,UAAA6T,CAAW,IAAIT,GAAejkB,CAAM,EAAG,CAC9D,KAAM,CAAE,IAAAsL,CAAG,EAAK,MAAMsR,GAAYC,EAAM/N,EAAQ+B,CAAI,EAC9C,CAAE,OAAAoU,EAAQ,OAAAL,CAAM,EAAK,MAAM/H,EAAK,KAAK,iBAAiBvR,EAAKiZ,EAAS,GAAG,EAE7E,GAAI,CAACU,EACH,MAAM,IAAI,MAAM,GAAG3Z,CAAG,gBAAgB,EAGxC,OAAQsZ,EAAM,CACZ,KAAML,EAAS,UACb,GAAI,CAACG,EACH,MAAM,IAAI,MAAM,GAAGpZ,CAAG,wBAAwB,EAGhD,MAAMuR,EAAK,KAAK,MAAMvR,CAAG,EAEzB,MAAMA,EAEN,MACF,KAAMiZ,EAAS,OACb,MAAM1H,EAAK,KAAK,MAAMvR,CAAG,EAEzB,MAAMA,EAEN,MACF,QACE,MAAM,IAAI,MAAM,GAAGA,CAAG,+BAA+BsZ,CAAM,EAAE,CAChE,CACF,CACP,QAAc,CACRC,EAAS,CACV,CACF,CAED,OAAO5J,EAAkBmK,CAAK,CAChC,CChDO,MAAMG,EAAO,CAMlB,YAAa,CAAE,OAAAzW,EAAQ,KAAA+N,GAAQ,CAC7B,MAAMgH,EAASW,GAAa,CAAE,OAAA1V,EAAQ,KAAA+N,CAAI,CAAE,EAC5C,KAAK,OAASgH,EACd,KAAK,IAAMD,GAAU,CAAE,OAAAC,CAAM,CAAE,EAC/B,MAAMuB,EAAQE,GAAY,CAAE,OAAAxW,EAAQ,KAAA+N,CAAI,CAAE,EAC1C,KAAK,MAAQuI,EACb,KAAK,GAAKD,GAAS,CAAE,MAAAC,CAAK,CAAE,EAC5B,KAAK,GAAKN,GAAS,CAAE,OAAAhW,EAAQ,KAAA+N,CAAI,CAAE,EAGnC,KAAK,OAAS,CACZ,IAAK,CAACvR,EAAK5D,EAAU,CAAE,IAAK,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EACvE,GAAI,gBAAkBob,EAAOpb,EAAU,GAAI,CAAE,OAAO,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,CAAG,EAClG,GAAI,CAACob,EAAOpb,EAAU,CAAE,IAAK,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EACxE,MAAO,CAACob,EAAOpb,EAAU,CAAE,IAAK,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EAC3E,QAAS,CACP,IAAK,CAACrI,EAAMmmB,IAAgB,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EACvE,GAAI,CAACnmB,EAAMqI,EAAU,CAAE,IAAK,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EAGvE,GAAI,CAACA,EAAU,KAAO,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,CAClE,CACF,CACF,CACH,CC5BA,MAAM+d,GAAMC,EAAO,qBAAqB,EAUlCC,GAAgBC,GAAa,EAAG,KAChCC,GAAwB,GAAK,GAAK,IAGjC,MAAMC,EAAc,CAKzB,YAAaC,EAASC,EAAW,CAC/B,KAAK,SAAWD,EAChB,KAAK,WAAaC,CACnB,CAUD,MAAM,eAAgB1H,EAAQta,EAAOiiB,EAAUve,EAAS,CACtD,MAAMwe,EAAS,MAAM,KAAK,sBAAsB5H,EAAQta,EAAOiiB,EAAUve,CAAO,EAEhF,OAAO,KAAK,oBAAoBwe,EAAQ5H,EAAQ5W,CAAO,CACxD,CASD,QAAS4W,EAAQta,EAAO0D,EAAS,CAC/B,OAAO,KAAK,eAAe4W,EAAQta,EAAO6hB,GAAuBne,CAAO,CACzE,CAOD,MAAM,oBAAqBwe,EAAQ5H,EAAQ5W,EAAS,CAClD,GAAI,CAAEye,GAAS7H,CAAM,EAAI,CACvB,MAAM8H,EAAS,+BACfX,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,qBAAqB,CACvD,CAED,GAAI9H,EAAO,WAAa,KACtB,MAAMjX,EAAQ,IAAI,MAAM,wBAAwB,EAAG,wBAAwB,EAG7E,MAAMgf,EAAaC,GAAwBhI,CAAM,EAEjD,aAAM,KAAK,cAAc+H,EAAYH,EAAQxe,CAAO,EAE7Cwe,CACR,CAOD,MAAM,cAAexI,EAAK6I,EAAO7e,EAAS,CAExC,GAAI,CACF,MAAMsB,EAAM,MAAM,KAAK,SAAS,IAAI0U,EAAK6I,EAAO7e,CAAO,EACvD+d,OAAAA,GAAI,mBAAmBvV,EAAmBwN,EAAK,QAAQ,CAAC,4BAA4B,EAE7E1U,CACR,OAA0BkL,EAAK,CAC9B,MAAMkS,EAAS,mBAAmBlW,EAAmBwN,EAAK,QAAQ,CAAC,yCAAyCxJ,EAAI,KAAK,GACrHuR,MAAAA,GAAI,MAAMW,CAAM,EAChBX,GAAI,MAAMvR,CAAG,EAEP7M,EAAQ,IAAI,MAAM+e,CAAM,EAAG,wBAAwB,CAC1D,CACF,CAWD,MAAM,cAAe9H,EAAQ5W,EAAU,CAAA,EAAI,CACzC,GAAI,CAAEye,GAAS7H,CAAM,EAAI,CACvB,MAAM8H,EAAS,+BAEfX,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,qBAAqB,CACvD,CAED,MAAMI,EAAe9e,EAAQ,eAAiB,GAE9C,GAAI,CACF,MAAM+e,EAAQ,MAAM,KAAK,WAAW,IAAIC,GAAiBpI,EAAO,QAAO,CAAE,CAAC,EAG1E,OAAO,KAAK,eAAemI,CAAK,CACjC,OAA2BvS,EAAK,CAC/B,GAAIA,EAAI,OAASyR,GAAe,CAC9B,MAAMS,EAAS,4CAA4C9H,EAAO,SAAQ,CAAE,kBAC5EmH,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,mCAAmC,CACrE,CAED,GAAI,CAACI,EACH,MAAMnf,EAAQ6M,EAAK,6CAA6C,EAIlE,GAAI,CACF,MAAMmS,EAAaC,GAAwBhI,CAAM,EAC3CtV,EAAM,MAAM,KAAK,SAAS,IAAIqd,CAAU,EAG9C,OAAO,KAAK,eAAerd,CAAG,CAC/B,OAA2BkL,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EAEPA,CACP,CACF,CACF,CAKD,eAAgBjQ,EAAM,CACpB,GAAI,CACF,OAAO0iB,GAAe1iB,CAAI,CAC3B,OAA2BiQ,EAAK,CAC/B,MAAM7M,EAAQ6M,EAAK,yBAAyB,CAC7C,CACF,CAQD,MAAM,sBAAuBoK,EAAQta,EAAOiiB,EAAUve,EAAS,CAC7D,GAAI,CAAEye,GAAS7H,CAAM,EAAI,CACvB,MAAM8H,EAAS,+BACfX,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,qBAAqB,CACvD,CAED,MAAMQ,EAAsB,CAC1B,aAAc,EACf,EAGD,IAAIV,EAEJ,GAAI,CACFA,EAAS,MAAM,KAAK,cAAc5H,EAAQsI,CAAmB,CAC9D,OAA2B1S,EAAK,CAC/B,GAAIA,EAAI,OAASyR,GAAe,CAC9B,MAAMS,EAAS,wEAAwE9H,EAAO,SAAQ,CAAE,IAAIpK,EAAI,KAAK,GACrHuR,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,kCAAkC,CACpE,CACF,CAGD,IAAIS,EAAY,GAEZX,GAAUA,EAAO,WAAa,SAEhCW,EAAYhQ,GAAiBqP,EAAO,MAAOliB,CAAK,EAAIkiB,EAAO,SAAWA,EAAO,SAAW,OAAO,CAAC,GAIlG,IAAIY,EAEJ,GAAI,CAEFA,EAAY,MAAMC,GAAYzI,EAAQta,EAAO6iB,EAAWZ,CAAQ,CACjE,OAA2B/R,EAAK,CAC/B,MAAMkS,EAAS,mBAAmBpiB,CAAK,wBAEvCyhB,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ,IAAI,MAAM+e,CAAM,EAAG,0BAA0B,CAC5D,CAID,GAAI,CAEF,MAAMniB,EAAO+iB,GAAaF,CAAS,EAGnC,aAAM,KAAK,WAAW,IAAIJ,GAAiBpI,EAAO,QAAS,CAAA,EAAGra,EAAMyD,CAAO,EAE3E+d,GAAI,mBAAmBvV,EAAmBlM,EAAO,QAAQ,CAAC,8BAA8B,EAEjFC,CACR,MAAgC,CAC/B,MAAMmiB,EAAS,mBAAmBpiB,CAAK,wCACvCyhB,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,0BAA0B,CAC5D,CACF,CACH,CAEAN,GAAc,sBAAwBD,GCvOtC,MAAMJ,GAAMC,EAAO,uBAAuB,EAQpCuB,GAAS,GAAK,IACdC,GAAO,GAAKD,GAEZE,GAA2B,EAAID,GAC/BrB,GAAwB,GAAKqB,GAE5B,MAAME,EAAgB,CAW3B,YAAaC,EAAWrB,EAAW1H,EAAQC,EAAU7W,EAAU,CAAE,KAAM,IAAM,CAC3E,KAAK,WAAa2f,EAClB,KAAK,WAAarB,EAClB,KAAK,QAAU1H,EACf,KAAK,UAAYC,EACjB,KAAK,SAAW7W,EAChB,KAAK,iBAAmB,IACzB,CAED,MAAM,OAAS,CACb,GAAI,KAAK,iBACP,MAAML,EAAQ,IAAI,MAAM,gCAAgC,EAAG,+BAA+B,EAI5F,MAAMigB,EAAkB,CAEtB,MAAO,KAEP,cAAe,KAEf,WAAY,KAIZ,gBAAkBC,GAAW,CAC3BD,EAAgB,WAAa,WAAW,SAAY,CAClDA,EAAgB,WAAa,KAE7B,GAAI,CAEFA,EAAgB,cAAgBA,EAAgB,MAAO,EACvD,MAAMA,EAAgB,cAGlBA,EAAgB,OAClBA,EAAgB,gBAAgBC,CAAM,CAEzC,OAA2BrT,EAAK,CAC/BuR,GAAI,MAAMvR,CAAG,CACd,CACF,EAAEqT,EAAM,CAAE,CACZ,EACD,OAAQ,SAAY,CAEdD,EAAgB,YAAc,MAChC,aAAaA,EAAgB,UAAU,EAEzCA,EAAgB,MAAQ,KAGxB,MAAMA,EAAgB,aACvB,CACF,EAEK,CAAE,KAAAE,GAAS,KAAK,SACtB,IAAIC,EAAW,GAEfH,EAAgB,MAAQ,SAAY,CAClC,MAAMI,EAAoB,IAAInM,GAAiB,kBAAC,GAAK,EAErD,GAAI,CACF,MAAM,KAAK,kBAAkB,KAAK,QAASiM,EAAM,CAC/C,OAAQE,EAAkB,MACpC,CAAS,CACT,QAAgB,CACRA,EAAkB,MAAO,CAC1B,CACF,EAEDJ,EAAgB,gBAAgB,IAC1BG,GACFA,EAAW,GACJ,KAAK,SAAS,0BAA4BR,IAG5C,KAAK,SAAS,mBAAqBE,EAC3C,EAED,KAAK,iBAAmBG,CACzB,CAED,MAAM,MAAQ,CACZ,MAAMA,EAAkB,KAAK,iBAE7B,GAAI,CAACA,EACH,MAAMjgB,EAAQ,IAAI,MAAM,4BAA4B,EAAG,2BAA2B,EAGpF,KAAK,iBAAmB,KAExB,MAAMigB,EAAgB,OAAQ,CAC/B,CAOD,MAAM,kBAAmBhJ,EAAQkJ,EAAM9f,EAAS,CAG9C,GAAI,CACF,MAAM,KAAK,gBAAgB4W,EAAQ5W,CAAO,CAC3C,MAAgC,CAC/B,MAAM0e,EAAS,oDAEfX,GAAI,MAAMW,CAAM,EAChB,MACD,CAGD,GAAIoB,EACF,GAAI,CACF,MAAMG,EAAO,MAAM,KAAK,UAAU,SAAU,EAE5C,UAAWjK,KAAOiK,EAAM,CACtB,GAAIjK,EAAI,OAAS,OACf,SAGF,MAAMkK,EAAM,MAAM,KAAK,UAAU,UAAUlK,EAAI,KAAM8J,CAAI,EACnDK,EAAU,MAAMC,GAAUF,EAAKJ,CAAI,EACnCO,EAAY,MAAMC,GAAeH,EAAQ,OAAO,MAAOA,EAAQ,KAAK,EAE1E,MAAM,KAAK,gBAAgBE,EAAWrgB,CAAO,CAC9C,CACF,OAA2BwM,EAAK,CAC/BuR,GAAI,MAAMvR,CAAG,CACd,CAEJ,CAMD,MAAM,gBAAiBoK,EAAQ5W,EAAS,CACtC,GAAI,CACF,MAAM1D,EAAQ,MAAM,KAAK,kBAAkBsa,CAAM,EACjD,MAAM,KAAK,WAAW,eAAeA,EAAQta,EAAO6hB,GAAuBne,CAAO,CACnF,OAA2BwM,EAAK,CAC/B,GAAIA,EAAI,OAAS,qBACf,OAGF,MAAMA,CACP,CACF,CAKD,MAAM,kBAAmBoK,EAAQ,CAC/B,GAAI,CAAE6H,GAAS7H,CAAM,EACnB,MAAMjX,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,EAGnE,GAAI,CACF,MAAMof,EAAQ,MAAM,KAAK,WAAW,IAAIC,GAAiBpI,EAAO,QAAO,CAAE,CAAC,EAE1E,GAAI,EAAEmI,aAAiB,YACrB,MAAMpf,EAAQ,IAAI,MAAM,4CAA4C,EAAG,yBAAyB,EAIlG,GAAI,CAGF,OAFesf,GAAeF,CAAK,EAErB,KACf,OAA2BvS,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ,IAAI,MAAM,uDAAwD,EAAG,yBAAyB,CAC7G,CACF,OAA2B6M,EAAK,CAG/B,MAAIA,GAAOA,EAAI,SACP7M,EAAQ,IAAI,MAAM,yCAAyCiX,EAAO,SAAU,CAAA,EAAE,EAAG,oBAAoB,EAGvGpK,CACP,CACF,CACH,CC1MA,MAAMuR,GAAMC,EAAO,oBAAoB,EAEjCC,GAAgBsC,GAAoB,EAAG,KAEvCC,GAA+B,GAE9B,MAAMC,EAAa,CAIxB,YAAapC,EAAS,CACpB,KAAK,SAAWA,CACjB,CAQD,MAAM,QAAS1mB,EAAMqI,EAAU,CAAA,EAAI,CACjC,GAAI,OAAOrI,GAAS,SAClB,MAAMgI,EAAQ,IAAI,MAAM,cAAc,EAAG,kBAAkB,EAG7D,MAAMqd,EAAYhd,EAAQ,WAAaA,EAAQ,UAAU,SAAQ,IAAO,OAElE0gB,EAAe/oB,EAAK,MAAM,GAAG,EAEnC,GAAI+oB,EAAa,SAAW,GAAKA,EAAa,CAAC,IAAM,GACnD,MAAM/gB,EAAQ,IAAI,MAAM,cAAc,EAAG,kBAAkB,EAG7D,MAAMqW,EAAM0K,EAAa,CAAC,EAG1B,IAAIC,EAAQ,IAER3D,IACF2D,EAAQH,IAGV,MAAMlf,EAAM,MAAM,KAAK,SAAS0U,EAAK2K,EAAO3gB,CAAO,EAEnD+d,OAAAA,GAAI,GAAGpmB,CAAI,iCAAiC,EACrC2J,CACR,CAUD,MAAM,SAAU3J,EAAMgpB,EAAO3gB,EAAS,CAEpC,GAAI2gB,IAAU,EAAG,CACf,MAAMjC,EAAS,8CAA8C8B,EAA4B,aACzFzC,MAAAA,GAAI,MAAMW,CAAM,EAEV/e,EAAQ,IAAI,MAAM+e,CAAM,EAAG,6BAA6B,CAC/D,CAED,MAAMpd,EAAM,MAAM,KAAK,aAAa3J,EAAMqI,CAAO,EAC3C0gB,EAAepf,EAAI,MAAM,GAAG,EAGlC,OAAIof,EAAa,CAAC,IAAM,QAAU,CAACC,EAC1Brf,EAIF,KAAK,SAASof,EAAa,CAAC,EAAGC,EAAQ,EAAG3gB,CAAO,CACzD,CAQD,MAAM,aAAcrI,EAAMqI,EAAS,CACjC,MAAM4W,EAASqF,GAAiBtkB,CAAI,EAC9BgnB,EAAaC,GAAwBhI,CAAM,EACjD,IAAI4H,EAEJ,GAAI,CACFA,EAAS,MAAM,KAAK,SAAS,IAAIG,EAAY3e,CAAO,CACrD,OAA2BwM,EAAK,CAG/B,MAFAuR,GAAI,MAAM,oCAAqCvR,CAAG,EAE9CA,EAAI,OAASyR,GACTte,EAAQ,IAAI,MAAM,wBAAwBhI,CAAI,+BAA+B,EAAG,qBAAqB,EAGvGgI,EAAQ,IAAI,MAAM,4CAA4CiX,EAAO,SAAU,CAAA,EAAE,EAAG,qCAAqC,CAChI,CAGD,OAAO,KAAK,gBAAgBA,EAAQ4H,CAAM,CAC3C,CAQD,MAAM,gBAAiB5H,EAAQ4H,EAAQ,CAErC,MAAMoC,GAAc/V,GAAiB,CACnCT,EAAqB,QAAQ,EAC7BwM,EAAO,QAAS,CACjB,CAAA,EAAG4H,CAAM,EAEV,MAAMqC,EAAY5B,GAAeT,CAAM,EAEvC,OAAOhW,EAAmBqY,EAAU,KAAK,CAC1C,CACH,CC7HO,MAAM/F,EAAK,CAMhB,YAAazD,EAAS,CACpB,KAAK,IAAMC,GAAQD,CAAO,CAC3B,CASD,IAAKrB,EAAK,CACR,MAAM1Z,EAAQ,KAAK,IAAI,IAAI0Z,CAAG,EAC9B,GAAI1Z,EAAO,CACT,GAAKA,EAAM,QAAYA,EAAM,OAAS,KAAK,IAAG,EAAK,CACjD,KAAK,IAAI,OAAO0Z,CAAG,EACnB,MACD,CACD,OAAO1Z,EAAM,KACd,CAEF,CAUD,IAAK0Z,EAAK1Z,EAAOib,EAAK,CACpB,KAAK,IAAI,IAAIvB,EAAK,CAAE,MAAA1Z,EAAO,OAAQ,KAAK,MAAQib,EAAK,CACtD,CAQD,IAAKvB,EAAK,CAER,MADc,OAAK,IAAIA,CAAG,CAK3B,CAOD,OAAQA,EAAK,CACX,KAAK,IAAI,OAAOA,CAAG,CACpB,CAOD,OAAS,CACP,KAAK,IAAI,MAAO,CACjB,CACH,CC3EA,MAAM+H,GAAMC,EAAO,WAAW,EACxB8C,GAAmB,GAAK,IAQvB,MAAMC,EAAK,CAWhB,YAAa1C,EAASC,EAAW1H,EAAQC,EAAU7W,EAAS,CAC1D,KAAK,UAAY,IAAIoe,GAAcC,EAASC,CAAS,EACrD,KAAK,YAAc,IAAIoB,GAAgB,KAAK,UAAWpB,EAAW1H,EAAQC,EAAU7W,CAAO,EAC3F,KAAK,SAAW,IAAIygB,GAAapC,CAAO,EACxC,KAAK,MAAQ,IAAIvD,GAAK,GAAI,EAC1B,KAAK,QAAUuD,CAChB,CAUD,MAAM,QAASzH,EAAQta,EAAOiiB,EAAWH,GAAc,sBAAuBpe,EAAS,CACrF,GAAI,CACF,MAAM,KAAK,UAAU,eAAe4W,EAAQta,EAAOiiB,EAAUve,CAAO,EAEpE+d,GAAI,cAAcvV,EAAmBlM,EAAO,QAAQ,CAAC,0BAA0B,EAG/E,MAAM0kB,EAAKpK,EAAO,SAAU,EAEtBqK,EAAQ,WAAW1C,CAAQ,EAC3BhH,EAAO0J,EAAQH,GAAoBG,EAAQH,GAEjD,YAAK,MAAM,IAAIE,EAAI1kB,EAAOib,CAAG,EAE7BwG,GAAI,cAAcvV,EAAmBlM,EAAO,QAAQ,CAAC,uBAAuB,EAErE,CACL,KAAM0kB,EACN,MAAO1kB,CACR,CACF,OAA2BkQ,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EAEPA,CACP,CACF,CAWD,MAAM,QAAS7U,EAAMqI,EAAU,CAAA,EAAI,CACjC,GAAI,OAAOrI,GAAS,SAClB,MAAMgI,EAAQ,IAAI,MAAM,4BAA4B,EAAG,kBAAkB,EAI3E,GAAI,CAACK,EAAQ,SAAW,CAACA,EAAQ,UAAW,CAE1C,MAAMghB,EAAKrpB,EAAK,MAAM,GAAG,EAAE,CAAC,EACtB+N,EAAS,KAAK,MAAM,IAAIsb,CAAE,EAEhC,GAAItb,EACF,OAAOA,CAEV,CAED,GAAI,CACF,MAAMA,EAAS,MAAM,KAAK,SAAS,QAAQ/N,EAAMqI,CAAO,EAExD+d,OAAAA,GAAI,oBAAoBpmB,CAAI,yBAAyB,EAE9C+N,CACR,OAA2B8G,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EAEPA,CACP,CACF,CAWD,MAAM,mBAAoBoK,EAAQta,EAAO0D,EAAS,CAChD,OAAO,KAAK,QAAQ4W,EAAQta,EAAO8hB,GAAc,sBAAuBpe,CAAO,CAChF,CACH,CC9GA,MAAM+d,GAAMC,EAAO,kBAAkB,EAO9B,MAAMkD,EAAoB,CAM/B,YAAaC,EAAQC,EAAgBxK,EAAQ,CAE3C,KAAK,eAAiB,CAAE,EAGxB,KAAK,uBAAyB,KAAK,uBAAuB,KAAK,IAAI,EAEnE,KAAK,UAAY,IAAIyK,GAAgBF,EAAQC,EAAgBxK,EAAQgK,GAAeU,GAAc,KAAK,sBAAsB,CAC9H,CASD,MAAM,IAAKtL,EAAK1Z,EAAO0D,EAAS,CAC9B,GAAI,CACF,MAAM,KAAK,UAAU,IAAIgW,EAAK1Z,EAAO0D,CAAO,CAC7C,OAA2BwM,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CACF,CAUD,MAAM,IAAKwJ,EAAKhW,EAAS,CACvB,IAAIsB,EACAkL,EAEJ,GAAI,CACFlL,EAAM,MAAM,KAAK,UAAU,IAAI0U,EAAKhW,CAAO,CAC5C,OAA2BuhB,EAAG,CAC7B/U,EAAM+U,CACP,CAGD,MAAMC,EAAKxL,EAAI,MAAM,EAAGyL,EAAe,EAEvC,GAAIjZ,EAAmBgZ,CAAE,IAAME,GAAW,CACxC,MAAMC,EAAmBhlB,EAAU,OAAOqZ,CAAG,EAAE,UAAU,CAAC,EACpDgL,EAAKrkB,EAAU,OAAOqZ,EAAI,MAAMyL,EAAe,CAAC,EAAE,UAAU,CAAC,EAEnE,KAAK,eAAeE,CAAgB,EAAIX,EAExCjD,GAAI,8BAA8B4D,CAAgB,QAAQX,CAAE,EAAE,CAC/D,CAGD,GAAIxU,EACF,MAAMA,EAGR,OAAOlL,CACR,CAOD,uBAAwB0U,EAAK,CACvBA,aAAe,aACjBA,EAAMxN,EAAmBwN,EAAK,WAAW,GAG3C,MAAM4L,EAAa,KAAK,eAAe5L,CAAG,EAE1C,GAAI,CAAC4L,EACH,MAAMjiB,EAAQ,IAAI,MAAM,OAAOqW,CAAG,wCAAwC,EAAG,iBAAiB,EAGhG,GAAI,CAEF,OADU6L,GAAmB5F,GAAiB2F,CAAU,CAAC,CAE1D,OAA2BpV,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CACF,CAKD,kBAAoB,CAGlB,OAFsB,OAAO,OAAO,KAAK,cAAc,EAAE,OAAO,OAAO,EAElD,IAAKsV,GAAQ,GAAGJ,EAAS,GAAGI,CAAG,EAAE,CACvD,CAOD,MAAM,OAAQnqB,EAAM,CAClB,GAAI,OAAOA,GAAS,SAClB,MAAMgI,EAAQ,IAAI,MAAM,2BAA2B,EAAG,+BAA+B,EAInFhI,EAAK,WAAW+pB,EAAS,IAC3B/pB,EAAOA,EAAK,UAAU8pB,EAAe,GAGvC,MAAME,EAAmB,OAAO,KAAK,KAAK,cAAc,EAAE,KAAM3L,GAAQ,KAAK,eAAeA,CAAG,IAAMre,CAAI,EAGzG,GAAI,CAACgqB,EACH,MAAO,CACL,SAAU,EACX,EAIH,MAAMI,EAAW3X,EAAqBuX,CAAgB,EAEtD,YAAK,UAAU,YAAYI,CAAQ,EAEnC,OAAO,KAAK,eAAeJ,CAAgB,EAC3C5D,GAAI,uBAAuB4D,CAAgB,KAAKhqB,CAAI,EAAE,EAE/C,CACL,SAAU,EACX,CACF,CACH,CCxJA,MAAMomB,GAAMC,EAAO,6BAA6B,EAQzC,MAAMgE,EAAiB,CAI5B,YAAa1D,EAAW,CACtB,KAAK,WAAaA,EAElB,KAAK,OAAS,CAAE,CACjB,CASD,MAAM,IAAKtI,EAAK1Z,EAAO0D,EAAS,CAC9B,GAAI,EAAEgW,aAAe,YACnB,MAAMrW,EAAQ,IAAI,MAAM,4CAA4C,EAAG,iBAAiB,EAG1F,GAAI,EAAErD,aAAiB,YACrB,MAAMqD,EAAQ,IAAI,MAAM,8CAA8C,EAAG,mBAAmB,EAG9F,IAAIgf,EAEJ,GAAI,CACFA,EAAa,KAAK,YAAY3I,CAAG,CAClC,OAA2BxJ,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ,IAAI,MAAM,0CAA0C,EAAG,4BAA4B,CAClG,CAGD,MAAM6e,EAAS,IAAIyD,GAAajM,EAAK1Z,EAAO,IAAI,IAAM,EAEtD,MAAM,KAAK,WAAW,IAAIqiB,EAAYH,EAAO,UAAW,EAAExe,CAAO,CAClE,CAQD,MAAM,IAAKgW,EAAKhW,EAAS,CACvB,GAAI,EAAEgW,aAAe,YACnB,MAAMrW,EAAQ,IAAI,MAAM,4CAA4C,EAAG,iBAAiB,EAG1F,IAAIgf,EAEJ,GAAI,CACFA,EAAa,KAAK,YAAY3I,CAAG,CAClC,OAA2BxJ,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ,IAAI,MAAM,0CAA0C,EAAG,4BAA4B,CAClG,CAED,MAAM2B,EAAM,MAAM,KAAK,WAAW,IAAIqd,EAAY3e,CAAO,EAGzD,IAAIwe,EACJ,GAAI,CACFA,EAASyD,GAAa,YAAY3gB,CAAG,CACtC,OAA2BkL,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CAED,OAAOgS,EAAO,KACf,CAOD,YAAaxI,EAAK,CAChB,OAAO,IAAIpB,GAAI,eAAiBpM,EAAmBwN,EAAK,QAAQ,EAAG,EAAK,CACzE,CACH,CC7FA,MAAM+H,GAAMC,EAAO,yBAAyB,EAMrC,MAAMkE,EAAa,CAKxB,YAAaC,EAAK,CAChB,KAAK,KAAOA,CACb,CAOD,MAAM,IAAKnM,EAAK1Z,EAAO0D,EAAS,CAC9B,GAAI,CACF,MAAMoiB,GAAM,KAAK,KAAK,IAAIpM,EAAK1Z,EAAO0D,CAAO,CAAC,CAC/C,OAA2BwM,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CACF,CAMD,MAAM,IAAKwJ,EAAKhW,EAAS,CACvB,gBAAiBsY,KAAS,KAAK,KAAK,IAAItC,EAAKhW,CAAO,EAClD,GAAIsY,EAAM,OAAS,QACjB,OAAOA,EAAM,MAIjB,MAAM4F,GAAe,CACtB,CACH,CC7BO,SAASmE,GAAe,CAAE,OAAAnL,EAAQ,KAAA/B,EAAM,OAAAyB,EAAQ,QAAA5W,CAAO,EAAI,CAGhE,MAAMsiB,EAAa,CAAE,EAGrB,IAAIC,EAYJ,GAXIC,GAAIxiB,EAAS,0BAA2B,EAAK,IAC/CuiB,EAAW,IAAIrB,GAAoBhK,EAAO,OAAQ/B,EAAK,UAAWyB,CAAM,EACxE0L,EAAW,KAAKC,CAAQ,GAItBC,GAAIxiB,EAAS,UAAW,EAAK,IAAM,IAAQ,CAAC,MAAO,YAAa,WAAW,EAAE,SAASwiB,GAAIxiB,EAAS,sBAAuB,MAAM,CAAC,GACnIsiB,EAAW,KAAK,IAAIJ,GAAahL,EAAO,GAAG,CAAC,EAI1CsL,GAAIxiB,EAAS,UAAW,EAAK,GAAKsiB,EAAW,SAAW,EAAG,CAC7D,MAAMG,EAAmB,IAAIT,GAAiB7M,EAAK,SAAS,EAC5DmN,EAAW,KAAKG,CAAgB,CACjC,CAGD,OAAO,IAAIC,GAAgBJ,CAAU,CACvC,CCpCA,MAAMvE,GAAMC,EAAO,sBAAsB,EAgBlC,MAAM2E,EAAQ,CAQnB,YAAa3iB,EAAU,CAAE,KAAM,EAAE,EAAI,CACnC,KAAK,QAAUA,EAGf,KAAK,QAAU,KAGf,KAAK,OAAS,IACf,CAED,SAAW,CACT,MAAM8W,EAAO,KAAK,QAAU,KAAK,QACjC,GAAIA,EACF,OAAOA,EAEP,MAAM,IAAIvP,EAEb,CAED,IAAI,SAAW,CACb,OAAO,KAAK,QAAO,EAAG,OACvB,CAcD,aAAc,CAAE,KAAA4N,EAAM,OAAAyB,EAAQ,SAAAC,CAAQ,EAAI,CACxC,GAAI,KAAK,SAAW,KAClB,MAAM,IAAIpP,GAGZsW,GAAI,sCAAsC,EAE1C,MAAMM,EAAU,IAAI2D,GAAiB7M,EAAK,SAAS,EAC7C2B,EAAO,IAAIiK,GAAK1C,EAASlJ,EAAK,UAAWyB,EAAQC,EAAU,KAAK,OAAO,EAE7E,KAAK,QAAUC,CAChB,CASD,MAAM,YAAa,CAAE,OAAAI,EAAQ,KAAA/B,EAAM,OAAAyB,EAAQ,SAAAC,GAAY,CACrD,GAAI,KAAK,QAAU,KACjB,MAAM,IAAIpP,GAEZ,MAAM4W,EAAUgE,GAAc,CAAE,OAAAnL,EAAQ,KAAA/B,EAAM,OAAAyB,EAAQ,QAAS,KAAK,QAAS,EAGvEE,EAAO,IAAIiK,GAAK1C,EAASlJ,EAAK,UAAWyB,EAAQC,EAAU,KAAK,OAAO,EAC7E,MAAMC,EAAK,YAAY,MAAO,EAC9B,KAAK,OAASA,CACf,CAED,MAAM,MAAQ,CACZ,MAAMA,EAAO,KAAK,OACdA,IACF,MAAMA,EAAK,YAAY,KAAM,EAC7B,KAAK,OAAS,KAEjB,CAQD,QAASF,EAAQta,EAAOiiB,EAAUve,EAAS,CACzC,OAAO,KAAK,UAAU,QAAQ4W,EAAQta,EAAOiiB,EAAUve,CAAO,CAC/D,CAUD,QAASrI,EAAMqI,EAAS,CACtB,OAAO,KAAK,QAAO,EAAG,QAAQrI,EAAMqI,CAAO,CAC5C,CAOD,mBAAoB4W,EAAQta,EAAO0D,EAAS,CAC1C,OAAO,KAAK,QAAS,EAAC,mBAAmB4W,EAAQta,EAAO0D,CAAO,CAChE,CACH,CCvHO,eAAekV,GAAa,CAAE,KAAA4B,EAAM,KAAA3B,EAAM,OAAA/N,CAAQ,EAAEzP,EAAMqI,EAAS,CAExE,GAAI4iB,GAAgBjrB,CAAI,EACtB,OAAOmf,EAAK,QAAQnf,CAAI,EAG1B,KAAM,CACJ,IAAAiM,EACA,KAAAuF,CACJ,EAAMqL,GAAa7c,CAAI,EAGrB,MAAMyqB,GAAM7M,GAAQ3R,EAAKuF,GAAQ,GAAI/B,EAAQ+N,EAAMnV,CAAO,CAAC,CAC7D,CClBA,MAAM+d,GAAMC,EAAO,mBAAmB,EAa/B,SAAS6E,GAAe,CAAE,KAAA/L,EAAM,KAAA3B,EAAM,OAAA/N,EAAQ,OAAAwP,EAAQ,SAAAkM,EAAU,SAAAjM,GAAY,CAIjF,MAAMkM,EAAY,MAAMC,GAAW,CAEjC,IAAIC,EAEJ,GAAID,IAAY,QAAUpM,EAAO,YAAc,KAC7CqM,EAAa,MAAMC,GAAoBtM,EAAO,UAAU,MAExD,IAAI,CAEF,MAAMsJ,EAAM,MAAMrJ,EAAS,UAAUmM,EAAS,MAAM,EACpDC,EAAa,MAAM7C,GAAUF,EAAK,MAAM,CACzC,OAA2B1T,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ6M,EAAK,oBAAoB,CACxC,CAGH,OAAO8T,GAAe2C,EAAW,OAAO,MAAOA,EAAW,KAAK,CAChE,EAKD,eAAeE,EAAS7mB,EAAO0D,EAAU,GAAI,CAC3C,MAAMuV,EAAYvV,EAAQ,UAAY,GAChCue,EAAWve,EAAQ,UAAY,MAC/BgW,EAAMhW,EAAQ,KAAO,OAE3B,GAAI,CAAC8iB,EAAQ,EACX,MAAMnjB,EAAQ,IAAI,MAAM+U,EAAa,EAAG,eAAe,EAKzD,GAAI,CACFpY,EAAQwY,GAAcxY,CAAK,CAC5B,OAA2BkQ,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CAED,IAAI4W,EAAc,EAClB,GAAI,CACFA,EAAczP,GAAc4K,CAAQ,GAAK,EAGzC6E,EAAc,WAAWA,EAAY,QAAQ,CAAC,CAAC,CAChD,OAA2B5W,EAAK,CAC/BuR,MAAAA,GAAI,MAAMvR,CAAG,EACPA,CACP,CAGD,MAAMwP,EAAU,MAAM,QAAQ,IAAI,CAEhC+G,EAAU/M,CAAG,EAEbT,EAAUL,GAAY,CAAE,KAAA4B,EAAM,KAAA3B,EAAM,OAAA/N,CAAM,EAAI9K,CAAK,EAAI,QAAQ,QAAS,CAC9E,CAAK,EAEK1B,EAAQwP,EAAqB9N,CAAK,EAGlCoJ,EAAS,MAAMoR,EAAK,QAAQkF,EAAQ,CAAC,EAAGphB,EAAOwoB,EAAapjB,CAAO,EAEzE,MAAO,CACL,KAAM0F,EAAO,KACb,MAAO8C,EAAmB9C,EAAO,KAAK,CACvC,CACF,CAED,OAAO6N,EAAkB4P,CAAO,CAClC,CCxFA,MAAME,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAEvDvF,GAAMC,EAAO,mBAAmB,EAQhCuF,GAAkB,CAAC7d,EAAQjB,IAC/BA,EAAU,OAAS,EACfiB,EAAS,IAAMjB,EAAU,KAAK,GAAG,EACjCiB,EAWC,SAASgW,GAAe,CAAE,IAAA8H,EAAK,KAAA1M,EAAM,SAAAgM,EAAU,QAAS,CAAE,QAAAW,CAAO,GAAM,CAI5E,eAAiBlO,EAAS5d,EAAMqI,EAAU,GAAI,CAO5C,GANAA,EAAUqjB,GAAa,CACrB,QAAS,GACT,UAAW,EACZ,EAAErjB,CAAO,EAGNyjB,GAAWzjB,GAAWA,EAAQ,QAChC,MAAML,EAAQ,IAAI,MAAM,yCAAyC,EAAG,yBAAyB,EAI/F,GAAI,CAACmjB,KAAc,CAACW,EAClB,MAAM9jB,EAAQ,IAAI,MAAM+U,EAAa,EAAG,eAAe,EAGzD,IAAIgP,EAAW/rB,EAAK,SAAU,EAEzB+rB,EAAS,WAAW,QAAQ,IAC/BA,EAAW,SAASA,CAAQ,IAG9B,GAAI,CAAChC,EAAW5W,EAAM,GAAGrG,CAAS,EAAIif,EAAS,MAAM,CAAC,EAAE,MAAM,GAAG,EAEjE,GAAI,CACF,GAAI5Y,EAAK,UAAU,EAAG,CAAC,IAAM,IAAK,CAChC,MAAMkW,EAAK/E,GAAiBnR,CAAI,EAC1BpI,EAAS8B,GAAcwc,EAAG,QAAO,CAAE,EAEzClW,EADkBhH,EAAI,SAAS,IAAMpB,CAAM,EAC1B,SAASuD,EAAM,CACxC,KAAa,CACL,MAAMrC,EAAME,EAAI,MAAMgH,CAAI,EAEtBlH,EAAI,UAAY,IAClBkH,EAAOlH,EAAI,SAASqC,EAAM,EAE7B,CACF,OAA2BuG,EAAK,CAE/B,GAAImX,GAAS7Y,CAAI,EAAG,CAClB,MAAMyY,GAAgB,MAAMC,EAAI1Y,EAAM9K,CAAO,EAAGyE,CAAS,EACzD,MACD,CAEDsZ,MAAAA,GAAI,MAAMvR,CAAG,EACP7M,EAAQ,IAAI,MAAM,mBAAmB,EAAG,uBAAuB,CACtE,CAID,MAAMrD,EAAQ,MAAMwa,EAAK,QAAQ,IAAI4K,CAAS,IAAI5W,CAAI,GAAI9K,CAAO,EACjE,MAAMujB,GAAgBjnB,aAAiB,WAAakM,EAAmBlM,CAAK,EAAIA,EAAOmI,CAAS,CACjG,CAED,OAAO8O,EAAkBgC,CAAO,CAClC,CCjFO,SAASqO,GAAkB9M,EAAM9W,EAAS,CAC/C,GAAI,CAAC8W,GAAQ,EAAE9W,GAAWA,EAAQ,YAChC,MAAML,EAAQ,IAAI,MAAM,sCAAsC,EAAG,6BAA6B,EAIhG,GAAImX,EAAK,mBAAmBoK,GAC1B,OAAOpK,EAAK,QAId,MAAMqK,GAAUrK,EAAK,QAAQ,QAAU,CAAE,GAAE,KAAK/H,GAAKA,aAAamS,EAAmB,EAErF,GAAI,CAACC,EACH,MAAMxhB,EAAQ,IAAI,MAAM,iCAAiC,EAAG,gCAAgC,EAG9F,OAAOwhB,CACT,CCxBO,SAAS0C,GAAc,CAAE,KAAA/M,EAAM,QAAA9W,GAAW,CAC/C,MAAM8jB,EAAe9jB,EAAQ,aAK7B,eAAe+jB,EAAQpsB,EAAMqI,EAAU,GAAI,CAEzC,OADe4jB,GAAiB9M,EAAMgN,CAAY,EACpC,OAAOnsB,EAAMqI,CAAO,CACnC,CAED,OAAOuT,EAAkBwQ,CAAM,CACjC,CCZO,SAASC,GAAa,CAAE,KAAAlN,EAAM,QAAA9W,GAAW,CAC9C,MAAM8jB,EAAe9jB,EAAQ,aAK7B,eAAe6M,EAAOgJ,EAAW,GAAI,CACnC,GAAI,CACF,MAAO,CAAE,QAAS,EAAQ+N,GAAiB9M,EAAMgN,CAAY,CAAI,CAClE,MAAgC,CAC/B,MAAO,CAAE,QAAS,EAAO,CAC1B,CACF,CAED,OAAOvQ,EAAkB1G,CAAK,CAChC,CCfO,SAASoX,GAAY,CAAE,KAAAnN,EAAM,QAAA9W,GAAW,CAC7C,MAAM8jB,EAAe9jB,EAAQ,aAK7B,eAAekkB,EAAMlkB,EAAU,GAAI,CAEjC,OADe4jB,GAAiB9M,EAAMgN,CAAY,EACpC,iBAAiB9jB,CAAO,CACvC,CAED,OAAOuT,EAAkB2Q,CAAI,CAC/B,CChBO,MAAMC,EAAU,CAMrB,YAAa,CAAE,KAAArN,EAAM,QAAA9W,GAAW,CAC9B,KAAK,OAAS6jB,GAAa,CAAE,KAAA/M,EAAM,QAAA9W,CAAO,CAAE,EAC5C,KAAK,MAAQgkB,GAAY,CAAE,KAAAlN,EAAM,QAAA9W,CAAO,CAAE,EAC1C,KAAK,KAAOikB,GAAW,CAAE,KAAAnN,EAAM,QAAA9W,CAAO,CAAE,CACzC,CACH,CCXO,MAAMokB,EAAQ,CAYnB,YAAa,CAAE,IAAAZ,EAAK,KAAA1M,EAAM,KAAA3B,EAAM,OAAA/N,EAAQ,OAAAwP,EAAQ,SAAAkM,EAAU,SAAAjM,EAAU,QAAA7W,GAAW,CAC7E,KAAK,QAAU6iB,GAAc,CAAE,KAAA/L,EAAM,KAAA3B,EAAM,OAAA/N,EAAQ,OAAAwP,EAAQ,SAAAkM,EAAU,SAAAjM,EAAU,EAC/E,KAAK,QAAU6E,GAAc,CAAE,IAAA8H,EAAK,KAAA1M,EAAM,SAAAgM,EAAU,QAAA9iB,EAAS,EAC7D,KAAK,OAAS,IAAImkB,GAAU,CAAE,KAAArN,EAAM,QAAA9W,CAAO,CAAE,CAC9C,CACH,CCdA,MAAMie,GAAgBC,GAAa,EAAG,KAEzBmG,GAAS,CACpB,QAAS,QACT,MAAO,gBACT,EAsBO,SAASC,GAAY,CAAE,KAAAnP,EAAM,OAAA/N,EAAQ,QAAAmO,EAAS,QAAAoB,CAAO,EAAI,CAI9D,eAAiB4N,EAAMnR,EAAUpT,EAAU,GAAI,CAC7C,GAAIA,EAAQ,WAAa,EACvB,OAGF,GAAIA,EAAQ,OAASA,EAAQ,QAAUA,EAAQ,SAAWqkB,GAAO,QAC/D,MAAM,IAAI,MAAM,kDAAkD,EASpE,GANArkB,EAAQ,OAASA,EAAQ,MAAQqkB,GAAO,MAAQrkB,EAAQ,OAEpD,OAAOA,EAAQ,UAAa,WAC9BA,EAAQ,SAAWA,EAAQ,UAAY,IAAW,GAGhDA,EAAQ,QAAS,CAEnB,MAAMwkB,EAAU,CADG,IAAI3Q,qBAAkB7T,EAAQ,OAAO,EAC5B,MAAM,EAE9BA,EAAQ,QACVwkB,EAAQ,KAAKxkB,EAAQ,MAAM,EAG7BA,EAAQ,OAAS8T,GAAU0Q,CAAO,CACnC,CAKD,MAAMC,GAFW,MAAM,QAAQrR,CAAQ,EAAIA,EAAW,CAACA,CAAQ,GAExC,IAAIpV,GAAK0mB,GAAY/N,EAAS3Y,EAAGgC,CAAO,CAAC,EAEhE,UAAWmJ,KAAQsb,EACjB,GAAI,CACF,MAAQE,GAAWpP,EAASJ,EAAM/N,EAAQ+B,EAAMnJ,CAAO,CACxD,OAA2BwM,EAAK,CAC/B,KAAM,CACJ,IAAK,GACL,IAAKA,EAAI,OACV,CACF,CAEJ,CAED,OAAO+X,CACT,CAOA,SAASG,GAAa/N,EAASvD,EAAUpT,EAAS,CAChD,KAAM,CACJ,IAAA4D,EACA,KAAAuF,CACJ,EAAMqL,GAAapB,CAAQ,EAEzB,OAAIpT,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGN,SAASA,CAAG,GAAGuF,GAAQ,EAAE,EAClC,CAWA,eAAiBwb,GAAYpP,EAASJ,EAAM/N,EAAQ+B,EAAMnJ,EAAS,CAEjE,MAAM4kB,EAAU,MAAMrP,EAAQpM,EAAMnJ,CAAO,EACrC,CACJ,IAAA4D,CACJ,EAAM4Q,GAAaoQ,CAAO,EAElBC,EAAW7kB,EAAQ,UAAY,KAAOA,EAAQ,SAAW,IACzD8kB,EAAS9kB,EAAQ,QAAU,GAGjC,gBAAiB2c,KAAOoI,GAAa5P,EAAM/N,EAAQxD,EAAKihB,EAAUC,EAAQ9kB,CAAO,EAE1E2c,EAAI,SAKLA,EAAI,cAMR,KAAM,CACJ,IAAKqI,GAAWrI,EAAI,OAAO,IAAKA,EAAI,KAAK,IAAKA,EAAI,KAAK,KAAM3c,EAAQ,MAAM,CAC5E,GAEL,CAUA,SAASglB,GAAYC,EAAQC,EAAQC,EAAW,GAAI9hB,EAASghB,GAAO,QAAS,CAC3E,IAAIloB,EAAMkH,EAAO,QAAQ,SAAU4hB,EAAO,UAAU,EACpD,OAAA9oB,EAAMA,EAAI,QAAQ,SAAU+oB,EAAO,SAAQ,CAAE,EAC7C/oB,EAAMA,EAAI,QAAQ,cAAegpB,CAAQ,EAClChpB,CACT,CAYA,eAAiB4oB,GAAc5P,EAAM/N,EAAQge,EAASP,EAAUQ,EAAYrlB,EAAS,CACnF,MAAMslB,EAAO,IAAI,IAOjB,eAAiBC,EAAe/H,EAAQmD,EAAO,CAC7C,MAAM6E,EAAiB7E,EAAQ,EAG/B,GAAI,EAAA6E,EAAiBX,GAKrB,GAAI,CAEF,gBAAiBvhB,KAAQmiB,GAAStQ,EAAM/N,EAAQoW,EAAO,IAAKxd,CAAO,EACjE,KAAM,CACJ,OAAQwd,EACR,KAAMla,EACN,YAAa+hB,GAAcC,EAAK,IAAIhiB,EAAK,IAAI,UAAU,CACxD,EAEG+hB,GACFC,EAAK,IAAIhiB,EAAK,IAAI,SAAQ,CAAE,EAG9B,MAAQiiB,EAAcjiB,EAAMkiB,CAAc,CAE7C,OAA2BhZ,EAAK,CAC/B,MAAIA,EAAI,OAASyR,KACfzR,EAAI,QAAU,mCAAmCgR,EAAO,GAAG,IAGvDhR,CACP,CACF,CAED,MAAQ+Y,EAAc,CAAE,IAAKH,CAAO,EAAI,CAAC,CAC3C,CAWA,eAAiBK,GAAUtQ,EAAM/N,EAAQxD,EAAK5D,EAAS,CACrD,MAAM+V,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAE1C1D,GADQ,MAAM8K,EAAO,SAASxD,EAAI,IAAI,GACxB,OAAOmS,CAAK,EAC1B2P,EAAU9hB,EAAI,OAASqS,EAEvBxe,EAAO,CAAE,EAEf,SAAW,CAACE,EAAMiM,CAAG,IAAK+hB,GAAMrpB,EAAO7E,CAAI,EAAG,CAG5C,GAAIiuB,EAAS,CACX,MAAM3S,EAAQpb,EAAK,MAAM,sBAAsB,EAE/C,GAAIob,EAAO,CACT,MAAMzS,EAAQ,OAAOyS,EAAM,CAAC,CAAC,EAE7B,GAAIzS,EAAQhE,EAAM,MAAM,OAAQ,CAC9B,KAAM,CACJ,KAAMA,EAAM,MAAMgE,CAAK,EAAE,KACzB,IAAAsD,CACD,EAED,QACD,CACF,CACF,CAED,KAAM,CACJ,KAAAjM,EACA,IAAAiM,CACD,CACF,CACH,CAOA,MAAM+hB,GAAQ,UAAYrtB,EAAQb,EAAM,CACtC,GAAIa,GAAU,MAIV,EAAAA,aAAkB,YAItB,UAAW,CAAC0d,EAAK1Z,CAAK,IAAK,OAAO,QAAQhE,CAAM,EAAG,CACjD,MAAM6Q,EAAO,CAAC,GAAG1R,EAAMue,CAAG,EAE1B,GAAI1Z,GAAS,MAAQ,OAAOA,GAAU,SACpC,GAAI,MAAM,QAAQA,CAAK,EACrB,SAAW,CAACgE,EAAOslB,CAAO,IAAKtpB,EAAM,QAAO,EAAI,CAC9C,MAAMupB,EAAc,CAAC,GAAG1c,EAAM7I,CAAK,EAC7BsD,EAAME,EAAI,MAAM8hB,CAAO,EAGzBhiB,EACF,KAAM,CAACiiB,EAAY,KAAK,GAAG,EAAGjiB,CAAG,EACxB,OAAOgiB,GAAY,WAC5B,MAAQD,GAAMC,EAASC,CAAW,EAErC,KACI,CACL,MAAMjiB,EAAME,EAAI,MAAMxH,CAAK,EAEvBsH,EACF,KAAM,CAACuF,EAAK,KAAK,GAAG,EAAGvF,CAAG,EAE1B,MAAQ+hB,GAAMrpB,EAAO6M,CAAI,CAE5B,CAEJ,CAID,MAAO,CAAE,EACX,ECrSO,SAAS2c,GAAa,CAAE,KAAA3Q,GAAQ,CAIrC,eAAiB4Q,EAAW/lB,EAAU,GAAI,CACxC,gBAAiB4D,KAAOuR,EAAK,OAAO,UAAU,GAAI,CAAE,OAAQnV,EAAQ,MAAM,CAAE,EAC1E,KAAM,CAAE,IAAK4D,EAAI,UAAY,CAEhC,CAED,OAAO2P,EAAkBwS,CAAS,CACpC,CCXO,SAASC,GAAgB,CAAE,QAAAtP,GAAW,CAI3C,eAAeuP,EAAUjmB,EAAU,GAAI,CACrC,KAAM,CAAE,QAAAkmB,CAAS,EAAG,MAAMxP,EAAQ,IAAI1W,CAAO,EACvCmmB,EAAOD,EAAQ,YAAa,EAElC,OAAO,MAAM,KAAKC,CAAI,EAAE,IAAI5E,GAAKA,EAAE,CAAC,EAAE,GAAG,CAC1C,CAED,OAAOhO,EAAkB0S,CAAQ,CACnC,CCZO,SAASG,GAAuB,CAAE,QAAA1P,GAAW,CAIlD,eAAe2P,EAAiBzP,EAAQ5W,EAAU,GAAI,CACpD,KAAM,CAAE,QAAAkmB,CAAS,EAAG,MAAMxP,EAAQ,IAAI1W,CAAO,EACvCmmB,EAAOD,EAAQ,gBAAgBtP,CAAM,EAE3C,OAAO,MAAM,KAAKuP,CAAI,EAAE,IAAI5E,GAAKA,EAAE,CAAC,EAAE,GAAG,CAC1C,CAED,OAAOhO,EAAkB8S,CAAe,CAC1C,CCZO,SAASC,GAAc,CAAE,QAAA5P,GAAW,CAIzC,eAAe6P,EAAQC,EAAMxmB,EAAU,GAAI,CACzC,KAAM,CAAE,QAAAkmB,CAAS,EAAG,MAAMxP,EAAQ,IAAI1W,CAAO,EAE7C,OAAK,MAAM,QAAQwmB,CAAI,IACrBA,EAAO,CAACA,CAAI,GAGPN,EAAQ,OAAOM,CAAI,CAC3B,CAED,OAAOjT,EAAkBgT,CAAM,CACjC,CCfO,SAASE,GAAY,CAAE,QAAA/P,GAAW,CAIvC,eAAegQ,EAAM1mB,EAAU,GAAI,CAEjC,MAAMkmB,GAAW,MAAMxP,EAAQ,IAAI1W,CAAO,GAAG,QACvC2mB,EAAWT,EAAQ,KAAI,EAAG,SAEhC,MAAO,CACL,cAAe,SAASS,EAAS,qBAAqB,SAAQ,CAAE,EAChE,eAAgB,OAAOA,EAAS,eAAe,SAAQ,CAAE,EACzD,SAAU,MAAM,KAAKT,EAAQ,YAAa,CAAA,EAAE,IAAI3E,GAAKA,EAAE,CAAC,EAAE,GAAG,EAC7D,MAAO2E,EAAQ,MAAO,EACtB,gBAAiB,OAAOS,EAAS,gBAAgB,SAAQ,CAAE,EAC3D,gBAAiB,OAAOA,EAAS,gBAAgB,SAAQ,CAAE,EAC3D,aAAc,OAAOA,EAAS,aAAa,SAAQ,CAAE,EACrD,WAAY,OAAOA,EAAS,WAAW,SAAQ,CAAE,EACjD,SAAU,OAAOA,EAAS,SAAS,SAAQ,CAAE,CAC9C,CACF,CAED,OAAOpT,EAAkBmT,CAAI,CAC/B,CCjBO,MAAME,EAAW,CAKtB,YAAa,CAAE,QAAAlQ,GAAW,CACxB,KAAK,SAAWsP,GAAe,CAAE,QAAAtP,CAAO,CAAE,EAC1C,KAAK,gBAAkB0P,GAAsB,CAAE,QAAA1P,CAAO,CAAE,EACxD,KAAK,OAAS4P,GAAa,CAAE,QAAA5P,CAAO,CAAE,EACtC,KAAK,KAAO+P,GAAW,CAAE,QAAA/P,CAAO,CAAE,CACnC,CACH,CClBO,SAASmQ,GAAkB9U,EAAI,CACpC,GAAI,CACF,OAAOJ,GAAK,QAAQI,CAAE,CACvB,MAAgC,CAC/B,MAAO,EACR,CACH,CCJO,SAASmK,GAAW,CAAE,KAAA/G,GAAQ,CAInC,eAAe2R,EAAKtX,EAAWxP,EAAU,GAAI,CAC3C,GAAI,CAAC6mB,GAAiBrX,CAAS,EAC7B,MAAM,IAAI,MAAM,GAAGA,CAAS,2BAA2B,EAGzD,MAAMuX,EAAS,MAAM5R,EAAK,OAAO,OAAOnV,CAAO,EACzCgnB,EAAeD,EAAO,WAAa,CAAE,EAC3C,OAAAC,EAAa,KAAKxX,EAAU,UAAU,EAEtCuX,EAAO,UAAY,MAAM,KACvB,IAAI,IAAIC,CAAY,CAC1B,EAAM,KAAK,CAAC9jB,EAAGlJ,IAAMkJ,EAAE,cAAclJ,CAAC,CAAC,EAEnC,MAAMmb,EAAK,OAAO,QAAQ4R,CAAM,EAEzB,CACL,MAAO,CAACvX,CAAS,CAClB,CACF,CAED,OAAO+D,EAAkBuT,CAAG,CAC9B,CCzBO,SAASG,GAAa,CAAE,KAAA9R,GAAQ,CAIrC,eAAe+R,EAAOlnB,EAAU,GAAI,CAClC,MAAM+mB,EAAS,MAAM5R,EAAK,OAAO,OAAOnV,CAAO,EACzCmnB,EAAUJ,EAAO,WAAa,CAAE,EACtC,OAAAA,EAAO,UAAY,CAAE,EAErB,MAAM5R,EAAK,OAAO,QAAQ4R,CAAM,EAEzB,CAAE,MAAOI,EAAQ,IAAIpV,GAAMvC,GAAUuC,CAAE,CAAC,CAAG,CACnD,CAED,OAAOwB,EAAkB2T,CAAK,CAChC,CCfO,SAASE,GAAY,CAAE,KAAAjS,GAAQ,CAIpC,eAAegR,EAAMnmB,EAAU,GAAI,CAGjC,MAAO,CAAE,OADM,MAAMmV,EAAK,OAAO,IAAI,YAAanV,CAAO,GAC/B,CAAE,GAAE,IAAI+R,GAAMvC,GAAUuC,CAAE,CAAC,CAAG,CACzD,CAED,OAAOwB,EAAkB4S,CAAI,CAC/B,CCjBA,MAAAkB,GAAe,KAAO,CACpB,UAAW,CACT,MAAO,CACN,EACD,SAAU,CAAE,EACZ,WAAY,CAAE,EACd,IAAK,GACL,QAAS,GACT,IAAK,GACL,UAAW,CACT,6CACA,6CACA,6CACA,4CACD,CACF,EACD,UAAW,CACT,KAAM,CACJ,QAAS,GACT,SAAU,EACX,EACD,WAAY,CACV,QAAS,EACV,CACF,EACD,UAAW,CACT,kFACA,kFACA,kFACA,kFACA,kFACA,6FACA,6FACA,6FACA,4FACD,EACD,OAAQ,CACN,QAAS,EACV,EACD,MAAO,CACL,QAAS,CACP,SAAU,EACV,UAAW,EACZ,EACD,kBAAmB,EACpB,EACD,QAAS,CACP,KAAM,WACP,CACH,GC1CO,SAASC,GAAa,CAAE,KAAAnS,GAAQ,CAIrC,eAAeoS,EAAOvnB,EAAU,GAAI,CAClC,MAAM+mB,EAAS,MAAM5R,EAAK,OAAO,OAAOnV,CAAO,EAC/C,OAAA+mB,EAAO,UAAYS,GAAa,EAAG,UAEnC,MAAMrS,EAAK,OAAO,QAAQ4R,CAAM,EAEzB,CACL,MAAOS,GAAa,EAAG,UAAU,IAAIzV,GAAMvC,GAAUuC,CAAE,CAAC,CACzD,CACF,CAED,OAAOwB,EAAkBgU,CAAK,CAChC,CCjBO,SAAS9J,GAAU,CAAE,KAAAtI,GAAQ,CAIlC,eAAewI,EAAInO,EAAWxP,EAAU,GAAI,CAC1C,GAAI,CAAC6mB,GAAiBrX,CAAS,EAC7B,MAAM,IAAI,MAAM,GAAGA,CAAS,2BAA2B,EAGzD,MAAMuX,EAAS,MAAM5R,EAAK,OAAO,OAAOnV,CAAO,EAC/C,OAAA+mB,EAAO,WAAaA,EAAO,WAAa,CAAA,GAAI,OAAOhV,GAAMA,EAAG,SAAQ,IAAOvC,EAAU,SAAQ,CAAE,EAE/F,MAAM2F,EAAK,OAAO,QAAQ4R,CAAM,EAEzB,CAAE,MAAO,CAACvX,CAAS,CAAG,CAC9B,CAED,OAAO+D,EAAkBoK,CAAE,CAC7B,CCpBO,MAAM8J,EAAa,CAKxB,YAAa,CAAE,KAAAtS,GAAQ,CACrB,KAAK,IAAM+G,GAAU,CAAE,KAAA/G,CAAI,CAAE,EAC7B,KAAK,KAAOiS,GAAW,CAAE,KAAAjS,CAAI,CAAE,EAC/B,KAAK,GAAKsI,GAAS,CAAE,KAAAtI,CAAI,CAAE,EAC3B,KAAK,MAAQ8R,GAAY,CAAE,KAAA9R,CAAI,CAAE,EACjC,KAAK,MAAQmS,GAAY,CAAE,KAAAnS,CAAI,CAAE,CAClC,CACH,CCVO,SAASuS,GAAW,CAAE,QAAA/Q,EAAS,KAAAxB,GAAQ,CAI5C,eAAeqN,EAAK5e,EAAK5D,EAAU,GAAI,CACrC,OAAIA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGNuR,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,CACpC,CAED,OAAOuT,EAAkBiP,CAAG,CAC9B,CCLO,SAASmF,GAAW,CAAE,OAAAvgB,EAAQ,QAAA6P,EAAS,KAAA9B,EAAM,QAAAwB,CAAO,EAAI,CAI7D,eAAeiR,EAAK7R,EAAO/V,EAAU,GAAI,CACvC,MAAMmd,EAAUnd,EAAQ,IAAM,MAAMmV,EAAK,OAAO,SAAQ,EAAK,KAE7D,GAAI,CACF,MAAM0S,EAAa7nB,EAAQ,SAAW,KAAOA,EAAQ,QAAU,EACzD8nB,EAAY9nB,EAAQ,SAAW6nB,IAAe,EAAI,SAAW,OAG7D/c,EAAO,MADE,MAAMmM,EAAQ,UAAUjX,EAAQ,QAAU,UAAU,GACzC,OAAO+V,CAAK,EAChC9Q,EAAQ,MAAMmC,EAAO,SAAS0gB,CAAS,EACvClkB,EAAME,EAAI,OAAO+jB,EAAY5iB,EAAM,KAAM6F,CAAI,EAEnD,aAAMqK,EAAK,OAAO,IAAIvR,EAAKmS,EAAO,CAChC,OAAQ/V,EAAQ,MACxB,CAAO,EAEGA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGT5D,EAAQ,MAAQ,IAClB,MAAMmV,EAAK,KAAK,eAAevR,EAAK,CAClC,OAAQ5D,EAAQ,MAC1B,CAAS,EAGI4D,CACb,QAAc,CACJuZ,GACFA,EAAS,CAEZ,CACF,CAED,OAAO5J,EAAkBqU,CAAG,CAC9B,CCjDO,SAASG,GAAUnkB,EAAK,CAC7B,OAAIA,aAAe,WACVE,EAAI,OAAOF,CAAG,EAGhBE,EAAI,MAAMF,EAAI,SAAQ,CAAE,CACjC,CCHA,MAAMokB,GAAuB,EAMtB,SAASvK,GAAU,CAAE,KAAAtI,GAAQ,CAIlC,eAAiBwI,EAAI6I,EAAMxmB,EAAU,GAAI,CAClC,MAAM,QAAQwmB,CAAI,IACrBA,EAAO,CAACA,CAAI,GAKd,MAAMrJ,EAAU,MAAMhI,EAAK,OAAO,UAAW,EAE7C,GAAI,CACF,MAAQ8S,GACNzB,EACAluB,GAAU4vB,GAAI5vB,EAAQsL,GACb,SAAY,CACjBA,EAAMmkB,GAASnkB,CAAG,EAGlB,MAAM8B,EAAS,CAAE,IAAA9B,CAAK,EAEtB,GAAI,CAGF,GAAI,CAFQ,MAAMuR,EAAK,OAAO,IAAIvR,CAAG,EAGnC,MAAM0L,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,EAGnE,MAAM6F,EAAK,OAAO,OAAOvR,CAAG,CAC7B,OAA2B4I,EAAK,CAC1BxM,EAAQ,QACXwM,EAAI,QAAU,iBAAiB5I,CAAG,KAAK4I,EAAI,OAAO,GAClD9G,EAAO,MAAQ8G,EAElB,CAED,OAAO9G,CACR,CACF,EACDpN,GAAU6vB,GAAS7vB,EAAQ,CAAE,YAAa0vB,EAAoB,CAAE,EAChE1vB,GAAU8vB,GAAO9vB,EAAQ,IAAM,CAAC0H,EAAQ,KAAK,CAC9C,CACP,QAAc,CACRmd,EAAS,CACV,CACF,CAED,OAAO5J,EAAkBoK,CAAE,CAC7B,CCvDO,SAAS8I,GAAY,CAAE,KAAAtR,EAAM,QAAAwB,GAAW,CAI7C,eAAe+P,EAAM9iB,EAAK5D,EAAU,GAAI,CACtC4D,EAAMmkB,GAASnkB,CAAG,EAEd5D,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGb,MAAMmS,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,CAAG,EAEvC,MAAO,CAAE,IAAAA,EAAK,KAAMmS,EAAM,MAAQ,CACnC,CAED,OAAOxC,EAAkBmT,CAAI,CAC/B,CCjBO,MAAM2B,EAAS,CAQpB,YAAa,CAAE,OAAAjhB,EAAQ,QAAA6P,EAAS,QAAAN,EAAS,KAAAxB,CAAI,EAAI,CAC/C,KAAK,IAAMuS,GAAU,CAAE,QAAA/Q,EAAS,KAAAxB,CAAI,CAAE,EACtC,KAAK,IAAMwS,GAAU,CAAE,OAAAvgB,EAAQ,QAAA6P,EAAS,QAAAN,EAAS,KAAAxB,EAAM,EACvD,KAAK,GAAKsI,GAAS,CAAE,KAAAtI,CAAI,CAAE,EAC3B,KAAK,KAAOsR,GAAW,CAAE,QAAA9P,EAAS,KAAAxB,CAAI,CAAE,CACzC,CACH,CCnBO,SAASmT,GAAS3L,EAAK,CAC5B,OAAO,YAAY,OAAOA,CAAG,GAAKA,aAAe,WACnD,CAMO,SAAS4L,GAAQ5L,EAAK,CAC3B,OAAOA,EAAI,cACRA,EAAI,YAAY,OAAS,QAAUA,EAAI,YAAY,OAAS,SAC7D,OAAOA,EAAI,QAAW,UAC1B,CAQO,SAAS6L,GAAc7L,EAAK,CACjC,OAAO,OAAOA,GAAQ,WAAaA,EAAI,MAAQA,EAAI,QACrD,CAMO,MAAM8L,GAAoBnsB,GAC/BA,GAAS,OAAOA,EAAM,WAAc,WChBtC,eAAiBosB,GAAiBpM,EAAO,CACvC,MAAMA,CACR,CAKO,eAAeqM,GAAkBvtB,EAAO,CAE7C,GAAIktB,GAAQltB,CAAK,EACf,OAAOstB,GAAgBxgB,GAAQ9M,CAAK,CAAC,EAGvC,GAAI,OAAOA,GAAU,UAAYA,aAAiB,OAChD,OAAOstB,GAAgBxgB,GAAQ9M,EAAM,SAAU,CAAA,CAAC,EAIlD,GAAImtB,GAAOntB,CAAK,EACd,OAAOwtB,GAASxtB,CAAK,EASvB,GALIqtB,GAAiBrtB,CAAK,IACxBA,EAAQytB,GAAkBztB,CAAK,GAI7B,OAAO,YAAYA,GAAS,OAAO,iBAAiBA,EAAO,CAE7D,MAAM0tB,EAAWC,GAAW3tB,CAAK,EAG3B,CAAE,MAAAkB,EAAO,KAAAgY,CAAM,EAAG,MAAMwU,EAAS,KAAM,EAE7C,GAAIxU,EAEF,OAAOoU,GAAgB,IAAI,WAAW,CAAC,CAAC,EAM1C,GAHAI,EAAS,KAAKxsB,CAAK,EAGf,OAAO,UAAUA,CAAK,EACxB,OAAOosB,GAAgB,WAAW,KAAK,MAAMnP,GAAIuP,CAAQ,CAAC,CAAC,EAI7D,GAAIR,GAAQhsB,CAAK,GAAK,OAAOA,GAAU,UAAYA,aAAiB,OAClE,OAAO4rB,GAAIY,EAAU5gB,EAAO,CAE/B,CAED,MAAMoH,EAAQ,IAAI,MAAM,qBAAqBlU,CAAK,EAAE,EAAG,sBAAsB,CAC/E,CAKA,SAAS8M,GAASmS,EAAO,CACvB,OAAIA,aAAiB,WACZA,EAGL,YAAY,OAAOA,CAAK,EACnB,IAAI,WAAWA,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAGpEA,aAAiB,YACZ,IAAI,WAAWA,CAAK,EAGzB,MAAM,QAAQA,CAAK,EACd,WAAW,KAAKA,CAAK,EAGvBjQ,EAAqBiQ,EAAM,UAAU,CAC9C,CCpEO,eAAiB2O,GAA0B5tB,EAAOutB,EAAkB,CACzE,GAAIvtB,GAAU,KACZ,MAAMkU,EAAQ,IAAI,MAAM,qBAAqBlU,CAAK,EAAE,EAAG,sBAAsB,EAI/E,GAAI,OAAOA,GAAU,UAAYA,aAAiB,OAAQ,CACxD,MAAM6tB,GAAa7tB,EAAM,SAAQ,EAAIutB,CAAgB,EACrD,MACD,CAID,GAAIL,GAAQltB,CAAK,GAAKmtB,GAAOntB,CAAK,EAAG,CACnC,MAAM6tB,GAAa7tB,EAAOutB,CAAgB,EAC1C,MACD,CAQD,GALIF,GAAiBrtB,CAAK,IACxBA,EAAQytB,GAAkBztB,CAAK,GAI7B,OAAO,YAAYA,GAAS,OAAO,iBAAiBA,EAAO,CAC7D,MAAM0tB,EAAWC,GAAW3tB,CAAK,EAG3B,CAAE,MAAAkB,EAAO,KAAAgY,CAAM,EAAG,MAAMwU,EAAS,KAAM,EAE7C,GAAIxU,EAAM,CAER,KAAM,CAAE,QAAS,EAAI,EACrB,MACD,CAOD,GALAwU,EAAS,KAAKxsB,CAAK,EAKf,OAAO,UAAUA,CAAK,GAAKgsB,GAAQhsB,CAAK,GAAK,OAAOA,GAAU,UAAYA,aAAiB,OAAQ,CACrG,MAAM2sB,GAAaH,EAAUH,CAAgB,EAC7C,MACD,CAED,MAAMrZ,EAAQ,IAAI,MAAM,qGAAqG,EAAG,sBAAsB,CACvJ,CAKD,GAAIkZ,GAAaptB,CAAK,EAAG,CACvB,MAAM6tB,GAAa7tB,EAAOutB,CAAgB,EAC1C,MACD,CAED,MAAMrZ,EAAQ,IAAI,MAAM,qCAAuC,OAAOlU,EAAQ,wBAAwB,EAAG,sBAAsB,CACjI,CAMA,eAAe6tB,GAAc7tB,EAAOutB,EAAkB,CAEpD,KAAM,CAAE,KAAAxf,EAAM,KAAA7J,EAAM,MAAAE,EAAO,QAAA0pB,CAAS,EAAG9tB,EAGjCqa,EAAO,CACX,KAAMtM,GAAQ,GACd,KAAM9J,GAAUC,CAAI,EACpB,MAAOC,GAAWC,CAAK,CACxB,EAED,OAAI0pB,EACFzT,EAAK,QAAU,MAAMkT,EAAiBO,CAAO,EACnC/f,IAEVsM,EAAK,QAAU,MAAMkT,EAAiBvtB,CAAK,GAGtCqa,CACT,CC3FO,SAAS8G,GAAgBnhB,EAAO,CACrC,OAAO4tB,GAAyB5tB,EAAOutB,EAAgB,CACzD,CCbO,SAASzM,GAAW,CAAE,OAAAC,GAAU,CAIrC,eAAe2K,EAAKjI,EAAO7e,EAAU,GAAI,CAEvC,MAAM0F,EAAS,MAAM0W,GAAKD,EAAOI,GAAesC,CAAK,EAAG7e,CAAO,CAAC,EAIhE,GAAI0F,GAAU,KACZ,MAAM,MAAM,2DAA2D,EAGzE,OAAOA,CACR,CAED,OAAOohB,CACT,CCDO,MAAMqC,GAAaxtB,GAAK,CAC7B,KAAM,cACN,KAAM,GACN,OAASP,GAAUguB,GAAcC,GAAI,IAAI,QAAQjuB,CAAK,CAAC,CACzD,CAAC,ECrBD,eAAekuB,GAAYjoB,EAAK,CAC9B,OAAQ,MAAM8nB,GAAW,OAAO9nB,CAAG,GAIhC,MAAM,EAAG,CAAC,EAEV,QAAS,CACd,CAUA,MAAMkoB,GAAiB,CACrB,QAAS,QACT,SAAU,WACV,UAAW,GACX,SAAU,GACV,uBAAwB,GACxB,OAAQ7iB,GACR,SAAU,OACV,WAAY,EACZ,SAAU,IAAM,IAAM,CAAE,EACxB,oBAAqB,IACrB,sBAAuB,GACvB,sBAAuB,GACvB,aAAc,OACd,aAAc,OACd,aAAc,OACd,OAAQ,GAGR,WAAY,iBACZ,mBAAoB,IACpB,YAAa,EACb,kBAAmB,GACnB,UAAW,GACX,OAAQ,GACR,QAAS,OACX,WAAE4iB,GACA,aAAc,GACd,eAAgB,CAClB,EAMAE,GAAe,CAACxpB,EAAU,CAAA,IACPqjB,GAAa,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAC5CkG,GAAgBvpB,CAAO,ECrDnCypB,GAAU,MAAOhwB,EAAQiwB,EAAY1pB,IAAY,CAChDA,EAAQ,QACXA,EAAQ,MAAQ2pB,IAGb3pB,EAAQ,SACXA,EAAQ,OAAS0G,IAGf1G,EAAQ,aAAe,SACzBA,EAAQ,WAAa,GAGnBA,EAAQ,QAAU2pB,IAAS3pB,EAAQ,SAAW0G,KAChD1G,EAAQ,WAAa,GAGvB,MAAMgD,EAAY,MAAMhD,EAAQ,OAAO,OAAOvG,CAAM,EAC9CmK,EAAME,EAAI,OAAO9D,EAAQ,WAAYA,EAAQ,MAAM,KAAMgD,CAAS,EAExE,OAAKhD,EAAQ,UACX,MAAM0pB,EAAW,IAAI9lB,EAAKnK,EAAQ,CAChC,OAAQuG,EAAQ,MACtB,CAAK,EAGI4D,CACT,ECzBMgmB,GAAa,MAAOC,EAAMH,EAAY1pB,IAAY,CACtD,MAAM8pB,EAAS,IAAIlqB,EAAO,CACxB,KAAM,YACN,MAAOiqB,EAAK,MACZ,KAAMA,EAAK,IACf,CAAG,EAEKpwB,EAASpB,EAAO0xB,GAAQ,CAAE,KAAMD,EAAO,QAAS,CAAA,CAAE,CAAC,EACnDlmB,EAAM,MAAM6lB,GAAQhwB,EAAQiwB,EAAY1pB,CAAO,EAC/CmJ,EAAO0gB,EAAK,KAElB,MAAO,CACL,IAAAjmB,EACA,KAAAuF,EACA,OAAA2gB,EACA,KAAMrwB,EAAO,MACd,CACH,ECvBA,eAAeuwB,GAAM1xB,EAAQ2xB,EAAQ,CACnC,OAAOA,EAAO,MAAM1Q,GAAIjhB,CAAM,CAAC,CACjC,CCEA,SAAS4xB,GAAU5xB,EAAQ2xB,EAAQjqB,EAAS,CAC1C,OAAOmqB,GAAgB7xB,EAAQ2xB,EAAQjqB,CAAO,CAChD,CAKA,eAAemqB,GAAiB7xB,EAAQ2xB,EAAQjqB,EAAS,CACvD,MAAMoqB,EAAQ,CAAE,EAEhB,gBAAiBC,KAAWC,GAAMhyB,EAAQ0H,EAAQ,kBAAkB,EAClEoqB,EAAM,KAAK,MAAMH,EAAOI,CAAO,CAAC,EAGlC,OAAID,EAAM,OAAS,EACVD,GAAgBC,EAAOH,EAAQjqB,CAAO,EAGxCoqB,EAAM,CAAC,CAChB,CCdA,eAAeG,GAAejyB,EAAQ2xB,EAAQjqB,EAAS,CACrD,MAAMwqB,EAAO,IAAIC,GAAKzqB,EAAQ,WAAW,EACzC,IAAI0qB,EAAY,EACZ7F,EAAW,EAGX8F,EAAUH,EAEd,gBAAiBI,KAASN,GAAMhyB,EAAQ0H,EAAQ,kBAAkB,EAC5D2qB,EAAQ,WACNA,IAAYH,GACdA,EAAK,SAAS,MAAMG,EAAQ,OAAOV,CAAM,CAAC,EAGxCS,GAAaA,EAAY1qB,EAAQ,cAAgB,GACnD6kB,IAGF8F,EAAU,IAAIE,GAAQhG,EAAU7kB,EAAQ,YAAa0qB,CAAS,EAE9DA,KAGFC,EAAQ,OAAOC,CAAK,EAGtB,OAAID,GAAWA,IAAYH,GACzBA,EAAK,SAAS,MAAMG,EAAQ,OAAOV,CAAM,CAAC,EAGrCO,EAAK,OAAOP,CAAM,CAC3B,CAIA,MAAMY,EAAQ,CAMZ,YAAahG,EAAUiG,EAAaJ,EAAY,EAAG,CACjD,KAAK,SAAW7F,EAChB,KAAK,YAAciG,EACnB,KAAK,aAAe,EACpB,KAAK,UAAYJ,EAGjB,KAAK,KAAO,KAAK,KAAO,KAAK,OAAS,CACpC,SAAU,CAAE,EACZ,MAAO,KAAK,aACZ,SAAA7F,EACA,aAAc,KAAK,SAAW,KAAK,cAAgB,KAAK,WACzD,CACF,CAED,QAAU,CACR,GAAI,CAAC,KAAK,KAAK,KACb,MAAO,GAGT,GAAI,KAAK,aAAe,KAAK,UAAY,KAAK,KAAK,YAEjD,YAAK,qBAAqB,KAAK,IAAI,EAE5B,GAIT,MAAMkG,EAAkB,KAAK,YAAY,KAAK,KAAM,KAAK,YAAY,EAErE,OAAIA,GACF,KAAK,qBAAqBA,CAAe,EAElC,IAGF,EACR,CAKD,qBAAsBvN,EAAQ,CAC5B,KAAK,OAASA,EAGd,MAAMwN,EAAW,CACf,SAAU,CAAE,EACZ,MAAOxN,EAAO,MAAQ,EACtB,OAAAA,EACA,SAAU,KAAK,SACf,YAAa,KAAK,MAAMA,EAAO,SAAS,OAAS,KAAK,WAAW,EAAI,KAAK,WAC3E,EAGDA,EAAO,SAAS,KAAKwN,CAAQ,EAE7B,KAAK,aAAeA,EAAS,MAC7B,KAAK,KAAOA,CACb,CAMD,OAAQJ,EAAO,CACb,KAAK,KAAK,KAAOA,CAClB,CAKD,OAAQX,EAAQ,CACd,OAAO,KAAK,QAAQ,KAAK,KAAMA,CAAM,CACtC,CAOD,MAAM,QAASrjB,EAAMqjB,EAAQ,CAE3B,IAAIgB,EAAW,CAAE,EAEjB,OAAIrkB,EAAK,SAAS,SAChBqkB,EAAW,MAAM,QAAQ,IACvBrkB,EAAK,SAEF,OAAOskB,GAASA,EAAM,IAAI,EAE1B,IAAIA,GAAS,KAAK,QAAQA,EAAOjB,CAAM,CAAC,CAC5C,GAGIA,GAAQrjB,EAAK,MAAQ,CAAA,GAAI,OAAOqkB,CAAQ,CAAC,CACjD,CAOD,YAAarkB,EAAM+Z,EAAO,CACxB,MAAMnD,EAAS5W,EAAK,OAEpB,GAAI,GAAC4W,GAAUA,EAAO,QAAU,GAIhC,OAAIA,EAAO,SAAS,SAAWA,EAAO,aAAe,CAACA,EAAO,YAEpD,KAAK,YAAYA,EAAQmD,CAAK,EAGhCnD,CACR,CACH,CAEA,MAAMiN,WAAaI,EAAQ,CAIzB,YAAaC,EAAa,CACxB,MAAM,EAAGA,CAAW,EAEpB,KAAK,KAAK,MAAQ,EAClB,KAAK,aAAe,CACrB,CAKD,SAAUI,EAAO,CACf,KAAK,KAAK,SAAS,KAAKA,CAAK,CAC9B,CAKD,OAAQjB,EAAQ,CACd,OAAOA,GAAQ,KAAK,KAAK,MAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAChE,CACH,CC1LA,eAAiBkB,GAAgB1V,EAAMM,EAAO/V,EAAS,CACrD,cAAevG,KAAUgc,EAAK,QAC5B,KAAM,UAAY,CAChBzV,EAAQ,SAASvG,EAAO,OAAQgc,EAAK,IAAI,EACzC,IAAIqU,EAGJ,MAAM9P,EAAO,CACX,MAAO2P,GACP,WAAY3pB,EAAQ,WACpB,OAAQA,EAAQ,OAChB,SAAUA,EAAQ,QACnB,EAED,OAAIA,EAAQ,WACVga,EAAK,MAAQ3S,GACb2S,EAAK,WAAa,IAElB8P,EAAS,IAAIlqB,EAAO,CAClB,KAAMI,EAAQ,SACd,KAAMvG,CAChB,CAAS,EAEDA,EAAS2xB,EAAa,CACpB,KAAMtB,EAAO,QAAS,EACtB,MAAO,CAAE,CACnB,CAAS,GAGI,CACL,IAAK,MAAML,GAAQhwB,EAAQsc,EAAOiE,CAAI,EACtC,OAAA8P,EACA,KAAMrwB,EAAO,MACd,CACF,CAEL,CCvBA,MAAM4xB,GAAc,CAClB,KAAMC,GACN,SAAUC,GACV,QAASC,EACX,EAOA,eAAiBC,GAAgBhW,EAAMiU,EAAY1pB,EAAS,CAC1D,IAAI0rB,EAAQ,GACRC,EACAR,EAEA,OAAOnrB,EAAQ,gBAAmB,WACpCmrB,EAAiBnrB,EAAQ,eAEzBmrB,EAAiBS,GAGnB,gBAAiB/M,KAASgN,GAAcV,EAAe1V,EAAMiU,EAAY1pB,CAAO,EAAGA,EAAQ,qBAAqB,EAAG,CAGjH,GAFA0rB,IAEIA,IAAU,EAAG,CACfC,EAAW9M,EACX,QACN,MAAe6M,IAAU,GAAKC,IACxB,MAAMA,EACNA,EAAW,MAGb,MAAM9M,CACP,CAEG8M,IACFA,EAAS,OAAS,GAClB,MAAMA,EAEV,CAOA,MAAM1B,GAAS,CAACxU,EAAMiU,EAAY1pB,IAAY,CAI5C,eAAe8rB,EAASC,EAAQ,CAC9B,GAAIA,EAAO,SAAW,GAAKA,EAAO,CAAC,EAAE,QAAU/rB,EAAQ,uBAAwB,CAC7E,MAAMgsB,EAAOD,EAAO,CAAC,EAErB,GAAItW,EAAK,QAAU,QAAaA,EAAK,OAAS,OAAW,CAGvD,IAAIhc,EAAS,MAAMiwB,EAAW,IAAIsC,EAAK,GAAG,EAE1CA,EAAK,OAAS,IAAIpsB,EAAO,CACvB,KAAM,OACN,MAAO6V,EAAK,MACZ,KAAMA,EAAK,KACX,KAAMhc,CAChB,CAAS,EAEDA,EAASpB,EAAO0xB,GAAQ,CAAE,KAAMiC,EAAK,OAAO,QAAS,CAAA,CAAE,CAAC,EAqBxDA,EAAK,IAAM,MAAMvC,GAAQhwB,EAAQiwB,EAAY,CAC3C,GAAG1pB,EACH,MAAO2pB,GACP,OAAQ3pB,EAAQ,OAChB,WAAYA,EAAQ,UAC9B,CAAS,EACDgsB,EAAK,KAAOvyB,EAAO,MACpB,CAED,MAAO,CACL,IAAKuyB,EAAK,IACV,KAAMvW,EAAK,KACX,OAAQuW,EAAK,OACb,KAAMA,EAAK,IACZ,CACF,CAGD,MAAMjf,EAAI,IAAInN,EAAO,CACnB,KAAM,OACN,MAAO6V,EAAK,MACZ,KAAMA,EAAK,IACjB,CAAK,EAEKkQ,EAAQoG,EACX,OAAOC,GACFA,EAAK,IAAI,OAASC,IAAiBD,EAAK,MAIxCA,EAAK,QAAU,CAACA,EAAK,OAAO,MAAQA,EAAK,OAAO,WAC3C,GAGF,GAAQA,EAAK,QAAUA,EAAK,OAAO,MAAQA,EAAK,OAAO,KAAK,OACpE,EACA,IAAKA,GACAA,EAAK,IAAI,OAASC,IAEpBlf,EAAE,aAAaif,EAAK,IAAI,EAEjB,CACL,KAAM,GACN,MAAOA,EAAK,KACZ,KAAMA,EAAK,GACZ,IAGC,CAACA,EAAK,QAAU,CAACA,EAAK,OAAO,KAE/Bjf,EAAE,aAAcif,EAAK,QAAUA,EAAK,OAAO,SAAU,GAAK,CAAC,EAG3Djf,EAAE,aAAaif,EAAK,OAAO,KAAK,MAAM,EAGjC,CACL,KAAM,GACN,MAAOA,EAAK,KACZ,KAAMA,EAAK,GACZ,EACF,EAEGplB,EAAO,CACX,KAAMmG,EAAE,QAAS,EACjB,MAAO4Y,CACR,EACKlsB,EAASpB,EAAO0xB,GAAQnjB,CAAI,CAAC,EAGnC,MAAO,CACL,IAHU,MAAM6iB,GAAQhwB,EAAQiwB,EAAY1pB,CAAO,EAInD,KAAMyV,EAAK,KACX,OAAQ1I,EACR,KAAMtT,EAAO,OAASmN,EAAK,MAAM,OAAO,CAAC0D,EAAK4hB,IAAS5hB,EAAM4hB,EAAK,MAAO,CAAC,CAC3E,CACF,CAED,OAAOJ,CACT,EAKA,SAASK,GAAa1W,EAAMM,EAAO/V,EAAS,CAC1C,MAAMosB,EAAaf,GAAYrrB,EAAQ,QAAQ,EAE/C,GAAI,CAACosB,EACH,MAAM9c,EAAQ,IAAI,MAAM,yCAAyCtP,EAAQ,QAAQ,EAAE,EAAG,kBAAkB,EAG1G,OAAOosB,EAAWX,GAAehW,EAAMM,EAAO/V,CAAO,EAAGiqB,GAAOxU,EAAMM,EAAO/V,CAAO,EAAGA,CAAO,CAC/F,CC5LA,eAAiBqsB,GAAc/zB,EAAQ0H,EAAS,CAC9C,IAAIssB,EAAKC,EAAKC,EAEd,GAAIxsB,EAAQ,cAAgBA,EAAQ,cAAgBA,EAAQ,aAC1DwsB,EAAMxsB,EAAQ,aACdssB,EAAMtsB,EAAQ,aACdusB,EAAMvsB,EAAQ,qBACJA,EAAQ,aAGlBwsB,EAAMxsB,EAAQ,aACdssB,EAAME,EAAM,EACZD,EAAMC,EAAOA,EAAM,MAJnB,OAAM7sB,EAAQ,IAAI,MAAM,sCAAsC,EAAG,4BAA4B,EAQ/F,GAAI2sB,EAAM,GACR,MAAM3sB,EAAQ,IAAI,MAAM,mCAAmC,EAAG,4BAA4B,EAGxF4sB,EAAMD,IACRC,EAAMD,GAGJE,EAAMF,IACRE,EAAMF,GAGR,MAAMG,EAAU,KAAK,MAAM,KAAK,KAAKD,CAAG,CAAC,EAEzC,gBAAiBnS,KAASqS,GAAMp0B,EAAQ,CACtC,IAAKg0B,EACL,IAAKC,EACL,KAAME,EACN,OAAQzsB,EAAQ,OAChB,WAAYA,EAAQ,UACxB,CAAG,EACC,MAAMqa,CAEV,CAQA,eAAiBqS,GAAOp0B,EAAQ0H,EAAS,CACvC,MAAM5B,EAAI,MAAMoE,UAAOxC,EAAQ,KAAMA,EAAQ,IAAKA,EAAQ,IAAKA,EAAQ,MAAM,EACvE2sB,EAAU,IAAIC,GAEpB,gBAAiBvS,KAAS/hB,EAAQ,CAChCq0B,EAAQ,OAAOtS,CAAK,EAEpB,MAAMwS,EAAQzuB,EAAE,YAAYic,CAAK,EAEjC,QAAS,EAAI,EAAG,EAAIwS,EAAM,OAAQ,IAAK,CACrC,MAAMl0B,EAAOk0B,EAAM,CAAC,EACdxrB,EAAMsrB,EAAQ,MAAM,EAAGh0B,CAAI,EACjCg0B,EAAQ,QAAQh0B,CAAI,EAEpB,MAAM0I,CACP,CACF,CAEGsrB,EAAQ,SACV,MAAMA,EAAQ,SAAS,CAAC,EAE5B,CChFA,eAAiBG,GAAkBx0B,EAAQ0H,EAAS,CAClD,IAAImmB,EAAO,IAAIyG,GACXG,EAAgB,EAChBC,EAAU,GACd,MAAMC,EAAejtB,EAAQ,aAE7B,gBAAiBvG,KAAUnB,EAKzB,IAJA6tB,EAAK,OAAO1sB,CAAM,EAElBszB,GAAiBtzB,EAAO,OAEjBszB,GAAiBE,GAKtB,GAJA,MAAM9G,EAAK,MAAM,EAAG8G,CAAY,EAChCD,EAAU,GAGNC,IAAiB9G,EAAK,OACxBA,EAAO,IAAIyG,GACXG,EAAgB,MACX,CACL,MAAMG,EAAQ,IAAIN,GAClBM,EAAM,OAAO/G,EAAK,QAAQ8G,CAAY,CAAC,EACvC9G,EAAO+G,EAGPH,GAAiBE,CAClB,EAID,CAACD,GAAWD,KAEd,MAAM5G,EAAK,SAAS,EAAG4G,CAAa,EAExC,CC7BA,eAAiBI,GAAgB70B,EAAQ,CACvC,gBAAiB4wB,KAAW5wB,EAAQ,CAClC,GAAI4wB,EAAQ,SAAW,OACrB,MAAM5Z,EAAQ,IAAI,MAAM,qBAAqB,EAAG,qBAAqB,EAGvE,GAAI,OAAO4Z,GAAY,UAAYA,aAAmB,OACpD,MAAM9e,EAAqB8e,EAAQ,UAAU,UACpC,MAAM,QAAQA,CAAO,EAC9B,MAAM,WAAW,KAAKA,CAAO,UACpBA,aAAmB,WAC5B,MAAMA,MAEN,OAAM5Z,EAAQ,IAAI,MAAM,qBAAqB,EAAG,qBAAqB,CAExE,CACH,CCPA,SAAS+M,GAAYC,EAAO,CAC1B,OAAO,OAAO,YAAYA,CAC5B,CAMA,SAAS9B,GAAiB8B,EAAO,CAC/B,OAAO,OAAO,iBAAiBA,CACjC,CAMA,SAAS8Q,GAAwBlE,EAAS,CACxC,GAAI,CACF,GAAIA,aAAmB,WACrB,OAAQ,iBAAoB,CAC1B,MAAMA,CACd,IACW,GAAI7M,GAAW6M,CAAO,EAC3B,OAAQ,iBAAoB,CAC1B,MAAQA,CAChB,IACW,GAAI1O,GAAgB0O,CAAO,EAChC,OAAOA,CAEb,MAAU,CACN,MAAM5Z,EAAQ,IAAI,MAAM,qBAAqB,EAAG,qBAAqB,CACtE,CAED,MAAMA,EAAQ,IAAI,MAAM,qBAAqB,EAAG,qBAAqB,CACvE,CAKA,eAAiB8c,GAAY9zB,EAAQoxB,EAAY1pB,EAAS,CACxD,gBAAiB6e,KAASvmB,EAYxB,GAXIumB,EAAM,OACJA,EAAM,KAAK,UAAU,EAAG,CAAC,IAAM,OACjC7e,EAAQ,kBAAoB,IAG9B6e,EAAM,KAAOA,EAAM,KAChB,MAAM,GAAG,EACT,OAAO1V,GAAQA,GAAQA,IAAS,GAAG,EACnC,KAAK,GAAG,GAGT0V,EAAM,QAAS,CAIjB,IAAIwO,EAEA,OAAOrtB,EAAQ,SAAY,WAC7BqtB,EAAUrtB,EAAQ,QACTA,EAAQ,UAAY,QAC7BqtB,EAAUX,GAEVW,EAAUC,GAMZ,IAAIC,EAEA,OAAOvtB,EAAQ,gBAAmB,WACpCutB,EAAiBvtB,EAAQ,eAEzButB,EAAiBJ,GAInB,MAAM1X,EAAO,CACX,KAAMoJ,EAAM,KACZ,MAAOA,EAAM,MACb,KAAMA,EAAM,KACZ,QAASwO,EAAQE,EAAeH,GAAuBvO,EAAM,OAAO,EAAG7e,CAAO,EAAGA,CAAO,CACzF,EAED,KAAM,IAAMmsB,GAAY1W,EAAMiU,EAAY1pB,CAAO,CACvD,SAAe6e,EAAM,KAAM,CAErB,MAAM2O,EAAM,CACV,KAAM3O,EAAM,KACZ,MAAOA,EAAM,MACb,KAAMA,EAAM,IACb,EAED,KAAM,IAAM+K,GAAW4D,EAAK9D,EAAY1pB,CAAO,CACrD,KACM,OAAM,IAAI,MAAM,oDAAoD,CAG1E,CCnGA,IAAAytB,GAAA,KAAU,CAKR,YAAaC,EAAO1tB,EAAS,CAC3B,KAAK,QAAUA,GAAW,CAAE,EAE5B,KAAK,KAAO0tB,EAAM,KAClB,KAAK,IAAMA,EAAM,IACjB,KAAK,KAAOA,EAAM,KAClB,KAAK,MAAQA,EAAM,MACnB,KAAK,KAAOA,EAAM,KAClB,KAAK,OAASA,EAAM,OACpB,KAAK,UAAYA,EAAM,UACvB,KAAK,OAASA,EAAM,OACpB,KAAK,KAAOA,EAAM,KAClB,KAAK,MAAQA,EAAM,MAGnB,KAAK,IAAM,OAEX,KAAK,KAAO,MACb,CAMD,MAAM,IAAK/1B,EAAM2E,EAAO,CAAG,CAM3B,IAAK3E,EAAM,CACT,OAAO,QAAQ,QAAQ,IAAI,CAC5B,CAKD,MAAQ,iBAAmB,CAAG,CAM9B,MAAQ,MAAO+xB,EAAY,CAAG,CAChC,ECrDA,MAAMiE,WAAgBC,EAAI,CAKxB,YAAaF,EAAO1tB,EAAS,CAC3B,MAAM0tB,EAAO1tB,CAAO,EAGpB,KAAK,UAAY,CAAE,CACpB,CAMD,MAAM,IAAKrI,EAAM2E,EAAO,CACtB,KAAK,IAAM,OACX,KAAK,KAAO,OAEZ,KAAK,UAAU3E,CAAI,EAAI2E,CACxB,CAKD,IAAK3E,EAAM,CACT,OAAO,QAAQ,QAAQ,KAAK,UAAUA,CAAI,CAAC,CAC5C,CAED,YAAc,CACZ,OAAO,OAAO,KAAK,KAAK,SAAS,EAAE,MACpC,CAED,qBAAuB,CACrB,OAAO,KAAK,WAAY,CACzB,CAED,WAAa,CACX,OAAO,KAAK,UAAU,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC,CAAC,CACrD,CAED,MAAQ,iBAAmB,CACzB,MAAMsoB,EAAO,OAAO,KAAK,KAAK,SAAS,EAEvC,QAASnoB,EAAI,EAAGA,EAAImoB,EAAK,OAAQnoB,IAAK,CACpC,MAAMke,EAAMiK,EAAKnoB,CAAC,EAElB,KAAM,CACJ,IAAKke,EACL,MAAO,KAAK,UAAUA,CAAG,CAC1B,CACF,CACF,CAMD,MAAQ,MAAOD,EAAO,CACpB,MAAMkV,EAAW,OAAO,KAAK,KAAK,SAAS,EACrCtF,EAAQ,CAAE,EAEhB,QAAS7tB,EAAI,EAAGA,EAAImzB,EAAS,OAAQnzB,IAAK,CACxC,IAAIozB,EAAQ,KAAK,UAAUD,EAASnzB,CAAC,CAAC,EAEtC,GAAIozB,aAAiB0C,GACnB,gBAAiB/O,KAASqM,EAAM,MAAMnV,CAAK,EACzCmV,EAAQrM,EAER,MAAMqM,EAINA,EAAM,MAAQ,MAAQA,EAAM,KAC9BvF,EAAM,KAAK,CACT,KAAMsF,EAASnzB,CAAC,EAChB,MAAOozB,EAAM,KACb,KAAMA,EAAM,GACtB,CAAS,CAEJ,CAED,MAAMpB,EAAS,IAAIlqB,EAAO,CACxB,KAAM,YACN,MAAO,KAAK,MACZ,KAAM,KAAK,IACjB,CAAK,EAGKgH,EAAO,CAAE,KAAMkjB,EAAO,QAAS,EAAE,MAAOnE,CAAO,EAC/ClsB,EAASpB,EAAO0xB,GAAQnjB,CAAI,CAAC,EAC7BhD,EAAM,MAAM6lB,GAAQhwB,EAAQsc,EAAO,KAAK,OAAO,EAC/Cpd,EAAOc,EAAO,OAASmN,EAAK,MAAM,OAKtC,CAAC0D,EAAK4hB,IAAS5hB,GAAO4hB,EAAK,OAAS,KAAO,EAAIA,EAAK,OACpD,CAAC,EAEH,KAAK,IAAMtoB,EACX,KAAK,KAAOjL,EAEZ,KAAM,CACJ,IAAAiL,EACA,OAAAkmB,EACA,KAAM,KAAK,KACX,KAAAnxB,CACD,CACF,CACH,QC7GA,cAAyBi1B,EAAI,CAK3B,YAAaF,EAAO1tB,EAAS,CAC3B,MAAM0tB,EAAO1tB,CAAO,EAGpB,KAAK,QAAU6tB,GAAW,CACxB,OAAQ7tB,EAAQ,WAChB,KAAMA,EAAQ,cACpB,CAAK,CACF,CAMD,MAAM,IAAKrI,EAAM2E,EAAO,CACtB,MAAM,KAAK,QAAQ,IAAI3E,EAAM2E,CAAK,CACnC,CAKD,IAAK3E,EAAM,CACT,OAAO,KAAK,QAAQ,IAAIA,CAAI,CAC7B,CAED,YAAc,CACZ,OAAO,KAAK,QAAQ,UAAW,CAChC,CAED,qBAAuB,CACrB,OAAO,KAAK,QAAQ,cAAe,CACpC,CAED,WAAa,CACX,OAAO,KAAK,QAAQ,UAAW,CAChC,CAED,MAAQ,iBAAmB,CACzB,eAAiB,CAAE,IAAAqe,EAAK,MAAA1Z,CAAK,IAAM,KAAK,QAAQ,iBAC9C,KAAM,CACJ,IAAA0Z,EACA,MAAO1Z,CACR,CAEJ,CAMD,MAAQ,MAAOotB,EAAY,CACzB,gBAAiB7K,KAASiP,GAAM,KAAK,QAASpE,EAAY,KAAM,KAAK,OAAO,EAC1E,KAAM,CACJ,GAAG7K,EACH,KAAM,KAAK,IACZ,CAEJ,CACH,EAWA,eAAiBiP,GAAOC,EAAQrE,EAAYsE,EAAWhuB,EAAS,CAC9D,MAAMirB,EAAW8C,EAAO,UAClBpI,EAAQ,CAAE,EAChB,IAAIsI,EAAe,EAEnB,QAASn2B,EAAI,EAAGA,EAAImzB,EAAS,OAAQnzB,IAAK,CACxC,MAAMozB,EAAQD,EAAS,IAAInzB,CAAC,EAE5B,GAAI,CAACozB,EACH,SAGF,MAAMgD,EAAcp2B,EAAE,SAAS,EAAE,EAAE,cAAc,SAAS,EAAG,GAAG,EAEhE,GAAIozB,aAAiBiD,GAAQ,CAC3B,IAAIC,EAEJ,gBAAiBC,KAAY,MAAMP,GAAM5C,EAAOxB,EAAY,KAAM1pB,CAAO,EACvEouB,EAAQC,EAGV,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,sDAAsD,EAGxEzI,EAAM,KAAK,CACT,KAAMuI,EACN,MAAOE,EAAM,KACb,KAAMA,EAAM,GACpB,CAAO,EACDH,GAAgBG,EAAM,IACvB,SAAU,OAAOlD,EAAM,MAAM,OAAU,WAAY,CAClD,MAAMsC,EAAMtC,EAAM,MAClB,IAAIoD,EAEJ,gBAAiBzP,KAAS2O,EAAI,MAAM9D,CAAU,EAC5C4E,EAAazP,EAEb,MAAMyP,EAGR,MAAMC,EAAQL,EAAchD,EAAM,IAClCvF,EAAM,KAAK,CACT,KAAM4I,EACN,MAAOD,EAAW,KAClB,KAAMA,EAAW,GACzB,CAAO,EAEDL,GAAgBK,EAAW,IACjC,KAAW,CACL,MAAMhyB,EAAQ4uB,EAAM,MAEpB,GAAI,CAAC5uB,EAAM,IACT,SAGF,MAAMiyB,EAAQL,EAAchD,EAAM,IAC5BvyB,EAAO2D,EAAM,KAEnBqpB,EAAM,KAAK,CACT,KAAM4I,EACN,MAAO51B,EACP,KAAM2D,EAAM,GACpB,CAAO,EACD2xB,GAAgBt1B,CACjB,CACF,CAID,MAAM4D,EAAO,WAAW,KAAK0uB,EAAS,SAAQ,EAAG,SAAS,EACpDuC,EAAM,IAAI5tB,EAAO,CACrB,KAAM,yBACN,KAAArD,EACA,OAAQwxB,EAAO,UAAW,EAC1B,SAAU/tB,EAAQ,aAClB,MAAOguB,GAAaA,EAAU,MAC9B,KAAMA,GAAaA,EAAU,IACjC,CAAG,EAEKpnB,EAAO,CACX,KAAM4mB,EAAI,QAAS,EACnB,MAAO7H,CACR,EACKlsB,EAASpB,EAAO0xB,GAAQnjB,CAAI,CAAC,EAC7BhD,EAAM,MAAM6lB,GAAQhwB,EAAQiwB,EAAY1pB,CAAO,EAC/CrH,EAAOc,EAAO,OAASw0B,EAE7B,KAAM,CACJ,IAAArqB,EACA,OAAQ4pB,EACR,KAAA70B,CACD,CACH,CCzKA,eAAe61B,GAAatD,EAAOsC,EAAKiB,EAAWzuB,EAAS,CAC1D,IAAI0uB,EAASlB,EAETA,aAAeG,IAAWH,EAAI,oBAAmB,GAAMiB,IACzDC,EAAS,MAAMC,GAAenB,EAAKxtB,CAAO,GAG5C,MAAMwd,EAASkR,EAAO,OAEtB,GAAIlR,EAAQ,CACV,GAAIkR,IAAWlB,EAAK,CAKlB,GAJItC,IACFA,EAAM,OAASwD,GAGb,CAACA,EAAO,UACV,MAAM,IAAI,MAAM,qBAAqB,EAGvC,MAAMlR,EAAO,IAAIkR,EAAO,UAAWA,CAAM,CAC1C,CAED,OAAOF,GAAYE,EAAQlR,EAAQiR,EAAWzuB,CAAO,CACtD,CAGD,OAAO0uB,CACT,CAMA,eAAeC,GAAgBC,EAAQ5uB,EAAS,CAC9C,MAAM0uB,EAAS,IAAIG,GAAW,CAC5B,KAAMD,EAAO,KACb,IAAK,GACL,OAAQA,EAAO,OACf,UAAWA,EAAO,UAClB,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,KAAM,GACN,MAAOA,EAAO,MACd,KAAMA,EAAO,IACd,EAAE5uB,CAAO,EAEV,eAAiB,CAAE,IAAAgW,EAAK,MAAAkV,CAAO,IAAI0D,EAAO,gBAAe,EACvD,MAAMF,EAAO,IAAI1Y,EAAKkV,CAAK,EAG7B,OAAOwD,CACT,CClEA,MAAMI,GAAmB,CAAC3lB,EAAO,MAEvBA,EACL,KAAM,EACN,MAAM,iBAAiB,GAAK,CAAE,GAC9B,OAAO,OAAO,ECanB,eAAe4lB,GAAWC,EAAMC,EAAMjvB,EAAS,CAC7C,MAAMkvB,EAAYJ,GAAiBE,EAAK,MAAQ,EAAE,EAC5CG,EAAYD,EAAU,OAAS,EACrC,IAAI1R,EAASyR,EACTG,EAAc,GAElB,QAASt3B,EAAI,EAAGA,EAAIo3B,EAAU,OAAQp3B,IAAK,CACzC,MAAMu3B,EAAWH,EAAUp3B,CAAC,EAE5Bs3B,GAAe,GAAGA,EAAc,IAAM,EAAE,GAAGC,CAAQ,GAEnD,MAAMjT,EAAQtkB,IAAMq3B,EAKpB,GAJA3R,EAAO,MAAQ,GACfA,EAAO,IAAM,OACbA,EAAO,KAAO,OAEVpB,EACF,MAAMoB,EAAO,IAAI6R,EAAUL,CAAI,EAC/BC,EAAO,MAAMT,GAAY,KAAMhR,EAAQxd,EAAQ,oBAAqBA,CAAO,MACtE,CACL,IAAIwtB,EAAM,MAAMhQ,EAAO,IAAI6R,CAAQ,GAE/B,CAAC7B,GAAO,EAAEA,aAAeI,OAC3BJ,EAAM,IAAIG,GAAQ,CAChB,KAAM,GACN,IAAK,GACL,OAAQnQ,EACR,UAAW6R,EACX,KAAMD,EACN,MAAO,GACP,KAAM,GACN,MAAO5B,GAAOA,EAAI,QAAUA,EAAI,OAAO,MACvC,KAAMA,GAAOA,EAAI,QAAUA,EAAI,OAAO,IACvC,EAAExtB,CAAO,GAGZ,MAAMwd,EAAO,IAAI6R,EAAU7B,CAAG,EAE9BhQ,EAASgQ,CACV,CACF,CAED,OAAOyB,CACT,CAMA,eAAiBK,GAAeL,EAAMvF,EAAY,CAChD,GAAI,EAAEuF,aAAgBrB,IAAM,CACtBqB,GAAQA,EAAK,QAAUA,EAAK,OAAO,gBACrC,MAAMA,GAGR,MACD,CAED,MAAQA,EAAK,MAAMvF,CAAU,CAC/B,CAKA,eAAiB6F,GAAaj3B,EAAQyd,EAAO/V,EAAS,CAEpD,IAAIivB,EAAO,IAAItB,GAAQ,CACrB,KAAM,GACN,IAAK,GACL,KAAM,GACN,MAAO,GACP,KAAM,EACP,EAAE3tB,CAAO,EAEV,gBAAiB6e,KAASvmB,EACnBumB,IAILoQ,EAAO,MAAMF,GAAUlQ,EAAOoQ,EAAMjvB,CAAO,GAEvC,CAAC6e,EAAM,QAAU,CAACA,EAAM,OAAO,iBACjC,MAAMA,IAIV,GAAI7e,EAAQ,kBACV,MAAQsvB,GAAcL,EAAMlZ,CAAK,MAEjC,iBAAiByZ,KAAaP,EAAK,kBAC5BO,IAIL,MAAQF,GAAcE,EAAU,MAAOzZ,CAAK,EAGlD,CCtFO,eAAiB0Z,GAAUn3B,EAAQoxB,EAAY1pB,EAAU,CAAA,EAAI,CAClE,MAAMga,EAAOuP,GAAevpB,CAAO,EAEnC,IAAIosB,EAEA,OAAOpsB,EAAQ,YAAe,WAChCosB,EAAapsB,EAAQ,WAErBosB,EAAasD,GAGf,IAAIH,EAEA,OAAOvvB,EAAQ,aAAgB,WACjCuvB,EAAcvvB,EAAQ,YAEtBuvB,EAAcI,GAIhB,IAAIC,EAEA,OAAO,iBAAiBt3B,GAAU,OAAO,YAAYA,EAEvDs3B,EAAat3B,EAGbs3B,EAAa,CAACt3B,CAAM,EAGtB,gBAAiBumB,KAAS0Q,EAAY1D,GAAcO,EAAWwD,EAAYlG,EAAY1P,CAAI,EAAGA,EAAK,qBAAqB,EAAG0P,EAAY1P,CAAI,EACzI,KAAM,CACJ,IAAK6E,EAAM,IACX,KAAMA,EAAM,KACZ,OAAQA,EAAM,OACd,KAAMA,EAAM,IACb,CAEL,CCxCO,eAAiBgR,GAA4Bz0B,EAAOutB,EAAkB,CAM3E,GAAI,OAAOvtB,GAAU,UAAYA,aAAiB,QAAUktB,GAAQltB,CAAK,GAAKmtB,GAAOntB,CAAK,GAAKA,EAAM,eACnG,MAAMkU,EAAQ,IAAI,MAAM,kGAAkG,EAAG,sBAAsB,EASrJ,GALImZ,GAAiBrtB,CAAK,IACxBA,EAAQytB,GAAkBztB,CAAK,GAI7B,OAAO,YAAYA,GAAS,OAAO,iBAAiBA,EAAO,CAC7D,MAAM0tB,EAAWC,GAAW3tB,CAAK,EAC3B,CAAE,MAAAkB,EAAO,KAAAgY,CAAM,EAAG,MAAMwU,EAAS,KAAM,EAE7C,GAAIxU,EAAM,CAER,MAAQ,CAAE,EACV,MACD,CAMD,GAJAwU,EAAS,KAAKxsB,CAAK,EAIf,OAAO,UAAUA,CAAK,EACxB,MAAMgT,EAAQ,IAAI,MAAM,kGAAkG,EAAG,sBAAsB,EAKrJ,GAAIhT,EAAM,eAAgB,CAExB,MAAQ4rB,GAAIY,EAA0CxsB,GAAU2sB,GAAa,CAAE,QAAS3sB,GAASqsB,CAAgB,CAAC,EAClH,MACD,CAED,GAAIL,GAAQhsB,CAAK,EAAG,CAElB,MAAM2sB,GAAa,CAAE,QAASH,CAAQ,EAAIH,CAAgB,EAC1D,MACD,CAMD,GAAIH,GAAalsB,CAAK,GAAKA,EAAM,OAAO,QAAQ,GAAKA,EAAM,OAAO,aAAa,GAAKmsB,GAAiBnsB,CAAK,GAAKisB,GAAOjsB,CAAK,EAAG,CAC5H,MAAQ4rB,GAAIY,EAA0CxsB,GAAU2sB,GAAa3sB,EAAOqsB,CAAgB,CAAC,EACrG,MACD,CACF,CAKD,MAAIH,GAAaptB,CAAK,EACdkU,EAAQ,IAAI,MAAM,kGAAkG,EAAG,sBAAsB,EAG/IA,EAAQ,IAAI,MAAM,qBAAuB,OAAOlU,CAAK,EAAG,sBAAsB,CACtF,CAMA,eAAe6tB,GAAc7tB,EAAOutB,EAAkB,CAEpD,KAAM,CAAE,KAAAxf,EAAM,KAAA7J,EAAM,MAAAE,EAAO,QAAA0pB,CAAS,EAAG9tB,EAGjCqa,EAAO,CACX,KAAMtM,GAAQ,GACd,KAAM9J,GAAUC,CAAI,EACpB,MAAOC,GAAWC,CAAK,CACxB,EAED,OAAI0pB,EACFzT,EAAK,QAAU,MAAMkT,EAAiBO,CAAO,EACnC/f,IAEVsM,EAAK,QAAU,MAAMkT,EAAiBvtB,CAAK,GAGtCqa,CACT,CCpGO,SAAS8G,GAAgBnhB,EAAO,CACrC,OAAOy0B,GAA2Bz0B,EAAOutB,EAAgB,CAC3D,CCIO,MAAMmH,GAAsBzC,GAAY,CAC7C,GAAKA,EAIE,GAAIA,EAAQ,WAAW,OAAO,EAAG,CACtC,MAAM0C,EAAU1C,EAAQ,MAAM,GAAG,EAAE,CAAC,EAC9B10B,EAAO,SAASo3B,CAAO,EAC7B,GAAI,MAAMp3B,CAAI,EACZ,MAAM,IAAI,MAAM,2CAA2C,EAE7D,MAAO,CACL,QAAS,QACT,aAAcA,CACf,CACF,KAAM,IAAI00B,EAAQ,WAAW,OAAO,EACnC,MAAO,CACL,QAAS,QACT,GAAG2C,GAAiB3C,CAAO,CAC5B,EAED,MAAM,IAAI,MAAM,gCAAgCA,CAAO,EAAE,MAnBzD,OAAO,CACL,QAAS,OACV,CAmBL,EAiBa2C,GAAoB3C,GAAY,CAC3C,MAAMrtB,EAAU,CAAE,EACZyL,EAAQ4hB,EAAQ,MAAM,GAAG,EAC/B,OAAQ5hB,EAAM,OAAM,CAClB,IAAK,GACHzL,EAAQ,aAAe,OACvB,MACF,IAAK,GACHA,EAAQ,aAAeiwB,GAAexkB,EAAM,CAAC,EAAG,KAAK,EACrD,MACF,IAAK,GACHzL,EAAQ,aAAeiwB,GAAexkB,EAAM,CAAC,EAAG,KAAK,EACrDzL,EAAQ,aAAeiwB,GAAexkB,EAAM,CAAC,EAAG,KAAK,EACrDzL,EAAQ,aAAeiwB,GAAexkB,EAAM,CAAC,EAAG,KAAK,EACrD,MACF,QACE,MAAM,IAAI,MAAM,uFAAuF,CAC1G,CAED,OAAOzL,CACT,EAQaiwB,GAAiB,CAACj3B,EAAKrB,IAAS,CAC3C,MAAMgB,EAAO,SAASK,CAAG,EACzB,GAAI,MAAML,CAAI,EACZ,MAAM,IAAI,MAAM,qBAAqBhB,CAAI,qBAAqB,EAGhE,OAAOgB,CACT,EC7FM0qB,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAuBtD,SAASxG,GAAc,CAAE,KAAA3H,EAAM,QAAAwB,EAAS,QAAAM,EAAS,QAAAjX,CAAO,EAAI,CACjE,MAAMkwB,EAAoBlwB,GAAWA,EAAQ,SAK7C,eAAiBmc,EAAQ7jB,EAAQ0H,EAAU,GAAI,CAC7C,MAAMga,EAAOqJ,GAAa,CACxB,oBAAqB6M,EAAoB,IAAO,IAChD,SAAU,UACX,EAAElwB,EAAS,CACV,GAAG8vB,GAAmB9vB,EAAQ,OAAO,CAC3C,CAAK,EAGGga,EAAK,SAAWA,EAAK,UAAY,YAAcA,EAAK,aAAe,IACrEA,EAAK,WAAa,GAGhBA,EAAK,UACPA,EAAK,SAAW,WAGdA,EAAK,WAAa,YACpBA,EAAK,SAAW,MAChBA,EAAK,uBAAyB,IAG5BA,EAAK,WAAa,GAAKA,EAAK,YAAc,SAG5CA,EAAK,UAAY,IAGfA,EAAK,UAAY,QAAaA,EAAK,YAAc,SAGnDA,EAAK,UAAY,IAGnB,OAAOA,EAAK,QAGZ,MAAMmW,EAAS,CAAE,EAEjB,GAAInW,EAAK,SAAU,CACjB,MAAMoW,EAAOpW,EAAK,SAMlBA,EAAK,SAAW,CAACpf,EAAOuO,IAAS,CAC1BgnB,EAAOhnB,CAAI,IACdgnB,EAAOhnB,CAAI,EAAI,GAGjBgnB,EAAOhnB,CAAI,GAAKvO,EAEhBw1B,EAAKD,EAAOhnB,CAAI,EAAGA,CAAI,CACxB,CACF,CAGD,IAAIknB,EAEArW,EAAK,SAAW,OAClBqW,EAAS,MAAMpZ,EAAQ,UAAU+C,EAAK,OAAO,GAG/C,MAAMyC,EAAWwL,GACf1L,GAAejkB,CAAM,EAIrBA,GAAUm3B,GAASn3B,EAAQ6c,EAAK,OAAQ,CACtC,GAAG6E,EACH,OAAAqW,EACA,IAAK,EACb,CAAO,EACDC,GAActW,CAAI,EAClBuW,GAAY5Z,EAASqD,CAAI,EACzBwW,GAAQrb,EAAM6E,CAAI,CACnB,EAEKyW,EAAc,MAAMtb,EAAK,OAAO,SAAU,EAEhD,GAAI,CACF,gBAAiBub,KAASjU,EAAU,CAClC,MAAMtT,EAAOunB,EAAM,MAAQA,EAAM,IAAI,SAAU,EAG/C,OAAOP,EAAOhnB,CAAI,EAElB,KAAM,CACJ,GAAGunB,EACH,KAAAvnB,CACD,CACF,CACP,QAAc,CACRsnB,EAAa,CACd,CACF,CAED,OAAOld,EAAkB4I,CAAM,CACjC,CAKA,SAASmU,GAAetW,EAAM,CAI5B,eAAiBsW,EAAeh4B,EAAQ,CACtC,gBAAiBmd,KAAQnd,EAAQ,CAC/B,IAAIsL,EAAM6R,EAAK,IAEXuE,EAAK,aAAe,IACtBpW,EAAMA,EAAI,KAAM,GAGlB,IAAIuF,EAAOsM,EAAK,KAAOA,EAAK,KAAO7R,EAAI,SAAU,EAE7CoW,EAAK,mBAAqB,CAACvE,EAAK,OAClCtM,EAAO,IAGT,KAAM,CACJ,KAAAA,EACA,IAAKvF,EACL,KAAM6R,EAAK,KACX,KAAMA,EAAK,QAAUA,EAAK,OAAO,KACjC,MAAOA,EAAK,QAAUA,EAAK,OAAO,KACnC,CACF,CACF,CAED,OAAO6a,CACT,CAMA,SAASC,GAAa5Z,EAASqD,EAAM,CAInC,eAAiB2W,EAAkBr4B,EAAQ,CACzC,gBAAiBmd,KAAQnd,GACJ,CAACmd,EAAK,MAAQuE,EAAK,kBAClCvE,EAAK,OAAS,GACd,CAACA,EAAK,KAAK,SAAS,GAAG,IAES,CAACuE,EAAK,UAAYA,EAAK,UAAY,IAGrErD,EAAQlB,EAAK,GAAG,EAGlB,MAAMA,CAET,CAED,OAAOkb,CACT,CAMA,SAASH,GAASrb,EAAM6E,EAAM,CAI5B,eAAiB4W,EAAct4B,EAAQ,CACrC,gBAAiBmd,KAAQnd,EAAQ,CAG/B,MAAMu4B,EAAY,EAAEpb,EAAK,MAAQA,EAAK,KAAK,SAAS,GAAG,IACpCuE,EAAK,KAAO,KAAO,GAAOA,EAAK,MAAQ6W,GAAa,CAAC7W,EAAK,UAG3E,MAAM7E,EAAK,KAAK,eAAeM,EAAK,GAAG,EAGzC,MAAMA,CACP,CACF,CAED,OAAOmb,CACT,CC5MA,MAAME,GAAS,eAAgBzvB,EAAK,CAClC,OAAQ,MAAM8nB,GAAW,OAAO9nB,CAAG,GAIhC,MAAM,EAAG,CAAC,EAEV,QAAS,CACd,EAOM0vB,GAAuB,CAACpL,EAAOoI,EAAQiD,IACpC,QAAQ,IACbrL,EAAM,IAAIriB,GAAQ,CAChB,GAAIA,EAAK,MAAQ,KAEf,MAAM,IAAI,MAAM,gCAAgC,EAElD,GAAIA,EAAK,KAAK,SAAW,EAAG,CAC1B,MAAM2tB,EAAM,SAAS3tB,EAAK,KAAM,EAAE,EAElC,OAAOyqB,EAAO,aAAakD,EAAK,IAAI9C,GAAO,CACzC,KAAM6C,EAAW,SAAS,KAC1B,KAAMA,EAAW,SAAS,IACpC,EAAWjD,EAAQkD,CAAG,CAAC,CAChB,CAED,OAAOD,EAAW,IAAI1tB,EAAK,KAAK,UAAU,CAAC,EAAG,EAAI,CACxD,CAAK,CACF,EAMG4tB,GAAYC,GACTA,EACJ,SAAS,EAAE,EACX,YAAa,EACb,SAAS,EAAG,GAAG,EACf,UAAU,EAAG,CAAC,EAMbC,GAAgBD,GAAa,CACjC,IAAIpD,EAASoD,EAAS,OACtB,MAAMhoB,EAAO,CAAE,EAEf,KAAO4kB,EAAO,SACZ5kB,EAAK,KAAK4kB,CAAM,EAEhBA,EAASA,EAAO,QAGlB,OAAA5kB,EAAK,KAAK4kB,CAAM,EAET5kB,EAAK,QAAS,CACvB,EAYMkoB,GAAe,MAAOzqB,EAAMjP,EAAM+xB,EAAY4H,EAAStxB,IAAY,CACvE,GAAI,CAACsxB,EAAS,CACZ,MAAMN,EAAanD,GAAW,CAC5B,OAAAiD,EACN,CAAK,EAEDQ,EAAU,CACR,WAAAN,EACA,UAAW,EACX,WAAYA,CACb,CACF,CAED,MAAMD,GAAqBnqB,EAAK,MAAO0qB,EAAQ,WAAYA,EAAQ,UAAU,EAE7E,MAAMH,EAAW,MAAMG,EAAQ,WAAW,qBAAqB35B,CAAI,EACnE,IAAI+C,EAASw2B,GAASC,EAAS,GAAG,EAClC,MAAMI,EAAaH,GAAaD,CAAQ,EAEpCI,EAAW,OAASD,EAAQ,YAC9BA,EAAQ,WAAaC,EAAWD,EAAQ,SAAS,EAEjD52B,EAASw2B,GAASI,EAAQ,WAAW,YAAY,GAGnD,MAAMhuB,EAAOsD,EAAK,MAAM,KAAKtD,GAAQ,CACnC,GAAIA,EAAK,MAAQ,KACf,MAAO,GAGT,MAAMkuB,EAAcluB,EAAK,KAAK,UAAU,EAAG,CAAC,EACtCmuB,EAAYnuB,EAAK,KAAK,UAAU,CAAC,EAOvC,MALI,EAAAkuB,IAAgB92B,GAKhB+2B,GAAaA,IAAc95B,EAMnC,CAAG,EAED,GAAI,CAAC2L,EACH,OAAO,KAGT,GAAIA,EAAK,MAAQ,MAAQA,EAAK,KAAK,UAAU,CAAC,IAAM3L,EAClD,OAAO2L,EAAK,KAGdguB,EAAQ,YAER,MAAMvb,EAAQ,MAAM2T,EAAW,IAAIpmB,EAAK,KAAMtD,CAAO,EACrD,OAAA4G,EAAOrN,GAAOwc,CAAK,EAEZsb,GAAazqB,EAAMjP,EAAM+xB,EAAY4H,EAAStxB,CAAO,CAC9D,EClJA,SAAS0xB,GAAsB3b,EAAO4b,EAAYC,EAAgBC,EAAc,CAC9E,MAAMC,EAAc/b,EAAM,OACpBgc,EAAWJ,EAAaG,EAE9B,OAAIF,GAAkBG,GAAYF,EAAeF,EAGxC,IAAI,WAAW,CAAC,GAGrBE,GAAgBF,GAAcE,EAAeE,IAE/Chc,EAAQA,EAAM,SAAS,EAAG8b,EAAeF,CAAU,GAGjDC,GAAkBD,GAAcC,EAAiBG,IAEnDhc,EAAQA,EAAM,SAAS6b,EAAiBD,CAAU,GAG7C5b,EACT,CCpBA,MAAMic,GAA0B,CAACr5B,EAAMqI,EAAQxI,IAAW,CAKxD,GAJKwI,IACHA,EAAS,GAGPA,EAAS,EACX,MAAMsO,EAAQ,IAAI,MAAM,2CAA2C,EAAG,oBAAoB,EAG5F,GAAItO,EAASrI,EACX,MAAM2W,EAAQ,IAAI,MAAM,wCAAwC,EAAG,oBAAoB,EAOzF,GAJI,CAAC9W,GAAUA,IAAW,IACxBA,EAASG,EAAOqI,GAGdxI,EAAS,EACX,MAAM8W,EAAQ,IAAI,MAAM,2CAA2C,EAAG,oBAAoB,EAG5F,OAAItO,EAASxI,EAASG,IACpBH,EAASG,EAAOqI,GAGX,CACL,OAAAA,EACA,OAAAxI,CACD,CACH,ECNA,eAAey5B,GAASvI,EAAY9iB,EAAMsrB,EAAOC,EAAgBhe,EAAOjY,EAAKk2B,EAAWpyB,EAAS,CAE/F,GAAI4G,aAAgB,WAAY,CAC9BsrB,EAAM,KAAKR,GAAqB9qB,EAAMurB,EAAgBhe,EAAOjY,CAAG,CAAC,EAEjE,MACD,CAED,GAAI0K,EAAK,MAAQ,KACf,MAAM0I,EAAQ,IAAI,MAAM,mBAAmB,EAAG,gBAAgB,EAIhE,IAAImG,EAEJ,GAAI,CACFA,EAAO7V,EAAO,UAAUgH,EAAK,IAAI,CAClC,OAA2B4F,EAAK,CAC/B,MAAM8C,EAAQ9C,EAAK,gBAAgB,CACpC,CAGD,GAAIiJ,EAAK,MAAQ,KAAM,CACrB,MAAMlZ,EAAOkZ,EAAK,KACZpU,EAAMqwB,GAAqBn1B,EAAM41B,EAAgBhe,EAAOjY,CAAG,EAEjEg2B,EAAM,KAAK7wB,CAAG,EAEd8wB,GAAkB9wB,EAAI,UACvB,CAGD,MAAMgxB,EAAW,CAAE,EAEnB,QAASv6B,EAAI,EAAGA,EAAI8O,EAAK,MAAM,OAAQ9O,IAAK,CAC1C,MAAMw6B,EAAY1rB,EAAK,MAAM9O,CAAC,EACxBy6B,EAAaJ,EACbK,EAAWD,EAAa9c,EAAK,WAAW3d,CAAC,EAa/C,IAXKqc,GAASoe,GAAcpe,EAAQqe,GAC/Bt2B,GAAOq2B,GAAcr2B,GAAOs2B,GAC5Bre,EAAQoe,GAAcr2B,EAAMs2B,IAC/BH,EAAS,KAAK,CACZ,KAAMC,EACN,WAAYH,CACpB,CAAO,EAGHA,EAAiBK,EAEbL,EAAiBj2B,EACnB,KAEH,CAED,MAAM+rB,GACJoK,EACC/5B,GAAW4vB,GAAI5vB,EAASm6B,GAChB,SAAY,CACjB,MAAM1c,EAAQ,MAAM2T,EAAW,IAAI+I,EAAG,KAAK,KAAM,CAC/C,OAAQzyB,EAAQ,MAC1B,CAAS,EAED,MAAO,CACL,GAAGyyB,EACH,MAAA1c,CACD,CACF,CACF,EACAzd,GAAW6vB,GAAS7vB,EAAQ,CAC3B,QAAS,EACf,CAAK,EACD,MAAOA,GAAW,CAChB,eAAiB,CAAE,KAAAgL,EAAM,MAAAyS,EAAO,WAAA4b,CAAU,IAAMr5B,EAAQ,CAEtD,IAAI4yB,EACJ,OAAQ5nB,EAAK,KAAK,KAAI,CACpB,KAAKovB,EACHxH,EAAQyH,GAAa5c,CAAK,EAC1B,MACF,KAAK6c,GACH1H,EAAQnV,EACR,MACF,QACEmc,EAAM,IAAI5iB,EAAQ,IAAI,MAAM,sBAAsBhM,EAAK,KAAK,IAAI,EAAE,EAAG,gBAAgB,CAAC,EACtF,MACH,CAED8uB,EAAU,IAAI,SAAY,CACxB,MAAMH,GAAQvI,EAAYwB,EAAOgH,EAAOP,EAAYxd,EAAOjY,EAAKk2B,EAAWpyB,CAAO,CAC5F,CAAS,CACF,CACF,CACF,CACH,CAKA,MAAM6yB,GAAc,CAACjvB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,IAAe,CAI3E,eAAiBoJ,EAAkB9yB,EAAU,GAAI,CAC/C,MAAM+yB,EAAWjJ,EAAO,SAAU,EAElC,GAAIiJ,IAAa,OACf,MAAM,IAAI,MAAM,sBAAsB,EAGxC,KAAM,CACJ,OAAA/xB,EACA,OAAAxI,CACN,EAAQw5B,GAAwBe,EAAU/yB,EAAQ,OAAQA,EAAQ,MAAM,EAEpE,GAAIxH,IAAW,EACb,OAKF,MAAM45B,EAAY,IAAIpX,GAAO,CAC3B,YAAa,CACnB,CAAK,EACKkX,EAAQc,GAAU,EAExBZ,EAAU,IAAI,SAAY,CACxB,MAAMH,GAAQvI,EAAY9iB,EAAMsrB,EAAO,EAAGlxB,EAAQA,EAASxI,EAAQ45B,EAAWpyB,CAAO,CAC3F,CAAK,EAEDoyB,EAAU,GAAG,QAAS9b,GAAS,CAC7B4b,EAAM,IAAI5b,CAAK,CACrB,CAAK,EAED,IAAIpV,EAAO,EAEX,gBAAiBG,KAAO6wB,EAClB7wB,GAAO,OAIXH,GAAQG,EAAI,WAERH,IAAS1I,GACX05B,EAAM,IAAK,EAGb,MAAM7wB,EAET,CAED,OAAOyxB,CACT,EC7KMG,GAAmB,CAACrvB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,IAAe,CAKhF,eAAiBwJ,EAAuBlzB,EAAU,GAAI,CACpD,MAAMgB,EAAShB,EAAQ,QAAU,EAC3BxH,EAASwH,EAAQ,QAAU4G,EAAK,MAAM,OACtC+e,EAAQ/e,EAAK,MAAM,MAAM5F,EAAQxI,CAAM,EAE7C,UAAW8K,KAAQqiB,EAAO,CACxB,MAAMjgB,EAAS,MAAM6P,EAAQjS,EAAK,KAAMA,EAAK,MAAQ,GAAI,GAAG6F,CAAI,IAAI7F,EAAK,MAAQ,EAAE,GAAI,CAAE,EAAEqd,EAAQ,EAAG+I,EAAY1pB,CAAO,EAErH0F,EAAO,QACT,MAAMA,EAAO,MAEhB,CACF,CAED,OAAOwtB,CACT,ECfMC,GAA8B,CAACvvB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,IAAe,CAK3F,SAAS0J,EAA2BpzB,EAAU,GAAI,CAChD,OAAOqzB,GAAczsB,EAAMuC,EAAMoM,EAASoL,EAAO+I,EAAY1pB,CAAO,CACrE,CAED,OAAOozB,CACT,EAYA,eAAiBC,GAAezsB,EAAMuC,EAAMoM,EAASoL,EAAO+I,EAAY1pB,EAAS,CAC/E,MAAM2lB,EAAQ/e,EAAK,MAEnB,UAAWtD,KAAQqiB,EAAO,CACxB,MAAMhuB,EAAO2L,EAAK,MAAQ,KAAOA,EAAK,KAAK,UAAU,CAAC,EAAI,KAE1D,GAAI3L,EAGF,MAFe,MAAM4d,EAAQjS,EAAK,KAAM3L,EAAM,GAAGwR,CAAI,IAAIxR,CAAI,GAAI,CAAE,EAAEgpB,EAAQ,EAAG+I,EAAY1pB,CAAO,GAEtF,UACR,CAEL,MAAM+V,EAAQ,MAAM2T,EAAW,IAAIpmB,EAAK,IAAI,EAC5CsD,EAAOrN,GAAOwc,CAAK,EAEnB,gBAAiBN,KAAQ4d,GAAczsB,EAAMuC,EAAMoM,EAASoL,EAAO+I,EAAY1pB,CAAO,EACpF,MAAMyV,CAET,CACF,CACH,CCpCA,MAAM6d,GAAc,CAAC1sB,EAAMjP,IAAS,CAClC,MAAM2L,EAAOsD,EAAK,MAAM,KAAKtD,GAAQA,EAAK,OAAS3L,CAAI,EAEvD,OAAO2L,GAAQA,EAAK,IACtB,EAKMiwB,GAAmB,CACvB,IAAKC,GACL,KAAMA,GACN,UAAWC,GACX,yBAA0BC,GAC1B,SAAU,CAAC9vB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,IAC3C,IAAM,CAAE,EAEjB,QAAS,CAAC9lB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,IAC1C,IAAM,CAAE,CAEnB,EAKMiK,GAAiB,MAAO/vB,EAAKjM,EAAMwR,EAAMyqB,EAAWre,EAASoL,EAAO+I,EAAY1pB,IAAY,CAChG,MAAM+V,EAAQ,MAAM2T,EAAW,IAAI9lB,EAAK5D,CAAO,EACzC4G,EAAOrN,GAAOwc,CAAK,EACzB,IAAI+T,EACA9kB,EAMJ,GAJKrN,IACHA,EAAOiM,EAAI,SAAU,GAGnBgD,EAAK,MAAQ,KACf,MAAM0I,EAAQ,IAAI,MAAM,mBAAmB,EAAG,gBAAgB,EAGhE,GAAI,CACFwa,EAASlqB,EAAO,UAAUgH,EAAK,IAAI,CACpC,OAA2B4F,EAAK,CAE/B,MAAM8C,EAAQ9C,EAAK,gBAAgB,CACpC,CAMD,GAJKrD,IACHA,EAAOxR,GAGLi8B,EAAU,OAAQ,CACpB,IAAIC,EASJ,GAPI/J,GAAUA,EAAO,OAAS,yBAE5B+J,EAAU,MAAMxC,GAAazqB,EAAMgtB,EAAU,CAAC,EAAGlK,CAAU,EAE3DmK,EAAUP,GAAY1sB,EAAMgtB,EAAU,CAAC,CAAC,EAGtC,CAACC,EACH,MAAMvkB,EAAQ,IAAI,MAAM,qBAAqB,EAAG,eAAe,EAIjE,MAAMwkB,EAAWF,EAAU,MAAO,EAC5BG,EAAW,GAAG5qB,CAAI,IAAI2qB,CAAQ,GAEpC9uB,EAAO,CACL,IAAK6uB,EACL,UAAAD,EACA,KAAME,GAAY,GAClB,KAAMC,CACP,CACF,CAED,MAAO,CACL,MAAO,CACL,KAAMjK,EAAO,YAAa,EAAG,YAAc,OAC3C,KAAAnyB,EACA,KAAAwR,EACA,IAAAvF,EAEA,QAAS2vB,GAAiBzJ,EAAO,IAAI,EAAElmB,EAAKgD,EAAMkjB,EAAQ3gB,EAAMoM,EAASoL,EAAO+I,CAAU,EAC1F,OAAAI,EACA,MAAAnJ,EACA,KAAA/Z,EACA,KAAMkjB,EAAO,SAAU,CACxB,EACD,KAAA9kB,CACD,CACH,ECpGMgvB,GAAcptB,GAAS,CAI3B,eAAiBqtB,EAAkBj0B,EAAU,GAAI,CAC/C,KAAM,CACJ,OAAAgB,EACA,OAAAxI,CACN,EAAQw5B,GAAwBprB,EAAK,OAAQ5G,EAAQ,OAAQA,EAAQ,MAAM,EAEvE,MAAM0xB,GAAqB9qB,EAAM,EAAG5F,EAAQA,EAASxI,CAAM,CAC5D,CAED,OAAOy7B,CACT,EAKM1e,GAAU,MAAO3R,EAAKjM,EAAMwR,EAAMyqB,EAAWre,EAASoL,EAAO+I,EAAY1pB,IAAY,CACzF,GAAI4zB,EAAU,OACZ,MAAMtkB,EAAQ,IAAI,MAAM,iBAAiBnG,CAAI,sBAAsBvF,CAAG,EAAE,EAAG,eAAe,EAG5F,MAAMmS,EAAQ,MAAM2T,EAAW,IAAI9lB,EAAK5D,CAAO,EAE/C,MAAO,CACL,MAAO,CACL,KAAM,MACN,KAAArI,EACA,KAAAwR,EACA,IAAAvF,EACA,QAASowB,GAAWje,CAAK,EACzB,MAAA4K,EACA,KAAM5K,EAAM,OACZ,KAAMA,CACP,CACF,CACH,ECtCMR,GAAU,MAAO3R,EAAKjM,EAAMwR,EAAMyqB,EAAWre,EAASoL,EAAO+I,EAAY1pB,IAAY,CACzF,MAAM+V,EAAQ,MAAM2T,EAAW,IAAI9lB,CAAG,EAChCswB,EAASC,GAAepe,CAAK,EACnC,IAAIqe,EAAYF,EACZG,EAAUlrB,EAEd,KAAOyqB,EAAU,QAAQ,CACvB,MAAMU,EAAOV,EAAU,CAAC,EAExB,GAAIU,KAAQF,EAAW,CAErBR,EAAU,MAAO,EACjBS,EAAU,GAAGA,CAAO,IAAIC,CAAI,GAE5B,MAAMC,EAAezwB,EAAI,MAAMswB,EAAUE,CAAI,CAAC,EAC9C,GAAIC,EACF,MAAO,CACL,MAAO,CACL,KAAM,SACN,KAAA58B,EACA,KAAAwR,EACA,IAAAvF,EACA,KAAMmS,EACN,MAAA4K,EACA,KAAM5K,EAAM,OACZ,QAAS,iBAAoB,CAC3B,MAAMme,CACP,CACF,EACD,KAAM,CACJ,IAAKK,EACL,KAAMD,EACN,KAAMD,EACN,UAAAT,CACD,CACF,EAGHQ,EAAYA,EAAUE,CAAI,CAChC,KAEM,OAAMhlB,EAAQ,IAAI,MAAM,qBAAqBglB,CAAI,uBAAuB1wB,CAAG,EAAE,EAAG,aAAa,CAEhG,CAED,MAAO,CACL,MAAO,CACL,KAAM,SACN,KAAAjM,EACA,KAAAwR,EACA,IAAAvF,EACA,KAAMmS,EACN,MAAA4K,EACA,KAAM5K,EAAM,OACZ,QAAS,iBAAoB,CAC3B,MAAMme,CACP,CACF,CACF,CACH,ECzDMF,GAAcptB,GAAS,CAI3B,eAAiBqtB,EAAkBj0B,EAAU,GAAI,CAC/C,KAAM,CACJ,OAAAgB,EACA,OAAAxI,CACN,EAAQw5B,GAAwBprB,EAAK,OAAQ5G,EAAQ,OAAQA,EAAQ,MAAM,EAEvE,MAAM0xB,GAAqB9qB,EAAM,EAAG5F,EAAQA,EAASxI,CAAM,CAC5D,CAED,OAAOy7B,CACT,EAKM1e,GAAU,MAAO3R,EAAKjM,EAAMwR,EAAMyqB,EAAWre,EAASoL,EAAO+I,EAAY1pB,IAAY,CACzF,GAAI4zB,EAAU,OACZ,MAAMtkB,EAAQ,IAAI,MAAM,iBAAiBnG,CAAI,sBAAsBvF,CAAG,EAAE,EAAG,eAAe,EAE5F,MAAMvC,EAAM,MAAMmzB,GAAU5wB,EAAI,UAAU,KAAK,EAE/C,MAAO,CACL,MAAO,CACL,KAAM,WACN,KAAAjM,EACA,KAAAwR,EACA,IAAAvF,EACA,QAASowB,GAAW3yB,EAAI,MAAM,EAC9B,MAAAsf,EACA,KAAMtf,EAAI,OAAO,OACjB,KAAMA,EAAI,MACX,CACF,CACH,EC9BMkM,GAAY,CAChB,CAACmlB,CAAU,EAAG+B,GACd,CAAC7B,EAAQ,EAAG8B,GACZ,CAACC,EAAY,EAAGC,GAChB,CAACjvB,GAAS,IAAI,EAAGkvB,EACnB,EAKA,SAAStf,GAAS3R,EAAKjM,EAAMwR,EAAMyqB,EAAWjT,EAAO+I,EAAY1pB,EAAS,CACxE,MAAMqP,EAAW9B,GAAU3J,EAAI,IAAI,EAEnC,GAAI,CAACyL,EACH,MAAMC,EAAQ,IAAI,MAAM,wBAAwB1L,EAAI,IAAI,EAAE,EAAG,iBAAiB,EAGhF,OAAOyL,EAASzL,EAAKjM,EAAMwR,EAAMyqB,EAAWre,GAASoL,EAAO+I,EAAY1pB,CAAO,CACjF,CCrBA,MAAM8uB,GAAmB,CAAC3lB,EAAO,MAEvBA,EACL,KAAM,EACN,MAAM,kBAAkB,GAAK,CAAE,GAC/B,OAAO,OAAO,EAMb2rB,GAAc3rB,GAAS,CAC3B,GAAIA,aAAgB,WAClB,MAAO,CACL,IAAKrF,EAAI,OAAOqF,CAAI,EACpB,UAAW,CAAE,CACd,EAGH,MAAMvF,EAAME,EAAI,MAAMqF,CAAI,EAC1B,GAAIvF,EACF,MAAO,CACL,IAAAA,EACA,UAAW,CAAE,CACd,EAGH,GAAI,OAAOuF,GAAS,SAAU,CACxBA,EAAK,QAAQ,QAAQ,IAAM,IAC7BA,EAAOA,EAAK,UAAU,CAAC,GAGzB,MAAMuM,EAASoZ,GAAiB3lB,CAAI,EAEpC,MAAO,CACL,IAAKrF,EAAI,MAAM4R,EAAO,CAAC,CAAC,EACxB,UAAWA,EAAO,MAAM,CAAC,CAC1B,CACF,CAED,MAAMpG,EAAQ,IAAI,MAAM,qBAAqBnG,CAAI,EAAE,EAAG,cAAc,CACtE,EAOO,eAAiB4rB,GAAU5rB,EAAMugB,EAAY1pB,EAAU,CAAA,EAAI,CAChE,GAAI,CACF,IAAA4D,EACA,UAAAgwB,CACJ,EAAMkB,GAAW3rB,CAAI,EACfxR,EAAOiM,EAAI,SAAU,EACrBoxB,EAAYr9B,EAChB,MAAMs9B,EAAgBrB,EAAU,OAEhC,OAAa,CACX,MAAMluB,EAAS,MAAM6P,GAAQ3R,EAAKjM,EAAMq9B,EAAWpB,EAAWqB,EAAevL,EAAY1pB,CAAO,EAEhG,GAAI,CAAC0F,EAAO,OAAS,CAACA,EAAO,KAC3B,MAAM4J,EAAQ,IAAI,MAAM,qBAAqBnG,CAAI,EAAE,EAAG,eAAe,EAOvE,GAJIzD,EAAO,QACT,MAAMA,EAAO,OAGX,CAACA,EAAO,KACV,OAIFkuB,EAAYluB,EAAO,KAAK,UACxB9B,EAAM8B,EAAO,KAAK,IAClB/N,EAAO+N,EAAO,KAAK,KACnBsvB,EAAYtvB,EAAO,KAAK,IACzB,CACH,CAOO,eAAewvB,GAAU/rB,EAAMugB,EAAY1pB,EAAU,CAAA,EAAI,CAC9D,MAAM0F,EAAS,MAAM0W,GAAK2Y,GAAS5rB,EAAMugB,EAAY1pB,CAAO,CAAC,EAE7D,GAAI,CAAC0F,EACH,MAAM4J,EAAQ,IAAI,MAAM,qBAAqBnG,CAAI,EAAE,EAAG,eAAe,EAGvE,OAAOzD,CACT,CAOO,eAAiBsX,GAAW7T,EAAMugB,EAAY1pB,EAAU,CAAA,EAAI,CACjE,MAAM4G,EAAO,MAAMsuB,GAAS/rB,EAAMugB,EAAY1pB,CAAO,EAErD,GAAI,CAAC4G,EACH,OAKF,GAFA,MAAMA,EAEFA,EAAK,OAAS,YAChB,gBAAiBskB,KAASiK,EAAQvuB,EAAM5G,CAAO,EAC7C,MAAMkrB,EASV,eAAiBiK,EAASvuB,EAAM5G,EAAS,CACvC,gBAAiByV,KAAQ7O,EAAK,QAAQ5G,CAAO,EAC3C,MAAMyV,EAEF,EAAAA,aAAgB,aAIhBA,EAAK,OAAS,cAChB,MAAQ0f,EAAQ1f,EAAMzV,CAAO,EAGlC,CACH,CC1IO,SAASo1B,GAAW,CAAE,KAAAjgB,EAAM,QAAAwB,GAAW,CAI5C,eAAiB0e,EAAKjiB,EAAUpT,EAAU,GAAI,CAG5C,GAFAoT,EAAW6B,GAAiB7B,CAAQ,EAEhCpT,EAAQ,UAAY,GAAO,CAC7B,MAAMs1B,EAAiBliB,EAAS,MAAM,GAAG,EACzCuD,EAAQ7S,EAAI,MAAMwxB,EAAe,CAAC,CAAC,CAAC,CACrC,CAED,MAAM7f,EAAO,MAAMyf,GAAS9hB,EAAU+B,EAAK,OAAQnV,CAAO,EAG1D,GAAIyV,EAAK,OAAS,YAChB,MAAM,IAAI,MAAM,8BAA8B,EAGhD,GAAI,CAACA,EAAK,QACR,MAAM,IAAI,MAAM,8BAA8B,EAGhD,MAAQA,EAAK,QAAQzV,CAAO,CAC7B,CAED,OAAOuT,EAAkB8hB,CAAG,CAC9B,CC5BA,MAAME,GAA4B,EAS3B,SAAS7N,GAAW,CAAE,KAAAvS,EAAM,QAAAwB,GAAW,CAI5C,eAAiB6L,EAAKpP,EAAUpT,EAAU,GAAI,CAC5C,GAAIA,EAAQ,kBAAoB,OAASA,EAAQ,iBAAmB,IAAMA,EAAQ,iBAAmB,GACnG,MAAMsP,EAAQ,IAAI,MAAM,4CAA4C,EAAG,oBAAoB,EAG7F,GAAItP,EAAQ,UAAY,GAAO,CAC7B,IAAIs1B,EAEJ,GAAI,CACFA,EAAiBrgB,GAAiB7B,CAAQ,EAAE,MAAM,GAAG,CACtD,OAA2B5G,EAAK,CAC/B,MAAM8C,EAAQ9C,EAAK,kBAAkB,CACtC,CAEDmK,EAAQ7S,EAAI,MAAMwxB,EAAe,CAAC,CAAC,CAAC,CACrC,CAED,MAAME,EAAgB1xB,EAAI,MAAMsP,CAAQ,GAAKA,EACvCqC,EAAO,MAAMyf,GAASM,EAAergB,EAAK,OAAQnV,CAAO,EAE/D,GAAIyV,EAAK,OAAS,QAAUA,EAAK,OAAS,MAAO,CAC/C,MAAMzD,EAAO,CAAE,EAEX,CAAChS,EAAQ,UAAYA,EAAQ,UAAY,GAC3CgS,EAAK,KAAK,CAAC,CACT,OAAQ,CACN,KAAMyD,EAAK,KACX,KAAMA,EAAK,OAAS,QAAUA,EAAK,OAAO,KAC1C,MAAOA,EAAK,OAAS,QAAUA,EAAK,OAAO,MAAQ,IAAI,KAAKA,EAAK,OAAO,MAAM,KAAO,GAAI,EAAI,OAC7F,KAAMA,EAAK,KACX,KAAM,MACP,EACD,KAAMA,EAAK,QAAS,CAC9B,CAAS,EACDggB,GAAM,CACL,EAEDzjB,EAAK,KACHyD,EAAK,OACN,EAGCzV,EAAQ,UACVgS,EAAK,KAIH,gBAAkB1Z,EAAQ,CACxB,MAAM+I,EAAM,MAAMq0B,GAASp9B,CAAM,EAEjC,MAAMq9B,GAAK,KAAKt0B,EAAK,CACnB,MAAOrB,EAAQ,kBAAoBu1B,EACjD,CAAa,CACF,CACF,EAIH,MAAQtN,GAAK,GAAGjW,CAAI,EAEpB,MACD,CAED,GAAIyD,EAAK,OAAS,YAAa,CAE7B,MAAMzD,EAAO,CACXgL,GAAUwY,EAAergB,EAAK,OAAQnV,CAAO,EAI7C,gBAAkB1H,EAAQ,CACxB,gBAAiBumB,KAASvmB,EAAQ,CAEhC,MAAMod,EAAS,CACb,OAAQ,CACN,KAAMmJ,EAAM,KACZ,KAAMA,EAAM,IACb,CACF,EAED,GAAIA,EAAM,OAAS,OACjBnJ,EAAO,OAAO,KAAO,OACrBA,EAAO,OAAO,KAAOmJ,EAAM,OAAO,MAAQ,KAAOA,EAAM,OAAO,KAAO,OACrEnJ,EAAO,OAAO,MAAQmJ,EAAM,OAAO,MAAQ,IAAI,KAAKA,EAAM,OAAO,MAAM,KAAO,GAAI,EAAI,OACtFnJ,EAAO,KAAOmJ,EAAM,QAAS,UACpBA,EAAM,OAAS,MACxBnJ,EAAO,OAAO,KAAO,OACrBA,EAAO,KAAOmJ,EAAM,QAAS,UACpBA,EAAM,OAAS,YACxBnJ,EAAO,OAAO,KAAO,YACrBA,EAAO,OAAO,KAAOmJ,EAAM,OAAO,MAAQ,KAAOA,EAAM,OAAO,KAAO,OACrEnJ,EAAO,OAAO,MAAQmJ,EAAM,OAAO,MAAQ,IAAI,KAAKA,EAAM,OAAO,MAAM,KAAO,GAAI,EAAI,WAEtF,OAAMvP,EAAQ,IAAI,MAAM,mBAAmB,EAAG,gBAAgB,EAGhE,MAAMoG,CACP,CACF,EACD+f,GAAM,CACP,EAED,GAAIz1B,EAAQ,SAAU,CACpB,GAAI,CAACA,EAAQ,QACX,MAAMsP,EAAQ,IAAI,MAAM,qBAAqB,EAAG,kBAAkB,EAGhEtP,EAAQ,UACVgS,EAAK,KAIH,gBAAkB1Z,EAAQ,CACxB,MAAM+I,EAAM,MAAMq0B,GAASp9B,CAAM,EAEjC,MAAMq9B,GAAK,KAAKt0B,EAAK,CACnB,MAAOrB,EAAQ,kBAAoBu1B,EACnD,CAAe,CACF,CACF,CAEJ,CAGD,MAAQtN,GAAK,GAAGjW,CAAI,EAEpB,MACD,CAED,MAAM1C,EAAQ,IAAI,MAAM,mBAAmB,EAAG,gBAAgB,CAC/D,CAED,OAAOiE,EAAkBiP,CAAG,CAC9B,CChJO,SAASpF,GAAU,CAAE,KAAAjI,EAAM,QAAAwB,GAAW,CAI3C,eAAiB0G,EAAIjK,EAAUpT,EAAU,GAAI,CAC3C,MAAM41B,EAAa3gB,GAAiB7B,CAAQ,EACtCkiB,EAAiBM,EAAW,MAAM,GAAG,EAEvC51B,EAAQ,UAAY,IACtB2W,EAAQ7S,EAAI,MAAMwxB,EAAe,CAAC,CAAC,CAAC,EAGtC,MAAME,EAAgB1xB,EAAI,MAAM8xB,CAAU,GAAKA,EACzCngB,EAAO,MAAMyf,GAASM,EAAergB,EAAK,OAAQnV,CAAO,EAE/D,GAAIyV,EAAK,OAAS,OAAQ,CACxB,MAAMD,GAAQC,CAAI,EAClB,MACD,CAED,GAAIA,EAAK,OAAS,YAAa,CAC7B,gBAAiByV,KAASzV,EAAK,UAC7B,MAAMD,GAAQ0V,CAAK,EAGrB,MACD,CAED,MAAM5b,EAAQ,IAAI,MAAM,uBAAuBmG,EAAK,IAAI,EAAE,EAAG,yBAAyB,CACvF,CAED,OAAOlC,EAAkB8J,CAAE,CAC7B,CChCO,MAAMwY,EAAQ,CAInB,YAAa,CAAE,QAAAlf,EAAS,KAAAxB,EAAM,QAAA8B,EAAS,QAAAjX,CAAO,EAAI,CAChD,MAAMmc,EAASW,GAAa,CAC1B,QAAAnG,EACA,KAAAxB,EACA,QAAAnV,EACA,QAAAiX,CACN,CAAK,EAED,KAAK,OAASkF,EACd,KAAK,IAAMD,GAAU,CAAE,OAAAC,CAAM,CAAE,EAC/B,KAAK,IAAMiZ,GAAU,CAAE,KAAAjgB,EAAM,QAAAwB,CAAO,CAAE,EACtC,KAAK,IAAM+Q,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACtC,KAAK,GAAKyG,GAAS,CAAE,KAAAjI,EAAM,QAAAwB,CAAO,CAAE,CACrC,CACH,CC9BY,MAACmf,GAAW,SACXC,GAAS,GACTC,GAAoB,WCI1B,SAASC,GAAe,CAAE,KAAA9gB,GAAQ,CAIvC,eAAe5R,EAASsS,EAAW,GAAI,CACrC,MAAMqgB,EAAc,MAAM/gB,EAAK,QAAQ,IAAK,EAE5C,MAAO,CACL,QAAS2gB,GACT,OAAAC,GACA,KAAM,GAAGG,CAAW,GACpB,YAAaJ,GACb,sBAAuBE,EACxB,CACF,CAED,OAAOziB,EAAkBhQ,CAAO,CAClC,CChBA,MAAMwa,GAAMC,EAAO,oBAAoB,EAahC,SAASmY,GAAU,CAAE,OAAAvf,EAAQ,QAAAF,GAAW,CAI7C,eAAesK,EAAIhhB,EAAU,GAAI,CAC/B,MAAMyb,EAAM/E,EAAQ,IAAK,EAEzB,GAAI,CAAC+E,EAAK,CACR,GAAIzb,EAAQ,OACV,MAAM,IAAI0H,GAGZ,GAAIkP,EAAO,WAAa,KACtB,MAAMtH,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAO,CACL,GAAIsH,EACJ,UAAWpO,EAAmBoO,EAAO,UAAW,WAAW,EAC3D,UAAW,CAAE,EACb,aAAc,WAAWwf,EAAU,GACnC,gBAAiB,OACjB,UAAW,CAAE,CACd,CACF,CAED,KAAM,CAAE,OAAAlf,CAAM,EAAKuE,EACb4a,EAAar2B,EAAQ,OAASA,EAAQ,OAAS4W,EAC/C0f,EAAO,MAAMC,GAASF,EAAYnf,EAAQlX,CAAO,EACjDw2B,EAAehuB,EAAmB8tB,EAAK,SAAS,IAAI,cAAc,GAAK,IAAI,UAAY,EACvFG,EAAkBjuB,EAAmB8tB,EAAK,SAAS,IAAI,iBAAiB,GAAK,IAAI,UAAY,EAC7FI,EAAQJ,EAAK,GAAG,SAAU,EAC1BK,EAAeL,EAAK,UAAY9tB,EAAmB8tB,EAAK,UAAW,WAAW,EAAI,GAExF,MAAO,CACL,GAAID,EACJ,UAAWM,EACX,WAAYL,EAAK,WAAa,CAAE,GAC7B,IAAIvkB,GAAM,CACT,MAAM/Y,EAAM+Y,EAAG,SAAU,EAIzB,OAAI/Y,EAAI,SAAS,QAAQ09B,CAAK,EAAE,EACvB19B,EAGF,GAAGA,CAAG,QAAQ09B,CAAK,EACpC,CAAS,EACA,KAAM,EACN,IAAI3kB,GAAMvC,GAAUuC,CAAE,CAAC,EAC1B,aAAAykB,EACA,gBAAAC,EACA,WAAYH,EAAK,WAAa,CAAA,GAAI,KAAM,CACzC,CACF,CAED,OAAO/iB,EAAkByN,CAAE,CAC7B,CAOA,eAAeuV,GAAU3f,EAAQM,EAAQlX,EAAS,CAChD,IAAIs2B,EAAO,MAAMpf,EAAO,UAAU,IAAIN,CAAM,EAEvC0f,IACHA,EAAO,MAAMM,GAAchgB,EAAQM,EAAQlX,CAAO,GAGpD,IAAI62B,EAAYjgB,EAAO,UAAYA,EAAO,UAAY,MAAMM,EAAO,UAAU,QAAQ,IAAIN,CAAM,EAE/F,GAAIigB,GAAa,KACf,GAAI,CACFA,EAAY,MAAM3f,EAAO,aAAaN,EAAQ5W,CAAO,CACtD,OAAQwM,EAAK,CACZuR,GAAI,MAAM,gCAAiCnH,EAAO,SAAQ,EAAIpK,CAAG,CAClE,CAGH,MAAO,CACL,GAAG8pB,EACH,UAAAO,EACA,SAAUP,EAAK,UAAY,IAAI,IAC/B,UAAWA,EAAK,UAAU,IAAInrB,GAAQA,EAAK,SAAS,CACrD,CACH,CAOA,eAAeyrB,GAAehgB,EAAQM,EAAQlX,EAAS,CACrD,GAAIkX,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,gBAAiBgJ,KAASpB,EAAO,IAAI,SAASN,EAAQ5W,CAAO,EAC3D,GAAIsY,EAAM,OAAS,aACjB,MAIJ,MAAMge,EAAO,MAAMpf,EAAO,UAAU,IAAIN,CAAM,EAE9C,GAAI,CAAC0f,EACH,MAAMhnB,EAAQ,IAAI,MAAM,qBAAqB,EAAG,eAAe,EAGjE,OAAOgnB,CACT,CCxHO,MAAMQ,GAAW,CACtB,OAAQ,CACN,YAAa,yIACb,UAAY/P,IACVgQ,GAAIhQ,EAAQ,yBAA0B,EAAK,EAC3CgQ,GAAIhQ,EAAQ,+BAAgC,EAAK,EACjDA,EAAO,MAAQ,CACb,GAAIA,EAAO,OAAS,GACpB,kBAAmB,EACpB,EAEMA,EAEV,EACD,kBAAmB,CACjB,YAAa,4GACb,UAAYA,IACVgQ,GAAIhQ,EAAQ,yBAA0B,EAAI,EAC1CgQ,GAAIhQ,EAAQ,+BAAgC,EAAI,EAChDgQ,GAAIhQ,EAAQ,QAAS,CACnB,GAAIA,EAAO,OAAS,GACpB,kBAAmB,EAC3B,CAAO,EAEMA,EAEV,EACD,KAAM,CACJ,YAAa,6LACb,UAAYA,GAAW,CACrB,MAAMS,EAAgBH,GAAkB,EAExC0P,OAAAA,GAAIhQ,EAAQ,gBAAiBS,EAAc,UAAU,IAAM,uBAAyB,EAAE,EACtFuP,GAAIhQ,EAAQ,oBAAqBS,EAAc,UAAU,QAAU,uBAAyB,EAAE,EAC9FuP,GAAIhQ,EAAQ,kBAAmBS,EAAc,UAAU,MAAM,OAAS,CAAC,sBAAsB,EAAI,EAAE,EACnGuP,GAAIhQ,EAAQ,sBAAuB,EAAE,EACrCgQ,GAAIhQ,EAAQ,YAAa,EAAE,EAC3BgQ,GAAIhQ,EAAQ,yBAA0B,EAAK,EAC3CgQ,GAAIhQ,EAAQ,+BAAgC,EAAK,EACjDgQ,GAAIhQ,EAAQ,QAAS,CACnB,GAAIA,EAAO,OAAS,GACpB,kBAAmB,EAC3B,CAAO,EAEMA,CACR,CACF,EACD,qBAAsB,CACpB,YAAa,4EACb,UAAYA,GAAW,CACrB,MAAMS,EAAgBH,GAAkB,EAExC0P,OAAAA,GAAIhQ,EAAQ,gBAAiBS,EAAc,UAAU,GAAG,EACxDuP,GAAIhQ,EAAQ,oBAAqBS,EAAc,UAAU,OAAO,EAChEuP,GAAIhQ,EAAQ,kBAAmBS,EAAc,UAAU,KAAK,EAC5DuP,GAAIhQ,EAAQ,sBAAuBS,EAAc,UAAU,SAAS,EACpEuP,GAAIhQ,EAAQ,YAAaS,EAAc,SAAS,EAChDuP,GAAIhQ,EAAQ,yBAA0BS,EAAc,UAAU,KAAK,OAAO,EAC1EuP,GAAIhQ,EAAQ,+BAAgCS,EAAc,UAAU,WAAW,OAAO,EACtFuP,GAAIhQ,EAAQ,QAAS,CACnB,GAAIA,EAAO,OAAS,GACpB,kBAAmB,EAC3B,CAAO,EAEMA,CACR,CACF,EACD,SAAU,CACR,YAAa,8KACb,UAAYA,GAAW,CACrB,MAAMiQ,EAAQjQ,EAAO,OAAS,CAAE,EAC1BkQ,EAAUD,EAAM,SAAW,CAAE,EACnC,OAAAC,EAAQ,SAAW,GACnBA,EAAQ,UAAY,GAEpBD,EAAM,QAAUC,EAChBlQ,EAAO,MAAQiQ,EAERjQ,CACR,CACF,EACD,gBAAiB,CACf,YAAa,iCACb,UAAYA,GAAW,CACrB,MAAMS,EAAgBH,GAAkB,EAExC,OAAAN,EAAO,MAAQS,EAAc,MAEtBT,CACR,CACF,CACH,ECrGMhJ,GAAMC,EAAO,kBAAkB,EAM9B,SAASkZ,GAAc,CAAE,KAAA/hB,GAAQ,CACtC,MAAO,CACL,OAAQ5B,EAAkB4jB,CAAM,EAChC,IAAK5jB,EAAkBiP,CAAG,EAC1B,IAAKjP,EAAkBwjB,CAAG,EAC1B,QAASxjB,EAAkB6jB,CAAO,EAClC,SAAU,CACR,MAAO7jB,EAAkB8jB,CAAY,EACrC,KAAM9jB,EAAkB+jB,EAAY,CACrC,CACF,EAKD,eAAeH,EAAQn3B,EAAU,GAAI,CACnC,OAAOmV,EAAK,OAAO,OAAOnV,CAAO,CAClC,CAKD,eAAewiB,EAAKxM,EAAKhW,EAAS,CAChC,OAAKgW,EAIEb,EAAK,OAAO,IAAIa,EAAKhW,CAAO,EAH1B,QAAQ,OAAO,IAAI,MAAM,0BAA0B,CAAC,CAI9D,CAKD,eAAe+2B,EAAK/gB,EAAK1Z,EAAO0D,EAAS,CACvC,OAAOmV,EAAK,OAAO,IAAIa,EAAK1Z,EAAO0D,CAAO,CAC3C,CAKD,eAAeo3B,EAAS96B,EAAO0D,EAAS,CACtC,OAAOmV,EAAK,OAAO,QAAQ7Y,EAAO0D,CAAO,CAC1C,CAKD,eAAeq3B,EAAcE,EAAav3B,EAAU,CAAE,OAAQ,EAAK,EAAI,CACrE,KAAM,CAAE,OAAAw3B,CAAM,EAAKx3B,EAEby3B,EAAUX,GAASS,CAAW,EAEpC,GAAI,CAACE,EACH,MAAM,IAAI,MAAM,yBAAyBF,CAAW,UAAU,EAGhE,GAAI,CACF,MAAMG,EAAS,MAAMviB,EAAK,OAAO,OAAOnV,CAAO,EAC/C,IAAI23B,EAAS,KAAK,MAAM,KAAK,UAAUD,CAAM,CAAC,EAC9C,OAAAC,EAASF,EAAQ,UAAUE,CAAM,EAE5BH,GACH,MAAMriB,EAAK,OAAO,QAAQwiB,EAAQ33B,CAAO,EAK3C,OAAO03B,EAAO,SAAS,QACvB,OAAOC,EAAO,SAAS,QAEhB,CAAE,SAAUD,EAAQ,QAASC,CAAQ,CAC7C,OAA2BnrB,EAAK,CAC/BuR,MAAAA,GAAIvR,CAAG,EAED,IAAI,MAAM,4BAA4B+qB,CAAW,gBAAgB/qB,EAAI,OAAO,EAAE,CACrF,CACF,CACH,CAKA,eAAe8qB,GAAczhB,EAAU,CACrC,OAAO,OAAO,KAAKihB,EAAQ,EAAE,IAAIn/B,IAAS,CACxC,KAAAA,EACA,YAAam/B,GAASn/B,CAAI,EAAE,WAChC,EAAI,CACJ,CC5FA,SAASigC,GAAU,CAAE,WAAAC,EAAa,GAAM,aAAAC,EAAe,EAAO,EAAG,GAAI,CACnE,MAAO,CAAE,WAAAD,EAAY,aAAAC,EAAc,SAAU,EAAO,CACtD,CAOA,SAAWC,GAAa5uB,EAAM7M,EAAO,CACnC,GAAIA,GAAS,MAAQ,OAAOA,GAAU,SACpC,GAAI,MAAM,QAAQA,CAAK,EACrB,SAAW,CAACgE,EAAOslB,CAAO,IAAKtpB,EAAM,QAAO,EAAI,CAC9C,MAAMupB,EAAc,CAAC,GAAG1c,EAAM7I,CAAK,EAC7BsD,EAAME,EAAI,MAAM8hB,CAAO,EACzBhiB,EACF,KAAM,CAACiiB,EAAY,KAAK,GAAG,EAAGjiB,CAAG,EACxB,OAAOgiB,GAAY,WAC5B,MAAQD,GAAMC,EAASC,CAAW,EAErC,KACI,CACL,MAAMjiB,EAAME,EAAI,MAAMxH,CAAK,EACvBsH,EACF,KAAM,CAACuF,EAAK,KAAK,GAAG,EAAGvF,CAAG,EAE1B,MAAQ+hB,GAAMrpB,EAAO6M,CAAI,CAE5B,CAEL,CAQA,SAAWwc,GAAOrtB,EAAQb,EAAM,CAC9B,GAAIa,GAAU,MAAQA,aAAkB,WACtC,OAEF,MAAMsL,EAAME,EAAI,MAAMxL,CAAM,EACxBsL,IACF,KAAM,CAACnM,EAAK,KAAK,GAAG,EAAGmM,CAAG,GAE5B,SAAW,CAACoS,EAAK1Z,CAAK,IAAK,OAAO,QAAQhE,CAAM,EAAG,CACjD,MAAM6Q,EAA+C,CAAC,GAAG1R,EAAMue,CAAG,EAClE,MAAQ+hB,GAAY5uB,EAAM7M,CAAK,CAChC,CACH,CAOA,SAAW07B,GAAY7uB,EAAM7M,EAAO,CAClC,GAAI,MAAM,QAAQA,CAAK,EACrB,SAAW,CAACgE,EAAOslB,CAAO,IAAKtpB,EAAM,QAAO,EAAI,CAC9C,MAAMupB,EAAc,CAAC,GAAG1c,EAAM7I,CAAK,EACnC,MAAMulB,EAAY,KAAK,GAAG,EACtB,OAAOD,GAAY,UAAY,CAAC9hB,EAAI,MAAM8hB,CAAO,IACnD,MAAQqJ,GAAKrJ,EAASC,CAAW,EAEpC,MAED,MAAQoJ,GAAK3yB,EAAO6M,CAAI,CAE5B,CAQA,SAAW8lB,GAAM32B,EAAQb,EAAM,CAC7B,GAAI,EAAAa,GAAU,MAAQ,OAAOA,GAAW,UAGxC,SAAW,CAAC0d,EAAK1Z,CAAK,IAAK,OAAO,QAAQhE,CAAM,EAAG,CACjD,MAAM6Q,EAA+C,CAAC,GAAG1R,EAAMue,CAAG,EAClE,MAAM7M,EAAK,KAAK,GAAG,EACf7M,GAAS,MAAQ,EAAEA,aAAiB,aAAe,OAAOA,GAAU,UAAY,CAACwH,EAAI,MAAMxH,CAAK,IAClG,MAAQ07B,GAAW7uB,EAAM7M,CAAK,EAEjC,CACH,CASA,SAASkmB,GAAKlqB,EAAQ6Q,EAAM,CAC1B,IAAIvC,EAA0CtO,EAC9C,SAAW,CAACgI,EAAO0V,CAAG,IAAK7M,EAAK,QAAO,EAAI,CAEzC,GADAvC,EAAOA,EAAKoP,CAAG,EACXpP,GAAQ,KACV,MAAM,IAAI,MAAM,6BAA6BuC,EAAK,MAAM,EAAG7I,EAAQ,CAAC,EAAE,IAAIoL,GAAQ,IAAI,KAAK,UAAUA,CAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,EAE3H,MAAM9H,EAAME,EAAI,MAAM8C,CAAI,EAC1B,GAAIhD,EACF,MAAO,CAAE,MAAOA,EAAK,UAAWuF,EAAK,MAAM7I,EAAQ,CAAC,EAAE,KAAK,GAAG,CAAG,CAEpE,CACD,MAAO,CAAE,MAAOsG,CAAM,CACxB,CASA,IAAAqxB,GAAA,KAAY,CAOV,YAAa,CAAE,IAAAr0B,EAAK,MAAAhJ,EAAO,MAAA0B,CAAK,EAAI,CAClC,GAAI,CAACsH,GAAO,CAAChJ,GAAS,OAAO0B,EAAU,IAAe,MAAM,IAAI,MAAM,2BAA2B,EAEjG,KAAK,IAAMsH,EACX,KAAK,MAAQhJ,EACb,KAAK,MAAQ0B,EACb,KAAK,QAAU,KAGf,OAAO,iBAAiB,KAAM,CAC5B,IAAKs7B,GAAU,EACf,MAAOA,GAAU,EACjB,MAAOA,GAAU,EACjB,QAASA,GAAU,CACzB,CAAK,CACF,CAED,OAAS,CACP,OAAOjS,GAAM,KAAK,MAAO,EAAE,CAC5B,CAED,MAAQ,CACN,OAAOsJ,GAAK,KAAK,MAAO,EAAE,CAC3B,CAOD,IAAK9lB,EAAO,IAAK,CACf,OAAOqZ,GAAI,KAAK,MAAOrZ,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC,CACvD,CACH,EAYA,eAAe9Q,GAAQ,CAAE,MAAAiE,EAAO,MAAA2I,EAAO,OAAAorB,CAAM,EAAI,CAC/C,GAAI,OAAO/zB,EAAU,IAAa,MAAM,IAAI,MAAM,mCAAmC,EACrF,GAAI,CAAC2I,GAAS,CAACorB,EAAQ,MAAM,IAAI,MAAM,4CAA4C,EAEnF,MAAMz1B,EAAQqK,EAAM,OAAO3I,CAAK,EAC1BwO,EAAO,MAAMulB,EAAO,OAAOz1B,CAAK,EAEhCgJ,EAAME,EAAI,OACd,EACAmB,EAAM,KACN6F,CACD,EAED,OAAO,IAAIotB,GAAM,CAAE,MAAA57B,EAAO,MAAA1B,EAAO,IAAAgJ,CAAG,CAAE,CACxC,CAYA,eAAerK,GAAQ,CAAE,MAAAqB,EAAO,MAAAqK,EAAO,OAAAorB,CAAM,EAAI,CAC/C,GAAI,CAACz1B,EAAO,MAAM,IAAI,MAAM,mCAAmC,EAC/D,GAAI,CAACqK,GAAS,CAACorB,EAAQ,MAAM,IAAI,MAAM,4CAA4C,EAEnF,MAAM/zB,EAAQ2I,EAAM,OAAOrK,CAAK,EAC1BkQ,EAAO,MAAMulB,EAAO,OAAOz1B,CAAK,EAEhCgJ,EAAME,EAAI,OAAO,EAAGmB,EAAM,KAAM6F,CAAI,EAE1C,OAAO,IAAIotB,GAAM,CAAE,MAAA57B,EAAO,MAAA1B,EAAO,IAAAgJ,CAAG,CAAE,CACxC,CAeA,SAASu0B,GAAc,CAAE,MAAAv9B,EAAO,IAAAgJ,EAAK,MAAOw0B,EAAY,MAAAnzB,GAAS,CAC/D,MAAM3I,EAAQ87B,IAAe,OACzBA,EACCnzB,GAASA,EAAM,OAAOrK,CAAK,EAEhC,GAAI0B,IAAU,OAAW,MAAM,IAAI,MAAM,mEAAmE,EAE5G,OAAO,IAAI47B,GAAM,CAEf,IAA0Ct0B,EAC1C,MAAAhJ,EACA,MAAA0B,CACJ,CAAG,CACH,CCzNA,MAAM+7B,GAAO,MAAO,CAAE,IAAAz0B,EAAK,KAAAkS,EAAM,KAAAwP,CAAI,IAAO,CAC1CA,EAAOA,GAAQ,IAAI,IACnB,MAAMgT,EAAS10B,EAAI,SAASjH,CAAS,EACrC,GAAI2oB,EAAK,IAAIgT,CAAM,EACjB,OAGF,MAAMviB,EAAQ,MAAMD,EAAKlS,CAAG,EAG5B,GAFA0hB,EAAK,IAAIgT,CAAM,EAEXviB,IAAU,KAId,SAAW,CAAA,CAAGnS,CAAG,IAAKmS,EAAM,MAAK,EAC/B,MAAMsiB,GAAK,CAAE,IAAAz0B,EAAK,KAAAkS,EAAM,KAAAwP,CAAI,CAAE,CAElC,EC/BMvH,GAAMC,EAAO,4BAA4B,EAIzCua,GAAkB,CACtB3F,GACA4F,EACF,EAuBO,SAASC,GAAc,CAAE,KAAAtjB,EAAM,QAAAwB,EAAS,OAAAvP,CAAM,EAAI,CAIvD,eAAiBsxB,EAAWlO,EAAMxqB,EAAU,GAAI,CAC1CA,EAAQ,UAAY,IACtB2W,EAAQ6T,CAAI,EAGd,MAAM5mB,EAAME,EAAI,MAAM0mB,CAAI,EAC1B,GAAI,CAAC5mB,EACH,MAAM,IAAI,MAAM,yCAAyC4mB,CAAI,EAAE,EAGjEzM,GAAI,aAAana,CAAG,SAAS,EAC7B,KAAM,CAAE,OAAA+0B,EAAQ,IAAAx8B,CAAK,EAAG,MAAMy8B,GAAU,OAAO,CAACh1B,CAAG,CAAC,EAMpD,IAAI4I,EAAM,MACR,SAAY,CACZ,GAAI,CACF,MAAMsJ,EAAO+iB,GAAW1jB,EAAMwjB,EAAQ,CACpC,OAAQ34B,EAAQ,OAChB,QAASA,EAAQ,OAClB,EAAEoH,CAAM,EACT,MAAMixB,GAAK,CAAE,IAAAz0B,EAAK,KAAAkS,EAAM,CACzB,OAA2ByL,EAAG,CAC7B/U,EAAM+U,CACd,QAAgB,CACRoX,EAAO,MAAO,CACf,CACP,GAAQ,EAEJ,gBAAiBte,KAASle,EAAK,CAC7B,GAAIqQ,EACF,MAEF,MAAM6N,CACP,CACD,GAAI7N,EACF,MAAMA,CAET,CAED,OAAO+G,EAAkBmlB,CAAS,CACpC,CASA,SAASG,GAAY1jB,EAAMwjB,EAAQ34B,EAASoH,EAAQ,CAClD,MAAO,OAAOxD,GAAQ,CACpB,MAAMqB,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EAE5C,GAAI,CAACqB,EACH,MAAM,IAAI,MAAM,4CAA4CrB,EAAI,KAAK,SAAS,EAAE,CAAC,uBAAuB,EAG1G,MAAMhJ,EAAQ,MAAMua,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAKhD,OAHA+d,GAAI,gBAAgBna,CAAG,SAAS,EAChC,MAAM+0B,EAAO,IAAI,CAAE,IAAA/0B,EAAK,MAAAhJ,CAAK,CAAE,EAE3B29B,GAAgB,SAAS30B,EAAI,IAAI,EAC5B,KAGFu0B,GAAa,CAAE,MAAAv9B,EAAO,IAAAgJ,EAAK,MAAAqB,CAAK,CAAE,CAC1C,CACH,CCvGO,SAASyiB,GAAW,CAAE,OAAAtgB,EAAQ,KAAA+N,EAAM,QAAAwB,CAAO,EAAI,CAiCpD,OAAOpD,EA7BK,eAAoB3P,EAAK5D,EAAU,CAAA,EAAI,CAKjD,GAJIA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGT5D,EAAQ,KAAM,CAKhB,MAAM0F,EAJQ1F,EAAQ,aAClB,MAAM0c,GAAMnH,GAAQ3R,EAAK5D,EAAQ,KAAMoH,EAAQ+N,EAAMnV,CAAO,CAAC,EAC7D,MAAMoc,GAAK7G,GAAQ3R,EAAK5D,EAAQ,KAAMoH,EAAQ+N,EAAMnV,CAAO,CAAC,EAIhE,GAAI,CAAC0F,EACH,MAAM4J,EAAQ,IAAI,MAAM,WAAW,EAAG,eAAe,EAGvD,OAAO5J,CACR,CAED,MAAMT,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EACtCmS,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAGhD,MAAO,CACL,MAHWiF,EAAM,OAAO8Q,CAAK,EAI7B,cAAe,EAChB,CACF,CAE2B,CAC9B,CCxCA,MAAMgI,GAAMC,EAAO,4BAA4B,EAaxC,SAAS8a,GAAc,CAAE,KAAA3jB,GAAQ,CAItC,eAAiB4jB,EAAWC,EAASh5B,EAAU,GAAI,CACjD,MAAMmd,EAAU,MAAMhI,EAAK,OAAO,SAAU,EAE5C,GAAI,CACF,MAAM8jB,EAAe,CAAE,OAAQj5B,EAAQ,OAAQ,QAASA,EAAQ,OAAS,EACnE8oB,EAAWC,GAAWiQ,CAAO,EAE7B,CAAE,MAAA18B,EAAO,KAAAgY,CAAM,EAAG,MAAMwU,EAAS,KAAM,EAE7C,GAAIxU,EACF,OAGEhY,GAEFwsB,EAAS,KAAKxsB,CAAK,EAMrB,IAAI48B,EAEA58B,aAAiB,WAEnB48B,EAAO,CAACpQ,CAAQ,EAGhBoQ,EAAOpQ,EAGT,gBAAiBqQ,KAAOD,EAAM,CAC5B,MAAM9O,EAAQ,MAAMgP,GAAUjkB,EAAM8jB,EAAcE,CAAG,EAErD,GAAIn5B,EAAQ,WAAa,GACvB,UAAW4D,KAAOwmB,EAAO,CACvB,IAAIiP,EAAc,GAElB,GAAI,CACE,MAAMlkB,EAAK,OAAO,IAAIvR,CAAG,GAC3Bma,GAAI,gBAAgBna,CAAG,EAAE,EACzB,MAAMuR,EAAK,KAAK,eAAevR,CAAG,GAElCy1B,EAAc,6BAEjB,OAA2B7sB,EAAK,CAC/B6sB,EAAc7sB,EAAI,OACnB,CAED,KAAM,CAAE,KAAM,CAAE,IAAA5I,EAAK,YAAAy1B,CAAW,CAAI,CACrC,CAEJ,CACP,QAAc,CACRlc,EAAS,CACV,CACF,CAED,OAAO5J,EAAkBwlB,CAAS,CACpC,CAQA,eAAeK,GAAWjkB,EAAMnV,EAAS1H,EAAQ,CAC/C,MAAMsiB,EAAS,MAAM0e,GAAiB,aAAahhC,CAAM,EACnD8xB,EAAQ,MAAMxP,EAAO,SAAU,EAErC,aAAMwH,GACJjN,EAAK,OAAO,QACV+S,GAAItN,EAAQ,CAAC,CAAE,IAAK5E,EAAK,MAAO1Z,MAC9ByhB,GAAI,gBAAgB/H,CAAG,EAAE,EAElB,CAAE,IAAAA,EAAK,MAAA1Z,CAAO,EACtB,EACD,CAAE,OAAQ0D,EAAQ,MAAQ,CAC3B,CACF,EAEMoqB,CACT,CChGO,SAASzC,GAAW,CAAE,KAAAxS,EAAM,OAAA/N,EAAQ,QAAA6P,EAAS,QAAAN,CAAO,EAAI,CAI7D,eAAeiR,EAAK2R,EAASv5B,EAAU,GAAI,CACzC,MAAMmd,EAAUnd,EAAQ,IAAM,MAAMmV,EAAK,OAAO,SAAQ,EAAK,KAE7D,GAAI,CACF,MAAMqkB,EAAa,MAAMpyB,EAAO,SAASpH,EAAQ,YAAc,UAAU,EAEzE,GAAI,CAACw5B,EACH,MAAM,IAAI,MAAM,sBAAsBx5B,EAAQ,UAAU,kEAAkE,EAG5H,GAAIA,EAAQ,WAAY,CACtB,GAAI,EAAEu5B,aAAmB,YACvB,MAAM,IAAI,MAAM,sDAAsD,EAExE,MAAME,EAAa,MAAMryB,EAAO,SAASpH,EAAQ,UAAU,EAC3D,GAAI,CAACy5B,EACH,MAAM,IAAI,MAAM,sBAAsBz5B,EAAQ,UAAU,kEAAkE,EAE5Hu5B,EAAUE,EAAW,OAAOF,CAAO,CACpC,CAED,MAAM1R,EAAa7nB,EAAQ,SAAW,KAAOA,EAAQ,QAAU,EACzDqwB,EAAS,MAAMpZ,EAAQ,UAAUjX,EAAQ,SAAW,UAAU,EAEpE,GAAI,CAACqwB,EACH,MAAM,IAAI,MAAM,0BAA0BrwB,EAAQ,OAAO,uEAAuE,EAGlI,MAAMqB,EAAMm4B,EAAW,OAAOD,CAAO,EAC/BzuB,EAAO,MAAMulB,EAAO,OAAOhvB,CAAG,EAC9BuC,EAAME,EAAI,OAAO+jB,EAAY2R,EAAW,KAAM1uB,CAAI,EAExD,aAAMqK,EAAK,OAAO,IAAIvR,EAAKvC,EAAK,CAC9B,OAAQrB,EAAQ,MACxB,CAAO,EAEGA,EAAQ,KACV,MAAMmV,EAAK,KAAK,eAAevR,CAAG,EAGhC5D,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGNA,CACb,QAAc,CACJuZ,GACFA,EAAS,CAEZ,CACF,CAED,OAAO5J,EAAkBqU,CAAG,CAC9B,CCzDO,SAASlM,GAAe,CAAE,KAAAvG,EAAM,OAAA/N,EAAQ,QAAAuP,CAAO,EAAI,CAIxD,eAAe+iB,EAAYtmB,EAAUpT,EAAU,GAAI,CACjD,KAAM,CACJ,IAAA4D,CACN,EAAQ4Q,GAAapB,CAAQ,EAEzB,OAAIpT,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGNsR,GAAYC,EAAM/N,EAAQgM,EAAUpT,CAAO,CACnD,CAED,OAAOuT,EAAkBmmB,CAAU,CACrC,CCrBO,MAAMC,EAAO,CAQlB,YAAa,CAAE,KAAAxkB,EAAM,OAAA/N,EAAQ,QAAA6P,EAAS,QAAAN,CAAO,EAAI,CAC/C,KAAK,OAAS8hB,GAAa,CAAE,KAAAtjB,EAAM,QAAAwB,EAAS,OAAAvP,EAAQ,EACpD,KAAK,IAAMsgB,GAAU,CAAE,OAAAtgB,EAAQ,KAAA+N,EAAM,QAAAwB,EAAS,EAC9C,KAAK,OAASmiB,GAAa,CAAE,KAAA3jB,CAAI,CAAE,EACnC,KAAK,QAAUuG,GAAc,CAAE,KAAAvG,EAAM,OAAA/N,EAAQ,QAAAuP,EAAS,EACtD,KAAK,IAAMgR,GAAU,CAAE,KAAAxS,EAAM,OAAA/N,EAAQ,QAAA6P,EAAS,QAAAN,EAAS,CACxD,CACH,CCpBA,MAAMijB,GAAc,CAACC,EAAGC,IAAMA,EACxBC,GAAS,CAAC/gC,EAAK4R,EAAMa,EAAOuO,IAAS,CAEvC,GAAKA,GAAQ,MAASA,EAAK,aAAe,GACtC,MAAO,SAAShhB,CAAG,IAAI4R,CAAI,GAE/B,IAAIovB,EAAW,MACXC,EAAe,IAAIrvB,CAAI,GAE3B,OADaa,EAAMA,EAAM,OAAS,CAAC,EAC1B,WAAa,QAElBuuB,EAAWpvB,IAAS,MAAQ,QAAU,OACtCqvB,EAAervB,IAAS,OAASA,IAAS,KAAO,GAAKqvB,GAEnD,GAAGD,CAAQ,MAAMhhC,CAAG,GAAGihC,CAAY,EAC9C,EACMC,GAAW,CACb,IAAKN,GACL,IAAK,CAAC5gC,EAAKkwB,EAASpxB,EAAG2T,IAAWA,EAAM,SAAW,GAAKA,EAAM,CAAC,EAAE,WAAa,MACxEyd,EACA,IAAIA,CAAO,IACjB,IAAK,CAAClwB,EAAKkwB,EAASpxB,EAAG2T,EAAOuO,IAAUvO,EAAM,KAAKzN,GAAK,CAAC,OAAQ,QAAS,KAAM,KAAK,EAAE,SAASA,EAAE,QAAQ,CAAC,EACrG,GAAGhF,CAAG,IAAIkwB,CAAO,GACjB6Q,GAAO/gC,EAAKkwB,EAASzd,EAAOuO,CAAI,EACtC,IAAK,CAAChhB,EAAKkwB,IAAY,SAASlwB,CAAG,IAAIkwB,CAAO,GAC9C,QAAS0Q,GACT,KAAMA,GACN,KAAMA,GACN,KAAM,CAAC5gC,EAAKkwB,IAAY,GAAGlwB,CAAG,SAASkwB,CAAO,GAC9C,IAAK,CAAClwB,EAAKkwB,IAAY,GAAGlwB,CAAG,QAAQkwB,CAAO,GAC5C,KAAMlwB,GAAO,UAAUA,CAAG,GAC1B,MAAOA,GAAO,WAAWA,CAAG,GAC5B,GAAIA,GAAO,QAAQA,CAAG,GACtB,IAAKA,GAAO,SAASA,CAAG,GACxB,qBAAsBA,GAAO,GAAGA,CAAG,sBACnC,kBAAmBA,GAAO,GAAGA,CAAG,mBAChC,oBAAqBA,GAAO,GAAGA,CAAG,oBACtC,EACO,SAASmhC,GAAe/+B,EAAO4e,EAAM,CACxC,MAAMjI,EAAKvC,GAAUpU,CAAK,EACpBqQ,EAAQsG,EAAG,SAAU,EAAC,MAAM,GAAG,EAAE,MAAM,CAAC,EAC9C,OAAOA,EACF,OAAQ,EACR,IAAI9C,IAAU,CACf,SAAUxD,EAAM,MAAK,GAAM,GAC3B,QAAUwD,EAAM,CAAC,GAAK,KAAQxD,EAAM,SAAW,GAAK,EAC5D,EAAM,EACG,OAAO,CAACzS,EAAK0S,EAAM,EAAGD,IAAU,CACjC,MAAMwe,EAASiQ,GAASxuB,EAAK,QAAQ,EACrC,GAAIue,GAAU,KACV,MAAM,IAAI,MAAM,wBAAwBve,EAAK,QAAQ,EAAE,EAE3D,OAAOue,EAAOjxB,EAAK0S,EAAK,QAAS,EAAGD,EAAOuO,CAAI,CAClD,EAAE,EAAE,CACT,CCjDA,MAAM+D,GAAMC,EAAO,cAAc,EAG3BjD,GAAQC,GAAO,QAAUA,GAAO,QAAUA,GAI1CC,GAAY,IAAIF,GAAM,CAAE,YAAa,CAAC,CAAE,EAMvC,SAASpE,GAASuB,EAAKlY,EAAU,GAAI,CAC1C+d,OAAAA,GAAI7F,CAAG,EAEA+C,GAAU,IAAI,SAAY,CAI/B,MAAML,GAHM,MAAM7J,GAAK,KAAKmH,EAAK,CAAE,OAAQlY,EAAQ,OAAQ,GAGxC,KAAK,UAAW,EAEnC,GAAI,CACF,OAAa,CACX,KAAM,CAAE,KAAAsU,CAAI,EAAK,MAAMsG,EAAO,KAAM,EACpC,GAAItG,EAAM,MAEX,CACP,QAAc,CACRsG,EAAO,YAAa,CACrB,CACL,CAAG,CACH,CChCA,MAAMmD,GAAMC,EAAO,cAAc,EAK1B,SAASoc,GAAiBp6B,EAAU,GAAI,CAK7C,GAJAA,EAAQ,QAAU,EAAQA,EAAQ,QAClCA,EAAQ,UAAYA,EAAQ,WAAa,CAAE,EAC3CA,EAAQ,MAAQA,EAAQ,OAAS,IAE7B,CAACA,EAAQ,SAAW,CAACA,EAAQ,UAAU,OACzC+d,OAAAA,GAAI,kBAAkB,EAEf,OAAO,OADF,IAAM,CAAE,EACM,CACxB,MAAO,IAAM,CAAE,EACf,KAAM,IAAM,CAAE,CACpB,CAAK,EAGH,IAAIsc,EAAU,GAEVC,EAAW,CAAE,EACjB,MAAMC,EAAUv6B,EAAQ,UAAU,IAAKhH,GAAQmhC,GAAenhC,CAAG,CAAC,EAG5D2K,EAAQ2T,GAAQtX,EAAQ,KAAK,EAK7Bw6B,EAAM,MAAM52B,GAAO,CACvB,GAAI,CACF,GAAIy2B,EACF,MAAM,IAAI,MAAM,WAAWz2B,CAAG,+BAA+B,EAG/D,MAAMuF,EAAOvF,EAAI,SAAU,EAE3B,GAAID,EAAM,IAAIwF,CAAI,EAEhB,OAIFxF,EAAM,IAAIwF,EAAM,EAAI,EAEpB,MAAMsxB,EAAkBC,GAAQH,CAAO,EACvC,IAAII,EAAU,GACd,MAAMC,EAAM,KAAK,IAAK,EAEtB,UAAWC,KAAOJ,EAAiB,CACjC,GAAIJ,EAAS,MAAM,IAAI,MAAM,uBAAuBlxB,CAAI,EAAE,EAE1D,IAAIyK,EAEJ,GAAI,CACFA,EAAa,IAAI,gBACjB0mB,EAAWA,EAAS,OAAO1mB,CAAU,EACrC,MAAM+C,GAAQ,GAAGkkB,CAAG,2BAA2B,mBAAmB1xB,CAAI,CAAC,GAAI,CAAE,OAAQyK,EAAW,MAAM,CAAE,EACxG+mB,EAAU,EACX,OAA2BnuB,EAAK,CAC3BA,EAAI,OAAS,WAAWuR,GAAI,MAAMvR,CAAG,CACnD,QAAkB,CACR8tB,EAAWA,EAAS,OAAOl8B,GAAKA,IAAMwV,CAAU,CACjD,CAED,GAAI+mB,EAAS,KACd,CAED5c,GAAI,GAAG4c,EAAU,GAAK,IAAI,0BAA0BxxB,CAAI,OAAO,KAAK,IAAK,EAAGyxB,CAAG,IAAI,CACpF,OAA2BpuB,EAAK,CAC/BuR,GAAI,MAAMvR,CAAG,CACd,CACF,EAKD,OAAAguB,EAAI,MAAQ,IAAM,CAChBH,EAAU,EACX,EAKDG,EAAI,KAAO,IAAM,CACfH,EAAU,GACVtc,GAAI,YAAYuc,EAAS,MAAM,6BAA6B,EAC5DA,EAAS,QAAQl8B,GAAKA,EAAE,MAAK,CAAE,EAC/Bk8B,EAAW,CAAE,CACd,EAEME,CACT,CCjGA,MAAMzc,GAAMC,EAAO,kBAAkB,EAe9B,SAAS8c,GAAoB,CAAE,QAAAnkB,EAAS,MAAAokB,EAAO,QAAA/6B,EAAU,CAAE,CAAA,EAAI,CAGpE,GAFAA,EAAQ,SAAWA,EAAQ,UAAY,GAAK,IAExC,CAACA,EAAQ,QAAS,CACpB+d,GAAI,sBAAsB,EAC1B,MAAMid,EAAO,SAAY,CAAE,EAC3B,MAAO,CAAE,MAAOA,EAAM,KAAMA,CAAM,CACnC,CAED,IAAI5V,EAAU,GAEV6V,EAEJ,MAAMC,EAAa,SAAY,CAC7B,GAAI,CACF,MAAMC,EAAQ,MAAMJ,EAAM,KAAK,GAAG,EAC5BK,EAAcD,EAAM,IAAI,SAAU,EAEpC/V,IAAYgW,IACdrd,GAAI,+BAA+BqH,CAAO,OAAO+V,EAAM,GAAG,EAAE,EAC5D,MAAMxkB,EAAQwkB,EAAM,GAAG,EACvB/V,EAAUgW,EAEb,OAA2B5uB,EAAK,CAC/BuR,GAAI,MAAM,6BAA8BvR,CAAG,CACjD,QAAc,CACRyuB,EAAY,WAAWC,EAAYl7B,EAAQ,QAAQ,CACpD,CACF,EAED,MAAO,CAIL,MAAM,OAAS,CACb,MAAMm7B,EAAQ,MAAMJ,EAAM,KAAK,GAAG,EAClC3V,EAAU+V,EAAM,IAAI,SAAU,EAC9Bpd,GAAI,uBAAuBod,EAAM,GAAG,EAAE,EACtCF,EAAY,WAAWC,EAAYl7B,EAAQ,QAAQ,CACpD,EAID,MAAQ,CACN,aAAai7B,CAAS,CACvB,CACF,CACH,CCvDA,IAAII,GAKG,SAASC,GAAYC,EAAY,GAAO,CAC7C,GAAIF,GACF,OAAOA,GAGT,MAAMG,EAAQC,GAAQ,CAIpB,cAAeF,CACnB,CAAG,EAEDF,OAAAA,GAAO,CACL,SAAWK,GACF,SAAU1pB,IAAS,CACxB,MAAMye,EAAc,MAAM+K,EAAM,SAAU,EAE1C,GAAI,CACF,OAAO,MAAME,EAAK,MAAM,KAAM1pB,CAAI,CAC5C,QAAkB,CACRye,EAAa,CACd,CACF,EAGH,UAAYiL,GACH,SAAU1pB,IAAS,CACxB,MAAMye,EAAc,MAAM+K,EAAM,UAAW,EAE3C,GAAI,CACF,OAAO,MAAME,EAAK,MAAM,KAAM1pB,CAAI,CAC5C,QAAkB,CACRye,EAAa,CACd,CACF,CAEJ,EAEM4K,EACT,CC7CA,MAAMtd,GAAMC,EAAO,8BAA8B,EAU1C,eAAe2d,GAAarK,EAAStxB,EAAS,CACnD,GAAIA,GAAWA,EAAQ,QAAUA,EAAQ,OAAO,QAC9C,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,cAAe,CAAE,KAAM,UAAW,EAIhF,MAAMgiB,EAAQ,KAAK,UAAU,KAAM,EAGnC,IAAI1tB,EAEJ,GAAI,CACF,MAAMvC,EAAM,MAAMiwB,EAAQ,KAAK,UAAU,IAAI3c,EAAY,EAEzD/Q,EAAME,EAAI,OAAOzC,CAAG,CACrB,OAA2BmL,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,EAGRuR,GAAI,uBAAuB,EAC3B,MAAM1c,EAAMu6B,EAAa,CACvB,KAAM,IAAIh8B,EAAO,CAAE,KAAM,WAAW,CAAE,EAAE,QAAS,EACjD,MAAO,CAAE,CACf,CAAK,EACKkL,EAAO,MAAMpE,GAAO,OAAOrF,CAAG,EAIpC,GAHAuC,EAAME,EAAI,SAASgH,CAAI,EACvB,MAAMwmB,EAAQ,KAAK,OAAO,IAAI1tB,EAAKvC,CAAG,EAElCrB,GAAWA,EAAQ,QAAUA,EAAQ,OAAO,QAC9C,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,cAAe,CAAE,KAAM,UAAW,EAGhF,MAAMgiB,EAAQ,KAAK,UAAU,IAAI3c,GAAc/Q,EAAI,KAAK,CACzD,CAEDma,OAAAA,GAAI,yBAAyBna,CAAG,EAAE,EAE3BA,CACT,CCrDO,SAASkrB,GAAkB3lB,EAAO,GAAI,CAE3C,OAAQA,EACL,KAAM,EACN,MAAM,kBAAkB,GAAK,CAAE,GAC/B,OAAO,OAAO,CACnB,CCJA,MAAMoL,GAAc,OAkFPsnB,GAAY,MAAOvK,EAASnoB,EAAMnJ,IAAY,CACzD,MAAMwqB,EAAO,MAAMmR,GAAYrK,EAAStxB,CAAO,EAI/C,IAAI0V,EAAS,CACX,UAAW,MACZ,EAEGtC,EAAW,GAef,GAbItP,EAAI,MAAMqF,CAAI,EAChBiK,EAAW,SAASjK,CAAI,GAExBiK,EAAWjK,EAAK,SAAU,EAG5BiK,EAAWA,EAAS,KAAM,EAC1BA,EAAWA,EAAS,QAAQ,WAAY,GAAG,EAEvCA,EAAS,SAAS,GAAG,GAAKA,EAAS,OAAS,IAC9CA,EAAWA,EAAS,UAAU,EAAGA,EAAS,OAAS,CAAC,GAGlD,CAACA,EACH,MAAM9D,EAAQ,IAAI,MAAM,yBAAyB,EAAG,aAAa,EAGnE,GAAI8D,EAAS,UAAU,EAAG,CAAC,IAAM,IAC/B,MAAM9D,EAAQ,IAAI,MAAM,uCAAuC,EAAG,kBAAkB,EAGlF8D,EAAS,UAAUA,EAAS,OAAS,CAAC,IAAM,MAC9CA,EAAWA,EAAS,UAAU,EAAGA,EAAS,OAAS,CAAC,GAGtD,MAAMkiB,EAAiBxG,GAAiB1b,CAAQ,EAEhD,GAAIkiB,EAAe,CAAC,IAAM/gB,GAAa,CAErC,IAAIunB,EAEAxG,EAAe,SAAW,EAC5BwG,EAAe,IAAIxG,EAAe,KAAK,GAAG,CAAC,GAE3CwG,EAAe,IAAIxG,EAAe,MAAM,EAAGA,EAAe,OAAS,CAAC,EAAE,KAAK,GAAG,CAAC,GAIjF5f,EAAS,CACP,KAAM,OACN,MAAO4f,EAAe,OAAS,EAC/B,UAAW,OAEX,QAAS,IAAIA,EAAe,KAAK,GAAG,CAAC,GACrC,aAAAwG,EACA,MAAOxG,EACP,KAAM,IAAIA,EAAe,KAAK,GAAG,CAAC,GAClC,KAAMA,EAAeA,EAAe,OAAS,CAAC,CAC/C,CACL,KAAS,CACL,MAAMyG,EAAU,IAAIxnB,EAAW,IAAIiW,CAAI,GAAG8K,EAAe,OAAS,IAAMA,EAAe,KAAK,GAAG,EAAI,EAAE,GAC/FwG,EAAe,IAAIvnB,EAAW,IAAIiW,CAAI,IAAI8K,EAAe,MAAM,EAAGA,EAAe,OAAS,CAAC,EAAE,KAAK,GAAG,CAAC,GAG5G5f,EAAS,CACP,KAAM,MACN,MAAO4f,EAAe,OACtB,UAAW,OAEX,aAAAwG,EACA,QAAAC,EACA,MAAOzG,EACP,KAAM,IAAIA,EAAe,KAAK,GAAG,CAAC,GAClC,KAAMA,EAAeA,EAAe,OAAS,CAAC,CAC/C,CACF,CAED,MAAM0G,EAAUtmB,EAAO,OAAS,MAAQA,EAAO,QAAUA,EAAO,KAEhE,GAAI,CACF,MAAMpU,EAAM,MAAM4zB,GAAS8G,EAAS1K,EAAQ,KAAK,OAAQtxB,CAAO,EAEhE0V,EAAO,IAAMpU,EAAI,IACjBoU,EAAO,QAAU,SAASpU,EAAI,IAAI,GAClCoU,EAAO,UAAYpU,EAAI,KACvBoU,EAAO,QAAUpU,EAAI,SAEhBoU,EAAO,YAAc,QAAUA,EAAO,YAAc,eAAiBpU,EAAI,OAAS,QAAUA,EAAI,OAAS,eAC5GoU,EAAO,OAASpU,EAAI,OAEvB,OAA2BkL,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,CAET,CAED,OAAAkJ,EAAO,OAAS,EAAQA,EAAO,IAExBA,CACT,ECpLM2N,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,eAAe,EAa5BuL,GAAiB,CACrB,UAAW,EACb,EASO,SAAS9C,GAAY6K,EAAS,CAInC,eAAe2K,EAAS9yB,EAAMnJ,EAAU,GAAI,CAE1CA,EAAUqjB,GAAakG,GAAgBvpB,CAAO,EAE9C+d,GAAI,sBAAsB5U,CAAI,EAAE,EAEhC,KAAM,CACJ,KAAAlJ,EACA,IAAA2D,EACA,QAAAm4B,CACD,EAAG,MAAMF,GAAUvK,EAASnoB,EAAMnJ,CAAO,EAEpCk8B,EAAaj8B,IAAS,QAAU2D,EAAMA,EAAMm4B,EAClD,IAAItmB,EAEJ,GAAI,CACFA,EAAO,MAAMyf,GAASgH,EAAY5K,EAAQ,KAAK,MAAM,CACtD,OAA2B9kB,EAAK,CAC/B,MAAIA,EAAI,OAAS,gBACT8C,EAAQ,IAAI,MAAM,GAAGnG,CAAI,iBAAiB,EAAG,eAAe,EAG9DqD,CACP,CAED,GAAI,CAAC2vB,GAAS1mB,EAAK,IAAI,EACrB,MAAM,IAAI,MAAM,qBAAqBA,EAAK,IAAI,IAAI,EAAE,EAGtD,OAAO0mB,GAAS1mB,EAAK,IAAI,EAAEA,CAAI,CAChC,CAED,OAAOlC,EAAkB0oB,CAAO,CAClC,CAGA,MAAME,GAAW,CAIf,IAAM1mB,IACG,CACL,IAAKA,EAAK,IACV,KAAMA,EAAK,KAAK,OAChB,eAAgBA,EAAK,KAAK,OAC1B,OAAQ,EACR,KAAM,OACN,MAAO,OACP,UAAW,OACX,aAAc,EACf,GAKH,KAAOA,GAAS,CAEd,MAAMiR,EAAO,CACX,IAAKjR,EAAK,IACV,KAAM,OACN,KAAMA,EAAK,OAAO,SAAU,EAC5B,eAAgBmmB,EAAanmB,EAAK,IAAI,EAAE,QAAUA,EAAK,KAAK,OAAS,CAAE,GAAE,OAAO,CAACnL,EAAK4hB,IAAS5hB,GAAO4hB,EAAK,OAAS,GAAI,CAAC,EACzH,OAAQzW,EAAK,OAAO,WAAW,OAC/B,MAAO,OACP,UAAW,OACX,aAAc,GACd,KAAMA,EAAK,OAAO,IACnB,EAED,OAAIA,EAAK,OAAO,QACdiR,EAAK,MAAQjR,EAAK,OAAO,OAGpBiR,CACR,EAID,UAAYjR,GAAS,CAEnB,MAAMiR,EAAO,CACX,IAAKjR,EAAK,IACV,KAAM,YACN,KAAM,EACN,eAAgBmmB,EAAanmB,EAAK,IAAI,EAAE,QAAUA,EAAK,KAAK,OAAS,CAAE,GAAE,OAAO,CAACnL,EAAK4hB,IAAS5hB,GAAO4hB,EAAK,OAAS,GAAI,CAAC,EACzH,OAAQzW,EAAK,KAAK,MAAM,OACxB,MAAO,OACP,UAAW,OACX,aAAc,GACd,KAAMA,EAAK,OAAO,IACnB,EAED,OAAIA,EAAK,OAAO,QACdiR,EAAK,MAAQjR,EAAK,OAAO,OAGpBiR,CACR,EAID,OAASjR,IAEA,CACL,IAAKA,EAAK,IACV,KAAMA,EAAK,KAAK,OAChB,eAAgBA,EAAK,KAAK,OAC1B,KAAM,OACN,OAAQ,EACR,MAAO,OACP,UAAW,OACX,aAAc,EACf,GAKH,SAAWA,IAEF,CACL,IAAKA,EAAK,IACV,KAAMA,EAAK,KAAK,OAChB,eAAgBA,EAAK,KAAK,OAC1B,OAAQ,EACR,KAAM,OACN,MAAO,OACP,UAAW,OACX,aAAc,EACf,EAEL,ECpKMsI,GAAMC,EAAO,yBAAyB,EAkBrC,eAAeoe,GAAS9K,EAASnoB,EAAM,CAC5C4U,GAAI,2BAA2B5U,CAAI,EAAE,EAErC,MAAMuM,EAAS,CAAE,EAEjB,gBAAiB2mB,KAAWtH,GAAS5rB,EAAMmoB,EAAQ,KAAK,MAAM,EAC5D5b,EAAO,KAAK,CACV,KAAM2mB,EAAQ,KACd,IAAKA,EAAQ,IACb,KAAMA,EAAQ,KACd,KAAMA,EAAQ,IACpB,CAAK,EAGH,OAAO3mB,CACT,CClBO,MAAM+T,GAAU,MAAOhwB,EAAQiwB,EAAY1pB,IAAY,CACvDA,EAAQ,QACXA,EAAQ,MAAQs8B,IAGbt8B,EAAQ,SACXA,EAAQ,OAAS0G,IAGf1G,EAAQ,aAAe,SACzBA,EAAQ,WAAa,GAGnBA,EAAQ,QAAUs8B,IAASt8B,EAAQ,SAAW0G,KAChD1G,EAAQ,WAAa,GAGvB,MAAMgD,EAAY,MAAMhD,EAAQ,OAAO,OAAOvG,CAAM,EAC9CmK,EAAME,EAAI,OAAO9D,EAAQ,WAAYA,EAAQ,MAAM,KAAMgD,CAAS,EAExE,OAAKhD,EAAQ,UACX,MAAM0pB,EAAW,IAAI9lB,EAAKnK,EAAQ,CAChC,OAAQuG,EAAQ,MACtB,CAAK,EAGI4D,CACT,EC3Ca24B,GAAepT,GAAW,KAC1BqT,GAAiB,EAKvB,eAAelT,GAAYjoB,EAAK,CACrC,OAAQ,MAAM8nB,GAAW,OAAO9nB,CAAG,GAIhC,SAAS,EAAG,CAAC,EAEb,QAAS,CACd,CC+BO,MAAMusB,EAAI,CAKf,YAAaF,EAAO1tB,EAAS,CAC3B,KAAK,QAAUA,GAAW,CAAE,EAC5B,KAAK,KAAO0tB,EAAM,KAClB,KAAK,IAAMA,EAAM,IACjB,KAAK,KAAOA,EAAM,KAClB,KAAK,MAAQA,EAAM,MACnB,KAAK,KAAOA,EAAM,KAClB,KAAK,OAASA,EAAM,OACpB,KAAK,UAAYA,EAAM,UACvB,KAAK,OAASA,EAAM,OACpB,KAAK,KAAOA,EAAM,KAClB,KAAK,MAAQA,EAAM,MAEnB,KAAK,IAAM,OAEX,KAAK,KAAO,MACb,CAMD,MAAM,IAAK/1B,EAAM2E,EAAO,CAAG,CAK3B,IAAK3E,EAAM,CACT,OAAO,QAAQ,QAAQ,IAAI,CAC5B,CAKD,MAAQ,iBAAmB,CAAG,CAK9B,MAAQ,MAAO+xB,EAAY,CAAG,CAChC,CAEO,MAAMmF,WAAmBjB,EAAI,CAKlC,YAAaF,EAAO1tB,EAAS,CAC3B,MAAM0tB,EAAO1tB,CAAO,EAGpB,KAAK,QAAU6tB,GAAW,CACxB,OAAQvE,GACR,KAAMkT,EACZ,CAAK,CACF,CAMD,MAAM,IAAK7kC,EAAM2E,EAAO,CACtB,MAAM,KAAK,QAAQ,IAAI3E,EAAM2E,CAAK,CACnC,CAKD,IAAK3E,EAAM,CACT,OAAO,KAAK,QAAQ,IAAIA,CAAI,CAC7B,CAED,YAAc,CACZ,OAAO,KAAK,QAAQ,UAAW,CAChC,CAED,qBAAuB,CACrB,OAAO,KAAK,QAAQ,cAAe,CACpC,CAED,WAAa,CACX,OAAO,KAAK,QAAQ,UAAW,CAChC,CAED,MAAQ,iBAAmB,CACzB,eAAiB,CAAE,IAAAqe,EAAK,MAAA1Z,CAAK,IAAM,KAAK,QAAQ,iBAC9C,KAAM,CACJ,IAAA0Z,EACA,MAAO1Z,CACR,CAEJ,CAMD,MAAQ,MAAOotB,EAAY,CACzB,MAAQoE,GAAM,KAAK,QAASpE,EAAY,KAAM,KAAK,OAAO,CAC3D,CACH,CASA,eAAiBoE,GAAOC,EAAQrE,EAAYsE,EAAWhuB,EAAS,CAC9D,MAAMirB,EAAW8C,EAAO,UAClBpI,EAAQ,CAAE,EAChB,IAAIsI,EAAe,EAEnB,QAASn2B,EAAI,EAAGA,EAAImzB,EAAS,OAAQnzB,IAAK,CACxC,MAAMozB,EAAQD,EAAS,IAAInzB,CAAC,EAE5B,GAAI,CAACozB,EACH,SAGF,MAAMgD,EAAcp2B,EAAE,SAAS,EAAE,EAAE,cAAc,SAAS,EAAG,GAAG,EAEhE,GAAIozB,aAAiBiD,GAAQ,CAC3B,IAAIC,EAEJ,gBAAiBC,KAAY,MAAMP,GAAM5C,EAAOxB,EAAY,KAAM1pB,CAAO,EACvEouB,EAAQC,EAGV,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,sDAAsD,EAGxEzI,EAAM,KAAK,CACT,KAAMuI,EACN,MAAOE,EAAM,KACb,KAAMA,EAAM,GACpB,CAAO,EACDH,GAAgBG,EAAM,IACvB,SAAU,OAAOlD,EAAM,MAAM,OAAU,WAAY,CAClD,MAAMsC,EAAMtC,EAAM,MAClB,IAAIoD,EAEJ,gBAAiBzP,KAAS2O,EAAI,MAAM9D,CAAU,EAC5C4E,EAAazP,EAEb,MAAMyP,EAGR,MAAMC,EAAQL,EAAchD,EAAM,IAClCvF,EAAM,KAAK,CACT,KAAM4I,EACN,MAAOD,EAAW,KAClB,KAAMA,EAAW,GACzB,CAAO,EAEDL,GAAgBK,EAAW,IACjC,KAAW,CACL,MAAMhyB,EAAQ4uB,EAAM,MAEpB,GAAI,CAAC5uB,EAAM,IACT,SAGF,MAAMiyB,EAAQL,EAAchD,EAAM,IAC5BvyB,EAAO2D,EAAM,KAEnBqpB,EAAM,KAAK,CACT,KAAM4I,EACN,MAAO51B,EACP,KAAM2D,EAAM,GACpB,CAAO,EACD2xB,GAAgBt1B,CACjB,CACF,CAID,MAAM4D,EAAO,WAAW,KAAK0uB,EAAS,SAAQ,EAAG,SAAS,EAUpDrkB,EAAO,CACX,KAVU,IAAIhH,EAAO,CACrB,KAAM,yBACN,KAAArD,EACA,OAAQwxB,EAAO,UAAW,EAC1B,SAAUwO,GACV,MAAOvO,GAAaA,EAAU,MAC9B,KAAMA,GAAaA,EAAU,IACjC,CAAG,EAGW,QAAS,EACnB,MAAOrI,CACR,EACKlsB,EAASpB,EAAO0xB,GAAQnjB,CAAI,CAAC,EAC7BhD,EAAM,MAAM6lB,GAAQhwB,EAAQiwB,EAAY1pB,CAAO,EAC/CrH,EAAOc,EAAO,OAASw0B,EAE7B,KAAM,CACJ,IAAArqB,EACA,KAAAgD,EACA,KAAAjO,CACD,CACH,CC9OA,MAAMolB,GAAMC,EAAO,gCAAgC,EAoBtCye,GAAsB,MAAOnL,EAAS3L,EAAOoI,EAAQ/tB,IAAY,CAC5E,GAAI,CAACA,EAAQ,OAAO,KAClB,MAAM,IAAI,MAAM,4DAA4D,EAI9E,MAAMzD,EAAO,WAAW,KAAKwxB,EAAO,UAAU,SAAQ,EAAG,SAAS,EAC5DnnB,EAAOhH,EAAO,UAAUI,EAAQ,OAAO,IAAI,EAC3CwtB,EAAM,IAAI5tB,EAAO,CACrB,KAAM,yBACN,KAAArD,EACA,OAAQwxB,EAAO,UAAW,EAC1B,SAAUwO,GACV,KAAM31B,EAAK,KACX,MAAOA,EAAK,KAChB,CAAG,EAEKypB,EAAS,MAAMiB,EAAQ,QAAQ,UAAUtxB,EAAQ,OAAO,EACxDwd,EAAS,CACb,KAAMgQ,EAAI,QAAS,EACnB,MAAO7H,EAAM,KAAK,CAACziB,EAAGlJ,KAAOkJ,EAAE,MAAQ,IAAI,cAAclJ,EAAE,MAAQ,EAAE,CAAC,CACvE,EACKqH,EAAMu6B,EAAape,CAAM,EACzB1S,EAAO,MAAMulB,EAAO,OAAOhvB,CAAG,EAC9BuC,EAAME,EAAI,OAAO9D,EAAQ,WAAYiW,EAAYnL,CAAI,EAE3D,OAAI9K,EAAQ,OACV,MAAMsxB,EAAQ,KAAK,OAAO,IAAI1tB,EAAKvC,CAAG,EAGjC,CACL,KAAMmc,EACN,IAAA5Z,EACA,KAAM+hB,EAAM,OAAO,CAACplB,EAAK+C,IAAS/C,GAAO+C,EAAK,OAAS,GAAIjC,EAAI,MAAM,CACtE,CACH,EASaq7B,GAAoB,MAAOpL,EAAS3L,EAAOqL,EAAY2L,EAAcC,IAAqB,CAErG,MAAM7O,EAAS,IAAII,GAAO,CACxB,KAAM6C,EAAW,SAAS,KAC1B,KAAMA,EAAW,SAAS,IAC9B,EAAK2L,EAAcC,CAAgB,EACjC,OAAAD,EAAa,aAAaC,EAAkB7O,CAAM,EAElD,MAAMgD,GAAqBO,EAAS3L,EAAOoI,EAAQiD,CAAU,EAEtDjD,CACT,EAKa8O,GAA2B,MAAOlX,GAAU,CACvD,MAAMoI,EAASF,GAAW,CACxB,OAAQvE,GACR,KAAMkT,EACV,CAAG,EAGD,aAAM,QAAQ,IACZ7W,EAAM,IAAI,MAAMriB,GAAQ,CACtB,MAAM6hB,EAAY7hB,EAAK,MAAQ,GAE/B,GAAI6hB,EAAS,SAAW,EAAG,CACzB,MAAM8L,EAAM,SAAS9L,EAAU,EAAE,EAE3B2X,EAAY,IAAI3O,GAAO,CAC3B,KAAMJ,EAAO,SAAS,KACtB,KAAMA,EAAO,SAAS,IAChC,EAAWA,EAAQkD,CAAG,EACd,OAAAlD,EAAO,aAAakD,EAAK6L,CAAS,EAE3B,QAAQ,QAAS,CACzB,CAED,OAAO/O,EAAO,IAAI5I,EAAS,UAAU,CAAC,EAAG,CACvC,KAAM7hB,EAAK,MACX,IAAKA,EAAK,IAClB,CAAO,CACP,CAAK,CACF,EAEMyqB,CACT,EAQagD,GAAuB,MAAOO,EAAS3L,EAAOoI,EAAQiD,IAAe,CAChF,MAAM,QAAQ,IACZrL,EAAM,IAAI,MAAMriB,GAAQ,CACtB,MAAM6hB,EAAY7hB,EAAK,MAAQ,GAE/B,GAAI6hB,EAAS,SAAW,EAAG,CACzBpH,GAAI,wBAAyBoH,CAAQ,EACrC,MAAM8L,EAAM,SAAS9L,EAAU,EAAE,EAC3BpP,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAIhuB,EAAK,IAAI,EAC/CsD,EAAOm2B,GAAahnB,CAAK,EAEzB+mB,EAAY,IAAI3O,GAAO,CAC3B,KAAM6C,EAAW,SAAS,KAC1B,KAAMA,EAAW,SAAS,IACpC,EAAWjD,EAAQkD,CAAG,EACd,OAAAlD,EAAO,aAAakD,EAAK6L,CAAS,EAElC,MAAM/L,GAAqBO,EAAS1qB,EAAK,MAAOk2B,EAAW9L,CAAU,EAE9D,QAAQ,QAAS,CACzB,CAED,OAAOA,EAAW,IAAI7L,EAAS,UAAU,CAAC,EAAG,CAC3C,KAAM7hB,EAAK,MACX,IAAKA,EAAK,IAClB,CAAO,CACP,CAAK,CACF,CACH,EAKa4tB,GAAYC,GAChBA,EACJ,SAAS,EAAE,EACX,YAAa,EACb,SAAS,EAAG,GAAG,EACf,UAAU,EAAG,CAAC,EAQN6L,GAAe,MAAO1L,EAAS2L,EAAUC,IAAa,CAEjE,MAAMlM,EAAa,MAAM6L,GAAyBK,EAAS,KAAK,EAC1D/L,EAAW,MAAMH,EAAW,qBAAqBiM,CAAQ,EAIzD9zB,EAAO,CAAC,CACZ,OAAQgoB,EAAS,OACjB,OAAQD,GAASC,EAAS,GAAG,CACjC,CAAG,EACD,IAAIgM,EAAgBhM,EAAS,OAE7B,KAAOgM,IAAkBnM,GACvB7nB,EAAK,KAAK,CACR,OAAQg0B,EACR,OAAQjM,GAASiM,EAAc,YAAY,CACjD,CAAK,EAGDA,EAAgBA,EAAc,QAGhCh0B,EAAK,QAAS,EACdA,EAAK,CAAC,EAAE,KAAO+zB,EAGf,QAASplC,EAAI,EAAGA,EAAIqR,EAAK,OAAQrR,IAAK,CACpC,MAAMslC,EAAUj0B,EAAKrR,CAAC,EAEtB,GAAI,CAACslC,EAAQ,KACX,MAAM,IAAI,MAAM,8BAA8B,EAIhD,MAAM95B,EAAO85B,EAAQ,KAAK,MACvB,OAAO95B,IAASA,EAAK,MAAQ,IAAI,UAAU,EAAG,CAAC,IAAM85B,EAAQ,MAAM,EACnE,IAAK,EAGR,GAAI,CAAC95B,EAAM,CAETya,GAAI,QAAQqf,EAAQ,MAAM,GAAGH,CAAQ,gBAAgB,EAErD,QACD,CAGD,GAAI35B,EAAK,OAAS,GAAG85B,EAAQ,MAAM,GAAGH,CAAQ,GAAI,CAChDlf,GAAI,QAAQqf,EAAQ,MAAM,GAAGH,CAAQ,mBAAmB,EAGxD,QACD,CAGDlf,GAAI,kBAAkBqf,EAAQ,MAAM,EAAE,EACtC,MAAMrnB,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAIhuB,EAAK,IAAI,EAC/CsD,EAAOm2B,GAAahnB,CAAK,EAG/B,GAAI,CAAC5M,EAAKrR,EAAI,CAAC,EAAG,CAChBimB,GAAI,uBAAuBqf,EAAQ,MAAM,EAAE,EAE3C,MAAMV,GAAkBpL,EAAS1qB,EAAK,MAAOoqB,EAAYoM,EAAQ,OAAQ,SAASA,EAAQ,OAAQ,EAAE,CAAC,EACrG,MAAMjM,EAAW,MAAMH,EAAW,qBAAqBiM,CAAQ,EAG/D9zB,EAAK,KAAK,CACR,OAAQgoB,EAAS,OACjB,OAAQD,GAASC,EAAS,GAAG,EAC7B,KAAMvqB,CACd,CAAO,EAED,QACD,CAED,MAAMy2B,EAAcl0B,EAAKrR,EAAI,CAAC,EAG9B,MAAMi5B,GAAqBO,EAAS1qB,EAAK,MAAOy2B,EAAY,OAAQrM,CAAU,EAE9EqM,EAAY,KAAOz2B,CACpB,CAED,aAAMoqB,EAAW,IAAIiM,EAAU,EAAI,EAEnC9zB,EAAK,QAAS,EAEP,CACL,WAAA6nB,EACA,KAAA7nB,CACD,CACH,EASam0B,GAAc,MAAOhM,EAASiM,EAAUv9B,EAAU,CAAA,IAAO,CACpE,MAAMouB,EAAQ,IAAIS,GAAW,CAC3B,KAAM,GACN,IAAK,GACL,OAAQ,OACR,UAAW,OACX,KAAM,GACN,MAAO,GACP,KAAM,GACN,MAAO7uB,EAAQ,MACf,KAAMA,EAAQ,IACf,EAAEA,CAAO,EAEV,QAASlI,EAAI,EAAGA,EAAIylC,EAAS,OAAQzlC,IACnC,MAAMs2B,EAAM,QAAQ,IAAImP,EAASzlC,CAAC,EAAE,KAAM,CACxC,KAAMylC,EAASzlC,CAAC,EAAE,KAClB,IAAKylC,EAASzlC,CAAC,EAAE,GACvB,CAAK,EAGH,MAAMwJ,EAAM,MAAM8a,GAAKgS,EAAM,MAAMkD,EAAQ,KAAK,MAAM,CAAC,EAEvD,GAAI,CAAChwB,EACH,MAAM,IAAI,MAAM,kCAAkC,EAGpD,OAAOA,CACT,ECtSMyc,GAAMC,EAAO,8BAA8B,EAwB1C,eAAewf,GAASlM,EAAStxB,EAAS,CAC/C,IAAIwd,EAASxd,EAAQ,OAErB,GAAIA,EAAQ,UAAW,CACrB,MAAMy9B,EAAY35B,EAAI,MAAM9D,EAAQ,SAAS,EAC7C,GAAIy9B,IAAc,KAChB,MAAMnuB,EAAQ,IAAI,MAAM,+BAA+B,EAAG,mBAAmB,EAG/E,GAAImuB,EAAU,OAASxnB,EACrB,MAAM3G,EAAQ,IAAI,MAAM,6CAA6C,EAAG,mBAAmB,EAG7FyO,GAAI,uBAAuB0f,CAAS,EAAE,EACtC,MAAM1nB,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAImM,CAAS,EACrDjgB,EAASuf,GAAahnB,CAAK,CAC5B,CAED,GAAI,CAACyH,EACH,MAAMlO,EAAQ,IAAI,MAAM,yCAAyC,EAAG,gBAAgB,EAGtF,GAAI,CAACtP,EAAQ,IACX,MAAMsP,EAAQ,IAAI,MAAM,gCAAgC,EAAG,kBAAkB,EAG/E,GAAI,CAACtP,EAAQ,KACX,MAAMsP,EAAQ,IAAI,MAAM,iCAAiC,EAAG,mBAAmB,EAGjF,GAAI,CAACtP,EAAQ,MAAQA,EAAQ,OAAS,EACpC,MAAMsP,EAAQ,IAAI,MAAM,iCAAiC,EAAG,mBAAmB,EAGjF,GAAI,CAACkO,EAAO,KACV,MAAMlO,EAAQ,IAAI,MAAM,4CAA4C,EAAG,oBAAoB,EAG7F,MAAMouB,EAAO99B,EAAO,UAAU4d,EAAO,IAAI,EAEzC,OAAIkgB,EAAK,OAAS,0BAChB3f,GAAI,kCAAkC,EAE/B4f,GAAsBrM,EAAS,CACpC,GAAGtxB,EACH,OAAAwd,CACN,CAAK,GAGCA,EAAO,MAAM,QAAUxd,EAAQ,qBACjC+d,GAAI,2CAA2C,EAExC6f,GAA0BtM,EAAS,CACxC,GAAGtxB,EACH,OAAAwd,EACA,MAAOkgB,EAAK,MACZ,KAAMA,EAAK,IACjB,CAAK,IAGH3f,GAAI,UAAU/d,EAAQ,IAAI,KAAKA,EAAQ,GAAG,wBAAwB,EAE3D69B,GAAevM,EAAS,CAC7B,GAAGtxB,EACH,OAAAwd,CACJ,CAAG,EACH,CAeA,MAAMogB,GAA4B,MAAOtM,EAAStxB,IAAY,CAC5D,MAAM0F,EAAS,MAAM43B,GAAYhM,EAAStxB,EAAQ,OAAO,MAAM,IAAIsD,IAAS,CAC1E,KAAOA,EAAK,MAAQ,GACpB,KAAMA,EAAK,OAAS,EACpB,IAAKA,EAAK,IACd,EAAI,EAAE,OAAO,CACT,KAAMtD,EAAQ,KACd,KAAMA,EAAQ,KACd,IAAKA,EAAQ,GACd,CAAA,EAAGA,CAAO,EAEX+d,OAAAA,GAAI,4CAA4CrY,EAAO,GAAG,EAAE,EAErDA,CACT,EAeMm4B,GAAiB,MAAOvM,EAAStxB,IAAY,CAEjD,MAAM89B,EAAc99B,EAAQ,OAAO,MAAM,OAAQsD,GACxCA,EAAK,OAAStD,EAAQ,IAC9B,EAOD,GANA89B,EAAY,KAAK,CACf,KAAM99B,EAAQ,KACd,MAAOA,EAAQ,KACf,KAAMA,EAAQ,GAClB,CAAG,EAEG,CAACA,EAAQ,OAAO,KAClB,MAAMsP,EAAQ,IAAI,MAAM,mDAAmD,EAAG,oBAAoB,EAGpG,MAAM1I,EAAOhH,EAAO,UAAUI,EAAQ,OAAO,IAAI,EAEjD,IAAIzD,EACJ,GAAIqK,EAAK,MAAO,CAEd,MAAMnH,EAAK,KAAK,IAAK,EACfC,EAAO,KAAK,MAAMD,EAAK,GAAI,EAEjCmH,EAAK,MAAQ,CACX,KAAMlH,EACN,OAAQD,EAAMC,EAAO,KAAS,GAC/B,EAEDnD,EAAOqK,EAAK,QAAS,CACzB,MACIrK,EAAOyD,EAAQ,OAAO,KAExBA,EAAQ,OAAS+9B,GAAc,CAC7B,KAAMxhC,EACN,MAAOuhC,CACX,CAAG,EAGD,MAAMzN,EAAS,MAAMiB,EAAQ,QAAQ,UAAUtxB,EAAQ,OAAO,EACxDqB,EAAMu6B,EAAa57B,EAAQ,MAAM,EACjC8K,EAAO,MAAMulB,EAAO,OAAOhvB,CAAG,EAC9BuC,EAAME,EAAI,OAAO9D,EAAQ,WAAYiW,EAAYnL,CAAI,EAE3D,OAAI9K,EAAQ,OACV,MAAMsxB,EAAQ,KAAK,OAAO,IAAI1tB,EAAKvC,CAAG,EAGjC,CACL,KAAMrB,EAAQ,OACd,IAAA4D,EACA,KAAMvC,EAAI,MACX,CACH,EAaMs8B,GAAwB,MAAOrM,EAAStxB,IAAY,CACxD,KAAM,CACJ,MAAAouB,EAAO,KAAAjlB,CACX,EAAM,MAAM60B,GAA0B1M,EAAStxB,CAAO,EAC9C0F,EAAS,MAAM0W,GAAKgS,EAAM,MAAMkD,EAAQ,KAAK,MAAM,CAAC,EAE1D,GAAI,CAAC5rB,EACH,MAAM,IAAI,MAAM,+BAA+B,EAGjD,MAAMqQ,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAI5rB,EAAO,GAAG,EAChDkB,EAAOm2B,GAAahnB,CAAK,EAGzB+nB,EAAc99B,EAAQ,OAAO,MAAM,OAAQsD,IAGvCA,EAAK,MAAQ,IAAI,UAAU,EAAG,CAAC,IAAM6F,EAAK,CAAC,EAAE,MACtD,EAEK80B,EAAUr3B,EAAK,MAClB,KAAKtD,IAASA,EAAK,MAAQ,IAAI,UAAU,EAAG,CAAC,IAAM6F,EAAK,CAAC,EAAE,MAAM,EAEpE,GAAI,CAAC80B,EACH,MAAM,IAAI,MAAM,6BAA6B90B,EAAK,CAAC,EAAE,MAAM,EAAE,EAG/D,OAAA20B,EAAY,KAAKG,CAAO,EAEjBxB,GAAoBnL,EAASwM,EAAa30B,EAAK,CAAC,EAAE,OAAQnJ,CAAO,CAC1E,EAYMg+B,GAA4B,MAAO1M,EAAStxB,IAAY,CAC5D,MAAMyV,EAAO,CACX,KAAMzV,EAAQ,KACd,IAAKA,EAAQ,IACb,KAAMA,EAAQ,IACf,EAED,GAAI,CAACA,EAAQ,OAAO,KAClB,MAAMsP,EAAQ,IAAI,MAAM,8DAA8D,EAAG,oBAAoB,EAI/G,MAAM0hB,EAAa,MAAM6L,GAAyB78B,EAAQ,OAAO,KAAK,EAChE4G,EAAOhH,EAAO,UAAUI,EAAQ,OAAO,IAAI,EAE3CouB,EAAQ,IAAIS,GAAW,CAC3B,KAAM,GACN,IAAK,GACL,OAAQ,OACR,UAAW,OACX,KAAM,GACN,MAAO,GACP,KAAM,GACN,KAAMjoB,EAAK,IACZ,EAAE5G,CAAO,EACVouB,EAAM,QAAU4C,EAEZpqB,EAAK,QAEPwnB,EAAM,MAAQ,CACZ,KAAM,KAAK,MAAM,KAAK,IAAG,EAAK,GAAI,CACnC,GAIH,MAAM+C,EAAW,MAAMH,EAAW,qBAAqBvb,EAAK,IAAI,EAC1DtM,EAAOioB,GAAaD,CAAQ,EAClChoB,EAAK,CAAC,EAAE,KAAOnJ,EAAQ,OACvB,IAAIM,EAAQ,EAEZ,KAAOA,EAAQ6I,EAAK,QAAQ,CAC1B,MAAMi0B,EAAUj0B,EAAK7I,CAAK,EAC1BA,IACA,MAAMsG,EAAOw2B,EAAQ,KAErB,GAAI,CAACx2B,EACH,MAAM,IAAI,MAAM,qBAAqB,EAGvC,MAAMtD,EAAOsD,EAAK,MACf,KAAKtD,IAASA,EAAK,MAAQ,IAAI,UAAU,EAAG,CAAC,IAAM85B,EAAQ,MAAM,EAEpE,GAAI,CAAC95B,EAAM,CAETya,GAAI,QAAQqf,EAAQ,MAAM,GAAG3nB,EAAK,IAAI,gBAAgB,EACtDnV,EAAQ6I,EAAK,OAEb,KACD,CAED,GAAI7F,EAAK,OAAS,GAAG85B,EAAQ,MAAM,GAAG3nB,EAAK,IAAI,GAAI,CAEjDsI,GAAI,QAAQqf,EAAQ,MAAM,GAAG3nB,EAAK,IAAI,mBAAmB,EACzDnV,EAAQ6I,EAAK,OAEb,KACD,CAED,IAAK7F,EAAK,MAAQ,IAAI,OAAS,EAAG,CAEhCya,GAAI,QAAQza,EAAK,IAAI,IAAIA,EAAK,IAAI,mCAAmC,EACrEhD,EAAQ6I,EAAK,OAEb,KACD,CAGD4U,GAAI,kBAAkBqf,EAAQ,MAAM,EAAE,EACtC,MAAMrnB,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAIhuB,EAAK,IAAI,EAC/C+qB,EAAW0O,GAAahnB,CAAK,EAGnC,GAAI,CAAC5M,EAAK7I,CAAK,EAAG,CAChByd,GAAI,uBAAuBqf,EAAQ,MAAM,EAAE,EAC3C,MAAMV,GAAkBpL,EAASjD,EAAS,MAAO2C,EAAYoM,EAAQ,OAAQ,SAASA,EAAQ,OAAQ,EAAE,CAAC,EAEzG,MAAMjM,EAAW,MAAMH,EAAW,qBAAqBvb,EAAK,IAAI,EAEhEtM,EAAK,KAAK,CACR,OAAQgoB,EAAS,OACjB,OAAQD,GAASC,EAAS,GAAG,EAC7B,KAAM9C,CACd,CAAO,EAED,KACD,CAED,MAAMgP,EAAcl0B,EAAK7I,CAAK,EAG9B,MAAMywB,GAAqBO,EAASjD,EAAS,MAAOgP,EAAY,OAAQrM,CAAU,EAElFqM,EAAY,KAAOhP,CACpB,CAGD,aAAMD,EAAM,QAAQ,IAAI3Y,EAAK,KAAM,CACjC,KAAMA,EAAK,KACX,IAAKA,EAAK,GACd,CAAG,EAEM,CACL,MAAA2Y,EAAO,KAAAjlB,CACR,CACH,EAMMioB,GAAgBD,GAAa,CACjC,MAAMhoB,EAAO,CAAC,CACZ,OAAQgoB,EAAS,OACjB,OAAQD,GAASC,EAAS,GAAG,CACjC,CAAG,EAED,IAAIpD,EAASoD,EAAS,OAAO,QACzB+M,EAAmB/M,EAAS,OAAO,aAEvC,KAAOpD,GACL5kB,EAAK,KAAK,CACR,OAAA4kB,EACA,OAAQmD,GAASgN,CAAgB,CACvC,CAAK,EAEDA,EAAmBnQ,EAAO,aAC1BA,EAASA,EAAO,QAGlB,OAAA5kB,EAAK,QAAS,EAEPA,CACT,ECzYM4U,GAAMC,EAAO,4BAA4B,EAEzCuL,GAAiB,CACrB,oBAAqB,GACvB,EAoBO,eAAe4U,GAAY7M,EAAS8M,EAAOp+B,EAAS,CACzDA,EAAU,OAAO,OAAO,CAAA,EAAIupB,GAAgBvpB,CAAO,EAEnD+d,GAAI,QAASqgB,CAAK,EAClBA,EAAQA,EAAM,MAAO,EAAC,QAAS,EAE/B,IAAI99B,EAAQ,EACR4qB,EAEJ,gBAAiBnV,KAASub,EAAQ,KAAK,OAAO,QAAQ8M,EAAM,IAAIx3B,GAAQA,EAAK,GAAG,CAAC,EAAG,CAClF,MAAMA,EAAOrN,GAAOwc,CAAK,EACnBnS,EAAMw6B,EAAM99B,CAAK,EAAE,IACnB3I,EAAOymC,EAAM99B,CAAK,EAAE,KAG1B,GAFAA,IAEI,CAAC4qB,EAAO,CACVA,EAAQ,CACN,IAAAtnB,EACA,KAAAjM,EACA,KAAMoe,EAAM,MACb,EAED,QACD,CAGD,MAAMrQ,EAAS,MAAM83B,GAAQlM,EAAS,CACpC,OAAQ1qB,EACR,KAAMskB,EAAM,KACZ,IAAKA,EAAM,IAEX,KAAMA,EAAM,KACZ,MAAOlrB,EAAQ,MACf,oBAAqBA,EAAQ,oBAC7B,QAASA,EAAQ,QACjB,WAAYA,EAAQ,UAC1B,CAAK,EAGDkrB,EAAQ,CACN,IAAKxlB,EAAO,IACZ,KAAA/N,EAEA,KAAM+N,EAAO,IACd,CACF,CAGD,KAAM,CAAE,IAAA9B,CAAG,EAAKsnB,EAChBnN,OAAAA,GAAI,aAAana,CAAG,EAAE,EAEfA,CACT,CC5EA,MAAMma,GAAMC,EAAO,gCAAgC,EAW5C,eAAeqgB,GAAe/M,EAAS1tB,EAAK5D,EAAS,CAC1D,GAAIA,GAAWA,EAAQ,QAAUA,EAAQ,OAAO,QAC9C,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,cAAe,CAAE,KAAM,UAAW,EAGhFyO,OAAAA,GAAI,wBAAwBna,CAAG,EAAE,EAEjC,MAAM0tB,EAAQ,KAAK,UAAU,IAAI3c,GAAc/Q,EAAI,KAAK,EAEjDA,CACT,CCPO,eAAe06B,GAAYhN,EAASrxB,EAAMD,EAAS,CACxD,MAAMid,EAAW,IAAIrd,EAAO,CAC1B,KAAAK,EACA,KAAMD,EAAQ,KACd,MAAOA,EAAQ,KACnB,CAAG,EAGKqwB,EAAS,MAAMiB,EAAQ,QAAQ,UAAUtxB,EAAQ,OAAO,EACxD4G,EAAO,CACX,KAAMqW,EAAS,QAAS,EACxB,MAAO,CAAE,CACV,EACK5b,EAAMu6B,EAAah1B,CAAI,EACvBkE,EAAO,MAAMulB,EAAO,OAAOhvB,CAAG,EAC9BuC,EAAME,EAAI,OAAO9D,EAAQ,WAAYiW,EAAYnL,CAAI,EAE3D,OAAI9K,EAAQ,OACV,MAAMsxB,EAAQ,KAAK,OAAO,IAAI1tB,EAAKvC,CAAG,EAGjC,CACL,IAAAuC,EACA,KAAAgD,CACD,CACH,CCjCA,MAAMyc,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,gBAAgB,EAuB7BuL,GAAiB,CACrB,QAAS,GACT,QAAS,WACT,WAAY,EACZ,oBAAqB,IACrB,MAAO,EACT,EAKO,SAASgV,GAAajN,EAAS,CAIpC,eAAekN,EAAUr1B,EAAMnJ,EAAU,GAAI,CAE3C,MAAMga,EAAOqJ,GAAakG,GAAgBvpB,CAAO,EAEjD,GAAI,CAACmJ,EACH,MAAM,IAAI,MAAM,wBAAwB,EAK1C,GAFAA,EAAOA,EAAK,KAAM,EAEdA,IAAS,IAAK,CAChB,GAAI6Q,EAAK,QACP,OAGF,MAAM1K,EAAQ,IAAI,MAAM,6CAA+C,EAAG,kBAAkB,CAC7F,CAED,GAAInG,EAAK,UAAU,EAAG,CAAC,IAAM,IAC3B,MAAMmG,EAAQ,IAAI,MAAM,uCAAuC,EAAG,kBAAkB,EAGtFyO,GAAI,YAAY5U,CAAI,EAAE,EAEtB,MAAMmsB,EAAiBxG,GAAiB3lB,CAAI,EAE5C,GAAImsB,EAAe,CAAC,IAAM,OACxB,MAAMhmB,EAAQ,IAAI,MAAM,oCAAoC,EAAG,kBAAkB,EAGnF,MAAMkb,EAAO,MAAMmR,GAAYrK,EAAStX,CAAI,EAC5C,IAAIwD,EACJ,MAAM4gB,EAAQ,CAAE,EACVK,EAAW,MAAMH,GAAWhN,EAAS,YAAatX,CAAI,EAG5D,QAASliB,EAAI,EAAGA,GAAKw9B,EAAe,OAAQx9B,IAAK,CAC/C,MAAM4mC,EAAoBpJ,EAAe,MAAM,EAAGx9B,CAAC,EAC7Cu8B,EAAU,SAAS7J,CAAI,IAAIkU,EAAkB,KAAK,GAAG,CAAC,GAE5D,GAAI,CAGF,GAFAlhB,EAAS,MAAM0X,GAASb,EAAS/C,EAAQ,KAAK,MAAM,EAEhD9T,EAAO,OAAS,QAAUA,EAAO,OAAS,YAC5C,MAAMlO,EAAQ,IAAI,MAAM,GAAGnG,CAAI,wBAAwB,EAAG,gBAAgB,EAG5E,GAAIrR,IAAMw9B,EAAe,OAAQ,CAC/B,GAAItb,EAAK,QACP,OAGF,MAAM1K,EAAQ,IAAI,MAAM,qBAAqB,EAAG,oBAAoB,CACrE,CAED8uB,EAAM,KAAK,CACT,KAAM5gB,EAAO,KACb,IAAKA,EAAO,GACtB,CAAS,CACF,OAA2BhR,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBAAiB,CAChC,GAAI1U,EAAIw9B,EAAe,QAAU,CAACtb,EAAK,QACrC,MAAM1K,EAAQ,IAAI,MAAM,+BAA+B+kB,CAAO,+CAA+C,EAAG,eAAe,EAIjI,MAAMsK,GAAYrN,EAASoN,EAAkBA,EAAkB,OAAS,CAAC,EAAGD,EAAUL,EAAMA,EAAM,OAAS,CAAC,EAAGA,EAAOpkB,CAAI,CACpI,KACU,OAAMxN,CAET,CACF,CAMD,MAAMoyB,EAAa,MAAMT,GAAW7M,EAAS8M,EAAOpkB,CAAI,EAGxD,MAAMqkB,GAAc/M,EAASsN,EAAY5kB,CAAI,CAC9C,CAED,OAAOzG,EAAkBirB,CAAQ,CACnC,CAUA,MAAMG,GAAc,MAAOrN,EAASuN,EAAWJ,EAAUjhB,EAAQ4gB,EAAOp+B,IAAY,CAClF+d,GAAI,2BAA2B8gB,CAAS,OAAOrhB,EAAO,GAAG,EAAE,EAE3D,MAAM9X,EAAS,MAAM83B,GAAQlM,EAAS,CACpC,OAAQ9T,EAAO,KACf,UAAWA,EAAO,IAElB,KAAM,EACN,IAAKihB,EAAS,IACd,KAAMI,EACN,QAAS7+B,EAAQ,QACjB,WAAYA,EAAQ,WACpB,MAAOA,EAAQ,MACf,oBAAqBA,EAAQ,mBACjC,CAAG,EAEDo+B,EAAMA,EAAM,OAAS,CAAC,EAAE,IAAM14B,EAAO,IAErC04B,EAAM,KAAK,CACT,KAAMS,EACN,IAAKJ,EAAS,GAClB,CAAG,CACH,EC3JMpb,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,aAAa,EAuB1BuL,GAAiB,CACrB,QAAS,GACT,MAAO,GACP,QAAS,WACT,WAAY,EACZ,oBAAqB,GACvB,EAKO,SAASuV,GAAUxN,EAAS,CAIjC,eAAeyN,EAAOpjC,EAAMqjC,EAAIhlB,EAAO,CAAA,EAAI,CAEzC,MAAMha,EAAUqjB,GAAakG,GAAgBvP,CAAI,EAE5C,MAAM,QAAQre,CAAI,IACrBA,EAAO,CAACA,CAAI,GAGd,MAAMq9B,EAAU,MAAM,QAAQ,IAC5Br9B,EAAK,IAAiCwN,GAAS0yB,GAAUvK,EAASnoB,EAAMnJ,CAAO,CAAC,CACjF,EACD,IAAIi/B,EAAc,MAAMpD,GAAUvK,EAAS0N,EAAIh/B,CAAO,EAEtD,GAAI,CAACg5B,EAAQ,QAAU,CAACiG,EACtB,MAAM3vB,EAAQ,IAAI,MAAM,mCAAmC,EAAG,oBAAoB,EAIpF,MAAM4vB,EAAUlG,EAAQ,KAAK1gC,GAAU,CAACA,EAAO,MAAM,EAErD,GAAI4mC,EACF,MAAM5vB,EAAQ,IAAI,MAAM,GAAG4vB,EAAQ,IAAI,iBAAiB,EAAG,oBAAoB,EAGjF,MAAMC,EAAyBC,GAAYH,CAAW,EAEtD,GAAIA,EAAY,QAGd,GAFAlhB,GAAI,oBAAoB,EAEpBib,EAAQ,SAAW,GAAK,CAACmG,EAC3B,MAAM7vB,EAAQ,IAAI,MAAM,0CAA0C,EAAG,oBAAoB,UAG3FyO,GAAI,4BAA4B,EAE5Bib,EAAQ,OAAS,EAAG,CAEtB,GAAI,CAACh5B,EAAQ,QACX,MAAMsP,EAAQ,IAAI,MAAM,uEAAuE,EAAG,oBAAoB,EAGxH,MAAMivB,GAAYjN,CAAO,EAAE2N,EAAY,KAAMj/B,CAAO,EACpDi/B,EAAc,MAAMpD,GAAUvK,EAAS2N,EAAY,KAAMj/B,CAAO,CACjE,SAAUi/B,EAAY,MAAM,OAAS,EAAG,CAEvC,MAAMI,EAAe,IAAIJ,EAAY,MAAM,MAAM,EAAG,EAAE,EAAE,KAAK,GAAG,CAAC,GAEjE,GAAI,CACF,MAAMxY,GAAW6K,CAAO,EAAE+N,EAAcr/B,CAAO,CAChD,OAA2BwM,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,EAGR,GAAI,CAACxM,EAAQ,QACX,MAAMsP,EAAQ,IAAI,MAAM,uEAAuE,EAAG,oBAAoB,EAGxH,MAAMivB,GAAYjN,CAAO,EAAE+N,EAAcr/B,CAAO,EAChDi/B,EAAc,MAAMpD,GAAUvK,EAAS2N,EAAY,KAAMj/B,CAAO,CACjE,CACF,CAGH,MAAMs/B,EAAkBF,GAAYH,CAAW,EAAIA,EAAY,QAAUA,EAAY,aAC/Eb,EAAQ,MAAMhC,GAAQ9K,EAASgO,CAAe,EAEpD,GAAItG,EAAQ,SAAW,EAAG,CACxB,MAAM1gC,EAAS0gC,EAAQ,IAAK,EAE5B,GAAI,CAAC1gC,EACH,MAAMgX,EAAQ,IAAI,MAAM,uBAAuB,EAAG,oBAAoB,EAGxE,MAAMiwB,EAAkBJ,EAAyB7mC,EAAO,KAAO2mC,EAAY,KAE3ElhB,OAAAA,GAAI,2CAA2CohB,EAAyB,YAAc,MAAM,IAAII,CAAe,EAAE,EAE1GC,GAAWlO,EAASh5B,EAAQinC,EAAiBnB,EAAOp+B,CAAO,CACnE,CAED+d,OAAAA,GAAI,2CAA2C,EACxC0hB,GAAgBnO,EAAS0H,EAASiG,EAAab,EAAOp+B,CAAO,CACrE,CAED,OAAOuT,EAAkBwrB,CAAK,CAChC,CAKA,MAAMK,GAAeH,GACZA,EAAY,QACjBA,EAAY,OAAO,MACnBA,EAAY,OAAO,KAAK,SAAS,WAAW,EAU1CO,GAAa,MAAOlO,EAASh5B,EAAQ2mC,EAAaS,EAAkB1/B,IAAY,CACpF,IAAIwd,EAASkiB,EAAiB,IAAK,EAEnC,GAAI,CAACliB,EACH,MAAMlO,EAAQ,IAAI,MAAM,2BAA2B,EAAG,oBAAoB,EAG5EkO,EAAS,MAAMmiB,GAAkBrO,EAASh5B,EAAQ2mC,EAAazhB,EAAQxd,CAAO,EAG9E0/B,EAAiB,KAAKliB,CAAM,EAE5B,MAAMohB,EAAa,MAAMT,GAAW7M,EAASoO,EAAkB1/B,CAAO,EAGtE,MAAMq+B,GAAc/M,EAASsN,EAAY5+B,CAAO,CAClD,EASMy/B,GAAkB,MAAOnO,EAAS0H,EAASiG,EAAaS,EAAkB1/B,IAAY,CAE1F,QAAS,EAAI,EAAG,EAAIg5B,EAAQ,OAAQ,IAAK,CACvC,MAAM1gC,EAAS0gC,EAAQ,CAAC,EAExBiG,EAAc,MAAMU,GAAkBrO,EAASh5B,EAAQA,EAAO,KAAM2mC,EAAaj/B,CAAO,CACzF,CAGD0/B,EAAiBA,EAAiB,OAAS,CAAC,EAAIT,EAEhD,MAAML,EAAa,MAAMT,GAAW7M,EAASoO,EAAkB1/B,CAAO,EAGtE,MAAMq+B,GAAc/M,EAASsN,EAAY5+B,CAAO,CAClD,EAUM2/B,GAAoB,MAAOrO,EAASh5B,EAAQumC,EAAWrhB,EAAQxd,IAAY,CAC/E,MAAM4/B,EAAc,MAAMtO,EAAQ,KAAK,OAAO,IAAIh5B,EAAO,GAAG,EACtD,CACJ,KAAAsO,EACA,IAAAhD,EACA,KAAAjL,CACJ,EAAM,MAAM6kC,GAAQlM,EAAS,CACzB,UAAW9T,EAAO,IAClB,KAAMoiB,EAAY,OAClB,IAAKtnC,EAAO,IACZ,KAAMumC,EACN,QAAS7+B,EAAQ,QACjB,WAAYA,EAAQ,WACpB,MAAOA,EAAQ,MACf,oBAAqBA,EAAQ,mBACjC,CAAG,EAED,OAAAwd,EAAO,KAAO5W,EACd4W,EAAO,IAAM5Z,EACb4Z,EAAO,KAAO7kB,EAEP6kB,CACT,ECxNMO,GAAMC,EAAO,iCAAiC,EA8B7C,eAAe6hB,GAAYvO,EAAStxB,EAAS,CAClD,IAAIwd,EAASxd,EAAQ,OAErB,GAAIA,EAAQ,UAAW,CACrB,MAAMy9B,EAAY35B,EAAI,MAAM9D,EAAQ,SAAS,EAC7C,GAAIy9B,IAAc,KAChB,MAAMnuB,EAAQ,IAAI,MAAM,kCAAkC,EAAG,mBAAmB,EAGlFyO,GAAI,uBAAuB0f,CAAS,EAAE,EACtC,MAAM1nB,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAImM,CAAS,EACrDjgB,EAASuf,GAAahnB,CAAK,CAC5B,CAED,GAAI,CAACyH,EACH,MAAMlO,EAAQ,IAAI,MAAM,4CAA4C,EAAG,gBAAgB,EAGzF,GAAI,CAACtP,EAAQ,KACX,MAAMsP,EAAQ,IAAI,MAAM,oCAAoC,EAAG,mBAAmB,EAGpF,GAAI,CAACkO,EAAO,KACV,MAAMlO,EAAQ,IAAI,MAAM,yBAAyB,EAAG,kBAAkB,EAKxE,OAFa1P,EAAO,UAAU4d,EAAO,IAAI,EAEhC,OAAS,0BAChBO,GAAI,YAAY/d,EAAQ,IAAI,yBAAyB,EAE9C8/B,GAA2BxO,EAAS,CACzC,GAAGtxB,EACH,OAAAwd,CACN,CAAK,IAGHO,GAAI,iBAAiB/d,EAAQ,IAAI,oBAAoB,EAE9C+/B,GAAoBzO,EAAS,CAClC,GAAGtxB,EACH,OAAAwd,CACJ,CAAG,EACH,CAMA,MAAMuiB,GAAsB,MAAOzO,EAAStxB,IAAY,CAEtDA,EAAQ,OAAO,MAAQA,EAAQ,OAAO,MAAM,OAAQsD,GAC3CA,EAAK,OAAStD,EAAQ,IAC9B,EAED,MAAMggC,EAAc,MAAMpE,EAAa57B,EAAQ,MAAM,EAE/C8K,EAAO,MADE,MAAMwmB,EAAQ,QAAQ,UAAUtxB,EAAQ,OAAO,GACpC,OAAOggC,CAAW,EACtCvC,EAAY35B,EAAI,OAAO9D,EAAQ,WAAYiW,EAAYnL,CAAI,EAEjE,aAAMwmB,EAAQ,KAAK,OAAO,IAAImM,EAAWuC,CAAW,EAEpDjiB,GAAI,6BAA6B0f,CAAS,EAAE,EAErC,CACL,KAAMz9B,EAAQ,OACd,IAAKy9B,CACN,CACH,EAMMqC,GAA6B,MAAOxO,EAAStxB,IAAY,CAC7D,KAAM,CACJ,WAAAgxB,EAAY,KAAA7nB,CAChB,EAAM,MAAM6zB,GAAa1L,EAAStxB,EAAQ,KAAMA,EAAQ,MAAM,EAE5D,MAAMgxB,EAAW,IAAIhxB,EAAQ,IAAI,EAEjC,KAAM,CACJ,KAAA4G,CACJ,EAAM,MAAMq5B,GAAY3O,EAASnoB,EAAMnJ,EAAQ,KAAMA,CAAO,EAE1D,OAAOy8B,GAAoBnL,EAAS1qB,EAAK,MAAOoqB,EAAYhxB,CAAO,CACrE,EASMigC,GAAc,MAAO3O,EAAS4O,EAAWvoC,EAAMqI,IAAY,CAC/D,MAAMoc,EAAO8jB,EAAU,IAAK,EAE5B,GAAI,CAAC9jB,EACH,MAAM9M,EAAQ,IAAI,MAAM,uBAAuB,EAAG,gBAAgB,EAGpE,KAAM,CACJ,OAAAye,EACA,OAAArzB,EACA,KAAAkM,CACJ,EAAMwV,EAEJ,GAAI,CAACxV,EACH,MAAM0I,EAAQ,IAAI,MAAM,uBAAuB,EAAG,gBAAgB,EAGpE,MAAMhM,EAAOsD,EAAK,MACf,KAAKtD,IAASA,EAAK,MAAQ,IAAI,UAAU,EAAG,CAAC,IAAM5I,CAAM,EAE5D,GAAI,CAAC4I,EACH,MAAMgM,EAAQ,IAAI,MAAM,6BAA6B5U,CAAM,aAAa/C,CAAI,EAAE,EAAG,eAAe,EAGlG,GAAI2L,EAAK,OAAS,GAAG5I,CAAM,GAAG/C,CAAI,GAAI,CACpComB,GAAI,0BAA0Bza,EAAK,IAAI,EAAE,EAEzC,MAAMqiB,EAAQ/e,EAAK,MAAM,OAAQu5B,GACxBA,EAAS,OAAS78B,EAAK,IAC/B,EAED,aAAMyqB,EAAO,IAAIp2B,CAAI,EAEd8kC,GAAoBnL,EAAS3L,EAAOoI,EAAQ/tB,CAAO,CAC3D,CAED+d,GAAI,6BAA6Bza,EAAK,IAAI,QAAQ5I,CAAM,GAAG/C,CAAI,EAAE,EAEjE,MAAM+N,EAAS,MAAMu6B,GAAY3O,EAAS4O,EAAWvoC,EAAMqI,CAAO,EAElE,IAAI4D,EAAM8B,EAAO,IACb/M,EAAO+M,EAAO,KACd06B,EAAU1lC,EAEd,GAAIgL,EAAO,KAAK,MAAM,SAAW,EAAG,CAClCqY,GAAI,yBAAyBrjB,CAAM,EAAE,EAGrC,MAAM4I,EAAOoC,EAAO,KAAK,MAAM,CAAC,EAEhC06B,EAAU,GAAG1lC,CAAM,IAAI4I,EAAK,MAAQ,IAAI,UAAU,CAAC,CAAC,GACpDM,EAAMN,EAAK,KACX3K,EAAO2K,EAAK,OAAS,CACtB,CAEDya,OAAAA,GAAI,kBAAkBrjB,CAAM,cAAc0lC,CAAO,EAAE,EAE5CC,GAAkB/O,EAASvD,EAAQnnB,EAAMlM,EAAQ0lC,EAASznC,EAAMiL,EAAK5D,CAAO,CACrF,EAYMqgC,GAAoB,CAAC/O,EAASvD,EAAQvQ,EAAQ8iB,EAASF,EAASznC,EAAMiL,EAAK5D,IAAY,CAE3F,MAAM89B,EAActgB,EAAO,MAAM,OAAQla,GAChCA,EAAK,OAASg9B,CACtB,EACD,OAAAxC,EAAY,KAAK,CACf,KAAMsC,EACN,MAAOznC,EACP,KAAMiL,CACV,CAAG,EAEM64B,GAAoBnL,EAASwM,EAAa/P,EAAQ/tB,CAAO,CAClE,ECjNMqjB,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAkBvDiG,GAAiB,CACrB,UAAW,GACX,WAAY,EACZ,QAAS,WACT,MAAO,GACP,oBAAqB,GACvB,EAKO,SAAS9L,GAAU6T,EAAS,CAIjC,eAAeiP,EAAO9b,EAAOzK,EAAO,GAAI,CAEtC,MAAMha,EAAUqjB,GAAakG,GAAgBvP,CAAI,EAE5C,MAAM,QAAQyK,CAAK,IACtBA,EAAQ,CAACA,CAAK,GAGhB,MAAMuU,EAAU,MAAM,QAAQ,IAC5BvU,EAAM,IAAItb,GAAQ0yB,GAAUvK,EAASnoB,EAAMnJ,CAAO,CAAC,CACpD,EAED,GAAI,CAACg5B,EAAQ,OACX,MAAM1pB,EAAQ,IAAI,MAAM,2CAA2C,EAAG,oBAAoB,EAG5F0pB,EAAQ,QAAQ1gC,GAAU,CACxB,GAAIA,EAAO,OAAS,IAClB,MAAMgX,EAAQ,IAAI,MAAM,oBAAoB,EAAG,oBAAoB,CAE3E,CAAK,EAED,UAAWhX,KAAU0gC,EACnB,MAAMwH,GAAWlP,EAASh5B,EAAO,KAAM0H,CAAO,CAEjD,CAED,OAAOuT,EAAkBgtB,CAAK,CAChC,CAOA,MAAMC,GAAa,MAAOlP,EAASnoB,EAAMnJ,IAAY,CACnD,MAAM+7B,EAAU,MAAMF,GAAUvK,EAASnoB,EAAMnJ,CAAO,EAChDo+B,EAAQ,MAAMhC,GAAQ9K,EAASyK,EAAQ,OAAO,EAC9C7Q,EAAQkT,EAAMA,EAAM,OAAS,CAAC,EACpCA,EAAM,IAAK,EACX,MAAM5gB,EAAS4gB,EAAMA,EAAM,OAAS,CAAC,EAErC,GAAI,CAAC5gB,EACH,MAAMlO,EAAQ,IAAI,MAAM,GAAGnG,CAAI,iBAAiB,EAAG,eAAe,EAGpE,GAAI+hB,EAAM,OAAS,aAAe,CAAClrB,EAAQ,UACzC,MAAMsP,EAAQ,IAAI,MAAM,GAAGnG,CAAI,+CAA+C,EAAG,aAAa,EAGhG,KAAM,CACJ,IAAAvF,CACJ,EAAM,MAAMi8B,GAAWvO,EAAS,CAC5B,UAAW9T,EAAO,IAClB,KAAM0N,EAAM,KACZ,QAASlrB,EAAQ,QACjB,WAAYA,EAAQ,WACpB,MAAOA,EAAQ,MACf,oBAAqBA,EAAQ,mBACjC,CAAG,EAEDwd,EAAO,IAAM5Z,EAGb,MAAMg7B,EAAa,MAAMT,GAAW7M,EAAS8M,EAAOp+B,CAAO,EAG3D,MAAMq+B,GAAc/M,EAASsN,EAAY5+B,CAAO,CAClD,EC1FMqjB,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,gBAAgB,EAoB7BuL,GAAiB,CACrB,MAAO,GACP,oBAAqB,IACrB,QAAS,WACT,WAAY,EACZ,UAAW,EACb,EAOA,SAASkX,GAAuBnhC,EAAMohC,EAActB,EAAa,CAC/D,IAAIuB,EAAe,EAEnB,OAAIrhC,EAAK,SAAS,GAAG,GAAMA,EAAK,SAAS,GAAG,IAAM8/B,GAAgBsB,EAAe,GAAOA,EAAe,GAAQA,EAAe,OAC5HC,GAAgB,GAGdrhC,EAAK,SAAS,GAAG,IACnBqhC,GAAgB,GAGdrhC,EAAK,SAAS,GAAG,IACnBqhC,GAAgB,GAGXA,CACT,CAMA,SAASC,GAAcC,EAAYF,EAAc,CAC/C,IAAIG,EAAM,EAEV,OAAID,EAAW,SAAS,GAAG,IACzBC,GAAQH,GAAgB,GAGtBE,EAAW,SAAS,GAAG,IACzBC,GAAQH,GAAgB,GAGtBE,EAAW,SAAS,GAAG,IACzBC,GAAQH,GAGHG,CACT,CAOA,SAASC,GAAkBF,EAAYvhC,EAAMqhC,EAAc,CACzD,OAAIrhC,EAAK,SAAS,GAAG,IACnBqhC,GAAgB,SAAS,OAAQ,CAAC,GAGhCrhC,EAAK,SAAS,GAAG,IACfuhC,EAAW,SAAS,GAAG,IACzBF,GAAgB,SAAS,OAAQ,CAAC,GAGhCE,EAAW,SAAS,GAAG,IACzBF,GAAgB,SAAS,OAAQ,CAAC,IAI/BA,CACT,CASA,SAASK,GAAmB5lC,EAAOslC,EAActB,EAAa,CACvDsB,IACHA,EAAe,GAGjB,MAAM3tB,EAAQ3X,EAAM,MAAM,sCAAsC,EAEhE,GAAI,CAAC2X,EACH,MAAM,IAAI,MAAM,sBAAsB3X,CAAK,EAAE,EAG/C,GAAI,CACN,CACIylC,EACAI,EACA3hC,CACJ,EAAMyT,GAEA8tB,IAAe,KAAO,CAACA,KACzBA,EAAa,OAGf,IAAIF,EAAeF,GAAsBnhC,EAAMohC,EAActB,CAAW,EAIxE,OAHAuB,EAAeC,GAAaC,EAAYF,CAAY,EACpDA,EAAeI,GAAiBF,EAAYvhC,EAAMqhC,CAAY,EAE1DM,IAAa,KACXJ,EAAW,SAAS,GAAG,IAEzBH,EAAeA,EAAe,SAAS,OAAQ,CAAC,EAGhDA,EAAeA,EAAeC,GAG5BE,EAAW,SAAS,GAAG,IAEzBH,EAAeA,EAAe,SAAS,OAAQ,CAAC,EAGhDA,EAAeA,EAAeC,GAG5BE,EAAW,SAAS,GAAG,IAEzBH,EAAeA,EAAe,SAAS,OAAQ,CAAC,EAGhDA,EAAeA,EAAeC,GAGzBD,GAGLO,IAAa,IACRN,EAAeD,EAGpBO,IAAa,IACRN,EAAeD,EAGjBA,CACT,CAOA,SAASQ,GAAe5hC,EAAM2d,EAAU,CACtC,GAAI3d,aAAgB,QAAU,OAAOA,GAAS,SAAU,CACtD,MAAM6hC,EAAU,GAAG7hC,CAAI,GAEnB6hC,EAAQ,MAAM,QAAQ,EACxB7hC,EAAO,SAAS6hC,EAAS,CAAC,EAE1B7hC,EAAO,EAAI6hC,EAAQ,MAAM,GAAG,EAAE,OAAO,CAACjV,EAAM5hB,IACnC02B,GAAkB12B,EAAK4hB,EAAMjP,EAAS,YAAW,CAAE,EACzDA,EAAS,MAAQ,CAAC,CAExB,CAED,OAAO3d,CACT,CAKO,SAAS8hC,GAAa9P,EAAS,CAIpC,eAAe+P,EAAUl4B,EAAM7J,EAAMU,EAAU,CAAA,EAAI,CAEjD,MAAMga,EAAOqJ,GAAakG,GAAgBvpB,CAAO,EAEjD+d,GAAI,sBAAsB5U,CAAI,EAAE,EAEhC,KAAM,CACJ,IAAAvF,EACA,aAAAk4B,EACA,KAAAnkC,CACD,EAAG,MAAMkkC,GAAUvK,EAASnoB,EAAM6Q,CAAI,EAEvC,GAAIpW,EAAI,OAASqS,EACf,MAAM3G,EAAQ,IAAI,MAAM,GAAGnG,CAAI,wBAAwB,EAAG,gBAAgB,EAG5E,GAAI6Q,EAAK,UAAW,CAGlB,MAAMwQ,EAAO,MAAMvC,GACjB,iBAAoB,CAClB,gBAAiBpJ,KAAS7B,GAAUpZ,EAAK0tB,EAAQ,KAAK,MAAM,EAAG,CAC7D,GAAIzS,EAAM,OAAS,QAAUA,EAAM,OAAS,YAC1C,MAAMvP,EAAQ,IAAI,MAAM,GAAGnG,CAAI,wBAAwB,EAAG,gBAAgB,EAG5E0V,EAAM,OAAO,KAAOqiB,GAAc5hC,EAAMuf,EAAM,MAAM,EAEpD,MAAMjY,GAAOm3B,GAAc,CACzB,KAAMlf,EAAM,OAAO,QAAS,EAC5B,MAAOA,EAAM,KAAK,KAChC,CAAa,EAED,KAAM,CACJ,KAAMA,EAAM,KACZ,QAASjY,EACV,CACF,CACF,EAEAtO,GAAWm3B,GAASn3B,EAAQg5B,EAAQ,KAAK,OAAQ,CAChD,GAAGtX,EACH,IAAK,GACL,WAAY,gBAAkB1hB,GAAQyd,GAAOiE,GAAM,CACjD,gBAAiB6E,KAASvmB,GACxB,MAAM,gBAAkB,CAGtB,MAAMsO,GAAOiY,EAAM,QAEbxd,GAAMu6B,EAAah1B,EAAI,EACvBhD,GAAM,MAAM6lB,GAAQpoB,GAAK0U,GAAOiE,EAAI,EAE1C,GAAI,CAACpT,GAAK,KACR,MAAM0I,EAAQ,IAAI,MAAM,GAAG1L,EAAG,cAAc,EAAG,kBAAkB,EAGnE,MAAMkmB,GAASlqB,EAAO,UAAUgH,GAAK,IAAI,EAEzC,MAAO,CACL,IAAAhD,GACA,KAAMvC,GAAI,OACV,KAAMwd,EAAM,KACZ,OAAAiL,EACD,CACF,CAEJ,CACX,CAAS,EACAwX,GAAUllB,GAAKklB,CAAK,CACtB,EAED,GAAI,CAAC9W,EACH,MAAMlb,EAAQ,IAAI,MAAM,mBAAmBnG,CAAI,EAAE,EAAG,qBAAqB,EAI3E,MAAMsU,GAAS6T,CAAO,EAAEnoB,EAAM6Q,CAAI,EAGlC,MAAM8kB,GAASxN,CAAO,EAAE,SAAS9G,EAAK,GAAG,GAAIrhB,EAAM6Q,CAAI,EAEvD,MACD,CAED,MAAMjE,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAI1tB,CAAG,EACzCgD,EAAOm2B,GAAahnB,CAAK,EAE/B,GAAI,CAACnP,EAAK,KACR,MAAM0I,EAAQ,IAAI,MAAM,GAAG1L,CAAG,cAAc,EAAG,kBAAkB,EAGnE,MAAMqZ,EAAWrd,EAAO,UAAUgH,EAAK,IAAI,EAC3CqW,EAAS,KAAOikB,GAAc5hC,EAAM2d,CAAQ,EAC5C,MAAMskB,EAAe3F,EAAa,CAChC,KAAM3e,EAAS,QAAS,EACxB,MAAOrW,EAAK,KAClB,CAAK,EAEK46B,EAAUxnB,EAAK,SAAWuP,GAAe,QAEzCze,EAAO,MADE,MAAMwmB,EAAQ,QAAQ,UAAUkQ,CAAO,GAC5B,OAAOD,CAAY,EACvCE,EAAa39B,EAAI,OAAOkW,EAAK,WAAY/D,EAAYnL,CAAI,EAE3DkP,EAAK,OACP,MAAMsX,EAAQ,KAAK,OAAO,IAAImQ,EAAYF,CAAY,EAGxD,MAAMnD,EAAQ,MAAMhC,GAAQ9K,EAASwK,CAAY,EAC3Cte,EAAS4gB,EAAMA,EAAM,OAAS,CAAC,EAC/BX,EAAY35B,EAAI,OAAO0Z,EAAO,IAAI,KAAK,EACvCwiB,EAAc,MAAM1O,EAAQ,KAAK,OAAO,IAAImM,CAAS,EACrDiE,EAAa3E,GAAaiD,CAAW,EAErCt6B,EAAS,MAAM83B,GAAQlM,EAAS,CACpC,OAAQoQ,EACR,KAAM/pC,EACN,IAAK8pC,EACL,KAAMF,EAAa,OACnB,MAAOvnB,EAAK,MAEZ,QAAAwnB,EACA,WAAY59B,EAAI,QAChB,oBAAqB,GAC3B,CAAK,EAED4Z,EAAO,IAAM9X,EAAO,IAGpB,MAAMk5B,EAAa,MAAMT,GAAW7M,EAAS8M,EAAOpkB,CAAI,EAGxD,MAAMqkB,GAAc/M,EAASsN,EAAY5kB,CAAI,CAC9C,CAED,OAAOzG,EAAkB8tB,CAAQ,CACnC,CC7VA,MAAMhe,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAYvDiG,GAAiB,CAAE,EAKlB,SAASoY,GAAarQ,EAAS,CAIpC,eAAesQ,EAAUz4B,EAAMnJ,EAAU,GAAI,CAE3CA,EAAUqjB,GAAakG,GAAgBvpB,CAAO,EAE9C,KAAM,CAAE,IAAA4D,CAAG,EAAK,MAAM6iB,GAAW6K,CAAO,EAAEnoB,EAAMnJ,CAAO,EAEvD,OAAO4D,CACR,CAED,OAAO2P,EAAkBquB,CAAQ,CACnC,CC9BA,MAAMve,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAkBvDiG,GAAiB,CACrB,QAAS,GACT,MAAO,GACP,WAAY,EACZ,QAAS,WACT,oBAAqB,GACvB,EAKO,SAASsY,GAAUvQ,EAAS,CAIjC,eAAewQ,EAAOnmC,EAAMqjC,EAAIh/B,EAAU,CAAA,EAAI,CAE5C,MAAMga,EAAOqJ,GAAakG,GAAgBvpB,CAAO,EAEjD,MAAM8+B,GAASxN,CAAO,EAAE31B,EAAMqjC,EAAIhlB,CAAI,EACtC,MAAMyD,GAAS6T,CAAO,EAAE31B,EAAM,CAC5B,GAAGqe,EACH,UAAW,EACjB,CAAK,CACF,CAED,OAAOzG,EAAkBuuB,CAAK,CAChC,CCrCA,MAAMze,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,gBAAgB,EAmB7BuL,GAAiB,CACrB,MAAO,GACP,oBAAqB,IACrB,WAAY,EACZ,QAAS,UACX,EAKO,SAASwY,GAAazQ,EAAS,CAIpC,eAAe0Q,EAAU74B,EAAMnJ,EAAU,GAAI,CAE3C,MAAMiiC,EAAW5e,GAAakG,GAAgBvpB,CAAO,EACrDiiC,EAAS,MAAQA,EAAS,OAAS,IAAI,KAEvClkB,GAAI,YAAY5U,CAAI,WAAW84B,EAAS,KAAK,EAAE,EAE/C,KAAM,CACJ,IAAAr+B,EACA,aAAAk4B,EACA,KAAAnkC,EACA,OAAAuqC,CACD,EAAG,MAAMrG,GAAUvK,EAASnoB,EAAM84B,CAAQ,EAErCT,EAAUxhC,EAAQ,SAAWupB,GAAe,QAC5C8G,EAAS,MAAMiB,EAAQ,QAAQ,UAAUkQ,CAAO,EAEtD,IAAID,EACAE,EAEA5Z,EAAaoa,EAAS,WAE1B,GAAKC,EAcE,CACL,GAAIt+B,EAAI,OAASqS,EACf,MAAM3G,EAAQ,IAAI,MAAM,GAAGnG,CAAI,wBAAwB,EAAG,gBAAgB,EAG5E0e,EAAajkB,EAAI,QAEjB,MAAMmS,EAAQ,MAAMub,EAAQ,KAAK,OAAO,IAAI1tB,CAAG,EACzCgD,EAAOm2B,GAAahnB,CAAK,EAE/B,GAAI,CAACnP,EAAK,KACR,MAAM0I,EAAQ,IAAI,MAAM,GAAGnG,CAAI,cAAc,EAAG,kBAAkB,EAGpE,MAAM8T,EAAWrd,EAAO,UAAUgH,EAAK,IAAI,EAG3CqW,EAAS,MAAQglB,EAAS,MAE1BV,EAAe3F,EAAa,CAC1B,KAAM3e,EAAS,QAAS,EACxB,MAAOrW,EAAK,KACpB,CAAO,EAED,MAAMkE,EAAO,MAAMulB,EAAO,OAAOkR,CAAY,EAC7CE,EAAa39B,EAAI,OAAOm+B,EAAS,WAAYhsB,EAAYnL,CAAI,EAEzDm3B,EAAS,OACX,MAAM3Q,EAAQ,KAAK,OAAO,IAAImQ,EAAYF,CAAY,CAEzD,KA5CY,CACX,MAAMtkB,EAAW,IAAIrd,EAAO,CAC1B,KAAM,OACN,MAAOqiC,EAAS,KACxB,CAAO,EACDV,EAAe3F,EAAa,CAAE,KAAM3e,EAAS,UAAW,MAAO,CAAA,EAAI,EAEnE,MAAMnS,EAAO,MAAMulB,EAAO,OAAOkR,CAAY,EAE7CE,EAAa39B,EAAI,OAAOm+B,EAAS,WAAYhsB,EAAYnL,CAAI,EAEzDm3B,EAAS,OACX,MAAM3Q,EAAQ,KAAK,OAAO,IAAImQ,EAAYF,CAAY,CAE9D,CAgCI,MAAMnD,EAAQ,MAAMhC,GAAQ9K,EAASwK,CAAY,EAC3Cte,EAAS4gB,EAAMA,EAAM,OAAS,CAAC,EAC/BX,EAAYjgB,EAAO,IACnBwiB,EAAc,MAAM1O,EAAQ,KAAK,OAAO,IAAImM,CAAS,EACrDiE,EAAa3E,GAAaiD,CAAW,EAErCt6B,EAAS,MAAM83B,GAAQlM,EAAS,CACpC,OAAQoQ,EACR,KAAM/pC,EACN,IAAK8pC,EACL,KAAMF,EAAa,OACnB,MAAOU,EAAS,MAChB,oBAAqBA,EAAS,oBAC9B,QAASA,EAAS,QAClB,WAAApa,CACN,CAAK,EAEDrK,EAAO,IAAM9X,EAAO,IAGpB,MAAMk5B,EAAa,MAAMT,GAAW7M,EAAS8M,EAAO6D,CAAQ,EAG5D,MAAM5D,GAAc/M,EAASsN,EAAYqD,CAAQ,CAClD,CAED,OAAO1uB,EAAkByuB,CAAQ,CACnC,CCxIA,MAAM3e,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAcvDiG,GAAiB,CACrB,OAAQ,EACR,OAAQ,GACV,EAKO,SAAS4Y,GAAY7Q,EAAS,CAInC,SAAS8Q,EAASj5B,EAAMnJ,EAAU,GAAI,CAEpC,OAAAA,EAAUqjB,GAAakG,GAAgBvpB,CAAO,EAEvC,CACL,CAAC,OAAO,aAAa,EAAG,iBAAyB,CAC/C,MAAM+7B,EAAU,MAAMF,GAAUvK,EAASnoB,EAAMnJ,CAAO,EAChD0F,EAAS,MAAMwvB,GAAS6G,EAAQ,QAASzK,EAAQ,KAAK,MAAM,EAElE,GAAI5rB,EAAO,OAAS,QAAUA,EAAO,OAAS,MAC5C,MAAM4J,EAAQ,IAAI,MAAM,GAAGnG,CAAI,8BAA8B,EAAG,cAAc,EAGhF,GAAI,CAACzD,EAAO,QACV,MAAM4J,EAAQ,IAAI,MAAM,sCAAsCnG,CAAI,EAAE,EAAG,gBAAgB,EAGzF,gBAAiB9H,KAAOqE,EAAO,QAAQ,CACrC,OAAQ1F,EAAQ,OAChB,OAAQA,EAAQ,MAC1B,CAAS,EACC,MAAMqB,CAET,CACF,CACF,CAED,OAAOkS,EAAkB6uB,CAAO,CAClC,CCvDA,MAAMrkB,GAAMC,EAAO,kCAAkC,EAK9C,SAASqkB,GAAiBnZ,EAAS,CACxC,GAAI,CAACA,EACH,MAAM5Z,EAAQ,IAAI,MAAM,uCAAuC,EAAG,kBAAkB,EAStF,IANI,OAAO4Z,GAAY,UAAYA,aAAmB,UACpDnL,GAAI,sBAAsB,EAE1BmL,EAAU9e,EAAqB8e,EAAQ,UAAU,GAG/CA,EAAQ,OACVnL,OAAAA,GAAI,wBAAwB,EAErB,CACL,CAAC,OAAO,aAAa,EAAG,WAA4B,CAClD,MAAMmL,CACP,CACF,EAGH,GAAIA,EAAQ,OAAO,aAAa,EAC9BnL,OAAAA,GAAI,+BAA+B,EAC5BmL,EAGT,GAAIA,EAAQ,OAAO,QAAQ,EACzBnL,OAAAA,GAAI,yBAAyB,EACtBmL,EAGT,GAAIoZ,GAAO,MAAQpZ,aAAmBoZ,GAAO,KAE3CvkB,OAAAA,GAAI,2BAA2B,EACxB8K,GAAkBK,EAAQ,QAAQ,EAG3C,MAAM5Z,EAAQ,IAAI,MAAM,6BAA6B4Z,CAAO,yBAAyB,EAAG,oBAAoB,CAC9G,CCrBA,MAAM7F,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,gBAAgB,EAkC7BuL,GAAiB,CACrB,OAAQ,EACR,OAAQ,IACR,OAAQ,GACR,SAAU,GACV,UAAW,GACX,uBAAwB,GACxB,WAAY,EACZ,QAAS,WACT,QAAS,GACT,SAAU,CAAC3uB,EAAOuO,IAAS,CAAE,EAC7B,SAAU,UACV,MAAO,GACP,SAAU,MACV,oBAAqB,GACvB,EAKO,SAASo5B,GAAajR,EAAS,CAIpC,eAAekR,EAAUr5B,EAAM+f,EAASlP,EAAO,CAAA,EAAI,CAEjD,MAAMha,EAAUqjB,GAAakG,GAAgBvP,CAAI,EAGjD,IAAI1hB,EAEA2mC,EAEAzhB,EASJ,GARAO,GAAI,wCAAwC,EAC5C,MAAMud,GAAU,EAAG,SAAS,SAAY,CACtChjC,EAAS,MAAM+pC,GAAgBnZ,CAAO,EACtC+V,EAAc,MAAMpD,GAAUvK,EAASnoB,EAAMnJ,CAAO,EACpDwd,EAAS,MAAMqe,GAAUvK,EAAS2N,EAAY,aAAcj/B,CAAO,CACzE,CAAK,EAAG,EACJ+d,GAAI,qCAAqC,EAErC,CAAC/d,EAAQ,SAAW,CAACwd,EAAO,OAC9B,MAAMlO,EAAQ,IAAI,MAAM,0BAA0B,EAAG,cAAc,EAIrE,GAAIhX,GAAU,KACZ,MAAMgX,EAAQ,IAAI,MAAM,yBAAyB,EAAG,eAAe,EAIrE,GAAI2vB,GAAe,KACjB,MAAM3vB,EAAQ,IAAI,MAAM,8BAA8B,EAAG,oBAAoB,EAG/E,GAAI,CAACtP,EAAQ,QAAU,CAACi/B,EAAY,OAClC,MAAM3vB,EAAQ,IAAI,MAAM,qBAAqB,EAAG,cAAc,EAGhE,GAAI2vB,EAAY,YAAc,OAC5B,MAAM3vB,EAAQ,IAAI,MAAM,YAAY,EAAG,gBAAgB,EAGzD,OAAOmzB,GAAenR,EAASnoB,EAAM7Q,EAAQ2mC,EAAaj/B,CAAO,CAClE,CAED,OAAOuT,EAAkBivB,CAAQ,CACnC,CASA,MAAMC,GAAiB,MAAOnR,EAASnoB,EAAM7Q,EAAQ2mC,EAAaj/B,IAAY,CAC5E,MAAMkrB,EAAQ,MAAMwX,GAAMpR,EAASh5B,EAAQ2mC,EAAaj/B,CAAO,EAI/D,MAAMs7B,GAAU,EAAG,UAAU,SAAY,CACvC,MAAMhG,EAAiBxG,GAAiB3lB,CAAI,EACtC8zB,EAAW3H,EAAe,IAAK,EAErC,GAAI2H,GAAY,KACd,MAAM3tB,EAAQ,IAAI,MAAM,uBAAuB,EAAG,cAAc,EAGlE,IAAIqzB,EAAe,GAEnB,GAAI,CACF,MAAMlc,GAAW6K,CAAO,EAAE,IAAIgE,EAAe,KAAK,GAAG,CAAC,GAAIt1B,CAAO,EACjE2iC,EAAe,EAChB,OAA2Bn2B,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,CAET,CAEIm2B,GACH,MAAMpE,GAAYjN,CAAO,EAAE,IAAIgE,EAAe,KAAK,GAAG,CAAC,GAAIt1B,CAAO,EAIpE,MAAM4iC,EAAc,MAAM/G,GAAUvK,EAASnoB,EAAMnJ,CAAO,EACpDo+B,EAAQ,MAAMhC,GAAQ9K,EAASsR,EAAY,YAAY,EACvDplB,EAAS4gB,EAAMA,EAAM,OAAS,CAAC,EAErC,GAAI,CAAC5gB,EACH,MAAMlO,EAAQ,IAAI,MAAM,0BAA0B,EAAG,cAAc,EAGrE,GAAI,CAACkO,EAAO,MAAQ,CAACA,EAAO,KAAK,SAAS,WAAW,EACnD,MAAMlO,EAAQ,IAAI,MAAM,mBAAmBkO,EAAO,IAAI,mBAAmB,EAAG,qBAAqB,EAGnG,MAAMwiB,EAAc,MAAM1O,EAAQ,KAAK,OAAO,IAAI9T,EAAO,GAAG,EACtDkkB,EAAanoC,GAAOymC,CAAW,EAE/Bt6B,EAAS,MAAM83B,GAAQlM,EAAS,CACpC,OAAQoQ,EACR,KAAMzE,EACN,IAAK/R,EAAM,IACX,KAAMA,EAAM,KACZ,MAAOlrB,EAAQ,MACf,oBAAqBA,EAAQ,oBAC7B,QAASA,EAAQ,QACjB,WAAYA,EAAQ,UAC1B,CAAK,EAEDwd,EAAO,IAAM9X,EAAO,IAGpB,MAAMk5B,EAAa,MAAMT,GAAW7M,EAAS8M,EAAOp+B,CAAO,EAG3D,MAAMq+B,GAAc/M,EAASsN,EAAY5+B,CAAO,CACpD,CAAG,EAAG,CACN,EAQM0iC,GAAQ,MAAOpR,EAASh5B,EAAQ2mC,EAAaj/B,IAAY,CACzDi/B,EAAY,OACdlhB,GAAI,oBAAoBkhB,EAAY,GAAG,WAAWj/B,EAAQ,MAAM,WAAWA,EAAQ,MAAM,EAAE,EAE3F+d,GAAI,uBAAuB/d,EAAQ,MAAM,WAAWA,EAAQ,MAAM,EAAE,EAItE,MAAMg5B,EAAU,CAAE,EAGlB,GAAIh5B,EAAQ,OAAS,EACnB,GAAIi/B,EAAY,QAYd,GAXAlhB,GAAI,iBAAiB/d,EAAQ,MAAM,yBAAyB,EAE5Dg5B,EAAQ,KACN,IACSiG,EAAY,QAAQ,CACzB,OAAQ,EACR,OAAQj/B,EAAQ,MAC5B,CAAW,CAEJ,EAEGi/B,EAAY,OAAO,SAAQ,EAAKj/B,EAAQ,OAAQ,CAClD,MAAM6iC,EAAQ7iC,EAAQ,OAASi/B,EAAY,OAAO,SAAU,EAE5DlhB,GAAI,2BAA2B8kB,CAAK,QAAQ,EAC5C7J,EAAQ,KACN8J,GAAYD,CAAK,CAClB,CACF,OAED9kB,GAAI,2BAA2B/d,EAAQ,MAAM,QAAQ,EACrDg5B,EAAQ,KACN8J,GAAY9iC,EAAQ,MAAM,CAC3B,EAILg5B,EAAQ,KACN+J,GAAsBzqC,EAAQ0H,EAAQ,MAAM,CAC7C,EAED,MAAMkpB,EAAU8Z,GAAmBC,GAAkBjK,CAAO,EAAIkK,GAAiB,CAC/E,GAAIjE,EAAY,QAAU,CAACj/B,EAAQ,SAAU,CAG3C,MAAM+yB,EAAWkM,EAAY,OAAO,SAAU,EAE9C,GAAIlM,EAAWmQ,EACbnlB,OAAAA,GAAI,gBAAgBgV,EAAWmQ,CAAY,OAAOnQ,CAAQ,gDAAgDmQ,CAAY,EAAE,EAEjHjE,EAAY,QAAQ,CACzB,OAAQiE,CAClB,CAAS,EAEDnlB,GAAI,2CAA2C,CAElD,CAED,MAAO,CACL,CAAC,OAAO,aAAa,EAAG,iBAAoB,CAAE,CAC/C,CACL,CAAG,EAGD,IAAIze,EAEAU,EAAQ,OAAS,QAAaA,EAAQ,OAAS,KACjDV,EAAOD,GAAUW,EAAQ,IAAI,EACpBi/B,GAAeA,EAAY,SACpC3/B,EAAO2/B,EAAY,OAAO,MAI5B,IAAIz/B,EAEAQ,EAAQ,OAAS,KACnBR,EAAQD,GAAWS,EAAQ,KAAK,EACvBi/B,GAAeA,EAAY,SACpCz/B,EAAQy/B,EAAY,OAAO,OAG7B,MAAM5O,EAAS,MAAMiB,EAAQ,QAAQ,UAAUtxB,EAAQ,OAAO,EAExD0F,EAAS,MAAM0W,GAAKqT,GAAS,CAAC,CAClC,QAASvG,EAGT,KAAA5pB,EACA,MAAAE,CACJ,CAAG,EAAG8xB,EAAQ,KAAK,OAAQ,CACvB,SAAUtxB,EAAQ,SAClB,OAAAqwB,EACA,WAAYrwB,EAAQ,WACpB,SAAUA,EAAQ,SAClB,UAAWA,EAAQ,UACnB,uBAAwBA,EAAQ,uBAChC,SAAUA,EAAQ,QACtB,CAAG,CAAC,EAEF,GAAI,CAAC0F,EACH,MAAM4J,EAAQ,IAAI,MAAM,mBAAmB,OAAO,IAAI,EAAE,EAAG,qBAAqB,EAGlFyO,OAAAA,GAAI,SAASrY,EAAO,GAAG,EAAE,EAElB,CACL,IAAKA,EAAO,IACZ,KAAMA,EAAO,IACd,CACH,EAMMq9B,GAAwB,CAACI,EAAQC,IAC9B,iBAA2C,CAChD,IAAIpW,EAAU,EAEd,gBAAiB3rB,KAAO8hC,EAAQ,CAG9B,GAFAnW,GAAW3rB,EAAI,OAEX2rB,EAAUoW,EAAO,CACnB,MAAM/hC,EAAI,SAAS,EAAG+hC,EAAQpW,CAAO,EAErC,MACD,CAED,MAAM3rB,CACP,CACF,EAOGyhC,GAAc,CAACpX,EAAO2X,EAAYxuB,KAAuB,CAC7D,MAAMxT,EAAM,IAAI,WAAWgiC,CAAS,EAEpC,eAAiBC,GAAgB,CAC/B,OACE,MAAMjiC,CAET,CAED,OAAO0hC,GAAsBO,EAAc,EAAE5X,CAAK,CACpD,EAKMuX,GAAoB,gBAAkBjK,EAAS,CACnD,QAASlhC,EAAI,EAAGA,EAAIkhC,EAAQ,OAAQlhC,IAClC,MAAQkhC,EAAQlhC,CAAC,EAAG,CAExB,EAMMkrC,GAAqB,gBAAkB1qC,EAAQirC,EAAQ,CAC3D,IAAIC,EAAQ,EAEZ,gBAAiBniC,KAAO/I,EACtBkrC,GAASniC,EAAI,OAEb,MAAMA,EAGR,gBAAiBA,KAAOkiC,EAAOC,CAAK,EAClCA,GAASniC,EAAI,OAEb,MAAMA,CAEV,ECxXMoiC,GAAYpH,GAAY,CAE5B,MAAM3mB,EAAS,CACb,IAAK2mB,EAAQ,IACb,KAAMA,EAAQ,KACd,KAAMA,EAAQ,OAAS,YAAc,YAAc,OACnD,KAAMA,EAAQ,IACf,EAED,OAAIA,EAAQ,OAAS,QAAUA,EAAQ,OAAS,eAC9C3mB,EAAO,KAAO2mB,EAAQ,OAAO,KAC7B3mB,EAAO,MAAQ2mB,EAAQ,OAAO,OAGzB3mB,CACT,EAKO,SAAS0H,GAAUkU,EAAS,CAIjC,eAAiBoS,EAAOv6B,EAAMnJ,EAAU,GAAI,CAC1C,MAAM+7B,EAAU,MAAMF,GAAUvK,EAASnoB,EAAMnJ,CAAO,EAChDq8B,EAAU,MAAMnH,GAAS6G,EAAQ,QAASzK,EAAQ,KAAK,MAAM,EAGnE,GAAI+K,EAAQ,OAAS,YAAa,CAChC,MAAQnU,GAAImU,EAAQ,QAAQr8B,CAAO,EAAGyjC,EAAQ,EAE9C,MACD,CAGD,MAAMA,GAASpH,CAAO,CACvB,CAED,OAAO9oB,EAAkBmwB,CAAK,CAChC,CCxBA,MAAMC,GAAiB,CACrB,KAAMld,EACR,EAOMmd,GAAkB,CACtB,MAAOxC,GACP,GAAItC,GACJ,MAAO6C,GACP,MAAOpD,GACP,GAAIsD,GACJ,GAAIpkB,GACJ,MAAOskB,EACT,EAOM8B,GAAsB,CAC1B,MAAOtB,GACP,KAAMJ,GACN,GAAI/kB,EACN,EASM0mB,GAAO,CAAC,CACZ,QAAA9jC,EAAS,IAAA+jC,EAAK,WAAAC,EAAY,KAAA3I,CAC5B,IAAM,CACJ,OAAO,KAAK2I,CAAU,EAAE,QAAQhuB,GAAO,CACrC+tB,EAAI/tB,CAAG,EAAIqlB,EAAK2I,EAAWhuB,CAAG,EAAEhW,CAAO,CAAC,CAC5C,CAAG,CACH,EAEMupB,GAAiB,CACrB,UAAW,GACX,KAAM,IACR,EAQA,SAAS0a,GAAWjkC,EAAS,CAC3B,KAAM,CACJ,UAAAu7B,CACJ,EAAM,OAAO,OAAO,CAAA,EAAIhS,IAAkB,CAAA,EAAIvpB,CAAO,EAE7Cq7B,EAAOC,GAAWC,CAAS,EAK3B2I,EAAYC,GACT9I,EAAK,SAAS8I,CAAS,EAM1BC,EAAaD,GACV9I,EAAK,UAAU8I,CAAS,EAI3BJ,EAAM,CAAE,EAEd,OAAAD,GAAK,CACH,QAAA9jC,EAAS,IAAA+jC,EAAK,WAAYJ,GAAgB,KAAMO,CACpD,CAAG,EACDJ,GAAK,CACH,QAAA9jC,EAAS,IAAA+jC,EAAK,WAAYH,GAAiB,KAAMQ,CACrD,CAAG,EAED,OAAO,KAAKP,EAAmB,EAAE,QAAQ7tB,GAAO,CAC9C+tB,EAAI/tB,CAAG,EAAI6tB,GAAoB7tB,CAAG,EAAEhW,CAAO,CAC/C,CAAG,EAEM+jC,CACT,CAUO,SAASM,GAAa,CAAE,KAAAlvB,EAAM,QAAAwB,EAAS,QAAAM,EAAS,QAASqtB,GAAsB,CACpF,MAAMC,EAAUN,GAAU,CACxB,KAAA9uB,EACA,UAAWmvB,EAAmB,YAAc,GAC5C,QAAArtB,CACJ,CAAG,EAKKutB,EAAchxB,GAIF,IAAIxB,IAAS,CAC3B,MAAMyS,EAAQzS,EAAK,OAAOC,GAAOwyB,GAAgBxyB,CAAG,GAAKyyB,GAAWzyB,CAAG,CAAC,EAExE,GAAIwS,EAAM,OAAQ,CAChB,MAAMzkB,EAAUgS,EAAKA,EAAK,OAAS,CAAC,EAChChS,GAAWA,EAAQ,UAAY,IACjCykB,EAAM,QAAQtb,GAAQwN,EAAQxN,CAAI,CAAC,CAEtC,CAED,OAAOqK,EAAG,GAAGxB,CAAI,CAClB,EAKH,MAAO,CACL,GAAGuyB,EACH,MAAOA,EAAQ,MACf,GAAIC,EAAYD,EAAQ,EAAE,EAC1B,MAAOA,EAAQ,MACf,KAAMC,EAAYD,EAAQ,IAAI,EAC9B,GAAIA,EAAQ,GACZ,KAAMC,EAAYD,EAAQ,IAAI,EAC9B,MAAOA,EAAQ,MACf,MAAOA,EAAQ,MACf,GAAIC,EAAYD,EAAQ,EAAE,EAC1B,MAAOA,EAAQ,MACf,GAAIC,EAAY,mBAA2CxyB,EAAM,CAC/D,gBAAiByD,KAAQ8uB,EAAQ,GAAG,GAAGvyB,CAAI,EACzC,KAAM,CAAE,GAAGyD,EAAM,KAAMA,EAAK,MAAQ,CAAG,CAE/C,CAAK,CACF,CACH,CC7KO,SAASgjB,GAAc,CAAE,SAAA5hB,GAAY,CAO1C,OAAOtD,EAHW,CAAC5b,EAAMgtC,IACvB9tB,EAAS,UAAUlf,EAAMgtC,CAAQ,CAED,CACpC,CCZA,MAAMC,GAAmB,UACnBC,GAAmB,KAMlB,SAASC,GAAW,CAAE,SAAAjuB,GAAY,CAQvC,OAAOtD,EAJK,CAAC5b,EAAMqI,EAAU,CAAE,KAAM4kC,GAAkB,KAAMC,MACpDhuB,EAAS,UAAUlf,EAAMqI,EAAQ,MAAQ4kC,GAAkB5kC,EAAQ,MAAQ6kC,EAAgB,CAGxE,CAC9B,CCZO,SAAS/L,GAAc,CAAE,SAAAjiB,GAAY,CAQ1C,OAAOtD,EAJW,CAAC5b,EAAMuoB,EAAKykB,IACrB9tB,EAAS,UAAUlf,EAAMuoB,EAAKykB,CAAQ,CAGb,CACpC,CCTO,SAASI,GAAY,CAAE,SAAAluB,GAAY,CAMxC,OAAOtD,EAFO5b,GAASkf,EAAS,cAAclf,CAAI,CAErB,CAC/B,CCPO,SAASyvB,GAAY,CAAE,SAAAvQ,GAAY,CAMxC,OAAOtD,EAFM,IAAMsD,EAAS,SAAU,CAET,CAC/B,CCPO,SAASmuB,GAAc,CAAE,SAAAnuB,GAAY,CAe1C,OAAOtD,EAXQ,MAAO+sB,EAASF,IAAY,CACzC,MAAMpqB,EAAM,MAAMa,EAAS,UAAUypB,EAASF,CAAO,EAErD,MAAO,CACL,IAAKE,EACL,IAAKtqB,EAAI,KACT,GAAIA,EAAI,GACR,UAAW,EACZ,CACF,CAE8B,CACjC,CChBO,SAASyH,GAAU,CAAE,SAAA5G,GAAY,CAMtC,OAAOtD,EAFK5b,GAASkf,EAAS,UAAUlf,CAAI,CAEjB,CAC7B,CCDO,MAAMstC,EAAO,CAKlB,YAAa,CAAE,SAAApuB,GAAY,CACzB,KAAK,IAAMiuB,GAAU,CAAE,SAAAjuB,CAAQ,CAAE,EACjC,KAAK,KAAOuQ,GAAW,CAAE,SAAAvQ,CAAQ,CAAE,EACnC,KAAK,GAAK4G,GAAS,CAAE,SAAA5G,CAAQ,CAAE,EAC/B,KAAK,OAASmuB,GAAa,CAAE,SAAAnuB,CAAQ,CAAE,EACvC,KAAK,OAAS4hB,GAAa,CAAE,SAAA5hB,CAAQ,CAAE,EACvC,KAAK,OAASiiB,GAAa,CAAE,SAAAjiB,CAAQ,CAAE,EACvC,KAAK,KAAOkuB,GAAW,CAAE,SAAAluB,CAAQ,CAAE,CACpC,CACH,CClBO,SAAS6Q,GAAW,CAAE,KAAAvS,EAAM,QAAAwB,GAAW,CAI5C,eAAe6L,EAAK5e,EAAK5D,EAAU,GAAI,CACjCA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGb,MAAMmS,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAEhD,OAAO+8B,GAAahnB,CAAK,CAC1B,CAED,OAAOxC,EAAkBiP,CAAG,CAC9B,CCfO,SAAS0iB,GAAY,CAAE,KAAA/vB,EAAM,QAAAwB,GAAW,CAC7C,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAepa,EAAMyG,EAAWhD,EAAU,GAAI,CAE5C,OADa,MAAMwiB,EAAIxf,EAAWhD,CAAO,GAC7B,MAAQ,IAAI,WAAW,CAAC,CACrC,CAED,OAAOuT,EAAkBhX,CAAI,CAC/B,CCJA,SAAS4oC,GAAWv+B,EAAM+e,EAAQ,GAAI,CACpC,UAAW3P,KAAOpP,EAAM,CACtB,MAAMw+B,EAAMx+B,EAAKoP,CAAG,EAEpB,GAAIA,IAAQ,KAAO,OAAO,KAAKpP,CAAI,EAAE,SAAW,EAC9C,GAAI,CACF+e,EAAM,KAAK,CACT,KAAM,GACN,MAAO,EACP,KAAM7hB,EAAI,MAAMshC,CAAG,CAC7B,CAAS,EACD,QACD,MAA8B,CAE9B,CAGH,MAAMxhC,EAAME,EAAI,MAAMshC,CAAG,EAEzB,GAAIxhC,EAAK,CACP+hB,EAAM,KAAK,CACT,KAAM,GACN,MAAO,EACP,KAAM/hB,CACd,CAAO,EACD,QACD,CAEG,MAAM,QAAQwhC,CAAG,GACnBD,GAAUC,EAAKzf,CAAK,EAGlByf,GAAO,OAAOA,GAAQ,UACxBD,GAAUC,EAAKzf,CAAK,CAEvB,CAED,OAAOA,CACT,CAOO,SAAS0f,GAAa,CAAE,KAAAlwB,EAAM,OAAA/N,GAAU,CAI7C,eAAeue,EAAO/hB,EAAK5D,EAAU,GAAI,CACvC,MAAMiF,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EACtCmS,EAAQ,MAAMZ,EAAK,OAAO,IAAIvR,EAAK5D,CAAO,EAC1C4G,EAAO3B,EAAM,OAAO8Q,CAAK,EAE/B,OAAQnS,EAAI,KAAI,CACd,KAAKgvB,GACH,MAAO,CAAE,EACX,KAAK3c,EACH,OAAOrP,EAAK,MACd,KAAK0+B,GACL,KAAKC,GACH,OAAOJ,GAAUv+B,CAAI,EACvB,QACE,MAAM,IAAI,MAAM,mCAAmChD,EAAI,IAAI,EAAE,CAChE,CACF,CAED,OAAO2P,EAAkBoS,CAAK,CAChC,CCzEO,SAAS6f,GAAW,CAAE,KAAArwB,EAAM,QAAAwB,GAAW,CAI5C,eAAe8uB,EAAMzlC,EAAU,GAAI,CACjC,IAAIzD,EAEJ,GAAIyD,EAAQ,SACV,GAAIA,EAAQ,WAAa,aACvBzD,EAAQ,IAAIqD,EAAO,CAAE,KAAM,WAAW,CAAE,EAAG,QAAS,MAEpD,OAAM,IAAI,MAAM,kBAAkB,EAItC,MAAMyB,EAAMu6B,EAAa,CACvB,KAAMr/B,EACN,MAAO,CAAE,CACf,CAAK,EACKuO,EAAO,MAAMpE,GAAO,OAAOrF,CAAG,EAC9BuC,EAAME,EAAI,SAASgH,CAAI,EAE7B,aAAMqK,EAAK,OAAO,IAAIvR,EAAKvC,EAAK,CAC9B,OAAQrB,EAAQ,MACtB,CAAK,EAEGA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGNA,CACR,CAED,OAAO2P,EAAkBkyB,CAAI,CAC/B,CCnCO,SAAS9d,GAAW,CAAE,KAAAxS,EAAM,QAAAwB,GAAW,CAI5C,eAAeiR,EAAKjL,EAAK3c,EAAU,GAAI,CACrC,MAAMmd,EAAU,MAAMhI,EAAK,OAAO,SAAU,EAE5C,GAAI,CACF,MAAM9T,EAAMu6B,EAAajf,CAAG,EACtB7R,EAAO,MAAMpE,GAAO,OAAOrF,CAAG,EAC9BuC,EAAME,EAAI,SAASmS,EAAYnL,CAAI,EAEzC,aAAMqK,EAAK,OAAO,IAAIvR,EAAKvC,EAAK,CAC9B,OAAQrB,EAAQ,MACxB,CAAO,EAEGA,EAAQ,UAAY,IACtB2W,EAAQ/S,CAAG,EAGT5D,EAAQ,KACV,MAAMmV,EAAK,KAAK,eAAevR,EAAK,CAClC,OAAQ5D,EAAQ,MAC1B,CAAS,EAGI4D,CACb,QAAc,CACRuZ,EAAS,CACV,CACF,CAED,OAAO5J,EAAkBqU,CAAG,CAC9B,CClCO,SAASnB,GAAY,CAAE,KAAAtR,EAAM,QAAAwB,GAAW,CAC7C,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAe+P,EAAM9iB,EAAK5D,EAAU,GAAI,CACtC,MAAM4G,EAAO,MAAM4b,EAAI5e,EAAK5D,CAAO,EAE7B0lC,EADa9J,EAAah1B,CAAI,EACP,OACvB++B,EAAa/+B,EAAK,MAAM,OAAO,CAAC1D,EAAG7E,IAAM6E,GAAK7E,EAAE,OAAS,GAAI,CAAC,EAEpE,MAAO,CACL,KAAMuF,EACN,SAAUgD,EAAK,MAAM,OACrB,UAAW8+B,EACX,UAAWA,GAAa9+B,EAAK,MAAQ,CAAE,GAAE,OACzC,UAAWA,EAAK,MAAQ,CAAE,GAAE,OAC5B,eAAgB8+B,EAAYC,CAC7B,CACF,CAED,OAAOpyB,EAAkBmT,CAAI,CAC/B,CCvBO,SAASkf,GAAe,CAAE,KAAAzwB,EAAM,QAAAwB,GAAW,CAChD,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACjCiR,EAAMD,GAAU,CAAE,KAAAxS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAe6mB,EAAS55B,EAAKN,EAAMtD,EAAU,CAAA,EAAI,CAC/C,MAAM4G,EAAO,MAAM4b,EAAI5e,EAAK5D,CAAO,EAEnC,OAAO4nB,EAAI,CACT,GAAGhhB,EACH,MAAOA,EAAK,MAAM,OAAO,CAACtD,CAAI,CAAC,CAChC,EAAEtD,CAAO,CACX,CAED,OAAOuT,EAAkBiqB,CAAO,CAClC,CChBO,SAASqI,GAAkB,CAAE,KAAA1wB,EAAM,QAAAwB,GAAW,CACnD,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACjCiR,EAAMD,GAAU,CAAE,KAAAxS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAemvB,EAAYliC,EAAKrH,EAAMyD,EAAU,CAAA,EAAI,CAClD,MAAM4G,EAAO,MAAM4b,EAAI5e,EAAK5D,CAAO,EAC7B+lC,EAAUl7B,GAAiB,CAACjE,EAAK,MAAQ,CAAA,EAAIrK,CAAI,CAAC,EAExD,OAAOqrB,EAAI,CACT,GAAGhhB,EACH,KAAMm/B,CACP,EAAE/lC,CAAO,CACX,CAED,OAAOuT,EAAkBuyB,CAAU,CACrC,CCnBO,SAASE,GAAc,CAAE,KAAA7wB,EAAM,QAAAwB,GAAW,CAC/C,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACjCiR,EAAMD,GAAU,CAAE,KAAAxS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAesvB,EAAQriC,EAAKN,EAAMtD,EAAU,CAAA,EAAI,CAC9C,MAAM4G,EAAO,MAAM4b,EAAI5e,EAAK5D,CAAO,EAC7BrI,GAAQ,OAAO2L,GAAS,SAAWA,EAAOA,EAAK,OAAS,GAE9D,OAAAsD,EAAK,MAAQA,EAAK,MAAM,OAAOvI,GAAKA,EAAE,OAAS1G,CAAI,EAE5CiwB,EAAIhhB,EAAM5G,CAAO,CACzB,CAED,OAAOuT,EAAkB0yB,CAAM,CACjC,CCjBO,SAASC,GAAe,CAAE,KAAA/wB,EAAM,QAAAwB,GAAW,CAChD,MAAM6L,EAAMkF,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACjCiR,EAAMD,GAAU,CAAE,KAAAxS,EAAM,QAAAwB,CAAO,CAAE,EAKvC,eAAewvB,EAASviC,EAAKrH,EAAMyD,EAAU,CAAA,EAAI,CAC/C,MAAM4G,EAAO,MAAM4b,EAAI5e,EAAK5D,CAAO,EAEnC,OAAO4nB,EAAI,CACT,GAAGhhB,EACH,KAAMrK,CACP,EAAEyD,CAAO,CACX,CAED,OAAOuT,EAAkB4yB,CAAO,CAClC,CCjBO,MAAMC,EAAe,CAM1B,YAAa,CAAE,KAAAjxB,EAAM,QAAAwB,GAAW,CAC9B,KAAK,QAAUivB,GAAc,CAAE,KAAAzwB,EAAM,QAAAwB,CAAO,CAAE,EAC9C,KAAK,WAAakvB,GAAiB,CAAE,KAAA1wB,EAAM,QAAAwB,CAAO,CAAE,EACpD,KAAK,OAASqvB,GAAa,CAAE,KAAA7wB,EAAM,QAAAwB,CAAO,CAAE,EAC5C,KAAK,QAAUuvB,GAAc,CAAE,KAAA/wB,EAAM,QAAAwB,CAAO,CAAE,CAC/C,CACH,CCPO,MAAM0vB,EAAU,CAOrB,YAAa,CAAE,KAAAlxB,EAAM,OAAA/N,EAAQ,QAAAuP,CAAO,EAAI,CACtC,KAAK,KAAOuuB,GAAW,CAAE,KAAA/vB,EAAM,QAAAwB,CAAO,CAAE,EACxC,KAAK,IAAM+Q,GAAU,CAAE,KAAAvS,EAAM,QAAAwB,CAAO,CAAE,EACtC,KAAK,MAAQ0uB,GAAY,CAAE,KAAAlwB,EAAM,OAAA/N,CAAM,CAAE,EACzC,KAAK,IAAMo+B,GAAU,CAAE,KAAArwB,EAAM,QAAAwB,CAAO,CAAE,EACtC,KAAK,IAAMgR,GAAU,CAAE,KAAAxS,EAAM,QAAAwB,CAAO,CAAE,EACtC,KAAK,KAAO8P,GAAW,CAAE,KAAAtR,EAAM,QAAAwB,CAAO,CAAE,EACxC,KAAK,MAAQ,IAAIyvB,GAAe,CAAE,KAAAjxB,EAAM,QAAAwB,CAAO,CAAE,CAClD,CACH,CC1BA,MAAMoH,GAAMC,EAAO,cAAc,EAkB1B,SAASsoB,GAAU,CAAE,KAAAnxB,EAAM,QAAA8B,GAAW,CAI3C,eAAiBsvB,EAAIvmC,EAAU,GAAI,CACjC,MAAMmU,EAAQ,KAAK,IAAK,EACxB,IAAIqyB,EAEJ,GAAI,CACFA,EAAa,MAAM7K,GAAY,CAC7B,KAAAxmB,EACA,QAAA8B,CACD,EAAEjX,CAAO,EAGV,MAAMmV,EAAK,KAAK,eAAeqxB,CAAU,EAEzC,MAAQrxB,EAAK,GAAI,CACvB,QAAc,CAEJqxB,GACF,MAAMrxB,EAAK,KAAK,MAAMqxB,CAAU,CAEnC,CAEDzoB,GAAI,aAAa,KAAK,IAAG,EAAK5J,CAAK,KAAK,CACzC,CAED,OAAOZ,EAAkBgzB,CAAE,CAC7B,CC7CO,SAAS9f,GAAY,CAAE,KAAAtR,GAAQ,CAIpC,eAAeuR,EAAM1mB,EAAU,GAAI,CACjC,MAAMm7B,EAAQ,MAAMhmB,EAAK,KAAM,EAE/B,MAAO,CACL,WAAY,OAAOgmB,EAAM,WAAW,SAAQ,CAAE,EAC9C,SAAU,OAAOA,EAAM,SAAS,SAAQ,CAAE,EAC1C,SAAUA,EAAM,SAChB,QAAS,GAAGA,EAAM,OAAO,GACzB,WAAY,OAAOA,EAAM,WAAW,SAAQ,CAAE,CAC/C,CACF,CAED,OAAO5nB,EAAkBmT,CAAI,CAC/B,CCtBO,MAAMwP,GAAc,GCMpB,SAASD,GAAe,CAAE,KAAA9gB,GAAQ,CAIvC,eAAe5R,EAASvD,EAAU,GAAI,CACpC,GAAI,CAEF,MAAMmV,EAAK,kBAAkBnV,CAAO,CACrC,OAA2BwM,EAAK,CAS/B,GAPc,CACZ,0CACA,SACA,6BACR,EAAQ,KAAMtO,GACCA,EAAE,KAAKsO,EAAI,OAAO,CAC1B,EAGC,OAAO0pB,GAET,MAAM1pB,CACP,CAED,OAAO2I,EAAK,QAAQ,IAAK,CAC1B,CAED,OAAO5B,EAAkBhQ,CAAO,CAClC,CC1BO,MAAMkjC,EAAQ,CAMnB,YAAa,CAAE,KAAAtxB,EAAM,QAAA8B,GAAW,CAC9B,KAAK,GAAKqvB,GAAS,CAAE,KAAAnxB,EAAM,QAAA8B,CAAO,CAAE,EACpC,KAAK,KAAOwP,GAAW,CAAE,KAAAtR,CAAI,CAAE,EAC/B,KAAK,QAAU8gB,GAAc,CAAE,KAAA9gB,CAAI,CAAE,EAKrC,KAAK,WAAchK,GAASgK,EAAK,QAAQ,IAAIhK,CAAI,CAClD,CACH,CCRA,SAASu7B,GAAmBxvB,EAAQ8C,EAAM,CAexC,MAAO,CACL,QAAS,OAAO,CAAC,EACjB,SAAU,OAAO,CAAC,EAClB,OAAQ,EACR,QAAS,CACV,CAaH,CAMO,SAAS2sB,GAAU,CAAE,QAAAjwB,GAAW,CAiCrC,OAAOnD,EA7BI,gBAAkBvT,EAAU,GAAI,CACzC,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5C,GAAI,CAACA,EAAQ,KAAM,CACjB,MAAM0mC,GAAiC,EACvC,MACD,CAED,MAAME,EAAW5mC,EAAQ,UAAY,IACrC,IAAIP,EAAK,GACT,GAAI,CAEF,GADAA,EAAK,OAAOmnC,GAAa,SAAWjzB,GAAcizB,CAAQ,GAAK,GAAKA,EAChE,CAACnnC,GAAMA,EAAK,EAAG,MAAM,IAAI,MAAM,kBAAkB,CACtD,OAA2B+M,EAAK,CAC/B,MAAM8C,EAAQ9C,EAAK,2BAA2B,CAC/C,CAED,IAAIyuB,EACJ,GAAI,CACF,OACE,MAAMyL,GAAkBxvB,EAAQlX,CAAO,EAEvC,MAAM,IAAI,QAAQuV,GAAW,CAAE0lB,EAAY,WAAW1lB,EAAS9V,CAAE,EAAG,CAE5E,QAAc,CACR,aAAaw7B,CAAS,CACvB,CACF,CAE0B,CAC7B,CCtFO,MAAM4L,EAAS,CAMpB,YAAa,CAAE,KAAA1xB,EAAM,QAAAuB,GAAW,CAC9B,KAAK,KAAOowB,GAAW,CAAE,KAAA3xB,CAAI,CAAE,EAC/B,KAAK,GAAKwxB,GAAS,CAAE,QAAAjwB,CAAO,CAAE,EAC9B,KAAK,QAAUqwB,GAAc,CAAE,QAAArwB,CAAO,CAAE,CACzC,CACH,CCNA,MAAMqH,GAAMipB,GAAM,gCAAgC,EAWlD,SAASC,GAAQvd,EAAY,CAC3B,OAAIA,EAAW,MACNud,GAAOvd,EAAW,KAAK,EAGzBA,CACT,CAKA,SAASwd,GAAgBlxB,EAAK,CAC5B,GAAI,CACF,MAAM3U,EAAMxE,GAAO,OAAO,IAAImZ,EAAI,SAAU,EAAC,YAAW,EAAG,MAAM,CAAC,CAAC,EAAE,EAG/DhT,EAAYc,EAAI,OAAOzC,CAAG,EAAE,UAAU,MAItC8lC,EAAetqC,GAAO,OAAOmG,CAAS,EAAE,MAAM,CAAC,EAAE,YAAa,EAEpE,OAAO,IAAI4R,GAAI,IAAIuyB,CAAY,GAAI,EAAK,CACzC,MAAgC,CAC/B,OAAOnxB,CACR,CACH,CAKA,SAASoxB,GAAUpxB,EAAK,CACtB,GAAI,CACF,MAAM3U,EAAMxE,GAAO,OAAO,IAAImZ,EAAI,SAAU,EAAC,YAAW,EAAG,MAAM,CAAC,CAAC,EAAE,EAC/DtT,EAAS2kC,GAAWhmC,CAAG,EAGvB2B,EAAYnG,GAAO,OAAOiH,EAAI,SAAS8uB,GAAUlwB,CAAM,EAAE,KAAK,EAAE,MAAM,CAAC,EAE7E,OAAO,IAAIkS,GAAI,IAAI5R,EAAU,YAAa,CAAA,GAAI,EAAK,CACvD,MAAU,CACN,OAAOgT,CACR,CACH,CAOA,eAAe5e,GAASkwC,EAAUC,EAAYC,EAAa,CACzD,MAAM9d,EAAa4d,EAAS,OAC5B,MAAM5d,EAAW,KAAM,EAEvB,MAAM8F,EAAYyX,GAAOvd,CAAU,EAE7B+d,EAAa,MAAMjvC,GAAOg3B,EAAU,UAAU,CAClD,QAAS,CAAExZ,GACMwxB,EAAYxxB,CAAG,EAEhB,aAAeA,EAAI,SAAU,CAC5C,CACL,CAAG,CAAC,EAEF,GAAI,CACF,IAAIxU,EAAU,EAEd,gBAAiBuU,KAASyZ,EAAU,MAAM,CAAE,CAAA,EAAG,CAC7C,MAAMkY,EAASF,EAAYzxB,EAAM,GAAG,EAGhC2xB,EAAO,SAAU,IAAK3xB,EAAM,IAAI,SAAQ,IAC1CvU,GAAW,EACXuc,GAAI,wBAAwBhI,EAAM,GAAG,OAAO2xB,CAAM,GAAI,MAAMlY,EAAU,IAAIzZ,EAAM,GAAG,CAAC,EAEpF,MAAMyZ,EAAU,OAAOzZ,EAAM,GAAG,EAChC,MAAMyZ,EAAU,IAAIkY,EAAQ3xB,EAAM,KAAK,EAEvCwxB,EAAY/lC,EAAUimC,EAAc,IAAK,uBAAuB1xB,EAAM,GAAG,OAAO2xB,CAAM,EAAE,EAE3F,CACL,QAAY,CACR,MAAMhe,EAAW,MAAO,CACzB,CACH,CAGO,MAAMie,GAAY,CACvB,QAAS,EACT,YAAa,+GACb,QAAS,CAACL,EAAUC,EAAa,IAAM,CAAA,IAC9BnwC,GAAQkwC,EAAUC,EAAYL,EAAc,EAErD,OAAQ,CAACI,EAAUC,EAAa,IAAM,CAAA,IAC7BnwC,GAAQkwC,EAAUC,EAAYH,EAAQ,CAEjD,EChHM1pC,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAgBA,EAAU,KAGhF,MAAMG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7DiqC,GAAO9pC,GAAM,MAAQ,IAAM,CAOpC,MAAM8pC,EAAO,CAAA,EAEb,OAAAA,EAAK,IAAO,UAAW,CAOnB,MAAMhrB,EAAM,CAAA,EAEZ,OAAAA,EAAI,IAAO,UAAW,CAmBlB,SAASirB,EAAI7pC,EAAG,CACZ,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAA+vC,EAAI,UAAU,QAAU,EAQxBA,EAAI,UAAU,OAAS,EAQvBA,EAAI,UAAU,KAAO,EAWrBA,EAAI,OAAS,SAAgB3pC,EAAGC,EAAG,CAC/B,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,SAAW,MAAQ,OAAO,eAAe,KAAKA,EAAG,SAAS,GAC5DC,EAAE,OAAO,CAAC,EAAE,OAAOD,EAAE,OAAO,EAC5BA,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,MAAM,EAC5BA,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,QAAQD,EAAE,IAAI,EACxBC,CACvB,EAaY0pC,EAAI,OAAS,SAAgBzpC,EAAGC,EAAG,CACzBD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,KAAK,IAAI,IAC7DM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,QAAUE,EAAE,SACd,MACJ,IAAK,GACDF,EAAE,OAASE,EAAE,SACb,MACJ,IAAK,GACDF,EAAE,KAAOE,EAAE,UACX,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACvB,EAUY2pC,EAAI,WAAa,SAAoBppC,EAAG,CACpC,GAAIA,aAAaX,GAAM,KAAK,IAAI,IAC5B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,KAAK,IAAI,IAC3B,OAAIW,EAAE,SAAW,OACbP,EAAE,QAAUO,EAAE,UAAY,GAE1BA,EAAE,QAAU,OACZP,EAAE,OAASO,EAAE,SAAW,GAExBA,EAAE,MAAQ,OACVP,EAAE,KAAOO,EAAE,OAAS,GAEjBP,CACvB,EAWY2pC,EAAI,SAAW,SAAkB3pC,EAAG5D,EAAG,CAC9BA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACFmE,EAAE,QAAU,EACZA,EAAE,OAAS,EACXA,EAAE,KAAO,GAETP,EAAE,SAAW,MAAQA,EAAE,eAAe,SAAS,IAC/CO,EAAE,QAAUP,EAAE,SAEdA,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IAC7CO,EAAE,OAASP,EAAE,QAEbA,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOP,EAAE,MAERO,CACvB,EASYopC,EAAI,UAAU,OAAS,UAAkB,CACrC,OAAO,KAAK,YAAY,SAAS,KAAMlqC,EAAU,KAAK,aAAa,CACnF,EAEmBkqC,CACnB,IAEejrB,CACf,IAEWgrB,CACX,GAAI,ECxMSE,GAAa,IAAIlzB,GAAI,aAAa,EAClCmzB,GAAiB,IACjBC,GAAY,KACZC,GAAYnkC,EAAI,MAAM,gDAAgD,EAEtE+Y,GAAW,CACtB,OAAQ,SACR,UAAW,WACb,EAKO,SAASqrB,GAAUtkC,EAAK,CAC7B,OAAO,IAAIgR,GAAI,IAAI/X,GAAO,OAAO+G,EAAI,UAAU,KAAK,EAAE,YAAa,EAAC,UAAU,CAAC,CAAC,EAAE,CACpF,CCNA,MAAMukC,GAASP,GAAK,IAAI,IAexB,SAASQ,GAAYlL,EAAU,CAG7B,MAAMmL,EAAWnL,EAAS,KAE1B,GAAI,CAACmL,EACH,MAAM,IAAI,MAAM,iBAAiB,EAGnC,MAAMC,EAAYpmC,EAAO,OAAOmmC,CAAQ,EAClCE,EAASrmC,EAAO,OAAO,OAAS,EAEtC,GAAIqmC,GAAU,EACZ,MAAM,IAAI,MAAM,2BAA2B,EAG7C,GAAIA,EAASD,EAAYD,EAAS,OAChC,MAAM,IAAI,MAAM,oCAAoC,EAGtD,MAAMG,EAAWH,EAAS,MAAME,EAAQD,EAAYC,CAAM,EACpDE,EAASN,GAAO,SAASA,GAAO,OAAOK,CAAQ,EAAG,CACtD,SAAU,GACV,OAAQ,GACR,MAAO,OACP,QAAS,EACb,CAAG,EAED,GAAIC,EAAO,UAAY,EACrB,MAAM,IAAI,MAAM,4BAA4BA,EAAO,OAAO,EAAE,EAG9D,GAAIA,EAAO,OAASvL,EAAS,MAAM,OACjC,MAAM,IAAI,MAAM,yBAAyB,EAG3C,MAAO,CACL,OAAQuL,EACR,KAAMJ,EAAS,MAAMC,EAAYC,CAAM,CACxC,CACH,CAMA,SAASz9B,GAAM49B,EAAM1yB,EAAK,CACxB,MAAMvc,EAAS,IAAI,WAAW,CAAC,EACd,IAAI,SAASA,EAAO,MAAM,EAClC,UAAU,EAAGivC,EAAM,EAAI,EAChC,MAAMC,EAAav+B,EAAqB4L,EAAI,SAAQ,CAAE,EAChDzZ,EAAOsO,GAAiB,CAACpR,EAAQkvC,CAAU,EAAGlvC,EAAO,WAAakvC,EAAW,UAAU,EAE7F,OAAOC,GAAMpgC,EAAmBjM,CAAI,CAAC,CACvC,CAOA,eAAiBssC,GAAWnf,EAAY9iB,EAAM,CAC5C,MAAMkiC,EAAMV,GAAWxhC,CAAI,EAC3B,IAAImiC,EAAM,EAEV,UAAWzlC,KAAQsD,EAAK,MAAO,CAC7B,GAAImiC,EAAMD,EAAI,OAAO,OAAQ,CAG3B,MAAME,EAAW1lC,EAAK,KAEtB,GAAI,CAAC2kC,GAAU,OAAOe,CAAQ,EAAG,CAE/B,MAAM3nC,EAAM,MAAMqoB,EAAW,IAAIsf,CAAQ,EACnCpiC,EAAO+rB,GAAatxB,CAAG,EAE7B,MAAQwnC,GAAUnf,EAAY9iB,CAAI,CACnC,CACP,MAEM,MAAMtD,EAAK,KAGbylC,GACD,CACH,CAOO,eAAiBE,GAASvf,EAAYwT,EAAUvlC,EAAM,CAC3D,MAAM2L,EAAO45B,EAAS,MAAM,KAAK7+B,GAAKA,EAAE,OAAS1G,CAAI,EAErD,GAAI,CAAC2L,EACH,MAAM,IAAI,MAAM,2BAA6B3L,CAAI,EAGnD,MAAM0J,EAAM,MAAMqoB,EAAW,IAAIpmB,EAAK,IAAI,EACpCsD,EAAO+rB,GAAatxB,CAAG,EAE7B,MAAQwnC,GAAUnf,EAAY9iB,CAAI,CACpC,CAMA,SAASsiC,GAAYxf,EAAYyf,EAAO,CACtC,OAAOC,EAAUD,EAAO,CAAC,EAMzB,eAAeC,EAAWC,EAAM1oB,EAAO,CACrC,MAAM2oB,EAAWnB,GAAO,OAAO,CAC7B,QAAS,EACT,OAAQJ,GACR,KAAMpnB,CACP,CAAA,EAAE,OAAQ,EAEL8nB,EAASvmC,EAAO,OAAOonC,EAAS,MAAM,EACtCC,EAAY1+B,GAAiB,CAAC49B,EAAQa,CAAQ,CAAC,EAC/CE,EAAc,CAAE,EAEtB,QAAS1xC,EAAI,EAAGA,EAAIiwC,GAAgBjwC,IAClC0xC,EAAY,KAAK,CACf,KAAM,GACN,MAAO,EACP,KAAMvB,EACd,CAAO,EAGH,GAAIoB,EAAK,QAAUrB,GAAW,CAC5B,MAAM1G,EAAQ+H,EACX,IAAIxf,IACK,CACN,KAAM,CACJ,KAAM,GACN,MAAO,EACP,KAAMA,EAAK,GACZ,EACD,KAAMA,EAAK,MAAQ,IAAI,UACnC,EACS,EAEA,KAAK,CAAC3mB,EAAGlJ,IACDyvC,GAAkBvmC,EAAE,KAAK,KAAK,MAAOlJ,EAAE,KAAK,KAAK,KAAK,CAC9D,EAEG0vC,EAAYF,EAAY,OAAOlI,EAAM,IAAIzX,GAAQA,EAAK,IAAI,CAAC,EAGjE,MAAO,CACL,KAHehf,GAAiB,CAAC0+B,EAAW,GAAGjI,EAAM,IAAIzX,GAAQA,EAAK,IAAI,CAAC,CAAC,EAI5E,MAAO6f,CACR,CACP,KAAW,CAYL,MAAMC,EAAON,EAAK,OAAO,CAACM,EAAM/sB,IAAQ,CACtC,MAAMle,EAAIoM,GAAK6V,EAAO/D,EAAI,GAAG,EAAImrB,GAEjC,OAAA4B,EAAKjrC,CAAC,EAAIA,KAAKirC,EAAOA,EAAKjrC,CAAC,EAAE,OAAO,CAACke,CAAG,CAAC,EAAI,CAACA,CAAG,EAC3C+sB,CACR,EAAE,EAAE,EAEL,IAAIZ,EAAM,EACV,UAAWa,KAAOD,EAAM,CACtB,MAAMze,EAAQ,MAAMke,EAAUQ,EAAKjpB,EAAQ,CAAC,EAE5C,MAAMkpB,EAAW3e,EAAO6d,CAAG,EAE3BA,GACD,CAED,MAAO,CACL,KAAMQ,EACN,MAAOC,CACR,CACF,CAMD,eAAeK,EAAY3e,EAAO4e,EAAQ,CACxC,MAAMzoC,EAAM+pB,EAAaF,CAAK,EACxBxoB,EAAS,MAAMgE,GAAO,OAAOrF,CAAG,EAChCuC,EAAME,EAAI,SAASpB,CAAM,EAE/B,MAAMgnB,EAAW,IAAI9lB,EAAKvC,CAAG,EAE7B,MAAM1I,EAAOuyB,EAAM,MAAM,OAAO,CAAC5gB,EAAK4hB,IAAS5hB,GAAO4hB,EAAK,OAAS,GAAI,CAAC,EAAI7qB,EAAI,OAEjFmoC,EAAYM,CAAM,EAAI,CACpB,KAAM,GACN,MAAOnxC,EACP,KAAMiL,CACP,CACF,CACF,CACH,CAOO,eAAemmC,GAAUrgB,EAAYzpB,EAAMumB,EAAM,CACtD,MAAM0W,EAAW,MAAMgM,GAAWxf,EAAYlD,EAAK,IAAI5iB,IAC9C,CACL,IAAKA,CACN,EACF,CAAC,EACIvC,EAAM+pB,EAAa8R,CAAQ,EAC3Bx6B,EAAS,MAAMgE,GAAO,OAAOrF,CAAG,EAChCuC,EAAME,EAAI,SAASpB,CAAM,EAE/B,MAAMgnB,EAAW,IAAI9lB,EAAKvC,CAAG,EAE7B,MAAM1I,EAAOukC,EAAS,MAAM,OAAO,CAAC5yB,EAAK4hB,IAAS5hB,EAAM4hB,EAAK,MAAO,CAAC,EAAI7qB,EAAI,OAE7E,MAAO,CACL,KAAMpB,EACN,MAAOtH,EACP,KAAMiL,CACP,CACH,CCnPA,eAAeomC,GAAiBtgB,EAAYpL,EAAW2rB,EAAU1C,EAAY,CAC3E,GAAI,CAAC,MAAMjpB,EAAU,IAAIwpB,EAAU,EACjC,OAGF,MAAM/8B,EAAK,MAAMuT,EAAU,IAAIwpB,EAAU,EACnClkC,EAAME,EAAI,OAAOiH,CAAE,EACnBm/B,EAAa,MAAMxgB,EAAW,IAAI9lB,CAAG,EACrCumC,EAAUxX,GAAauX,CAAU,EACvC,IAAI1oC,EAAU,EACd,MAAM4oC,EAAY,MAAM5xC,GAAO6xC,GAAe3gB,EAAYygB,EAASttB,GAAS,SAAS,CAAC,EAAM,MAAMrkB,GAAO6xC,GAAe3gB,EAAYygB,EAASttB,GAAS,MAAM,CAAC,EAE7J,gBAAiBjZ,KAAOymC,GAAe3gB,EAAYygB,EAASttB,GAAS,SAAS,EAAG,CAC/Erb,IAGA,MAAMob,EAAM,CACV,MAAO,GACR,EAEGhZ,EAAI,UAAY,IAClBgZ,EAAI,QAAUhZ,EAAI,SAGhBA,EAAI,OAAS8uB,IACf9V,EAAI,MAAQhZ,EAAI,MAGlB,MAAMqmC,EAAS,IAAI/B,GAAStkC,CAAG,EAAG0mC,GAAY1tB,CAAG,CAAC,EAElD2qB,EAAY/lC,EAAU4oC,EAAY,IAAK,0BAA0BxmC,CAAG,EAAE,CACvE,CAED,gBAAiBA,KAAOymC,GAAe3gB,EAAYygB,EAASttB,GAAS,MAAM,EAAG,CAC5Erb,IAGA,MAAMob,EAAM,CACV,MAAO,CACR,EAEGhZ,EAAI,UAAY,IAClBgZ,EAAI,QAAUhZ,EAAI,SAGhBA,EAAI,OAAS8uB,IACf9V,EAAI,MAAQhZ,EAAI,MAGlB,MAAMqmC,EAAS,IAAI/B,GAAStkC,CAAG,EAAG0mC,GAAY1tB,CAAG,CAAC,EAElD2qB,EAAY/lC,EAAU4oC,EAAY,IAAK,uBAAuBxmC,CAAG,EAAE,CACpE,CAED,MAAM8lB,EAAW,OAAO9lB,CAAG,EAC3B,MAAM0a,EAAU,OAAOwpB,EAAU,CACnC,CAQA,eAAeyC,GAAW7gB,EAAYpL,EAAW2rB,EAAU1C,EAAY,CACrE,MAAMiD,EAAgB,CAAE,EAClBC,EAAa,CAAE,EACrB,IAAIjpC,EAAU,EACd,MAAM4oC,EAAW,MAAM5xC,GAAOyxC,EAAS,UAAU,CAAE,CAAA,CAAC,EAEpD,eAAiB,CAAE,IAAAj0B,EAAK,MAAA1Z,CAAK,IAAM2tC,EAAS,MAAM,CAAA,CAAE,EAAG,CACrDzoC,IACA,MAAMob,EAAM8tB,GAAYpuC,CAAK,EACvBsH,EAAME,EAAI,OACd8Y,EAAI,SAAW,EACfA,EAAI,OAAS8V,EACb2U,GAAWxqC,GAAO,OAAO,IAAMmZ,EAAI,SAAQ,EAAG,YAAW,EAAG,MAAM,GAAG,EAAE,IAAK,CAAA,CAAC,CAC9E,EAEG4G,EAAI,QAAU,GAChB2qB,EAAY/lC,EAAU4oC,EAAY,IAAK,uBAAuBxmC,CAAG,EAAE,EAEnE6mC,EAAW,KAAK7mC,CAAG,IAEnB2jC,EAAY/lC,EAAU4oC,EAAY,IAAK,0BAA0BxmC,CAAG,EAAE,EAEtE4mC,EAAc,KAAK5mC,CAAG,EAEzB,CAED2jC,EAAW,IAAK,mBAAmB,EACnC,MAAM4C,EAAU,CACd,MAAO,CACL,MAAMQ,GAAgBjhB,EAAY7M,GAAS,OAAQ4tB,CAAU,EAC7D,MAAME,GAAgBjhB,EAAY7M,GAAS,UAAW2tB,CAAa,CACpE,CACF,EACKnpC,EAAM+pB,EAAa+e,CAAO,EAC1BznC,EAAS,MAAMgE,GAAO,OAAOrF,CAAG,EAChCuC,EAAME,EAAI,SAASpB,CAAM,EAE/B,MAAMgnB,EAAW,IAAI9lB,EAAKvC,CAAG,EAC7B,MAAMid,EAAU,IAAIwpB,GAAYlkC,EAAI,KAAK,CAC3C,CAOA,eAAexM,GAASkwC,EAAUC,EAAY/zB,EAAI,CAChD,MAAMkW,EAAa4d,EAAS,OACtBhpB,EAAYgpB,EAAS,UACrB2C,EAAW3C,EAAS,KAE1B,MAAM5d,EAAW,KAAM,EACvB,MAAMpL,EAAU,KAAM,EACtB,MAAM2rB,EAAS,KAAM,EAErB,GAAI,CACF,MAAMz2B,EAAGkW,EAAYpL,EAAW2rB,EAAU1C,CAAU,CACxD,QAAY,CACR,MAAM0C,EAAS,MAAO,EACtB,MAAM3rB,EAAU,MAAO,EACvB,MAAMoL,EAAW,MAAO,CACzB,CACH,CAGO,MAAMie,GAAY,CACvB,QAAS,EACT,YAAa,6BACb,QAAS,CAACL,EAAUC,EAAa,IAAM,CAAA,IAC9BnwC,GAAQkwC,EAAUC,EAAYyC,EAAe,EAEtD,OAAQ,CAAC1C,EAAUC,EAAa,IAAM,CAAA,IAC7BnwC,GAAQkwC,EAAUC,EAAYgD,EAAS,CAElD,EC3JaK,GAAa,IAAIh2B,GAAI,SAAS,EAC9Bi2B,GAAc,IAAIj2B,GAAI,UAAU,EAStC,SAASk2B,GAAaC,EAAO,CAClC,IAAIC,EAAKD,EAGT,KAAOC,EAAG,IAAMA,EAAG,OAMjB,GAJAA,EAAKA,EAAG,IAAMA,EAAG,MAIbA,EAAG,OAAS,YAAcA,EAAG,YAAY,OAAS,QACpD,OAAOA,CAGb,CAQO,eAAeC,GAAiBj1B,EAAKk1B,EAAKH,EAAO,CACtD,MAAMrlC,EAAS,MAAMwlC,EAAIl1B,CAAG,EAE5B,GAAItQ,EACF,OAAOA,EAMT,MAAMylC,EAAUL,GAAYC,CAAK,EAEjC,OAAKI,EAIE,IAAI,QAAQ,CAAC51B,EAASrB,IAAW,CAGtC,MAAMk3B,EAAMD,EAAQ,MAAM,UAAU,EAAE,IAAIn1B,EAAI,UAAU,EACxDo1B,EAAI,YAAY,QAAU,IAAM,CAC9Bl3B,EAAOk3B,EAAI,YAAY,KAAK,CAC7B,EACDA,EAAI,YAAY,WAAa,IAAM,CACjC71B,EAAQ,EAAQ61B,EAAI,MAAO,CAC5B,CACL,CAAG,EAbQ,EAcX,CASA,eAAeC,GAAiBr1B,EAAKwM,EAAK0oB,EAAKH,EAAO,CACpD,GAAI,MAAMG,EAAIl1B,CAAG,EACf,OAAOwM,EAAIxM,CAAG,EAMhB,MAAMm1B,EAAUL,GAAYC,CAAK,EAEjC,GAAI,CAACI,EACH,MAAMjtB,GAAe,EAGvB,OAAO,IAAI,QAAQ,CAAC3I,EAASrB,IAAW,CAGtC,MAAMk3B,EAAMD,EAAQ,MAAM,UAAU,EAAE,IAAIn1B,EAAI,UAAU,EACxDo1B,EAAI,YAAY,QAAU,IAAM,CAC9Bl3B,EAAOk3B,EAAI,YAAY,KAAK,CAC7B,EACDA,EAAI,YAAY,WAAa,IAAM,CACjC,GAAIA,EAAI,OACN,OAAO71B,EAAQ61B,EAAI,MAAM,EAG3Bl3B,EAAOgK,GAAa,CAAE,CACvB,CACL,CAAG,CACH,CAKA,SAASotB,GAAWP,EAAO,CAEzB,MAAMQ,EAAcR,EAAM,IAAI,KAAKA,CAAK,EAClCS,EAAcT,EAAM,IAAI,KAAKA,CAAK,EAIxC,OAAAA,EAAM,IAAO/0B,GAAQq1B,GAAgBr1B,EAAKu1B,EAAaC,EAAaT,CAAK,EAIzEA,EAAM,IAAO/0B,GAAQi1B,GAAgBj1B,EAAKw1B,EAAaT,CAAK,EAErDA,CACT,CAKO,SAASU,GAAcnE,EAAU,CACtC,MAAO,CACL,GAAGA,EACH,KAAMgE,GAAUhE,EAAS,IAAI,EAC7B,UAAWgE,GAAUhE,EAAS,SAAS,EACvC,KAAMgE,GAAUhE,EAAS,IAAI,EAC7B,KAAMgE,GAAUhE,EAAS,IAAI,CAC9B,CACH,CCpHA,eAAeoE,GAAc/zC,EAAMozC,EAAOxD,EAAa,IAAM,CAAA,EAAI,CAC/D,MAAMyD,EAAKF,GAAYC,CAAK,EAG5B,GAAI,CAACC,EAAI,CACPzD,EAAW,GAAG5vC,CAAI,0BAA0B,EAE5C,MACD,CAED4vC,EAAW,aAAa5vC,CAAI,EAAE,EAY9B,MAAMg0C,GAASX,EAPC,CAACh1B,EAAK1Z,IACb,CACL,CAAE,KAAM,MAAO,IAAK0Z,CAAK,EACzB,CAAE,KAAM,MAAO,IAAKzb,EAAWyb,CAAG,EAAG,MAAO1Z,CAAO,CACpD,CAGuB,CAC5B,CAOA,eAAesvC,GAAej0C,EAAMozC,EAAOxD,EAAa,IAAM,CAAA,EAAI,CAChE,MAAMyD,EAAKF,GAAYC,CAAK,EAG5B,GAAI,CAACC,EAAI,CACPzD,EAAW,GAAG5vC,CAAI,2BAA2B,EAE7C,MACD,CAED4vC,EAAW,eAAe5vC,CAAI,EAAE,EAYhC,MAAMg0C,GAASX,EAPG,CAACh1B,EAAK1Z,IACf,CACL,CAAE,KAAM,MAAO,IAAK0Z,CAAK,EACzB,CAAE,KAAM,MAAO,IAAKxb,EAASwb,CAAG,EAAG,MAAO1Z,CAAO,CAClD,CAGyB,CAC9B,CAMA,SAAS2qC,GAAQ8D,EAAO,CACtB,OAAIA,EAAM,MACD9D,GAAO8D,EAAM,KAAK,EAGpBA,CACT,CAOA,eAAe3zC,GAASkwC,EAAUC,EAAY/zB,EAAI,CAIhD,MAAMq4B,EAAa,OAAO,QAAQvE,CAAQ,EACvC,IAAI,CAAC,CAACtxB,EAAK81B,CAAO,KAAO,CAAE,IAAA91B,EAAK,QAASixB,GAAO6E,CAAO,CAAC,EAAG,EAC3D,OAAO,CAAC,CAAE,IAAA91B,EAAK,QAAA81B,CAAO,IAAOA,EAAQ,YAAY,OAAS,gBAAgB,EAC1E,IAAI,CAAC,CAAE,IAAA91B,EAAK,QAAA81B,MAAe,CAC1B,KAAM91B,EACN,MAAO81B,CACb,EAAM,EAEJvE,EAAW,EAAG,aAAasE,EAAW,MAAM,MAAM,EAClD,IAAIE,EAAW,EAKf,MAAMC,EAAYlsC,GAAY,CAC5BynC,EAAW,KAAK,MAAOwE,EAAWF,EAAW,OAAU,GAAG,EAAG/rC,CAAO,CACrE,EAED,SAAW,CAAE,KAAAnI,EAAM,MAAAozC,CAAK,IAAMc,EAAY,CACxC,MAAMd,EAAM,KAAM,EAElB,GAAI,CACF,MAAMv3B,EAAG7b,EAAMozC,EAAOiB,CAAQ,CACpC,QAAc,CACRD,IACA,MAAMhB,EAAM,MAAO,CACpB,CACF,CAEDxD,EAAW,IAAK,YAAYsE,EAAW,MAAM,MAAM,CACrD,CAGO,MAAMlE,GAAY,CACvB,QAAS,GACT,YAAa,0CACb,QAAS,CAACL,EAAUC,EAAa,IAAM,CAAA,IAC9BnwC,GAAQkwC,EAAUC,EAAYmE,EAAY,EAEnD,OAAQ,CAACpE,EAAUC,EAAa,IAAM,CAAA,IAC7BnwC,GAAQkwC,EAAUC,EAAYqE,EAAa,CAEtD,EAYA,SAASD,GAAUX,EAAIx3B,EAAI,CAKzB,SAAS8W,EAAO0Z,EAAYh/B,EAAM,CAChC,MAAM+lC,EAAQC,EAAG,MAAM,WAAW,EAC5BiB,EAAclB,EAAM,YAC1B,IAAIzqC,EAAQ,EAERgW,EAEJ21B,EAAY,QAAU,IAAMjnC,EAAKsR,GAAS21B,EAAY,OAAS,IAAI,MAAM,iBAAiB,CAAC,EAC3FA,EAAY,WAAa,IAAMjnC,EAAM,EAErC,SAASknC,GAAQ,CACf,MAAMzZ,EAAKuR,EAAW1jC,GAAO,EACvB0V,EAAMyc,EAAG,IACf,IAAI2Y,EAEJ,GAAI,CACFA,EAAM3Y,EAAG,OAAS,MAAQsY,EAAM,OAAO/0B,CAAG,EAAI+0B,EAAM,IAAItY,EAAG,MAAOzc,CAAG,CACtE,OAA2BxJ,EAAK,CAC/B8J,EAAQ9J,EACRy/B,EAAY,MAAO,EACnB,MACD,CAEG3rC,EAAQ0jC,EAAW,SACrBoH,EAAI,UAAYc,EAEnB,CAEDA,EAAM,CACP,CAED,OAAO,IAAI,QAAQ,CAAC32B,EAASrB,IAAW,CACtC,MAAMG,EAAK22B,EAAG,SAAU,EAMlBhqB,EAAMzkB,GAASA,EACrB8X,EAAG,gBAAkBA,EAAG,kBAAoB2M,EAC5Chc,EAAM,EAEN,SAASA,GAAQ,CAMf,MAAMmnC,EAAa,CAAC3/B,EAAKwJ,EAAK1Z,IAAU,CACtC,GAAIkQ,GAAOwJ,IAAQ,OAAW,CAI5B,MAAMo2B,EAAaC,GAAS,CAC1B,GAAIA,EAAM,CACRn4B,EAAOm4B,CAAI,EACX,MACD,CAED92B,EAAS,CACV,EAEDlB,EAAG,IAAI+3B,CAAS,EAEhB,MACD,CAGD9hB,EAAM9W,EAAGwC,EAAK1Z,CAAK,EAAG0I,CAAI,CAC3B,EACDqP,EAAG,KAAK83B,CAAU,CACnB,CACL,CAAG,CACH,CClOA,MAAMx3B,GAAe,IAAIC,GAAI,kBAAkB,EAM/C,eAAe03B,GAAyBhF,EAAUC,EAAa,IAAM,GAAI,CAMvE,GALAA,EAAW,IAAK,sCAAsC,EAEtD,MAAMD,EAAS,KAAK,KAAM,EAC1B,MAAMA,EAAS,UAAU,KAAM,EAE3B,MAAMA,EAAS,KAAK,IAAI3yB,EAAY,EAAG,CACzC,MAAM6V,EAAO,MAAM8c,EAAS,KAAK,IAAI3yB,EAAY,EACjD,MAAM2yB,EAAS,UAAU,IAAI3yB,GAAc6V,CAAI,EAC/C,MAAM8c,EAAS,KAAK,OAAO3yB,EAAY,CACxC,CAED,MAAM2yB,EAAS,UAAU,MAAO,EAChC,MAAMA,EAAS,KAAK,MAAO,EAE3BC,EAAW,IAAK,mCAAmC,CACrD,CAMA,eAAegF,GAAoBjF,EAAUC,EAAa,IAAM,GAAI,CAMlE,GALAA,EAAW,IAAK,2CAA2C,EAE3D,MAAMD,EAAS,KAAK,KAAM,EAC1B,MAAMA,EAAS,UAAU,KAAM,EAE3B,MAAMA,EAAS,UAAU,IAAI3yB,EAAY,EAAG,CAC9C,MAAM6V,EAAO,MAAM8c,EAAS,UAAU,IAAI3yB,EAAY,EACtD,MAAM2yB,EAAS,KAAK,IAAI3yB,GAAc6V,CAAI,EAC1C,MAAM8c,EAAS,UAAU,OAAO3yB,EAAY,CAC7C,CAED,MAAM2yB,EAAS,UAAU,MAAO,EAChC,MAAMA,EAAS,KAAK,MAAO,EAE3BC,EAAW,IAAK,wCAAwC,CAC1D,CAGO,MAAMI,GAAY,CACvB,QAAS,GACT,YAAa,kCACb,QAAS2E,GACT,OAAQC,EACV,ECnDM7uC,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,GAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7D6uC,GAAY1uC,GAAM,WAAa,IAAM,CAiB9C,SAAS0uC,EAAUxuC,EAAG,CAElB,GADA,KAAK,UAAY,GACbA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAA00C,EAAU,UAAU,UAAY3uC,GAAM,WAWtC2uC,EAAU,OAAS,SAAgBtuC,EAAGC,EAAG,CAGrC,GAFKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQA,EAAE,UAAU,OACnC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,UAAU,OAAQ,EAAEpG,EACtCqG,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,UAAUpG,CAAC,CAAC,EAE1C,OAAOqG,CACf,EAaIquC,EAAU,OAAS,SAAgBpuC,EAAGC,EAAG,CAC/BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,UACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACKL,EAAE,WAAaA,EAAE,UAAU,SAC7BA,EAAE,UAAY,IAClBA,EAAE,UAAU,KAAKE,EAAE,OAAQ,CAAA,EAC3B,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUIsuC,EAAU,WAAa,SAAoB/tC,EAAG,CAC1C,GAAIA,aAAaX,GAAM,UACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,UAClB,GAAIW,EAAE,UAAW,CACb,GAAI,CAAC,MAAM,QAAQA,EAAE,SAAS,EAC1B,MAAM,UAAU,sCAAsC,EAC1DP,EAAE,UAAY,GACd,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,UAAU,OAAQ,EAAE3G,EACtCoG,EAAE,UAAUpG,CAAC,EAAI,OAAO2G,EAAE,UAAU3G,CAAC,CAAC,CAE7C,CACD,OAAOoG,CACf,EAWIsuC,EAAU,SAAW,SAAkBtuC,EAAG5D,EAAG,CACpCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAIR,IAHInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,UAAY,IAEdP,EAAE,WAAaA,EAAE,UAAU,OAAQ,CACnCO,EAAE,UAAY,GACd,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,UAAU,OAAQ,EAAErG,EACtC4G,EAAE,UAAU5G,CAAC,EAAIqG,EAAE,UAAUrG,CAAC,CAErC,CACD,OAAO4G,CACf,EASI+tC,EAAU,UAAU,OAAS,UAAkB,CAC3C,OAAO,KAAK,YAAY,SAAS,KAAM7uC,EAAU,KAAK,aAAa,CAC3E,EAEW6uC,CACX,GAAI,ECpJE9uC,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,EAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7D8uC,GAAY3uC,GAAM,WAAa,IAAM,CAkB9C,SAAS2uC,EAAUzuC,EAAG,CAElB,GADA,KAAK,MAAQ,GACTA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAA20C,EAAU,UAAU,MAAQ5uC,EAAM,WAQlC4uC,EAAU,UAAU,gBAAkB,KAWtCA,EAAU,OAAS,SAAgBvuC,EAAGC,EAAG,CAGrC,GAFKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,OAAS,MAAQA,EAAE,MAAM,OAC3B,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,MAAM,OAAQ,EAAEpG,EAClCgG,GAAM,UAAU,QAAQ,OAAOI,EAAE,MAAMpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAE9E,OAAID,EAAE,iBAAmB,MAAQ,OAAO,eAAe,KAAKA,EAAG,iBAAiB,GAC5EJ,GAAM,UAAU,gBAAgB,OAAOI,EAAE,gBAAiBC,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAClFA,CACf,EAaIsuC,EAAU,OAAS,SAAgBruC,EAAGC,EAAG,CAC/BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,UACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACKL,EAAE,OAASA,EAAE,MAAM,SACrBA,EAAE,MAAQ,IACdA,EAAE,MAAM,KAAKJ,GAAM,UAAU,QAAQ,OAAOM,EAAGA,EAAE,OAAM,CAAE,CAAC,EAC1D,MACJ,IAAK,GACDF,EAAE,gBAAkBJ,GAAM,UAAU,gBAAgB,OAAOM,EAAGA,EAAE,OAAM,CAAE,EACxE,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUIuuC,EAAU,WAAa,SAAoBhuC,EAAG,CAC1C,GAAIA,aAAaX,GAAM,UACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,UAClB,GAAIW,EAAE,MAAO,CACT,GAAI,CAAC,MAAM,QAAQA,EAAE,KAAK,EACtB,MAAM,UAAU,kCAAkC,EACtDP,EAAE,MAAQ,GACV,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,MAAM,OAAQ,EAAE3G,EAAG,CACrC,GAAI,OAAO2G,EAAE,MAAM3G,CAAC,GAAM,SACtB,MAAM,UAAU,mCAAmC,EACvDoG,EAAE,MAAMpG,CAAC,EAAIgG,GAAM,UAAU,QAAQ,WAAWW,EAAE,MAAM3G,CAAC,CAAC,CAC7D,CACJ,CACD,GAAI2G,EAAE,iBAAmB,KAAM,CAC3B,GAAI,OAAOA,EAAE,iBAAoB,SAC7B,MAAM,UAAU,6CAA6C,EACjEP,EAAE,gBAAkBJ,GAAM,UAAU,gBAAgB,WAAWW,EAAE,eAAe,CACnF,CACD,OAAOP,CACf,EAWIuuC,EAAU,SAAW,SAAkBvuC,EAAG5D,EAAG,CACpCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAOR,IANInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,MAAQ,IAEVnE,EAAE,WACFmE,EAAE,gBAAkB,MAEpBP,EAAE,OAASA,EAAE,MAAM,OAAQ,CAC3BO,EAAE,MAAQ,GACV,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,MAAM,OAAQ,EAAErG,EAClC4G,EAAE,MAAM5G,CAAC,EAAIiG,GAAM,UAAU,QAAQ,SAASI,EAAE,MAAMrG,CAAC,EAAGyC,CAAC,CAElE,CACD,OAAI4D,EAAE,iBAAmB,MAAQA,EAAE,eAAe,iBAAiB,IAC/DO,EAAE,gBAAkBX,GAAM,UAAU,gBAAgB,SAASI,EAAE,gBAAiB5D,CAAC,GAE9EmE,CACf,EASIguC,EAAU,UAAU,OAAS,UAAkB,CAC3C,OAAO,KAAK,YAAY,SAAS,KAAM9uC,EAAU,KAAK,aAAa,CAC3E,EAEI8uC,EAAU,QAAW,UAAW,CAkB5B,SAASC,EAAQ1uC,EAAG,CAChB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD40C,EAAQ,UAAU,UAAY7uC,EAAM,UAAU,CAAE,CAAA,EAQhD6uC,EAAQ,UAAU,YAAc,KAGhC,IAAIC,EAQJ,cAAO,eAAeD,EAAQ,UAAW,eAAgB,CACrD,IAAK7uC,EAAM,YAAY8uC,EAAe,CAAC,aAAa,CAAC,EACrD,IAAK9uC,EAAM,YAAY8uC,CAAY,CAC/C,CAAS,EAWDD,EAAQ,OAAS,SAAgBxuC,EAAGC,EAAG,CACnC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQ,OAAO,eAAe,KAAKA,EAAG,WAAW,GAChEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,SAAS,EAC9BA,EAAE,aAAe,MAAQ,OAAO,eAAe,KAAKA,EAAG,aAAa,GACpEC,EAAE,OAAO,EAAE,EAAE,KAAKD,EAAE,WAAW,EAC5BC,CACnB,EAaQuuC,EAAQ,OAAS,SAAgBtuC,EAAGC,EAAG,CAC7BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,UAAU,QAC9DM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,UAAYE,EAAE,QAChB,MACJ,IAAK,GACDF,EAAE,YAAcE,EAAE,OAClB,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQwuC,EAAQ,WAAa,SAAoBjuC,EAAG,CACxC,GAAIA,aAAaX,GAAM,UAAU,QAC7B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,UAAU,QAC5B,OAAIW,EAAE,WAAa,OACX,OAAOA,EAAE,WAAc,SACvBZ,EAAM,OAAO,OAAOY,EAAE,UAAWP,EAAE,UAAYL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,SAAS,CAAC,EAAG,CAAC,EAC9FA,EAAE,UAAU,SACjBP,EAAE,UAAYO,EAAE,YAEpBA,EAAE,aAAe,OACjBP,EAAE,YAAc,EAAQO,EAAE,aAEvBP,CACnB,EAWQwuC,EAAQ,SAAW,SAAkBxuC,EAAG5D,EAAG,CAClCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,UAAY,IAEdA,EAAE,UAAY,GACVnE,EAAE,QAAU,QACZmE,EAAE,UAAYZ,EAAM,UAAUY,EAAE,SAAS,KAGjDP,EAAE,WAAa,MAAQA,EAAE,eAAe,WAAW,IACnDO,EAAE,UAAYnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,UAAW,EAAGA,EAAE,UAAU,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,SAAS,EAAIA,EAAE,WAE7JA,EAAE,aAAe,MAAQA,EAAE,eAAe,aAAa,IACvDO,EAAE,YAAcP,EAAE,YACd5D,EAAE,SACFmE,EAAE,aAAe,gBAElBA,CACnB,EASQiuC,EAAQ,UAAU,OAAS,UAAkB,CACzC,OAAO,KAAK,YAAY,SAAS,KAAM/uC,EAAU,KAAK,aAAa,CAC/E,EAEe+uC,CACf,IAEID,EAAU,gBAAmB,UAAW,CAkBpC,SAASG,EAAgB5uC,EAAG,CACxB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAA80C,EAAgB,UAAU,IAAM/uC,EAAM,KAAOA,EAAM,KAAK,SAAS,EAAE,EAAE,EAAI,EAAI,EAQ7E+uC,EAAgB,UAAU,IAAM/uC,EAAM,UAAU,CAAE,CAAA,EAWlD+uC,EAAgB,OAAS,SAAgB1uC,EAAGC,EAAG,CAC3C,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,KAAO,MAAQ,OAAO,eAAe,KAAKA,EAAG,KAAK,GACpDC,EAAE,OAAO,CAAC,EAAE,OAAOD,EAAE,GAAG,EACxBA,EAAE,KAAO,MAAQ,OAAO,eAAe,KAAKA,EAAG,KAAK,GACpDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,GAAG,EACrBC,CACnB,EAaQyuC,EAAgB,OAAS,SAAgB,EAAGvuC,EAAG,CACrC,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,GAAM,UAAU,gBAC9D,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,IAAM,EAAE,SACV,MACJ,IAAK,GACDA,EAAE,IAAM,EAAE,QACV,MACJ,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQ0uC,EAAgB,WAAa,SAAoBnuC,EAAG,CAChD,GAAIA,aAAaX,GAAM,UAAU,gBAC7B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,UAAU,gBAC5B,OAAIW,EAAE,KAAO,OACLZ,EAAM,MACLK,EAAE,IAAML,EAAM,KAAK,UAAUY,EAAE,GAAG,GAAG,SAAW,GAC5C,OAAOA,EAAE,KAAQ,SACtBP,EAAE,IAAM,SAASO,EAAE,IAAK,EAAE,EACrB,OAAOA,EAAE,KAAQ,SACtBP,EAAE,IAAMO,EAAE,IACL,OAAOA,EAAE,KAAQ,WACtBP,EAAE,IAAM,IAAIL,EAAM,SAASY,EAAE,IAAI,MAAQ,EAAGA,EAAE,IAAI,OAAS,CAAC,EAAE,SAAS,EAAI,IAE/EA,EAAE,KAAO,OACL,OAAOA,EAAE,KAAQ,SACjBZ,EAAM,OAAO,OAAOY,EAAE,IAAKP,EAAE,IAAML,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,GAAG,CAAC,EAAG,CAAC,EAC5EA,EAAE,IAAI,SACXP,EAAE,IAAMO,EAAE,MAEXP,CACnB,EAWQ0uC,EAAgB,SAAW,SAAkB1uC,EAAG5D,EAAG,CAC1CA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,GAAInE,EAAE,SAAU,CACZ,GAAIuD,EAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,EAAM,KAAK,EAAG,EAAG,EAAI,EACjCY,EAAE,IAAMnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACnF,MACGD,EAAE,IAAMnE,EAAE,QAAU,OAAS,IAAM,EACnCA,EAAE,QAAU,OACZmE,EAAE,IAAM,IAERA,EAAE,IAAM,GACJnE,EAAE,QAAU,QACZmE,EAAE,IAAMZ,EAAM,UAAUY,EAAE,GAAG,GAExC,CACD,OAAIP,EAAE,KAAO,MAAQA,EAAE,eAAe,KAAK,IACnC,OAAOA,EAAE,KAAQ,SACjBO,EAAE,IAAMnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,GAAG,EAAIA,EAAE,IAE/CO,EAAE,IAAMnE,EAAE,QAAU,OAASuD,EAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,GAAG,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,EAAM,SAASK,EAAE,IAAI,MAAQ,EAAGA,EAAE,IAAI,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIA,EAAE,KAE3KA,EAAE,KAAO,MAAQA,EAAE,eAAe,KAAK,IACvCO,EAAE,IAAMnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,IAAK,EAAGA,EAAE,IAAI,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,GAAG,EAAIA,EAAE,KAElIO,CACnB,EASQmuC,EAAgB,UAAU,OAAS,UAAkB,CACjD,OAAO,KAAK,YAAY,SAAS,KAAMjvC,EAAU,KAAK,aAAa,CAC/E,EAEeivC,CACf,IAEWH,CACX,GAAI,EChhBE/uC,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,EAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7DkvC,GAAO/uC,GAAM,MAAQ,IAAM,CAqBpC,SAAS+uC,EAAK7uC,EAAG,CAIb,GAHA,KAAK,UAAY,GACjB,KAAK,UAAY,GACjB,KAAK,SAAW,GACZA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD+0C,EAAK,UAAU,UAAYhvC,EAAM,WAQjCgvC,EAAK,UAAU,UAAYhvC,EAAM,WAQjCgvC,EAAK,UAAU,SAAWhvC,EAAM,WAQhCgvC,EAAK,UAAU,OAAS,KAQxBA,EAAK,UAAU,mBAAqB,KAGpC,IAAIF,EAQJ,cAAO,eAAeE,EAAK,UAAW,UAAW,CAC7C,IAAKhvC,EAAM,YAAY8uC,EAAe,CAAC,QAAQ,CAAC,EAChD,IAAK9uC,EAAM,YAAY8uC,CAAY,CAC3C,CAAK,EAQD,OAAO,eAAeE,EAAK,UAAW,sBAAuB,CACzD,IAAKhvC,EAAM,YAAY8uC,EAAe,CAAC,oBAAoB,CAAC,EAC5D,IAAK9uC,EAAM,YAAY8uC,CAAY,CAC3C,CAAK,EAWDE,EAAK,OAAS,SAAgB3uC,EAAGC,EAAG,CAGhC,GAFKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQA,EAAE,UAAU,OACnC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,UAAU,OAAQ,EAAEpG,EACtCgG,GAAM,QAAQ,OAAOI,EAAE,UAAUpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAExE,GAAID,EAAE,WAAa,MAAQA,EAAE,UAAU,OACnC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,UAAU,OAAQ,EAAEpG,EACtCqG,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,UAAUpG,CAAC,CAAC,EAE1C,GAAIoG,EAAE,UAAY,MAAQA,EAAE,SAAS,OACjC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,SAAS,OAAQ,EAAEpG,EACrCgG,GAAM,SAAS,OAAOI,EAAE,SAASpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAExE,OAAID,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,MAAM,EAC3BA,EAAE,oBAAsB,MAAQ,OAAO,eAAe,KAAKA,EAAG,oBAAoB,GAClFC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,kBAAkB,EACpCC,CACf,EAaI0uC,EAAK,OAAS,SAAgB,EAAGxuC,EAAG,CAC1B,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,GAAM,KACpD,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GACKL,EAAE,WAAaA,EAAE,UAAU,SAC7BA,EAAE,UAAY,IAClBA,EAAE,UAAU,KAAKJ,GAAM,QAAQ,OAAO,EAAG,EAAE,OAAQ,CAAA,CAAC,EACpD,MACJ,IAAK,GACKI,EAAE,WAAaA,EAAE,UAAU,SAC7BA,EAAE,UAAY,IAClBA,EAAE,UAAU,KAAK,EAAE,OAAQ,CAAA,EAC3B,MACJ,IAAK,GACKA,EAAE,UAAYA,EAAE,SAAS,SAC3BA,EAAE,SAAW,IACjBA,EAAE,SAAS,KAAKJ,GAAM,SAAS,OAAO,EAAG,EAAE,OAAQ,CAAA,CAAC,EACpD,MACJ,IAAK,GACDI,EAAE,OAAS,EAAE,QACb,MACJ,IAAK,GACDA,EAAE,mBAAqB,EAAE,QACzB,MACJ,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUI2uC,EAAK,WAAa,SAAoBpuC,EAAG,CACrC,GAAIA,aAAaX,GAAM,KACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,KAClB,GAAIW,EAAE,UAAW,CACb,GAAI,CAAC,MAAM,QAAQA,EAAE,SAAS,EAC1B,MAAM,UAAU,iCAAiC,EACrDP,EAAE,UAAY,GACd,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,UAAU,OAAQ,EAAE3G,EAAG,CACzC,GAAI,OAAO2G,EAAE,UAAU3G,CAAC,GAAM,SAC1B,MAAM,UAAU,kCAAkC,EACtDoG,EAAE,UAAUpG,CAAC,EAAIgG,GAAM,QAAQ,WAAWW,EAAE,UAAU3G,CAAC,CAAC,CAC3D,CACJ,CACD,GAAI2G,EAAE,UAAW,CACb,GAAI,CAAC,MAAM,QAAQA,EAAE,SAAS,EAC1B,MAAM,UAAU,iCAAiC,EACrDP,EAAE,UAAY,GACd,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,UAAU,OAAQ,EAAE3G,EACtCoG,EAAE,UAAUpG,CAAC,EAAI,OAAO2G,EAAE,UAAU3G,CAAC,CAAC,CAE7C,CACD,GAAI2G,EAAE,SAAU,CACZ,GAAI,CAAC,MAAM,QAAQA,EAAE,QAAQ,EACzB,MAAM,UAAU,gCAAgC,EACpDP,EAAE,SAAW,GACb,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,SAAS,OAAQ,EAAE3G,EAAG,CACxC,GAAI,OAAO2G,EAAE,SAAS3G,CAAC,GAAM,SACzB,MAAM,UAAU,iCAAiC,EACrDoG,EAAE,SAASpG,CAAC,EAAIgG,GAAM,SAAS,WAAWW,EAAE,SAAS3G,CAAC,CAAC,CAC1D,CACJ,CACD,OAAI2G,EAAE,QAAU,OACR,OAAOA,EAAE,QAAW,SACpBZ,EAAM,OAAO,OAAOY,EAAE,OAAQP,EAAE,OAASL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,MAAM,CAAC,EAAG,CAAC,EACrFA,EAAE,OAAO,SACdP,EAAE,OAASO,EAAE,SAEjBA,EAAE,oBAAsB,OACpB,OAAOA,EAAE,oBAAuB,SAChCZ,EAAM,OAAO,OAAOY,EAAE,mBAAoBP,EAAE,mBAAqBL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,kBAAkB,CAAC,EAAG,CAAC,EACzHA,EAAE,mBAAmB,SAC1BP,EAAE,mBAAqBO,EAAE,qBAE1BP,CACf,EAWI2uC,EAAK,SAAW,SAAkB3uC,EAAG5D,EAAG,CAC/BA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAMR,IALInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,UAAY,GACdA,EAAE,UAAY,GACdA,EAAE,SAAW,IAEbP,EAAE,WAAaA,EAAE,UAAU,OAAQ,CACnCO,EAAE,UAAY,GACd,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,UAAU,OAAQ,EAAErG,EACtC4G,EAAE,UAAU5G,CAAC,EAAIiG,GAAM,QAAQ,SAASI,EAAE,UAAUrG,CAAC,EAAGyC,CAAC,CAEhE,CACD,GAAI4D,EAAE,WAAaA,EAAE,UAAU,OAAQ,CACnCO,EAAE,UAAY,GACd,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,UAAU,OAAQ,EAAErG,EACtC4G,EAAE,UAAU5G,CAAC,EAAIqG,EAAE,UAAUrG,CAAC,CAErC,CACD,GAAIqG,EAAE,UAAYA,EAAE,SAAS,OAAQ,CACjCO,EAAE,SAAW,GACb,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,SAAS,OAAQ,EAAErG,EACrC4G,EAAE,SAAS5G,CAAC,EAAIiG,GAAM,SAAS,SAASI,EAAE,SAASrG,CAAC,EAAGyC,CAAC,CAE/D,CACD,OAAI4D,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IAC7CO,EAAE,OAASnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,OAAQ,EAAGA,EAAE,OAAO,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,MAAM,EAAIA,EAAE,OAC7I5D,EAAE,SACFmE,EAAE,QAAU,WAEhBP,EAAE,oBAAsB,MAAQA,EAAE,eAAe,oBAAoB,IACrEO,EAAE,mBAAqBnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,mBAAoB,EAAGA,EAAE,mBAAmB,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,kBAAkB,EAAIA,EAAE,mBAC7L5D,EAAE,SACFmE,EAAE,oBAAsB,uBAEzBA,CACf,EASIouC,EAAK,UAAU,OAAS,UAAkB,CACtC,OAAO,KAAK,YAAY,SAAS,KAAMlvC,EAAU,KAAK,aAAa,CAC3E,EAEWkvC,CACX,KAEuB/uC,GAAM,SAAW,IAAM,CAkB1C,SAAS4uC,EAAQ1uC,EAAG,CAChB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD40C,EAAQ,UAAU,UAAY7uC,EAAM,UAAU,CAAE,CAAA,EAQhD6uC,EAAQ,UAAU,YAAc,KAGhC,IAAIC,EAQJ,cAAO,eAAeD,EAAQ,UAAW,eAAgB,CACrD,IAAK7uC,EAAM,YAAY8uC,EAAe,CAAC,aAAa,CAAC,EACrD,IAAK9uC,EAAM,YAAY8uC,CAAY,CAC3C,CAAK,EAWDD,EAAQ,OAAS,SAAgBxuC,EAAGC,EAAG,CACnC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQ,OAAO,eAAe,KAAKA,EAAG,WAAW,GAChEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,SAAS,EAC9BA,EAAE,aAAe,MAAQ,OAAO,eAAe,KAAKA,EAAG,aAAa,GACpEC,EAAE,OAAO,EAAE,EAAE,KAAKD,EAAE,WAAW,EAC5BC,CACf,EAaIuuC,EAAQ,OAAS,SAAgB,EAAGruC,EAAG,CAC7B,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,GAAM,QACpD,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,UAAY,EAAE,QAChB,MACJ,IAAK,GACDA,EAAE,YAAc,EAAE,OAClB,MACJ,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUIwuC,EAAQ,WAAa,SAAoBjuC,EAAG,CACxC,GAAIA,aAAaX,GAAM,QACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,QAClB,OAAIW,EAAE,WAAa,OACX,OAAOA,EAAE,WAAc,SACvBZ,EAAM,OAAO,OAAOY,EAAE,UAAWP,EAAE,UAAYL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,SAAS,CAAC,EAAG,CAAC,EAC9FA,EAAE,UAAU,SACjBP,EAAE,UAAYO,EAAE,YAEpBA,EAAE,aAAe,OACjBP,EAAE,YAAc,EAAQO,EAAE,aAEvBP,CACf,EAWIwuC,EAAQ,SAAW,SAAkBxuC,EAAG5D,EAAG,CAClCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,UAAY,IAEdA,EAAE,UAAY,GACVnE,EAAE,QAAU,QACZmE,EAAE,UAAYZ,EAAM,UAAUY,EAAE,SAAS,KAGjDP,EAAE,WAAa,MAAQA,EAAE,eAAe,WAAW,IACnDO,EAAE,UAAYnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,UAAW,EAAGA,EAAE,UAAU,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,SAAS,EAAIA,EAAE,WAE7JA,EAAE,aAAe,MAAQA,EAAE,eAAe,aAAa,IACvDO,EAAE,YAAcP,EAAE,YACd5D,EAAE,SACFmE,EAAE,aAAe,gBAElBA,CACf,EASIiuC,EAAQ,UAAU,OAAS,UAAkB,CACzC,OAAO,KAAK,YAAY,SAAS,KAAM/uC,EAAU,KAAK,aAAa,CAC3E,EAEW+uC,CACX,GAAK,EAEmB5uC,GAAM,UAAY,IAAM,CAkB5C,SAASgB,EAASd,EAAG,CACjB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAgH,EAAS,UAAU,IAAM,GAQzBA,EAAS,UAAU,MAAQjB,EAAM,UAAU,CAAE,CAAA,EAW7CiB,EAAS,OAAS,SAAgBZ,EAAGC,EAAG,CACpC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,KAAO,MAAQ,OAAO,eAAe,KAAKA,EAAG,KAAK,GACpDC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,GAAG,EACzBA,EAAE,OAAS,MAAQ,OAAO,eAAe,KAAKA,EAAG,OAAO,GACxDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,KAAK,EACvBC,CACf,EAaIW,EAAS,OAAS,SAAgBV,EAAGC,EAAG,CAC9BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,SACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,IAAME,EAAE,SACV,MACJ,IAAK,GACDF,EAAE,MAAQE,EAAE,QACZ,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUIY,EAAS,WAAa,SAAoBL,EAAG,CACzC,GAAIA,aAAaX,GAAM,SACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,SAClB,OAAIW,EAAE,KAAO,OACTP,EAAE,IAAM,OAAOO,EAAE,GAAG,GAEpBA,EAAE,OAAS,OACP,OAAOA,EAAE,OAAU,SACnBZ,EAAM,OAAO,OAAOY,EAAE,MAAOP,EAAE,MAAQL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,KAAK,CAAC,EAAG,CAAC,EAClFA,EAAE,MAAM,SACbP,EAAE,MAAQO,EAAE,QAEbP,CACf,EAWIY,EAAS,SAAW,SAAkBZ,EAAG5D,EAAG,CACnCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACFmE,EAAE,IAAM,GACJnE,EAAE,QAAU,OACZmE,EAAE,MAAQ,IAEVA,EAAE,MAAQ,GACNnE,EAAE,QAAU,QACZmE,EAAE,MAAQZ,EAAM,UAAUY,EAAE,KAAK,KAGzCP,EAAE,KAAO,MAAQA,EAAE,eAAe,KAAK,IACvCO,EAAE,IAAMP,EAAE,KAEVA,EAAE,OAAS,MAAQA,EAAE,eAAe,OAAO,IAC3CO,EAAE,MAAQnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,MAAO,EAAGA,EAAE,MAAM,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,KAAK,EAAIA,EAAE,OAE1IO,CACf,EASIK,EAAS,UAAU,OAAS,UAAkB,CAC1C,OAAO,KAAK,YAAY,SAAS,KAAMnB,EAAU,KAAK,aAAa,CAC3E,EAEWmB,CACX,GAAC,EC1nBD,MAAMpB,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,EAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7DmvC,GAAWhvC,GAAM,UAAY,IAAM,CAoB5C,SAASgvC,EAAS9uC,EAAG,CACjB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAg1C,EAAS,UAAU,UAAYjvC,EAAM,UAAU,CAAE,CAAA,EAQjDivC,EAAS,UAAU,YAAcjvC,EAAM,UAAU,CAAE,CAAA,EAQnDivC,EAAS,UAAU,QAAUjvC,EAAM,UAAU,CAAE,CAAA,EAQ/CivC,EAAS,UAAU,UAAYjvC,EAAM,UAAU,CAAE,CAAA,EAWjDivC,EAAS,OAAS,SAAgB5uC,EAAGC,EAAG,CACpC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQ,OAAO,eAAe,KAAKA,EAAG,WAAW,GAChEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,SAAS,EAC9BA,EAAE,aAAe,MAAQ,OAAO,eAAe,KAAKA,EAAG,aAAa,GACpEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,WAAW,EAChCA,EAAE,SAAW,MAAQ,OAAO,eAAe,KAAKA,EAAG,SAAS,GAC5DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,OAAO,EAC5BA,EAAE,WAAa,MAAQ,OAAO,eAAe,KAAKA,EAAG,WAAW,GAChEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,SAAS,EAC3BC,CACf,EAaI2uC,EAAS,OAAS,SAAgB1uC,EAAGC,EAAG,CAC9BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,SACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,UAAYE,EAAE,QAChB,MACJ,IAAK,GACDF,EAAE,YAAcE,EAAE,QAClB,MACJ,IAAK,GACDF,EAAE,QAAUE,EAAE,QACd,MACJ,IAAK,GACDF,EAAE,UAAYE,EAAE,QAChB,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUI4uC,EAAS,WAAa,SAAoBruC,EAAG,CACzC,GAAIA,aAAaX,GAAM,SACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,SAClB,OAAIW,EAAE,WAAa,OACX,OAAOA,EAAE,WAAc,SACvBZ,EAAM,OAAO,OAAOY,EAAE,UAAWP,EAAE,UAAYL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,SAAS,CAAC,EAAG,CAAC,EAC9FA,EAAE,UAAU,SACjBP,EAAE,UAAYO,EAAE,YAEpBA,EAAE,aAAe,OACb,OAAOA,EAAE,aAAgB,SACzBZ,EAAM,OAAO,OAAOY,EAAE,YAAaP,EAAE,YAAcL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,WAAW,CAAC,EAAG,CAAC,EACpGA,EAAE,YAAY,SACnBP,EAAE,YAAcO,EAAE,cAEtBA,EAAE,SAAW,OACT,OAAOA,EAAE,SAAY,SACrBZ,EAAM,OAAO,OAAOY,EAAE,QAASP,EAAE,QAAUL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,OAAO,CAAC,EAAG,CAAC,EACxFA,EAAE,QAAQ,SACfP,EAAE,QAAUO,EAAE,UAElBA,EAAE,WAAa,OACX,OAAOA,EAAE,WAAc,SACvBZ,EAAM,OAAO,OAAOY,EAAE,UAAWP,EAAE,UAAYL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,SAAS,CAAC,EAAG,CAAC,EAC9FA,EAAE,UAAU,SACjBP,EAAE,UAAYO,EAAE,YAEjBP,CACf,EAWI4uC,EAAS,SAAW,SAAkB5uC,EAAG5D,EAAG,CACnCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,UAAY,IAEdA,EAAE,UAAY,GACVnE,EAAE,QAAU,QACZmE,EAAE,UAAYZ,EAAM,UAAUY,EAAE,SAAS,IAE7CnE,EAAE,QAAU,OACZmE,EAAE,YAAc,IAEhBA,EAAE,YAAc,GACZnE,EAAE,QAAU,QACZmE,EAAE,YAAcZ,EAAM,UAAUY,EAAE,WAAW,IAEjDnE,EAAE,QAAU,OACZmE,EAAE,QAAU,IAEZA,EAAE,QAAU,GACRnE,EAAE,QAAU,QACZmE,EAAE,QAAUZ,EAAM,UAAUY,EAAE,OAAO,IAEzCnE,EAAE,QAAU,OACZmE,EAAE,UAAY,IAEdA,EAAE,UAAY,GACVnE,EAAE,QAAU,QACZmE,EAAE,UAAYZ,EAAM,UAAUY,EAAE,SAAS,KAGjDP,EAAE,WAAa,MAAQA,EAAE,eAAe,WAAW,IACnDO,EAAE,UAAYnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,UAAW,EAAGA,EAAE,UAAU,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,SAAS,EAAIA,EAAE,WAE7JA,EAAE,aAAe,MAAQA,EAAE,eAAe,aAAa,IACvDO,EAAE,YAAcnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,YAAa,EAAGA,EAAE,YAAY,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,WAAW,EAAIA,EAAE,aAErKA,EAAE,SAAW,MAAQA,EAAE,eAAe,SAAS,IAC/CO,EAAE,QAAUnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,QAAS,EAAGA,EAAE,QAAQ,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,OAAO,EAAIA,EAAE,SAErJA,EAAE,WAAa,MAAQA,EAAE,eAAe,WAAW,IACnDO,EAAE,UAAYnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,UAAW,EAAGA,EAAE,UAAU,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,SAAS,EAAIA,EAAE,WAE1JO,CACf,EASIquC,EAAS,UAAU,OAAS,UAAkB,CAC1C,OAAO,KAAK,YAAY,SAAS,KAAMnvC,EAAU,KAAK,aAAa,CAC3E,EAEWmvC,CACX,GAAI,EC1OEpvC,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,GAAQF,EAAU,KAG1EG,GAAQH,EAAU,MAAM,UAAeA,EAAU,MAAM,QAAa,CAAA,GAE7DovC,GAAajvC,GAAM,YAAc,IAAM,CAmBhD,SAASivC,EAAW/uC,EAAG,CAEnB,GADA,KAAK,UAAY,GACbA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAi1C,EAAW,UAAU,OAASlvC,GAAM,UAAU,CAAE,CAAA,EAQhDkvC,EAAW,UAAU,IAAMlvC,GAAM,KAAOA,GAAM,KAAK,SAAS,EAAE,EAAE,EAAI,EAAI,EAQxEkvC,EAAW,UAAU,UAAYlvC,GAAM,WAWvCkvC,EAAW,OAAS,SAAgB7uC,EAAGC,EAAG,CAOtC,GANKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,MAAM,EAC3BA,EAAE,KAAO,MAAQ,OAAO,eAAe,KAAKA,EAAG,KAAK,GACpDC,EAAE,OAAO,EAAE,EAAE,OAAOD,EAAE,GAAG,EACzBA,EAAE,WAAa,MAAQA,EAAE,UAAU,OACnC,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,UAAU,OAAQ,EAAEpG,EACtCgG,GAAM,WAAW,YAAY,OAAOI,EAAE,UAAUpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAEvF,OAAOA,CACf,EAaI4uC,EAAW,OAAS,SAAgB3uC,EAAGC,EAAG,CAChCD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,GAAM,WACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,OAASE,EAAE,QACb,MACJ,IAAK,GACDF,EAAE,IAAME,EAAE,SACV,MACJ,IAAK,GACKF,EAAE,WAAaA,EAAE,UAAU,SAC7BA,EAAE,UAAY,IAClBA,EAAE,UAAU,KAAKJ,GAAM,WAAW,YAAY,OAAOM,EAAGA,EAAE,OAAM,CAAE,CAAC,EACnE,MACJ,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUI6uC,EAAW,WAAa,SAAoBtuC,EAAG,CAC3C,GAAIA,aAAaX,GAAM,WACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,WAiBlB,GAhBIW,EAAE,QAAU,OACR,OAAOA,EAAE,QAAW,SACpBZ,GAAM,OAAO,OAAOY,EAAE,OAAQP,EAAE,OAASL,GAAM,UAAUA,GAAM,OAAO,OAAOY,EAAE,MAAM,CAAC,EAAG,CAAC,EACrFA,EAAE,OAAO,SACdP,EAAE,OAASO,EAAE,SAEjBA,EAAE,KAAO,OACLZ,GAAM,MACLK,EAAE,IAAML,GAAM,KAAK,UAAUY,EAAE,GAAG,GAAG,SAAW,GAC5C,OAAOA,EAAE,KAAQ,SACtBP,EAAE,IAAM,SAASO,EAAE,IAAK,EAAE,EACrB,OAAOA,EAAE,KAAQ,SACtBP,EAAE,IAAMO,EAAE,IACL,OAAOA,EAAE,KAAQ,WACtBP,EAAE,IAAM,IAAIL,GAAM,SAASY,EAAE,IAAI,MAAQ,EAAGA,EAAE,IAAI,OAAS,CAAC,EAAE,SAAS,EAAI,IAE/EA,EAAE,UAAW,CACb,GAAI,CAAC,MAAM,QAAQA,EAAE,SAAS,EAC1B,MAAM,UAAU,uCAAuC,EAC3DP,EAAE,UAAY,GACd,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,UAAU,OAAQ,EAAE3G,EAAG,CACzC,GAAI,OAAO2G,EAAE,UAAU3G,CAAC,GAAM,SAC1B,MAAM,UAAU,wCAAwC,EAC5DoG,EAAE,UAAUpG,CAAC,EAAIgG,GAAM,WAAW,YAAY,WAAWW,EAAE,UAAU3G,CAAC,CAAC,CAC1E,CACJ,CACD,OAAOoG,CACf,EAWI6uC,EAAW,SAAW,SAAkB7uC,EAAG5D,EAAG,CACrCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAIR,IAHInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,UAAY,IAEdnE,EAAE,SAQF,GAPIA,EAAE,QAAU,OACZmE,EAAE,OAAS,IAEXA,EAAE,OAAS,GACPnE,EAAE,QAAU,QACZmE,EAAE,OAASZ,GAAM,UAAUY,EAAE,MAAM,IAEvCZ,GAAM,KAAM,CACZ,IAAIa,EAAI,IAAIb,GAAM,KAAK,EAAG,EAAG,EAAI,EACjCY,EAAE,IAAMnE,EAAE,QAAU,OAASoE,EAAE,SAAU,EAAGpE,EAAE,QAAU,OAASoE,EAAE,SAAQ,EAAKA,CACnF,MACGD,EAAE,IAAMnE,EAAE,QAAU,OAAS,IAAM,EAW3C,GATI4D,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IAC7CO,EAAE,OAASnE,EAAE,QAAU,OAASuD,GAAM,OAAO,OAAOK,EAAE,OAAQ,EAAGA,EAAE,OAAO,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,MAAM,EAAIA,EAAE,QAEjJA,EAAE,KAAO,MAAQA,EAAE,eAAe,KAAK,IACnC,OAAOA,EAAE,KAAQ,SACjBO,EAAE,IAAMnE,EAAE,QAAU,OAAS,OAAO4D,EAAE,GAAG,EAAIA,EAAE,IAE/CO,EAAE,IAAMnE,EAAE,QAAU,OAASuD,GAAM,KAAK,UAAU,SAAS,KAAKK,EAAE,GAAG,EAAI5D,EAAE,QAAU,OAAS,IAAIuD,GAAM,SAASK,EAAE,IAAI,MAAQ,EAAGA,EAAE,IAAI,OAAS,CAAC,EAAE,SAAS,EAAI,EAAIA,EAAE,KAE3KA,EAAE,WAAaA,EAAE,UAAU,OAAQ,CACnCO,EAAE,UAAY,GACd,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,UAAU,OAAQ,EAAErG,EACtC4G,EAAE,UAAU5G,CAAC,EAAIiG,GAAM,WAAW,YAAY,SAASI,EAAE,UAAUrG,CAAC,EAAGyC,CAAC,CAE/E,CACD,OAAOmE,CACf,EASIsuC,EAAW,UAAU,OAAS,UAAkB,CAC5C,OAAO,KAAK,YAAY,SAAS,KAAMpvC,EAAU,KAAK,aAAa,CAC3E,EAEIovC,EAAW,YAAe,UAAW,CAiBjC,SAASC,EAAYhvC,EAAG,CACpB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAk1C,EAAY,UAAU,UAAYnvC,GAAM,UAAU,CAAE,CAAA,EAWpDmvC,EAAY,OAAS,SAAgB9uC,EAAGC,EAAG,CACvC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,WAAa,MAAQ,OAAO,eAAe,KAAKA,EAAG,WAAW,GAChEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,SAAS,EAC3BC,CACnB,EAaQ6uC,EAAY,OAAS,SAAgB,EAAG3uC,EAAG,CACjC,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,GAAM,WAAW,YAC/D,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GACDL,EAAE,UAAY,EAAE,QAChB,MACJ,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQ8uC,EAAY,WAAa,SAAoBvuC,EAAG,CAC5C,GAAIA,aAAaX,GAAM,WAAW,YAC9B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,GAAM,WAAW,YAC7B,OAAIW,EAAE,WAAa,OACX,OAAOA,EAAE,WAAc,SACvBZ,GAAM,OAAO,OAAOY,EAAE,UAAWP,EAAE,UAAYL,GAAM,UAAUA,GAAM,OAAO,OAAOY,EAAE,SAAS,CAAC,EAAG,CAAC,EAC9FA,EAAE,UAAU,SACjBP,EAAE,UAAYO,EAAE,YAEjBP,CACnB,EAWQ8uC,EAAY,SAAW,SAAkB9uC,EAAG5D,EAAG,CACtCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,UAAY,IAEdA,EAAE,UAAY,GACVnE,EAAE,QAAU,QACZmE,EAAE,UAAYZ,GAAM,UAAUY,EAAE,SAAS,KAGjDP,EAAE,WAAa,MAAQA,EAAE,eAAe,WAAW,IACnDO,EAAE,UAAYnE,EAAE,QAAU,OAASuD,GAAM,OAAO,OAAOK,EAAE,UAAW,EAAGA,EAAE,UAAU,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,SAAS,EAAIA,EAAE,WAE1JO,CACnB,EASQuuC,EAAY,UAAU,OAAS,UAAkB,CAC7C,OAAO,KAAK,YAAY,SAAS,KAAMrvC,EAAU,KAAK,aAAa,CAC/E,EAEeqvC,CACf,IAEWD,CACX,GAAI,EChWJpvC,EAAU,KAAK,KAAO,OACtBA,EAAU,UAAW,EAMrB,eAAesvC,GAAkC3F,EAAUC,EAAa,IAAM,GAAI,CAChFA,EAAW,EAAG,yDAAyD,EAEvE,MAAMD,EAAS,UAAU,KAAM,EAG/B,MAAM4F,EAAQ,CAAE,EAEVjtB,EAAO,CAAE,EAEf,eAAiB,CAAE,IAAAjK,EAAK,MAAA1Z,CAAO,IAAIgrC,EAAS,UAAU,MAAM,CAC1D,OAAQ,QACZ,CAAG,EAAG,CACFrnB,EAAK,KAAKjK,CAAG,EACb,MAAMm3B,EAASn3B,EAAI,SAAU,EACvB,CAAG,CAAAtb,EAAQuF,EAAM2W,EAAQw2B,CAAW,EAAID,EAAO,MAAM,GAAG,EAE9D,GAAIzyC,IAAW,SAIV,CAAC,SAAU,QAAS,WAAY,MAAM,EAAE,SAASuF,CAAI,GAIrD2W,EAUL,GANAs2B,EAAMt2B,CAAM,EAAIs2B,EAAMt2B,CAAM,GAAK,CAC/B,UAAW,CAAE,EACb,UAAW,CAAE,EACb,SAAU,CAAE,CACb,EAEG3W,IAAS,SAAU,CACrB,MAAMsP,EAASi9B,GAAU,OAAOlwC,CAAK,EAErC4wC,EAAMt2B,CAAM,EAAE,UAAYrH,EAAO,UAAU,KAAM,CACvD,SAAetP,IAAS,QAAS,CAC3B,MAAMotC,EAAQZ,GAAU,OAAOnwC,CAAK,EAEpC4wC,EAAMt2B,CAAM,EAAE,UAAYy2B,EAAM,MAAM,KAAK,CAACnqC,EAAGlJ,IACtCwV,GAAUtM,EAAE,SAAS,EAAE,SAAU,EAAC,cAAcsM,GAAUxV,EAAE,SAAS,EAAE,SAAQ,CAAE,CACzF,EAEGqzC,EAAM,iBAAmBA,EAAM,gBAAgB,MACjDH,EAAMt2B,CAAM,EAAE,mBAAqBy2B,EAAM,gBAAgB,IAEjE,MAAeptC,IAAS,WAClBitC,EAAMt2B,CAAM,EAAE,SAAS,KAAK,CAAE,IAAKw2B,EAAa,MAAA9wC,EAAO,EAC9C2D,IAAS,SAClBitC,EAAMt2B,CAAM,EAAE,OAASta,EAE1B,CAEDirC,EAAW,GAAI,2BAA2B,EAE1C,UAAWvxB,KAAOiK,EAChB,MAAMqnB,EAAS,UAAU,OAAOtxB,CAAG,EAGrCuxB,EAAW,GAAI,uCAAuC,EAEtD,UAAW3wB,KAAU,OAAO,KAAKs2B,CAAK,EAAG,CACvC,MAAM5W,EAAO4W,EAAMt2B,CAAM,EACzB0f,EAAK,SAAWA,EAAK,SAAS,KAAK,CAAgCpzB,EAAkClJ,IAAMkJ,EAAE,IAAI,cAAclJ,EAAE,GAAG,CAAC,EAErI,MAAMuC,EAAOswC,GAAK,OAAOvW,CAAI,EAAE,OAAQ,EAEvC,MAAMgR,EAAS,UAAU,IAAI,IAAI1yB,GAAI,UAAUgC,CAAM,EAAE,EAAGra,CAAI,CAC/D,CAED,MAAM+qC,EAAS,UAAU,MAAO,EAEhCC,EAAW,IAAK,wDAAwD,CAC1E,CAMA,eAAe+F,GAAqChG,EAAUC,EAAa,IAAM,GAAI,CACnFA,EAAW,EAAG,4DAA4D,EAE1E,MAAMD,EAAS,UAAU,KAAM,EAG/B,MAAM4F,EAAQ,CAAE,EAEVjtB,EAAO,CAAE,EAEf,eAAiB,CAAE,IAAAjK,EAAK,MAAA1Z,CAAO,IAAIgrC,EAAS,UAAU,MAAM,CAC1D,OAAQ,QACZ,CAAG,EAAG,CACFrnB,EAAK,KAAKjK,CAAG,EACb,MAAMm3B,EAASn3B,EAAI,SAAU,EAEvB,CAAK,CAAA,CAAAY,CAAM,EAAIu2B,EAAO,MAAM,GAAG,EAErCD,EAAMt2B,CAAM,EAAIi2B,GAAK,OAAOvwC,CAAK,CAClC,CAEDirC,EAAW,GAAI,2BAA2B,EAE1C,UAAWvxB,KAAOiK,EAChB,MAAMqnB,EAAS,UAAU,OAAOtxB,CAAG,EAGrCuxB,EAAW,GAAI,uCAAuC,EAEtD,SAAW,CAAC3wB,EAAQ0f,CAAI,IAAK,OAAO,QAAQ4W,CAAK,EAAG,CAOlD,GANI5W,EAAK,WAAaA,EAAK,UAAU,OAAS,GAC5C,MAAMgR,EAAS,UAAU,IAAI,IAAI1yB,GAAI,iBAAiBgC,CAAM,EAAE,EAAG41B,GAAU,OAAO,CAChF,UAAWlW,EAAK,SACxB,CAAO,EAAE,OAAM,CAAE,EAGTA,EAAK,WAAaA,EAAK,UAAU,OAAS,EAAG,CAC/C,MAAMiX,EAAqBjX,EAAK,mBAChC,IAAIkX,EAEJ,GAAID,EAAoB,CACtB,MAAME,EAAWX,GAAS,OAAOS,CAAkB,EAC7C/uB,EAASuuB,GAAW,OAAOU,EAAS,OAAO,EAEjDD,EAAkB,CAChB,IAAKD,EACL,IAAK/uB,EAAO,GACb,CACF,CAED,MAAM8oB,EAAS,UAAU,IAAI,IAAI1yB,GAAI,gBAAgBgC,CAAM,EAAE,EAAG61B,GAAU,OAAO,CAC/E,MAAOnW,EAAK,UACZ,gBAAAkX,CACR,CAAO,EAAE,OAAM,CAAE,CACZ,CAED,GAAIlX,EAAK,UAAYA,EAAK,SAAS,OAAS,EAC1C,SAAW,CAAE,IAAAtgB,EAAK,MAAA1Z,CAAK,IAAMg6B,EAAK,SAChC,MAAMgR,EAAS,UAAU,IAAI,IAAI1yB,GAAI,mBAAmBgC,CAAM,IAAIZ,CAAG,EAAE,EAAG1Z,CAAK,EAI/Eg6B,EAAK,QACP,MAAMgR,EAAS,UAAU,IAAI,IAAI1yB,GAAI,eAAegC,CAAM,EAAE,EAAG0f,EAAK,MAAM,CAE7E,CAED,MAAMgR,EAAS,UAAU,MAAO,EAEhCC,EAAW,IAAK,yDAAyD,CAC3E,CAGO,MAAMI,GAAY,CACvB,QAAS,GACT,YAAa,yDACb,QAASsF,GACT,OAAQK,EACV,ECxKMI,GAAiB,CACrB,YAAa,mBAEb,QAAS,IAAM,CAAE,EAEjB,OAAQ,IAAM,CAAE,EAChB,MAAO,EACT,EAEeC,GAAA,CACb,OAAO,OAAO,CAAE,QAAS,CAAC,EAAID,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5C,OAAO,OAAO,CAAE,QAAS,CAAC,EAAIA,EAAc,EAC5CE,GACAC,GACAC,GACAC,GACAC,EACF,EC1BO,MAAMC,WAAoC,KAAM,CAIrD,YAAanuC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,8BACZ,KAAK,KAAOmuC,GAA4B,KACxC,KAAK,QAAUnuC,CAChB,CACH,CACAmuC,GAA4B,KAAO,+BAK5B,MAAMC,WAAgC,KAAM,CAIjD,YAAapuC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,0BACZ,KAAK,KAAOouC,GAAwB,KACpC,KAAK,QAAUpuC,CAChB,CACH,CACAouC,GAAwB,KAAO,2BAKxB,MAAMC,WAA+B,KAAM,CAIhD,YAAaruC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,yBACZ,KAAK,KAAOquC,GAAuB,KACnC,KAAK,QAAUruC,CAChB,CACH,CACAquC,GAAuB,KAAO,yBAKvB,MAAMC,WAA0B,KAAM,CAI3C,YAAatuC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,oBACZ,KAAK,KAAOsuC,GAAkB,KAC9B,KAAK,QAAUtuC,CAChB,CACH,CACAsuC,GAAkB,KAAO,oBAKlB,MAAMC,WAAgC,KAAM,CAIjD,YAAavuC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,0BACZ,KAAK,KAAOuuC,GAAwB,KACpC,KAAK,QAAUvuC,CAChB,CACH,CACAuuC,GAAwB,KAAO,mQC3EzBtwB,GAAMipB,GAAM,8BAA8B,EAKzC,eAAesH,GAAmBhH,EAAU,CACjD,GAAI,CAACA,EACH,MAAM,IAAI+G,GAAwB,qDAAqD,EAGzF,MAAM7jB,EAAO8c,EAAS,KAEtB,GAAI,CACF,MAAM9c,EAAK,KAAM,EACjB,MAAM+jB,EAAe,MAAM/jB,EAAK,IAAIqgB,EAAW,EACzC2D,EAAc,MAAMhkB,EAAK,IAAIogB,EAAU,EAC7C,MAAI,CAAC2D,GAAgB,CAACC,GACpBzwB,GAAI,0BAA0BwwB,CAAY,EAAE,EAC5CxwB,GAAI,yBAAyBywB,CAAW,EAAE,EACnC,IAGF,EACR,OAA2BjtB,EAAG,CAC7BxD,OAAAA,GAAI,2DAA6DwD,EAAE,OAAO,EACnE,EACX,QAAY,CACR,GAAIiJ,IAAS,OACX,GAAI,CACF,MAAMA,EAAK,MAAO,CACnB,MAAO,CAAE,CAEb,CACH,CCxBO,eAAeikB,GAAYnH,EAAU,CAC1C,GAAI,CAAE,MAAMgH,GAAkBhH,CAAQ,EACpC,MAAM,IAAI4G,GAAwB,0BAA0B,EAG9D,MAAMnD,EAAQzD,EAAS,KACvB,MAAMyD,EAAM,KAAM,EAElB,GAAI,CACF,OAAO,SAASviC,EAAmB,MAAMuiC,EAAM,IAAIF,EAAW,CAAC,CAAC,CACpE,QAAY,CACR,MAAME,EAAM,MAAO,CACpB,CACH,CAQO,eAAe2D,GAAYnrC,EAAS+jC,EAAU,CACnD,GAAI,CAACA,EACH,MAAM,IAAI+G,GAAwB,qDAAqD,EAGzF,MAAMtD,EAAQzD,EAAS,KACvB,MAAMyD,EAAM,KAAM,EAClB,MAAMA,EAAM,IAAIF,GAAazgC,EAAqB,OAAO7G,CAAO,CAAC,CAAC,EAClE,MAAMwnC,EAAM,MAAO,CACrB,CCpCA,MAAMhtB,GAAMipB,GAAM,oBAAoB,EAe/B,SAAS2H,GAA2BC,EAAY,CAGrD,OAFAA,EAAaA,GAAcjB,GAEvB,CAAC,MAAM,QAAQiB,CAAU,GAAKA,EAAW,SAAW,EAC/C,EAGFA,EAAWA,EAAW,OAAS,CAAC,EAAE,OAC3C,CAcO,eAAeC,GAAS1lC,EAAMm+B,EAAUwH,EAAaC,EAAW/uC,EAAU,GAAI,CACnF,MAAMgvC,EAAahvC,EAAQ,YAAc,GACnCunC,EAAavnC,EAAQ,WACrBivC,EAAWjvC,EAAQ,UAAY,GAC/B4uC,EAAa5uC,EAAQ,YAAc2tC,GAEzC,GAAI,CAACxkC,EACH,MAAM,IAAI+lC,GAAO,uBAAuB,4BAA4B,EAGtE,GAAI,CAACJ,EACH,MAAM,IAAII,GAAO,uBAAuB,mCAAmC,EAG7E,GAAI,CAACH,EACH,MAAM,IAAIG,GAAO,uBAAuB,iCAAiC,EAG3E,GAAI,CAAC,OAAO,UAAUH,CAAS,GAAKA,GAAa,EAC/C,MAAM,IAAIG,GAAO,kBAAkB,qCAAqC,EAI1E5H,EAAWmE,GAAanE,CAAQ,EAEhC,MAAM6H,EAAiB,MAAMC,GAAuB9H,CAAQ,EAE5D,GAAI6H,IAAmBJ,EAAW,CAChChxB,GAAI,qBAAqB,EACzB,MACD,CAED,GAAIoxB,EAAiBJ,EACnB,MAAM,IAAIG,GAAO,kBAAkB,2BAA2BC,CAAc,+BAA+BJ,CAAS,sCAAsC,EAG5JM,GAA0BT,EAAYO,EAAgBJ,CAAS,EAE/D,IAAI1T,EAEA,CAAC4T,GAAY,CAACD,IAChB3T,EAAO,MAAMyT,EAAY,SAAS,KAAK3lC,CAAI,GAG7C,GAAI,CACF,UAAWw+B,KAAaiH,EAAY,CAClC,GAAIG,IAAc,QAAapH,EAAU,QAAUoH,EACjD,MAGF,GAAI,EAAApH,EAAU,SAAWwH,GAIzBpxB,CAAAA,GAAI,qBAAqB4pB,EAAU,OAAO,EAAE,EAE5C,GAAI,CACF,GAAI,CAACsH,EAAU,CAEb,IAAIK,EAAmB,IAAM,CAAE,EAE3B/H,IACF+H,EAAmB,CAACC,EAASzvC,IAAYynC,EAAWI,EAAU,QAAS4H,EAAQ,QAAQ,CAAC,EAAGzvC,CAAO,GAGpG,MAAM6nC,EAAU,QAAQL,EAAUgI,CAAgB,CACnD,CACF,OAA2B/tB,EAAG,CAC7B,MAAMiuB,EAAkC7H,EAAU,QAAU,EAE5D5pB,MAAAA,GAAI,4HAA4HyxB,CAA+B,EAAE,EACjK,MAAMC,GAAuBD,EAAiClI,CAAQ,EAEhE,IAAI,MAAM,+BAA+BK,EAAU,OAAO,0BAA0BpmB,EAAE,OAASA,EAAE,SAAWA,CAAC,EAAE,CACtH,CAEDxD,GAAI,wBAAwB4pB,EAAU,OAAO,WAAW,EACzD,CAEIsH,GACH,MAAMQ,GAAuBV,GAAaJ,GAA0BC,CAAU,EAAGtH,CAAQ,EAG3FvpB,GAAI,6BAA8BgxB,IAAc,OAAY,cAAcA,CAAS,IAAM,oBAAoB,CACjH,QAAY,CACJ,CAACE,GAAY,CAACD,GAAc3T,GAC9B,MAAMA,EAAK,MAAO,CAErB,CACH,CAcO,eAAeqU,GAAQvmC,EAAMm+B,EAAUwH,EAAaC,EAAW/uC,EAAU,GAAI,CAClF,MAAMgvC,EAAahvC,EAAQ,YAAc,GACnCunC,EAAavnC,EAAQ,WACrBivC,EAAWjvC,EAAQ,UAAY,GAC/B4uC,EAAa5uC,EAAQ,YAAc2tC,GAEzC,GAAI,CAACxkC,EACH,MAAM,IAAI+lC,GAAO,uBAAuB,4BAA4B,EAGtE,GAAI,CAACJ,EACH,MAAM,IAAII,GAAO,uBAAuB,mCAAmC,EAG7E,GAAI,CAACH,EACH,MAAM,IAAIG,GAAO,uBAAuB,4EAA4E,EAGtH,GAAI,CAAC,OAAO,UAAUH,CAAS,GAAKA,GAAa,EAC/C,MAAM,IAAIG,GAAO,kBAAkB,qCAAqC,EAI1E5H,EAAWmE,GAAanE,CAAQ,EAEhC,MAAM6H,EAAiB,MAAMC,GAAuB9H,CAAQ,EAE5D,GAAI6H,IAAmBJ,EAAW,CAChChxB,GAAI,oBAAoB,EACxB,MACD,CAED,GAAIoxB,EAAiBJ,EACnB,MAAM,IAAIG,GAAO,kBAAkB,2BAA2BC,CAAc,8BAA8BJ,CAAS,uCAAuC,EAG5JM,GAA0BT,EAAYG,EAAWI,EAAgB,EAAI,EAErE,IAAI9T,EACA,CAAC4T,GAAY,CAACD,IAChB3T,EAAO,MAAMyT,EAAY,SAAS,KAAK3lC,CAAI,GAG7C4U,GAAI,0BAA0BoxB,CAAc,OAAOJ,CAAS,EAAE,EAE9D,GAAI,CACF,MAAMY,EAAyBf,EAAW,MAAK,EAAG,QAAS,EAE3D,UAAWjH,KAAagI,EAAwB,CAC9C,GAAIhI,EAAU,SAAWoH,EACvB,MAGF,GAAI,EAAApH,EAAU,QAAUwH,GAIxBpxB,CAAAA,GAAI,+BAA+B4pB,EAAU,OAAO,EAAE,EAEtD,GAAI,CACF,GAAI,CAACsH,EAAU,CAEb,IAAIK,EAAmB,IAAM,CAAE,EAE3B/H,IACF+H,EAAmB,CAACC,EAASzvC,IAAYynC,EAAWI,EAAU,QAAS4H,EAAQ,QAAQ,CAAC,EAAGzvC,CAAO,GAGpG,MAAM6nC,EAAU,OAAOL,EAAUgI,CAAgB,CAClD,CACF,OAA2B/tB,EAAG,CAC7B,MAAMquB,EAAkCjI,EAAU,QAClD5pB,MAAAA,GAAI,4HAA4H6xB,CAA+B,EAAE,EACjK,MAAMH,GAAuBG,EAAiCtI,CAAQ,EAEtE/lB,EAAE,QAAU,+BAA+BomB,EAAU,OAAO,0BAA0BpmB,EAAE,OAAO,GACzFA,CACP,CAEDxD,GAAI,wBAAwB4pB,EAAU,OAAO,WAAW,EACzD,CAEIsH,GACH,MAAMQ,GAAuBV,EAAWzH,CAAQ,EAGlDvpB,GAAI,mDAAmDgxB,CAAS,GAAG,CACvE,QAAY,CACJ,CAACE,GAAY,CAACD,GAAc3T,GAC9B,MAAMA,EAAK,MAAO,CAErB,CACH,CAUA,SAASgU,GAA2BT,EAAYiB,EAAad,EAAWe,EAAqB,GAAO,CAClG,IAAIC,EAAmB,EACvB,UAAWpI,KAAaiH,EAAY,CAClC,GAAIjH,EAAU,QAAUoH,EACtB,MAGF,GAAIpH,EAAU,QAAUkI,EAAa,CACnC,GAAIC,GAAsB,CAACnI,EAAU,OACnC,MAAM,IAAIuH,GAAO,4BAA4B,2CAA2CW,CAAW,8BAA8BlI,EAAU,OAAO,2CAA2C,EAG/LoI,GACD,CACF,CAED,GAAIA,IAAsBhB,EAAYc,EACpC,MAAM,IAAIX,GAAO,kBAAkB,wFAAwFW,CAAW,OAAOd,CAAS,EAAE,CAE5J,CAGO,MAAMG,GAASc,GC7Qf,MAAMC,WAAwB,KAAM,CAIzC,YAAanwC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,kBACZ,KAAK,KAAOmwC,GAAgB,IAC7B,CACH,CACAA,GAAgB,KAAO,kBAKhB,MAAMC,WAAsB,KAAM,CAIvC,YAAapwC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,gBACZ,KAAK,KAAOowC,GAAc,IAC3B,CACH,CACAA,GAAc,KAAO,gBAKd,MAAMC,WAAgC,KAAM,CAIjD,YAAarwC,EAAS,CACpB,MAAMA,CAAO,EACb,KAAK,KAAO,0BACZ,KAAK,KAAOqwC,GAAwB,IACrC,CACH,CACAA,GAAwB,KAAO,2BAExB,MAAMC,GAA2B,2BAC3BC,GAAwB,wBACxBC,GAA0B,0BCjChC,eAAerF,GAAiBj1B,EAAKk1B,EAAKH,EAAO,CACtD,MAAMrlC,EAAS,MAAMwlC,EAAIl1B,CAAG,EAE5B,GAAItQ,EACF,OAAOA,EAMT,MAAMylC,EAAUL,GAAYC,CAAK,EAEjC,OAAKI,EAIE,IAAI,QAAQ,CAAC51B,EAASrB,IAAW,CAGtC,MAAMk3B,EAAMD,EAAQ,MAAM,UAAU,EAAE,IAAIn1B,EAAI,UAAU,EACxDo1B,EAAI,YAAY,QAAU,IAAM,CAC9Bl3B,EAAOk3B,EAAI,YAAY,KAAK,CAC7B,EACDA,EAAI,YAAY,WAAa,IAAM,CACjC71B,EAAQ,EAAQ61B,EAAI,MAAO,CAC5B,CACL,CAAG,EAbQ,EAcX,CASO,eAAeC,GAAiBr1B,EAAKwM,EAAK0oB,EAAKH,EAAO,CAC3D,GAAI,MAAMG,EAAIl1B,CAAG,EACf,OAAOwM,EAAIxM,CAAG,EAMhB,MAAMm1B,EAAUL,GAAYC,CAAK,EAEjC,GAAI,CAACI,EACH,MAAM,IAAI+E,GAGZ,OAAO,IAAI,QAAQ,CAAC36B,EAASrB,IAAW,CAGtC,MAAMk3B,EAAMD,EAAQ,MAAM,UAAU,EAAE,IAAIn1B,EAAI,UAAU,EACxDo1B,EAAI,YAAY,QAAU,IAAM,CAC9Bl3B,EAAOk3B,EAAI,YAAY,KAAK,CAC7B,EACDA,EAAI,YAAY,WAAa,IAAM,CACjC,GAAIA,EAAI,OACN,OAAO71B,EAAQ61B,EAAI,MAAM,EAG3Bl3B,EAAO,IAAIg8B,EAAe,CAC3B,CACL,CAAG,CACH,CASA,SAASpF,GAAaC,EAAO,CAC3B,IAAIC,EAAKD,EAGT,KAAOC,EAAG,IAAMA,EAAG,OAMjB,GAJAA,EAAKA,EAAG,IAAMA,EAAG,MAIbA,EAAG,OAAS,YAAcA,EAAG,YAAY,OAAS,QACpD,OAAOA,CAGb,CC/FA,MAAMjtB,GAAMipB,GAAM,mBAAmB,EAC/BuJ,GAAa,IAAI37B,GAAI,SAAS,EAM7B,SAASrR,GAASwnC,EAAO,CAC9B,MAAO,CAKL,MAAM,QAAU,CAId,OAAOE,GAAgBsF,GAAYxF,EAAM,IAAI,KAAKA,CAAK,EAAGA,CAAK,CAChE,EAMD,MAAM,KAAO,CAIX,MAAM1pC,EAAM,MAAMgqC,GAAgBkF,GAAYxF,EAAM,IAAI,KAAKA,CAAK,EAAGA,EAAM,IAAI,KAAKA,CAAK,EAAGA,CAAK,EACjG,OAAO,SAASviC,EAAmBnH,CAAG,EAAG,EAAE,CAC5C,EAOD,IAAKkC,EAAS,CACZ,OAAOwnC,EAAM,IAAIwF,GAAYnmC,EAAqB,OAAO7G,CAAO,CAAC,CAAC,CACnE,EAMD,MAAM,MAAOitC,EAAU,CACrB,MAAMjtC,EAAU,MAAM,KAAK,IAAK,EAChCwa,OAAAA,GAAI,+BAAgCxa,EAASitC,CAAQ,EAK9CjtC,IAAYitC,IAFQjtC,IAAY,GAAKitC,IAAa,GAAOA,IAAa,GAAKjtC,IAAY,EAG/F,CACF,CACH,CCjDA,MAAMwX,GAAQC,GAAO,QAAUA,GAAO,QAAUA,GAE1Cy1B,GAAY,IAAI77B,GAAI,QAAQ,EAU3B,SAASmS,GAAQgkB,EAAO,CAC7B,MAAM2F,EAAW,IAAI31B,GAAM,CAAE,YAAa,CAAC,CAAE,EAEvC41B,EAAc,CAQlB,MAAM,OAAQ3wC,EAAU,GAAI,CAI1B,MAAM4wC,EAAe,MAAMvF,GAAgBoF,GAAW1F,EAAM,IAAI,KAAKA,CAAK,EAAGA,EAAM,IAAI,KAAKA,CAAK,EAAGA,CAAK,EAEzG,OAAO,KAAK,MAAMviC,EAAmBooC,CAAY,CAAC,CACnD,EASD,MAAM,IAAK56B,EAAKhW,EAAU,CAAA,EAAI,CAC5B,GAAIgW,GAAO,KACT,MAAM,IAAIk6B,GAAc,OAAOl6B,CAAG,2BAA2B,EAG/D,MAAM+Q,EAAS,MAAM,KAAK,OAAO/mB,CAAO,EAClC1D,EAAQu0C,GAAK9pB,EAAQ/Q,CAAG,EAE9B,GAAI1Z,IAAU,OACZ,MAAM,IAAI4zC,GAAc,OAAOl6B,CAAG,2BAA2B,EAG/D,OAAO1Z,CACR,EAUD,IAAK0Z,EAAK1Z,EAAO0D,EAAU,CAAA,EAAI,CAE7B,GAAI,OAAOgW,GAAQ,UAAY,EAAEA,aAAe,QAC9C,MAAM1G,EAAQ,IAAI,MAAM,qBAAuB,OAAO0G,CAAG,EAAG,iBAAiB,EAG/E,GAAI1Z,IAAU,QAAcA,aAAiB,WAC3C,MAAMgT,EAAQ,IAAI,MAAM,uBAAyB,OAAOhT,CAAK,EAAG,mBAAmB,EAGrF,OAAOo0C,EAAS,IAAI,IAAMI,EAAY,CACpC,IAAK96B,EACL,MAAO1Z,CACf,EAAS0D,EAAQ,MAAM,CAAC,CACnB,EASD,QAAS1D,EAAO0D,EAAU,GAAI,CAC5B,GAAI,CAAC1D,GAAUA,aAAiB,WAC9B,MAAMgT,EAAQ,IAAI,MAAM,uBAAyB,OAAOhT,CAAK,EAAG,mBAAmB,EAGrF,OAAOo0C,EAAS,IAAI,IAAMI,EAAY,CACpC,IAAK,OACL,MAAOx0C,CACf,EAAS0D,EAAQ,MAAM,CAAC,CACnB,EAMD,MAAM,QAAU,CAId,OAAOirC,GAAgBwF,GAAW1F,EAAM,IAAI,KAAKA,CAAK,EAAGA,CAAK,CAC/D,CACF,EAED,OAAO4F,EAMP,eAAeG,EAAa5yC,EAAGic,EAAQ,CACrC,GAAIA,GAAUA,EAAO,QACnB,OAGF,MAAMnE,EAAM9X,EAAE,IACR5B,EAAQ4B,EAAE,MAChB,GAAI8X,EAAK,CACP,MAAM+Q,EAAS,MAAM4pB,EAAY,OAAQ,EACzC,OAAI,OAAO5pB,GAAW,UAAYA,IAAW,MAC3CgqB,GAAKhqB,EAAQ/Q,EAAK1Z,CAAK,EAElB00C,EAASjqB,CAAM,CACvB,CACD,OAAOiqB,EAAS10C,CAAK,CACtB,CAKD,SAAS00C,EAAUjqB,EAAQ,CACzB,MAAM1lB,EAAM+I,EAAqB,KAAK,UAAU2c,EAAQ,KAAM,CAAC,CAAC,EAChE,OAAOgkB,EAAM,IAAI0F,GAAWpvC,CAAG,CAChC,CACH,CCjJA,MAAM4vC,GAAU,IAAIr8B,GAAI,gBAAgB,EAMjC,SAASs8B,GAAMnG,EAAO,CAC3B,MAAO,CAKL,QAAU,CACR,OAAOA,EAAM,IAAIkG,EAAO,CACzB,EAMD,MAAM,KAAO,CACX,MAAM5vC,EAAM,MAAM0pC,EAAM,IAAIkG,EAAO,EACnC,OAAO,KAAK,MAAMzoC,EAAmBnH,CAAG,CAAC,CAC1C,EAQD,MAAM,IAAK6vC,EAAM,CACf,OAAOnG,EAAM,IAAIkG,GAAS7mC,EAAqB,KAAK,UAAU+mC,GAASD,EAAM,CAAE,KAAM,EAAM,CAAA,CAAC,CAAC,CAAC,CAC/F,CACF,CACH,CCrCA,MAAME,GAAU,IAAIx8B,GAAI,KAAK,EAMtB,SAASy8B,GAAStG,EAAO,CAC9B,MAAO,CAML,MAAM,KAAO,CACX,MAAMzuC,EAAQ,MAAMyuC,EAAM,IAAIqG,EAAO,EACrC,OAAO90C,GAASA,EAAM,SAAU,CACjC,EAOD,IAAKA,EAAO,CACV,OAAOyuC,EAAM,IAAIqG,GAAShnC,EAAqB9N,EAAM,SAAQ,CAAE,CAAC,CACjE,EAID,QAAU,CACR,OAAOyuC,EAAM,OAAOqG,EAAO,CAC5B,CACF,CACH,CClBO,SAASE,GAAevG,EAAO,CACpC,MAAO,CACL,MAAQ,CACN,OAAOA,EAAM,KAAM,CACpB,EAED,OAAS,CACP,OAAOA,EAAM,MAAO,CACrB,EAED,MAAO3vB,EAAOpb,EAAS,CACrB,OAAO+qC,EAAM,MAAM3vB,EAAOpb,CAAO,CAClC,EAED,UAAWob,EAAOpb,EAAS,CACzB,OAAO+qC,EAAM,UAAU3vB,EAAOpb,CAAO,CACtC,EAED,MAAM,IAAK4D,EAAK5D,EAAS,CACvB,MAAMuxC,EAAYC,GAAgB5tC,CAAG,EACrC,OAAI2tC,EAAU,WACL,QAAQ,QAAQA,EAAU,MAAM,EAElCxG,EAAM,IAAInnC,EAAK5D,CAAO,CAC9B,EAED,MAAQ,QAASwmB,EAAMxmB,EAAS,CAC9B,gBAAiB4D,KAAO4iB,EACtB,MAAM,KAAK,IAAI5iB,EAAK5D,CAAO,CAE9B,EAED,MAAM,IAAK4D,EAAKvC,EAAKrB,EAAS,CAC5B,KAAM,CAAE,WAAAyxC,CAAU,EAAKD,GAAgB5tC,CAAG,EAEtC6tC,GAIJ,MAAM1G,EAAM,IAAInnC,EAAKvC,EAAKrB,CAAO,CAClC,EAED,MAAQ,QAAS0xC,EAAO1xC,EAAS,CAI/B,MAAM0V,EAASsd,GAAS,CACtB,WAAY,EACpB,CAAO,GAIc,WAAW,SAAW,WAAW,QAAQ,SAAW,WAAW,QAAQ,SAAY,WAAW,cAAgB,WAAW,YAEjI,SAAY,CACjB,GAAI,CACF,MAAM5Q,GAAM2oB,EAAM,QAAQ,iBAAoB,CAC5C,eAAiB,CAAE,IAAA/0B,EAAK,MAAA1Z,CAAK,IAAMo1C,EAC5BF,GAAgBx7B,CAAG,EAAE,aACxB,KAAM,CAAE,IAAAA,EAAK,MAAA1Z,CAAO,GAItBoZ,EAAO,KAAK,CAAE,IAAAM,EAAK,MAAA1Z,CAAK,CAAE,CAE7B,EAAA,CAAE,CAAC,EAEJoZ,EAAO,IAAK,CACb,OAA2BlJ,EAAK,CAC/BkJ,EAAO,IAAIlJ,CAAG,CACf,CACT,CAAO,EAED,MAAQkJ,CACT,EAED,IAAK9R,EAAK5D,EAAS,CACjB,KAAM,CAAE,WAAAyxC,CAAU,EAAKD,GAAgB5tC,CAAG,EAC1C,OAAI6tC,EACK,QAAQ,QAAQ,EAAI,EAEtB1G,EAAM,IAAInnC,EAAK5D,CAAO,CAC9B,EAED,OAAQ4D,EAAK5D,EAAS,CACpB,KAAM,CAAE,WAAAyxC,CAAU,EAAKD,GAAgB5tC,CAAG,EAC1C,OAAI6tC,EACK,QAAQ,QAAS,EAEnB1G,EAAM,OAAOnnC,EAAK5D,CAAO,CACjC,EAED,WAAYwmB,EAAMxmB,EAAS,CACzB,OAAO+qC,EAAM,WAAW3iB,GAAO5B,EAAO5iB,GAAQ,CAAC4tC,GAAgB5tC,CAAG,EAAE,UAAU,EAAG5D,CAAO,CACzF,EAED,OAAS,CACP,MAAMsqB,EAAQygB,EAAM,MAAO,EAE3B,MAAO,CACL,IAAKnnC,EAAKvC,EAAK,CACb,KAAM,CAAE,WAAAowC,CAAU,EAAKD,GAAgB5tC,CAAG,EAEtC6tC,GAIJnnB,EAAM,IAAI1mB,EAAKvC,CAAG,CACnB,EACD,OAAQuC,EAAK,CACX,KAAM,CAAE,WAAA6tC,CAAU,EAAKD,GAAgB5tC,CAAG,EAEtC6tC,GAIJnnB,EAAM,OAAO1mB,CAAG,CACjB,EACD,OAAS5D,GACAsqB,EAAM,OAAOtqB,CAAO,CAE9B,CACF,CACF,CACH,CAMA,SAASwxC,GAAiBG,EAAG,CAC3B,MAAM/tC,EAAME,EAAI,MAAM6tC,CAAC,EAEvB,GAAI/tC,GAAO,KACT,MAAM0L,EAAQ,IAAI,MAAM,iBAAiB,EAAG,iBAAiB,EAG/D,OAAI1L,EAAI,UAAU,OAAS+B,GAAS,KAC3B,CACL,WAAY,EACb,EAGI,CACL,WAAY,GACZ,OAAQ/B,EAAI,UAAU,MACvB,CACH,CClKA,MAAMma,GAAMipB,GAAM,uBAAuB,EACnC4K,GAAW,YAGXC,GAAQ,CAAE,EAYhB,eAAexW,GAAM7N,EAAK,CACxB,MAAM/X,EAAO+X,EAAM,IAAMokB,GAGzB,GAFA7zB,GAAI,aAActI,CAAI,EAElBo8B,GAAMp8B,CAAI,IAAM,GAClB,MAAM,IAAIw6B,GAAgB,qCAAqCx6B,CAAI,EAAE,EAGvE,OAAAo8B,GAAMp8B,CAAI,EAAI,GACC,CACb,MAAM,OAAS,CACTo8B,GAAMp8B,CAAI,GACZ,OAAOo8B,GAAMp8B,CAAI,CAEpB,CACF,CAEH,CAQA,eAAeq8B,GAAQtkB,EAAK,CAC1B,MAAM/X,EAAO+X,EAAM,IAAMokB,GACzB7zB,OAAAA,GAAI,kBAAkBtI,CAAI,EAAE,EAErB,EAAQo8B,GAAMp8B,CAAI,CAC3B,CAEO,MAAMs8B,GAAa,CACxB,KAAA1W,GACA,OAAAyW,EACF,EClDeE,GAAA,CACb,YAAa,GACb,oBAAqB,IAAM,CAAE,EAC7B,UAAW,GACX,SAAUD,EACZ,ECReE,GAAA,CACb,KAAM,CACJ,KAAM,QACN,OAAQ,CACN,CACE,WAAY,UACZ,KAAM,UACN,OAAQ,mBACR,MAAO,CACL,KAAM,SACN,KAAM,SACN,KAAM,GACN,UAAW,sCACZ,CACF,EACD,CACE,WAAY,IACZ,KAAM,UACN,OAAQ,oBACR,MAAO,CACL,KAAM,UACN,KAAM,YACN,YAAa,MACd,CACF,CACF,CACF,CACH,ECjBO,SAAS/J,GAAU5pC,EAAG,CAC3B,MAAMsF,EAAME,EAAI,MAAMxF,CAAC,EAEvB,GAAIsF,GAAO,KACT,MAAM0L,EAAQ,IAAI,MAAM,iBAAiB,EAAG,iBAAiB,EAG/D,MAAM4iC,EAAUr1C,GAAO,OAAO+G,EAAI,UAAU,KAAK,EAEjD,OAAO,IAAIgR,GAAI,IAAMs9B,EAAQ,MAAM,CAAC,EAAE,YAAa,EAAE,EAAK,CAC5D,CAiBO,SAAShL,GAAgBlxB,EAAK,CACnC,OAAOxR,GAAc3H,GAAO,OAAO,IAAImZ,EAAI,SAAU,EAAC,YAAW,EAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CACrF,CCtCA,MAAM+H,GAAMipB,GAAM,0BAA0B,EAgBrC,eAAiBmL,GAASvuC,EAAK8lB,EAAY0oB,EAAWpyC,EAAS,CACpE,GAAI,CACF,MAAMpF,EAAQ,MAAM8uB,EAAW,IAAI9lB,EAAK5D,CAAO,EACzCiF,EAAQ,MAAMmtC,EAAUxuC,EAAI,IAAI,EAChCmS,EAAQoiB,GAAa,CAAE,MAAAv9B,EAAO,IAAAgJ,EAAK,MAAAqB,CAAK,CAAE,EAEhD,SAAW,CAAA,CAAGotC,CAAQ,IAAKt8B,EAAM,MAAK,EACpC,MAAMs8B,EACN,MAAQF,GAAQE,EAAU3oB,EAAY0oB,EAAWpyC,CAAO,CAE3D,OAA2BwM,EAAK,CAC/BuR,MAAAA,GAAI,6BAA8Bna,EAAI,SAAQ,EAAI4I,CAAG,EAE/CA,CACP,CACH,CCMA,MAAM8lC,GAAqB,KAK3B,SAASC,GAAmBtyC,EAAM,CAChC,MAAMye,EAAS,iBAAiBze,CAAI,uDACpC,OAAOqP,EAAQ,IAAI,MAAMoP,CAAM,EAAG,sBAAsB,CAC1D,CAKO,MAAM8zB,EAAW,CAOtB,YAAa,CAAE,SAAAvI,EAAU,WAAAvgB,EAAY,UAAA0oB,CAAS,EAAI,CAChD,KAAK,SAAWnI,EAChB,KAAK,WAAavgB,EAClB,KAAK,UAAY0oB,EACjB,KAAK,IAAMpL,GAAM,eAAe,EAChC,KAAK,WAAa,IAAI,IACtB,KAAK,cAAgB,IAAI,GAC1B,CAMD,MAAM,YAAapjC,EAAK5D,EAAU,CAAA,EAAI,CACpC,MAAM,KAAK,WAAW,IAAI4D,EAAK5D,CAAO,EAGtC,MAAM4c,EAAM,CACV,MAAO,CACR,EAED,OAAIhZ,EAAI,UAAY,IAClBgZ,EAAI,QAAUhZ,EAAI,SAGhBA,EAAI,OAAS8uB,IACf9V,EAAI,MAAQhZ,EAAI,MAGd5D,EAAQ,WACV4c,EAAI,SAAW5c,EAAQ,UAGlB,KAAK,SAAS,IAAIkoC,GAAStkC,CAAG,EAAG6uC,GAAa71B,CAAG,CAAC,CAC1D,CAMD,MAAOhZ,EAAK5D,EAAS,CACnB,OAAO,KAAK,SAAS,OAAOkoC,GAAStkC,CAAG,EAAG5D,CAAO,CACnD,CAMD,MAAM,eAAgB4D,EAAK5D,EAAU,CAAA,EAAI,CACvC,MAAM,KAAK,iBAAiB4D,EAAK5D,CAAO,EAGxC,MAAM4c,EAAM,CACV,MAAO,GACR,EAEGhZ,EAAI,UAAY,IAClBgZ,EAAI,QAAUhZ,EAAI,SAGhBA,EAAI,OAAS8uB,IACf9V,EAAI,MAAQhZ,EAAI,MAGd5D,EAAQ,WACV4c,EAAI,SAAW5c,EAAQ,UAGzB,MAAM,KAAK,SAAS,IAAIkoC,GAAStkC,CAAG,EAAG6uC,GAAa71B,CAAG,CAAC,CACzD,CAKD,MAAQ,WAAY5c,EAAS,CAC3B,gBAAiB6e,KAAS,KAAK,SAAS,MAAM,CAC5C,QAAS,CAAEA,GACG6zB,GAAa7zB,EAAM,KAAK,EAEzB,QAAU,CACtB,CACP,CAAK,EAAG,CACF,MAAMjC,EAAM81B,GAAa7zB,EAAM,KAAK,EAC9Btb,EAAUqZ,EAAI,SAAW,EACzB3X,EAAQ2X,EAAI,OAAS,KAAOA,EAAI,MAAQ8V,EACxC1vB,EAAYkkC,GAAeroB,EAAM,GAAG,EAE1C,KAAM,CACJ,IAAK/a,EAAI,OAAOP,EAAS0B,EAAOjC,CAAS,EACzC,SAAU4Z,EAAI,QACf,CACF,CACF,CAKD,MAAQ,cAAe5c,EAAS,CAC9B,gBAAiB6e,KAAS,KAAK,SAAS,MAAM,CAC5C,QAAS,CAAEA,GACG6zB,GAAa7zB,EAAM,KAAK,EAEzB,QAAU,GACtB,CACP,CAAK,EAAG,CACF,MAAMjC,EAAM81B,GAAa7zB,EAAM,KAAK,EAC9Btb,EAAUqZ,EAAI,SAAW,EACzB3X,EAAQ2X,EAAI,OAAS,KAAOA,EAAI,MAAQ8V,EACxC1vB,EAAYkkC,GAAeroB,EAAM,GAAG,EAE1C,KAAM,CACJ,IAAK/a,EAAI,OAAOP,EAAS0B,EAAOjC,CAAS,EACzC,SAAU4Z,EAAI,QACf,CACF,CACF,CAKD,MAAQ,aAAc5c,EAAS,CAC7B,eAAiB,CAAE,IAAA4D,CAAG,IAAM,KAAK,cAAa,EAC5C,gBAAiByuC,KAAYF,GAAQvuC,EAAK,KAAK,WAAY,KAAK,UAAW5D,CAAO,EAAG,CAEnF,MAAMf,EAAQ,CACZ4d,EAAS,SACV,GAEc,MAAM,KAAK,iBAAiBw1B,EAAUpzC,CAAK,GAE/C,SAIX,MAAMozC,EACP,CAEJ,CAOD,MAAM,iBAAkBzuC,EAAK3E,EAAOe,EAAS,CACtC,MAAM,QAAQf,CAAK,IACtBA,EAAQ,CAACA,CAAK,GAGhB,MAAMsa,EAAMta,EAAM,SAAS4d,EAAS,GAAG,EACjC81B,EAAS1zC,EAAM,SAAS4d,EAAS,MAAM,EACvCG,EAAY/d,EAAM,SAAS4d,EAAS,SAAS,EAC7C+1B,EAAW3zC,EAAM,SAAS4d,EAAS,QAAQ,EAEjD,GAAIG,GAAa21B,GAAUp5B,EAAK,CAC9B,MAAM7T,EAAS,MAAMgX,GAAM,KAAK,SAAS,MAAM,CAC7C,OAAQwrB,GAAStkC,CAAG,EAAE,SAAU,EAChC,QAAS,CAACib,GAAS,CACjB,GAAItF,EACF,MAAO,GAGT,MAAMqD,EAAM81B,GAAa7zB,EAAM,KAAK,EAEpC,OAAO5f,EAAM,SAAS2d,EAAI,QAAU,EAAIC,EAAS,OAASA,EAAS,SAAS,CACtF,CAAS,EACD,MAAO,CACf,CAAO,CAAC,EAEF,GAAInX,EAAQ,CACV,MAAMkX,EAAM81B,GAAahtC,EAAO,KAAK,EAErC,MAAO,CACL,IAAA9B,EACA,OAAQ,GACR,OAAQgZ,EAAI,QAAU,EAAIC,EAAS,OAASA,EAAS,UACrD,SAAUD,EAAI,QACf,CACF,CACF,CAED,MAAMzY,EAAO,KAMb,eAAiB0uC,EAAW78B,EAAK1d,EAAQ,CACvC,eAAiB,CAAE,IAAKmlC,CAAS,IAAMnlC,EACrC,gBAAiB+5C,KAAYF,GAAQ1U,EAAWt5B,EAAK,WAAYA,EAAK,SAAS,EAC7E,GAAIkuC,EAAS,OAAOr8B,CAAG,EAAG,CACxB,MAAMynB,EACN,MACD,CAGN,CAED,GAAIlkB,GAAOq5B,EAAU,CAInB,MAAMnV,EAAY,MAAM/gB,GAAMm2B,EAAUjvC,EAAK,KAAK,cAAa,CAAE,CAAC,EAElE,GAAI65B,EACF,MAAO,CACL,IAAA75B,EACA,OAAQ,GACR,OAAQiZ,EAAS,SACjB,OAAQ4gB,CACT,CAEJ,CAED,MAAO,CACL,IAAA75B,EACA,OAAQ,EACT,CACF,CAMD,MAAM,iBAAkBA,EAAK5D,EAAU,CAAA,EAAI,CACzC,MAAMslB,EAAO,IAAIwtB,GAAS,CAAE,QAAS9yC,EAAQ,iBAAmBsyC,GAAoB,EAM9EH,EAAU,MAAOvuC,EAAK5D,IAAY,CACtC,GAAIslB,EAAK,IAAI1hB,EAAI,SAAU,CAAA,EACzB,OAGF0hB,EAAK,IAAI1hB,EAAI,SAAQ,EAAI,EAAI,EAE7B,MAAMhJ,EAAQ,MAAM,KAAK,WAAW,IAAIgJ,EAAK5D,CAAO,EAC9CiF,EAAQ,MAAM,KAAK,UAAUrB,EAAI,IAAI,EACrCmS,EAAQoiB,GAAa,CAAE,MAAAv9B,EAAO,IAAAgJ,EAAK,MAAAqB,CAAK,CAAE,EAEhD,MAAM,QAAQ,IACZ,CAAC,GAAG8Q,EAAM,MAAO,CAAA,EAAE,IAAI,CAAC,CAAG,CAAAs8B,CAAQ,IAAMF,EAAQE,EAAUryC,CAAO,CAAC,CACpE,CACF,EAED,MAAMmyC,EAAQvuC,EAAK5D,CAAO,CAC3B,CAQD,OAAO,aAAcC,EAAM,CACzB,GAAI,OAAOA,GAAS,UAAY,CAAC,OAAO,KAAK4c,CAAQ,EAAE,SAAS5c,CAAI,EAClE,MAAMsyC,GAAkBtyC,CAAI,EAE9B,MAAO,EACR,CACH,CC/SO,SAAS8yC,GAAwB1J,EAAM0B,EAAO,CACnD,MAAO,CACL,MAAQ,CACN,OAAOA,EAAM,KAAM,CACpB,EAED,OAAS,CACP,OAAOA,EAAM,MAAO,CACrB,EAED,MAAO3vB,EAAOpb,EAAS,CACrB,OAAO+qC,EAAM,MAAM3vB,EAAOpb,CAAO,CAClC,EAED,UAAWob,EAAOpb,EAAS,CACzB,OAAO+qC,EAAM,UAAU3vB,EAAOpb,CAAO,CACtC,EAED,MAAM,IAAK4D,EAAK5D,EAAS,CACvB,OAAO+qC,EAAM,IAAInnC,EAAK5D,CAAO,CAC9B,EAED,MAAQ,QAASwmB,EAAMxmB,EAAS,CAC9B,MAAQ+qC,EAAM,QAAQvkB,EAAMxmB,CAAO,CACpC,EAED,MAAM,IAAK4D,EAAKvC,EAAKrB,EAAS,CAC5B,MAAM+qC,EAAM,IAAInnC,EAAKvC,EAAKrB,CAAO,CAClC,EAED,MAAQ,QAAS0xC,EAAO1xC,EAAS,CAC/B,MAAQ+qC,EAAM,QAAQ2G,EAAO1xC,CAAO,CACrC,EAED,IAAK4D,EAAK5D,EAAS,CACjB,OAAO+qC,EAAM,IAAInnC,EAAK5D,CAAO,CAC9B,EAED,MAAM,OAAQ4D,EAAK5D,EAAS,CAC1B,aAAMgzC,GAAgBpvC,EAAKylC,CAAI,EAExB0B,EAAM,OAAOnnC,EAAK5D,CAAO,CACjC,EAED,WAAYwmB,EAAMxmB,EAAS,CACzB,OAAO+qC,EAAM,WAAW7iB,GAAI1B,EAAM,MAAM5iB,IACtC,MAAMovC,GAAgBpvC,EAAKylC,CAAI,EAExBzlC,EACR,EAAG5D,CAAO,CACZ,EAED,OAAS,CACP,OAAO+qC,EAAM,MAAO,CACrB,CACF,CACH,CAMA,eAAeiI,GAAiBpvC,EAAKylC,EAAM,CACzC,KAAM,CAAE,OAAA9rB,EAAQ,OAAAL,GAAW,MAAMmsB,EAAK,iBAAiBzlC,EAAKiZ,EAAS,GAAG,EAExE,GAAIU,EACF,MAAMjO,EAAQ,IAAI,MAAM,WAAW4N,CAAM,EAAE,EAAG,kBAAkB,CAEpE,CC1EA,MAAMa,GAAMipB,GAAM,cAAc,EAC1B/oB,GAAgBC,GAAa,EAAG,KAGhC8J,GAAuB,IAEvBrT,GAAe,IAAIC,GAAI,kBAAkB,EAmBxC,SAAS2xB,GAAI,CAAE,OAAA0M,EAAQ,KAAA5J,EAAM,WAAA3f,EAAY,KAAAc,EAAM,UAAA4nB,GAAa,CAIjE,eAAiB7L,GAAM,CACrB,MAAMpyB,EAAQ,KAAK,IAAK,EACxB4J,GAAI,+BAA+B,EAEnC,MAAMZ,EAAU,MAAM81B,EAAO,UAAW,EAExC,GAAI,CAEF,MAAMC,EAAY,MAAMC,GAAgB,CAAE,KAAA9J,EAAM,WAAA3f,EAAY,KAAAc,EAAM,UAAA4nB,EAAW,EAEvEgB,EAAY1pB,EAAW,UAAU,EAAE,EAIzC,MAAQ2pB,GAAqB,CAAE,WAAA3pB,GAAcwpB,EAAWE,CAAS,EAEjEr1B,GAAI,aAAa,KAAK,IAAG,EAAK5J,CAAK,KAAK,CAC9C,QAAc,CACRgJ,EAAS,CACV,CACF,CAED,OAAOopB,CACT,CAWA,eAAe4M,GAAiB,CAAE,KAAA9J,EAAM,WAAA3f,EAAY,UAAA0oB,EAAW,KAAA5nB,CAAI,EAAI,CACrE,MAAM8oB,EAAa,iBAAoB,CACrC,IAAIvoC,EACJ,GAAI,CACFA,EAAK,MAAMyf,EAAK,IAAI7V,EAAY,CACjC,OAA2BnI,EAAK,CAC/B,GAAIA,EAAI,OAASyR,GAAe,CAC9BF,GAAI,kBAAkB,EACtB,MACD,CAED,MAAMvR,CACP,CAED,MAAM4Y,EAAUthB,EAAI,OAAOiH,CAAE,EAC7B,MAAMqa,EACN,MAAQ+sB,GAAQ/sB,EAASsE,EAAY0oB,CAAS,CAClD,EAAM,EAEEmB,EAAa16B,GACjBqP,GAAImhB,EAAK,cAAa,EAAI,CAAC,CAAE,IAAAzlC,CAAK,IAAKA,CAAG,EAC1CylC,EAAK,aAAc,EACnBnhB,GAAImhB,EAAK,WAAU,EAAI,CAAC,CAAE,IAAAzlC,CAAK,IAAKA,CAAG,EACvC0vC,CACD,EAEK59B,EAAS,IAAI,IAEnB,gBAAiB9R,KAAOiV,GAAM06B,EAAYD,CAAS,EACjD59B,EAAO,IAAI7Y,GAAO,OAAO+G,EAAI,UAAU,KAAK,CAAC,EAG/C,OAAO8R,CACT,CAUA,eAAiB29B,GAAsB,CAAE,WAAA3pB,GAAcwpB,EAAWE,EAAW,CAG3E,IAAII,EAAc,EACdC,EAAqB,EAkCzB,MAAQxrB,GACN4D,GAAc3D,GAAIkrB,EA9BA,MAAOxvC,GAClB,gBAAyB,CAC9B4vC,IAEA,GAAI,CACF,MAAME,EAAM72C,GAAO,OAAO+G,EAAI,UAAU,KAAK,EAE7C,GAAIsvC,EAAU,IAAIQ,CAAG,EACnB,OAAO,KAGT,GAAI,CACF,MAAMhqB,EAAW,OAAO9lB,CAAG,EAC3B6vC,GACD,OAA2BjnC,EAAK,CAC/B,MAAO,CACL,IAAK,IAAI,MAAM,mCAAmC5I,CAAG,KAAK4I,EAAI,OAAO,EAAE,CACxE,CACF,CAED,MAAO,CAAE,IAAA5I,CAAK,CACf,OAA2B4I,EAAK,CAC/B,MAAMmnC,EAAM,+BAA+B/vC,CAAG,GAC9Cma,OAAAA,GAAI41B,EAAKnnC,CAAG,EACL,CAAE,IAAK,IAAI,MAAMmnC,EAAM,KAAKnnC,EAAI,OAAO,EAAE,CAAG,CACpD,CACF,CAIuC,EAAGwb,EAAoB,EAE/D1vB,GAAU8vB,GAAO9vB,EAAQ,OAAO,CACjC,EAEDylB,GAAI,kBAAkBm1B,EAAU,IAAI,kCAAkCM,CAAW,oBACtEC,CAAkB,UAAU,CACzC,CChJA,MAAM11B,GAAMipB,GAAM,WAAW,EAEvB4M,GAAU,OAAO,iBACjBC,GAA0B,kBAkBhC,MAAMC,EAAK,CAOT,YAAa3qC,EAAMipC,EAAW9K,EAAUtnC,EAAS,CAC/C,GAAI,OAAOmJ,GAAS,SAClB,MAAM,IAAI,MAAM,mBAAmB,EAGrC,GAAI,OAAOipC,GAAc,WACvB,MAAM,IAAI,MAAM,sBAAsB,EAIxC,KAAK,QAAUv5B,GAAM0Q,GAAgBvpB,CAAO,EAC5C,KAAK,OAAS,GACd,KAAK,KAAOmJ,EACZ,KAAK,KAAOm+B,EAAS,KACrB,KAAK,UAAYA,EAAS,UAC1B,KAAK,KAAOA,EAAS,KAErB,MAAM5d,EAAa4d,EAAS,OACtB2C,EAAW3C,EAAS,KAE1B,KAAK,KAAO,IAAIkL,GAAW,CAAE,SAAAvI,EAAU,WAAAvgB,EAAY,UAAA0oB,EAAW,EAG9D,MAAM2B,EAAmBhB,GAAuB,KAAK,KAAMrpB,CAAU,EAGrE,KAAK,OAAS4nB,GAAcyC,CAAgB,EAE5C,KAAK,QAAUxwC,GAAQ,KAAK,IAAI,EAChC,KAAK,OAASwjB,GAAO,KAAK,IAAI,EAC9B,KAAK,KAAOmqB,GAAK,KAAK,IAAI,EAC1B,KAAK,QAAUG,GAAQ,KAAK,IAAI,EAGhC,KAAK,OAAS5V,GAAQ,CACpB,KAAMtyB,EACN,cAAe,KAAK,QAAQ,YAAc,EAChD,CAAK,EAED,KAAK,GAAKo9B,GAAG,CAAE,OAAQ,KAAK,OAAQ,KAAM,KAAK,KAAM,WAAY,KAAK,OAAQ,KAAM,KAAK,KAAM,UAAA6L,EAAW,CAC3G,CAQD,MAAM,KAAMrrB,EAAQ,CAClBhJ,GAAI,sBAAuB,KAAK,IAAI,EACpC,MAAM,KAAK,UAAW,EACtB,MAAM,KAAK,OAAO,QAAQi2B,GAAYjtB,CAAM,CAAC,EAC7C,MAAM,KAAK,KAAK,IAAIktB,GAAmBltB,CAAM,CAAC,EAC9C,MAAM,KAAK,QAAQ,IAAImtB,EAAqB,CAC7C,CAOD,MAAM,eAAiB,CACrB,GAAI,CAAC,KAAK,OAER,MAAO,GAGT,GAAI,CAGF,aAAM,KAAK,UAAW,EACtB,MAAM,KAAK,kBAAmB,EAC9B,MAAM,KAAK,KAAK,MAAO,EAEhB,EACR,MAAgC,CAE/B,MAAO,EACR,CACF,CAQD,MAAM,MAAQ,CACZ,GAAI,CAAC,KAAK,OACR,MAAM5kC,EAAQ,IAAI,MAAM,sBAAsB,EAAG6kC,EAA4B,EAE/Ep2B,GAAI,iBAAkB,KAAK,IAAI,EAG/B,GAAI,CASF,GARA,MAAM,KAAK,UAAW,EACtB,MAAM,KAAK,kBAAmB,EAE9B,KAAK,UAAY,MAAM,KAAK,UAAW,EACvCA,GAAI,oBAAoB,EAIpB,CAFiB,MAAM,KAAK,QAAQ,MAAMm2B,EAAqB,EAGjE,GAAI,MAAM,KAAK,0BACb,MAAM,KAAK,SAASA,GAAuB,CACzC,KAAM,KAAK,KACX,UAAW,KAAK,UAChB,KAAM,KAAK,KAAK,SAChB,OAAQ,KAAK,KAAK,WAClB,KAAM,KAAK,IACvB,CAAW,MAED,OAAM,IAAIE,GAA+B,8FAA8F,EAI3Ir2B,GAAI,oBAAoB,EACxB,MAAM,KAAK,UAAU,KAAM,EAE3BA,GAAI,iBAAiB,EACrB,MAAM,KAAK,OAAO,KAAM,EAExBA,GAAI,mBAAmB,EACvB,MAAM,KAAK,KAAK,KAAM,EAEtBA,GAAI,eAAe,EACnB,MAAM,KAAK,KAAK,SAAS,KAAM,EAE/B,KAAK,OAAS,GACdA,GAAI,YAAY,CACjB,OAA2BvR,EAAK,CAC/B,GAAI,KAAK,UACP,GAAI,CACF,MAAM,KAAK,WAAY,EACvB,KAAK,UAAY,IAClB,OAA2B6/B,EAAM,CAChCtuB,GAAI,sBAAuBsuB,CAAI,CAChC,CAGH,MAAM7/B,CACP,CACF,CAOD,MAAM,WAAa,CACjB,GAAI,CACF,MAAM,KAAK,KAAK,KAAM,CACvB,OAA2BA,EAAK,CAC/B,GAAIA,EAAI,UAAY,eAClB,MAAMA,CAET,CACF,CASD,MAAM,WAAa,CACjB,MAAM6nC,EAAW,MAAM,KAAK,QAAQ,SAAS,KAAK,KAAK,IAAI,EAE3D,GAAI,OAAOA,EAAS,OAAU,WAC5B,MAAM/kC,EAAQ,IAAI,MAAM,gCAAgC,EAAG,uBAAuB,EAGpF,OAAO+kC,CACR,CAOD,YAAc,CACZ,OAAO,KAAK,WAAa,KAAK,UAAU,MAAO,CAChD,CAOD,MAAM,mBAAqB,CACzBt2B,GAAI,YAAY,EAChB,IAAIgJ,EACJ,GAAI,CACF,CAACA,CAAM,EAAI,MAAM,QAAQ,IAAI,CAC3B,KAAK,OAAO,OAAQ,EACpB,KAAK,KAAK,OAAQ,EAClB,KAAK,QAAQ,OAAQ,CAC7B,CAAO,CACF,OAA2Bva,EAAK,CAC/B,MAAIA,EAAI,OAAS,gBACT8C,EAAQ,IAAI,MAAM,6BAA6B,EAAGglC,GAAiC,CACvF,KAAM,KAAK,IACrB,CAAS,EAGG9nC,CACP,CAED,GAAI,CAACua,EACH,MAAMzX,EAAQ,IAAI,MAAM,6BAA6B,EAAGglC,GAAiC,CACvF,KAAM,KAAK,IACnB,CAAO,CAEJ,CAOD,MAAM,OAAS,CACb,GAAI,KAAK,OACP,MAAMhlC,EAAQ,IAAI,MAAM,wBAAwB,EAAGilC,EAA8B,EAEnFx2B,GAAI,iBAAkB,KAAK,IAAI,EAE/B,GAAI,CAEF,MAAM,KAAK,QAAQ,OAAQ,CAC5B,OAA2BvR,EAAK,CAC/B,GAAIA,EAAI,OAAS8nC,IAAmC,CAAC9nC,EAAI,QAAQ,WAAW,QAAQ,EAClF,MAAMA,CAET,CAED,MAAM,QAAQ,IAAI,CAChB,KAAK,KACL,KAAK,OACL,KAAK,KACL,KAAK,UACL,KAAK,KAAK,QAChB,EAAM,IAAKu+B,GAAUA,GAASA,EAAM,MAAK,CAAE,CAAC,EAExChtB,GAAI,WAAW,EACf,KAAK,OAAS,GACd,MAAM,KAAK,WAAY,CACxB,CAOD,QAAU,CACR,OAAO,KAAK,QAAQ,OAAQ,CAC7B,CAOD,MAAM,MAAQ,CACZ,GAAI,KAAK,WAAa,KAAK,KAAM,CAC/B,KAAM,CAACy2B,EAAYC,EAAQlxC,EAAS+a,EAAW2B,CAAI,EAAI,MAAM,QAAQ,IAAI,CACvE,KAAK,gBAAiB,EACtB,KAAK,WAAY,EACjB,KAAK,QAAQ,IAAK,EAClBy0B,GAAQ,KAAK,SAAS,EACtBA,GAAQ,KAAK,IAAI,CACzB,CAAO,EACK/7C,EAAO87C,EAAO,KAAOn2B,EAAY2B,EAEvC,MAAO,CACL,SAAU,KAAK,KACf,WAAAu0B,EACA,QAASjxC,EACT,WAAYkxC,EAAO,MACnB,SAAU97C,CACX,CACF,CACD,MAAM2W,EAAQ,IAAI,MAAM,6BAA6B,EAAGglC,GAAiC,CACvF,KAAM,KAAK,IACjB,CAAK,CACF,CAKD,MAAM,yBAA2B,CAC/B,GAAI,KAAK,QAAQ,cAAgB,OAC/B,OAAO,KAAK,QAAQ,YAItB,IAAIK,EACJ,GAAI,CACFA,EAAoB,MAAM,KAAK,OAAO,IAAId,EAAuB,CAClE,OAA2BtyB,EAAG,CAC7B,GAAIA,EAAE,OAASqzB,GAAqB,KAClCD,EAAoB,OAEpB,OAAMpzB,CAET,CAED,OAAOozB,CACR,CASD,MAAM,SAAU5F,EAAWzH,EAAU,CAGnC,OAF2B,MAAM,KAAK,QAAQ,IAAK,EAE1ByH,GACvBhxB,GAAI,wBAAwBgxB,CAAS,EAAE,EAChC8F,GAAgB,KAAK,KAAMvN,EAAU,KAAK,QAASyH,EAAW,CACnE,WAAY,GACZ,WAAY,KAAK,QAAQ,mBACjC,CAAO,IAEDhxB,GAAI,wBAAwBgxB,CAAS,EAAE,EAChC+F,GAAiB,KAAK,KAAMxN,EAAU,KAAK,QAASyH,EAAW,CACpE,WAAY,GACZ,WAAY,KAAK,QAAQ,mBACjC,CAAO,EAEJ,CAKD,MAAM,iBAAmB,CACvB,GAAI,CACF,MAAMxiB,EAA4B,MAAM,KAAK,OAAO,IAAI,sBAAsB,EAC9E,OAAO,OAAO3xB,GAAM2xB,CAAG,CAAC,CACzB,MAAgC,CAC/B,OAAO,OAAOqnB,EAAO,CACtB,CACF,CAKD,MAAM,YAAc,CAClB,IAAIloB,EAAQ,OAAO,CAAC,EAChB/yB,EAAO,OAAO,CAAC,EAEnB,GAAI,KAAK,OACP,eAAiB,CAAE,IAAAqd,EAAK,MAAA1Z,CAAO,IAAI,KAAK,OAAO,MAAM,CAAA,CAAE,EACrDovB,GAAS,OAAO,CAAC,EACjB/yB,GAAQ,OAAO2D,EAAM,UAAU,EAC/B3D,GAAQ,OAAOqd,EAAI,MAAM,UAAU,EAIvC,MAAO,CAAE,MAAA0V,EAAO,KAAA/yB,CAAM,CACvB,CACH,CAKA,eAAe+7C,GAASp2B,EAAW,CACjC,IAAI/d,EAAM,OAAO,CAAC,EAClB,gBAAiBwV,KAASuI,EAAU,MAAM,CAAE,CAAA,EAC1C/d,GAAO,OAAOwV,EAAM,MAAM,UAAU,EACpCxV,GAAO,OAAOwV,EAAM,IAAI,WAAU,EAAG,UAAU,EAEjD,OAAOxV,CACT,CASO,SAASumC,GAAY39B,EAAMipC,EAAW9K,EAAUtnC,EAAS,CAC9D,OAAO,IAAI8zC,GAAK3qC,EAAMipC,EAAW9K,EAAUtnC,CAAO,CACpD,CAKA,SAASg0C,GAAae,EAAS,CAC7B,OAAAA,EAAQ,UAAY,OAAO,OAAO,CAAA,EAAI9C,GAAkBpB,GAAKkE,EAAS,WAAW,CAAC,EAE3EA,CACT,CAKA,SAASd,GAAoBc,EAAS,CAEpC,MAAM7D,EAAO,CACX,GAAGe,GAAiB,KACpB,GAAGpB,GAAKkE,EAAS,gBAAgB,CAClC,EAED,MAAO,CACL,KAAM7D,EAAK,KACX,OAAQA,EAAK,OAAO,IAAK8D,IAAc,CACrC,WAAYA,EAAS,WACrB,KAAMA,EAAS,MAAM,KACrB,KAAMA,EAAS,MAAM,KACrB,UAAWA,EAAS,MAAM,SAChC,EAAM,CACH,CACH,CCjcO,SAASlO,GAAY9vB,EAAO5P,EAAQpH,EAAS,CAClD,MAAMi1C,EAAWj1C,EAAQ,MAAQ,OAEjC,OAAOwC,GAAOyyC,EAAWC,GAAe9tC,EAAO,SAAS8tC,CAAU,EAAG,CACnE,KAAM,IAAIC,GAAeF,EAAU,CACjC,OAAQ,GACR,QAAS,CACf,CAAK,EACD,OAAQ,IAAIG,GACV,IAAID,GAAe,GAAGF,CAAQ,UAAW,CACvC,OAAQ,GACR,QAAS,CACjB,CAAO,CACF,EACD,UAAW,IAAIE,GAAe,GAAGF,CAAQ,aAAc,CACrD,OAAQ,GACR,QAAS,CACf,CAAK,EACD,KAAM,IAAIE,GAAe,GAAGF,CAAQ,QAAS,CAC3C,OAAQ,GACR,QAAS,CACf,CAAK,EACD,KAAM,IAAIE,GAAe,GAAGF,CAAQ,QAAS,CAC3C,OAAQ,GACR,QAAS,CACf,CAAK,CACL,EAAK,CACD,YAAaj1C,EAAQ,YACrB,oBAAqBA,EAAQ,qBAAuBgX,EACpD,SAAU+6B,EACd,CAAG,CACH,CC5CA,SAASt6C,GAAMC,EAAUC,EAAM,CAC7B,GAAID,EAAS,QAAU,IAAO,MAAM,IAAI,UAAU,mBAAmB,EAErE,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACnCD,EAASC,CAAC,EAAI,IAEhB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACxC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IAAO,MAAM,IAAI,UAAUD,EAAI,eAAe,EACnEH,EAASI,CAAE,EAAIF,CAChB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAC3C,SAASI,EAAQC,EAAQ,CAMvB,GALIA,aAAkB,aAAuB,YAAY,OAAOA,CAAM,EACpEA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAClE,MAAM,QAAQA,CAAM,IAC7BA,EAAS,WAAW,KAAKA,CAAM,IAE7B,EAAEA,aAAkB,YAAe,MAAM,IAAI,UAAU,qBAAqB,EAChF,GAAIA,EAAO,SAAW,EAAK,MAAO,GAMlC,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GAC3CA,IACAF,IAMF,QAHII,GAASD,EAAOD,GAAUL,EAAU,IAAO,EAC3CQ,EAAM,IAAI,WAAWD,CAAI,EAEtBF,IAAWC,GAAM,CAItB,QAHIG,EAAQP,EAAOG,CAAM,EAErBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYM,IAAQ,GAAKA,IAAOhB,IAC3Ee,GAAU,IAAMD,EAAIE,CAAG,IAAO,EAC9BF,EAAIE,CAAG,EAAKD,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE7B,GAAIY,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACTW,GACD,CAGD,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAClCA,IAIF,QADIC,EAAMd,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EAAOC,GAAOtB,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAC3D,OAAOC,CACR,CACD,SAASC,EAAcX,EAAQ,CAC7B,GAAI,OAAOA,GAAW,SAAY,MAAM,IAAI,UAAU,iBAAiB,EACvE,GAAIA,EAAO,SAAW,EAAK,OAAO,IAAI,WACtC,IAAIY,EAAM,EAEV,GAAIZ,EAAOY,CAAG,IAAM,IAIpB,SAFIX,EAAS,EACTC,EAAS,EACNF,EAAOY,CAAG,IAAMhB,GACrBK,IACAW,IAMF,QAHIP,GAAUL,EAAO,OAASY,GAAOf,EAAU,IAAO,EAClDgB,EAAO,IAAI,WAAWR,CAAI,EAEvBL,EAAOY,CAAG,GAAG,CAElB,IAAIL,EAAQjB,EAASU,EAAO,WAAWY,CAAG,CAAC,EAE3C,GAAIL,IAAU,IAAO,OAErB,QADIf,EAAI,EACCsB,EAAMT,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYY,IAAQ,GAAKA,IAAOtB,IAC3Ee,GAAUZ,EAAOkB,EAAKC,CAAG,IAAO,EAChCD,EAAKC,CAAG,EAAKP,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAIA,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACToB,GACD,CAED,GAAIZ,EAAOY,CAAG,IAAM,IAGpB,SADIG,EAAMV,EAAOH,EACVa,IAAQV,GAAQQ,EAAKE,CAAG,IAAM,GACnCA,IAIF,QAFIC,EAAM,IAAI,WAAWf,GAAUI,EAAOU,EAAI,EAC1CxB,EAAIU,EACDc,IAAQV,GACbW,EAAIzB,GAAG,EAAIsB,EAAKE,GAAK,EAEvB,OAAOC,GACR,CACD,SAASC,EAAQC,EAAQ,CACvB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EAAU,OAAOA,EACrB,MAAM,IAAI,MAAM,OAAO9B,CAAI,YAAY,CACxC,CACD,MAAO,CACL,OAAQU,EACR,aAAcY,EACd,OAAQM,CACT,CACH,CACA,IAAIG,GAAMjC,GAENkC,GAAkCD,GCtFtC,MAAMW,GAASC,GAAK,CAClB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aAAc,OAAOA,EAC3E,GAAIA,aAAa,YAAa,OAAO,IAAI,WAAWA,CAAC,EACrD,GAAI,YAAY,OAAOA,CAAC,EACtB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE5D,MAAM,IAAI,MAAM,mCAAmC,CACrD,EAaMC,GAAavB,GAAQ,IAAI,YAAW,EAAI,OAAOA,CAAG,EAMlDwB,GAAWR,GAAM,IAAI,YAAa,EAAE,OAAOA,CAAC,EC/ClD,IAAAq7C,GAAA,KAAc,CAMZ,YAAa19C,EAAM+C,EAAQC,EAAY,CACrC,KAAK,KAAOhD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,CACnB,CAMD,OAAQC,EAAO,CACb,GAAIA,aAAiB,WACnB,MAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAWA,CAAK,CAAC,GAE9C,MAAM,MAAM,mCAAmC,CAElD,CACH,EAiBA06C,GAAA,KAAc,CAMZ,YAAa39C,EAAM+C,EAAQI,EAAY,CAIrC,GAHA,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EAEVA,EAAO,YAAY,CAAC,IAAM,OAC5B,MAAM,IAAI,MAAM,0BAA0B,EAG5C,KAAK,gBAAyCA,EAAO,YAAY,CAAC,EAClE,KAAK,WAAaI,CACnB,CAKD,OAAQC,EAAM,CACZ,GAAI,OAAOA,GAAS,SAAU,CAC5B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC/B,MAAM,MAAM,qCAAqC,KAAK,UAAUA,CAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE,EAEjJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CAC3D,KACM,OAAM,MAAM,mCAAmC,CAElD,CAOD,GAAIC,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CACH,EAYAu6C,GAAA,KAAsB,CAIpB,YAAap6C,EAAU,CACrB,KAAK,SAAWA,CACjB,CAOD,GAAIH,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CAMD,OAAQI,EAAO,CACb,MAAMV,EAAgCU,EAAM,CAAC,EACvCJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,EACF,OAAOA,EAAQ,OAAOI,CAAK,EAE3B,MAAM,WAAW,qCAAqC,KAAK,UAAUA,CAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAEvJ,CACH,EASO,MAAMH,GAAK,CAACI,EAAMC,IAAU,IAAIC,GAA6C,CAClF,GAAIF,EAAK,UAAY,CAAE,CAAoCA,EAAM,MAAM,EAAGA,GAC1E,GAAIC,EAAM,UAAY,CAAE,CAAoCA,EAAO,MAAM,EAAGA,EAC9E,CAAG,EAaI,IAAAk6C,GAAA,KAAY,CAOjB,YAAa79C,EAAM+C,EAAQC,EAAYG,EAAY,CACjD,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQ9D,EAAM+C,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQ/D,EAAM+C,EAAQI,CAAU,CACpD,CAKD,OAAQM,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CAKD,OAAQA,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CACH,EAYO,MAAMO,GAAO,CAAC,CAAE,KAAAhE,EAAM,OAAA+C,EAAQ,OAAArC,EAAQ,OAAAkB,CAAQ,IACnD,IAAIqC,GAAMjE,EAAM+C,EAAQrC,EAAQkB,CAAM,EAW3BsC,GAAQ,CAAC,CAAE,OAAAnB,EAAQ,KAAA/C,EAAM,SAAAmE,CAAQ,IAAO,CACnD,KAAM,CAAE,OAAAzD,EAAQ,OAAAkB,CAAM,EAAKwC,GAAMD,EAAUnE,CAAI,EAC/C,OAAOgE,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAAU,EAIA,OAAQ0C,GAAQV,GAAOd,EAAOwB,CAAI,CAAC,CACvC,CAAG,CACH,EASMxB,GAAS,CAACC,EAAQsC,EAAUE,EAAarE,IAAS,CAGtD,MAAMsE,EAAQ,CAAE,EAChB,QAASnE,EAAI,EAAGA,EAAIgE,EAAS,OAAQ,EAAEhE,EACrCmE,EAAMH,EAAShE,CAAC,CAAC,EAAIA,EAIvB,IAAIoE,EAAM1C,EAAO,OACjB,KAAOA,EAAO0C,EAAM,CAAC,IAAM,KACzB,EAAEA,EAIJ,MAAMC,EAAM,IAAI,WAAYD,EAAMF,EAAc,EAAK,CAAC,EAGtD,IAAII,EAAO,EACP3C,EAAS,EACT4C,EAAU,EACd,QAASvE,EAAI,EAAGA,EAAIoE,EAAK,EAAEpE,EAAG,CAE5B,MAAMwE,EAAQL,EAAMzC,EAAO1B,CAAC,CAAC,EAC7B,GAAIwE,IAAU,OACZ,MAAM,IAAI,YAAY,OAAO3E,CAAI,YAAY,EAI/C8B,EAAUA,GAAUuC,EAAeM,EACnCF,GAAQJ,EAGJI,GAAQ,IACVA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAQ5C,GAAU2C,EAEtC,CAGD,GAAIA,GAAQJ,GAAe,IAAQvC,GAAW,EAAI2C,EAChD,MAAM,IAAI,YAAY,wBAAwB,EAGhD,OAAOD,CACT,EAQM9D,GAAS,CAACkE,EAAMT,EAAUE,IAAgB,CAC9C,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GAENC,EAAO,EACP3C,EAAS,EACb,QAAS3B,EAAI,EAAGA,EAAIyE,EAAK,OAAQ,EAAEzE,EAMjC,IAJA2B,EAAUA,GAAU,EAAK8C,EAAKzE,CAAC,EAC/BsE,GAAQ,EAGDA,EAAOJ,GACZI,GAAQJ,EACRG,GAAOL,EAASW,EAAQhD,GAAU2C,CAAK,EAU3C,GALIA,IACFD,GAAOL,EAASW,EAAQhD,GAAWuC,EAAcI,CAAM,GAIrDI,EACF,KAAQL,EAAI,OAASH,EAAe,GAClCG,GAAO,IAIX,OAAOA,CACT,EAaaO,GAAU,CAAC,CAAE,KAAA/E,EAAM,OAAA+C,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,IACpDH,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAQyD,EAAO,CACb,OAAO/C,GAAO+C,EAAOU,EAAUE,CAAW,CAC3C,EACD,OAAQZ,EAAO,CACb,OAAO7B,GAAO6B,EAAOU,EAAUE,EAAarE,CAAI,CACjD,CACL,CAAG,ECvVUmO,GAASjK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,YACZ,CAAC,0GCFYkK,GAASrJ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACf,CAAC,EAEYsJ,GAActJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACf,CAAC,yHCZYkJ,GAAQlJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACf,CAAC,yGCPKZ,GAAW,MAAM,KAAK,weAAwe,EAC9fqK,GAAgDrK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAAQkG,EAAElG,CAAC,EAAIwG,EAAUN,GAA6B,CAAE,CAAA,EAC/HoI,GAAgDtK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAAQkG,EAAyBM,EAAE,YAAY,CAAC,GAAMxG,EAAUkG,GAA6B,CAAA,GAM1K,SAAS3F,GAAQkE,EAAM,CACrB,OAAOA,EAAK,OAAO,CAACyB,EAAGM,KACrBN,GAAKmI,GAAqB7H,CAAC,EACpBN,GACN,EAAE,CACP,CAMA,SAASzE,GAAQP,EAAK,CACpB,MAAMqN,EAAO,CAAE,EACf,UAAWC,KAAQtN,EAAK,CACtB,MAAMuN,EAAMH,GAA4CE,EAAK,YAAY,CAAC,CAAG,EAC7E,GAAIC,IAAQ,OACV,MAAM,IAAI,MAAM,+BAA+BD,CAAI,EAAE,EAEvDD,EAAK,KAAKE,CAAG,CACd,CACD,OAAO,IAAI,WAAWF,CAAI,CAC5B,CAEO,MAAMG,GAAe7K,GAAK,CAC/B,OAAQ,KACR,KAAM,eACR,OAAEtD,GACF,OAAEkB,EACF,CAAC,gHCpCYsD,GAASH,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYI,GAAcJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYK,GAAYL,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYM,GAAiBN,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYO,GAAYP,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYQ,GAAiBR,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYS,GAAeT,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYU,GAAoBV,GAAQ,CACvC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYW,GAAUX,GAAQ,CAC7B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACf,CAAC,uOC7DYuJ,GAASpK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,sCACZ,CAAC,EAEYqK,GAAcrK,GAAM,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,sCACZ,CAAC,yHCVYc,GAAYd,GAAM,CAC7B,KAAM,YACN,OAAQ,IACR,SAAU,4DACZ,CAAC,EAEYe,GAAef,GAAM,CAChC,KAAM,eACN,OAAQ,IACR,SAAU,4DACZ,CAAC,6HCRYyB,GAASZ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEYa,GAAYb,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACf,CAAC,EAEYc,GAAYd,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEYe,GAAef,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACf,CAAC,oJC1BYmJ,GAAQnJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACf,CAAC,yGCJYiJ,GAAWhK,GAAK,CAC3B,OAAQ,KACR,KAAM,WACN,OAAS0F,GAAQ7G,GAAS6G,CAAG,EAC7B,OAASrI,GAAQuB,GAAWvB,CAAG,CACjC,CAAC,4GCHmB,IAAI,YACJ,IAAI,YCUnB,MAAC+N,GAAQ,CAAE,GAAGC,GAAc,GAAGpB,GAAO,GAAGC,GAAO,GAAGC,GAAQ,GAAGC,GAAQ,GAAGlJ,GAAQ,GAAGoJ,GAAQ,GAAGgB,GAAQ,GAAG3J,GAAQ,GAAGkJ,EAAY,ECThIivC,GAAa99C,GAAS,QAAQ,OAAO,IAAI,MAAM,sBAAsBA,CAAI,GAAG,CAAC,EAE5E,MAAM+9C,EAAW,CAMtB,YAAa11C,EAAS,CAGpB,KAAK,aAAe,CAAE,EAItB,KAAK,eAAiB,CAAE,EAExB,KAAK,UAAYA,EAAQ,UAAYy1C,GAGrC,UAAWh+C,KAAQuI,EAAQ,MACzB,KAAK,QAAQvI,CAAI,CAEpB,CAOD,QAASA,EAAM,CACb,GAAI,KAAK,aAAaA,EAAK,IAAI,GAAK,KAAK,eAAeA,EAAK,MAAM,EACjE,MAAM,IAAI,MAAM,mCAAmCA,EAAK,IAAI,GAAG,EAGjE,KAAK,aAAaA,EAAK,IAAI,EAAIA,EAC/B,KAAK,eAAeA,EAAK,MAAM,EAAIA,CACpC,CAOD,WAAYA,EAAM,CAChB,OAAO,KAAK,aAAaA,EAAK,IAAI,EAClC,OAAO,KAAK,eAAeA,EAAK,MAAM,CACvC,CAKD,MAAM,QAASk+C,EAAc,CAC3B,GAAI,KAAK,aAAaA,CAAY,EAChC,OAAO,KAAK,aAAaA,CAAY,EAGvC,GAAI,KAAK,eAAeA,CAAY,EAClC,OAAO,KAAK,eAAeA,CAAY,EAIzC,MAAMl+C,EAAO,MAAM,KAAK,UAAUk+C,CAAY,EAE9C,OAAI,KAAK,aAAal+C,EAAK,IAAI,GAAK,MAAQ,KAAK,eAAeA,EAAK,MAAM,GAAK,MAC9E,KAAK,QAAQA,CAAI,EAGZA,CACR,CAED,WAAa,CACX,OAAO,OAAO,OAAO,KAAK,YAAY,CACvC,CACH,CC1EA,MAAMm+C,GAAcV,GAAe,QAAQ,OAAO,IAAI,MAAM,uBAAuBA,CAAU,GAAG,CAAC,EAE1F,MAAMW,EAAY,CAMvB,YAAa71C,EAAS,CAGpB,KAAK,cAAgB,CAAE,EAIvB,KAAK,cAAgB,CAAE,EAEvB,KAAK,WAAaA,EAAQ,WAAa41C,GAGvC,UAAW3wC,KAASjF,EAAQ,OAC1B,KAAK,SAASiF,CAAK,CAEtB,CAOD,SAAUA,EAAO,CACf,GAAI,KAAK,cAAcA,EAAM,IAAI,GAAK,KAAK,cAAcA,EAAM,IAAI,EACjE,MAAM,IAAI,MAAM,sCAAsCA,EAAM,IAAI,GAAG,EAGrE,KAAK,cAAcA,EAAM,IAAI,EAAIA,EACjC,KAAK,cAAcA,EAAM,IAAI,EAAIA,CAClC,CAOD,YAAaA,EAAO,CAClB,OAAO,KAAK,cAAcA,EAAM,IAAI,EACpC,OAAO,KAAK,cAAcA,EAAM,IAAI,CACrC,CAKD,MAAM,SAAUxC,EAAM,CACpB,MAAMqG,EAAQ,OAAOrG,GAAS,SAAW,KAAK,cAAgB,KAAK,cAEnE,GAAIqG,EAAMrG,CAAI,EACZ,OAAOqG,EAAMrG,CAAI,EAInB,MAAMwC,EAAQ,MAAM,KAAK,WAAWxC,CAAI,EAExC,OAAIqG,EAAMrG,CAAI,GAAK,MACjB,KAAK,SAASwC,CAAK,EAGdA,CACR,CAED,YAAc,CACZ,OAAO,OAAO,OAAO,KAAK,aAAa,CACxC,CACH,CCxEA,MAAM6wC,GAAeZ,GAAe,QAAQ,OAAO,IAAI,MAAM,wBAAwBA,CAAU,GAAG,CAAC,EAE5F,MAAMa,EAAY,CAMvB,YAAa/1C,EAAS,CAGpB,KAAK,eAAiB,CAAE,EAIxB,KAAK,eAAiB,CAAE,EAExB,KAAK,YAAcA,EAAQ,YAAc81C,GAGzC,UAAWzlB,KAAUrwB,EAAQ,QAC3B,KAAK,UAAUqwB,CAAM,CAExB,CAOD,UAAWA,EAAQ,CACjB,GAAI,KAAK,eAAeA,EAAO,IAAI,GAAK,KAAK,eAAeA,EAAO,IAAI,EACrE,MAAM,IAAI,MAAM,sCAAsCA,EAAO,IAAI,GAAG,EAGtE,KAAK,eAAeA,EAAO,IAAI,EAAIA,EACnC,KAAK,eAAeA,EAAO,IAAI,EAAIA,CACpC,CAOD,aAAcA,EAAQ,CACpB,OAAO,KAAK,eAAeA,EAAO,IAAI,EACtC,OAAO,KAAK,eAAeA,EAAO,IAAI,CACvC,CAKD,MAAM,UAAW5tB,EAAM,CACrB,MAAMqG,EAAQ,OAAOrG,GAAS,SAAW,KAAK,eAAiB,KAAK,eAEpE,GAAIqG,EAAMrG,CAAI,EACZ,OAAOqG,EAAMrG,CAAI,EAInB,MAAM4tB,EAAS,MAAM,KAAK,YAAY5tB,CAAI,EAE1C,OAAIqG,EAAMrG,CAAI,GAAK,MACjB,KAAK,UAAU4tB,CAAM,EAGhBA,CACR,CAED,aAAe,CACb,OAAO,OAAO,OAAO,KAAK,cAAc,CACzC,CACH,CCtEO,SAAS2lB,GAAa99B,EAAK,CAChC,GAAI,CAEFA,EAAMiiB,GAAe3qB,GAAU0I,CAAG,CAAC,CACvC,MAAmC,CAAG,CAEpC,OAAAA,EAAMA,EAAI,SAAU,EAEbA,CACT,CCnBA,MAAA+9B,GAAe,IAAM,CAAA,ECWfl4B,GAAMC,EAAO,oCAAoC,EACjDnF,GAAQyK,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EAEhD4yB,GAAmB98B,GAAAA,WAAaC,GAAAA,YAAc,SAAS,SAAW,OAClE88B,GAAe/8B,GAAAA,WAAaC,GAAAA,YAAc,SAAS,SAAW,YAC9D+8B,GAAeh9B,GAAAA,WAAaC,GAAAA,YAAc,SAAS,KAAO,OAY1Dg9B,GAAmB,CAACr2C,EAAU,KAAO,CACzC,IAAIkY,EAEA8B,EAAO,CAAE,EACTs8B,EAEJ,GAAI,OAAOt2C,GAAY,UAAY8N,GAAY9N,CAAO,EACpDkY,EAAM,IAAI,IAAI89B,GAAYh2C,CAAO,CAAC,UACzBA,aAAmB,IAC5BkY,EAAMlY,UACG,OAAOA,EAAQ,KAAQ,UAAY8N,GAAY9N,EAAQ,GAAG,EACnEkY,EAAM,IAAI,IAAI89B,GAAYh2C,EAAQ,GAAG,CAAC,EACtCga,EAAOha,UACEA,EAAQ,eAAe,IAChCkY,EAAMlY,EAAQ,IACdga,EAAOha,MACF,CACLga,EAAOha,GAAW,CAAE,EAEpB,MAAMg6B,GAAYhgB,EAAK,UAAYk8B,IAAkB,QAAQ,IAAK,EAAE,EAC9DvoC,GAAQqM,EAAK,MAAQm8B,IAAc,MAAM,GAAG,EAAE,CAAC,EAC/CvrC,EAAQoP,EAAK,MAAQo8B,GAE3Bl+B,EAAM,IAAI,IAAI,GAAG8hB,CAAQ,MAAMrsB,CAAI,IAAI/C,CAAI,EAAE,CAC9C,CAQD,GANIoP,EAAK,QACP9B,EAAI,SAAW8B,EAAK,SACX9B,EAAI,WAAa,KAAOA,EAAI,WAAa,UAClDA,EAAI,SAAW,UAGbq+B,UAAQ,CACV,MAAMC,EAAQP,GAAY,EAE1BK,EAAQt8B,EAAK,OAAS,IAAIw8B,EAAM,CAC9B,UAAW,GAEX,WAAY,CAClB,CAAK,CACF,CAED,MAAO,CACL,GAAGx8B,EACH,KAAM9B,EAAI,KACV,SAAUA,EAAI,SAAS,QAAQ,IAAK,EAAE,EACtC,KAAM,OAAOA,EAAI,IAAI,EACrB,QAASA,EAAI,SACb,IAAAA,EACA,MAAAo+B,CACD,CACH,EAKaG,GAAe,MAAOh/B,GAAa,CAC9C,IAAIk8B,EAEJ,GAAI,CACF,IAAKl8B,EAAS,QAAQ,IAAI,cAAc,GAAK,IAAI,WAAW,kBAAkB,EAAG,CAC/E,MAAMlb,EAAO,MAAMkb,EAAS,KAAM,EAClCsG,GAAIxhB,CAAI,EACRo3C,EAAMp3C,EAAK,SAAWA,EAAK,OACjC,MACMo3C,EAAM,MAAMl8B,EAAS,KAAM,CAE9B,OAA2BjL,EAAK,CAC/BuR,GAAI,iCAAkCvR,CAAG,EAEzCmnC,EAAMnnC,EAAI,OACX,CAGD,IAAI8J,EAAQ,IAAIvF,GAAK,UAAU0G,CAAQ,EAEvC,MAAIk8B,IAEEA,EAAI,SAAS,sBAAsB,IACrCr9B,EAAQ,IAAIvF,GAAK,cAIf4iC,GAAOA,EAAI,SAAS,2BAA2B,IACjDr9B,EAAQ,IAAIvF,GAAK,eAKjB4iC,GAAOA,EAAI,SAAS,mBAAmB,IACzCr9B,EAAQ,IAAIvF,GAAK,cAIf4iC,IACFr9B,EAAM,QAAUq9B,GAGZr9B,CACR,EAEMogC,GAAc,mCAKdC,GAAa39C,GACVA,EAAI,QAAQ09C,GAAa,SAAU3jC,EAAO,CAC/C,MAAO,IAAMA,EAAM,YAAa,CACpC,CAAG,EAMG6jC,GAAgBt6C,GACb,OAAOA,GAAU,SAAWqX,GAAcrX,CAAK,EAAIA,EAGrD,MAAMu6C,WAAe9lC,EAAK,CAI/B,YAAa/Q,EAAU,GAAI,CACzB,MAAMga,EAAOq8B,GAAiBr2C,CAAO,EAErC,MAAM,CACJ,QAAS42C,GAAa58B,EAAK,SAAW,CAAC,GAAK,OAC5C,QAASA,EAAK,QACd,KAAM,GAAGA,EAAK,GAAG,GACjB,YAAay8B,GACb,sBAAwBK,GAAW,CACjC,MAAM36C,EAAM,IAAI,gBAEhB,SAAW,CAAC6Z,EAAK1Z,CAAK,IAAKw6C,EAEvBx6C,IAAU,aACVA,IAAU,QACV0Z,IAAQ,UAER7Z,EAAI,OAAOw6C,GAAU3gC,CAAG,EAAG1Z,CAAK,EAI9B0Z,IAAQ,WAAa,CAAC,MAAM1Z,CAAK,GACnCH,EAAI,OAAOw6C,GAAU3gC,CAAG,EAAG1Z,CAAK,EAIpC,OAAOH,CACR,EAED,MAAO6d,EAAK,KAClB,CAAK,EAGD,OAAO,KAAK,IAEZ,OAAO,KAAK,IAEZ,OAAO,KAAK,OAEZ,OAAO,KAAK,QAEZ,MAAMjC,EAAQ,KAAK,MAMnB,KAAK,MAAQ,CAACgC,EAAU/Z,EAAU,CAAA,KAC5B,OAAO+Z,GAAa,UAAY,CAACA,EAAS,WAAW,GAAG,IAC1DA,EAAW,GAAGC,EAAK,GAAG,IAAID,CAAQ,IAG7BhC,EAAM,KAAK,KAAMgC,EAAUlB,GAAM7Y,EAAS,CAC/C,OAAQ,MAChB,CAAO,CAAC,EAEL,CACH,CAEyB+Q,GAAK,UC1LvB,MAAMgmC,EAAavjC,GAChBxT,GACCwT,EAAG,IAAIqjC,GAAO72C,CAAO,EAAGA,CAAO,ECvBnC,SAASg3C,GAAc13C,EAAM,CAClC,GAAIA,GAAQ,KAIZ,OAAI,OAAOA,GAAS,SACXA,EAGFA,EAAK,SAAS,CAAC,EAAE,SAAS,EAAG,GAAG,CACzC,CCTO,SAASC,GAAYnE,EAAO,CACjC,GAAIA,GAAS,KACX,OAIF,IAAIoE,EA2BJ,GAxBIpE,EAAM,MAAQ,OAChBoE,EAAQ,CACN,KAAMpE,EAAM,KACZ,MAAOA,EAAM,KACd,GAICA,EAAM,SAAW,OACnBoE,EAAQ,CACN,KAAMpE,EAAM,QACZ,MAAOA,EAAM,qBACd,GAIC,MAAM,QAAQA,CAAK,IACrBoE,EAAQ,CACN,KAAMpE,EAAM,CAAC,EACb,MAAOA,EAAM,CAAC,CACf,GAICA,aAAiB,KAAM,CACzB,MAAMqE,EAAKrE,EAAM,QAAS,EACpBsE,EAAO,KAAK,MAAMD,EAAK,GAAI,EAEjCD,EAAQ,CACN,KAAME,EACN,OAAQD,EAAMC,EAAO,KAAS,GAC/B,CACF,CAiBD,GAAK,OAAO,UAAU,eAAe,KAAKF,EAAO,MAAM,EAIvD,IAAIA,GAAS,MAAQA,EAAM,OAAS,OAASA,EAAM,MAAQ,GAAKA,EAAM,MAAQ,WAC5E,MAAM8P,EAAQ,IAAI,MAAM,oDAAoD,EAAG,yBAAyB,EAG1G,OAAO9P,EACT,CCjEO,SAASy3C,EAAmB,CAAE,IAAAhlC,EAAK,aAAAgI,EAAc,QAAAunB,EAAS,MAAAhiC,EAAO,KAAAF,EAAM,GAAGU,CAAS,EAAG,GAAI,CAC3Fia,IACFja,EAAU,CACR,GAAGA,EACH,GAAGia,CACJ,GAGCunB,IACFxhC,EAAQ,KAAOwhC,GAGbhiC,GAAS,OACXA,EAAQD,GAAWC,CAAK,EAExBQ,EAAQ,MAAQR,EAAM,KACtBQ,EAAQ,WAAaR,EAAM,OAGzBF,GAAQ,OACVU,EAAQ,KAAOg3C,GAAa13C,CAAI,GAG9BU,EAAQ,SAAW,CAAC,MAAMA,EAAQ,OAAO,IAE3CA,EAAQ,QAAU,GAAGA,EAAQ,OAAO,MAGbiS,GAAQ,KAC/BA,EAAM,CAAE,EACE,MAAM,QAAQA,CAAG,IAC3BA,EAAM,CAACA,CAAG,GAGZ,MAAMilC,EAAkB,IAAI,gBAAgBl3C,CAAO,EAEnD,OAAAiS,EAAI,QAA4BA,GAAQilC,EAAgB,OAAO,MAAOjlC,CAAG,CAAC,EAEnEilC,CACT,CCrCO,MAAMlxB,GAAiB+wB,EAAUvc,GAAO,CAI7C,eAAevU,EAAUjmB,EAAU,GAAI,CAOrC,QANY,MAAO,MAAMw6B,EAAI,KAAK,mBAAoB,CACpD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OAClB,CAAA,GAAG,KAAM,GAEE,MAAQ,CAAA,GAAI,IAAoC2xC,GAAM7tC,EAAI,MAAM6tC,EAAE,GAAG,CAAC,CAAC,CACpF,CACD,OAAO1rB,CACT,CAAC,ECdYG,GAAwB2wB,EAAUvc,GAAO,CAIpD,eAAenU,EAAiBzP,EAAQ5W,EAAU,GAAI,CAUpD,QATY,MAAO,MAAMw6B,EAAI,KAAK,mBAAoB,CACpD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,KAAM4W,EAAO,SAAU,CAC/B,CAAO,EACD,QAAS5W,EAAQ,OAClB,CAAA,GAAG,KAAM,GAEE,MAAQ,CAAA,GAAI,IAAoC2xC,GAAM7tC,EAAI,MAAM6tC,EAAE,GAAG,CAAC,CAAC,CACpF,CACD,OAAOtrB,CACT,CAAC,EChBYI,GAAaswB,EAAUvc,GAAO,CAIzC,eAAe9T,EAAM1mB,EAAU,GAAI,CACjC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,aAAcyc,EAAkBj3C,CAAO,EACvC,OAAQA,EAAQ,OAChB,QAASA,EAAQ,OACvB,CAAK,EAED,OAAOm3C,GAAgB,MAAM71C,EAAI,MAAM,CACxC,CACD,OAAOolB,CACT,CAAC,EAKD,SAASywB,GAAiB71C,EAAK,CAC7B,MAAO,CACL,cAAeA,EAAI,cACnB,UAAWA,EAAI,UAAY,CAAE,GAAE,IAAoCqwC,GAAM7tC,EAAI,MAAM6tC,EAAE,GAAG,CAAC,CAAC,EAC1F,OAAQrwC,EAAI,OAAS,CAAE,GAAE,IAA2BtI,GAAQijB,GAAiBjjB,CAAG,CAAC,EACjF,eAAgB,OAAOsI,EAAI,cAAc,EACzC,aAAc,OAAOA,EAAI,YAAY,EACrC,WAAY,OAAOA,EAAI,UAAU,EACjC,SAAU,OAAOA,EAAI,QAAQ,EAC7B,gBAAiB,OAAOA,EAAI,eAAe,EAC3C,gBAAiB,OAAOA,EAAI,eAAe,CAC5C,CACH,CCjCO,MAAMglB,GAAeywB,EAAUvc,GAAO,CAI3C,eAAejU,EAAQ3iB,EAAK5D,EAAU,GAAI,CAUxC,OATY,MAAMw6B,EAAI,KAAK,iBAAkB,CAC3C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrzC,EAAI,SAAU,EACnB,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAEU,KAAM,CAClB,CACD,OAAOumB,CACT,CAAC,ECjBM,SAASwgB,GAAehgB,EAAQ,CACrC,MAAO,CACL,SAAUf,GAAee,CAAM,EAC/B,gBAAiBX,GAAsBW,CAAM,EAC7C,OAAQT,GAAaS,CAAM,EAC3B,KAAMN,GAAWM,CAAM,CACxB,CACH,CCPO,MAAMW,GAAYqvB,EAAUvc,GAAO,CAIxC,eAAehY,EAAK5e,EAAK5D,EAAU,GAAI,CACrC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,YAAa,CACtC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrzC,EAAI,SAAU,EACnB,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,OAAO,IAAI,WAAW,MAAMsB,EAAI,YAAW,CAAE,CAC9C,CACD,OAAOkhB,CACT,CAAC,ECZM,eAAemG,GAAkBvtB,EAAO,CAE7C,GAAIktB,GAAQltB,CAAK,EACf,OAAO,IAAI,KAAK,CAACA,CAAK,CAAC,EAIzB,GAAI,OAAOA,GAAU,UAAYA,aAAiB,OAChD,OAAO,IAAI,KAAK,CAACA,EAAM,SAAU,CAAA,CAAC,EAIpC,GAAImtB,GAAOntB,CAAK,EACd,OAAOA,EAST,GALIqtB,GAAiBrtB,CAAK,IACxBA,EAAQytB,GAAkBztB,CAAK,GAI7B,OAAO,YAAYA,GAAS,OAAO,iBAAiBA,EAAO,CAE7D,MAAM0tB,EAAWC,GAAW3tB,CAAK,EAG3B,CAAE,MAAAkB,EAAO,KAAAgY,CAAM,EAAG,MAAMwU,EAAS,KAAM,EAE7C,GAAIxU,EAEF,OAAO8iC,GAAStuB,CAAQ,EAM1B,GAHAA,EAAS,KAAKxsB,CAAK,EAGf,OAAO,UAAUA,CAAK,EACxB,OAAO,IAAI,KAAK,CAAC,WAAW,KAAK,MAAMid,GAAIuP,CAAQ,CAAC,CAAC,CAAC,EAIxD,GAAIR,GAAQhsB,CAAK,GAAK,OAAOA,GAAU,UAAYA,aAAiB,OAClE,OAAO86C,GAAStuB,CAAQ,CAE3B,CAED,MAAMxZ,EAAQ,IAAI,MAAM,qBAAqBlU,CAAK,EAAE,EAAG,sBAAsB,CAC/E,CAKA,eAAeg8C,GAAUjU,EAAQ,CAC/B,MAAM13B,EAAQ,CAAE,EAEhB,gBAAiB4O,KAAS8oB,EACxB13B,EAAM,KAAK4O,CAAK,EAGlB,OAAO,IAAI,KAAK5O,CAAK,CACvB,CCtDO,SAAS8Q,GAAgBnhB,EAAO,CAErC,OAAOy0B,GAA2Bz0B,EAAOutB,EAAsB,CACjE,CCnBO,SAASquB,GAAc13C,EAAM,CAClC,GAAIA,GAAQ,KAIZ,OAAI,OAAOA,GAAS,SACXA,EAGFA,EAAK,SAAS,CAAC,EAAE,SAAS,EAAG,GAAG,CACzC,CCCO,eAAe+3C,GAAkB/+C,EAAQmhB,EAAiBrB,EAAU,CAAA,EAAI,CAC7E,MAAM3M,EAAQ,CAAE,EACV6rC,EAAW,IAAI,SACrB,IAAIh3C,EAAQ,EACRi3C,EAAQ,EAEZ,eAAiB,CAAE,QAAAruB,EAAS,KAAA/f,EAAM,KAAA7J,EAAM,MAAAE,KAAW+c,GAAejkB,CAAM,EAAG,CACzE,IAAIk/C,EAAa,GACjB,MAAMv3C,EAAOipB,EAAU,OAAS,MAE5B5oB,EAAQ,IACVk3C,EAAa,IAAIl3C,CAAK,IAGxB,IAAIm3C,EAAYx3C,EAAOu3C,EACvB,MAAME,EAAK,CAAE,EAMb,GAJIp4C,GAAS,MACXo4C,EAAG,KAAK,QAAQV,GAAa13C,CAAI,CAAC,EAAE,EAGjCE,GAAU,KAAM,CACnB,KAAM,CAAE,KAAAE,EAAM,MAAAi4C,CAAO,EAAIn4C,EAEzBk4C,EAAG,KAAK,SAASh4C,CAAI,EAAE,EAEnBi4C,GAAS,MACXD,EAAG,KAAK,eAAeC,CAAK,EAAE,CAEjC,CAMD,GAJID,EAAG,SACLD,EAAY,GAAGA,CAAS,IAAIC,EAAG,KAAK,GAAG,CAAC,IAGtCxuB,EAAS,CACXouB,EAAS,IAAIG,EAAWvuB,EAAS/f,GAAQ,KAAO,mBAAmBA,CAAI,EAAI,MAAS,EACpF,MAAMjN,EAAMq7C,EAAQruB,EAAQ,KAC5Bzd,EAAM,KAAK,CAAE,KAAMtC,EAAM,MAAOouC,EAAO,IAAAr7C,EAAK,EAC5Cq7C,EAAQr7C,CACd,SAAeiN,GAAQ,KACjBmuC,EAAS,IAAIG,EAAW,IAAI,KAAK,CAAC,EAAE,EAAG,mBAAmBtuC,CAAI,EAAG,CAAE,KAAM,yBAA2B,CAAA,CAAC,MAErG,OAAM,IAAI,MAAM,qCAAqC,EAGvD7I,GACD,CAED,MAAO,CACL,MAAAi3C,EACA,MAAA9rC,EACA,QAAA2M,EACA,KAAMk/B,CACP,CACH,CChEA,SAASlvB,GAAQ5D,EAAS,CACxB,OAAOA,EAAQ,OAAO,OAAO,CAC/B,CAKO,SAASozB,MAAgBpzB,EAAS,CACvC,OAAO1Q,GAAUsU,GAAO5D,CAAO,CAAC,CAClC,CCJO,MAAMmD,GAAYovB,EAAUvc,GAAO,CAIxC,eAAe5S,EAAKrrB,EAAMyD,EAAU,GAAI,CAEtC,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAE5D,IAAIsB,EACJ,GAAI,CAQFA,EAAM,MAPW,MAAMk5B,EAAI,KAAK,YAAa,CAC3C,OAAQrgB,EACR,aAAc88B,EAAkBj3C,CAAO,EACvC,GACE,MAAMq3C,GAAiB,CAAC96C,CAAI,EAAGqX,EAAY5T,EAAQ,OAAO,CAEpE,CAAO,GACoB,KAAM,CAC5B,OAA2BwM,EAAK,CAG/B,GAAIxM,EAAQ,SAAW,SACrB,OAAO4nB,EAAIrrB,EAAM,CAAE,GAAGyD,EAAS,OAAQ,WAAY,EAC9C,GAAIA,EAAQ,SAAW,WAC5B,OAAO4nB,EAAIrrB,EAAM,CAAE,GAAGyD,EAAS,OAAQ,OAAQ,EAGjD,MAAMwM,CACP,CAED,OAAO1I,EAAI,MAAMxC,EAAI,GAAG,CACzB,CAED,OAAOsmB,CACT,CAAC,ECpCYnK,GAAWs5B,EAAUvc,GAAO,CAIvC,eAAiB7c,EAAI/Z,EAAK5D,EAAU,GAAI,CACjC,MAAM,QAAQ4D,CAAG,IACpBA,EAAM,CAACA,CAAG,GAGZ,MAAMtC,EAAM,MAAMk5B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrzC,EAAI,IAAIA,GAAOA,EAAI,SAAQ,CAAE,EAClC,kBAAmB,GACnB,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBmnB,KAAW7lB,EAAI,SAC9B,MAAM61C,GAAgBhwB,CAAO,CAEhC,CAED,OAAOxJ,CACT,CAAC,EAKD,SAASw5B,GAAiBhwB,EAAS,CAEjC,MAAMhrB,EAAM,CACV,IAAK2H,EAAI,MAAMqjB,EAAQ,IAAI,CAC5B,EAED,OAAIA,EAAQ,QACVhrB,EAAI,MAAQ,IAAI,MAAMgrB,EAAQ,KAAK,GAG9BhrB,CACT,CC1CO,MAAMsqB,GAAaswB,EAAUvc,GAAO,CAIzC,eAAe9T,EAAM9iB,EAAK5D,EAAU,GAAI,CAStC,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrzC,EAAI,SAAU,EACnB,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,MAAO,CAAE,IAAK8D,EAAI,MAAMvH,EAAK,GAAG,EAAG,KAAMA,EAAK,IAAM,CACrD,CAED,OAAOmqB,CACT,CAAC,ECpBM,SAASmxB,GAAa9wB,EAAQ,CACnC,MAAO,CACL,IAAKW,GAAUX,CAAM,EACrB,IAAKY,GAAUZ,CAAM,EACrB,GAAItJ,GAASsJ,CAAM,EACnB,KAAMN,GAAWM,CAAM,CACxB,CACH,CCNO,MAAM7K,GAAY66B,EAAUvc,GAAO,CAIxC,eAAe1T,EAAK3b,EAAMnL,EAAU,GAAI,CACtC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,gBAAiB,CAC1C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9rC,EACL,GAAGnL,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,MAAO,CAAE,MAAOw2C,EAAM,IAA2B/lC,GAAOvC,GAAUuC,CAAE,CAAC,CAAG,CACzE,CAED,OAAO+U,CACT,CAAC,ECpBYG,GAAc8vB,EAAUvc,GAAO,CAI1C,eAAetT,EAAOlnB,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,IAAK,EACb,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,MAAO,CAAE,MAAOw2C,EAAM,IAA2B/lC,GAAOvC,GAAUuC,CAAE,CAAC,CAAG,CACzE,CAED,OAAOmV,CACT,CAAC,ECpBYE,GAAa2vB,EAAUvc,GAAO,CAIzC,eAAerU,EAAMnmB,EAAU,GAAI,CACjC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,iBAAkB,CAC3C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,MAAO,CAAE,MAAOw2C,EAAM,IAA2B/lC,GAAOvC,GAAUuC,CAAE,CAAC,CAAG,CACzE,CAED,OAAOoU,CACT,CAAC,ECjBYmB,GAAcyvB,EAAUvc,GAAO,CAI1C,eAAejT,EAAOvnB,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,gBAAiB,CAC1C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,QAAS,EACjB,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,MAAO,CAAE,MAAOw2C,EAAM,IAA2B/lC,GAAOvC,GAAUuC,CAAE,CAAC,CAAG,CACzE,CAED,OAAOwV,CACT,CAAC,ECpBY9J,GAAWs5B,EAAUvc,GAAO,CAIvC,eAAe7c,EAAIxS,EAAMnL,EAAU,GAAI,CACrC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9rC,EACL,GAAGnL,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,MAAO,CAAE,MAAOw2C,EAAM,IAA2B/lC,GAAOvC,GAAUuC,CAAE,CAAC,CAAG,CACzE,CAED,OAAO4L,CACT,CAAC,ECpBM,SAASo6B,GAAiBhxB,EAAQ,CACvC,MAAO,CACL,IAAK7K,GAAU6K,CAAM,EACrB,MAAOE,GAAYF,CAAM,EACzB,KAAMK,GAAWL,CAAM,EACvB,MAAOO,GAAYP,CAAM,EACzB,GAAItJ,GAASsJ,CAAM,CACpB,CACH,CCTO,MAAMixB,GAAcjB,EAAUvc,GAAO,CAI1C,eAAeyd,EAAOxgB,EAASz3B,EAAU,GAAI,CAS3C,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,uBAAwB,CACjD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKxf,EACL,GAAGz3B,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,MAAO,CACL,SAAUzD,EAAK,OAAQ,QAASA,EAAK,MACtC,CACF,CAED,OAAO07C,CACT,CAAC,ECnBM,SAASC,GAAev7B,EAAK,CAClC,GAAIA,GAAO,KACT,OAAOA,EAGT,MAAMw7B,EAAO,WAGPziC,EAAS,CAAE,EAEjB,OAAO,OAAO,KAAKiH,CAAG,EAAE,OAAO,CAACy7B,EAAUzG,KACpCwG,EAAK,KAAKxG,CAAC,EACbyG,EAASzG,EAAE,YAAa,CAAA,EAAIh1B,EAAIg1B,CAAC,EACxBwG,EAAK,KAAKxG,EAAE,CAAC,CAAC,EACvByG,EAASzG,EAAE,CAAC,EAAE,YAAa,EAAGA,EAAE,MAAM,CAAC,CAAC,EAAIh1B,EAAIg1B,CAAC,EAEjDyG,EAASzG,CAAC,EAAIh1B,EAAIg1B,CAAC,EAEdyG,GACN1iC,CAAM,CACX,CCrBO,MAAM0R,GAAa2vB,EAAUvc,GAAO,CAIzC,eAAerU,EAAMnmB,EAAU,GAAI,CASjC,OAFa,MAND,MAAMw6B,EAAI,KAAK,sBAAuB,CAChD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEsB,KAAM,GAEjB,IAAwCy3B,GAAYygB,GAAczgB,CAAO,CAAC,CACvF,CACD,OAAOtR,CACT,CAAC,ECnBM,SAASkyB,GAAgBtxB,EAAQ,CACtC,MAAO,CACL,MAAOixB,GAAYjxB,CAAM,EACzB,KAAMK,GAAWL,CAAM,CACxB,CACH,CCHO,MAAMW,GAAYqvB,EAAUvc,GAIrB,MAAOxkB,EAAKhW,EAAU,CAAA,IAAO,CACvC,GAAI,CAACgW,EACH,MAAM,IAAI,MAAM,0BAA0B,EAa5C,OAFa,MARD,MAAMwkB,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKjhC,EACL,GAAGhW,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,GAEjB,KACb,CAGF,ECvBYs4C,GAAevB,EAAUvc,GAIrB,MAAOx6B,EAAU,KAQjB,MAPD,MAAMw6B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,CAMhC,ECfYu4C,GAAgBxB,EAAUvc,GAIrB,MAAOzT,EAAQ/mB,EAAU,CAAA,IAAO,CAE9C,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAU5D,MARY,MAAMw6B,EAAI,KAAK,iBAAkB,CAC3C,OAAArgB,EACA,aAAc88B,EAAkBj3C,CAAO,EACvC,GACE,MAAMq3C,GAAiB,CAACjtC,EAAqB,KAAK,UAAU2c,CAAM,CAAC,CAAC,EAAGnT,EAAY5T,EAAQ,OAAO,CAE1G,CAAK,GAES,KAAM,CACjB,CAGF,ECxBYw4C,GAAYzB,EAAUvc,GAIrB,MAAOxkB,EAAK1Z,EAAO0D,EAAU,CAAA,IAAO,CAC9C,GAAI,OAAOgW,GAAQ,SACjB,MAAM,IAAI,MAAM,kBAAkB,EAGpC,MAAMyiC,EAAS,CACb,GAAGz4C,EACH,GAAG04C,GAAY1iC,EAAK1Z,CAAK,CAC1B,EAQD,MANY,MAAMk+B,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBwB,CAAM,EACtC,QAASz4C,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CAGF,EAMK04C,GAAc,CAAC1iC,EAAK1Z,IAAU,CAClC,OAAQ,OAAOA,EAAK,CAClB,IAAK,UACH,MAAO,CAAE,IAAK,CAAC0Z,EAAK1Z,EAAM,UAAU,EAAG,KAAM,EAAM,EACrD,IAAK,SACH,MAAO,CAAE,IAAK,CAAC0Z,EAAK1Z,CAAK,CAAG,EAC9B,QACE,MAAO,CAAE,IAAK,CAAC0Z,EAAK,KAAK,UAAU1Z,CAAK,CAAC,EAAG,KAAM,EAAM,CAC3D,CACH,ECtCO,SAAS46B,GAAcnQ,EAAQ,CACpC,MAAO,CACL,OAAQuxB,GAAavxB,CAAM,EAC3B,IAAKW,GAAUX,CAAM,EACrB,IAAKyxB,GAAUzxB,CAAM,EACrB,QAASwxB,GAAcxxB,CAAM,EAC7B,SAAUsxB,GAAetxB,CAAM,CAChC,CACH,CCTO,MAAM0R,GAAese,EAAUvc,GAAO,CAI3C,eAAiB9B,EAAWlO,EAAMxqB,EAAU,GAAI,CAS9C,OARY,MAAMw6B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKzsB,EAAK,SAAU,CAC5B,CAAO,EACD,QAASxqB,EAAQ,OACvB,CAAK,GAEW,SAAU,CACvB,CAED,OAAO04B,CACT,CAAC,ECTM,eAAiBnjB,GAAS3R,EAAKuF,EAAM/B,EAAQuxC,EAAU34C,EAAS,CAIrE,MAAM8V,EAAO,MAAOlS,GAAQ,CAC1B,MAAMqB,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EACtCmS,EAAQ,MAAM4iC,EAAS/0C,EAAK5D,CAAO,EAEzC,OAAOiF,EAAM,OAAO8Q,CAAK,CAC1B,EAEKtK,EAAQtC,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAC5C,IAAI7M,EAAQ,MAAMwZ,EAAKlS,CAAG,EACtBwR,EAAUxR,EAGd,KAAO6H,EAAM,QAAQ,CACnB,MAAMuK,EAAMvK,EAAM,MAAO,EAEzB,GAAI,CAACuK,EACH,MAAM1G,EAAQ,IAAI,MAAM,2BAA2BnG,CAAI,GAAG,EAAG,kBAAkB,EAGjF,GAAI,OAAO,UAAU,eAAe,KAAK7M,EAAO0Z,CAAG,EACjD1Z,EAAQA,EAAM0Z,CAAG,EAEjB,KAAM,CACJ,MAAA1Z,EACA,cAAemP,EAAM,KAAK,GAAG,CAC9B,MAED,OAAM6D,EAAQ,IAAI,MAAM,kBAAkB0G,CAAG,WAAWZ,CAAO,EAAE,EAAG,aAAa,EAGnF,MAAMxR,EAAME,EAAI,MAAMxH,CAAK,EAEvBsH,IACFwR,EAAUxR,EACVtH,EAAQ,MAAMwZ,EAAKxZ,CAAK,EAE3B,CAED,KAAM,CACJ,MAAAA,EACA,cAAe,EAChB,CACH,CC9CO,MAAMorB,GAAY,CAACtgB,EAAQpH,IACrB+2C,EAAU,CAACvc,EAAKxgB,IAAS,CAClC,MAAM2+B,EAAWC,GAAe5+B,CAAI,EA8BpC,MAzBY,OAAOpW,EAAK5D,EAAU,CAAA,IAAO,CACvC,GAAIA,EAAQ,KAAM,CAKhB,MAAM0F,EAJQ1F,EAAQ,aAClB,MAAM0c,GAAMnH,GAAQ3R,EAAK5D,EAAQ,KAAMoH,EAAQuxC,EAAU34C,CAAO,CAAC,EACjE,MAAMoc,GAAK7G,GAAQ3R,EAAK5D,EAAQ,KAAMoH,EAAQuxC,EAAU34C,CAAO,CAAC,EAIpE,GAAI,CAAC0F,EACH,MAAM4J,EAAQ,IAAI,MAAM,WAAW,EAAG,eAAe,EAGvD,OAAO5J,CACR,CAED,MAAMT,EAAQ,MAAMmC,EAAO,SAASxD,EAAI,IAAI,EACtCmS,EAAQ,MAAM4iC,EAAS/0C,EAAK5D,CAAO,EAGzC,MAAO,CACL,MAHWiF,EAAM,OAAO8Q,CAAK,EAI7B,cAAe,EAChB,CACF,CAGL,CAAG,EAES/V,CAAO,ECxCN84B,GAAeie,EAAUvc,GAAO,CAI3C,eAAiBzB,EAAWzgC,EAAQ0H,EAAU,GAAI,CAChD,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EACtD,CAAE,QAAAoY,EAAS,KAAAQ,GAAS,MAAMy+B,GAAiB/+C,EAAQsb,EAAY5T,EAAQ,OAAO,EAE9EsB,EAAM,MAAMk5B,EAAI,KAAK,aAAc,CACvC,OAAArgB,EACA,QAAA/B,EACA,KAAAQ,EACA,aAAcq+B,EAAkB,CAAE,YAAaj3C,EAAQ,QAAQ,CAAE,CACvE,CAAK,EAED,eAAiB,CAAE,KAAAyqB,CAAI,IAAMnpB,EAAI,OAAM,EACrC,GAAImpB,IAAS,OAAW,CACtB,KAAM,CAAE,IAAK,CAAE,IAAKouB,CAAK,EAAE,YAAAC,CAAW,EAAKruB,EAE3C,KAAM,CACJ,KAAM,CACJ,IAAK3mB,EAAI,MAAM+0C,CAAG,EAClB,YAAaC,CACd,CACF,CACF,CAEJ,CAED,OAAO/f,CACT,CAAC,EC3BYpR,GAAY,CAACvgB,EAAQpH,IACrB+2C,EAAWvc,GAIR,MAAOjB,EAASv5B,EAAU,CAAA,IAAO,CAC3C,MAAMiiC,EAAW,CACf,WAAY,WACZ,QAAS,WACT,GAAGjiC,CACJ,EAED,IAAI+4C,EAEJ,GAAI9W,EAAS,WAAY,CAIvB,GAAI,EAAE1I,aAAmB,YACvB,MAAM,IAAI,MAAM,sDAAsD,EAExEwf,EAAaxf,CACrB,MAKQwf,GADmB,MAAM3xC,EAAO,SAAS66B,EAAS,UAAU,GACpC,OAAO1I,CAAO,EAGtC0I,EAAS,WAAaA,EAAS,WAIjC,MAAMruB,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQquB,EAAS,MAAM,EAUvD1lC,EAAO,MARD,MAAMi+B,EAAI,KAAK,UAAW,CACpC,QAASyH,EAAS,QAClB,OAAA9nB,EACA,aAAc88B,EAAkBhV,CAAQ,EACxC,GACE,MAAMoV,GAAiB,CAAC0B,CAAU,EAAGnlC,EAAYquB,EAAS,OAAO,CAE3E,CAAO,GACsB,KAAM,EAE7B,OAAOn+B,EAAI,MAAMvH,EAAK,IAAI,GAAG,CAAC,CAC/B,CAGF,EAESyD,CAAO,EC3DN0b,GAAgBq7B,EAAUvc,GAIrB,MAAOpnB,EAAUpT,EAAU,CAAA,IAAO,CAUhD,MAAMzD,EAAO,MATD,MAAMi+B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAG7jC,CAAQ,GAAGpT,EAAQ,KAAO,IAAIA,EAAQ,IAAI,GAAG,QAAQ,UAAW,GAAG,EAAI,EAAE,GACjF,GAAGA,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAEsB,KAAM,EAE7B,MAAO,CAAE,IAAK8D,EAAI,MAAMvH,EAAK,IAAI,GAAG,CAAC,EAAG,cAAeA,EAAK,OAAS,CACtE,CAGF,ECnBM,SAASy8C,GAAW5xC,EAAQ2f,EAAQ,CACzC,MAAO,CACL,OAAQ0R,GAAa1R,CAAM,EAC3B,IAAKW,GAAUtgB,EAAQ2f,CAAM,EAC7B,OAAQ+R,GAAa/R,CAAM,EAC3B,IAAKY,GAAUvgB,EAAQ2f,CAAM,EAC7B,QAASrL,GAAcqL,CAAM,CAC9B,CACH,CCfO,MAAMkyB,GAAe,EACfC,GAAe,EACfC,GAAY,EACZC,GAAa,EACbC,GAAW,EACXC,GAAQ,EACRC,GAAa,EACbC,GAAc,ECadC,GAAYnhC,GAAU,CACjC,GAAIA,EAAM,OAAS2gC,GACjB,MAAO,CACL,KAAM,gBACN,KAAM3gC,EAAM,IACb,EAGH,GAAIA,EAAM,OAAS4gC,GACjB,MAAO,CACL,KAAMj9B,GAAiB3D,EAAM,EAAE,EAC/B,KAAM,gBACN,KAAMA,EAAM,KAEZ,YAAa,EAEb,YAAa,YACb,QAASA,EAAM,WAAa,IAAI,IAAI,CAAC,CAAE,GAAAohC,EAAI,MAAAC,MAAa,CAAE,GAAI19B,GAAiBy9B,CAAE,EAAG,WAAYC,EAAM,IAAIxuC,GAAQqE,GAAUrE,CAAI,CAAC,EAAG,UAAW,CAAA,CAAI,EAAC,EACpJ,WAAYmN,EAAM,WAAa,IAAI,IAAI,CAAC,CAAE,GAAAohC,EAAI,MAAAC,MAAa,CAAE,GAAI19B,GAAiBy9B,CAAE,EAAG,WAAYC,EAAM,IAAIxuC,GAAQqE,GAAUrE,CAAI,CAAC,EAAG,UAAW,CAAA,CAAI,EAAC,CAGxJ,EAGH,GAAImN,EAAM,OAAS6gC,GAAW,CAG5B,IAAI7iB,EAAO,CAET,GAAIhe,EAAM,IAAM2D,GAAiB3D,EAAM,EAAE,EAEzC,WAAY,CAAE,EACd,UAAW,CAAE,CACd,EAED,OAAIA,EAAM,WAAaA,EAAM,UAAU,SAErCge,EAAO,CACL,GAAIra,GAAiB3D,EAAM,UAAU,CAAC,EAAE,EAAE,EAC1C,WAAYA,EAAM,UAAU,CAAC,EAAE,MAAM,IAAInN,GAAQqE,GAAUrE,CAAI,CAAC,EAChE,UAAW,CAAE,CACd,GAGI,CACL,KAAM,aACN,KAAMmN,EAAM,KACZ,KAAAge,CACD,CACF,CAED,GAAIhe,EAAM,OAAS8gC,GACjB,MAAO,CACL,KAAM,cACN,KAAM9gC,EAAM,KACZ,MAAO,IAAI,MAAMA,EAAM,KAAK,CAC7B,EAGH,GAAIA,EAAM,OAAS+gC,GACjB,MAAO,CACL,KAAM,WACN,KAAM/gC,EAAM,KACZ,UAAWA,EAAM,UAAU,IAAI,CAAC,CAAE,GAAAohC,EAAI,MAAAC,CAAO,KAAM,CAAE,GAAI19B,GAAiBy9B,CAAE,EAAG,WAAYC,EAAM,IAAIxuC,GAAQqE,GAAUrE,CAAI,CAAC,EAAG,UAAW,CAAE,CAAA,EAAG,CAChJ,EAGH,GAAImN,EAAM,OAASghC,GACjB,MAAO,CACL,KAAM,QACN,KAAMhhC,EAAM,KACZ,MAAOlO,EAAqBkO,EAAM,MAAO,WAAW,CACrD,EAGH,GAAIA,EAAM,OAASihC,GAAY,CAC7B,MAAMrM,EAAQ50B,EAAM,UAAU,IAAI,CAAC,CAAE,GAAAohC,CAAI,IAAKz9B,GAAiBy9B,CAAE,CAAC,EAElE,GAAI,CAACxM,EAAM,OACT,MAAM,IAAI,MAAM,eAAe,EAGjC,MAAO,CACL,KAAM,cACN,KAAM50B,EAAM,KACZ,KAAM40B,EAAM,CAAC,CACd,CACF,CAED,GAAI50B,EAAM,OAASkhC,GACjB,MAAO,CACL,KAAM,eACN,KAAMlhC,EAAM,KACZ,KAAM2D,GAAiB3D,EAAM,EAAE,CAChC,EAGH,MAAM,IAAI,MAAM,wBAAwB,CAC1C,EChHashC,GAAiB7C,EAAUvc,GAAO,CAI7C,eAAiBjE,EAAU3f,EAAQ5W,EAAU,GAAI,CAC/C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrgC,EACL,GAAG5W,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAOie,CACT,CAAC,ECpBYsjB,GAAkB9C,EAAUvc,GAAO,CAI9C,eAAiBsf,EAAWl2C,EAAK5D,EAAU,GAAI,CAC7C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,gBAAiB,CAC1C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrzC,EAAI,SAAU,EACnB,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAOwhC,CACT,CAAC,ECnBYpyB,GAAYqvB,EAAUvc,GAAO,CAIxC,eAAiBhY,EAAKxM,EAAKhW,EAAU,GAAI,CACvC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,UAAW,CACpC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAE9B,IAAKjhC,aAAe,WAAaxN,EAAmBwN,CAAG,EAAIA,EAAI,SAAU,EACzE,GAAGhW,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAOkK,CACT,CAAC,ECrBYu3B,GAAgBhD,EAAUvc,GAAO,CAI5C,eAAiBwf,EAASxzB,EAAMxmB,EAAU,CAAE,UAAW,EAAK,EAAI,CAE9D,MAAMi6C,EAAS,MAAM,QAAQzzB,CAAI,EAAIA,EAAO,CAACA,CAAI,EAE3CllB,EAAM,MAAMk5B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKgD,EAAO,IAAIr2C,GAAOA,EAAI,SAAQ,CAAE,EACrC,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAO0hC,CACT,CAAC,ECrBYryB,GAAYovB,EAAUvc,GAAO,CAIxC,eAAiB5S,EAAK5R,EAAK1Z,EAAO0D,EAAU,CAAA,EAAI,CAE9C,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAEtDsB,EAAM,MAAMk5B,EAAI,KAAK,UAAW,CACpC,OAAArgB,EACA,aAAc88B,EAAkB,CAC9B,IAAKjhC,aAAe,WAAaxN,EAAmBwN,CAAG,EAAIA,EAAI,SAAU,EACzE,GAAGhW,CACX,CAAO,EACD,GACE,MAAMq3C,GAAiB,CAAC/6C,CAAK,EAAGsX,EAAY5T,EAAQ,OAAO,CAEnE,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAOsP,CACT,CAAC,EC7BYsyB,GAAcnD,EAAUvc,GAAO,CAI1C,eAAiBpf,EAAOxE,EAAQ5W,EAAU,GAAI,CAC5C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,YAAa,CACtC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKrgC,EAAO,SAAU,EACtB,GAAG5W,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiBsY,KAAShX,EAAI,SAC5B,MAAMm4C,GAASnhC,CAAK,CAEvB,CAED,OAAO8C,CACT,CAAC,ECnBM,SAAS++B,GAAWpzB,EAAQ,CACjC,MAAO,CACL,SAAU6yB,GAAe7yB,CAAM,EAC/B,UAAW8yB,GAAgB9yB,CAAM,EACjC,IAAKW,GAAUX,CAAM,EACrB,QAASgzB,GAAchzB,CAAM,EAC7B,IAAKY,GAAUZ,CAAM,EACrB,MAAOmzB,GAAYnzB,CAAM,CAC1B,CACH,CCXO,MAAMqzB,GAAarD,EAAUvc,GAAO,CAIzC,eAAe6f,EAAMr6C,EAAU,GAAI,CAOjC,OANY,MAAMw6B,EAAI,KAAK,YAAa,CACtC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEU,KAAM,CAClB,CACD,OAAOq6C,CACT,CAAC,ECdYC,GAAYvD,EAAUvc,GAAO,CAIxC,eAAe/e,EAAKzb,EAAU,GAAI,CAMhC,OALY,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GACU,KAAM,CAClB,CACD,OAAOyb,CACT,CAAC,ECbY8+B,GAAYxD,EAAUvc,GAAO,CAIxC,eAAeggB,EAAKx6C,EAAU,GAAI,CAOhC,OANY,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEU,KAAM,CAClB,CACD,OAAOw6C,CACT,CAAC,ECfM,SAASC,GAAY1zB,EAAQ,CAClC,MAAO,CACL,KAAMqzB,GAAWrzB,CAAM,EACvB,IAAKuzB,GAAUvzB,CAAM,EACrB,IAAKwzB,GAAUxzB,CAAM,CACtB,CACH,CCLO,MAAMqa,GAAc2V,EAAUvc,GAAO,CAI1C,eAAekgB,EAAOvxC,EAAM7J,EAAMU,EAAU,CAAA,EAAI,CAW9C,MAVY,MAAMw6B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,KAAA7J,EACA,GAAGU,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CACD,OAAO06C,CACT,CAAC,ECjBY5b,GAAWiY,EAAUvc,GAAO,CAIvC,eAAemgB,EAAI3hB,EAASiG,EAAaj/B,EAAU,CAAA,EAAI,CAErD,MAAM46C,EAAY,MAAM,QAAQ5hB,CAAO,EAAIA,EAAU,CAACA,CAAO,EAW7D,MATY,MAAMwB,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK2D,EAAU,OAAO3b,CAAW,EAAE,IAAIvlC,GAAOoK,EAAI,MAAMpK,CAAG,EAAI,SAASA,CAAG,GAAKA,CAAG,EACnF,GAAGsG,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CACD,OAAO26C,CACT,CAAC,ECpBYhZ,GAAcoV,EAAUvc,GAAO,CAI1C,eAAe1M,EAAO3kB,EAAMnJ,EAAU,GAAI,CACxC,GAAI,CAACmJ,GAAQ,OAAOA,GAAS,SAC3B,MAAM,IAAI,MAAM,kCAAkC,EAWpD,MAAM5M,EAAO,MARD,MAAMi+B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,OAAO8D,EAAI,MAAMvH,EAAK,GAAG,CAC1B,CACD,OAAOuxB,CACT,CAAC,EC1BM,SAAS+sB,GAA2Bh8B,EAAO,CAChD,MAAMpJ,EAAOyiC,GAAcr5B,CAAK,EAEhC,OAAI,OAAO,UAAU,eAAe,KAAKpJ,EAAM,MAAM,IACnDA,EAAK,KAAO,SAASA,EAAK,KAAM,CAAC,GAG/B,OAAO,UAAU,eAAe,KAAKA,EAAM,OAAO,IACpDA,EAAK,MAAQ,CACX,KAAMA,EAAK,MACX,MAAOA,EAAK,YAAc,CAC3B,EAED,OAAOA,EAAK,YAGPA,CACT,CCbO,MAAM2H,GAAW25B,EAAUvc,GAAO,CAIvC,eAAiBnd,EAAIlU,EAAMnJ,EAAU,GAAI,CACvC,GAAI,CAACmJ,EACH,MAAM,IAAI,MAAM,+BAA+B,EAGjD,MAAM7H,EAAM,MAAMk5B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKnzC,EAAI,MAAMqF,CAAI,EAAI,SAASA,CAAI,GAAKA,EAEzC,KAAM,GACN,GAAGnJ,EACH,OAAQ,EAChB,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiB0F,KAAUpE,EAAI,SAE7B,GAAI,YAAaoE,EACf,UAAWmZ,KAASnZ,EAAO,SAAW,CAAA,EACpC,MAAMyxC,GAAgB0D,GAA0Bh8B,CAAK,CAAC,OAGxD,MAAMs4B,GAAgB0D,GAA0Bn1C,CAAM,CAAC,CAG5D,CACD,OAAO2X,CACT,CAAC,EAKD,SAAS85B,GAAiBt4B,EAAO,CAC/B,OAAIA,EAAM,OACRA,EAAM,IAAM/a,EAAI,MAAM+a,EAAM,IAAI,GAGlC,OAAOA,EAAM,KAEbA,EAAM,KAAOA,EAAM,OAAS,EAAI,YAAc,OAEvCA,CACT,CCjDO,MAAM0f,GAAcwY,EAAUvc,GAAO,CAI1C,eAAesgB,EAAO3xC,EAAMnJ,EAAU,GAAI,CAUxC,MATY,MAAMw6B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CACD,OAAO86C,CACT,CAAC,ECjBYjZ,GAAWkV,EAAUvc,GAAO,CAIvC,eAAeugB,EAAI/hB,EAASiG,EAAaj/B,EAAU,CAAA,EAAI,CAChD,MAAM,QAAQg5B,CAAO,IACxBA,EAAU,CAACA,CAAO,GAWpB,MARY,MAAMwB,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKje,EAAQ,OAAOiG,CAAW,EAC/B,GAAGj/B,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACS,KAAM,CACjB,CAED,OAAO+6C,CACT,CAAC,ECnBY5Y,GAAa4U,EAAUvc,GAAO,CAIzC,eAAiBt5B,EAAMiI,EAAMnJ,EAAU,GAAI,CACzC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,MAAOnJ,EAAQ,OACf,GAAGA,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,MAAQg7C,GAAW15C,EAAI,IAAI,CAC5B,CACD,OAAOJ,CACT,CAAC,ECnBYuc,GAAWs5B,EAAUvc,GAAO,CAIvC,eAAe7c,EAAIxU,EAAMnJ,EAAU,GAAI,CACrC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK4Y,EAAO,MAAMtX,EAAI,KAAM,EAG7B,GAAIsX,IAAS,GAAI,CAEf,MAAMtC,EAAQ,IAAIvF,GAAK,UAAUzP,CAAG,EACpC,MAAAgV,EAAM,QAAUsC,EACVtC,CACP,CACF,CACD,OAAOqH,CACT,CAAC,ECxBY8I,GAAaswB,EAAUvc,GAAO,CAIzC,eAAe9T,EAAMvd,EAAMnJ,EAAU,GAAI,CASvC,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,OAAAzD,EAAK,aAAeA,EAAK,cAAgB,GAClC46C,GAAgB0D,GAA0Bt+C,CAAI,CAAC,CACvD,CACD,OAAOmqB,CACT,CAAC,EAKD,SAASywB,GAAiBt4B,EAAO,CAC/B,OAAAA,EAAM,IAAM/a,EAAI,MAAM+a,EAAM,IAAI,EAChC,OAAOA,EAAM,KACNA,CACT,CC9BO,MAAMkjB,GAAcgV,EAAUvc,GAAO,CAI1C,eAAeygB,EAAO9xC,EAAMnJ,EAAU,GAAI,CAUxC,MATY,MAAMw6B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CACD,OAAOi7C,CACT,CAAC,ECbY1Y,GAAcwU,EAAUvc,GAAO,CAI1C,eAAekI,EAAOv5B,EAAM/N,EAAO4E,EAAU,CAAA,EAAI,CAE/C,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAoB5D,MAlBY,MAAMw6B,EAAI,KAAK,cAAe,CACxC,OAAArgB,EACA,aAAc88B,EAAkB,CAC9B,IAAK9tC,EACL,eAAgB,GAChB,MAAOnJ,EAAQ,OACf,GAAGA,CACX,CAAO,EACD,GACE,MAAMq3C,GAAiB,CAAC,CACtB,QAASj8C,EACT,KAAM,MACN,KAAM47C,GAAah3C,EAAQ,IAAI,EAC/B,MAAOT,GAAWS,EAAQ,KAAK,CACzC,CAAS,EAAG4T,EAAY5T,EAAQ,OAAO,CAEvC,CAAK,GAES,KAAM,CACjB,CACD,OAAO0iC,CACT,CAAC,EC3BM,SAAS2B,GAAatd,EAAQ,CACnC,MAAO,CACL,MAAOqa,GAAYra,CAAM,EACzB,GAAI+X,GAAS/X,CAAM,EACnB,MAAO4a,GAAY5a,CAAM,EACzB,GAAI3J,GAAS2J,CAAM,EACnB,MAAOwX,GAAYxX,CAAM,EACzB,GAAI8a,GAAS9a,CAAM,EACnB,KAAMob,GAAWpb,CAAM,EACvB,GAAItJ,GAASsJ,CAAM,EACnB,KAAMN,GAAWM,CAAM,EACvB,MAAOgb,GAAYhb,CAAM,EACzB,MAAOwb,GAAYxb,CAAM,CAC1B,CACH,CCrBO,MAAM0R,GAAese,EAAUvc,GAIlB,MAAO7iC,EAAMgtC,EAAU3kC,EAAU,CAAA,IAAO,CACxD,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,CAClE,CAGF,ECRYw1B,GAAYiS,EAAUvc,GAAO,CAIxC,eAAe0gB,EAAKvjD,EAAMqI,EAAS,CACjC,MAAMga,EAAOha,GAAW,CAAE,KAAM,SAAW,EAUrCzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,UAAW,CACpC,OAAQxgB,EAAK,OACb,aAAci9B,EAAkB,CAC9B,IAAKt/C,EACL,GAAGqiB,CACX,CAAO,EACD,QAASA,EAAK,OACpB,CAAK,GACsB,KAAM,EAG7B,OAAOk+B,GAAc37C,CAAI,CAC1B,CACD,OAAO2+C,CACT,CAAC,ECrBYpiB,GAAeie,EAAUvc,GAAO,CAI3C,eAAepa,EAAWzoB,EAAMuoB,EAAKykB,EAAU3kC,EAAU,CAAA,EAAI,CAW3D,MAAMzD,EAAO,MAVD,MAAMi+B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKt/C,EACL,IAAAuoB,EACA,SAAAykB,EACA,GAAG3kC,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAG7B,OAAOk4C,GAAc37C,CAAI,CAC1B,CACD,OAAO6jB,CACT,CAAC,ECtBY2kB,GAAagS,EAAUvc,GAIrB,MAAO7iC,EAAMqI,EAAU,CAAA,IAAO,CACzC,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,CAClE,CAGF,ECRY8X,GAAa2vB,EAAUvc,GAAO,CAIzC,eAAerU,EAAMnmB,EAAU,GAAI,CAQjC,QAFa,MALD,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,GAEhB,MAAQ,CAAE,GAAE,IAAyB2xC,GAAMuG,GAAcvG,CAAC,CAAC,CACzE,CACD,OAAOxrB,CACT,CAAC,ECfY6e,GAAe+R,EAAUvc,GAAO,CAI3C,eAAe2gB,EAAQ7a,EAASF,EAASpgC,EAAU,CAAA,EAAI,CACrD,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,CACH3W,EACAF,CACD,EACD,GAAGpgC,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAGD,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAO65C,CACT,CAAC,ECrBY19B,GAAWs5B,EAAUvc,GAAO,CAIvC,eAAe7c,EAAIhmB,EAAMqI,EAAU,GAAI,CASrC,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKt/C,EACL,GAAGqI,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAG7B,OAAOk4C,GAAc37C,EAAK,KAAK,CAAC,CAAC,CAClC,CACD,OAAOohB,CACT,CAAC,ECjBM,SAASy9B,GAAWr0B,EAAQ,CACjC,MAAO,CACL,OAAQ0R,GAAa1R,CAAM,EAC3B,IAAK+d,GAAU/d,CAAM,EACrB,OAAQ+R,GAAa/R,CAAM,EAC3B,KAAMge,GAAWhe,CAAM,EACvB,KAAMK,GAAWL,CAAM,EACvB,OAAQie,GAAaje,CAAM,EAC3B,GAAItJ,GAASsJ,CAAM,CACpB,CACH,CCZO,MAAMs0B,GAActE,EAAUvc,GAAO,CAI1C,eAAe8gB,EAAOC,EAAWD,EAAOt7C,EAAU,CAAA,EAAI,CACpD,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,YAAa,CACtC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,CACHsE,EACAD,CACD,EACD,GAAGt7C,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAOg6C,CACT,CAAC,ECrBYl+B,GAAW25B,EAAUvc,GAAO,CAIvC,eAAend,EAAIrd,EAAU,GAAI,CAQ/B,OADa,MAND,MAAMw6B,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEsB,KAAM,GACjB,OACb,CACD,OAAOqd,CACT,CAAC,ECfYm+B,GAAazE,EAAUvc,GAAO,CAIzC,eAAiBihB,EAAMz7C,EAAU,GAAI,CAOnC,OANY,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEW,OAAQ,CACrB,CACD,OAAOy7C,CACT,CAAC,ECfM,SAASC,GAAW30B,EAAQ,CACjC,MAAO,CACL,MAAOs0B,GAAYt0B,CAAM,EACzB,GAAI3J,GAAS2J,CAAM,EACnB,KAAMy0B,GAAWz0B,CAAM,CACxB,CACH,CCJO,MAAMlE,GAAgBk0B,EAAUvc,GAAO,CAI5C,eAAerX,EAASha,EAAMnJ,EAAU,GAAI,CAC1C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAG9tC,CAAI,GACZ,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAGD,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAO6hB,CACT,CAAC,ECnBYzH,GAAgBq7B,EAAUvc,GAAO,CAI5C,eAAiBjlB,EAASpM,EAAMnJ,EAAU,GAAI,CAC5C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,OAAQ,GACR,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,gBAAiB0F,KAAUpE,EAAI,SAC7B,MAAMoE,EAAO,IAEhB,CACD,OAAO6P,CACT,CAAC,ECnBYsO,GAAekzB,EAAUvc,GAAO,CAI3C,eAAezW,EAAQpsB,EAAMqI,EAAU,GAAI,CACzC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,qBAAsB,CAC/C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKt/C,EACL,GAAGqI,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAGD,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAOyiB,CACT,CAAC,EClBYC,GAAc+yB,EAAUvc,GAAO,CAI1C,eAAe3tB,EAAO7M,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,oBAAqB,CAC9C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAGD,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAOuL,CACT,CAAC,EChBYoX,GAAa8yB,EAAUvc,GAAO,CAIzC,eAAetW,EAAMlkB,EAAU,GAAI,CAQjC,OAFa,MALD,MAAMw6B,EAAI,KAAK,mBAAoB,CAC7C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,GAEjB,SAAW,CAAE,CAC1B,CACD,OAAOkkB,CACT,CAAC,EChBM,SAASy3B,GAAc50B,EAAQ,CACpC,MAAO,CACL,OAAQlD,GAAakD,CAAM,EAC3B,MAAO/C,GAAY+C,CAAM,EACzB,KAAM9C,GAAW8C,CAAM,CACxB,CACH,CCNO,SAAS60B,GAAY70B,EAAQ,CAClC,MAAO,CACL,QAASlE,GAAckE,CAAM,EAC7B,QAASrL,GAAcqL,CAAM,EAC7B,OAAQ40B,GAAa50B,CAAM,CAC5B,CACH,CCJO,MAAMme,GAAa6R,EAAUvc,GAAO,CAIzC,eAAej+B,EAAMqH,EAAK5D,EAAU,GAAI,CAStC,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAGrzC,aAAe,WAAaE,EAAI,OAAOF,CAAG,EAAIA,CAAG,GACzD,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,YAAa,EAEpC,OAAO,IAAI,WAAWzD,EAAM,EAAGA,EAAK,UAAU,CAC/C,CACD,OAAOA,CACT,CAAC,ECjBYmrB,GAAYqvB,EAAUvc,GAAO,CAIxC,eAAehY,EAAK5e,EAAK5D,EAAU,GAAI,CAUrC,MAAMzD,EAAO,MATD,MAAMi+B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAGrzC,aAAe,WAAaE,EAAI,OAAOF,CAAG,EAAIA,CAAG,GACzD,aAAc,SACd,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,MAAO,CACL,KAAMoK,EAAqB7N,EAAK,KAAM,WAAW,EACjD,OAAQA,EAAK,OAAS,CAAA,GAAI,IAAwB+G,IAAU,CAC1D,KAAMA,EAAK,KACX,KAAMQ,EAAI,MAAMR,EAAK,IAAI,EACzB,MAAOA,EAAK,IACpB,EAAQ,CACH,CACF,CACD,OAAOkf,CACT,CAAC,EC3BY6iB,GAAc0R,EAAUvc,GAAO,CAI1C,eAAe7U,EAAO/hB,EAAK5D,EAAU,GAAI,CAWvC,QAFa,MARD,MAAMw6B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAGrzC,aAAe,WAAaE,EAAI,OAAOF,CAAG,EAAIA,CAAG,GACzD,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,GAEhB,OAAS,CAAE,GAAE,IAAwB3B,IAAO,CACvD,KAAMA,EAAE,KACR,MAAOA,EAAE,KACT,KAAMyF,EAAI,MAAMzF,EAAE,IAAI,CAC5B,EAAM,CACH,CACD,OAAOsnB,CACT,CAAC,ECtBY6f,GAAYuR,EAAUvc,GAAO,CAIxC,eAAeqhB,EAAW77C,EAAU,GAAI,CACtC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKj3C,EAAQ,SACb,GAAGA,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,KAAA87C,CAAI,EAAK,MAAMx6C,EAAI,KAAM,EAEjC,OAAOwC,EAAI,MAAMg4C,CAAI,CACtB,CACD,OAAOD,CACT,CAAC,EChBYl0B,GAAY,CAACvgB,EAAQpH,IACrB+2C,EAAWvc,GAAQ,CAC5B,MAAMuhB,EAASC,GAAa50C,EAAQpH,CAAO,EAK3C,eAAe4nB,EAAKjL,EAAK3c,EAAU,GAAI,CACrC,OAAO+7C,EAAOp/B,EAAK,CACjB,GAAG3c,EACH,WAAY,SACZ,QAAS,WACT,QAAS,CACjB,CAAO,CACF,CACD,OAAO4nB,CACX,CAAG,EAES5nB,CAAO,ECrBNymB,GAAaswB,EAAUvc,GAAO,CAIzC,eAAe9T,EAAM9iB,EAAK5D,EAAU,GAAI,CAUtC,MAAM0V,EAAS,MATH,MAAM8kB,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAGrzC,CAAG,GACX,GAAG5D,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAEwB,KAAM,EAE/B,MAAO,CACL,GAAG0V,EACH,KAAM5R,EAAI,MAAM4R,EAAO,IAAI,CAC5B,CACF,CACD,OAAOgR,CACT,CAAC,ECtBYkf,GAAgBmR,EAAUvc,GAAO,CAI5C,eAAegD,EAAS55B,EAAKq4C,EAAOj8C,EAAU,CAAA,EAAI,CAChD,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,wBAAyB,CAClD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,CACH,GAAGrzC,CAAG,GAENq4C,EAAM,MAAQA,EAAM,MAAQ,IAE3BA,EAAM,MAAQA,EAAM,KAAO,IAAI,SAAQ,GAAM,IAC/C,EACD,GAAGj8C,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,KAAA87C,CAAI,EAAK,MAAMx6C,EAAI,KAAM,EAEjC,OAAOwC,EAAI,MAAMg4C,CAAI,CACtB,CAED,OAAOte,CACT,CAAC,ECxBYqI,GAAmBkR,EAAUvc,GAAO,CAI/C,eAAesL,EAAYliC,EAAKrH,EAAMyD,EAAU,CAAA,EAAI,CAElD,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAEtDsB,EAAM,MAAMk5B,EAAI,KAAK,2BAA4B,CACrD,OAAArgB,EACA,aAAc88B,EAAkB,CAC9B,IAAK,GAAGrzC,CAAG,GACX,GAAG5D,CACX,CAAO,EACD,GACE,MAAMq3C,GAAiB,CAAC96C,CAAI,EAAGqX,EAAY5T,EAAQ,OAAO,CAElE,CAAK,EAEK,CAAE,KAAA87C,CAAI,EAAK,MAAMx6C,EAAI,KAAM,EAEjC,OAAOwC,EAAI,MAAMg4C,CAAI,CACtB,CACD,OAAOhW,CACT,CAAC,EC3BYE,GAAe+Q,EAAUvc,GAAO,CAI3C,eAAeyL,EAAQriC,EAAKq4C,EAAOj8C,EAAU,CAAA,EAAI,CAC/C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,uBAAwB,CACjD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,CACH,GAAGrzC,CAAG,GAENq4C,EAAM,MAAQA,EAAM,MAAQ,IAC7B,EACD,GAAGj8C,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,KAAA87C,CAAI,EAAK,MAAMx6C,EAAI,KAAM,EAEjC,OAAOwC,EAAI,MAAMg4C,CAAI,CACtB,CACD,OAAO7V,CACT,CAAC,ECrBYC,GAAgB6Q,EAAUvc,GAAO,CAI5C,eAAe2L,EAASviC,EAAKrH,EAAMyD,EAAU,CAAA,EAAI,CAE/C,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAEtDsB,EAAM,MAAMk5B,EAAI,KAAK,wBAAyB,CAClD,OAAArgB,EACA,aAAc88B,EAAkB,CAC9B,IAAK,CACH,GAAGrzC,CAAG,EACP,EACD,GAAG5D,CACX,CAAO,EACD,GACE,MAAMq3C,GAAiB,CAAC96C,CAAI,EAAGqX,EAAY5T,EAAQ,OAAO,CAElE,CAAK,EAEK,CAAE,KAAA87C,CAAI,EAAK,MAAMx6C,EAAI,KAAM,EAEjC,OAAOwC,EAAI,MAAMg4C,CAAI,CACtB,CACD,OAAO3V,CACT,CAAC,EC9BM,SAAS+V,GAAan1B,EAAQ,CACnC,MAAO,CACL,QAAS6e,GAAc7e,CAAM,EAC7B,WAAY8e,GAAiB9e,CAAM,EACnC,OAAQif,GAAajf,CAAM,EAC3B,QAASmf,GAAcnf,CAAM,CAC9B,CACH,CCHO,SAASo1B,GAAc/0C,EAAQ2f,EAAQ,CAC5C,MAAO,CACL,KAAMme,GAAWne,CAAM,EACvB,IAAKW,GAAUX,CAAM,EACrB,MAAOse,GAAYte,CAAM,EACzB,IAAKye,GAAUze,CAAM,EACrB,IAAKY,GAAUvgB,EAAQ2f,CAAM,EAC7B,KAAMN,GAAWM,CAAM,EACvB,MAAOm1B,GAAYn1B,CAAM,CAC1B,CACH,CCZO,MAAMjK,GAAei6B,EAAUvc,GAAO,CAI3C,eAAiBre,EAAQ7jB,EAAQ0H,EAAU,GAAI,CAC7C,eAAiB,CAAE,KAAAmJ,EAAM,UAAA6T,EAAW,SAAAC,CAAQ,IAAMV,GAAejkB,CAAM,EAAG,CACxE,MAAMgJ,EAAM,MAAMk5B,EAAI,KAAK,UAAW,CACpC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,IAAKmJ,EACL,UAAA6T,EACA,SAAUC,EAAW,KAAK,UAAUA,CAAQ,EAAI,OAChD,OAAQ,EAClB,CAAS,EACD,QAASjd,EAAQ,OACzB,CAAO,EAED,gBAAiB4c,KAAOtb,EAAI,SAAU,CACpC,GAAIsb,EAAI,KAAM,CACZ,UAAWhZ,KAAOgZ,EAAI,KACpB,MAAM9Y,EAAI,MAAMF,CAAG,EAErB,QACD,CAED,MAAME,EAAI,MAAM8Y,CAAG,CACpB,CACF,CACF,CACD,OAAOT,CACT,CAAC,EC7BM,SAASD,GAAW6K,EAAQ,CACjC,MAAMxN,EAAMuD,GAAaiK,CAAM,EAE/B,OAAOgwB,EAAU,IAAM,CAIrB,eAAejwB,EAAK3d,EAAMnJ,EAAU,GAAI,CAEtC,OAAOoc,GAAK7C,EAAI,CAAC,CACf,KAAApQ,EACA,GAAGnJ,CACX,CAAO,EAAGA,CAAO,CAAC,CACb,CACD,OAAO8mB,CACR,CAAA,EAAEC,CAAM,CACX,CCdA,SAASvK,GAAOvc,EAAM2D,EAAKqZ,EAAU,CAEnC,MAAML,EAAM,CACV,KAAA3c,EACA,IAAK6D,EAAI,MAAMF,CAAG,CACnB,EAED,OAAIqZ,IACFL,EAAI,SAAWK,GAGVL,CACT,CAEO,MAAMQ,GAAW25B,EAAUvc,GAAO,CAIvC,eAAiBnd,EAAIrd,EAAU,GAAI,CAEjC,IAAIykB,EAAQ,CAAE,EAEVzkB,EAAQ,QACVykB,EAAQ,MAAM,QAAQzkB,EAAQ,KAAK,EAAIA,EAAQ,MAAQ,CAACA,EAAQ,KAAK,GAGvE,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,IAAKykB,EAAM,IAAItb,GAAQ,GAAGA,CAAI,EAAE,EAChC,OAAQ,EAChB,CAAO,EACD,QAASnJ,EAAQ,OACvB,CAAK,EAED,gBAAiB4c,KAAOtb,EAAI,SAAU,CACpC,GAAIsb,EAAI,KAAM,CACZ,UAAWhZ,KAAO,OAAO,KAAKgZ,EAAI,IAAI,EACpC,MAAMJ,GAAMI,EAAI,KAAKhZ,CAAG,EAAE,KAAMA,EAAKgZ,EAAI,KAAKhZ,CAAG,EAAE,QAAQ,EAE7D,MACD,CAED,MAAM4Y,GAAMI,EAAI,KAAMA,EAAI,IAAKA,EAAI,QAAQ,CAC5C,CACF,CACD,OAAOS,CACT,CAAC,ECpDYO,GAAcm5B,EAAUvc,GAAO,CAI1C,eAAiB9c,EAAOplB,EAAQ0H,EAAU,GAAI,CAC5C,eAAiB,CAAE,KAAAmJ,EAAM,UAAA6T,CAAW,IAAIT,GAAejkB,CAAM,EAAG,CAC9D,MAAM2hB,EAAe,IAAI,gBAAgBja,EAAQ,YAAY,EAC7Dia,EAAa,OAAO,MAAO,GAAG9Q,CAAI,EAAE,EAEhC6T,GAAa,MAAM/C,EAAa,IAAI,YAAa,OAAO+C,CAAS,CAAC,EAEtE,MAAM1b,EAAM,MAAMk5B,EAAI,KAAK,SAAU,CACnC,OAAQx6B,EAAQ,OAChB,QAASA,EAAQ,QACjB,aAAci3C,EAAkB,CAC9B,GAAGj3C,EACH,IAAK,GAAGmJ,CAAI,GACZ,UAAA6T,CACV,CAAS,CACT,CAAO,EAED,gBAAiBJ,KAAOtb,EAAI,SAAU,CACpC,GAAIsb,EAAI,KAAM,CACZ,MAAQA,EAAI,KAAK,IAA2BhZ,GAAQE,EAAI,MAAMF,CAAG,CAAC,EAClE,QACD,CACD,MAAME,EAAI,MAAM8Y,CAAG,CACpB,CACF,CACF,CACD,OAAOc,CACT,CAAC,EC7BYD,GAAYsJ,GAAW,CAClC,MAAMxN,EAAMqE,GAAYmJ,CAAM,EAE9B,OAAOgwB,EAAU,IAAM,CAIrB,eAAep5B,EAAIxU,EAAMnJ,EAAU,GAAI,CAErC,OAAOoc,GAAK7C,EAAI,CAAC,CACf,KAAApQ,EACA,GAAGnJ,CACX,CAAO,EAAGA,CAAO,CAAC,CACb,CACD,OAAO2d,CACR,CAAA,EAAEoJ,CAAM,CACX,ECVaq1B,GAAY,CAAC,CAAE,KAAMzkD,EAAM,OAAQ6e,EAAQ,IAAK5S,MACpD,CACL,IAAKE,EAAI,MAAMF,CAAG,EAClB,KAAAjM,EACA,OAAA6e,CACD,GAOU6lC,GAAiBjmC,GAAY,CACxC,GAAI,OAAOA,GAAY,UAAYA,IAAY,GAC7C,OAAOA,EAEP,MAAM,IAAI,UAAU,6BAA6B,CAErD,EAMa9R,GAAaV,GAAQ,CAChC,GAAIE,EAAI,MAAMF,CAAG,EACf,OAAOA,EAAI,SAAU,EAErB,MAAM,IAAI,UAAU,oCAAoC,OAAOA,CAAG,EAAE,CAExE,EAMa04C,GAAc,CAAC,CAAE,QAAAlmC,EAAS,IAAAxS,EAAK,KAAAjM,EAAM,OAAA6e,EAAQ,IAAA+C,KAAU,CAClE,MAAM6B,EAAQ67B,EAAkB,CAC9B,QAASoF,GAAcjmC,CAAO,EAC9B,KAAAze,EACA,MAAO4hB,EAAM,GAAO,MACxB,CAAG,EAED,GAAI3V,EACF,UAAWtH,KAASsH,EAClBwX,EAAM,OAAO,MAAO9W,GAAUhI,CAAK,CAAC,EAIxC,GAAIka,EACF,UAAWla,KAASka,EAClB4E,EAAM,OAAO,SAAU9e,CAAK,EAIhC,OAAO8e,CACT,EAMamhC,GAAkB,CAAC,CAAE,IAAA34C,EAAK,QAAAwS,EAAS,WAAAomC,EAAY,KAAA7kD,EAAM,QAAA8kD,KAAc,CAC9E,MAAMhE,EAASxB,EAAkB,CAC/B,IAAK3yC,GAAUV,CAAG,EAClB,QAASy4C,GAAcjmC,CAAO,EAC9B,KAAAze,EACA,WAAY6kD,EAAa,GAAO,MACpC,CAAG,EAED,GAAIC,EACF,UAAWC,KAAUD,EACnBhE,EAAO,OAAO,SAAUiE,EAAO,SAAQ,CAAE,EAI7C,OAAOjE,CACT,ECrFO,SAASv8B,GAAWygC,EAAQ,CAIjC,eAAe71B,EAAKljB,EAAK,CAAE,QAAA8P,EAAS,OAAAyG,EAAQ,QAAA/B,EAAS,GAAGgD,GAAS,CAC/D,MAAM3D,EAAW,MAAMklC,EAAO,KAAK,iBAAkB,CACnD,QAAAjpC,EACA,OAAAyG,EACA,QAAA/B,EACA,aAAcmkC,GAAgB,CAAE,IAAA34C,EAAK,GAAGwX,CAAK,CAAE,CACrD,CAAK,EAED,OAAOghC,GAAU,MAAM3kC,EAAS,MAAM,CACvC,CAED,OAAOqP,CACT,CChBO,SAAS1J,GAAUu/B,EAAQ,CAIhC,eAAiBt/B,EAAI,CAAE,QAAA3J,EAAS,OAAAyG,EAAQ,QAAA/B,EAAS,GAAGgD,GAAS,CAC3D,MAAM3D,EAAW,MAAMklC,EAAO,KAAK,gBAAiB,CAClD,QAAAjpC,EACA,OAAAyG,EACA,QAAA/B,EACA,aAAckkC,GAAYlhC,CAAK,CACrC,CAAK,EAED,gBAAiBwB,KAAOnF,EAAS,SAC/B,MAAM2kC,GAAUx/B,CAAG,CAEtB,CAED,OAAOS,CACT,CClBO,SAASI,GAAUk/B,EAAQ,CAIhC,eAAeh/B,EAAI,CAAE,QAAAjK,EAAS,OAAAyG,EAAQ,QAAA/B,EAAS,GAAGgD,GAAS,CACzD,MAAMuhC,EAAO,KAAK,gBAAiB,CACjC,QAAAjpC,EACA,OAAAyG,EACA,QAAA/B,EACA,aAAckkC,GAAY,CACxB,GAAGlhC,EACH,IAAK,EACb,CAAO,CACP,CAAK,CACF,CAED,OAAOuC,CACT,CCjBO,SAASC,GAAa++B,EAAQ,CAInC,eAAej/B,EAAO,CAAE,QAAAhK,EAAS,OAAAyG,EAAQ,QAAA/B,EAAS,GAAGgD,GAAS,CAC5D,MAAMuhC,EAAO,KAAK,gBAAiB,CACjC,QAAAjpC,EACA,OAAAyG,EACA,QAAA/B,EACA,aAAckkC,GAAY,CACxB,GAAGlhC,EACH,IAAK,EACb,CAAO,CACP,CAAK,CACF,CAED,OAAOsC,CACT,CCpBO,SAASk/B,GAAgB1kC,EAAK,CACnC,MAAM2kC,EAAO,OAAO3kC,CAAG,EACvB,GAAI2kC,IAAS,YACX,MAAM,MAAM,sBAAsB,EAIpC,OAAOA,EAAKA,EAAK,OAAS,CAAC,IAAM,IAAMA,EAAK,MAAM,EAAG,EAAE,EAAIA,CAC7D,CAMO,SAASC,GAAqBx1C,EAAM,CACzC,MAAO,CACL,QAASA,EAAK,QACd,SAAU,IAAI,IAAIA,EAAK,WAAW,EAClC,GAAIA,EAAK,MAAQ,CAAE,KAAMy1C,GAAWz1C,EAAK,IAAI,EAC9C,CACH,CAMO,SAASy1C,GAAYz1C,EAAM,CAChC,OAAQA,EAAK,OAAM,CACjB,IAAK,QAAS,CACZ,KAAM,CAAE,QAAA01C,EAAS,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,CAAM,EAAK71C,EAAK,SACjD,MAAO,CACL,OAAQ,QACR,SAAU,CACR,OAAQ41C,EACR,QAASF,EACT,OAAQC,EACR,OAAQE,CACT,CACF,CACF,CACD,IAAK,UACH,MAAO,CAAE,OAAQ,SAAW,EAE9B,QACE,MAAO,CAAE,OAAQ71C,EAAK,MAAQ,CAEjC,CACH,CC3CO,SAAS4U,GAAWygC,EAAQ,CAIjC,eAAe71B,EAAKnvB,EAAMqI,EAAS,CACjC,KAAM,CAAE,SAAAo9C,EAAU,IAAApnC,EAAK,QAAAoC,EAAS,QAAA1E,EAAS,OAAAyG,CAAM,EAAKna,EAEpD,MAAM28C,EAAO,KAAK,yBAA0B,CAC1C,QAAAjpC,EACA,OAAAyG,EACA,aAAc88B,EAAkB,CAC9B,IAAK,CAACt/C,EAAMilD,GAAeQ,CAAQ,EAAGpnC,CAAG,CACjD,CAAO,EACD,QAAAoC,CACN,CAAK,CACF,CAED,OAAO0O,CACT,CClBO,SAAS1J,GAAUu/B,EAAQ,CAIhC,eAAet/B,EAAIrd,EAAU,GAAI,CAE/B,KAAM,CAAE,KAAA0mB,EAAM,QAAAtO,EAAS,QAAA1E,EAAS,OAAAyG,CAAQ,EAAGna,EAErCyX,EAAW,MAAMklC,EAAO,KAAK,wBAAyB,CAC1D,QAAAjpC,EACA,OAAAyG,EACA,QAAA/B,EACA,aAAcsO,IAAS,GAAOuwB,EAAkB,CAAE,KAAAvwB,CAAM,CAAA,EAAI,MAClE,CAAK,EAGK,CAAE,eAAA22B,CAAc,EAAK,MAAM5lC,EAAS,KAAM,EAEhD,OAAO4lC,EAAe,IAAIP,EAAmB,CAC9C,CAED,OAAOz/B,CACT,CCvBO,SAASI,GAAUk/B,EAAQ,CAIhC,eAAeh/B,EAAIhmB,EAAMqI,EAAU,GAAI,CACrC,MAAM28C,EAAO,KAAK,wBAAyB,CACzC,OAAQ38C,EAAQ,OAChB,QAASA,EAAQ,QACjB,aAAci3C,EAAkB,CAC9B,IAAKt/C,CACb,CAAO,CACP,CAAK,CACF,CAED,OAAOgmB,CACT,CCjBO,SAAS2/B,GAAev2B,EAAQ,CACrC,MAAM41B,EAAS,IAAI9F,GAAO9vB,CAAM,EAEhC,MAAO,CACL,IAAK7K,GAAUygC,CAAM,EACrB,GAAIv/B,GAASu/B,CAAM,EACnB,GAAIl/B,GAASk/B,CAAM,CACpB,CACH,CCNO,SAASY,GAAcx2B,EAAQ,CACpC,MAAM41B,EAAS,IAAI9F,GAAO9vB,CAAM,EAEhC,MAAO,CACL,IAAK7K,GAAUygC,CAAM,EACrB,GAAIv/B,GAASu/B,CAAM,EACnB,GAAIl/B,GAASk/B,CAAM,EACnB,MAAO/+B,GAAY++B,CAAM,EACzB,QAASW,GAAcv2B,CAAM,CAC9B,CACH,CCVO,SAASy2B,GAAWz2B,EAAQ,CACjC,MAAO,CACL,OAAQjK,GAAaiK,CAAM,EAC3B,IAAK7K,GAAU6K,CAAM,EACrB,GAAI3J,GAAS2J,CAAM,EACnB,MAAOnJ,GAAYmJ,CAAM,EACzB,GAAItJ,GAASsJ,CAAM,EACnB,OAAQw2B,GAAax2B,CAAM,CAC5B,CACH,CCJA,MAAM02B,GAAsBC,GACtB,MAAM,QAAQA,CAAO,EAChBA,EAAQ,IAAIC,EAAS,EAEvBD,EAOHC,GAAY1yC,GAAMzC,EAAmBo1C,GAAW3yC,CAAE,CAAC,EAMnD2yC,GAAa3yC,GAAMzN,GAAU,OAAOyN,CAAE,EAMtC4yC,GAAc5yC,GAAM,OAAO,KAAKzC,EAAmBhL,GAAU,OAAOyN,CAAE,EAAG,QAAQ,CAAC,EAAE,EAMpF6yC,GAAmB/iD,GAAQyC,GAAU,OAAO4M,EAAqBrP,CAAI,CAAC,ECnC/DqiB,GAAW25B,EAAUvc,GAAO,CAIvC,eAAend,EAAIrd,EAAU,GAAI,CAC/B,KAAM,CAAE,QAAA+9C,CAAO,EAAK,MAAO,MAAMvjB,EAAI,KAAK,YAAa,CACrD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OAClB,CAAA,GAAG,KAAM,EAEV,OAAOy9C,GAAoBM,CAAO,GAAK,CAAE,CAC1C,CACD,OAAO1gC,CACT,CAAC,ECdY2gC,GAAcjH,EAAUvc,GAAO,CAI1C,eAAe0S,EAAO+Q,EAAOj+C,EAAU,GAAI,CACzC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,eAAgB,CACzC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK6G,GAAiBG,CAAK,EAC3B,GAAGj+C,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAEK,CAAE,QAAA+9C,CAAO,EAAK,MAAMz8C,EAAI,KAAM,EAEpC,OAAOy8C,GAAW,CAAE,CACrB,CACD,OAAO7Q,CACT,CAAC,ECjBYrqB,GAAgBk0B,EAAUvc,GAAO,CAI5C,eAAerX,EAAS86B,EAAO1hD,EAAMyD,EAAU,CAAA,EAAI,CACjD,MAAMia,EAAeg9B,EAAkB,CACrC,IAAK6G,GAAiBG,CAAK,EAC3B,GAAGj+C,CACT,CAAK,EAGK4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EAU5D,MARY,MAAMw6B,EAAI,KAAK,aAAc,CACvC,OAAArgB,EACA,aAAAF,EACA,GACE,MAAMo9B,GAAiB,CAAC96C,CAAI,EAAGqX,EAAY5T,EAAQ,OAAO,CAElE,CAAK,GAES,KAAM,CACjB,CACD,OAAOmjB,CACT,CAAC,EC/BKpF,GAAMC,EAAO,mCAAmC,EAczCkgC,GAAkB,CAACl+C,EAASm+C,IAChCpH,EAAWvc,GAAQ,CAIxB,eAAe4jB,EAAWH,EAAOI,EAASr+C,EAAU,CAAA,EAAI,CACtDA,EAAQ,OAASm+C,EAAY,UAAUF,EAAOI,EAASr+C,EAAQ,MAAM,EAGrE,IAAIsU,EAEAgqC,EAEJ,MAAM54C,EAAS,IAAI,QAAQ,CAAC6P,EAASrB,IAAW,CAC9CI,EAAOiB,EACP+oC,EAAOpqC,CACf,CAAO,EAIKqqC,EAAe,WAAW,IAAMjqC,EAAI,EAAI,GAAI,EAGlD,OAAAkmB,EAAI,KAAK,aAAc,CACrB,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK6G,GAAiBG,CAAK,EAC3B,GAAGj+C,CACb,CAAS,EACD,QAASA,EAAQ,OACzB,CAAO,EACE,MAAOwM,GAAQ,CAEd2xC,EAAY,YAAYF,EAAOI,CAAO,EAEtCC,EAAK9xC,CAAG,CAClB,CAAS,EACA,KAAMiL,GAAa,CAClB,aAAa8mC,CAAY,EAEpB9mC,IAKL+mC,GAAa/mC,EAAU,CACrB,UAAY3X,GAAY,CACtB,GAAKu+C,EAIL,IAAI,OAAOA,GAAY,WAAY,CACjCA,EAAQv+C,CAAO,EACf,MACD,CAEG,OAAOu+C,EAAQ,aAAgB,YACjCA,EAAQ,YAAYv+C,CAAO,EAE9B,EACD,MAAO,IAAMq+C,EAAY,YAAYF,EAAOI,CAAO,EACnD,QAASr+C,EAAQ,OAC7B,CAAW,EAEDsU,EAAM,EAChB,CAAS,EAEI5O,CACR,CACD,OAAO04C,CACR,CAAA,EAAEp+C,CAAO,EAUZ,eAAew+C,GAAc/mC,EAAU,CAAE,UAAAgnC,EAAW,MAAAC,EAAO,QAAAC,CAAO,EAAI,CACpEA,EAAUA,GAAW5gC,GAErB,GAAI,CACF,gBAAiB41B,KAAOl8B,EAAS,SAC/B,GAAI,CACF,GAAI,CAACk8B,EAAI,KACP,SAGEA,EAAI,MAAQ,MAAQA,EAAI,OAAS,KACnC8K,EAAU,CACR,KAAM,SACN,KAAMxiC,GAAiB03B,EAAI,IAAI,EAC/B,KAAMiK,GAAWjK,EAAI,IAAI,EACzB,eAAgBkK,GAAYlK,EAAI,KAAK,EACrC,MAAOgK,GAAUhK,EAAI,SAAS,CAAC,CAAC,EAChC,IAAKiK,GAAWjK,EAAI,KAAO,GAAG,EAC9B,UAAWiK,GAAWjK,EAAI,WAAa,GAAG,CACtD,CAAW,EAED8K,EAAU,CACR,KAAM,WACN,KAAMb,GAAWjK,EAAI,IAAI,EACzB,MAAOgK,GAAUhK,EAAI,SAAS,CAAC,CAAC,CAC5C,CAAW,CAEJ,OAA2BnnC,EAAK,CAC/BA,EAAI,QAAU,mCAAmCA,EAAI,OAAO,GAC5DmyC,EAAQnyC,EAAK,GAAOmnC,CAAG,CACxB,CAEJ,OAA2BnnC,EAAK,CAC1BoyC,GAAapyC,CAAG,GACnBmyC,EAAQnyC,EAAK,EAAI,CAEvB,QAAY,CACRkyC,EAAO,CACR,CACH,CAMA,MAAME,GAAetoC,GAAS,CAC5B,OAAQA,EAAM,KAAI,CAChB,IAAK,UACH,MAAO,GAET,IAAK,QACH,MAAO,GACT,QAGE,OAAOA,EAAM,OAAS,YACzB,CACH,ECjJauoC,GAAoB,CAAC7+C,EAASm+C,IAAgB,CAIzD,eAAeW,EAAab,EAAOI,EAAS,CAC1CF,EAAY,YAAYF,EAAOI,CAAO,CACvC,CACD,OAAOS,CACT,ECTO,MAAMC,EAAoB,CAC/B,aAAe,CAEb,KAAK,MAAQ,IAAI,GAClB,CAOD,UAAWd,EAAOI,EAASlkC,EAAQ,CACjC,MAAM6kC,EAAY,KAAK,MAAM,IAAIf,CAAK,GAAK,CAAE,EAE7C,GAAIe,EAAU,KAAKjwC,GAAKA,EAAE,UAAYsvC,CAAO,EAC3C,MAAM,IAAI,MAAM,yBAAyBJ,CAAK,oBAAoB,EAIpE,MAAMrqC,EAAa,IAAI,gBAEvB,YAAK,MAAM,IAAIqqC,EAAO,CAAC,CAAE,QAAAI,EAAS,WAAAzqC,EAAY,EAAE,OAAOorC,CAAS,CAAC,EAG7D7kC,GACFA,EAAO,iBAAiB,QAAS,IAAM,KAAK,YAAY8jC,EAAOI,CAAO,CAAC,EAGlEzqC,EAAW,MACnB,CAMD,YAAaqqC,EAAOI,EAAS,CAC3B,MAAMn6B,EAAO,KAAK,MAAM,IAAI+5B,CAAK,GAAK,CAAE,EACxC,IAAIgB,EAEAZ,GACF,KAAK,MAAM,IAAIJ,EAAO/5B,EAAK,OAAOnV,GAAKA,EAAE,UAAYsvC,CAAO,CAAC,EAC7DY,EAAS/6B,EAAK,OAAOnV,GAAKA,EAAE,UAAYsvC,CAAO,IAE/C,KAAK,MAAM,IAAIJ,EAAO,CAAA,CAAE,EACxBgB,EAAS/6B,IAGL,KAAK,MAAM,IAAI+5B,CAAK,GAAK,CAAE,GAAE,QACjC,KAAK,MAAM,OAAOA,CAAK,EAGzBgB,EAAO,QAAQlwC,GAAKA,EAAE,WAAW,MAAK,CAAE,CACzC,CACH,CCrDO,SAAS4sC,GAAc50B,EAAQ,CACpC,MAAMm4B,EAAsB,IAAIH,GAEhC,MAAO,CACL,GAAI3hC,GAAS2J,CAAM,EACnB,MAAOi3B,GAAYj3B,CAAM,EACzB,QAASlE,GAAckE,CAAM,EAC7B,UAAWm3B,GAAgBn3B,EAAQm4B,CAAmB,EACtD,YAAaL,GAAkB93B,EAAQm4B,CAAmB,CAC3D,CACH,CCXO,MAAMp5B,GAAcixB,EAAUvc,GAAO,CAI1C,eAAiBzU,EAAW/lB,EAAU,GAAI,CAQxC,OAPY,MAAMw6B,EAAI,KAAK,aAAc,CACvC,OAAQx6B,EAAQ,OAChB,UAAWk4C,GACX,aAAcjB,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEW,OAAQ,CACrB,CACD,OAAO+lB,CACT,CAAC,ECbYzB,GAAayyB,EAAU,CAACvc,EAAKxgB,IAqBjC,OAAO,OAjBD,gBAAkBhI,EAAMhS,EAAU,CAAA,EAAI,CAEjD,MAAMm/C,EAAU,MAAM,QAAQntC,CAAI,EAAIA,EAAO,CAACA,CAAI,EAYlD,OAVY,MAAMwoB,EAAI,KAAK,OAAQ,CACjC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKkI,EAAQ,IAAIltC,GAAO,GAAGA,aAAe,WAAanO,EAAI,OAAOmO,CAAG,EAAIA,CAAG,EAAE,EAC9E,GAAGjS,CACX,CAAO,EACD,QAASA,EAAQ,QACjB,UAAWk4C,EACjB,CAAK,GAEW,OAAQ,CACrB,EAE0B,CACzB,MAAOpyB,GAAY9L,CAAI,CAC3B,CAAG,CACF,EC1BYssB,GAAWyQ,EAAUvc,GAAO,CAIvC,eAAiB+L,EAAIvmC,EAAU,GAAI,CAajC,OAZY,MAAMw6B,EAAI,KAAK,UAAW,CACpC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,QACjB,UAAYsB,IACH,CACL,IAAKA,EAAI,MAAQ,IAAI,MAAMA,EAAI,KAAK,EAAI,KACxC,KAAMA,EAAI,KAAO,CAAA,GAAI,GAAG,EAAIwC,EAAI,MAAMxC,EAAI,IAAI,GAAG,CAAC,EAAI,IACvD,EAET,CAAK,GAEW,OAAQ,CACrB,CACD,OAAOilC,CACT,CAAC,ECrBY9f,GAAaswB,EAAUvc,GAAO,CAIzC,eAAe9T,EAAM1mB,EAAU,GAAI,CAMjC,MAAMzD,EAAO,MALD,MAAMi+B,EAAI,KAAK,YAAa,CACtC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAE7B,MAAO,CACL,WAAY,OAAOzD,EAAK,UAAU,EAClC,SAAU,OAAOA,EAAK,QAAQ,EAC9B,SAAUA,EAAK,SACf,QAASA,EAAK,QACd,WAAY,OAAOA,EAAK,UAAU,CACnC,CACF,CACD,OAAOmqB,CACT,CAAC,ECrBYuP,GAAgB8gB,EAAUvc,GAAO,CAI5C,eAAej3B,EAASvD,EAAU,GAAI,CAOpC,OANY,MAAO,MAAMw6B,EAAI,KAAK,eAAgB,CAChD,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OAClB,CAAA,GAAG,KAAM,GAEC,OACZ,CACD,OAAOuD,CACT,CAAC,ECfM,SAASujC,GAAY/f,EAAQ,CAClC,MAAO,CACL,GAAIuf,GAASvf,CAAM,EACnB,KAAMN,GAAWM,CAAM,EACvB,QAASkP,GAAclP,CAAM,CAC9B,CACH,CCLO,MAAM4f,GAAWoQ,EAAUvc,GAAO,CAIvC,eAAiB4kB,EAAIp/C,EAAU,GAAI,CAajC,OAZY,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,QACjB,UAAYm7B,IAAW,CACrB,QAAS,OAAOA,EAAM,OAAO,EAC7B,SAAU,OAAOA,EAAM,QAAQ,EAC/B,OAAQ,WAAWA,EAAM,MAAM,EAC/B,QAAS,WAAWA,EAAM,OAAO,CACzC,EACA,CAAK,GAEW,OAAQ,CACrB,CACD,OAAOikB,CACT,CAAC,ECrBM,SAASC,GAAat4B,EAAQ,CACnC,MAAO,CACL,QAASggB,GAAchgB,CAAM,EAC7B,KAAM+f,GAAW/f,CAAM,EACvB,GAAI4f,GAAS5f,CAAM,CACpB,CACH,CCHO,MAAMu4B,GAAcvI,EAAUvc,GAAO,CAI1C,eAAe6S,EAAOrtC,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAGK,CAAE,MAAA25C,CAAK,EAAK,MAAMr4C,EAAI,KAAM,EAElC,OAAO,OAAO,KAAKq4C,CAAK,EAAE,IAAI34B,IAAO,CACnC,GAAI/E,GAAiB+E,CAAE,EACvB,OAAQ24B,EAAM34B,CAAE,GAAK,CAAA,GAAI,IAAI9d,GAAKsM,GAAUtM,CAAC,CAAC,CACpD,EAAM,CACH,CACD,OAAOmqC,CACT,CAAC,ECtBYkS,GAAgBxI,EAAUvc,GAAO,CAI5C,eAAeglB,EAASr0C,EAAMnL,EAAU,GAAI,CAC1C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,gBAAiB,CAC1C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9rC,EACL,GAAGnL,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EACK,CAAE,QAAA+9C,CAAO,EAAK,MAAMz8C,EAAI,KAAM,EAEpC,OAAOy8C,GAAW,CAAE,CACrB,CACD,OAAOyB,CACT,CAAC,EClBYC,GAAmB1I,EAAUvc,GAAO,CAI/C,eAAeklB,EAAYv0C,EAAMnL,EAAU,GAAI,CAC7C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,mBAAoB,CAC7C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9rC,EACL,GAAGnL,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EACK,CAAE,QAAA+9C,CAAO,EAAK,MAAMz8C,EAAI,KAAM,EAEpC,OAAOy8C,GAAW,CAAE,CACrB,CACD,OAAO2B,CACT,CAAC,ECjBYC,GAAmB5I,EAAUvc,GAAO,CAI/C,eAAeolB,EAAY5/C,EAAU,GAAI,CACvC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,oBAAqB,CAC9C,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAGK,CAAE,QAAA+9C,CAAO,EAAK,MAAMz8C,EAAI,KAAM,EAEpC,OAAQy8C,GAAW,IAAI,IAAI,GAAKvuC,GAAU,CAAC,CAAC,CAC7C,CACD,OAAOowC,CACT,CAAC,EChBY5B,GAAcjH,EAAUvc,GAAO,CAI1C,eAAe0S,EAAOltC,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,cAAe,CACxC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAGK,CAAE,MAAA83C,CAAK,EAAK,MAAMx2C,EAAI,KAAM,EAElC,OAAQw2C,GAAS,IAAI,IAAIxhB,IAChB,CACL,KAAM9mB,GAAU8mB,EAAK,IAAI,EACzB,KAAMra,GAAiBqa,EAAK,IAAI,EAChC,MAAOA,EAAK,MACZ,QAASA,EAAK,QACd,QAASA,EAAK,QACd,UAAWA,EAAK,WAAa,KAAO,OAAYA,EAAK,YAAc,EAAI,UAAY,UACpF,EACF,CACF,CACD,OAAO4W,CACT,CAAC,EC3BM,SAAS2S,GAAa94B,EAAQ,CACnC,MAAO,CACL,MAAOu4B,GAAYv4B,CAAM,EACzB,QAASw4B,GAAcx4B,CAAM,EAC7B,WAAY04B,GAAiB14B,CAAM,EACnC,WAAY44B,GAAiB54B,CAAM,EACnC,MAAOi3B,GAAYj3B,CAAM,CAC1B,CACH,CCFO,MAAMjK,GAAei6B,EAAWvc,GAAQ,CAI7C,eAAiBre,EAAQ7jB,EAAQ0H,EAAU,GAAI,CAE7C,MAAM4T,EAAa,IAAI,gBACjBuG,EAASy9B,GAAYhkC,EAAW,OAAQ5T,EAAQ,MAAM,EACtD,CAAE,QAAAoY,EAAS,KAAAQ,EAAM,MAAA2+B,EAAO,MAAA9rC,CAAO,EACnC,MAAM4rC,GAAiB/+C,EAAQsb,EAAY5T,EAAQ,OAAO,EAOtD,CAAC8/C,EAAYC,CAAgB,EAAI,OAAO//C,EAAQ,UAAa,WAC/DggD,GAAsBzI,EAAO9rC,EAAOzL,EAAQ,QAAQ,EACpD,CAAC,OAAW,MAAS,EAEnBsB,EAAM,MAAMk5B,EAAI,KAAK,MAAO,CAChC,aAAcyc,EAAkB,CAC9B,kBAAmB,GACnB,GAAGj3C,EACH,SAAU,EAAQ8/C,CAC1B,CAAO,EACD,iBAAAC,EACA,OAAA5lC,EACA,QAAA/B,EACA,KAAAQ,CACN,CAAK,EAED,cAAenD,KAAQnU,EAAI,SACzBmU,EAAOyiC,GAAcziC,CAAI,EAErBA,EAAK,OAAS,OAChB,MAAM0hC,GAAgB1hC,CAAI,EACjBqqC,GACTA,EAAWrqC,EAAK,OAAS,EAAGA,EAAK,IAAI,CAG1C,CACD,OAAO0G,CACT,CAAC,EAWK6jC,GAAwB,CAACzI,EAAO9rC,EAAOugC,IAC3CvgC,EAAQ,CAAC,OAAWw0C,GAAuB1I,EAAO9rC,EAAOugC,CAAQ,CAAC,EAAI,CAACA,EAAU,MAAS,EAWtFiU,GAAyB,CAACtnD,EAAM8S,EAAOugC,IAAa,CACxD,IAAI1rC,EAAQ,EACZ,MAAMorB,EAAQjgB,EAAM,OACpB,MAAO,CAAC,CAAE,OAAAy0C,EAAQ,MAAA3I,KAAY,CAE5B,MAAMpmB,EAAW,KAAK,MAAM+uB,EAAS3I,EAAQ5+C,CAAI,EACjD,KAAO2H,EAAQorB,GAAO,CACpB,KAAM,CAAE,MAAAvX,EAAO,IAAAjY,EAAK,KAAAvE,CAAI,EAAK8T,EAAMnL,CAAK,EAExC,GAAI6wB,EAAWj1B,EAAK,CAClB8vC,EAAS7a,EAAWhd,EAAOxc,CAAI,EAC/B,KAGR,MACQq0C,EAAS9vC,EAAMiY,EAAOxc,CAAI,EAC1B2I,GAAS,CAEZ,CACF,CACH,EAWA,SAAS62C,GAAiB,CAAE,KAAAx/C,EAAM,KAAAmT,EAAM,KAAAnS,EAAM,KAAA2G,EAAM,MAAAE,EAAO,WAAA2gD,GAAc,CAEvE,MAAMzqC,EAAS,CACb,KAAM/d,EACN,IAAKmM,EAAI,MAAMgH,CAAI,EACnB,KAAM,SAASnS,CAAI,CACpB,EAED,OAAI2G,GAAQ,OACVoW,EAAO,KAAO,SAASpW,EAAM,CAAC,GAG5BE,GAAS,OACXkW,EAAO,MAAQ,CACb,KAAMlW,EACN,MAAO2gD,GAAc,CACtB,GAGIzqC,CACT,CCvHO,SAASwG,GAAWlc,EAAS,CAClC,MAAMuZ,EAAMuD,GAAa9c,CAAO,EAChC,OAAO+2C,EAAU,IAAM,CAIrB,eAAejwB,EAAK1rB,EAAO4E,EAAU,GAAI,CAEvC,OAAO,MAAMoc,GAAK7C,EAAIgD,GAAenhB,CAAK,EAAG4E,CAAO,CAAC,CACtD,CACD,OAAO8mB,CACR,CAAA,EAAE9mB,CAAO,CACZ,CCjBO,MAAMo1B,GAAY2hB,EAAUvc,GAAO,CAIxC,eAAiBnF,EAAKlsB,EAAMnJ,EAAU,GAAI,CAUxC,OATY,MAAMw6B,EAAI,KAAK,MAAO,CAChC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EAAK,SAAU,EACpB,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GAEW,SAAU,CACvB,CAED,OAAOq1B,CACT,CAAC,EClBY+qB,GAAiBrJ,EAAUvc,GAIrB,MAAOx6B,EAAU,MACpB,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAEU,KAAM,CAGpB,ECdYub,GAAYw7B,EAAUvc,GAIrB,MAAOlf,EAAQtb,EAAU,CAAA,KAStB,MARD,MAAMw6B,EAAI,KAAK,MAAO,CAChC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK37B,EACL,GAAGtb,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,GAEjB,IAIf,ECzBYqgD,GAA0BtJ,EAAUvc,GACxC,IAAM,CACX,MAAMtiB,EAAM,IAAI,IAAIsiB,EAAI,KAAK,MAAQ,EAAE,EACvC,MAAO,CACL,KAAMtiB,EAAI,SACV,KAAMA,EAAI,KACV,SAAUA,EAAI,SACd,SAAUA,EAAI,SACd,WAAYA,EAAI,QACjB,CACF,CACF,ECJYwP,GAAYqvB,EAAUvc,GAAO,CAIxC,eAAiBhY,EAAKrZ,EAAMnJ,EAAU,GAAI,CAExC,MAAMga,EAAO,CACX,IAAK,GAAG7Q,aAAgB,WAAarF,EAAI,OAAOqF,CAAI,EAAIA,CAAI,GAC5D,GAAGnJ,CACJ,EAEGga,EAAK,mBACPA,EAAK,mBAAmB,EAAIA,EAAK,iBACjC,OAAOA,EAAK,kBASd,OANY,MAAMwgB,EAAI,KAAK,MAAO,CAChC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj9B,CAAI,EACpC,QAASha,EAAQ,OACvB,CAAK,GAEW,SAAU,CACvB,CAED,OAAOwiB,CACT,CAAC,ECxBY2T,GAAW4gB,EAAUvc,GAAO,CAIvC,eAAexZ,EAAIhhB,EAAU,GAAI,CAS/B,MAAMzD,EAAO,MARD,MAAMi+B,EAAI,KAAK,KAAM,CAC/B,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKj3C,EAAQ,OAASA,EAAQ,OAAO,SAAQ,EAAK,OAClD,GAAGA,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,GACsB,KAAM,EAEvB0V,EAAS,CACb,GAAGwiC,GAAc37C,CAAI,CACtB,EAED,OAAAmZ,EAAO,GAAKuG,GAAiBvG,EAAO,EAAE,EAElCA,EAAO,YACTA,EAAO,UAAYA,EAAO,UAAU,IAA2B3D,GAAOvC,GAAUuC,CAAE,CAAC,GAI9E2D,CACR,CACD,OAAOsL,CACT,CAAC,EC9BYxF,GAAiBxb,GAAW,CACvC,MAAMghB,EAAKmV,GAASn2B,CAAO,EAK3B,eAAe8iB,EAAU9iB,EAAU,GAAI,CACrC,MAAMsB,EAAM,MAAM0f,EAAGhhB,CAAO,EAE5B,MAAO,GAAQsB,GAAOA,EAAI,WAAaA,EAAI,UAAU,OACtD,CACD,OAAOwhB,CACT,ECZa1F,GAAW25B,EAAU,CAACvc,EAAKxgB,IAAS,CAI/C,eAAiBqD,EAAIlU,EAAMnJ,EAAU,GAAI,CACvC,MAAM+U,EAAU,GAAG5L,aAAgB,WAAarF,EAAI,OAAOqF,CAAI,EAAIA,CAAI,GAKvE,eAAem3C,EAASh9C,EAAM,CAC5B,IAAIwH,EAAOxH,EAAK,KAEhB,GAAIwH,EAAK,SAAS,GAAG,EAAG,CAEtB,MAAMsI,EAAWtI,EAAK,WAAW,QAAQ,EAAIA,EAAO,SAASA,CAAI,GAGjEA,GAFc,MAAM2b,GAAWzM,CAAI,EAAE5G,CAAQ,GAEhC,GACrB,MACQtI,EAAOhH,EAAI,MAAMgH,CAAI,EAIvB,MAAM+T,EAAQ,CACZ,KAAMvb,EAAK,KACX,KAAMyR,GAAWzR,EAAK,KAAO,IAAIA,EAAK,IAAI,GAAK,IAC/C,KAAMA,EAAK,KACX,IAAKwH,EACL,KAAMy1C,GAAOj9C,CAAI,CAClB,EAED,OAAIA,EAAK,OACPub,EAAM,KAAO,SAASvb,EAAK,KAAM,CAAC,GAGhCA,EAAK,QAAU,QAAaA,EAAK,QAAU,OAC7Cub,EAAM,MAAQ,CACZ,KAAMvb,EAAK,KACZ,EAEGA,EAAK,aAAe,QAAaA,EAAK,aAAe,OACvDub,EAAM,MAAM,MAAQvb,EAAK,aAItBub,CACR,CAED,MAAMvd,EAAM,MAAMk5B,EAAI,KAAK,KAAM,CAC/B,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAKliC,EACL,GAAG/U,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EAED,cAAe0F,KAAUpE,EAAI,SAAU,CAGrC,GAFAoE,EAASA,EAAO,QAEZ,CAACA,EACH,MAAM,IAAI,MAAM,8BAA8B,EAIhD,GADAA,EAASA,EAAO,CAAC,EACb,CAACA,EACH,MAAM,IAAI,MAAM,uCAAuC,EAGzD,MAAMigB,EAAQjgB,EAAO,MACrB,GAAI,CAAC,MAAM,QAAQigB,CAAK,EACtB,MAAM,IAAI,MAAM,gDAAgD,EAGlE,GAAI,CAACA,EAAM,OAAQ,CAEjB,MAAM26B,EAAQ56C,CAAM,EAEpB,MACD,CAED,MAAQigB,EAAM,IAAI26B,CAAO,CAC1B,CACF,CACD,OAAOjjC,CACT,CAAC,EAKD,SAASkjC,GAAQj9C,EAAM,CACrB,OAAQA,EAAK,KAAI,CACf,IAAK,GACL,IAAK,GACH,MAAO,MACT,IAAK,GACH,MAAO,OACT,QACE,MAAO,MACV,CACH,CCtGO,MAAMk9C,GAAczJ,EAAUvc,GAAO,CAI1C,eAAeimB,EAAOzgD,EAAU,GAAI,CAClC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,MAAO,CAChC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAED,OAAOk4C,GAAc,MAAM52C,EAAI,MAAM,CACtC,CACD,OAAOm/C,CACT,CAAC,ECdYC,GAAa3J,EAAUvc,GAAO,CAIzC,eAAiBmmB,EAAM/pC,EAAQ5W,EAAU,GAAI,CAW3C,OAVY,MAAMw6B,EAAI,KAAK,OAAQ,CACjC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK,GAAGrgC,CAAM,GACd,GAAG5W,CACX,CAAO,EACD,QAASA,EAAQ,QACjB,UAAWk4C,EACjB,CAAK,GAEW,OAAQ,CACrB,CACD,OAAOyI,CACT,CAAC,ECnBYjlC,GAAgBq7B,EAAUvc,GAAO,CAI5C,eAAejlB,EAASpM,EAAMnJ,EAAU,GAAI,CAC1C,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,UAAW,CACpC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkB,CAC9B,IAAK9tC,EACL,GAAGnJ,CACX,CAAO,EACD,QAASA,EAAQ,OACvB,CAAK,EACK,CAAE,KAAA4gD,CAAI,EAAK,MAAMt/C,EAAI,KAAM,EACjC,OAAOs/C,CACR,CACD,OAAOrrC,CACT,CAAC,ECjBYkB,GAAcsgC,EAAUvc,GAIrB,MAAOx6B,EAAU,KAAO,CACpC,MAAMsP,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,CAClE,CAGF,ECTY6H,GAAa4/B,EAAUvc,GAAO,CAIzC,eAAerkB,EAAMnW,EAAU,GAAI,CAOjC,MANY,MAAMw6B,EAAI,KAAK,WAAY,CACrC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,GAES,KAAM,CACjB,CACD,OAAOmW,CACT,CAAC,ECbY8f,GAAgB8gB,EAAUvc,GAAO,CAI5C,eAAej3B,EAASvD,EAAU,GAAI,CACpC,MAAMsB,EAAM,MAAMk5B,EAAI,KAAK,UAAW,CACpC,OAAQx6B,EAAQ,OAChB,aAAci3C,EAAkBj3C,CAAO,EACvC,QAASA,EAAQ,OACvB,CAAK,EAGD,MAAO,CACL,GAAGk4C,GAAc,MAAM52C,EAAI,MAAM,EACjC,mBAAoB,OACrB,CACF,CAED,OAAOiC,CACT,CAAC,EC5Bcs9C,GAAA,CAAA,2GCgER,SAASr+C,GAAQxC,EAAU,GAAI,CAIpC,MAAMghB,EAAK,CACT,KAAMrb,GAAS,KACf,KAAMA,GAAS,KACf,OAASqb,GAAOA,EAChB,OAASA,GAAOA,CACjB,EAGK8/B,EAAkB,OAAO,OAAO/5C,EAAK,GAE1C/G,EAAQ,MAAQA,EAAQ,KAAK,MAAQA,EAAQ,KAAK,MAAQ,CAAA,GAAI,QAAQvI,GAAQqpD,EAAgB,KAAKrpD,CAAI,CAAC,EAEzG,MAAMspD,EAAa,IAAIrL,GAAW,CAChC,MAAOoL,EACP,SAAU9gD,EAAQ,MAAQA,EAAQ,KAAK,QAC3C,CAAG,EAGKghD,EAAc,OAAO,OAAO55C,EAAM,EAExC,CAACk1B,GAAO2kB,GAASC,GAASC,GAASngC,CAAE,EAAE,OAAQhhB,EAAQ,MAAQA,EAAQ,KAAK,QAAW,CAAA,CAAE,EAAE,QAAQiF,GAAS+7C,EAAY,KAAK/7C,CAAK,CAAC,EAEnI,MAAMm8C,EAAc,IAAIvL,GAAY,CAClC,OAAQmL,EACR,UAAWhhD,EAAQ,MAAQA,EAAQ,KAAK,SAC5C,CAAG,EAGKqhD,EAAmB,OAAO,OAAOn6C,EAAM,GAE5ClH,EAAQ,MAAQA,EAAQ,KAAK,QAAUA,EAAQ,KAAK,QAAU,CAAA,GAAI,QAAQqwB,GAAUgxB,EAAiB,KAAKhxB,CAAM,CAAC,EAElH,MAAMixB,EAAc,IAAIvL,GAAY,CAClC,QAASsL,EACT,WAAYrhD,EAAQ,MAAQA,EAAQ,KAAK,UAC7C,CAAG,EA2CD,MAxCe,CACb,IAAKkc,GAAUlc,CAAO,EACtB,OAAQ8c,GAAa9c,CAAO,EAC5B,QAAS+mC,GAAc/mC,CAAO,EAC9B,MAAO63C,GAAY73C,CAAO,EAC1B,UAAW+3C,GAAgB/3C,CAAO,EAClC,IAAKo1B,GAAUp1B,CAAO,EACtB,SAAUogD,GAAepgD,CAAO,EAChC,OAAQk3B,GAAal3B,CAAO,EAC5B,IAAKg5C,GAAUoI,EAAaphD,CAAO,EACnC,IAAKm6C,GAAUn6C,CAAO,EACtB,KAAMy6C,GAAWz6C,CAAO,EACxB,IAAKub,GAAUvb,CAAO,EACtB,MAAOqkC,GAAYrkC,CAAO,EAC1B,IAAK0nB,GAAU1nB,CAAO,EACtB,kBAAmBqgD,GAAwBrgD,CAAO,EAClD,GAAIm2B,GAASn2B,CAAO,EACpB,SAAUwb,GAAexb,CAAO,EAChC,IAAKo7C,GAAUp7C,CAAO,EACtB,IAAK07C,GAAU17C,CAAO,EACtB,GAAIod,GAASpd,CAAO,EACpB,MAAOwgD,GAAYxgD,CAAO,EAC1B,KAAM47C,GAAW57C,CAAO,EACxB,OAAQm8C,GAAaiF,EAAaphD,CAAO,EACzC,IAAKw9C,GAAUx9C,CAAO,EACtB,KAAM0gD,GAAW1gD,CAAO,EACxB,OAAQ27C,GAAa37C,CAAO,EAC5B,KAAMskB,GAAWtkB,CAAO,EACxB,KAAM8mC,GAAW9mC,CAAO,EACxB,QAAS0b,GAAc1b,CAAO,EAC9B,MAAOyW,GAAYzW,CAAO,EAC1B,MAAOq/C,GAAYr/C,CAAO,EAC1B,KAAMmX,GAAWnX,CAAO,EACxB,MAAO6/C,GAAY7/C,CAAO,EAC1B,QAASi2B,GAAcj2B,CAAO,EAC9B,MAAO+gD,EACP,OAAQK,EACR,QAASE,CACV,CAGH,CC5IA,KAAM,CAAE,KAAMC,EAAW,EAAKn4C,GAAY,SAAS,EAsB5C,eAAeo4C,GAAgBr2C,EAAMnL,EAAU,GAAI,CACtD,MAAMqP,EAAW,IAAIoyC,GACjBzhD,EAAQ,QAAU,MAClBA,EAAQ,OAAO,iBAAiB,QAAS,IAAM,CAC3CqP,EAAS,OAAM,CAC3B,CAAS,EAEL,MAAMuH,EAASzL,EAAK,YACd,EAAG+H,CAAQ,EAAI/H,EAAK,aAAY,EAAG,KAAK,CAAC,CAACnC,CAAK,IAAMA,IAAUu4C,EAAW,GAAK,CAAA,EACrF,GAAIruC,GAAY,KACZ,MAAM,IAAI,MAAM,gCAAgC,EAGpD,IAAIwuC,GADY,MAAMryC,EAAS,WAAW,YAAY6D,CAAQ,EAAE,GACxC,KAAM,EAAC,IAAKhQ,GAAMA,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,OAAO,EACzE,OAAI0T,GAAU,OACV8qC,EAAYA,EAAU,OAAQ7iC,GAAUA,EAAM,SAASjI,CAAM,CAAC,GAE3D8qC,CACX,CC3CO,MAAMvxC,GAAO1Y,EAAK,MAAM,EAClB2Y,GAAO3Y,EAAK,MAAM,EAClB4Y,GAAU5Y,EAAK,SAAS,EACxB6Y,GAAMrV,GAAGxD,EAAK,KAAK,EAAG4Y,GAASF,GAAMC,EAAI,EACzCG,GAAKtV,GAAGxD,EAAK,KAAK,EAAGA,EAAK,KAAK,CAAC,EAChC+Y,GAAMvV,GAAGwV,EAAIF,GAAI9Y,EAAK,KAAK,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,CAAC,CAAC,EACpDiZ,GAAMD,EAAIF,GAAI9Y,EAAK,KAAK,CAAC,EACzBkZ,GAAMF,EAAIC,GAAKjZ,EAAK,KAAK,CAAC,EAC1BmZ,GAAOH,EAAIC,GAAKjZ,EAAK,MAAM,CAAC,EAC5BkqD,GAASlxC,EAAIC,GAAKjZ,EAAK,SAAS,CAAC,EACjCoZ,GAAa5V,GAAGwV,EAAID,GAAK/Y,EAAK,IAAI,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,IAAI,CAAC,CAAC,EAC1DqZ,GAAmB7V,GAAGwV,EAAID,GAAK/Y,EAAK,KAAK,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,CAAC,EAAGgZ,EAAID,GAAK/Y,EAAK,KAAK,EAAGA,EAAK,IAAI,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,KAAK,EAAGA,EAAK,IAAI,CAAC,CAAC,EACxIsZ,GAAO9V,GAAGwV,EAAID,GAAK/Y,EAAK,MAAM,CAAC,EAAGgZ,EAAIF,GAAI9Y,EAAK,MAAM,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,MAAM,CAAC,CAAC,EAC/EuZ,GAAQ/V,GAAGwV,EAAID,GAAK/Y,EAAK,OAAO,CAAC,EAAGgZ,EAAIF,GAAI9Y,EAAK,OAAO,CAAC,EAAGgZ,EAAIH,GAAK7Y,EAAK,OAAO,CAAC,CAAC,EAC1FmqD,GAAgBnxC,EAAIC,GAAKjZ,EAAK,eAAe,EAAGA,EAAK,UAAU,CAAC,EACzD2Z,GAAenW,GAAGwV,EAAImxC,GAAenqD,EAAK,KAAK,CAAC,EAAGmqD,EAAa,EACvEC,GAAgBpxC,EAAIkxC,GAAQlqD,EAAK,cAAc,EAAGA,EAAK,UAAU,EAAGA,EAAK,UAAU,CAAC,EAC7EqqD,GAAe7mD,GAAGwV,EAAIoxC,GAAepqD,EAAK,KAAK,CAAC,EAAGoqD,EAAa,EAIhEE,GAAgB9mD,GAAGwV,EAAII,GAAYpZ,EAAK,iBAAiB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIK,GAAkBrZ,EAAK,iBAAiB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAII,GAAYpZ,EAAK,iBAAiB,CAAC,EAAGgZ,EAAIK,GAAkBrZ,EAAK,iBAAiB,CAAC,CAAC,EAK/NuqD,GAAkB/mD,GAAGwV,EAAIM,GAAMtZ,EAAK,mBAAmB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIO,GAAOvZ,EAAK,mBAAmB,EAAGA,EAAK,KAAK,CAAC,EAAGgZ,EAAIM,GAAMtZ,EAAK,mBAAmB,CAAC,EAAGgZ,EAAIO,GAAOvZ,EAAK,mBAAmB,CAAC,CAAC,EACvM4Z,GAAWpW,GAAG4V,GAAYC,GAAkBC,GAAMC,GAAO+wC,GAAeC,GAAiBxxC,GAAKG,GAAKC,GAAMN,GAAKc,GAAc0wC,EAAY,EAG/IxwC,GAAOrW,GAAGwV,EAAIY,GAAU5Z,EAAK,KAAK,CAAC,EAAGsqD,GAAeC,GAAiB5wC,GAAc0wC,GAAcrqD,EAAK,KAAK,CAAC,EAC7G8Z,GAAWtW,GAAGwV,EAAIa,GAAM7Z,EAAK,aAAa,EAAG6Z,EAAI,EAAGb,EAAIa,GAAM7Z,EAAK,aAAa,CAAC,EAAGgZ,EAAIhZ,EAAK,aAAa,EAAG6Z,EAAI,EAAGb,EAAIY,GAAU5Z,EAAK,aAAa,CAAC,EAAGgZ,EAAIhZ,EAAK,aAAa,EAAG4Z,EAAQ,EAAG5Z,EAAK,aAAa,CAAC,EAC/M+Z,GAAmB,IAAMvW,GAAGwV,EAAIc,GAAUC,EAAgB,EAAGD,EAAQ,EAC9DE,GAAUD,GAAgB,EAC1BE,GAAMzW,GAAGwV,EAAIgB,GAASH,GAAMG,EAAO,EAAGhB,EAAIa,GAAMG,EAAO,EAAGhB,EAAIgB,GAASH,EAAI,EAAGG,GAASH,EAAI,EAMxG,SAASM,GAAoBC,EAAc,CACvC,SAASC,EAAQ5O,EAAG,CAChB,IAAI6O,EACJ,GAAI,CACAA,EAAKvC,GAAUtM,CAAC,CACnB,MACW,CACR,MAAO,EACV,CACD,MAAM/G,EAAM0V,EAAaE,EAAG,WAAY,CAAA,EACxC,OAAI5V,IAAQ,KACD,GAEPA,IAAQ,IAAQA,IAAQ,GACjBA,EAEJA,EAAI,SAAW,CACzB,CACD,OAAO2V,CACX,CACA,SAASrB,KAAOuB,EAAM,CAClB,SAASH,EAAa3O,EAAG,CACrB,GAAIA,EAAE,OAAS8O,EAAK,OAChB,OAAO,KAEX,IAAI7V,EAAM+G,EACV,OAAA8O,EAAK,KAAMC,IACP9V,EAAM,OAAO8V,GAAQ,WACfA,EAAK,EAAC,aAAa/O,CAAC,EACpB+O,EAAI,aAAa/O,CAAC,EACpB,MAAM,QAAQ/G,CAAG,IACjB+G,EAAI/G,GAEJA,IAAQ,KAIf,EACMA,CACV,CACD,MAAO,CACH,SAAU,UAAY,CAAE,MAAO,KAAO6V,EAAK,KAAK,GAAG,EAAI,IAAO,EAC9D,MAAOA,EACP,QAASJ,GAAoBC,CAAY,EACzC,aAAAA,CACR,CACA,CACA,SAAS5W,MAAM+W,EAAM,CACjB,SAASH,EAAa3O,EAAG,CACrB,IAAI/G,EAAM,KACV,OAAA6V,EAAK,KAAMC,GAAQ,CACf,MAAM3Q,EAAM,OAAO2Q,GAAQ,WACrBA,EAAK,EAAC,aAAa/O,CAAC,EACpB+O,EAAI,aAAa/O,CAAC,EACxB,OAAI5B,GAAO,MACPnF,EAAMmF,EACC,IAEJ,EACnB,CAAS,EACMnF,CACV,CAOD,MANe,CACX,SAAU,UAAY,CAAE,MAAO,KAAO6V,EAAK,KAAK,GAAG,EAAI,IAAO,EAC9D,MAAOA,EACP,QAASJ,GAAoBC,CAAY,EACzC,aAAAA,CACR,CAEA,CACA,SAASpa,EAAKiH,EAAG,CACb,MAAM/G,EAAO+G,EACb,SAASoT,EAAQ5O,EAAG,CAChB,IAAI6O,EACJ,GAAI,CACAA,EAAKvC,GAAUtM,CAAC,CACnB,MACW,CACR,MAAO,EACV,CACD,MAAMgP,EAASH,EAAG,aAClB,OAAIG,EAAO,SAAW,GAAKA,EAAO,CAAC,IAAMva,CAI5C,CACD,SAASka,EAAatC,EAAQ,CAC1B,OAAIA,EAAO,SAAW,EACX,KAEPA,EAAO,CAAC,IAAM5X,EACP4X,EAAO,MAAM,CAAC,EAElB,IACV,CACD,MAAO,CACH,SAAU,UAAY,CAAE,OAAO5X,CAAO,EACtC,QAAAma,EACA,aAAAD,CACR,CACA,CC/HA,MAAMwR,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,8BAA8B,EAa1C,MAAMikC,EAAQ,CASnB,YAAarrC,EAAQC,EAAU1B,EAAM6B,EAAOkrC,EAAO,CACjD,KAAK,MAAQlrC,EACb,KAAK,OAASJ,EACd,KAAK,SAAWC,EAChB,KAAK,KAAO1B,EACZ,KAAK,MAAQ6B,EACb,KAAK,MAAQkrC,CACd,CAOD,aAAa,MAAOlrC,EAAO5P,EAAQpH,EAAS,CAC1C,KAAM,CAAE,gBAAAmiD,EAAiB,KAAMC,EAAW,oBAAAC,CAAqB,EAAGriD,EAE5DmV,EAAQ,OAAOitC,GAAc,UAAYA,GAAa,KACxDtb,GAAW9vB,EAAO5P,EAAQ,CAC1B,KAAMg7C,EACN,YAAaD,EACb,oBAAqBE,CAC7B,CAAO,EACCD,EAEE,CAAE,OAAAxrC,EAAQ,SAAAC,EAAU,MAAAqrC,CAAK,EAAK,MAAMI,GAAStrC,EAAO7B,EAAMnV,CAAO,EAIvE,OAAO,IAAIiiD,GAAQrrC,EAAQC,EAAU1B,EAAM6B,EAAOkrC,CAAK,CACxD,CACH,CAOA,MAAMI,GAAW,MAAOtrC,EAAO7B,EAAMnV,IAAY,CAC/C,GAAI,CAACmV,EAAK,OACR,MAAO,CAAE,GAAG,MAAMotC,GAAcptC,EAAMnV,CAAO,EAAG,MAAO,EAAO,EAGhE,GAAI,CACF,aAAMmV,EAAK,KAAM,EAEV,CAAE,GAAG,MAAMotC,GAAcptC,EAAMnV,CAAO,EAAG,MAAO,EAAO,CAC/D,OAA2BwM,EAAK,CAC/B,GAAIA,EAAI,OAAS4jC,GACf,MAAM5jC,EAGR,GAAIxM,EAAQ,MAAQA,EAAQ,KAAK,WAAa,GAC5C,MAAM,IAAI6H,GAAgB,6FAA6F,EAGzH,MAAO,CAAE,GAAG,MAAM26C,GAASxrC,EAAO7B,EAAMnV,CAAO,EAAG,MAAO,EAAM,CAChE,CACH,EAQMwiD,GAAW,MAAOxrC,EAAO7B,EAAMnV,IAAY,CAC/C,MAAMyiD,EAAcziD,EAAQ,MAAQ,CAAE,EAGhCkiC,EAAS,MAAM/sB,EAAK,OAAQ,EAGlC,GAFA4I,GAAI,eAAgBmkB,CAAM,EAEtBA,IAAW,GACb,MAAM,IAAI,MAAM,qBAAqB,EAIvC,MAAMtrB,EAAS6rC,EAAY,WACvB,MAAMC,GAAaD,EAAY,UAAU,EACzC,MAAME,GAAW3rC,EAAOyrC,CAAW,EAEjC98C,EAAWi9C,GAAiBhsC,CAAM,EAExCmH,GAAI,oBAAqBpY,EAAS,MAAM,EAGxC,MAAMohB,EAAS,CACb,GAAG1D,GAAaw/B,GAAcx7B,GAAkB,EAAEo7B,EAAY,QAAQ,EAAGziD,EAAQ,MAAM,EACvF,SAAU2F,CACX,EACD,MAAMwP,EAAK,KAAK4R,CAAM,EAGtB,MAAM5R,EAAK,KAAM,EAEjB4I,GAAI,aAAa,EAGjB,MAAM+kC,EAAiB,CACrB,KAAM9iD,EAAQ,IACf,EAED,GAAI,CACF8iD,EAAe,IAAM,MAAM3tC,EAAK,OAAO,IAAI,cAAc,CAC1D,OAA2B3I,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,CAET,CAGD,MAAM0K,EAAS,MAAM6rC,GAAa,CAChC,QAAS,OACT,WAAY,OACZ,OAAAnsC,EACA,KAAAzB,EACA,OAAA4R,EACA,eAAA+7B,CACJ,CAAG,EAED,OAAM,MAAM3tC,EAAK,UAAU,IAAI,IAAIP,GAAI,YAAY,CAAC,GAClD,MAAMsC,EAAO,SAAS,WAAW,OAAQN,CAAM,EAGjD,MAAMzB,EAAK,OAAO,IAAI,WAAY,CAEhC,IAAK+B,EAAO,SAAS,KAAK,GAC9B,CAAG,EAEM,CAAE,OAAAN,EAAQ,SAAUM,EAAO,QAAU,CAC9C,EASMwrC,GAAe,MAAO9rC,GAAW,CAErC,GADAmH,GAAI,iCAAiC,EACjCU,GAAS7H,CAAM,EACjB,OAAOA,EAGT,MAAMosC,EAAgB54C,EAAqBwM,EAAQ,WAAW,EACxDZ,EAAM,MAAMkN,GAAoB8/B,CAAa,EACnD,OAAO,MAAM1iC,GAAetK,EAAI,OAAO,MAAOA,EAAI,KAAK,CACzD,EAWM2sC,GAAa,CAAC3rC,EAAO,CAAE,UAAAisC,EAAY,UAAW,KAAA7mD,EAAO,QAAW,CAIpE,GAFA4a,EAAM,2BAA4BisC,CAAS,EAEvCA,IAAc,UAChB,OAAOC,GAAqB,EAG9B,GAAID,IAAc,MAChB,OAAOE,GAAgB,CAAE,KAAA/mD,EAAM,EAGjC,MAAMkT,EAAQ,IAAI,MAAM,0BAA0B,EAAG,+BAA+B,CACtF,EAKMszC,GAAoBhsC,GAAW,CACnC,GAAIA,EAAO,YAAc,KACvB,MAAMtH,EAAQ,IAAI,MAAM,qBAAqB,EAAG,yBAAyB,EAG3E,MAAO,CACL,OAAQsH,EAAO,SAAU,EAEzB,QAASpO,EAAmBoO,EAAO,WAAY,WAAW,CAC3D,CACH,EASM2rC,GAAgB,MAAOptC,EAAMnV,IAAY,CAC7C,MAAM+mB,EAAS/mB,EAAQ,OACjB82B,EAAY92B,EAAQ,MAAQA,EAAQ,KAAK,UAAa,CAAE,EACxD8f,EAAO9f,EAAQ,KACfojD,EAAW,MAAMjuC,EAAK,OAAO,OAAQ,EACrCkuC,EAAUC,GAAaT,GAAcO,EAAUtsB,CAAQ,EAAG/P,CAAM,EAMtE,GAJIq8B,IAAaC,GACf,MAAMluC,EAAK,OAAO,QAAQkuC,CAAO,EAG/B,CAACA,EAAQ,UAAY,CAACA,EAAQ,SAAS,QACzC,MAAM,IAAI97C,GAAoB,mEAAmE,EAGnG,MAAMlG,EAAM+I,EAAqBi5C,EAAQ,SAAS,QAAS,WAAW,EAChErtC,EAAM,MAAMkN,GAAoB7hB,CAAG,EACnCuV,EAAS,MAAM0J,GAAetK,EAAI,OAAO,MAAOA,EAAI,KAAK,EACzDkB,EAAS,MAAM6rC,GAAa,CAChC,QAAS,OACT,WAAY,OACZ,OAAAnsC,EACA,KAAAzB,EACA,OAAQkuC,EACR,eAAgB,CACd,KAAAvjC,EACA,GAAGujC,EAAQ,QACZ,CACL,CAAG,EAED,MAAO,CAAE,OAAAzsC,EAAQ,SAAUM,EAAO,QAAU,CAC9C,EAMMosC,GAAe,CAACv8B,EAAQw8B,IAC5BA,EAAUlgC,GAAa0D,EAAQw8B,CAAO,EAAIx8B,EAQtC87B,GAAgB,CAAC97B,EAAQ+P,KACrBA,GAAY,CAAE,GAAE,OAAO,CAAC/P,EAAQpvB,IAAS,CAC/C,MAAM8/B,EAAU+rB,GAAe7rD,CAAI,EACnC,GAAI,CAAC8/B,EACH,MAAM,IAAI,MAAM,qCAAqC9/B,CAAI,GAAG,EAE9DomB,OAAAA,GAAI,sBAAuBpmB,CAAI,EACxB8/B,EAAQ,UAAU1Q,CAAM,CAChC,EAAEA,CAAM,EC7RX,SAAS08B,GAAepiD,EAAK,CAC3B,IAAIlF,EAAM,IAAI,WAAWkF,EAAI,OAAO,CAACiJ,EAAK4hB,IAEjC5hB,EAAMo5C,EAAe,eAAex3B,CAAI,EAC9C,CAAC,CAAC,EACDlrB,EAAS,EAEb,UAAWD,KAAOM,EAChBlF,EAAMwnD,GAAa,OAAC5iD,EAAK5E,EAAK6E,CAAM,EAGpCA,GAAU0iD,EAAe,eAAe3iD,CAAG,EAG7C,OAAO5E,CACT,CClBO,MAAMynD,EAAc,CAMzB,YAAahgD,EAAKigD,EAAUC,EAAU,CAEpC,KAAK,YAAc,EAEnB,KAAK,IAAMlgD,EACX,KAAK,SAAWigD,GAAY,EAC5B,KAAK,SAAWC,CACjB,CAED,KAAO,CACL,KAAK,aAAe,CACrB,CAED,KAAO,CACL,KAAK,YAAc,KAAK,IAAI,EAAG,KAAK,YAAc,CAAC,CACpD,CAED,SAAW,CACT,OAAO,KAAK,YAAc,CAC3B,CAGD,IAAK,OAAO,WAAW,GAAK,CAE1B,MAAO,uBADQ,KAAK,IAAI,SAASnnD,CAAS,CACN,eAAe,KAAK,QAAQ,WAAW,KAAK,WAAW,GAC5F,CAKD,OAAQuH,EAAO,CACb,OAAQ,KAAK,cAAgBA,EAAM,aACjC,KAAK,IAAI,OAAOA,EAAM,GAAG,GACzB,KAAK,WAAaA,EAAM,UACxB,KAAK,WAAaA,EAAM,QAC3B,CACH,CCzCA,MAAMxG,GAAUC,EAAU,OAAQC,GAAUD,EAAU,OAAQE,EAAQF,EAAU,KAG1EG,EAAQH,EAAU,MAAM,cAAc,IAAMA,EAAU,MAAM,cAAc,EAAI,CAAA,GAEvEomD,GAAUjmD,EAAM,SAAW,IAAM,CAqB1C,SAASimD,EAAQ/lD,EAAG,CAIhB,GAHA,KAAK,OAAS,GACd,KAAK,QAAU,GACf,KAAK,eAAiB,GAClBA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAisD,EAAQ,UAAU,SAAW,KAQ7BA,EAAQ,UAAU,OAASlmD,EAAM,WAQjCkmD,EAAQ,UAAU,QAAUlmD,EAAM,WAQlCkmD,EAAQ,UAAU,eAAiBlmD,EAAM,WAQzCkmD,EAAQ,UAAU,aAAe,EAWjCA,EAAQ,OAAS,SAAgB7lD,EAAGC,EAAG,CAKnC,GAJKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DJ,EAAM,QAAQ,SAAS,OAAOI,EAAE,SAAUC,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EACrED,EAAE,QAAU,MAAQA,EAAE,OAAO,OAC7B,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,OAAO,OAAQ,EAAEpG,EACnCqG,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,OAAOpG,CAAC,CAAC,EAEtC,GAAIoG,EAAE,SAAW,MAAQA,EAAE,QAAQ,OAC/B,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,QAAQ,OAAQ,EAAEpG,EACpCgG,EAAM,QAAQ,MAAM,OAAOI,EAAE,QAAQpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAE5E,GAAID,EAAE,gBAAkB,MAAQA,EAAE,eAAe,OAC7C,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,eAAe,OAAQ,EAAEpG,EAC3CgG,EAAM,QAAQ,cAAc,OAAOI,EAAE,eAAepG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAI,CAAE,EAAE,OAAM,EAE3F,OAAID,EAAE,cAAgB,MAAQ,OAAO,eAAe,KAAKA,EAAG,cAAc,GACtEC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,YAAY,EAC9BC,CACf,EAaI4lD,EAAQ,OAAS,SAAgB3lD,EAAGC,EAAG,CAC7BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,EAAM,QACpDM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GAAG,CACAL,EAAE,SAAWJ,EAAM,QAAQ,SAAS,OAAOM,EAAGA,EAAE,OAAM,CAAE,EACxD,KACH,CACL,IAAK,GAAG,CACMF,EAAE,QAAUA,EAAE,OAAO,SACvBA,EAAE,OAAS,IACfA,EAAE,OAAO,KAAKE,EAAE,MAAO,CAAA,EACvB,KACH,CACL,IAAK,GAAG,CACMF,EAAE,SAAWA,EAAE,QAAQ,SACzBA,EAAE,QAAU,IAChBA,EAAE,QAAQ,KAAKJ,EAAM,QAAQ,MAAM,OAAOM,EAAGA,EAAE,OAAM,CAAE,CAAC,EACxD,KACH,CACL,IAAK,GAAG,CACMF,EAAE,gBAAkBA,EAAE,eAAe,SACvCA,EAAE,eAAiB,IACvBA,EAAE,eAAe,KAAKJ,EAAM,QAAQ,cAAc,OAAOM,EAAGA,EAAE,OAAM,CAAE,CAAC,EACvE,KACH,CACL,IAAK,GAAG,CACAF,EAAE,aAAeE,EAAE,QACnB,KACH,CACL,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACf,EAUI6lD,EAAQ,WAAa,SAAoBtlD,EAAG,CACxC,GAAIA,aAAaX,EAAM,QACnB,OAAOW,EACX,IAAIP,EAAI,IAAIJ,EAAM,QAClB,GAAIW,EAAE,UAAY,KAAM,CACpB,GAAI,OAAOA,EAAE,UAAa,SACtB,MAAM,UAAU,oCAAoC,EACxDP,EAAE,SAAWJ,EAAM,QAAQ,SAAS,WAAWW,EAAE,QAAQ,CAC5D,CACD,GAAIA,EAAE,OAAQ,CACV,GAAI,CAAC,MAAM,QAAQA,EAAE,MAAM,EACvB,MAAM,UAAU,iCAAiC,EACrDP,EAAE,OAAS,GACX,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,OAAO,OAAQ,EAAE3G,EAC/B,OAAO2G,EAAE,OAAO3G,CAAC,GAAM,SACvB+F,EAAM,OAAO,OAAOY,EAAE,OAAO3G,CAAC,EAAGoG,EAAE,OAAOpG,CAAC,EAAI+F,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,OAAO3G,CAAC,CAAC,CAAC,EAAG,CAAC,EAC9F2G,EAAE,OAAO3G,CAAC,EAAE,QAAU,IAC3BoG,EAAE,OAAOpG,CAAC,EAAI2G,EAAE,OAAO3G,CAAC,EAEnC,CACD,GAAI2G,EAAE,QAAS,CACX,GAAI,CAAC,MAAM,QAAQA,EAAE,OAAO,EACxB,MAAM,UAAU,kCAAkC,EACtDP,EAAE,QAAU,GACZ,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,QAAQ,OAAQ,EAAE3G,EAAG,CACvC,GAAI,OAAO2G,EAAE,QAAQ3G,CAAC,GAAM,SACxB,MAAM,UAAU,mCAAmC,EACvDoG,EAAE,QAAQpG,CAAC,EAAIgG,EAAM,QAAQ,MAAM,WAAWW,EAAE,QAAQ3G,CAAC,CAAC,CAC7D,CACJ,CACD,GAAI2G,EAAE,eAAgB,CAClB,GAAI,CAAC,MAAM,QAAQA,EAAE,cAAc,EAC/B,MAAM,UAAU,yCAAyC,EAC7DP,EAAE,eAAiB,GACnB,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,eAAe,OAAQ,EAAE3G,EAAG,CAC9C,GAAI,OAAO2G,EAAE,eAAe3G,CAAC,GAAM,SAC/B,MAAM,UAAU,0CAA0C,EAC9DoG,EAAE,eAAepG,CAAC,EAAIgG,EAAM,QAAQ,cAAc,WAAWW,EAAE,eAAe3G,CAAC,CAAC,CACnF,CACJ,CACD,OAAI2G,EAAE,cAAgB,OAClBP,EAAE,aAAeO,EAAE,aAAe,GAE/BP,CACf,EAWI6lD,EAAQ,SAAW,SAAkB7lD,EAAG5D,EAAG,CAClCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAaR,IAZInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,OAAS,GACXA,EAAE,QAAU,GACZA,EAAE,eAAiB,IAEnBnE,EAAE,WACFmE,EAAE,SAAW,KACbA,EAAE,aAAe,GAEjBP,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IACjDO,EAAE,SAAWX,EAAM,QAAQ,SAAS,SAASI,EAAE,SAAU5D,CAAC,GAE1D4D,EAAE,QAAUA,EAAE,OAAO,OAAQ,CAC7BO,EAAE,OAAS,GACX,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,OAAO,OAAQ,EAAErG,EACnC4G,EAAE,OAAO5G,CAAC,EAAIyC,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,OAAOrG,CAAC,EAAG,EAAGqG,EAAE,OAAOrG,CAAC,EAAE,MAAM,EAAIyC,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,OAAOrG,CAAC,CAAC,EAAIqG,EAAE,OAAOrG,CAAC,CAE5K,CACD,GAAIqG,EAAE,SAAWA,EAAE,QAAQ,OAAQ,CAC/BO,EAAE,QAAU,GACZ,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,QAAQ,OAAQ,EAAErG,EACpC4G,EAAE,QAAQ5G,CAAC,EAAIiG,EAAM,QAAQ,MAAM,SAASI,EAAE,QAAQrG,CAAC,EAAGyC,CAAC,CAElE,CACD,GAAI4D,EAAE,gBAAkBA,EAAE,eAAe,OAAQ,CAC7CO,EAAE,eAAiB,GACnB,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,eAAe,OAAQ,EAAErG,EAC3C4G,EAAE,eAAe5G,CAAC,EAAIiG,EAAM,QAAQ,cAAc,SAASI,EAAE,eAAerG,CAAC,EAAGyC,CAAC,CAExF,CACD,OAAI4D,EAAE,cAAgB,MAAQA,EAAE,eAAe,cAAc,IACzDO,EAAE,aAAeP,EAAE,cAEhBO,CACf,EASIslD,EAAQ,UAAU,OAAS,UAAkB,CACzC,OAAO,KAAK,YAAY,SAAS,KAAMpmD,EAAU,KAAK,aAAa,CAC3E,EAUIomD,EAAQ,WAAa,SAAoBC,EAAe,CACpD,OAAIA,IAAkB,SAClBA,EAAgB,uBAEbA,EAAgB,UAC/B,EAEID,EAAQ,SAAY,UAAW,CAkB3B,SAASE,EAASjmD,EAAG,CAEjB,GADA,KAAK,QAAU,GACXA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAmsD,EAAS,UAAU,QAAUpmD,EAAM,WAQnComD,EAAS,UAAU,KAAO,GAW1BA,EAAS,OAAS,SAAgB/lD,EAAGC,EAAG,CAGpC,GAFKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,SAAW,MAAQA,EAAE,QAAQ,OAC/B,QAASpG,EAAI,EAAGA,EAAIoG,EAAE,QAAQ,OAAQ,EAAEpG,EACpCgG,EAAM,QAAQ,SAAS,MAAM,OAAOI,EAAE,QAAQpG,CAAC,EAAGqG,EAAE,OAAO,EAAE,EAAE,KAAM,CAAA,EAAE,SAE/E,OAAID,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,KAAKD,EAAE,IAAI,EACrBC,CACnB,EAaQ8lD,EAAS,OAAS,SAAgB,EAAG5lD,EAAG,CAC9B,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,EAAM,QAAQ,SAC5D,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GAAG,CACML,EAAE,SAAWA,EAAE,QAAQ,SACzBA,EAAE,QAAU,IAChBA,EAAE,QAAQ,KAAKJ,EAAM,QAAQ,SAAS,MAAM,OAAO,EAAG,EAAE,OAAM,CAAE,CAAC,EACjE,KACH,CACL,IAAK,GAAG,CACAI,EAAE,KAAO,EAAE,OACX,KACH,CACL,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQ+lD,EAAS,WAAa,SAAoBxlD,EAAG,CACzC,GAAIA,aAAaX,EAAM,QAAQ,SAC3B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,EAAM,QAAQ,SAC1B,GAAIW,EAAE,QAAS,CACX,GAAI,CAAC,MAAM,QAAQA,EAAE,OAAO,EACxB,MAAM,UAAU,2CAA2C,EAC/DP,EAAE,QAAU,GACZ,QAASpG,EAAI,EAAGA,EAAI2G,EAAE,QAAQ,OAAQ,EAAE3G,EAAG,CACvC,GAAI,OAAO2G,EAAE,QAAQ3G,CAAC,GAAM,SACxB,MAAM,UAAU,4CAA4C,EAChEoG,EAAE,QAAQpG,CAAC,EAAIgG,EAAM,QAAQ,SAAS,MAAM,WAAWW,EAAE,QAAQ3G,CAAC,CAAC,CACtE,CACJ,CACD,OAAI2G,EAAE,MAAQ,OACVP,EAAE,KAAO,EAAQO,EAAE,MAEhBP,CACnB,EAWQ+lD,EAAS,SAAW,SAAkB/lD,EAAG5D,EAAG,CACnCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EAOR,IANInE,EAAE,QAAUA,EAAE,YACdmE,EAAE,QAAU,IAEZnE,EAAE,WACFmE,EAAE,KAAO,IAETP,EAAE,SAAWA,EAAE,QAAQ,OAAQ,CAC/BO,EAAE,QAAU,GACZ,QAAS5G,EAAI,EAAGA,EAAIqG,EAAE,QAAQ,OAAQ,EAAErG,EACpC4G,EAAE,QAAQ5G,CAAC,EAAIiG,EAAM,QAAQ,SAAS,MAAM,SAASI,EAAE,QAAQrG,CAAC,EAAGyC,CAAC,CAE3E,CACD,OAAI4D,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOP,EAAE,MAERO,CACnB,EASQwlD,EAAS,UAAU,OAAS,UAAkB,CAC1C,OAAO,KAAK,YAAY,SAAS,KAAMtmD,EAAU,KAAK,aAAa,CAC/E,EAUQsmD,EAAS,WAAa,SAAoBD,EAAe,CACrD,OAAIA,IAAkB,SAClBA,EAAgB,uBAEbA,EAAgB,mBACnC,EASQC,EAAS,SAAY,UAAW,CAC5B,MAAMtlD,EAAa,CAAA,EAAIC,EAAS,OAAO,OAAOD,CAAU,EACxD,OAAAC,EAAOD,EAAW,CAAC,EAAI,OAAO,EAAI,EAClCC,EAAOD,EAAW,CAAC,EAAI,MAAM,EAAI,EAC1BC,CACnB,IAEQqlD,EAAS,MAAS,UAAW,CAqBzB,SAASC,EAAMlmD,EAAG,CACd,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAosD,EAAM,UAAU,MAAQrmD,EAAM,UAAU,CAAE,CAAA,EAQ1CqmD,EAAM,UAAU,SAAW,EAQ3BA,EAAM,UAAU,OAAS,GAQzBA,EAAM,UAAU,SAAW,EAQ3BA,EAAM,UAAU,aAAe,GAW/BA,EAAM,OAAS,SAAgBhmD,EAAGC,EAAG,CACjC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,OAAS,MAAQ,OAAO,eAAe,KAAKA,EAAG,OAAO,GACxDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,KAAK,EAC1BA,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,QAAQ,EAC7BA,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,KAAKD,EAAE,MAAM,EAC1BA,EAAE,UAAY,MAAQ,OAAO,eAAe,KAAKA,EAAG,UAAU,GAC9DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,QAAQ,EAC7BA,EAAE,cAAgB,MAAQ,OAAO,eAAe,KAAKA,EAAG,cAAc,GACtEC,EAAE,OAAO,EAAE,EAAE,KAAKD,EAAE,YAAY,EAC7BC,CACvB,EAaY+lD,EAAM,OAAS,SAAgB9lD,EAAGC,EAAG,CAC3BD,aAAaV,KACfU,EAAIV,GAAQ,OAAOU,CAAC,GAExB,QADIE,EAAID,IAAM,OAAYD,EAAE,IAAMA,EAAE,IAAMC,EAAGH,EAAI,IAAIJ,EAAM,QAAQ,SAAS,MACrEM,EAAE,IAAME,GAAG,CACd,IAAIC,EAAIH,EAAE,SACV,OAAQG,IAAM,EAAC,CACf,IAAK,GAAG,CACAL,EAAE,MAAQE,EAAE,QACZ,KACH,CACL,IAAK,GAAG,CACAF,EAAE,SAAWE,EAAE,QACf,KACH,CACL,IAAK,GAAG,CACAF,EAAE,OAASE,EAAE,OACb,KACH,CACL,IAAK,GAAG,CACAF,EAAE,SAAWE,EAAE,QACf,KACH,CACL,IAAK,GAAG,CACAF,EAAE,aAAeE,EAAE,OACnB,KACH,CACL,QACIA,EAAE,SAASG,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACvB,EAUYgmD,EAAM,WAAa,SAAoBzlD,EAAG,CACtC,GAAIA,aAAaX,EAAM,QAAQ,SAAS,MACpC,OAAOW,EACX,IAAIP,EAAI,IAAIJ,EAAM,QAAQ,SAAS,MAanC,OAZIW,EAAE,OAAS,OACP,OAAOA,EAAE,OAAU,SACnBZ,EAAM,OAAO,OAAOY,EAAE,MAAOP,EAAE,MAAQL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,KAAK,CAAC,EAAG,CAAC,EAClFA,EAAE,MAAM,QAAU,IACvBP,EAAE,MAAQO,EAAE,QAEhBA,EAAE,UAAY,OACdP,EAAE,SAAWO,EAAE,SAAW,GAE1BA,EAAE,QAAU,OACZP,EAAE,OAAS,EAAQO,EAAE,QAEjBA,EAAE,SAAQ,CAClB,IAAK,QACL,IAAK,GACDP,EAAE,SAAW,EACb,MACJ,IAAK,OACL,IAAK,GACDA,EAAE,SAAW,EACb,KACH,CACD,OAAIO,EAAE,cAAgB,OAClBP,EAAE,aAAe,EAAQO,EAAE,cAExBP,CACvB,EAWYgmD,EAAM,SAAW,SAAkBhmD,EAAG5D,EAAG,CAChCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,MAAQ,IAEVA,EAAE,MAAQ,GACNnE,EAAE,QAAU,QACZmE,EAAE,MAAQZ,EAAM,UAAUY,EAAE,KAAK,IAEzCA,EAAE,SAAW,EACbA,EAAE,OAAS,GACXA,EAAE,SAAWnE,EAAE,QAAU,OAAS,QAAU,EAC5CmE,EAAE,aAAe,IAEjBP,EAAE,OAAS,MAAQA,EAAE,eAAe,OAAO,IAC3CO,EAAE,MAAQnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,MAAO,EAAGA,EAAE,MAAM,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,KAAK,EAAIA,EAAE,OAE7IA,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IACjDO,EAAE,SAAWP,EAAE,UAEfA,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IAC7CO,EAAE,OAASP,EAAE,QAEbA,EAAE,UAAY,MAAQA,EAAE,eAAe,UAAU,IACjDO,EAAE,SAAWnE,EAAE,QAAU,OAASwD,EAAM,QAAQ,SAAS,SAASI,EAAE,QAAQ,EAAIA,EAAE,UAElFA,EAAE,cAAgB,MAAQA,EAAE,eAAe,cAAc,IACzDO,EAAE,aAAeP,EAAE,cAEhBO,CACvB,EASYylD,EAAM,UAAU,OAAS,UAAkB,CACvC,OAAO,KAAK,YAAY,SAAS,KAAMvmD,EAAU,KAAK,aAAa,CACnF,EAUYumD,EAAM,WAAa,SAAoBF,EAAe,CAClD,OAAIA,IAAkB,SAClBA,EAAgB,uBAEbA,EAAgB,yBACvC,EAEmBE,CACnB,IAEeD,CACf,IAEIF,EAAQ,MAAS,UAAW,CAkBxB,SAAS7rB,EAAMl6B,EAAG,CACd,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAogC,EAAM,UAAU,OAASr6B,EAAM,UAAU,CAAE,CAAA,EAQ3Cq6B,EAAM,UAAU,KAAOr6B,EAAM,UAAU,CAAE,CAAA,EAWzCq6B,EAAM,OAAS,SAAgBh6B,EAAGC,EAAG,CACjC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,QAAU,MAAQ,OAAO,eAAe,KAAKA,EAAG,QAAQ,GAC1DC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,MAAM,EAC3BA,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,IAAI,EACtBC,CACnB,EAaQ+5B,EAAM,OAAS,SAAgB,EAAG75B,EAAG,CAC3B,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,EAAM,QAAQ,MAC5D,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GAAG,CACAL,EAAE,OAAS,EAAE,QACb,KACH,CACL,IAAK,GAAG,CACAA,EAAE,KAAO,EAAE,QACX,KACH,CACL,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQg6B,EAAM,WAAa,SAAoBz5B,EAAG,CACtC,GAAIA,aAAaX,EAAM,QAAQ,MAC3B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,EAAM,QAAQ,MAC1B,OAAIW,EAAE,QAAU,OACR,OAAOA,EAAE,QAAW,SACpBZ,EAAM,OAAO,OAAOY,EAAE,OAAQP,EAAE,OAASL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,MAAM,CAAC,EAAG,CAAC,EACrFA,EAAE,OAAO,QAAU,IACxBP,EAAE,OAASO,EAAE,SAEjBA,EAAE,MAAQ,OACN,OAAOA,EAAE,MAAS,SAClBZ,EAAM,OAAO,OAAOY,EAAE,KAAMP,EAAE,KAAOL,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,IAAI,CAAC,EAAG,CAAC,EAC/EA,EAAE,KAAK,QAAU,IACtBP,EAAE,KAAOO,EAAE,OAEZP,CACnB,EAWQg6B,EAAM,SAAW,SAAkBh6B,EAAG5D,EAAG,CAChCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,OAAS,IAEXA,EAAE,OAAS,GACPnE,EAAE,QAAU,QACZmE,EAAE,OAASZ,EAAM,UAAUY,EAAE,MAAM,IAEvCnE,EAAE,QAAU,OACZmE,EAAE,KAAO,IAETA,EAAE,KAAO,GACLnE,EAAE,QAAU,QACZmE,EAAE,KAAOZ,EAAM,UAAUY,EAAE,IAAI,KAGvCP,EAAE,QAAU,MAAQA,EAAE,eAAe,QAAQ,IAC7CO,EAAE,OAASnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,OAAQ,EAAGA,EAAE,OAAO,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,MAAM,EAAIA,EAAE,QAEjJA,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,KAAM,EAAGA,EAAE,KAAK,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,IAAI,EAAIA,EAAE,MAEtIO,CACnB,EASQy5B,EAAM,UAAU,OAAS,UAAkB,CACvC,OAAO,KAAK,YAAY,SAAS,KAAMv6B,EAAU,KAAK,aAAa,CAC/E,EAUQu6B,EAAM,WAAa,SAAoB8rB,EAAe,CAClD,OAAIA,IAAkB,SAClBA,EAAgB,uBAEbA,EAAgB,gBACnC,EAEe9rB,CACf,IASI6rB,EAAQ,kBAAqB,UAAW,CACpC,MAAMplD,EAAa,CAAA,EAAIC,EAAS,OAAO,OAAOD,CAAU,EACxD,OAAAC,EAAOD,EAAW,CAAC,EAAI,MAAM,EAAI,EACjCC,EAAOD,EAAW,CAAC,EAAI,UAAU,EAAI,EAC9BC,CACf,IAEImlD,EAAQ,cAAiB,UAAW,CAkBhC,SAASI,EAAcnmD,EAAG,CACtB,GAAIA,EACA,QAASC,EAAK,OAAO,KAAKD,CAAC,EAAGlG,EAAI,EAAGA,EAAImG,EAAG,OAAQ,EAAEnG,EAC9CkG,EAAEC,EAAGnG,CAAC,CAAC,GAAK,OACZ,KAAKmG,EAAGnG,CAAC,CAAC,EAAIkG,EAAEC,EAAGnG,CAAC,CAAC,EACpC,CAQD,OAAAqsD,EAAc,UAAU,IAAMtmD,EAAM,UAAU,CAAE,CAAA,EAQhDsmD,EAAc,UAAU,KAAO,EAW/BA,EAAc,OAAS,SAAgBjmD,EAAGC,EAAG,CACzC,OAAKA,IACDA,EAAIP,GAAQ,UACZM,EAAE,KAAO,MAAQ,OAAO,eAAe,KAAKA,EAAG,KAAK,GACpDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,GAAG,EACxBA,EAAE,MAAQ,MAAQ,OAAO,eAAe,KAAKA,EAAG,MAAM,GACtDC,EAAE,OAAO,EAAE,EAAE,MAAMD,EAAE,IAAI,EACtBC,CACnB,EAaQgmD,EAAc,OAAS,SAAgB,EAAG9lD,EAAG,CACnC,aAAaX,KACf,EAAIA,GAAQ,OAAO,CAAC,GAExB,QADIY,EAAID,IAAM,OAAY,EAAE,IAAM,EAAE,IAAMA,EAAGH,EAAI,IAAIJ,EAAM,QAAQ,cAC5D,EAAE,IAAMQ,GAAG,CACd,IAAIC,EAAI,EAAE,SACV,OAAQA,IAAM,EAAC,CACf,IAAK,GAAG,CACAL,EAAE,IAAM,EAAE,QACV,KACH,CACL,IAAK,GAAG,CACAA,EAAE,KAAO,EAAE,QACX,KACH,CACL,QACI,EAAE,SAASK,EAAI,CAAC,EAChB,KACH,CACJ,CACD,OAAOL,CACnB,EAUQimD,EAAc,WAAa,SAAoB1lD,EAAG,CAC9C,GAAIA,aAAaX,EAAM,QAAQ,cAC3B,OAAOW,EACX,IAAIP,EAAI,IAAIJ,EAAM,QAAQ,cAO1B,OANIW,EAAE,KAAO,OACL,OAAOA,EAAE,KAAQ,SACjBZ,EAAM,OAAO,OAAOY,EAAE,IAAKP,EAAE,IAAML,EAAM,UAAUA,EAAM,OAAO,OAAOY,EAAE,GAAG,CAAC,EAAG,CAAC,EAC5EA,EAAE,IAAI,QAAU,IACrBP,EAAE,IAAMO,EAAE,MAEVA,EAAE,KAAI,CACd,IAAK,OACL,IAAK,GACDP,EAAE,KAAO,EACT,MACJ,IAAK,WACL,IAAK,GACDA,EAAE,KAAO,EACT,KACH,CACD,OAAOA,CACnB,EAWQimD,EAAc,SAAW,SAAkBjmD,EAAG5D,EAAG,CACxCA,IACDA,EAAI,CAAA,GACR,IAAImE,EAAI,CAAA,EACR,OAAInE,EAAE,WACEA,EAAE,QAAU,OACZmE,EAAE,IAAM,IAERA,EAAE,IAAM,GACJnE,EAAE,QAAU,QACZmE,EAAE,IAAMZ,EAAM,UAAUY,EAAE,GAAG,IAErCA,EAAE,KAAOnE,EAAE,QAAU,OAAS,OAAS,GAEvC4D,EAAE,KAAO,MAAQA,EAAE,eAAe,KAAK,IACvCO,EAAE,IAAMnE,EAAE,QAAU,OAASuD,EAAM,OAAO,OAAOK,EAAE,IAAK,EAAGA,EAAE,IAAI,MAAM,EAAI5D,EAAE,QAAU,MAAQ,MAAM,UAAU,MAAM,KAAK4D,EAAE,GAAG,EAAIA,EAAE,KAErIA,EAAE,MAAQ,MAAQA,EAAE,eAAe,MAAM,IACzCO,EAAE,KAAOnE,EAAE,QAAU,OAASwD,EAAM,QAAQ,kBAAkBI,EAAE,IAAI,EAAIA,EAAE,MAEvEO,CACnB,EASQ0lD,EAAc,UAAU,OAAS,UAAkB,CAC/C,OAAO,KAAK,YAAY,SAAS,KAAMxmD,EAAU,KAAK,aAAa,CAC/E,EAUQwmD,EAAc,WAAa,SAAoBH,EAAe,CAC1D,OAAIA,IAAkB,SAClBA,EAAgB,uBAEbA,EAAgB,wBACnC,EAEeG,CACf,IAEWJ,CACX,GAAI,ECxmCEK,GAAW,CACf,MAAOL,GAAQ,SAAS,SAAS,MACjC,KAAMA,GAAQ,SAAS,SAAS,IAClC,EAQMM,GAAS,CAAC7wC,EAAI2S,IACX,MAAM,UAAU,MAAM,KAAKA,EAAM,CAAC,EAAE,KAAK,CAACjjB,EAAGlJ,IAAM,CACxD,MAAME,EAAKsZ,EAAGtQ,CAAC,EACT/I,EAAKqZ,EAAGxZ,CAAC,EACf,OAAOE,EAAKC,EAAK,GAAKD,EAAKC,EAAK,EAAI,CACxC,CAAG,EAOI,MAAM8pD,EAAS,CAKpB,YAAa9oB,EAAOjkB,EAAQ,CAE1B,KAAK,IAAMA,EACPotC,GAAW,CACX,KAAM,wBACN,QAASptC,EAAO,OACxB,CAAO,EACC,IAAI,IACR,KAAK,OAASikB,CACf,CAED,IAAI,QAAU,CACZ,OAAO,KAAK,IAAI,IACjB,CAOD,IAAKv3B,EAAKigD,EAAUC,EAAU,CAC5B,MAAMS,EAAS3gD,EAAI,SAASjH,CAAS,EAC/BkiB,EAAQ,KAAK,IAAI,IAAI0lC,CAAM,EAE7B1lC,GACFA,EAAM,IAAK,EACXA,EAAM,SAAWglC,EAGbhlC,EAAM,WAAaulC,GAAS,MAAQN,IAAaM,GAAS,QAC5DvlC,EAAM,SAAWilC,KAGnB,KAAK,IAAI,IAAIS,EAAQ,IAAIL,GAAMtgD,EAAKigD,EAAUC,CAAQ,CAAC,EACnD,KAAK,QACP,KAAK,OAAO,KAAK,KAAM,eAAgB,CAAC,EAG7C,CAKD,OAAQlgD,EAAK,CACX,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EAC/BkiB,EAAQ,KAAK,IAAI,IAAI0lC,CAAM,EAE5B1lC,IAILA,EAAM,IAAK,EAGP,CAAAA,EAAM,YAIV,KAAK,IAAI,OAAO0lC,CAAM,EAClB,KAAK,QACP,KAAK,OAAO,KAAK,KAAM,eAAgB,EAAE,GAE5C,CAKD,YAAaA,EAAQ,CACf,KAAK,IAAI,IAAIA,CAAM,GACrB,KAAK,IAAI,OAAOA,CAAM,CAEzB,CAKD,QAAS/wC,EAAI,CACX,OAAO,KAAK,IAAI,QAAQA,CAAE,CAC3B,CAED,SAAW,CACT,OAAO,KAAK,IAAI,QAAS,CAC1B,CAED,eAAiB,CAGf,OAAO,IAAI,IAAI6wC,GAAO/pD,GAAKA,EAAE,CAAC,EAAE,IAAK,MAAM,KAAK,KAAK,IAAI,QAAO,CAAE,CAAC,CAAC,CACrE,CAKD,SAAUsJ,EAAK,CACb,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EACrC,OAAO,KAAK,IAAI,IAAI4nD,CAAM,CAC3B,CAKD,IAAK3gD,EAAK,CACR,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EACrC,OAAO,KAAK,IAAI,IAAI4nD,CAAM,CAC3B,CACH,CAEAN,GAAS,MAAQC,GCzIjB,MAAMM,GAAgBP,GAAS,MAExB,MAAMQ,EAAoB,CAQ/B,YAAa7gD,EAAKigD,EAAUC,EAAU//B,EAAQ2gC,EAAc,CAC1D,KAAK,MAAQ,IAAIF,GAAc5gD,EAAKigD,EAAUC,CAAQ,EACtD,KAAK,OAAS,EAAQ//B,EACtB,KAAK,aAAe,EAAQ2gC,CAC7B,CAED,IAAI,KAAO,CACT,OAAO,KAAK,MAAM,GACnB,CAED,IAAI,IAAK9gD,EAAK,CACZ,KAAK,MAAM,IAAMA,CAClB,CAED,IAAI,UAAY,CACd,OAAO,KAAK,MAAM,QACnB,CAED,IAAI,SAAUwhC,EAAK,CACjB,KAAK,MAAM,SAAWA,CACvB,CAED,IAAI,UAAY,CACd,OAAO,KAAK,MAAM,QACnB,CAED,IAAI,SAAUA,EAAK,CACjB,KAAK,MAAM,SAAWA,CACvB,CAED,IAAK,OAAO,WAAW,GAAK,CAE1B,MAAO,uBADQ,KAAK,IAAI,SAASzoC,CAAS,CACN,aAAa,KAAK,MAAM,eAAe,KAAK,QAAQ,GACzF,CAKD,OAAQuH,EAAO,CACb,OAAQ,KAAK,SAAWA,EAAM,QACtB,KAAK,eAAiBA,EAAM,cAC5B,KAAK,WAAaA,EAAM,UACzB,KAAK,MAAM,OAAOA,EAAM,KAAK,CACrC,CACH,CChDO,MAAM8Z,GAAS,CAACgD,EAAIu6B,IAAc,CACvC,MAAM5jD,EAAO,CAAC,SAAS,EACvB,OAAI4jD,GACF5jD,EAAK,KAAK4jD,CAAS,EAEjBv6B,GACFrpB,EAAK,KAAK,GAAGqpB,EAAG,WAAW,MAAM,EAAG,CAAC,CAAC,EAAE,EAGnC2jC,EAAahtD,EAAK,KAAK,GAAG,CAAC,CACpC,EAgGaitD,GAAa,CAAC1hD,EAAGlJ,IAAM,CAClC,GAAIkJ,EAAE,OAASlJ,EAAE,KACf,MAAO,GAGT,SAAW,CAACgc,EAAK6uC,CAAM,IAAK3hD,EAAG,CAC7B,MAAM4hD,EAAS9qD,EAAE,IAAIgc,CAAG,EAcxB,GAZI8uC,IAAW,QAOXD,aAAkB,YAAcC,aAAkB,YAAc,CAAC31C,GAAiB01C,EAAQC,CAAM,GAKhGD,aAAkBJ,IAAuBK,aAAkBL,IAAuB,CAACI,EAAO,OAAOC,CAAM,EACzG,MAAO,EAEV,CAED,MAAO,EACT,EC/HO,MAAMC,CAAe,CAI1B,YAAaC,EAAM,CACjB,KAAK,KAAOA,EAEZ,KAAK,SAAW,IAAI,IAGpB,KAAK,OAAS,IAAI,IAGlB,KAAK,eAAiB,IAAI,IAC1B,KAAK,aAAe,CACrB,CAED,IAAI,OAAS,CACX,OAAO,KAAK,OAAO,OAAS,GACrB,KAAK,SAAS,OAAS,GACvB,KAAK,eAAe,OAAS,CACrC,CAWD,SAAUphD,EAAKigD,EAAUC,EAAU//B,EAAQ2gC,EAAc,CACnDZ,GAAY,OACdA,EAAWiB,EAAe,SAAS,OAGrC,MAAMR,EAAS3gD,EAAI,SAASjH,CAAS,EAC/BkiB,EAAQ,KAAK,SAAS,IAAI0lC,CAAM,EAClC1lC,GAEEA,EAAM,WAAailC,IACrBjlC,EAAM,SAAWglC,GAGf9/B,IACFlF,EAAM,OAAS,EAAQkF,GAGrB2gC,IACF7lC,EAAM,aAAe,EAAQ6lC,GAG3BZ,IAAaiB,EAAe,SAAS,OAASlmC,EAAM,WAAakmC,EAAe,SAAS,OAC3FlmC,EAAM,SAAWilC,IAGnB,KAAK,SAAS,IAAIS,EAAQ,IAAIL,GAAMtgD,EAAKigD,EAAUC,EAAU//B,EAAQ2gC,CAAY,CAAC,CAErF,CAOD,SAAU9gD,EAAKmS,EAAO,CACpB,MAAMwuC,EAAS3gD,EAAI,SAASjH,CAAS,EACrC,KAAK,OAAO,IAAI4nD,EAAQxuC,CAAK,CAC9B,CAKD,QAASnS,EAAK,CACZ,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EAChC,KAAK,eAAe,IAAI4nD,CAAM,GACjC,KAAK,eAAe,IAAIA,EAAQQ,EAAe,kBAAkB,IAAI,CAExE,CAKD,YAAanhD,EAAK,CAChB,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EAChC,KAAK,eAAe,IAAI4nD,CAAM,GACjC,KAAK,eAAe,IAAIA,EAAQQ,EAAe,kBAAkB,QAAQ,CAE5E,CAKD,OAAQnhD,EAAK,CACX,MAAM2gD,EAAS3gD,EAAI,SAASjH,CAAS,EACrC,KAAK,SAAS,OAAO4nD,CAAM,EAC3B,KAAK,SAAS3gD,EAAK,EAAGmhD,EAAe,SAAS,MAAO,GAAM,EAAK,CACjE,CAKD,gBAAiBpsD,EAAM,CACrB,KAAK,aAAeA,CACrB,CAQD,uBAAyB,CACvB,MAAMg7C,EAAM,CACV,SAAU,CACR,QAAS,MAAM,KAAK,KAAK,SAAS,QAAQ,EAAE,IAAK90B,IACxC,CACL,MAAOA,EAAM,IAAI,MACjB,SAAU,OAAOA,EAAM,QAAQ,EAC/B,OAAQ,EAAQA,EAAM,MACvB,EACF,EACD,KAAM,KAAK,KAAO,GAAO,MAC1B,EACD,OAAQ,MAAM,KAAK,KAAK,OAAO,OAAM,CAAE,CACxC,EAED,OAAOklC,GAAQ,OAAOpQ,CAAG,EAAE,OAAQ,CACpC,CAQD,uBAAyB,CACvB,MAAMA,EAAM,CACV,SAAU,CACR,QAAS,MAAM,KAAK,KAAK,SAAS,QAAQ,EAAE,IAAK90B,IACxC,CACL,MAAOA,EAAM,IAAI,MACjB,SAAU,OAAOA,EAAM,QAAQ,EAC/B,SAAUA,EAAM,SAChB,OAAQ,EAAQA,EAAM,OACtB,aAAc,EAAQA,EAAM,YAC7B,EACF,EACD,KAAM,KAAK,KAAO,GAAO,MAC1B,EAED,eAAgB,CAAE,EAGlB,QAAS,CAAE,EACX,aAAc,KAAK,YACpB,EAED,SAAW,CAAC0lC,EAAQhoD,CAAI,IAAK,KAAK,OAAO,UAAW,CAClD,MAAMqH,EAAME,EAAI,MAAMygD,CAAM,EACtBhhD,EAAUK,EAAI,QACdqB,EAAQrB,EAAI,KACZZ,EAAYY,EAAI,UAAU,KAC1BqhD,EAAerhD,EAAI,UAAU,OAAO,OACpClJ,EAASwqD,GAAG,CAChB3hD,EAAS0B,EAAOjC,EAAWiiD,CACnC,CAAO,EAEDtR,EAAI,QAAQ,KACV,IAAIoQ,GAAQ,MAAM,CAChB,OAAArpD,EACA,KAAA6B,CACV,CAAS,CACF,CACF,CAED,SAAW,CAACgoD,EAAQY,CAAM,IAAK,KAAK,eAClCxR,EAAI,eAAe,KAAK,IAAIoQ,GAAQ,cAAc,CAChD,IAAKjgD,EAAI,MAAMygD,CAAM,EAAE,MACvB,KAAMY,CACd,CAAO,CAAC,EAGJ,OAAI,KAAK,aAAe,IACtBxR,EAAI,aAAe,KAAK,cAGnBoQ,GAAQ,OAAOpQ,CAAG,EAAE,OAAQ,CACpC,CAMD,OAAQzvC,EAAO,CACb,MAAI,OAAK,OAASA,EAAM,MACpB,KAAK,eAAiBA,EAAM,cAC5B,CAAC0gD,GAAW,KAAK,SAAU1gD,EAAM,QAAQ,GACzC,CAAC0gD,GAAW,KAAK,OAAQ1gD,EAAM,MAAM,GAGrC,CAAC0gD,GAAW,KAAK,eAAgB1gD,EAAM,cAAc,EAM1D,CAED,IAAK,OAAO,WAAW,GAAK,CAC1B,MAAMiiB,EAAO,MAAM,KAAK,KAAK,SAAS,MAAM,EACtCsuB,EAAS,MAAM,KAAK,KAAK,OAAO,MAAM,EAC5C,MAAO,yBAAyB,KAAK,IAAI,WAAWtuB,CAAI,aAAasuB,CAAM,GAC5E,CACH,CAMAsQ,EAAe,YAAc,MAAO19C,EAAK+9C,IAAe,CACtD,MAAMrlD,EAAUgkD,GAAQ,OAAO18C,CAAG,EAE5Bg+C,EAAUtlD,EAAQ,UAAYA,EAAQ,SAAS,MAAS,GACxD4zC,EAAM,IAAIoR,EAAeM,CAAM,EA+BrC,OA7BItlD,EAAQ,UAAYA,EAAQ,SAAS,SACvCA,EAAQ,SAAS,QAAQ,QAAS8e,GAAU,CAC1C,GAAI,CAACA,EAAM,MACT,OAGF,MAAMjb,EAAME,EAAI,OAAO+a,EAAM,KAAK,EAClC80B,EAAI,SAAS/vC,EAAKib,EAAM,UAAY,EAAGA,EAAM,SAAU,EAAQA,EAAM,OAAS,EAAQA,EAAM,YAAa,CAC/G,CAAK,EAGC9e,EAAQ,gBACVA,EAAQ,eAAe,QAASulD,GAAkB,CAChD,GAAI,CAACA,EAAc,IACjB,OAGF,MAAM1hD,EAAME,EAAI,OAAOwhD,EAAc,GAAG,EAEpCA,EAAc,OAASP,EAAe,kBAAkB,KAC1DpR,EAAI,QAAQ/vC,CAAG,EAEf+vC,EAAI,YAAY/vC,CAAG,CAE3B,CAAK,EAKC7D,EAAQ,OAAO,OAAS,GAC1B,MAAM,QAAQ,IAAIA,EAAQ,OAAO,IAAI,MAAO/F,GAAM,CAChD,MAAM8Q,EAAO,MAAMpE,GAAO,OAAO1M,CAAC,EAC5B4J,EAAME,EAAI,SAASgH,CAAI,EAC7B6oC,EAAI,SAAS/vC,EAAK5J,CAAC,CACzB,CAAK,CAAC,EACK25C,IAIL5zC,EAAQ,QAAQ,OAAS,IAC3B,MAAM,QAAQ,IAAIA,EAAQ,QAAQ,IAAI,MAAO/B,GAAM,CACjD,GAAI,CAACA,EAAE,QAAU,CAACA,EAAE,KAClB,OAEF,MAAMY,EAAS2mD,GAAGvnD,EAAE,MAAM,EACpB6pB,EAAajpB,EAAO,CAAC,EACrB4mD,EAAa5mD,EAAO,CAAC,EACrB4iC,EAAU5iC,EAAO,CAAC,EAClByxB,EAASmR,IAAY96B,GAAO,KAAOA,GAAS0+C,GAAc,MAAMA,EAAW,UAAU5jB,CAAO,EAElG,GAAI,CAACnR,EACH,MAAM,IAAIngB,GAAU,yBAA0B,sBAAsB,EAItE,MAAMpF,EAAO,MAAMulB,EAAO,OAAOryB,EAAE,IAAI,EACjC4F,EAAME,EAAI,OAAO+jB,EAAY29B,EAAY16C,CAAI,EACnD6oC,EAAI,SAAS/vC,EAAK5F,EAAE,IAAI,CAC9B,CAAK,CAAC,EACF21C,EAAI,gBAAgB5zC,EAAQ,YAAY,GACjC4zC,EAIX,EAKAoR,EAAe,kBAAqBnhD,GAK3BA,EAAI,MAAM,OAAS,EAG5BmhD,EAAe,MAAQb,GACvBa,EAAe,SAAW,CACxB,MAAOhB,GAAQ,SAAS,SAAS,MACjC,KAAMA,GAAQ,SAAS,SAAS,IAClC,EACAgB,EAAe,kBAAoB,CACjC,KAAMhB,GAAQ,kBAAkB,KAChC,SAAUA,GAAQ,kBAAkB,QACtC,ECrUO,MAAM0B,GAAyB,EAIzBC,GAAe,KAAK,IAAI,EAAG,EAAE,EAAI,EACjCC,GAAe,IACfC,GAAyB,ECK/B,MAAMC,EAAS,CAMpB,YAAaC,EAAYC,EAAarvC,EAAS,CAC7C,KAAK,OAASqvC,EACd,KAAK,QAAUrvC,EACf,KAAK,OAAS,EAMd,KAAK,SAAW,CAAE,EAElB,KAAK,KAAOsH,GAAO8nC,EAAY,UAAU,EACzC,KAAK,YAAcE,GAAS,KAAK,aAAa,KAAK,IAAI,EAAGJ,EAAsB,CACjF,CAKD,WAAYjS,EAAK,CACXA,EAAI,OAIR,KAAK,KAAKA,CAAG,CACd,CAKD,WAAYsS,EAAS,CACnB,KAAK,SAAW,KAAK,SAAS,OAAOA,CAAO,EAC5C,KAAK,YAAa,CACnB,CAKD,cAAgB,CACd,GAAI,CAAC,KAAK,SAAS,OACjB,OAGF,MAAMtS,EAAM,IAAIoQ,EAAQ,EAAK,EAC7B,KAAK,SAAS,QAASllC,GAAU,CAC3BA,EAAM,OACR80B,EAAI,OAAO90B,EAAM,GAAG,EAEpB80B,EAAI,SAAS90B,EAAM,IAAKA,EAAM,QAAQ,CAE9C,CAAK,EACD,KAAK,SAAW,CAAE,EAClB,KAAK,WAAW80B,CAAG,CACpB,CAKD,MAAM,KAAMA,EAAK,CACf,GAAI,CACF,MAAM,KAAK,QAAQ,UAAU,KAAK,MAAM,CACzC,OAA2BnnC,EAAK,CAC/B,KAAK,KAAK,MAAM,8BAA+B,KAAK,OAAO,SAAQ,EAAIA,EAAI,OAAO,EAClF,MACD,CAED,KAAK,KAAK,6BAA8B,KAAK,OAAO,SAAQ,CAAE,EAG9D,KAAK,QAAQ,YAAY,KAAK,OAAQmnC,CAAG,EAAE,MAAOnnC,GAAQ,CACxD,KAAK,KAAK,MAAM,iBAAkBA,EAAI,OAAO,CACnD,CAAK,CACF,CACH,CC7EO,MAAM05C,EAAY,CAOvB,YAAatvC,EAAQF,EAASykB,EAAOjkB,EAAQ,CAE3C,KAAK,MAAQotC,GAAW,CACtB,KAAM,kCACN,QAASptC,EAAO,OACtB,CAAK,EACD,KAAK,SAAW,IAAI+sC,GAAS9oB,EAAOjkB,CAAM,EAE1C,KAAK,QAAUR,EACf,KAAK,OAASykB,EAEd,KAAK,QAAUvkB,EACf,KAAK,KAAOoH,GAAOpH,EAAQ,MAAM,CAClC,CAQD,YAAa4P,EAAMzC,EAAQoiC,EAAO,CAChC,MAAMF,EAAUz/B,EAAK,IAAI,CAAC5iB,EAAK,IACtB,IAAImgD,EAAQ,MAAMngD,EAAKwiD,GAAyB,EAAGrC,EAAQ,SAAS,MAAOhgC,CAAM,CACzF,EAEDkiC,EAAQ,QAAS1kC,GAAM,CAEjBA,EAAE,OACA4kC,EACF,KAAK,SAAS,YAAY5kC,EAAE,IAAI,SAAS5kB,CAAS,CAAC,EAEnD,KAAK,SAAS,OAAO4kB,EAAE,GAAG,GAG5B,KAAK,KAAK,cAAc,EAGxB,KAAK,SAAS,IAAIA,EAAE,IAAKA,EAAE,QAAQ,EAE3C,CAAK,EAGD,UAAWvjB,KAAK,KAAK,MAAM,OAAM,EAC/BA,EAAE,WAAWioD,CAAO,CAEvB,CAMD,kBAAmBrvC,EAAQ,CACzB,IAAIyvC,EAAK,KAAK,MAAM,IAAIzvC,EAAO,UAAU,EAEzC,GAAIyvC,EAAI,CACNA,EAAG,SACH,MACD,CAEDA,EAAK,IAAIR,GAAS,KAAK,QAASjvC,EAAQ,KAAK,OAAO,EAGpD,MAAM0vC,EAAe,IAAIvC,EAAQ,EAAI,EAErC,UAAWllC,KAAS,KAAK,SAAS,QAAO,EACvCynC,EAAa,SAASznC,EAAM,CAAC,EAAE,IAAKA,EAAM,CAAC,EAAE,QAAQ,EAGvD,OAAAwnC,EAAG,WAAWC,CAAY,EAE1B,KAAK,MAAM,IAAI1vC,EAAO,SAAQ,EAAIyvC,CAAE,EAC7BA,CACR,CAMD,iBAAkBzvC,EAAQ,CACxB,MAAMyvC,EAAK,KAAK,MAAM,IAAIzvC,EAAO,UAAU,EAEtCyvC,IAILA,EAAG,SACC,EAAAA,EAAG,OAAS,IAIhB,KAAK,MAAM,OAAOzvC,EAAO,SAAQ,CAAE,EACpC,CASD,WAAY4P,EAAMxmB,EAAU,GAAI,CAC9B,KAAK,YAAYwmB,EAAM,EAAK,EAExBxmB,GAAWA,EAAQ,QACrBA,EAAQ,OAAO,iBAAiB,QAAS,IAAM,CAC7C,KAAK,YAAYwmB,CAAI,CAC7B,CAAO,CAEJ,CAOD,aAAcA,EAAM,CAClB,KAAK,KAAK,oBAAqBA,EAAK,MAAM,EAC1C,KAAK,YAAYA,EAAM,GAAM,EAAI,CAClC,CAOD,YAAaA,EAAM,CACjB,KAAK,KAAK,mBAAoBA,EAAK,MAAM,EACzC,KAAK,YAAYA,EAAM,EAAI,CAC5B,CAKD,gBAAkB,CAChB,OAAO,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE,CACpC,CAKD,UAAW5P,EAAQ,CACjB,KAAK,kBAAkBA,CAAM,CAC9B,CAKD,aAAcA,EAAQ,CACpB,KAAK,iBAAiBA,CAAM,CAC7B,CAED,OAAS,CACR,CAED,MAAQ,CACN,KAAK,MAAM,QAASyvC,GAAO,KAAK,aAAaA,EAAG,MAAM,CAAC,CACxD,CACH,CC3JA,MAAME,GAAa,sBACbC,GAAa,sBACbC,GAAa,sBAEbC,GAA8B,GAC9BC,GAA+B,IAC/BC,GAAkC,IAEjC,IAAAC,GAAA,KAAc,CAYnB,YAAa3vC,EAAQgP,EAASiV,EAAOn7B,EAAU,CAAA,EAAI,CACjD,KAAK,KAAOge,GAAO9G,EAAO,OAAQ,SAAS,EAC3C,KAAK,QAAUA,EACf,KAAK,SAAWgP,EAChB,KAAK,WAAa,CAACqgC,EAAU,EAExBvmD,EAAQ,WAEX,KAAK,WAAW,QAAQwmD,EAAU,EAClC,KAAK,WAAW,QAAQC,EAAU,GAGpC,KAAK,OAAStrB,EACd,KAAK,SAAW,GAGhB,KAAK,eAAiB,KAAK,eAAe,KAAK,IAAI,EACnD,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,EACzD,KAAK,cAAgB,KAAK,cAAc,KAAK,IAAI,EACjD,KAAK,YAAcn7B,EAAQ,WAC3B,KAAK,mBAAqBA,EAAQ,mBAAqB0mD,GACvD,KAAK,oBAAsB1mD,EAAQ,oBAAsB2mD,GACzD,KAAK,uBAAyB3mD,EAAQ,uBAAyB4mD,EAChE,CAED,MAAM,OAAS,CACb,KAAK,SAAW,GAChB,MAAM,KAAK,QAAQ,OAAO,KAAK,WAAY,KAAK,cAAe,CAC7D,kBAAmB,KAAK,mBACxB,mBAAoB,KAAK,mBAC/B,CAAK,EAGD,MAAME,EAAWC,GAAe,CAC9B,UAAW,KAAK,eAChB,aAAc,KAAK,iBACzB,CAAK,EAGD,KAAK,cAAgB,CAAE,EAEvB,UAAW/sB,KAAY,KAAK,WAC1B,KAAK,cAAc,KAAK,MAAM,KAAK,QAAQ,SAASA,EAAU8sB,CAAQ,CAAC,EAIzE,KAAK,QAAQ,iBAAiB,QAAQE,GAAQ,CAC5C,KAAK,eAAeA,EAAK,UAAU,CACzC,CAAK,CACF,CAED,MAAM,MAAQ,CAOZ,GANA,KAAK,SAAW,GAGhB,MAAM,KAAK,QAAQ,SAAS,KAAK,UAAU,EAGvC,KAAK,eAAiB,KAAM,CAC9B,UAAWhmC,KAAM,KAAK,cACpB,KAAK,QAAQ,WAAWA,CAAE,EAG5B,KAAK,cAAgB,CAAE,CACxB,CACF,CAUD,cAAe,CAAE,OAAAmiB,EAAQ,WAAA8jB,GAAc,CACrC,GAAI,CAAC,KAAK,SACR,OAGF,MAAMrzC,EAAa,IAAIC,qBAAkB,KAAK,sBAAsB,EAEpE,QAAQ,UAAU,KAAK,SAAY,CACjC,KAAK,KAAK,6CAA8CsvB,EAAO,KAAK,SAAU8jB,EAAW,UAAU,EAEnG,MAAMh/B,GACJi/B,GAAgB/jB,EAAO,OAAQvvB,EAAW,MAAM,EAChDuzC,GAAW,EACX,MAAO7uD,GAAW,CAChB,gBAAiBiE,KAAQjE,EAAQ,CAC/B,GAAI,CACF,MAAMwH,EAAU,MAAMikD,EAAQ,YAAYxnD,EAAK,SAAU,EAAE,KAAK,WAAW,EAC3E,MAAM,KAAK,SAAS,gBAAgB0qD,EAAW,WAAYnnD,CAAO,CACnE,OAA2B0M,EAAK,CAC/B,KAAK,SAAS,cAAcA,CAAG,EAC/B,KACD,CAGDoH,EAAW,MAAO,CACnB,CACF,CACF,CACP,CAAK,EACE,MAAMpH,GAAO,CACZ,KAAK,KAAKA,CAAG,EACb22B,EAAO,MAAM32B,CAAG,CACxB,CAAO,EACA,QAAQ,IAAM,CACboH,EAAW,MAAO,EAClBuvB,EAAO,MAAO,CACtB,CAAO,CACJ,CAMD,eAAgBvsB,EAAQ,CACtB,KAAK,SAAS,iBAAiBA,CAAM,CACtC,CAMD,kBAAmBA,EAAQ,CACzB,KAAK,SAAS,oBAAoBA,CAAM,CACzC,CAUD,cAAehT,EAAK5D,EAAU,GAAI,CAChC,OAAO,KAAK,QAAQ,eAAe,cAAc4D,EAAK5D,CAAO,CAC9D,CASD,MAAM,eAAgB4D,EAAK5D,EAAS,CAClC,MAAMonD,EAAkB,CAAE,EAC1B,IAAIC,EAAQ,EAEZ,gBAAiBC,KAAY,KAAK,cAAc1jD,EAAK5D,CAAO,EAY1D,GAXA,KAAK,KAAK,0BAA0BsnD,EAAS,EAAE,EAAE,EACjDF,EAAgB,KACd,KAAK,UAAUE,EAAS,GAAItnD,CAAO,EAChC,MAAMwM,GAAO,CAEZ,KAAK,KAAK,MAAMA,CAAG,CAC/B,CAAW,CACJ,EAED66C,IAEIA,IAAUE,GACZ,MAIJ,MAAM,QAAQ,IAAIH,CAAe,CAClC,CASD,MAAM,QAASxjD,EAAK5D,EAAS,CAC3B,MAAM,KAAK,QAAQ,eAAe,QAAQ4D,EAAK5D,CAAO,CACvD,CASD,MAAM,YAAas2B,EAAMqd,EAAK,CAC5B,GAAI,CAAC,KAAK,SAAU,MAAM,IAAI,MAAM,uBAAwB,EAE5D,MAAM6T,EAAWlxB,EAAK,SAAU,EAChC,KAAK,KAAK,oBAAqBkxB,EAAU7T,CAAG,EAG5C,MAAMxQ,EAAS,MADI,MAAM,KAAK,QAAQ,KAAK7M,CAAI,GACf,UAAU,CAACmwB,GAAYD,GAAYD,EAAU,CAAC,EAE9E,MAAMkB,GAAatkB,EAAQwQ,EAAK,KAAK,IAAI,EAEzC,KAAK,iBAAiBrd,EAAMqd,EAAI,MAAM,CACvC,CAUD,MAAM,UAAWrd,EAAMt2B,EAAS,CAC9B,GAAI,CAAC,KAAK,SACR,MAAM,IAAI,MAAM,uBAAwB,EAG1C,OAAO,KAAK,QAAQ,KAAKs2B,EAAMt2B,CAAO,CACvC,CAOD,iBAAkBs2B,EAAMme,EAAQ,CAC9B,MAAM79B,EAAS0f,EAAK,SAAU,EAE9B,GAAI,KAAK,OAAQ,CACf,UAAWvgB,KAAS0+B,EAAO,SACzB,KAAK,OAAO,KAAK79B,EAAQ,WAAYb,EAAM,MAAM,EAGnD,KAAK,OAAO,KAAKa,EAAQ,aAAc69B,EAAO,IAAI,CACnD,CACF,CACH,EAQA,eAAegT,GAActkB,EAAQwQ,EAAK51B,EAAK,CAC7C,GAAI,CAEF,IAAIg7B,EACJ,OAAQ5V,EAAO,KAAK,SAAQ,CAC1B,KAAKojB,GACHxN,EAAapF,EAAI,sBAAuB,EACxC,MACF,KAAK6S,GACL,KAAKC,GACH1N,EAAapF,EAAI,sBAAuB,EACxC,MACF,QACE,MAAM,IAAI,MAAM,qBAAuBxQ,EAAO,KAAK,QAAQ,CAC9D,CAED,MAAMlb,GACJ,CAAC8wB,CAAU,EACX2O,GAAW,EACXvkB,CACD,CACF,OAAQ32B,EAAK,CACZuR,EAAIvR,CAAG,CACX,QAAY,CACR22B,EAAO,MAAO,CACf,CACH,CCrTO,MAAMwkB,EAAO,CAIlB,YAAa/wC,EAAQ,CACnB,KAAK,QAAUA,EACf,KAAK,SAAW,IAAIqtC,GAEpB,KAAK,cAAgB,EACrB,KAAK,WAAa,IAAI,IAEtB,KAAK,WAAa,CAChB,UAAW,EACX,UAAW,CACZ,CACF,CAKD,UAAWvlD,EAAG,CACZ,KAAK,gBACL,KAAK,aAAgB,IAAI,KAAI,EAAI,QAAS,EAC1C,KAAK,WAAW,WAAaA,CAC9B,CAKD,cAAeA,EAAG,CAChB,KAAK,gBACL,KAAK,aAAgB,IAAI,KAAI,EAAI,QAAS,EAC1C,KAAK,WAAW,WAAaA,CAC9B,CASD,MAAOkF,EAAKigD,EAAUC,EAAU,CAC9B,KAAK,SAAS,IAAIlgD,EAAKigD,EAAUC,CAAQ,CAC1C,CAOD,WAAYlgD,EAAK,CACf,KAAK,SAAS,OAAOA,CAAG,CACzB,CAKD,iBAAkBA,EAAK,CACrB,OAAO,KAAK,SAAS,IAAIA,CAAG,CAC7B,CAKD,WAAa,CACX,OAAQ,KAAK,WAAW,WAAa,KAAK,WAAW,UAAY,EAClE,CACH,CCrEO,MAAMgkD,WAAkB,GAAI,CAKjC,YAAa3B,EAAS4B,EAAK,CACzB,MAAO,EACP,KAAK,KAAOA,GAAO,KAAK,aAExB,KAAK,MAAQ,CAAE,EACf,SAAW,CAAClW,EAAG7X,CAAC,IAAKmsB,GAAW,CAAA,EAC9B,KAAK,IAAItU,EAAG7X,CAAC,CAEhB,CAUD,OAAQhiC,EAAG,CACT,GAAIA,EAAI,GAAKA,GAAK,KAAK,MAAM,OAC3B,OAGF,MAAM65C,EAAI,KAAK,MAAM75C,CAAC,EACtB,KAAK,MAAM,OAAOA,EAAG,CAAC,EACtB,MAAMgwD,EAAS,KAAK,MAAMnW,CAAC,EAC3B,KAAK,MAAM,OAAOmW,EAAQ,EAAGnW,CAAC,CAC/B,CAMD,IAAKA,EAAG7X,EAAG,CAGT,GAAI,KAAK,IAAI6X,CAAC,EAAG,CACf,MAAM75C,EAAI,KAAK,QAAQ65C,CAAC,EACxB,KAAK,MAAM,OAAO75C,EAAG,CAAC,CACvB,CAGD,MAAM,IAAI65C,EAAG7X,CAAC,EAGd,MAAMhiC,EAAI,KAAK,MAAM65C,CAAC,EACtB,YAAK,MAAM,OAAO75C,EAAG,EAAG65C,CAAC,EAElB,IACR,CAED,OAAS,CACP,MAAM,MAAO,EACb,KAAK,MAAQ,CAAE,CAChB,CAKD,OAAQA,EAAG,CACT,GAAI,CAAC,KAAK,IAAIA,CAAC,EACb,MAAO,GAGT,MAAM75C,EAAI,KAAK,QAAQ65C,CAAC,EACxB,YAAK,MAAM,OAAO75C,EAAG,CAAC,EACf,MAAM,OAAO65C,CAAC,CACtB,CAKD,QAASA,EAAG,CACV,GAAI,CAAC,KAAK,IAAIA,CAAC,EACb,MAAO,GAGT,MAAM75C,EAAI,KAAK,MAAM65C,CAAC,EACtB,GAAI,KAAK,MAAM75C,CAAC,IAAM65C,EACpB,OAAO75C,EAMT,QAASD,EAAI,EAAGA,EAAI,KAAK,MAAM,OAAQA,IAAK,CAC1C,GAAI,KAAK,MAAMC,EAAID,CAAC,IAAM85C,EAAG,OAAO75C,EAAID,EACxC,GAAI,KAAK,MAAMC,EAAID,CAAC,IAAM85C,EAAG,OAAO75C,EAAID,CACzC,CAED,MAAO,EACR,CAQD,MAAO85C,EAAG,CACR,IAAIoW,EAAQ,EACRC,EAAQ,KAAK,MAAM,OACvB,KAAOD,EAAQC,GAAO,CACpB,MAAMC,EAASF,EAAQC,IAAW,EAC5BH,EAAM,KAAK,MAAM,KAAK,MAAMI,CAAK,EAAGtW,CAAC,EAE3C,GAAIkW,EAAM,EACRE,EAAQE,EAAQ,UACPJ,EAAM,EACfG,EAAQC,MAER,QAAOA,CAEV,CACD,OAAOF,CACR,CAED,CAAE,MAAQ,CACR,UAAWpW,KAAK,KAAK,MACnB,MAAMA,CAIT,CAKD,CAAE,QAAU,CACV,UAAWA,KAAK,KAAK,MAInB,MAAM,KAAK,IAAIA,CAAC,CAInB,CAKD,CAAE,SAAW,CACX,UAAWA,KAAK,KAAK,MAInB,KAAM,CAACA,EAAG,KAAK,IAAIA,CAAC,CAAC,CAIxB,CAED,EAAG,OAAO,QAAQ,GAAK,CACrB,MAAQ,KAAK,QAAS,CACvB,CAQD,QAASuW,EAAIC,EAAS,CACpB,GAAKD,EAIL,UAAWvW,KAAK,KAAK,MACnBuW,EAAG,MAAMC,EAAS,CAAC,CAACxW,EAAwB,KAAK,IAAIA,CAAC,CAAC,CAAE,CAAC,CAE7D,CAQD,aAAczuC,EAAGlJ,EAAG,CAClB,OAAIkJ,EAAE,CAAC,EAAIlJ,EAAE,CAAC,EAAU,GACpBA,EAAE,CAAC,EAAIkJ,EAAE,CAAC,EAAU,EACjB,CACR,CAOD,MAAOA,EAAGlJ,EAAG,CACX,OAAO,KAAK,KAEV,CAACkJ,EAAG,KAAK,IAAIA,CAAC,CAAC,EAEf,CAAClJ,EAAG,KAAK,IAAIA,CAAC,CAAC,CAChB,CACF,CACH,CCxLA,MAAMouD,GAAoB,CACxB,YAAc,CACZ,MAAO,EACR,EAED,OAAS,CAAE,CACb,EASO,MAAMC,EAAa,CAIxB,YAAaC,EAAaF,GAAmB,CAC3C,KAAK,YAAcE,EAEnB,KAAK,QAAU,IAAIV,GAAU,CAAA,EAAIW,GAAU,OAAO,CACnD,CASD,UAAW3xC,EAAQ4xC,EAAO,CACxB,IAAIC,EAAY,KAAK,QAAQ,IAAI7xC,EAAO,UAAU,EAE7C6xC,IACHA,EAAY,IAAIF,GAAU3xC,EAAQ,KAAK,WAAW,GAGpD6xC,EAAU,UAAUD,CAAK,EACzB,KAAK,QAAQ,IAAI5xC,EAAO,SAAQ,EAAI6xC,CAAS,CAC9C,CAYD,SAAUC,EAAgB,CAGxB,MAAMD,EAAY,KAAK,MAAO,EAC9B,GAAIA,IAAc,OAChB,MAAO,CAAE,MAAO,GAAI,YAAa,CAAG,EAGtC,KAAM,CAAE,MAAAD,EAAO,YAAAG,CAAW,EAAKF,EAAU,SAASC,CAAc,EAChE,GAAIF,EAAM,SAAW,EACnB,MAAO,CAAE,MAAAA,EAAO,YAAAG,CAAa,EAG/B,MAAM/xC,EAAS6xC,EAAU,OACzB,OAAIA,EAAU,SAEZ,KAAK,QAAQ,OAAO7xC,EAAO,SAAQ,CAAE,EAIrC,KAAK,QAAQ,OAAO,CAAC,EAGhB,CACL,OAAAA,EAAQ,MAAA4xC,EAAO,YAAAG,CAChB,CACF,CAMD,OAAS,CAEP,GAAI,KAAK,QAAQ,OAAS,EAK1B,SAAW,CAAG,CAAA7uB,CAAC,IAAK,KAAK,QACvB,OAAOA,CAIV,CASD,OAAQmkB,EAAOrnC,EAAQ,CACrB,MAAM6xC,EAAY,KAAK,QAAQ,IAAI7xC,EAAO,UAAU,EACpD6xC,GAAaA,EAAU,OAAOxK,CAAK,CACpC,CASD,UAAWrnC,EAAQ4xC,EAAO,CACxB,MAAMC,EAAY,KAAK,QAAQ,IAAI7xC,EAAO,UAAU,EACpD,GAAI,CAAC6xC,EACH,OAGF,MAAM3wD,EAAI,KAAK,QAAQ,QAAQ8e,EAAO,UAAU,EAChD,UAAWgyC,KAAQJ,EACjBC,EAAU,SAASG,CAAI,EAMzB,KAAK,QAAQ,OAAO9wD,CAAC,CACtB,CACH,CAKA,MAAMywD,EAAU,CAKd,YAAa3xC,EAAQ0xC,EAAY,CAC/B,KAAK,OAAS1xC,EACd,KAAK,YAAc0xC,EACnB,KAAK,iBAAmB,EACxB,KAAK,SAAW,IAAIO,GACpB,KAAK,QAAU,IAAI,GACpB,CAQD,UAAWL,EAAO,CAChB,UAAW,KAAKA,EACd,KAAK,UAAU,CAAC,CAEnB,CAQD,UAAWI,EAAM,CAGf,GAAI,CAAC,KAAK,gCAAgCA,CAAI,EAC5C,OAIF,MAAME,EAAe,KAAK,SAAS,IAAIF,EAAK,KAAK,EACjD,GAAIE,EAAc,CAEZF,EAAK,SAAWE,EAAa,UAE/B,KAAK,SAAS,eAAeF,EAAK,MAAOA,EAAK,QAAQ,EAIxD,KAAK,YAAY,MAAMA,EAAME,CAAY,EAIzC,MACD,CAGD,KAAK,SAAS,IAAIF,CAAI,CACvB,CAUD,gCAAiCA,EAAM,CACrC,MAAMG,EAAiB,CAAE,EACzB,UAAWC,KAAc,KAAK,QACxBA,EAAW,QAAUJ,EAAK,OAC5BG,EAAe,KAAKC,CAAU,EAKlC,OAAID,EAAe,SAAW,EACrB,GAGF,KAAK,YAAY,WAAWH,EAAMG,CAAc,CACxD,CAQD,SAAUL,EAAgB,CACxB,IAAI/vD,EAAO,EACX,MAAM6vD,EAAQ,CAAE,EAIVS,EAAe,KAAK,SAAS,MAAO,EAC1C,QAASnxD,EAAI,EAAGA,EAAImxD,EAAa,QAAUtwD,EAAO+vD,EAAgB5wD,IAAK,CACrE,MAAM8wD,EAAOK,EAAanxD,CAAC,EAC3B0wD,EAAM,KAAKI,CAAI,EACfjwD,GAAQiwD,EAAK,KAGb,KAAK,SAAS,OAAOA,EAAK,KAAK,EAC/B,KAAK,kBAAoBA,EAAK,KAC9B,KAAK,QAAQ,IAAIA,CAAI,CACtB,CAED,MAAO,CACL,MAAAJ,EAAO,YAAa,KAAK,SAAS,SACnC,CACF,CASD,SAAUI,EAAM,CACV,KAAK,QAAQ,IAAIA,CAAI,IACvB,KAAK,kBAAoBA,EAAK,KAC9B,KAAK,QAAQ,OAAOA,CAAI,EAE3B,CAQD,OAAQ3K,EAAO,CACb,KAAK,SAAS,OAAOA,CAAK,CAC3B,CAOD,QAAU,CACR,OAAO,KAAK,SAAS,SAAW,GAAK,KAAK,QAAQ,OAAS,CAC5D,CAUD,OAAO,QAAS/6C,EAAGlJ,EAAG,CAEpB,OAAIkJ,EAAE,CAAC,EAAE,SAAS,SAAW,EACpB,EAELlJ,EAAE,CAAC,EAAE,SAAS,SAAW,EACpB,GAILkJ,EAAE,CAAC,EAAE,mBAAqBlJ,EAAE,CAAC,EAAE,iBAE1BA,EAAE,CAAC,EAAE,SAAS,OAASkJ,EAAE,CAAC,EAAE,SAAS,OAIvCA,EAAE,CAAC,EAAE,iBAAmBlJ,EAAE,CAAC,EAAE,gBACrC,CACH,CAKA,MAAM6uD,EAAa,CACjB,aAAe,CAEb,KAAK,OAAS,IAAIjB,GAAU,CAAA,EAAI,KAAK,QAAQ,CAC9C,CAED,IAAI,QAAU,CACZ,OAAO,KAAK,OAAO,IACpB,CAOD,IAAI,WAAa,CACf,MAAO,CAAC,GAAG,KAAK,OAAO,OAAM,CAAE,EAAE,OAAO,CAAC1kD,EAAG,IAAMA,EAAI,EAAE,KAAK,KAAM,CAAC,CACrE,CAMD,IAAK+6C,EAAO,CACV,OAAQ,KAAK,OAAO,IAAIA,CAAK,GAAK,CAAA,GAAI,IACvC,CAKD,IAAK2K,EAAM,CACT,KAAK,OAAO,IAAIA,EAAK,MAAO,CAC1B,QAAS,KAAK,IAAK,EACnB,KAAAA,CACN,CAAK,CACF,CAMD,OAAQ3K,EAAO,CACb,KAAK,OAAO,OAAOA,CAAK,CACzB,CAGD,OAAS,CACP,MAAO,CAAC,GAAG,KAAK,OAAO,OAAM,CAAE,EAAE,IAAInmD,GAAKA,EAAE,IAAI,CACjD,CASD,eAAgBmmD,EAAO4F,EAAU,CAC/B,MAAMlnC,EAAM,KAAK,OAAO,IAAIshC,CAAK,EACjC,GAAI,CAACthC,EACH,OAGF,MAAM7kB,EAAI,KAAK,OAAO,QAAQmmD,CAAK,EACnCthC,EAAI,KAAK,SAAWknC,EACpB,KAAK,OAAO,OAAO/rD,CAAC,CACrB,CAUD,SAAUoL,EAAGlJ,EAAG,CACd,OAAIkJ,EAAE,CAAC,EAAE,KAAK,WAAalJ,EAAE,CAAC,EAAE,KAAK,SAE5BkJ,EAAE,CAAC,EAAE,QAAUlJ,EAAE,CAAC,EAAE,QAGtBA,EAAE,CAAC,EAAE,KAAK,SAAWkJ,EAAE,CAAC,EAAE,KAAK,QACvC,CACH,CCjaO,MAAMgmD,GAAa,CASxB,WAAYN,EAAMG,EAAgB,CAChC,IAAII,EAAY,GACZC,EAAc,GAClB,UAAWC,KAAYN,EACjBM,EAAS,KAAK,YAChBF,EAAY,IAGVE,EAAS,KAAK,cAChBD,EAAc,IAalB,MAPI,IAACA,GAAeR,EAAK,KAAK,aAO1B,CAACO,GAAaP,EAAK,KAAK,UAK7B,EASD,MAAOU,EAASR,EAAc,CAkB5B,MAAMS,EAAWD,EAAQ,KACnBE,EAAeV,EAAa,KAK9B,CAACU,EAAa,WAAaD,EAAS,YACtCC,EAAa,UAAYD,EAAS,UAClCC,EAAa,UAAYD,EAAS,WAIhC,CAACC,EAAa,aAAeD,EAAS,cAExCC,EAAa,YAAc,IAEvB,CAACA,EAAa,WAAaD,EAAS,aAEtCC,EAAa,UAAYD,EAAS,UAClCT,EAAa,KAAOQ,EAAQ,OAM5BE,EAAa,aAAeA,EAAa,YAC3CV,EAAa,KAAOU,EAAa,UAEpC,CACH,ECnFMpF,GAAWL,EAAQ,SAQnB0F,GAAsB,GAAK,KAO3BC,GAAkC,KAEjC,MAAMC,EAAe,CAW1B,YAAa/yC,EAAQ8S,EAAYhT,EAASykB,EAAOjkB,EAAQ8C,EAAO,GAAI,CAClE,KAAK,KAAOgE,GAAOpH,EAAQ,QAAQ,EACnC,KAAK,WAAa8S,EAClB,KAAK,QAAUhT,EACf,KAAK,OAASykB,EACd,KAAK,MAAQ,KAAK,aAAanhB,CAAI,EAInC,KAAK,UAAYsqC,GAAW,CAC1B,KAAM,0BACN,QAASptC,EAAO,OACtB,CAAK,EACD,KAAK,SAAW,GAGhB,KAAK,cAAgB,IAAImxC,GAAaa,EAAU,CACjD,CAQD,aAAclvC,EAAM,CAClB,MAAO,CACL,2BAA4B0vC,GAC5B,kBAAmBD,GACnB,GAAGzvC,CACJ,CACF,CAED,uBAAyB,CACvB,WAAW,IAAM,CACf,KAAK,cAAe,CAC1B,CAAK,CACF,CAMD,MAAM,eAAiB,CACrB,GAAI,CAAC,KAAK,SACR,OAGF,KAAM,CAAE,OAAApD,EAAQ,MAAA4xC,EAAO,YAAAG,GAAgB,KAAK,cAAc,SAAS,KAAK,MAAM,iBAAiB,EAE/F,GAAIH,EAAM,SAAW,EACnB,OAIF,MAAM7U,EAAM,IAAIoQ,EAAQ,EAAK,EAG7BpQ,EAAI,gBAAgBgV,CAAW,EAG/B,MAAMiB,EAAY,CAAE,EACdC,EAAa,IAAI,IACvB,UAAWjB,KAAQJ,EAAO,CACxB,MAAM5kD,EAAME,EAAI,MAAM8kD,EAAK,KAAK,EAC5BA,EAAK,KAAK,UACRA,EAAK,KAAK,aACZgB,EAAU,KAAKhmD,CAAG,EAClBimD,EAAW,IAAIjB,EAAK,MAAOA,EAAK,IAAI,GAGpCjV,EAAI,QAAQ/vC,CAAG,EAIjB+vC,EAAI,YAAY/vC,CAAG,CAEtB,CAED,MAAM6wC,EAAS,MAAM,KAAK,WAAWmV,CAAS,EAC9C,SAAW,CAAC3L,EAAOsL,CAAQ,IAAKM,EAAY,CAC1C,MAAMjmD,EAAME,EAAI,MAAMm6C,CAAK,EACrB6L,EAAMrV,EAAO,IAAIwJ,CAAK,EAExB6L,EAEFnW,EAAI,SAAS/vC,EAAKkmD,CAAG,EAIjBP,EAAS,cACX5V,EAAI,YAAY/vC,CAAG,CAGxB,CAGD,GAAI+vC,EAAI,MAAO,CACb/8B,GAAU,KAAK,cAAc,UAAUA,EAAQ4xC,CAAK,EAGpD,KAAK,sBAAuB,EAE5B,MACD,CAED,GAAI,CAEF5xC,GAAU,MAAM,KAAK,QAAQ,YAAYA,EAAQ+8B,CAAG,EAGpD,SAAW,CAAC4Q,EAAQxuC,CAAK,IAAK0+B,EAAO,QAAO,EAC1C79B,GAAU,KAAK,YAAYA,EAAQ9S,EAAI,MAAMygD,CAAM,EAAGxuC,CAAK,CAE9D,OAAQvJ,EAAK,CACZ,KAAK,KAAK,MAAMA,CAAG,CACpB,CAGDoK,GAAU,KAAK,cAAc,UAAUA,EAAQ4xC,CAAK,EAGpD,KAAK,sBAAuB,CAC7B,CAMD,gBAAiB5xC,EAAQ,CACvB,MAAM1H,EAAY0H,EAAO,SAAU,EAC7BmzC,EAAS,KAAK,UAAU,IAAI76C,CAAS,EAC3C,OAAO66C,EAASA,EAAO,SAAS,cAAe,EAAG,IAAI,GACvD,CAKD,cAAenzC,EAAQ,CACrB,MAAM1H,EAAY0H,EAAO,SAAU,EAE7BmzC,EAAS,KAAK,UAAU,IAAI76C,CAAS,EAE3C,OAAK66C,EAIE,CACL,KAAMA,EAAO,QACb,MAAOA,EAAO,UAAW,EACzB,KAAMA,EAAO,WAAW,UACxB,KAAMA,EAAO,WAAW,UACxB,UAAWA,EAAO,aACnB,EATQ,IAUV,CAKD,OAAS,CACP,OAAO,MAAM,KAAK,KAAK,UAAU,QAAQ,EAAE,IAAK1rD,GAAMA,EAAE,OAAO,CAChE,CAQD,eAAgBo2C,EAAQ,CACtB,GAAKA,EAAO,OAKZ,WAAWsV,KAAU,KAAK,UAAU,OAAM,EACxC,UAAWh0C,KAAS0+B,EAAQ,CAE1B,MAAMuV,EAAOD,EAAO,iBAAiBh0C,EAAM,GAAG,EAE9C,GAAI,CAACi0C,EACH,SAKF,MAAMtkB,EAAY3vB,EAAM,KAAK,OACvBqzC,EAAc,KAAK,aAAaY,EAAK,SAAUtkB,CAAS,EAE9D,IAAIukB,EAAYvkB,EACX0jB,IACHa,EAAYlG,EAAQ,kBAAkBiG,EAAK,GAAG,GAGhD,KAAK,cAAc,UAAUD,EAAO,QAAS,CAAC,CAC5C,MAAOC,EAAK,IAAI,SAASrtD,CAAS,EAClC,SAAUqtD,EAAK,SACf,KAAMC,EACN,KAAM,CACJ,UAAAvkB,EACA,YAAA0jB,EACA,UAAW,GACX,aAAc,EACf,CACX,CAAS,CAAC,CACH,CAGH,KAAK,sBAAuB,EAC7B,CASD,MAAM,gBAAiBxyC,EAAQ+8B,EAAK,CAClC,MAAMoW,EAAS,KAAK,cAAcnzC,CAAM,EAExC,GAAI+8B,EAAI,MACN,OAWF,GAPIA,EAAI,OACNoW,EAAO,SAAW,IAAI9F,IAIxB,KAAK,uBAAuBtQ,EAAI,OAAQoW,CAAM,EAE1CpW,EAAI,SAAS,OAAS,EAAG,CAC3B,KAAK,sBAAuB,EAC5B,MACD,CAID,MAAMuW,EAAU,CAAE,EAEZC,EAAQ,CAAE,EAChBxW,EAAI,SAAS,QAAS90B,GAAU,CAC1BA,EAAM,QACRkrC,EAAO,WAAWlrC,EAAM,GAAG,EAC3BqrC,EAAQ,KAAKrrC,EAAM,GAAG,IAEtBkrC,EAAO,MAAMlrC,EAAM,IAAKA,EAAM,SAAUA,EAAM,QAAQ,EACtDsrC,EAAM,KAAKtrC,CAAK,EAExB,CAAK,EAED,KAAK,aAAajI,EAAQszC,CAAO,EACjC,MAAM,KAAK,UAAUtzC,EAAQuzC,CAAK,EAElC,KAAK,sBAAuB,CAC7B,CAQD,aAAcvzC,EAAQ4P,EAAM,CAC1B,UAAWloB,KAAKkoB,EACd,KAAK,cAAc,OAAOloB,EAAE,SAAS3B,CAAS,EAAGia,CAAM,CAE1D,CAQD,MAAM,UAAWA,EAAQuzC,EAAO,CAE9B,MAAMjqD,EAAa,MAAM,KAAK,eAAeiqD,EAAM,IAAIhsD,GAAKA,EAAE,GAAG,CAAC,EAE5DqqD,EAAQ,CAAE,EAChB,UAAWwB,KAAQG,EAAO,CACxB,MAAMnpC,EAAKgpC,EAAK,IAAI,SAASrtD,CAAS,EAChC+oC,EAAYxlC,EAAW,IAAI8gB,CAAE,EAGnC,GAAI0kB,GAAa,KAEXskB,EAAK,cACPxB,EAAM,KAAK,CACT,MAAOxnC,EACP,SAAUgpC,EAAK,SACf,KAAMjG,EAAQ,kBAAkBiG,EAAK,GAAG,EACxC,KAAM,CACJ,YAAaA,EAAK,WAAa5F,GAAS,MACxC,UAAW,EACX,UAAW,GACX,aAAc4F,EAAK,YACpB,CACb,CAAW,MAEE,CAKL,MAAMZ,EAAc,KAAK,aAAaY,EAAK,SAAUtkB,CAAS,EAM9D,IAAIukB,EAAYvkB,EACX0jB,IACHa,EAAYlG,EAAQ,kBAAkBiG,EAAK,GAAG,GAGhDxB,EAAM,KAAK,CACT,MAAOxnC,EACP,SAAUgpC,EAAK,SACf,KAAMC,EACN,KAAM,CACJ,YAAAb,EACA,UAAA1jB,EACA,UAAW,GACX,aAAcskB,EAAK,YACpB,CACX,CAAS,CACF,CAED,KAAK,cAAc,UAAUpzC,EAAQ4xC,CAAK,CAC3C,CACF,CAOD,aAAc1E,EAAUpe,EAAW,CACjC,OAAOoe,IAAaM,GAAS,OAC3B1e,GAAa,KAAK,MAAM,0BAC3B,CAOD,MAAM,eAAgBlf,EAAM,CAC1B,MAAMiuB,EAAS,MAAM,KAAK,WAAWjuB,CAAI,EACzC,OAAO,IAAI,IAAI,CAAC,GAAGiuB,CAAM,EAAE,IAAI,CAAC,CAAC9C,EAAG7X,CAAC,IAAM,CAAC6X,EAAG7X,EAAE,MAAM,CAAC,CAAC,CAC1D,CAOD,MAAM,WAAYtT,EAAM,CACtB,MAAMllB,EAAM,IAAI,IAChB,aAAM,QAAQ,IAAIklB,EAAK,IAAI,MAAO5iB,GAAQ,CACxC,GAAI,CACF,MAAMmS,EAAQ,MAAM,KAAK,WAAW,IAAInS,CAAG,EAC3CtC,EAAI,IAAIsC,EAAI,SAASjH,CAAS,EAAGoZ,CAAK,CACvC,OAA2BwL,EAAG,CACzBA,EAAE,OAAS,iBACb,KAAK,KAAK,MAAM,wCAAyC3d,EAAK2d,CAAC,CAElE,CACP,CAAK,CAAC,EACKjgB,CACR,CAOD,uBAAwB8oD,EAAWL,EAAQ,CACzC,UAAWh0C,KAASq0C,EAAU,SAC5B,KAAK,KAAK,uBAAwBr0C,EAAM,MAAM,EAC9Cg0C,EAAO,cAAch0C,EAAM,MAAM,CAEpC,CASD,YAAaa,EAAQhT,EAAKmS,EAAO,CAC/B,MAAMg0C,EAAS,KAAK,cAAcnzC,CAAM,EACxCmzC,EAAO,UAAUh0C,EAAM,MAAM,EAC7Bg0C,EAAO,SAAS,OAAOnmD,CAAG,CAC3B,CAMD,eAAgBgT,EAAQ,CACtB,OAAO,KAAK,cAAcA,CAAM,EAAE,WAAW,SAC9C,CAOD,qBAAsBA,EAAQ,CAC5B,OAAO,KAAK,cAAcA,CAAM,EAAE,WAAW,SAC9C,CAMD,iBAAkBA,EAAQ,CACxB,KAAK,UAAU,OAAOA,EAAO,SAAQ,CAAE,CACxC,CAOD,cAAeA,EAAQ,CACrB,MAAM1H,EAAY0H,EAAO,SAAU,EAC7BmzC,EAAS,KAAK,UAAU,IAAI76C,CAAS,EAC3C,GAAI66C,EACF,OAAOA,EAGT,MAAM1rD,EAAI,IAAIspD,GAAO/wC,CAAM,EAE3B,YAAK,UAAU,IAAI1H,EAAW7Q,CAAC,EAC3B,KAAK,QACP,KAAK,OAAO,KAAK6Q,EAAW,YAAa,CAAC,EAGrC7Q,CACR,CAED,OAAS,CACP,KAAK,SAAW,EACjB,CAED,MAAQ,CACN,KAAK,SAAW,EACjB,CACH,CCpeA,MAAMgsD,GAAezmD,GAAQ,UAAU4E,EAAmB5E,EAAI,UAAU,MAAO,QAAQ,CAAC,GAKlF0mD,GAAc1mD,GAAQ,SAAS4E,EAAmB5E,EAAI,UAAU,MAAO,QAAQ,CAAC,GAE/E,MAAM2mD,WAAsBC,GAAAA,YAAa,CAO9C,YAAa5zC,EAAQ,CACnB,MAAO,EAEP,KAAK,gBAAgB6zC,EAAsB,EAE3C,KAAK,KAAOzsC,GAAOpH,EAAQ,OAAO,CACnC,CASD,SAAUhT,EAAKmS,EAAO,CACpB,MAAMuC,EAAQgyC,GAAW1mD,CAAG,EAC5B,KAAK,KAAK0U,CAAK,EACf,KAAK,KAAKA,EAAOvC,CAAK,CACvB,CAaD,UAAWnS,EAAK5D,EAAU,GAAI,CAC5B,GAAI,CAAC4D,EACH,MAAM,IAAI,MAAM,iBAAiB,EAGnC,MAAM8mD,EAAWJ,GAAW1mD,CAAG,EACzB+mD,EAAYN,GAAYzmD,CAAG,EAEjC,YAAK,KAAK,aAAaA,CAAG,EAAE,EAErB,IAAI,QAAQ,CAAC2R,EAASrB,IAAW,CACtC,MAAM02C,EAAW,IAAM,CACrB,KAAK,eAAeF,EAAUG,CAAO,EAErC32C,EAAO,IAAI,MAAM,aAAatQ,CAAG,WAAW,CAAC,CAC9C,EAKKinD,EAAWtuD,GAAS,CACxB,KAAK,eAAeouD,EAAWC,CAAQ,EAEvCr1C,EAAQhZ,CAAI,CACb,EAED,KAAK,KAAKouD,EAAWC,CAAQ,EAC7B,KAAK,KAAKF,EAAUG,CAAO,EAEvB7qD,GAAWA,EAAQ,QACrBA,EAAQ,OAAO,iBAAiB,QAAS,IAAM,CAC7C,KAAK,eAAe0qD,EAAUG,CAAO,EACrC,KAAK,eAAeF,EAAWC,CAAQ,EAEvC12C,EAAO,IAAI,MAAM,YAAYtQ,CAAG,UAAU,CAAC,CACrD,CAAS,CAET,CAAK,CACF,CAQD,YAAaA,EAAK,CAChB,MAAM0U,EAAQ+xC,GAAYzmD,CAAG,EAC7B,KAAK,KAAK0U,CAAK,EACf,KAAK,KAAKA,CAAK,CAChB,CACH,CCtGO,MAAMwyC,WAAaN,GAAAA,YAAa,CAUrC,YAAaO,EAAiB/qD,EAAS,CACrC,MAAO,EAEP,KAAK,SAAWA,EAEhB,KAAK,OAAS,CAAE,EAEhB,KAAK,OAAS,CAAE,EAEhB,KAAK,mBAAqB,KAAK,IAAK,EAEpC,KAAK,uBAAyB,CAAE,EAGhC,KAAK,gBAAkB,CAAE,EAEzB,KAAK,QAAU,KAAK,QAAQ,KAAK,IAAI,EAErC+qD,EAAgB,QAAS/0C,GAAQ,CAC/B,KAAK,OAAOA,CAAG,EAAI,OAAO,CAAC,EAC3B,KAAK,gBAAgBA,CAAG,EAAI,CAAE,EAC9B,KAAK,SAAS,uBAAuB,QAAS4wB,GAAa,EAC9C,KAAK,gBAAgB5wB,CAAG,EAAE4wB,CAAQ,EAAIokB,GAAcpkB,CAAQ,GACpE,KAAK,KAAK,mBAAoB,CAAC,CAC1C,CAAO,CACP,CAAK,EAED,KAAK,SAAW,KAAK,SAAS,OAC/B,CAED,QAAU,CACR,KAAK,SAAW,EACjB,CAED,SAAW,CACT,KAAK,UAAY,EAClB,CAED,MAAQ,CACF,KAAK,UACP,aAAa,KAAK,QAAQ,CAE7B,CAED,IAAI,UAAY,CACd,OAAO,OAAO,OAAO,GAAI,KAAK,MAAM,CACrC,CAED,IAAI,gBAAkB,CACpB,OAAO,OAAO,OAAO,GAAI,KAAK,eAAe,CAC9C,CAMD,KAAMplC,EAASypD,EAAK,CACd,KAAK,WACP,KAAK,OAAO,KAAK,CAACzpD,EAASypD,EAAK,KAAK,IAAG,CAAE,CAAC,EAC3C,KAAK,qBAAsB,EAE9B,CAKD,sBAAwB,CAClB,KAAK,UACP,aAAa,KAAK,QAAQ,EAE5B,KAAK,SAAW,WAAW,KAAK,QAAS,KAAK,cAAc,CAC7D,CAMD,cAAgB,CAEd,MAAMC,EAAU,KAAK,OAAO,OAAS,KAAK,SAAS,4BACnD,OAAO,KAAK,IAAI,KAAK,SAAS,wBAA0B,EAAIA,GAAU,CAAC,CACxE,CAKD,SAAW,CAGT,GAFA,KAAK,SAAW,KAEZ,KAAK,OAAO,OAAQ,CACtB,IAAI9uC,EACJ,KAAO,KAAK,OAAO,QAAQ,CACzB,MAAMqW,EAAKrW,EAAO,KAAK,OAAO,MAAO,EACrCqW,GAAM,KAAK,SAASA,CAAE,CACvB,CAEDrW,GAAQ,KAAK,iBAAiBA,EAAK,CAAC,CAAC,EAErC,KAAK,KAAK,SAAU,KAAK,MAAM,CAChC,CACF,CAMD,iBAAkB+uC,EAAY,CAC5B,MAAMC,EAAWD,EAAa,KAAK,mBAE/BC,GACF,OAAO,KAAK,KAAK,MAAM,EAAE,QAASp1C,GAAQ,CACxC,KAAK,oBAAoBA,EAAKo1C,EAAUD,CAAU,CAC1D,CAAO,EAGH,KAAK,mBAAqBA,CAC3B,CASD,oBAAqBn1C,EAAKq1C,EAAYF,EAAY,CAChD,MAAMz/B,EAAQ,KAAK,uBAAuB1V,CAAG,GAAK,EAClD,KAAK,uBAAuBA,CAAG,EAAI,EACnC,MAAMs1C,EAAM5/B,EAAQ2/B,EAAc,IAElC,IAAIE,EAAiB,KAAK,gBAAgBv1C,CAAG,EACxCu1C,IACHA,EAAiB,KAAK,gBAAgBv1C,CAAG,EAAI,CAAE,GAEjD,KAAK,SAAS,uBAAuB,QAASw1C,GAA0B,CACtE,IAAIC,EAAgBF,EAAeC,CAAqB,EACnDC,IACHA,EAAgBF,EAAeC,CAAqB,EAAIR,GAAcQ,CAAqB,GAE7FC,EAAc,KAAKN,EAAYG,CAAE,CACvC,CAAK,CACF,CAMD,SAAU74B,EAAI,CACZ,MAAMzc,EAAMyc,EAAG,CAAC,EACVw4B,EAAMx4B,EAAG,CAAC,EAEhB,GAAI,OAAOw4B,GAAQ,SACjB,MAAM,IAAI,MAAM,6BAA6BA,CAAG,EAAE,EAG/C,OAAO,UAAU,eAAe,KAAK,KAAK,OAAQj1C,CAAG,IACxD,KAAK,OAAOA,CAAG,EAAI,OAAO,CAAC,GAG7B,KAAK,OAAOA,CAAG,EAAI,OAAO,KAAK,OAAOA,CAAG,CAAC,EAAI,OAAOi1C,CAAG,EAEnD,KAAK,uBAAuBj1C,CAAG,IAClC,KAAK,uBAAuBA,CAAG,EAAI,GAErC,KAAK,uBAAuBA,CAAG,GAAKi1C,CACrC,CACH,CC5KA,MAAM1hC,GAAiB,CACrB,QAAS,GACT,uBAAwB,IACxB,4BAA6B,IAC7B,uBAAyD,CACvD,GAAK,IACL,EAAI,GAAK,IACT,GAAK,GAAK,GACd,CACA,EAEO,MAAMmiC,WAAclB,GAAAA,YAAa,CAStC,YAAatzC,EAAQ6zC,EAAkB,CAAA,EAAIl1C,EAAW0T,GAAgB,CACpE,MAAO,EAEP,MAAMvpB,EAAU,OAAO,OAAO,CAAA,EAAIupB,GAAgB1T,CAAQ,EAE1D,GAAI,OAAO7V,EAAQ,wBAA2B,SAC5C,MAAM,IAAI,MAAM,6BAA6B,EAG/C,GAAI,OAAOA,EAAQ,6BAAgC,SACjD,MAAM,IAAI,MAAM,kCAAkC,EAGpD,KAAK,iBAAmB+qD,EACxB,KAAK,SAAW/qD,EAChB,KAAK,SAAW,KAAK,SAAS,QAE9B,KAAK,QAAU,IAAI8qD,GAAKC,EAAiB/qD,CAAO,EAChD,KAAK,QAAQ,GAAG,SAAWm7B,GAAU,KAAK,KAAK,SAAUA,CAAK,CAAC,EAG/D,KAAK,OAASmpB,GAAW,CACvB,KAAM,2BACN,QAASptC,EAAO,OACtB,CAAK,CACF,CAED,QAAU,CACR,KAAK,SAAW,GAChB,KAAK,SAAS,QAAU,GACxB,KAAK,QAAQ,OAAQ,CACtB,CAED,SAAW,CACT,KAAK,SAAW,GAChB,KAAK,SAAS,QAAU,GACxB,KAAK,QAAQ,QAAS,CACvB,CAED,MAAQ,CACN,KAAK,SAAW,GAChB,KAAK,QAAQ,KAAM,EACnB,UAAWy0C,KAAY,KAAK,OAC1BA,EAAS,CAAC,EAAE,KAAM,CAErB,CAED,IAAI,UAAY,CACd,OAAO,KAAK,QAAQ,QACrB,CAED,IAAI,gBAAkB,CACpB,OAAO,KAAK,QAAQ,cACrB,CAMD,QAAS/0C,EAAQ,CACf,MAAM1H,EAAa,OAAO0H,GAAW,UAAYA,EAAO,SACpDA,EAAO,SAAU,EACjB,GAAGA,CAAM,GAEb,OAAO,KAAK,OAAO,IAAI1H,CAAS,CACjC,CAQD,KAAMonB,EAAM90B,EAASypD,EAAK,CACxB,GAAI,KAAK,WACP,KAAK,QAAQ,KAAKzpD,EAASypD,CAAG,EAE1B30B,GAAM,CACR,IAAIs1B,EAAY,KAAK,OAAO,IAAIt1B,CAAI,EAC/Bs1B,IACHA,EAAY,IAAId,GAAK,KAAK,iBAAkB,KAAK,QAAQ,EACzD,KAAK,OAAO,IAAIx0B,EAAMs1B,CAAS,GAGjCA,EAAU,KAAKpqD,EAASypD,CAAG,CAC5B,CAEJ,CAKD,aAAc30B,EAAM,CAClB,MAAM1f,EAAS0f,EAAK,SAAU,EACxBs1B,EAAY,KAAK,OAAO,IAAIh1C,CAAM,EACpCg1C,IACFA,EAAU,KAAM,EAChB,KAAK,OAAO,OAAOh1C,CAAM,EAE5B,CACH,CChHA,MAAM2S,GAAiB,CACrB,aAAc,GACd,4BAA6B,IAC7B,iCAAkC,GACpC,EACMsiC,GAAY,CAChB,iBACA,eACA,kBACA,kBACA,aACA,WACA,uBACA,iBACA,WACF,EAQO,MAAMC,WAAgBC,EAAe,CAa1C,YAAa70C,EAAQwS,EAAY1pB,EAAU,CAAA,EAAI,CAC7C,MAAO,EAEP,KAAK,QAAUkX,EACf,KAAK,KAAO8G,GAAO,KAAK,MAAM,EAE9B,KAAK,SAAW,OAAO,OAAO,CAAE,EAAEuL,GAAgBvpB,CAAO,EAGzD,KAAK,OAAS,IAAI0rD,GAAMx0C,EAAQ20C,GAAW,CACzC,QAAS,KAAK,SAAS,aACvB,uBAAwB,KAAK,SAAS,4BACtC,4BAA6B,KAAK,SAAS,gCACjD,CAAK,EAGD,KAAK,QAAU,IAAIG,GAAQ90C,EAAQ,KAAM,KAAK,OAAQ,CACpD,WAAYlX,EAAQ,WACpB,kBAAmBA,EAAQ,kBAC3B,mBAAoBA,EAAQ,mBAC5B,sBAAuBA,EAAQ,qBACrC,CAAK,EAGD,KAAK,WAAa0pB,EAElB,KAAK,OAAS,IAAIigC,GAAe,KAAK,OAAQjgC,EAAY,KAAK,QAAS,KAAK,OAAQxS,CAAM,EAG3F,KAAK,GAAK,IAAIgvC,GAAY,KAAK,OAAQ,KAAK,QAAS,KAAK,OAAQhvC,CAAM,EAExE,KAAK,cAAgB,IAAIqzC,GAAc,KAAK,MAAM,EAElD,KAAK,QAAU,EAChB,CAED,WAAa,CACX,OAAO,KAAK,OACb,CAKD,IAAI,QAAU,CACZ,OAAO,KAAK,QAAQ,MACrB,CAQD,MAAM,gBAAiB3zC,EAAQq1C,EAAU,CACvC,GAAI,CAIF,MAAM,KAAK,OAAO,gBAAgBr1C,EAAQq1C,CAAQ,CACnD,MAAa,CAIZ,KAAK,KAAK,4BAA6BA,CAAQ,CAChD,CAED,GAAIA,EAAS,OAAO,OAAS,EAC3B,OAIF,MAAMC,EAAW,CAAE,EAEnB,SAAW,CAAC3H,EAAQhoD,CAAI,IAAK0vD,EAAS,OAAO,UAAW,CACtD,MAAMroD,EAAME,EAAI,MAAMygD,CAAM,EAE5B2H,EAAS,KAAK,CACZ,UAAW,KAAK,GAAG,SAAS,SAAStoD,CAAG,EACxC,IAAAA,EACA,KAAArH,CACR,CAAO,CACF,CAGD,KAAK,GAAG,YACN2vD,EACG,OAAO,CAAC,CAAE,UAAAC,CAAW,IAAKA,CAAS,EACnC,IAAI,CAAC,CAAE,IAAAvoD,CAAK,IAAKA,CAAG,CACxB,EAED,MAAM,QAAQ,IACZsoD,EAAS,IACP,CAAC,CAAE,IAAAtoD,EAAK,UAAAuoD,EAAW,KAAA5vD,KAAW,KAAK,qBAAqBqa,EAAQhT,EAAKrH,EAAM4vD,CAAS,CACrF,CACF,CACF,CASD,MAAM,qBAAsBv1C,EAAQhT,EAAKrH,EAAM4vD,EAAW,CACxD,KAAK,KAAK,gBAAgB,EAE1B,MAAMjhB,EAAM,MAAM,KAAK,WAAW,IAAItnC,CAAG,EAEzC,KAAK,uBAAuBgT,EAAO,SAAU,EAAEhT,EAAKrH,EAAM2uC,CAAG,EAExDihB,GAIL,MAAM,KAAK,IAAIvoD,EAAKrH,CAAI,CACzB,CASD,uBAAwB2S,EAAWtL,EAAKrH,EAAM2lC,EAAQ,CACpD,KAAK,OAAO,KAAKhzB,EAAW,iBAAkB,CAAC,EAC/C,KAAK,OAAO,KAAKA,EAAW,eAAgB3S,EAAK,MAAM,EAEnD2lC,IACF,KAAK,OAAO,KAAKhzB,EAAW,kBAAmB,CAAC,EAChD,KAAK,OAAO,KAAKA,EAAW,kBAAmB3S,EAAK,MAAM,EAE7D,CAOD,cAAeiQ,EAAK,CAClB,KAAK,KAAK,MAAM,mBAAoBA,EAAI,OAAO,CAChD,CAOD,iBAAkBoK,EAAQ,CACxB,KAAK,GAAG,UAAUA,CAAM,CACzB,CAOD,oBAAqBA,EAAQ,CAC3B,KAAK,GAAG,aAAaA,CAAM,EAC3B,KAAK,OAAO,iBAAiBA,CAAM,EACnC,KAAK,OAAO,aAAaA,CAAM,CAChC,CAED,aAAe,CACb,KAAK,OAAO,OAAQ,CACrB,CAED,cAAgB,CACd,KAAK,OAAO,QAAS,CACtB,CAQD,gBAAiBA,EAAQf,EAAU,CACjC,OAAO,KAAK,OAAO,gBAAgBe,CAAM,CAC1C,CAOD,cAAeA,EAAQ,CACrB,OAAO,KAAK,OAAO,cAAcA,CAAM,CACxC,CAUD,MAAM,IAAKhT,EAAK5D,EAAU,CAAA,EAAI,CAM5B,MAAMosD,EAAmB,CAACxoD,EAAK5D,KAG7B,KAAK,GAAG,WAAW,CAAC4D,CAAG,EAAG5D,CAAO,EAE1B,KAAK,cAAc,UAAU4D,EAAK5D,CAAO,GAGlD,IAAIqsD,EAAkB,GAQtB,MAAMC,EAAyB,MAAO1oD,EAAK5D,IAAY,CACrD,GAAI,CAIF,OAFc,MAAM,KAAK,WAAW,IAAI4D,EAAK5D,CAAO,CAGrD,OAA2BwM,EAAK,CAC/B,GAAIA,EAAI,OAAS,gBACf,MAAMA,EAGR,OAAK6/C,IACHA,EAAkB,GAElB,KAAK,QAAQ,eAAezoD,EAAK5D,CAAO,EACrC,MAAOwM,GAAQ,KAAK,KAAK,MAAMA,CAAG,CAAC,GAIjC4/C,EAAiBxoD,EAAK5D,CAAO,CACrC,CACF,EAMK4T,EAAa,IAAI,gBACjBuG,EAASna,EAAQ,OACnB8T,GAAU,CAAC9T,EAAQ,OAAQ4T,EAAW,MAAM,CAAC,EAC7CA,EAAW,OAEf,GAAI,CAUF,OATc,MAAM,QAAQ,KAAK,CAC/B,KAAK,cAAc,UAAUhQ,EAAK,CAChC,OAAAuW,CACV,CAAS,EACDmyC,EAAuB1oD,EAAK,CAC1B,OAAAuW,CACV,CAAS,CACT,CAAO,CAGP,QAAc,CAERvG,EAAW,MAAO,CACnB,CACF,CAUD,MAAQ,QAAS4S,EAAMxmB,EAAU,CAAA,EAAI,CACnC,gBAAiB4D,KAAO4iB,EACtB,MAAM,KAAK,IAAI5iB,EAAK5D,CAAO,CAE9B,CAYD,OAAQwmB,EAAM,CACZ,MAAM+lC,EAAY,MAAM,QAAQ/lC,CAAI,EAAIA,EAAO,CAACA,CAAI,EAEpD,KAAK,GAAG,aAAa+lC,CAAS,EAC9BA,EAAU,QAAS3oD,GAAQ,KAAK,cAAc,YAAYA,CAAG,CAAC,CAC/D,CASD,YAAa4iB,EAAM,CACjB,KAAK,GAAG,YAAY,MAAM,QAAQA,CAAI,EAAIA,EAAO,CAACA,CAAI,CAAC,CACxD,CAUD,MAAM,IAAK5iB,EAAKmS,EAAOF,EAAU,CAC/B,MAAM,KAAK,WAAW,IAAIjS,EAAKmS,CAAK,EACpC,KAAK,4BAA4BnS,EAAKmS,CAAK,CAC5C,CASD,MAAQ,QAASzd,EAAQ0H,EAAS,CAChC,eAAiB,CAAE,IAAAgW,EAAK,MAAA1Z,KAAW,KAAK,WAAW,QAAQhE,EAAQ0H,CAAO,EACxE,KAAK,4BAA4BgW,EAAK1Z,CAAK,EAE3C,KAAM,CAAE,IAAA0Z,EAAK,MAAA1Z,CAAO,CAEvB,CASD,4BAA6BsH,EAAKrH,EAAM,CACtC,KAAK,cAAc,SAASqH,EAAKrH,CAAI,EACrC,KAAK,OAAO,eAAe,CAAC,CAAE,IAAAqH,EAAK,KAAArH,CAAI,CAAE,CAAC,EAE1C,KAAK,QAAQ,QAAQqH,CAAG,EAAE,MAAO4I,GAAQ,CACvC,KAAK,KAAK,MAAM,wBAAyBA,EAAI,OAAO,CAC1D,CAAK,CACF,CAKD,aAAe,CACb,OAAO,KAAK,GAAG,SAAS,QAAS,CAClC,CAKD,OAAS,CACP,OAAO,KAAK,OAAO,MAAO,CAC3B,CAKD,MAAQ,CACN,OAAO,KAAK,MACb,CAKD,MAAM,OAAS,CACb,KAAK,GAAG,MAAO,EACf,MAAM,KAAK,QAAQ,MAAO,EAC1B,KAAK,OAAO,MAAO,EACnB,KAAK,QAAU,EAChB,CAKD,MAAM,MAAQ,CACZ,KAAK,OAAO,KAAM,EAClB,KAAK,GAAG,KAAM,EACd,MAAM,KAAK,QAAQ,KAAM,EACzB,KAAK,OAAO,KAAM,EAClB,KAAK,QAAU,EAChB,CAED,QAAU,CACR,OAAO,KAAK,UACb,CAMD,IAAK5I,EAAK,CACR,OAAO,KAAK,WAAW,IAAIA,CAAG,CAC/B,CACH,CCxbO,MAAMmjC,GAAgB,CAAC7vB,EAAQwS,EAAY1pB,EAAU,CAAA,IACnD,IAAI8rD,GAAQ50C,EAAQwS,EAAY1pB,CAAO,ECJzC,MAAMwsD,WAAqBT,EAAe,CAO/C,YAAariC,EAAYxD,EAAS,CAChC,MAAO,EAEP,KAAK,MAAQwD,EACb,KAAK,QAAUxD,CAChB,CAED,MAAQ,CACN,OAAO,KAAK,MAAM,KAAM,CACzB,CAED,OAAS,CACP,OAAO,KAAK,MAAM,MAAO,CAC1B,CAED,QAAU,CACR,OAAO,KAAK,KACb,CASD,MAAM,IAAKtiB,EAAKmS,EAAO/V,EAAU,CAAA,EAAI,CAC/B,MAAM,KAAK,IAAI4D,CAAG,IAIlB,KAAK,QAAQ,YACf,MAAM,KAAK,QAAQ,IAAIA,EAAKmS,EAAO/V,CAAO,EAE1C,MAAM,KAAK,MAAM,IAAI4D,EAAKmS,EAAO/V,CAAO,EAE3C,CAQD,MAAQ,QAASy0C,EAAQz0C,EAAU,CAAA,EAAI,CACrC,MAAMysD,EAAgBrkC,GAAOqsB,EAAQ,MAAO,CAAE,IAAAz+B,CAAK,IAAc,CAAE,MAAM,KAAK,IAAIA,CAAG,CAAI,EAErF,KAAK,QAAQ,YACf,MAAQ,KAAK,QAAQ,QAAQy2C,EAAezsD,CAAO,EAEnD,MAAQ,KAAK,MAAM,QAAQysD,EAAezsD,CAAO,CAEpD,CAQD,MAAM,IAAK4D,EAAK5D,EAAU,CAAA,EAAI,CAC5B,MAAI,CAAE,MAAM,KAAK,IAAI4D,CAAG,GAAM,KAAK,QAAQ,YAClC,KAAK,QAAQ,IAAIA,EAAK5D,CAAO,EAE7B,KAAK,MAAM,IAAI4D,EAAK5D,CAAO,CAErC,CAQD,MAAQ,QAASwmB,EAAMxmB,EAAU,CAAA,EAAI,CACnC,MAAM0sD,EAAiB15B,GAAS,CAAE,WAAY,EAAI,CAAE,EAC9C25B,EAAe35B,GAAS,CAAE,WAAY,EAAI,CAAE,EAElD,QAAQ,UAAU,KAAK,SAAY,CACjC,gBAAiBpvB,KAAO4iB,EAClB,CAAE,MAAM,KAAK,IAAI5iB,CAAG,GAAM,KAAK,QAAQ,YACzC8oD,EAAe,KAAK9oD,CAAG,EAEvB+oD,EAAa,KAAK/oD,CAAG,EAIzB8oD,EAAe,IAAK,EACpBC,EAAa,IAAK,CACxB,CAAK,EAED,MAAQ9zC,GACN,KAAK,QAAQ,QAAQ6zC,EAAgB1sD,CAAO,EAC5C,KAAK,MAAM,QAAQ2sD,EAAc3sD,CAAO,CACzC,CACF,CAQD,MAAM,OAAQ4D,EAAK5D,EAAS,CAC1B,MAAM,KAAK,MAAM,OAAO4D,EAAK5D,CAAO,CACrC,CAQD,MAAQ,WAAYwmB,EAAMxmB,EAAS,CACjC,MAAQ,KAAK,MAAM,WAAWwmB,EAAMxmB,CAAO,CAC5C,CAMD,MAAM,IAAK4D,EAAK5D,EAAU,CAAA,EAAI,CAC5B,OAAO,KAAK,MAAM,IAAI4D,EAAK5D,CAAO,CACnC,CAMD,MAAQ,MAAO4sD,EAAG5sD,EAAU,CAAA,EAAI,CAC9B,MAAQ,KAAK,MAAM,MAAM4sD,EAAG5sD,CAAO,CACpC,CAMD,MAAQ,UAAW4sD,EAAG5sD,EAAU,CAAA,EAAI,CAClC,MAAQ,KAAK,MAAM,UAAU4sD,EAAG5sD,CAAO,CACxC,CACH,CC5IO,MAAMgsD,EAAQ,CAQnB,YAAap1C,EAAQM,EAAQgP,EAAS/Q,EAAMuU,EAAY,CACtD,KAAK,OAAS9S,EACd,KAAK,OAASM,EACd,KAAK,QAAUgP,EACf,KAAK,KAAO/Q,EACZ,KAAK,WAAauU,CACnB,CAKD,aAAa,MAAO,CAAE,OAAA9S,EAAQ,KAAAzB,EAAM,MAAA6B,EAAO,QAAAC,EAAS,QAAAjX,GAAW,CAGzDmV,EAAK,QACP,MAAMA,EAAK,KAAM,EAInB,MAAM4R,EAAS,MAAM5R,EAAK,OAAO,OAAQ,EAEnC+B,EAAS,MAAM6rC,GAAa,CAChC,QAAA/iD,EACA,KAAAmV,EACA,OAAAyB,EACA,WAAYi2C,GAAUj2C,EAAQmQ,CAAM,EACpC,OAAAA,EACA,eAAgB,MACtB,CAAK,EAED,MAAM7P,EAAO,MAAO,EAEpB,UAAWnF,KAAMmF,EAAO,gBACtBF,EAAM,sBAAsBjF,EAAG,SAAQ,CAAE,EAAE,EAG7C,MAAMmU,EAAU6gB,GAAc7vB,EAAQ/B,EAAK,OAAQ,CACjD,aAAc,GACd,WAAY8B,EACZ,kBAAmB,KACnB,mBAAoB,IAC1B,CAAK,EACD,MAAMiP,EAAQ,MAAO,EAErB,MAAMwD,EAAa,IAAI8iC,GAAar3C,EAAK,OAAQ+Q,CAAO,EACxD,OAAA/Q,EAAK,OAASuU,EAEdvU,EAAK,KAAK,WAAauU,EAEhB,IAAIsiC,GAAQp1C,EAAQM,EAAQgP,EAAS/Q,EAAMuU,CAAU,CAC7D,CAKD,aAAa,KAAMhT,EAAS,CAC1BA,EAAQ,KAAK,OAASA,EAAQ,WAAW,OAAQ,EAEjDA,EAAQ,KAAK,KAAK,WAAaA,EAAQ,WAAW,OAAQ,EAE1D,MAAMA,EAAQ,QAAQ,KAAM,EAC5B,MAAMA,EAAQ,OAAO,KAAM,CAC5B,CACH,CAMA,MAAMm2C,GAAY,CAACj2C,EAAQmQ,IAAW,CACpC,MAAM7X,EAAY0H,EAAO,SAAU,EAE7By2B,EAAQ,CAAE,EACVyf,EAAS/lC,EAAO,WAAaA,EAAO,UAAU,OAAU,CAAE,EAChE,UAAW5b,KAAQ2hD,EAAO,CACxB,IAAI/6C,EAAKvC,GAAUrE,CAAI,EAIvB,GAAI4G,EAAG,WAAU,EAAG,SAASg7C,EAAyB,EACpD,MAAMz9C,EAAQ,IAAI,MAAM,mGAAmG,EAAG,6CAA6C,EAM7K,MAAM09C,EAAOj7C,EAAG,UAAW,EACvBi7C,GAAQA,IAAS99C,IACnB6C,EAAKA,EAAG,YAAY,QAAQ7C,CAAS,EAAE,GAGzCm+B,EAAM,KAAKt7B,CAAE,CACd,CAED,OAAOs7B,CACT,EAEM0f,GAA4B,IC5H3B,SAASzN,GAAa,CAAE,QAAA5oC,GAAW,CAIxC,eAAe22B,EAAOrtC,EAAU,GAAI,CAElC,MAAMktC,EAAQ,CAAE,EACV,CAAE,OAAAh2B,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5C,aAAMkX,EAAO,UAAU,QAAQof,GAAQ,CACrC4W,EAAM,KAAK,CACT,GAAI5W,EAAK,GACT,MAAOA,EAAK,UAAU,IAAK22B,GAAOA,EAAG,SAAS,CACtD,CAAO,CACP,CAAK,EAEM/f,CACR,CAED,OAAO35B,EAAkB85B,CAAK,CAChC,CCxBO,SAASkS,GAAe,CAAE,QAAA7oC,GAAW,CAI1C,eAAe8oC,EAAS0N,EAAmBltD,EAAU,GAAI,CACvD,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAC5C,MAAMkX,EAAO,KAAKg2C,EAAmBltD,CAAO,CAC7C,CAED,OAAOuT,EAAkBisC,CAAO,CAClC,CCVO,SAASC,GAAkB,CAAE,QAAA/oC,GAAW,CAI7C,eAAegpC,EAAYv0C,EAAMnL,EAAU,GAAI,CAC7C,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAC5C,MAAMkX,EAAO,OAAO/L,CAAI,CACzB,CAED,OAAOoI,EAAkBmsC,CAAU,CACrC,CCVO,SAASC,GAAkB,CAAE,QAAAjpC,GAAW,CAI7C,eAAekpC,EAAY5/C,EAAU,GAAI,CACvC,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAC5C,OAAOkX,EAAO,cAAe,CAC9B,CAED,OAAO3D,EAAkBqsC,CAAU,CACrC,CCNO,SAAS5B,GAAa,CAAE,QAAAtnC,GAAW,CAIxC,eAAew2B,EAAOltC,EAAU,GAAI,CAClC,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5C,GAAIA,EAAQ,QAAS,CACnB,MAAMktC,EAAQ,CAAE,EAChB,UAAW+Z,KAAc/vC,EAAO,iBAAkB,CAEhD,MAAMof,EAAO,CACX,KAAM2wB,EAAW,WACjB,KAAMA,EAAW,UAClB,GAEGjnD,EAAQ,SAAWA,EAAQ,aAC7Bs2B,EAAK,UAAY2wB,EAAW,KAAK,WAG/BjnD,EAAQ,UACVs2B,EAAK,MAAQ2wB,EAAW,KAAK,YAC7B3wB,EAAK,QAAU,MACfA,EAAK,QAAU,CAAE,GAGnB4W,EAAM,KAAK5W,CAAI,CAChB,CAED,OAAO4W,CACR,CAGD,MAAMA,EAAQ,IAAI,IAElB,UAAW+Z,KAAc/vC,EAAO,iBAAkB,CAEhD,MAAMof,EAAO,CACX,KAAM2wB,EAAW,WACjB,KAAMA,EAAW,UAClB,EAED/Z,EAAM,IAAI+Z,EAAW,WAAW,SAAQ,EAAI3wB,CAAI,CACjD,CAED,OAAO,MAAM,KAAK4W,EAAM,OAAM,CAAE,CACjC,CAED,OAAO35B,EAAkB25B,CAAK,CAChC,CCrDO,MAAMigB,EAAS,CAKpB,YAAa,CAAE,QAAAz2C,GAAW,CACxB,KAAK,MAAQ4oC,GAAY,CAAE,QAAA5oC,CAAO,CAAE,EACpC,KAAK,QAAU6oC,GAAc,CAAE,QAAA7oC,CAAO,CAAE,EACxC,KAAK,WAAa+oC,GAAiB,CAAE,QAAA/oC,CAAO,CAAE,EAC9C,KAAK,WAAaipC,GAAiB,CAAE,QAAAjpC,CAAO,CAAE,EAC9C,KAAK,MAAQsnC,GAAY,CAAE,QAAAtnC,CAAO,CAAE,CACrC,CACH,CCcA,MAAM02C,GAAa,CAAE,QAAS,GAAM,KAAM,EAAG,KAAM,EAAI,EAMhD,SAAS1M,GAAY,CAAE,QAAAhqC,GAAW,CAIvC,eAAiBiqC,EAAM/pC,EAAQ5W,EAAU,GAAI,CAC3C,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAMR,EAAQ,IAAK,EACtC1W,EAAQ,MAAQA,EAAQ,OAAS,GAEjC,MAAMqtD,EAAa,MAAMn2C,EAAO,UAAU,IAAIN,CAAM,EACpD,IAAIoK,EAAKqsC,GAAcA,EAAW,GAElC,GAAI,CAACrsC,EAAI,CACP,KAAM,CAAE,GAAGosC,GAAY,KAAM,mBAAmBx2C,CAAM,EAAI,EAC1D,MAAM02C,EAAa,MAAMp2C,EAAO,YAAY,SAASN,CAAM,EAE3DoK,EAAKssC,GAAcA,EAAW,EAC/B,CAED,GAAI,CAACtsC,EACH,MAAM,IAAI,MAAM,oBAAoB,EAGtC,KAAM,CAAE,GAAGosC,GAAY,KAAM,QAAQpsC,EAAG,SAAU,CAAA,EAAI,EAEtD,IAAIusC,EAAc,EACdC,EAAY,EAEhB,QAAS11D,EAAI,EAAGA,EAAIkI,EAAQ,MAAOlI,IACjC,GAAI,CACF,MAAM21D,EAAO,MAAMv2C,EAAO,KAAK8J,CAAE,EACjCwsC,GAAaC,EACbF,IACA,KAAM,CAAE,GAAGH,GAAY,KAAAK,CAAM,CAC9B,OAA2BjhD,EAAK,CAC/B,KAAM,CAAE,GAAG4gD,GAAY,QAAS,GAAO,KAAM5gD,EAAI,UAAY,CAC9D,CAGH,GAAI+gD,EAAa,CACf,MAAMG,EAAUF,EAAYD,EAC5B,KAAM,CAAE,GAAGH,GAAY,KAAM,oBAAoBM,CAAO,IAAM,CAC/D,CACF,CAED,OAAOn6C,EAAkBotC,CAAI,CAC/B,CCnEA,MAAMgN,GAAc,SAKpB,SAASC,GAAU50D,EAAK,CAClBA,EAAI,WAAW20D,EAAW,IAC5B30D,EAAMA,EAAI,UAAU20D,GAAY,MAAM,GAIxC,IAAItsD,EAgBJ,IAdIrI,EAAI,CAAC,IAAM,KAAOA,EAAI,CAAC,IAAM,OAE/BA,EAAM,IAAIA,CAAG,IAGXA,EAAI,CAAC,IAAM,MACbqI,EAAM1E,EAAU,OAAO3D,CAAG,GAGxBA,EAAI,CAAC,IAAM,MAEbqI,EAAM4E,GAAO,OAAOjN,CAAG,GAGrB,CAACqI,EACH,MAAM,IAAI,MAAM,wBAAwB,EAW1C,GARIA,EAAI,CAAC,IAAM,GAAQA,EAAI,CAAC,IAAM,MAEhCA,EAAMwJ,GAAiB,CACrB,CAAC,EAAM,GAAI,EACXxJ,CACN,CAAK,GAGCA,EAAI,SAAW,GACjB,MAAM,IAAI,MAAM,oBAAsBA,EAAI,MAAM,EAGlD,OAAOwJ,GAAiB,CACtBT,EAAqBujD,EAAW,EAChCtsD,EAAI,SAAS,CAAC,CAClB,CAAG,CACH,CAQO,SAAS84C,GAAW,CAAE,QAAAzjC,EAAS,KAAAvB,EAAM,OAAAyB,CAAM,EAAI,CACpD,KAAM,CAAE,IAAA4L,EAAK,IAAAoF,EAAK,UAAAkyB,EAAW,SAAAvjB,EAAU,QAAAyjB,EAAS,MAAA5+B,GAAU,CAIxD,MAAQ,IAAKpF,EAAKhW,EAAU,CAAA,EAAI,CAC9B,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EAE/C8tD,EAAS93C,aAAe,WAAaA,EAAM43C,GAAS53C,CAAG,EAE7D,GAAIkB,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,IAAI42C,EAAQ9tD,CAAO,CACvC,EAKD,MAAQ,IAAKgW,EAAK1Z,EAAO0D,EAAS,CAChC,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EAE/C8tD,EAAS93C,aAAe,WAAaA,EAAM43C,GAAS53C,CAAG,EAE7D,GAAIkB,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,IAAI42C,EAAQxxD,EAAO0D,CAAO,CAC9C,EAKD,MAAQ,UAAW4D,EAAK5D,EAAU,CAAA,EAAI,CACpC,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EAErD,GAAIkX,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,cAActT,EAAK,CACpC,OAAQ5D,EAAQ,MACxB,CAAO,CACF,EAKD,MAAQ,SAAU+tD,EAAc/tD,EAAU,CAAA,EAAI,CAC5C,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EAErD,GAAIkX,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,SAAS62C,EAAc,CACxC,OAAQ/tD,EAAQ,MACxB,CAAO,CACF,EAKD,MAAQ,QAAS4D,EAAK5D,EAAU,CAAE,UAAW,IAAS,CACpD,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EAKrD,GAAI,CAFa,MAAMmV,EAAK,OAAO,IAAIvR,CAAG,EAGxC,MAAM0L,EAAQ,IAAI,MAAM,4CAA4C,EAAG,qBAAqB,EAG9F,GAAItP,EAAQ,UAEV,MAAMsP,EAAQ,IAAI,MAAM,qBAAqB,EAAG,yBAAyB,EAG3E,GAAI4H,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,QAAQtT,CAAG,CAC/B,EAKD,MAAQ,MAAOoqD,EAAehuD,EAAU,CAAA,EAAI,CAC1C,KAAM,CAAE,OAAAkX,CAAM,EAAK,MAAM22C,GAAIn3C,EAASE,EAAQ5W,CAAO,EACrD,IAAIpF,EACJ,MAAMqzD,EAAQnqD,EAAI,MAAMkqD,CAAa,EAQrC,GANIC,GAAS,KACXrzD,EAAQqzD,EAAM,UAAU,MAExBrzD,EAAQqhB,GAAiB+xC,EAAc,SAAU,CAAA,EAAE,QAAS,EAG1D92C,EAAO,KAAO,KAChB,MAAM5H,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAQ4H,EAAO,IAAI,gBAAgBtc,EAAOoF,CAAO,CAClD,CACF,EAED,MAAO,CACL,IAAKuT,EAAkBiP,CAAG,EAC1B,IAAKjP,EAAkBqU,CAAG,EAC1B,UAAWrU,EAAkBumC,CAAS,EACtC,SAAUvmC,EAAkBgjB,CAAQ,EACpC,QAAShjB,EAAkBymC,CAAO,EAClC,MAAOzmC,EAAkB6H,CAAK,CAC/B,CACH,CAQA,MAAMyyC,GAAM,MAAOn3C,EAASE,EAAQ5W,IAAY,CAC9C,MAAMyb,EAAM,MAAM/E,EAAQ,IAAI1W,CAAO,EACrC,GAAIyb,EAAI,OAAO,KAAO,KACpB,OAAOA,EACF,CACL,MAAMjI,EAAK,iBAAoB,CAC7B,KAAM,CACJ,KAAMoD,EACN,KAAM,cACN,KAAM,EACN,MAAO,IAAI/O,GAAgB,iBAAiB,CAC7C,CACF,EAED,MAAO,CACL,OAAQ,CACN,IAAK,CAEH,IAAK2L,EAEL,IAAKA,EAEL,cAAeA,EAEf,SAAUA,EAEV,QAASA,EAET,gBAAiBA,CAClB,CACF,CACF,CACF,CACH,ECrNO,SAASmoC,GAAc,CAAE,QAAAjlC,EAAS,OAAAqQ,GAAU,CACjD,MAAMmnC,EAAY1rC,GAAIuE,GAAU,CAAA,EAAI,iBAAkB,EAAI,EAGpDonC,EAAW,CAAE,EAEnB,IAAI1P,EAEJ,MAAO,CACL,UAAWyP,EAAY36C,EAAkB6qC,CAAS,EAAIgQ,GACtD,YAAaF,EAAY36C,EAAkBurC,CAAW,EAAIsP,GAC1D,QAASF,EAAY36C,EAAkB4P,CAAO,EAAIirC,GAClD,GAAIF,EAAY36C,EAAkB8J,CAAE,EAAI+wC,GACxC,MAAOF,EAAY36C,EAAkB25B,CAAK,EAAIkhB,EAC/C,EAKD,eAAehQ,EAAWH,EAAOI,EAASr+C,EAAU,CAAA,EAAI,CACtD,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5CkX,EAAO,OAAO,UAAU+mC,CAAK,EAGzBQ,GAAa,OACfA,EAAa4P,GAAQ,CACnB,MAAM1a,EAAM0a,EAAI,OAEZF,EAASxa,EAAI,KAAK,GACpBwa,EAASxa,EAAI,KAAK,EAAE,QAAQ0K,GAAW,CACrC,GAAI,OAAOA,GAAY,WAAY,CACjCA,EAAQ1K,CAAG,EACX,MACD,CAEG0K,GAAW,MAAQA,EAAQ,aAAe,MAC5CA,EAAQ,YAAY1K,CAAG,CAErC,CAAW,CAEJ,EAEDz8B,EAAO,OAAO,iBAAiB,UAAWunC,CAAS,GAIjDJ,GAAW,OACT8P,EAASlQ,CAAK,GAAK,OACrBkQ,EAASlQ,CAAK,EAAI,CAAE,GAGtBkQ,EAASlQ,CAAK,EAAE,KAAKI,CAAO,EAE/B,CAKD,eAAeS,EAAab,EAAOI,EAASr+C,EAAU,CAAA,EAAI,CACxD,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAGxCq+C,GAAW,MAAQ8P,EAASlQ,CAAK,GAAK,OACxCkQ,EAASlQ,CAAK,EAAIkQ,EAASlQ,CAAK,EAAE,OAAOqQ,GAAKA,IAAMjQ,CAAO,EAEvD8P,EAASlQ,CAAK,EAAE,SAAW,GAC7B,OAAOkQ,EAASlQ,CAAK,GAKrB,OAAOI,GAAY,YACrB,OAAO8P,EAASlQ,CAAK,EAInBkQ,EAASlQ,CAAK,GAAK,MACrB/mC,EAAO,OAAO,YAAY+mC,CAAK,EAI7B,OAAO,KAAKkQ,CAAQ,EAAE,SAAW,IACnCj3C,EAAO,OAAO,oBAAoB,UAAWunC,CAAS,EACtDA,EAAY,OAEf,CAKD,eAAet7B,EAAS86B,EAAO1hD,EAAMyD,EAAU,CAAA,EAAI,CACjD,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAC5C,GAAI,CAACzD,EACH,MAAM+S,EAAQ,IAAI,MAAM,6BAA6B,EAAG,kBAAkB,EAG5E,MAAM4H,EAAO,OAAO,QAAQ+mC,EAAO1hD,CAAI,CACxC,CAKD,eAAe8gB,EAAIrd,EAAU,GAAI,CAC/B,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5C,OAAOkX,EAAO,OAAO,UAAW,CACjC,CAKD,eAAeg2B,EAAO+Q,EAAOj+C,EAAU,GAAI,CACzC,KAAM,CAAE,OAAAkX,CAAQ,EAAG,MAAMR,EAAQ,IAAI1W,CAAO,EAE5C,OAAOkX,EAAO,OAAO,eAAe+mC,CAAK,CAC1C,CACH,CAEA,MAAMmQ,GAAa,SAAY,CAC7B,MAAM,IAAIvmD,GAAgB,oBAAoB,CAChD,ECrFMwb,GAAeC,GAAU,KAAK,CAAE,gBAAiB,EAAI,CAAE,EACvDvF,GAAMC,EAAO,MAAM,EAEnBuwC,GAA6B,IAWnC,MAAM58C,EAAK,CAQT,YAAa,CAAE,MAAAqF,EAAO,QAAAw3C,EAAS,OAAApnD,EAAQ,QAAApH,CAAO,EAAI,CAChD,KAAM,CAAE,OAAA4W,EAAQ,KAAAzB,EAAM,SAAA0B,CAAU,EAAG23C,EAC7B93C,EAAUR,GAAQ,OAAO81C,EAAO,EAEhCr1C,EAAUyjB,GAAgBp6B,EAAQ,OAAO,EAEzCwjB,EAAMjI,GAAW,EACjBuH,EAAWtH,GAAe,CAAE,QAAA9E,EAAS,EAGrCI,EAAO,IAAI6L,GAAQ3iB,CAAO,EAG1BqhD,EAAmB,OAAO,OAAOn6C,EAAM,GAE5ClH,EAAQ,MAAQA,EAAQ,KAAK,QAAUA,EAAQ,KAAK,QAAU,CAAA,GAAI,QAAQqwB,IAAUgxB,EAAiB,KAAKhxB,EAAM,CAAC,EAElH,KAAK,QAAU,IAAI0lB,GAAY,CAC7B,QAASsL,EACT,WAAYrhD,EAAQ,MAAQA,EAAQ,KAAK,UAC/C,CAAK,EAGD,MAAM8gD,EAAkB,OAAO,OAAO/5C,EAAK,GAE1C/G,EAAQ,MAAQA,EAAQ,KAAK,MAAQA,EAAQ,KAAK,MAAQ,CAAA,GAAI,QAAQvI,IAAQqpD,EAAgB,KAAKrpD,EAAI,CAAC,EAEzG,KAAK,MAAQ,IAAIi+C,GAAW,CAC1B,MAAOoL,EACP,SAAU9gD,EAAQ,MAAQA,EAAQ,KAAK,QAC7C,CAAK,EAED,MAAM4c,EAAM,IAAIiB,GAAO,CAAE,KAAA1I,EAAM,OAAA/N,CAAM,CAAE,EACjC2O,EAAQ,IAAIsS,GAAS,CAAE,OAAAjhB,EAAQ,QAAS,KAAK,QAAS,QAAAuP,EAAS,KAAAxB,EAAM,EAErExd,EAAO,IAAIysB,GAAQ,CACvB,IAAAZ,EACA,KAAA1M,EACA,KAAA3B,EACA,OAAA/N,EACA,OAAAwP,EACA,SAAAkM,EACA,SAAAjM,EACA,QAAA7W,CACN,CAAK,EAEKuV,EAAUmG,GAAc,CAAE,KAAAvG,EAAM,OAAA/N,EAAQ,MAAO,KAAK,MAAO,KAAAzP,EAAM,EAEjE82D,EAAM,IAAI90B,GAAO,CAAE,KAAAxkB,EAAM,OAAA/N,EAAQ,QAAS,KAAK,QAAS,QAAAuP,EAAS,EACjE4N,EAAO,OAAO,OAAOD,GAAW,CAAE,KAAAnP,EAAM,OAAA/N,EAAQ,QAAAmO,EAAS,QAAAoB,CAAO,CAAE,EAAG,CACzE,MAAOmP,GAAY,CAAE,KAAM0oC,EAAQ,IAAI,CAAE,CAC/C,CAAK,EACK,CAAE,IAAA1nC,EAAK,OAAA3K,EAAQ,IAAAkZ,EAAK,IAAA7S,EAAK,GAAAnF,CAAE,EAAK,IAAIwY,GAAQ,CAChD,QAAAlf,EACA,KAAAxB,EACA,QAASnV,EAAQ,aACjB,QAAS,KAAK,OACpB,CAAK,EAEK+6B,GAAQsJ,GAAY,CACxB,KAAAlvB,EACA,QAAAwB,EACA,QAAS,KAAK,QACd,QAAA3W,CACN,CAAK,EAEK+W,GAAa+jB,GAAmB,CACpC,MAAAC,GACA,QAAApkB,EACA,QAAS3W,EAAQ,OACvB,CAAK,EAED,KAAK,QAAU2W,EACf,KAAK,KAAOhf,EACZ,KAAK,KAAOmf,EACZ,KAAK,IAAM8F,EACX,KAAK,QAAUrH,EACf,KAAK,MAAQQ,EACb,KAAK,KAAOwO,EAEZ,KAAK,MAAQ9N,GAAY,CACvB,QAAAC,EACA,OAAAE,EACA,KAAAzB,EACA,QAAAwB,EACA,KAAAG,EACA,WAAAC,GACA,MAAAC,EACA,SAAAH,EACA,QAAS,KAAK,QACd,QAAA7W,CACN,CAAK,EAED,KAAK,KAAOmX,GAAW,CACrB,QAAAT,EACA,QAAAC,EACA,WAAAI,GACA,KAAAD,EACA,KAAA3B,CACN,CAAK,EAED,KAAK,IAAMglC,GAAU,CAAE,QAAAzjC,EAAS,KAAAvB,EAAM,OAAAyB,EAAQ,EAC9C,KAAK,OAAS+kC,GAAa,CAAE,QAAAjlC,EAAS,OAAQ1W,EAAQ,OAAQ,EAC9D,KAAK,IAAMwjB,EACX,KAAK,SAAWV,EAChB,KAAK,GAAKqT,GAAS,CAAE,QAAAzf,EAAS,OAAAE,CAAM,CAAE,EACtC,KAAK,QAAUqf,GAAc,CAAE,KAAA9gB,CAAI,CAAE,EACrC,KAAK,QAAU,IAAIyR,GAAW,CAAE,QAAAlQ,CAAO,CAAE,EACzC,KAAK,UAAY,IAAI+Q,GAAa,CAAE,KAAAtS,CAAI,CAAE,EAC1C,KAAK,OAAS+hB,GAAa,CAAE,KAAA/hB,CAAI,CAAE,EACnC,KAAK,KAAOurC,GAAW,CAAE,QAAAhqC,CAAO,CAAE,EAElC,KAAK,IAAMoQ,EACX,KAAK,OAAS3K,EACd,KAAK,IAAMkZ,EACX,KAAK,IAAM7S,EACX,KAAK,GAAKnF,EAEV,KAAK,IAAMoxC,EACX,KAAK,MAAQ1zB,GACb,KAAK,IAAM,IAAIkK,GAAO,CAAE,SAAApuB,CAAQ,CAAE,EAClC,KAAK,OAAS,IAAIwvB,GAAU,CAAE,QAAA1vB,EAAS,OAAAvP,EAAQ,KAAA+N,EAAM,EACrD,KAAK,KAAO,IAAIsxB,GAAQ,CAAE,KAAAtxB,EAAM,QAAS,KAAK,QAAS,EACvD,KAAK,MAAQ,IAAI0xB,GAAS,CAAE,KAAA1xB,EAAM,QAAAuB,CAAO,CAAE,EAC3C,KAAK,MAAQ,IAAIy2C,GAAS,CAAE,QAAAz2C,CAAO,CAAE,EAGrC,OAAO,eAAe,KAAM,SAAU,CACpC,KAAO,CACL,MAAM+E,GAAM/E,EAAQ,IAAK,EACzB,OAAO+E,GAAMA,GAAI,OAAS,MAC3B,CACP,CAAK,EAGD,MAAMizC,GAAiB,IAAM,QAAQ,OAAOp/C,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,CAAC,EAClGq/C,EAAqB,iBAAoB,CAAE,MAAMr/C,EAAQ,IAAI,MAAM,iBAAiB,EAAG,qBAAqB,CAAG,EACrH,KAAK,SAAWo/C,GAChB,KAAK,KAAO,CACV,KAAMA,GACN,IAAKA,GACL,IAAKA,EACN,EACD,KAAK,IAAM,CACT,MAAOA,GACP,GAAIA,GACJ,KAAMC,CACP,EACD,KAAK,MAAQD,GAEb,KAAK,OAAStnD,CACf,CAQD,MAAM,MAAQ,CACZ,MAAM,IAAIK,EACX,CACH,CAKA,MAAMk3B,GAAc,MAAOiJ,GAAS,CAClC,MAAMvmC,EAAMu6B,EAAa,CACvB,KAAM,IAAIh8B,EAAO,CAAE,KAAM,WAAW,CAAE,EAAE,QAAS,EACjD,MAAO,CAAE,CACb,CAAG,EAEKgE,EAAM,MAAMgkC,EAAK,MAAM,IAAIvmC,EAAK,CACpC,OAAQ,WACR,OAAQ,QACZ,CAAG,EAED,aAAMumC,EAAK,IAAI,IAAIhkC,CAAG,EAEfA,CACT,EAKMgrD,GAAoB,KAAO,CAC/B,MAAO,GACP,aAAc,CAAE,EAChB,QAAS,CACP,QAAS,CAACC,GAAM,OAChB,UAAW,CACT,oCACA,oCACA,oCACA,mCACD,CACF,CACH,GAKO,eAAersD,GAAQxC,EAAU,GAAI,CAC1CA,EAAUqjB,GAAaurC,GAAmB,EAAE5uD,CAAO,EACnD,MAAMyiD,EAAcziD,EAAQ,MAAQ,CAAE,EAKhCghB,EAAK,CACT,KAAMrb,GAAS,KACf,KAAMA,GAAS,KACf,OAASqb,GAAOA,EAChB,OAASA,GAAOA,CACjB,EAGKggC,EAAc,OAAO,OAAO55C,EAAM,EAExC,CAACk1B,GAAO2kB,GAASC,GAASC,GAASngC,CAAE,EAAE,OAAQhhB,EAAQ,MAAQA,EAAQ,KAAK,QAAW,CAAA,CAAE,EAAE,QAAQiF,GAAS+7C,EAAY,KAAK/7C,CAAK,CAAC,EAEnI,MAAMm8C,EAAc,IAAIvL,GAAY,CAClC,OAAQmL,EACR,UAAWhhD,EAAQ,MAAQA,EAAQ,KAAK,SAC5C,CAAG,EAGKgX,EAAQhX,EAAQ,OAAS+d,GAAM,QAAQ,IAE7CA,GAAI,eAAe,EACnB,MAAMywC,EAAU,MAAMvM,GAAQ,MAAMjrC,EAAOoqC,EAAaphD,CAAO,EAE/D+d,GAAI,qBAAqB,EACzB,MAAMgJ,EAAS,MAAMynC,EAAQ,KAAK,OAAO,OAAQ,EAE3C5mB,EAAO,IAAIj2B,GAAK,CACpB,QAAA68C,EACA,MAAAx3C,EACA,OAAQoqC,EACR,QAAS,CAAE,GAAGphD,EAAS,OAAA+mB,CAAQ,CACnC,CAAG,EAQD,GANAhJ,GAAI,kBAAkB,EACtB,MAAM6pB,EAAK,QAAQ,MAAO,EAE1B7pB,GAAI,kBAAkB,EACtB6pB,EAAK,KAAK,aAAa4mB,CAAO,EAE1BA,EAAQ,OAAS,CAAC/L,EAAY,UAAW,CAE3C,MAAM7+C,EAAM,MAAM+6B,GAAYiJ,CAAI,EAOlC,GALA7pB,GAAI,uBAAuB,EAC3B,MAA2B6pB,EAAK,OAA1B,QAEN7pB,GAAI,4BAA4B,EAE5BywC,EAAQ,OAAO,WAAa,KAC9B,MAAMl/C,EAAQ,IAAI,MAAM,oBAAoB,EAAG,wBAAwB,EAGzE,MAAM0Q,EAAoB,IAAInM,GAAiB,kBAAC06C,EAA0B,EAC1E,GAAI,CACF,MAAM3mB,EAAK,KAAK,mBAAmB4mB,EAAQ,OAAQpkD,EAAqB,SAASxG,CAAG,EAAE,EAAG,CACvF,OAAQoc,EAAkB,MAClC,CAAO,CACP,QAAc,CACRA,EAAkB,MAAO,CAC1B,CACF,CAED,OAAIhgB,EAAQ,QAAU,KACpB+d,GAAI,eAAe,EACnB,MAAM6pB,EAAK,MAAO,GAGbA,CACT,CC3UO,MAAMplC,GAASs2B,GCRTt2B,GAASs2B,GCYP,MAAMg2B,EAAM,CAIzB,YAAa9tC,EAAI,CACf,KAAK,GAAKA,EACV,KAAK,OAAS,CAAE,CACjB,CAMD,KAAO,CACL,OAAO,KAAK,MACb,CAOD,MAAM,YAAa+tC,EAAO9I,EAAS,CACjC,KAAK,OAAS8I,EAAM,MACrB,CACH,CC3CA,MAAMC,EAAK,CACT,YAAapwD,EAAQ,CAAE,CACvB,OAAQtC,EAAO,CAAE,CACjB,MAAOy6B,EAAK,CAAE,CACd,IAAKz6B,EAAO,CAAE,CACd,IAAKA,EAAO,CAAE,CACd,IAAI,QAAU,CAAE,CAChB,IAAI,QAAU,CAAE,CAClB,CCfA,MAAM2yD,EAAa,CACjB,YAAajuC,EAAIysC,EAAM,CACrB,KAAK,GAAKzsC,EACV,KAAK,KAAOysC,GAAQ,CACrB,CAED,MAAQ,CACN,OAAO,IAAIwB,GAAa,KAAK,GAAI,EAAE,KAAK,IAAI,CAC7C,CAED,MAAOC,EAAO,CACZ,YAAK,KAAO,KAAK,IAAI,KAAK,KAAMA,EAAM,IAAI,EACnC,IAAID,GAAa,KAAK,GAAI,KAAK,IAAI,CAC3C,CAED,OAAS,CACP,OAAO,IAAIA,GAAa,KAAK,GAAI,KAAK,IAAI,CAC3C,CAED,OAAO,QAAS/rD,EAAGlJ,EAAG,CAEpB,MAAMm1D,EAAOjsD,EAAE,KAAOlJ,EAAE,KAIxB,OAAIm1D,IAAS,GAAKjsD,EAAE,KAAOlJ,EAAE,GAAWkJ,EAAE,GAAKlJ,EAAE,GAAK,GAAK,EAEpDm1D,CACR,CACH,CCtBA,MAAMC,GAAS,WACTC,GAAc1yD,EACd2yD,GAAwB,IAAM,IAAI,MAAM,mBAAmB,EAE3DC,GAAgBv2D,GACfA,IAID,MAAM,QAAQA,CAAG,EACZA,EAAI,IAAIu2D,EAAY,EAGtBzrD,EAAI,MAAM9K,CAAG,GAGhBw2D,GAAe,CAAC5rD,EAAK5D,EAAU,KAAO,CAC1C,GAAI,CAAC4D,GAAO,OAAOA,GAAQ,SACzB,OAAOA,EAGT,GAAI,MAAM,QAAQA,CAAG,EACnB,OAAOA,EAAI,IAAI4rD,EAAY,EAG7B,MAAM/3D,EAAOuI,EAAQ,MAAQqvD,GAC7B,OAAOzrD,EAAI,SAASnM,CAAI,CAC1B,EAEMg4D,GAAa,CACjB,CAAC/8B,CAAU,EAAG/I,GACd,CAACgL,EAAY,EAAG+6B,EAClB,EACMC,GAAW,CAGf,IAAKD,GACL,SAAU/lC,GACV,WAAY+lC,EACd,EAUA,eAAexuD,GAAM0mC,EAAMhkC,EAAK5D,EAAU,CAAA,EAAI,CAC5C4D,EAAM2rD,GAAaC,GAAa5rD,CAAG,CAAC,EAEpC,MAAMqB,EAAQwqD,GAAW7rD,EAAI,IAAI,EACjC,GAAI,CAACqB,EAAO,MAAMqqD,GAAuB,EAEzC,MAAM10D,EAAQ,MAAMgtC,EAAK,MAAM,IAAIhkC,EAAK,CAAE,QAAS5D,EAAQ,QAAS,EAC9D+V,EAAQ,MAAM65C,GAAa,CAAE,MAAAh1D,EAAO,MAAAqK,EAAOorB,OAAAA,GAAQ,EAEzD,GAAIta,EAAM,IAAI,OAAS2c,EACrB,OAAO,KAAK,MAAM,IAAI,YAAW,EAAG,OAAO3c,EAAM,MAAM,IAAI,CAAC,EAE9D,GAAIA,EAAM,IAAI,OAAS4e,GAAc,CACnC,MAAMr4B,EAAQyZ,EAAM,MAEpB,OADc/V,EAAQ,OAAS,CAAE,GAC3B,QAASs0B,GAAS,CAClBh4B,EAAMg4B,CAAI,IACZh4B,EAAMg4B,CAAI,EAAIk7B,GAAalzD,EAAMg4B,CAAI,EAAGt0B,CAAO,EAEvD,CAAK,EACM1D,CACR,CACH,CAWA,eAAeomC,GAAOkF,EAAMvkC,EAAQ/G,EAAO0D,EAAU,CAAA,EAAI,CACnDA,EAAQ,SAAW,WAAUqD,EAASrD,EAAQ,QAClD,MAAMiF,EAAQ0qD,GAAStsD,CAAM,EAC7B,GAAI,CAAC4B,EAAO,MAAMqqD,GAAuB,EAErCrqD,EAAM,OAASytB,IACjBp2B,EAAQ,OAAOA,GAAU,SAAWA,EAAQ,KAAK,UAAUA,CAAK,EAChEA,EAAQ,CAAE,KAAM,IAAI,YAAW,EAAG,OAAOA,CAAK,EAAG,MAAO,EAAI,GAE1D2I,EAAM,OAAS0vB,KACH30B,EAAQ,OAAS,CAAE,GAC3B,QAASs0B,GAAS,CAClBh4B,EAAMg4B,CAAI,IACZh4B,EAAMg4B,CAAI,EAAIi7B,GAAajzD,EAAMg4B,CAAI,CAAC,EAE9C,CAAK,EAGH,MAAMve,EAAQ,MAAM85C,GAAa,CAAE,MAAAvzD,EAAO,MAAA2I,EAAOorB,OAAAA,GAAQ,EACzD,aAAMuX,EAAK,MAAM,IAAI7xB,EAAM,MAAO,CAChC,IAAKA,EAAM,IAAI,MACf,QAASA,EAAM,IAAI,QACnB,OAAA1S,EACA,OAAA+rD,GACA,IAAKpvD,EAAQ,IACb,QAASA,EAAQ,OACrB,CAAG,GAEWiF,EAAM,OAASytB,EACvB3c,EAAM,IAAI,KAAM,EAChBA,EAAM,KACC,SAAS/V,EAAQ,MAAQqvD,EAAW,CACjD,CCzHA,SAASS,GAAY5sD,EAAGlJ,EAAGgc,EAAK,CAE9B,MAAM+5C,EAAY,CAAE,EACd1G,EAAW,CAAE,EAGb2G,EAAazuC,GAAM8nC,EAASrzC,EAAMuL,EAAEvL,CAAG,EAAIuL,CAAC,EAAI,GACtDre,EAAE,QAAQ8sD,CAAU,EAGpB,MAAMlkC,EAAU,CAACxqB,EAAKud,IAAU,CAC9B,MAAMoxC,EAAY5G,EAASrzC,EAAM6I,EAAM7I,CAAG,EAAI6I,CAAK,IAAM,OACnDqxC,EAAmBH,EAAU/5C,EAAM6I,EAAM7I,CAAG,EAAI6I,CAAK,IAAM,OACjE,MAAI,CAACoxC,GAAa,CAACC,IACjB5uD,EAAI,KAAKud,CAAK,EACdkxC,EAAU/5C,EAAM6I,EAAM7I,CAAG,EAAI6I,CAAK,EAAI,IAEjCvd,CACR,EAED,OAAOtH,EAAE,OAAO8xB,EAAS,EAAE,CAC7B,CCrBA,SAASqkC,GAAa7zD,EAAO0Z,EAAK,CAEhC,MAAMo6C,EAAU,CAAE,EACZ5tC,EAAMjB,GAAK6uC,EAAQ7uC,CAAC,EACpByuC,EAAazuC,GAAM6uC,EAAQp6C,EAAMuL,EAAEvL,CAAG,EAAIuL,CAAC,EAAIA,EACrD,OAAAjlB,EAAM,QAAQ0zD,CAAU,EACjB,OAAO,KAAKI,CAAO,EAAE,IAAI5tC,CAAG,CACrC,CCPA,MAAM6tC,EAAap+C,GAA6BA,GAAQ,KCKlDq+C,GAAsB,IAAM,IAAI,MAAM,2BAA2B,EACjEC,GAAa,CAAC,OAAQ,MAAM,EAC5BC,GAA2B12B,GAAKA,IAAM,EAAI,SAAW,WACrD22B,GAAiBlvC,GAAK2iC,GAAM,QAAQ3iC,CAAC,EAAIivC,GAAyBjvC,EAAE,CAAC,EAAIivC,GAAyBjvC,CAAC,EAMzG,MAAM2iC,EAAM,CAeV,aAAa,OAAQtc,EAAMjiC,EAAU+qD,EAAOn0D,EAAMyI,EAAO,CAAE,EAAEkqD,EAAO3qC,EAAO,CAAA,EAAI3H,EAAK,CAClF,GAAI,CAACyzC,EAAUzoB,CAAI,EAAG,MAAM0oB,GAAqB,EACjD,GAAI,CAACD,EAAU1qD,CAAQ,EAAG,MAAM,IAAI,MAAM,2CAA2C,EACrF,GAAI,CAAC0qD,EAAUK,CAAK,EAAG,MAAM,IAAI,MAAM,sBAAsB,EAC7D,GAAI,CAACL,EAAU9zD,CAAI,EAAG,MAAM,IAAI,MAAM,qBAAqB,EAC3D,GAAI,CAAC8zD,EAAUrrD,CAAI,GAAK,CAAC,MAAM,QAAQA,CAAI,EAAG,MAAM,IAAI,MAAM,iCAAiC,EAG/F,MAAM2rD,EAAWpvC,GAAMA,EAAE,KAAOA,EAAE,KAAOA,EACnCqvC,EAAQ5rD,EAAK,OAAOqrD,CAAS,EAAE,IAAIM,CAAO,EAE1C9xC,EAAQ,CACZ,KAAM,KACN,GAAI6xC,EACJ,QAASn0D,EACT,KAAMq0D,EACN,KAAArsC,EACA,EAAG,EACH,MAAO2qC,GAAS,IAAI2B,GAAMlrD,EAAS,SAAS,CAC7C,EAEKmrD,EAAY,MAAMnrD,EAAS,SAAS,KAAKA,EAAUu+C,GAAM,SAASrlC,CAAK,CAAC,EAE9E,OAAAA,EAAM,IAAMlZ,EAAS,UACrBkZ,EAAM,SAAWlZ,EAAS,OAAQ,EAClCkZ,EAAM,IAAMiyC,EACZjyC,EAAM,KAAO,MAAMqlC,GAAM,YAAYtc,EAAM/oB,EAAOjC,CAAG,EAE9CiC,CACR,CASD,aAAa,OAAQkyC,EAAkBlyC,EAAO,CAC5C,GAAI,CAACkyC,EAAkB,MAAM,IAAI,MAAM,oDAAoD,EAC3F,GAAI,CAAC7M,GAAM,QAAQrlC,CAAK,EAAG,MAAM,IAAI,MAAM,mBAAmB,EAC9D,GAAI,CAACA,EAAM,IAAK,MAAM,IAAI,MAAM,0BAA0B,EAC1D,GAAI,CAACA,EAAM,IAAK,MAAM,IAAI,MAAM,gCAAgC,EAEhE,MAAM0C,EAAI2iC,GAAM,QAAQrlC,EAAO,CAAE,UAAW,GAAM,EAC5CmyC,EAAWnyC,EAAM,EAAI,EAAI,KAAO,KACtC,OAAOkyC,EAAiB,OAAOlyC,EAAM,IAAKA,EAAM,IAAKqlC,GAAM,SAAS3iC,CAAC,EAAGyvC,CAAQ,CACjF,CAOD,OAAO,SAAUnyC,EAAO,CACtB,MAAMoyC,EAAmBpyC,EAAM,IAAM,EAAI,KAAK,UAAUA,CAAK,EAAIqyC,GAAUryC,CAAK,EAChF,OAAOsyC,GAAM,OAAC,KAAKF,CAAgB,CACpC,CAaD,aAAa,YAAarpB,EAAM/oB,EAAOjC,EAAM,GAAO,CAClD,GAAI,CAACgrB,EAAM,MAAM0oB,GAAqB,EACtC,GAAI,CAACpM,GAAM,QAAQrlC,CAAK,EAAG,MAAM,IAAI,MAAM,mDAAmD,EAG9F,MAAM0C,EAAI2iC,GAAM,QAAQrlC,CAAK,EAC7B,OAAO6jB,GAAMkF,EAAM6oB,GAAelvC,EAAE,CAAC,EAAGA,EAAG,CAAE,MAAOgvC,GAAY,IAAA3zC,CAAG,CAAE,CACtE,CAED,OAAO,QAASiC,EAAO,CAAE,UAAAuyC,EAAY,GAAO,YAAAC,EAAc,EAAO,EAAG,GAAI,CACtE,MAAM9vC,EAAI,CACR,KAAM8vC,EAAcxyC,EAAM,KAAO,KACjC,GAAIA,EAAM,GACV,QAASA,EAAM,QACf,KAAMA,EAAM,IACb,EAEKib,EAAIjb,EAAM,EAOhB,OANIib,EAAI,IACNvY,EAAE,KAAO1C,EAAM,MAEjB0C,EAAE,EAAI1C,EAAM,EACZ0C,EAAE,MAAQ,IAAIsvC,GAAMhyC,EAAM,MAAM,GAAIA,EAAM,MAAM,IAAI,EAEhDuyC,IAIJ7vC,EAAE,IAAM1C,EAAM,IACVib,EAAI,IACNvY,EAAE,SAAW1C,EAAM,UAErB0C,EAAE,IAAM1C,EAAM,KACP0C,CACR,CAYD,aAAa,cAAeqmB,EAAM98B,EAAM,CACtC,GAAI,CAAC88B,EAAM,MAAM0oB,GAAqB,EACtC,GAAI,CAACxlD,EAAM,MAAM,IAAI,MAAM,iBAAiBA,CAAI,EAAE,EAClD,MAAMyW,EAAI,MAAMrgB,GAAK0mC,EAAM98B,EAAM,CAAE,MAAOylD,GAAY,EAEhD1xC,EAAQqlC,GAAM,QAAQ3iC,CAAC,EAC7B,OAAA1C,EAAM,KAAO/T,EAEN+T,CACR,CAOD,OAAO,QAASlC,EAAK,CACnB,OAAOA,GAAOA,EAAI,KAAO,QACvBA,EAAI,OAAS,QACbA,EAAI,UAAY,QAChBA,EAAI,IAAM,QACVA,EAAI,OAAS,QACbA,EAAI,QAAU,SACbA,EAAI,OAAS,QAAaA,EAAI,EAAI,EACtC,CAQD,OAAO,QAASzZ,EAAGlJ,EAAG,CACpB,MAAMs3D,EAAWT,GAAM,QAAQ3tD,EAAE,MAAOlJ,EAAE,KAAK,EAC/C,OAAIs3D,IAAa,EAAUpuD,EAAE,MAAM,GAAKlJ,EAAE,MAAM,GAAK,GAAK,EACnDs3D,CACR,CAQD,OAAO,QAASpuD,EAAGlJ,EAAG,CACpB,OAAOkJ,EAAE,OAASlJ,EAAE,IACrB,CAQD,OAAO,SAAUu3D,EAAQC,EAAQ,CAC/B,OAAOA,EAAO,KAAK,QAAQD,EAAO,IAAI,EAAI,EAC3C,CASD,OAAO,aAAc1yC,EAAOjgB,EAAQ,CAClC,IAAI6yD,EAAQ,CAAE,EACVj0C,EAAS5e,EAAO,KAAM2iB,GAAM2iC,GAAM,SAASrlC,EAAO0C,CAAC,CAAC,EACpDmwC,EAAO7yC,EACX,KAAOrB,GACLi0C,EAAM,KAAKj0C,CAAM,EACjBk0C,EAAOl0C,EACPA,EAAS5e,EAAO,KAAM2iB,GAAM2iC,GAAM,SAASwN,EAAMnwC,CAAC,CAAC,EAErD,OAAAkwC,EAAQA,EAAM,KAAK,CAACvuD,EAAGlJ,IAAMkJ,EAAE,MAAM,KAAOlJ,EAAE,MAAM,IAAI,EACjDy3D,CACR,CACH,CC1NA,KAAM,SAAEE,GAAS,cAAAC,EAAa,EAAK1N,GAC7B2N,GAAWC,GAAOA,GAAOA,EAAI,OAAS,EAE5C,MAAMC,EAAQ,CAEZ,aAAa,cAAenqB,EAAM1gC,EAAQ,CAAE,OAAA1O,EAAQ,QAAAw5D,EAAU,CAAA,EAAI,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,CAAkB,EAAI,CAC3H,MAAMC,EAAW,MAAOtnD,GAASinD,GAAQ,SAASnqB,EAAM98B,EAAM,CAAE,OAAAtS,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,mBAAAy+C,EAAoB,YAAAD,CAAW,CAAE,EACpIG,EAAe,CAACC,EAAMC,IAASD,EAAK,OAAOC,CAAI,EAC/CC,EAAWV,GAAQA,EAAI,OAAOO,EAAc,EAAE,EAC9C/wD,EAAM,MAAMmxD,GAAKvrD,EAAQkrD,EAAU,CAAE,YAAa,KAAK,IAAIF,GAAehrD,EAAO,OAAQ,CAAC,CAAC,CAAE,EACnG,OAAOsrD,EAAQlxD,CAAG,CACnB,CAeD,aAAa,SAAUsmC,EAAM1gC,EAAQ,CAAE,OAAA1O,EAAS,GAAI,QAAAw5D,EAAU,CAAE,EAAE,cAAAC,EAAe,QAAAv+C,EAAS,mBAAAy+C,EAAoB,wBAAAO,EAAyB,YAAAR,EAAc,GAAI,MAAAS,EAAQ,CAAG,EAAG,GAAI,CACzK,MAAMjtD,EAAS,CAAE,EACX/B,EAAQ,CAAE,EACVivD,EAAe,CAAE,EACjBC,EAAe,MAAM,QAAQ3rD,CAAM,EACrC,CAAE,EAAGA,EAAO,OAAS,EACrB,CAAE,EAAG,CAACA,CAAM,CAAG,EACnB,IAAI4rD,EAAU,EACVC,EAAW,EACXC,EAAW,EACff,EAAgBA,IAAkB,IAAM,IAGxC,MAAMgB,EAAsB,IAAM,OAAO,OAAOJ,CAAY,EAAE,KAAKhB,EAAQ,IAAM,OAG3EqB,EAAoB,CAAC3xC,EAAGwnB,IAAQ,CAChC,CAAC6pB,EAAarxC,CAAC,GAAK,CAAC0wC,EAAc1wC,CAAC,IACjCsxC,EAAa9pB,CAAG,IAAG8pB,EAAa9pB,CAAG,EAAI,CAAE,GACzC8pB,EAAa9pB,CAAG,EAAE,SAASxnB,CAAC,GAC/BsxC,EAAa9pB,CAAG,EAAE,KAAKxnB,CAAC,EAE1BqxC,EAAarxC,CAAC,EAAI,GAErB,EAGK4xC,EAAmB,CAAC36D,EAAS,IAAM,CACvC,MAAM46D,EAAU,CAAC9xD,GAAK0U,GAAK+yB,KAAQ,CACjC,MAAMsqB,EAAYR,EAAa78C,EAAG,EAClC,KAAOq9C,EAAU,OAAS,GAAK/xD,GAAI,OAAS9I,GAAQ,CAClD,MAAMsS,GAAOuoD,EAAU,MAAO,EAC9B/xD,GAAI,KAAKwJ,EAAI,CACd,CACD,OAAIuoD,EAAU,SAAW,GACvB,OAAOR,EAAa78C,EAAG,EAElB1U,EACR,EACD,OAAO,OAAO,KAAKuxD,CAAY,EAAE,OAAOO,EAAS,EAAE,CACpD,EAGKE,EAAoB/xC,GAAK,CAAE5d,EAAM4d,EAAE,MAAQA,CAAC,EAAI,EAAM,EAGtDgyC,EAAa,MAAOzoD,GAAS,CACjC,GAAI,GAACA,GAAQnH,EAAMmH,CAAI,GAAKmnD,EAAcnnD,CAAI,GAK9C,OAAO,IAAI,QAAQ,MAAOyK,EAASrB,KAAW,CAG5C,MAAMs/C,GAAQ9/C,GAAWA,EAAU,EAC/B,WAAW,IAAM,CACjB,QAAQ,KAAK,kCAAkC5I,CAAI,yBAAyB4I,CAAO,KAAK,EACxF6B,EAAS,CACV,EAAE7B,CAAO,EACR,KAEE+/C,GAAgB50C,GAAU,CAC9B,GAAI8yC,GAAQ9yC,CAAK,GAAK,CAAClb,EAAMkb,EAAM,IAAI,GAAK,CAACozC,EAAcpzC,EAAM,IAAI,EAAG,CACtE,MAAM60C,GAAK70C,EAAM,MAAM,KAGvBk0C,EAAW,KAAK,IAAIA,EAAUW,EAAE,EAChCV,EAAWttD,EAAO,OAAS,EACvB,KAAK,IAAIA,EAAOA,EAAO,OAAS,CAAC,EAAE,MAAM,KAAMstD,CAAQ,EACvDD,EAEJ,MAAMY,GAAWjuD,EAAO,QAAUlN,GAAUk7D,IAAMV,EAC5CY,GAAkB7qB,IAAQgqB,EAAWW,IAAO3qB,GAAM,GAAKA,IAMxDvwC,EAAS,GAAKkN,EAAO,OAASlN,GAAUm7D,KAAY,CAAC1B,EAAcpzC,EAAM,IAAI,GAAK,CAAClb,EAAMkb,EAAM,IAAI,IACtGnZ,EAAO,KAAKmZ,CAAK,EACjBlb,EAAMkb,EAAM,IAAI,EAAI,GAEhBszC,GACFA,EAAmBtzC,CAAK,GAIxBrmB,EAAS,GAEXqmB,EAAM,KAAK,QAAQq0C,CAAiB,EAChCr0C,EAAM,MAAMA,EAAM,KAAK,QAAQq0C,CAAiB,KAKhDxtD,EAAO,OAASlN,GAAUk7D,GAAKV,GAAaU,KAAOV,GAAY,CAACrvD,EAAMkb,EAAM,IAAI,GAAK,CAACozC,EAAcpzC,EAAM,IAAI,IAChHA,EAAM,KAAK,QAAQ0C,IAAK2xC,EAAkB3xC,GAAGqyC,GAAe,CAAC,CAAC,CAAC,EAE7D/0C,EAAM,MAASnZ,EAAO,OAASmZ,EAAM,KAAK,QAAUrmB,GACtDqmB,EAAM,KAAK,QAAQ,CAAC0C,GAAGzpB,KAAMo7D,EAAkB3xC,GAAGqyC,GAAe97D,EAAC,CAAC,CAAC,EAGzE,CACF,EAEG46D,GACFA,EAAwB5nD,EAAM,KAAM,EAAGpF,EAAO,MAAM,EAGtD,GAAI,CAEF,MAAMmZ,EAAQ,MAAM+yC,GAAchqB,EAAM98B,CAAI,EAExC6nD,EAAQ,GAEV,MADc,CAAClzD,GAAK,IAAM,IAAI,QAAQ8V,IAAW,WAAWA,GAAS9V,EAAE,CAAC,GAC5DkzD,CAAK,EAGnBc,GAAa50C,CAAK,EAClBtJ,EAAS,CACV,OAAQgM,EAAG,CACVrN,GAAOqN,CAAC,CAClB,QAAkB,CACR,aAAaiyC,EAAK,CACnB,CACT,CAAO,CACF,EAGKK,EAAgB,SAAY,CAChC,GAAIf,EAAUZ,EAAa,CACzB,MAAMtB,EAAQuC,EAAiBjB,CAAW,EAC1CY,GAAWlC,EAAM,OACjB,MAAM6B,GAAK7B,EAAO2C,EAAY,CAAE,YAAArB,CAAW,CAAE,EAC7CY,GAAWlC,EAAM,MAClB,CACF,EAGD,OAAAoB,EAAQ,QAAQsB,CAAiB,EAGjC,MAAMQ,GAAUD,EAAeZ,CAAmB,EAE3CvtD,CACR,CACH,CCrKA,SAASquD,GAAe7wD,EAAGlJ,EAAG,CAE5B,MAAMg6D,EAAQ,CAAC,EAAGh6D,IAAM,EAElBi6D,EAAW,CAAC,EAAGj6D,IAAMk6D,GAAc,EAAGl6D,EAAGg6D,CAAK,EAKpD,OAF0B,CAAC,EAAGh6D,IAAMm6D,GAAa,EAAGn6D,EAAGi6D,CAAQ,GAEtC/wD,EAAGlJ,CAAC,CAC/B,CASA,SAASo6D,GAAiBlxD,EAAGlJ,EAAG,CAE9B,MAAMq6D,EAAc,CAAC,EAAGr6D,IAAM,EAAE,KAAOA,EAAE,KAAO,GAAK,EAE/Ci6D,EAAW,CAAC,EAAGj6D,IAAMk6D,GAAc,EAAGl6D,EAAGq6D,CAAW,EAK1D,OAF0B,CAAC,EAAGr6D,IAAMm6D,GAAa,EAAGn6D,EAAGi6D,CAAQ,GAEtC/wD,EAAGlJ,CAAC,CAC/B,CASA,SAASm6D,GAAcjxD,EAAGlJ,EAAGs6D,EAAiB,CAE5C,MAAMC,EAAO1D,GAAM,QAAQ3tD,EAAE,MAAOlJ,EAAE,KAAK,EAG3C,OAAOu6D,IAAS,EAAID,EAAgBpxD,EAAGlJ,CAAC,EAAIu6D,CAC9C,CASA,SAASL,GAAehxD,EAAGlJ,EAAGs6D,EAAiB,CAG7C,OAAOpxD,EAAE,MAAM,KAAOlJ,EAAE,MAAM,GAC1Bs6D,EAAgBpxD,EAAGlJ,CAAC,EACpBkJ,EAAE,MAAM,GAAKlJ,EAAE,MAAM,GAAK,GAAK,CACrC,CAQA,SAASw6D,GAAU94B,EAAM,CACvB,MAAMiY,EAAM,mCAAmCjY,EAAK,IAAI,8CASxD,MAPmB,CAACx4B,EAAGlJ,IAAM,CAE3B,MAAM0L,EAASg2B,EAAKx4B,EAAGlJ,CAAC,EACxB,GAAI0L,IAAW,EAAK,MAAM,MAAMiuC,CAAG,EACnC,OAAOjuC,CACR,CAGH,CAEA,MAAe+uD,GAAA,CACb,aAAAN,GACA,cAAAD,GACF,cAAEH,GACA,gBAAAK,GACF,SAAEI,EACF,EClGME,GAAsB,IAAM,IAAI,MAAM,2BAA2B,EACjEC,GAAqB,IAAM,IAAI,MAAM,0BAA0B,EAC/DC,GAAe,IAAM,IAAI,MAAM,0CAA0C,EAEzEC,GAA6B,IAAM,IAAI,MAAM,gDAAgD,ECG7F,eAAEd,GAAa,SAAES,EAAQ,EAAKC,GAC9B,CAAE,SAAAK,GAAU,cAAAC,EAAa,EAAKhD,GAC9B,CAAE,QAAAiD,GAAS,QAAArD,EAAO,EAAKzN,GACvBqM,GAAa,CAAC,OAAO,EACrBn0C,GAAO,CAAC01C,EAAKpzD,IAAMozD,EAAI,MAAMA,EAAI,OAAS,KAAK,IAAIA,EAAI,OAAQpzD,CAAC,EAAGozD,EAAI,MAAM,EAEnF,MAAMmD,EAAM,CASV,aAAa,YAAartB,EAAM7pB,EAAK,CAAE,OAAA1a,CAAQ,EAAG,GAAI,CACpD,GAAI,CAACgtD,EAAUzoB,CAAI,EAAG,MAAM8sB,GAAqB,EACjD,GAAI,CAACrE,EAAUtyC,CAAG,EAAG,MAAM42C,GAAoB,EAE/C,GADKtE,EAAUhtD,CAAM,IAAGA,EAAS,YAC7B0a,EAAI,OAAO,OAAS,EAAG,MAAM,IAAI,MAAM,8BAA+B,EAE1E,OAAO2kB,GAAMkF,EAAMvkC,EAAQ0a,EAAI,SAAU,CAAE,MAAOwyC,GAAY,CAC/D,CAWD,aAAa,cAAe3oB,EAAM98B,EAChC,CAAE,OAAAtS,EAAS,GAAI,QAAAw5D,EAAU,CAAE,EAAE,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,OAAAgD,EAAQ,mBAAA/C,GAAsB,CAChG,GAAI,CAAC9B,EAAUzoB,CAAI,EAAG,MAAM8sB,GAAqB,EACjD,GAAI,CAACrE,EAAUvlD,CAAI,EAAG,MAAM,IAAI,MAAM,iBAAiBA,CAAI,EAAE,EAE7D,MAAMqqD,EAAU,MAAMj0D,GAAK0mC,EAAM98B,EAAM,CAAE,MAAOylD,GAAY,EAE5D,GAAI,CAAC4E,EAAQ,OAAS,CAACA,EAAQ,GAAI,MAAMP,GAAc,EAGvDM,EAASA,GAAUV,GAAST,EAAa,EACzC,MAAMqB,EAAS7zC,GAAK4zC,EAAQ,MAAM,SAAS5zC,EAAE,IAAI,EAE3ChI,EAAM,MAAMu7C,GAASltB,EAAMutB,EAAQ,MACvC,CAAE,OAAA38D,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,EAAoB,EAExEzB,EAAQyE,EAAQ,GAChBlP,EAAUztD,EAAS,GAAK4jB,GAAK7C,EAAI,KAAK27C,CAAM,EAAG18D,CAAM,EAAI+gB,EACzD87C,EAAQpP,EAAQ,OAAOmP,CAAM,EACnC,MAAO,CAAE,MAAA1E,EAAO,QAAAzK,EAAS,MAAAoP,CAAO,CACjC,CAWD,aAAa,cAAeztB,EAAM98B,EAChC,CAAE,OAAAtS,EAAS,GAAI,QAAAw5D,EAAU,CAAE,EAAE,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,OAAAgD,EAAQ,mBAAA/C,GAAsB,CAChG,GAAI,CAAC9B,EAAUzoB,CAAI,EAAG,MAAM8sB,GAAqB,EACjD,GAAI,CAACrE,EAAUvlD,CAAI,EAAG,MAAM,IAAI,MAAM,wBAAwB,EAE9D,MAAM5D,EAAS,MAAM,QAAQ4D,CAAI,EAAIA,EAAO,CAACA,CAAI,EAEjDtS,EAASA,EAAS,GAAK,KAAK,IAAIA,EAAQ,CAAC,EAAIA,EAC7C,MAAM+gB,EAAM,MAAMw7C,GAAcntB,EAAM1gC,EACpC,CAAE,OAAA1O,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,EAAoB,EAG9E,OAAA+C,EAASA,GAAUV,GAAST,EAAa,EAElC,CAAE,QADOv7D,EAAS,GAAK4jB,GAAK7C,EAAI,KAAK27C,CAAM,EAAG18D,CAAM,EAAI+gB,CAC7C,CACnB,CAWD,aAAa,SAAUquB,EAAMtgC,EAAM,CAAE,OAAA9O,EAAS,GAAI,QAAAkb,EAAS,YAAAw+C,EAAa,mBAAAC,GAAsB,CAC5F,GAAI,CAAC9B,EAAUzoB,CAAI,EAAG,MAAM8sB,GAAqB,EACjD,KAAM,CAAE,GAAA1zC,EAAI,MAAAq0C,CAAK,EAAK/tD,EAChBguD,EAAaD,EAAM,IAAI9zC,GAAKA,EAAE,IAAI,EAGlC0kC,GAFM,MAAM8O,GAAcntB,EAAM0tB,EACpC,CAAE,OAAA98D,EAAQ,QAAAkb,EAAS,YAAAw+C,EAAa,mBAAAC,CAAkB,CAAE,GAClC,KAAK6C,EAAO,EAChC,MAAO,CAAE,MAAOh0C,EAAI,QAAAilC,EAAS,MAAAoP,CAAO,CACrC,CAWD,aAAa,UAAWztB,EAAM2tB,EAC5B,CAAE,OAAA/8D,EAAS,GAAI,QAAAw5D,EAAU,CAAA,EAAI,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,GAAsB,CACxF,GAAI,CAAC9B,EAAUzoB,CAAI,EAAG,MAAM8sB,GAAqB,EACjD,GAAI,CAACrE,EAAUkF,CAAa,EAAG,MAAM,IAAI,MAAM,iCAAiC,EAGhF,GAAI,CAAC,MAAM,QAAQA,CAAa,GAAK,CAAC5D,GAAQ4D,CAAa,EACzD,MAAM,IAAI,MAAM,gFAAkF,EAG/F,MAAM,QAAQA,CAAa,IAC9BA,EAAgB,CAACA,CAAa,GAIhC/8D,EAASA,EAAS,GAAK,KAAK,IAAIA,EAAQ+8D,EAAc,MAAM,EAAI/8D,EAGhE,MAAM0O,EAASquD,EAAc,IAAIh0C,GAAKA,EAAE,IAAI,EAGtChI,EAAM,MAAMw7C,GAAcntB,EAAM1gC,EACpC,CAAE,OAAA1O,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,EAAoB,EAGxEqD,EAAWD,EAAc,OAAOh8C,CAAG,EAAE,OAAOy4C,CAAO,EACnD5B,EAAUD,GAAYqF,EAAU,MAAM,EAAE,KAAKR,EAAO,EAGpDS,EAASrF,EAAQ,MAAM53D,EAAS,GAAK,CAACA,EAAS,CAAC43D,EAAQ,MAAM,EAI9DsF,EAAuB5F,GAAW2F,EAAQF,EAAe,MAAM,EAS/DtP,GAPiB,CAAC/iD,EAAGyyD,IAAgB,CACzC,MAAMF,EAASvyD,EAAE,MAAMyyD,EAAY,OAAQzyD,EAAE,MAAM,EACnD,OAAOyyD,EAAY,OAAOF,CAAM,CACjC,GAI8BA,EAAQC,CAAoB,EAE3D,MAAO,CAAE,MADKzP,EAAQA,EAAQ,OAAS,CAAC,EAAE,GAC1B,QAAAA,CAAS,CAC1B,CACH,CClKA,IAAA2P,GAAA,KAAuB,CACrB,MAAM,UAAW/2C,EAAOkyC,EAAkB,CACxC,MAAO,EACR,CACH,ECJA,MAAM8E,EAAW,CACf,YAAa5P,EAAU,GAAI,CACzB,KAAK,OAASA,CACf,CAED,IAAKtU,EAAG7X,EAAG,CACT,KAAK,OAAO6X,CAAC,EAAI7X,CAClB,CAED,IAAK6X,EAAG,CACN,OAAO,KAAK,OAAOA,CAAC,CACrB,CAED,OAAQA,EAAG,CACT,OAAO,OAAO,KAAK,OAAOA,CAAC,CAC5B,CAED,IAAKmkB,EAAU,CACb,KAAK,OAAS,OAAO,OAAO,KAAK,OAAQA,CAAQ,CAClD,CAED,IAAI,QAAU,CACZ,OAAO,OAAO,OAAO,KAAK,MAAM,EAAE,MACnC,CACH,CCbA,KAAM,CAAE,cAAA/B,GAAe,SAAAS,EAAQ,EAAKC,GAE9BsB,GAAW,IAAM,IAAI,KAAM,EAAC,QAAO,EAAG,SAAU,EAChDC,GAAUz0C,GAAKA,EAAE,KACjB00C,GAAU,CAAC30D,EAAKgJ,IAAQhJ,EAAI,OAAOgJ,CAAG,EACtC4rD,GAAkBr3C,GAASA,EAAM,KACjCs3C,GAAsB,CAAC70D,EAAKgJ,IAAQ,KAAK,IAAIhJ,EAAKgJ,EAAI,MAAM,IAAI,EAChE8rD,GAAuB,CAAC90D,EAAKgJ,KACjChJ,EAAIgJ,EAAI,IAAI,EAAIA,EACThJ,GAWT,MAAM+0D,WAAYrH,EAAK,CAcrB,YAAapnB,EAAMjiC,EAAU,CAAE,MAAA+qD,EAAO,OAAA4F,EAAQ,QAAArQ,EAAS,MAAAoP,EAAO,MAAAnG,EAAO,OAAAgG,EAAQ,YAAAhD,CAAW,EAAK,CAAA,EAAI,CAC/F,GAAI,CAAC7B,EAAUzoB,CAAI,EACjB,MAAM8sB,GAAqB,EAG7B,GAAI,CAACrE,EAAU1qD,CAAQ,EACrB,MAAM,IAAI,MAAM,sBAAsB,EAOxC,GAJK0qD,EAAUiG,CAAM,IACnBA,EAAS,IAAIC,IAGXlG,EAAUpK,CAAO,GAAK,CAAC,MAAM,QAAQA,CAAO,EAC9C,MAAM,IAAI,MAAM,wDAA0D,EAG5E,GAAIoK,EAAUgF,CAAK,GAAK,CAAC,MAAM,QAAQA,CAAK,EAC1C,MAAM,IAAI,MAAM,mCAAqC,EAGlDhF,EAAU6E,CAAM,IACnBA,EAASnB,IAGX,MAAO,EAEP,KAAK,QAAUS,GAASU,CAAM,EAE9B,KAAK,SAAWttB,EAChB,KAAK,IAAM8oB,GAASqF,GAAU,EAG9B,KAAK,QAAUO,EAEf,KAAK,UAAY3wD,EAGjB,MAAM6wD,GAAiBvQ,GAAW,CAAE,GAAE,OAAOmQ,GAAsB,EAAE,EACrE,KAAK,YAAc,IAAIP,GAAWW,CAAa,EAC/CvQ,EAAU,OAAO,OAAOuQ,CAAa,GAAK,CAAE,EAG5CnB,EAAQA,GAASgB,GAAI,UAAUpQ,CAAO,EACtC,KAAK,YAAcoP,EAAM,OAAOe,GAAsB,CAAA,CAAE,EAGxD,KAAK,YAAc,CAAE,EACrB,MAAMK,EAAkBl1C,GAAKA,EAAE,KAAK,QAAQre,GAAM,KAAK,YAAYA,CAAC,EAAIqe,EAAE,IAAK,EAC/E0kC,EAAQ,QAAQwQ,CAAe,EAG/B,KAAK,QAAUxQ,EAAQ,OAGvB,MAAMyQ,EAAU,KAAK,IAAIxH,EAAQA,EAAM,KAAO,EAAG,KAAK,MAAM,OAAOiH,GAAqB,CAAC,CAAC,EAI1F,KAAK,OAAS,IAAItF,GAAM,KAAK,UAAU,UAAW6F,CAAO,EAEzD,KAAK,gBAAkBxE,GAAe,EACvC,CAMD,IAAI,IAAM,CACR,OAAO,KAAK,GACb,CAMD,IAAI,OAAS,CACX,OAAO,KAAK,MACb,CAMD,IAAI,QAAU,CACZ,OAAO,KAAK,OACb,CAMD,IAAI,QAAU,CACZ,OAAO,OAAO,OAAO,KAAK,SAAS,KAAK,KAAK,CAAC,EAAE,QAAS,CAC1D,CAMD,IAAI,OAAS,CACX,OAAO,OAAO,OAAO,KAAK,WAAW,EAAE,KAAK,KAAK,OAAO,EAAE,QAAS,CACpE,CAOD,IAAI,OAAS,CACX,OAAOmE,GAAI,UAAU,KAAK,MAAM,CACjC,CAOD,IAAI,YAAc,CAChB,OAAOA,GAAI,eAAe,KAAK,MAAM,CACtC,CAMD,YAAa1wD,EAAU,CACrB,KAAK,UAAYA,EAEjB,MAAM8nD,EAAO,KAAK,IAAI,KAAK,MAAM,KAAM,KAAK,MAAM,OAAO0I,GAAqB,CAAC,CAAC,EAChF,KAAK,OAAS,IAAItF,GAAM,KAAK,UAAU,UAAWpD,CAAI,CACvD,CAOD,IAAK3iD,EAAM,CACT,OAAO,KAAK,YAAY,IAAIA,CAAI,CACjC,CAOD,IAAK+T,EAAO,CACV,OAAO,KAAK,YAAY,IAAIA,EAAM,MAAQA,CAAK,IAAM,MACtD,CAED,SAAU83C,EAAaC,EAAS,GAAIC,EAAS,CAE3C,IAAIpF,EAAQkF,EAAY,KAAK,KAAK,OAAO,EAAE,QAAS,EAGhDG,EAAY,CAAE,EAElB,MAAMpxD,EAAS,CAAE,EACjB,IAAIgmB,EAAQ,EAEZ,MAAMqrC,EAAWx1C,GAAK,KAAK,IAAIA,CAAC,EAG1By1C,EAAan4C,GAAS,CAEtB,CAACA,GAASi4C,EAAUj4C,EAAM,IAAI,IAKlC4yC,EAAQ,CAAC5yC,EAAO,GAAG4yC,CAAK,EACrB,KAAK,KAAK,OAAO,EACjB,QAAS,EAEZqF,EAAUj4C,EAAM,IAAI,EAAI,GACzB,EAEKo4C,EAAWC,GAAa,CAC5BxxD,EAAOwxD,EAAU,IAAI,EAAIA,EACzBJ,EAAUI,EAAU,IAAI,EAAI,GAC5BxrC,GACD,EAMD,KAAO+lC,EAAM,OAAS,IAAM/lC,EAAQkrC,GAAUA,EAAS,IAAI,CAEzD,MAAM/3C,EAAQ4yC,EAAM,MAAO,EAI3B,GAFAwF,EAASp4C,CAAK,EAEVg4C,GAAWA,IAAYh4C,EAAM,KAAM,MAGvBA,EAAM,KAAK,IAAIk4C,CAAQ,EACf,OAAO1G,CAAS,EAChC,QAAQ2G,CAAU,CAC3B,CAED,OAAAvF,EAAQ,CAAE,EACVqF,EAAY,CAAE,EAEPpxD,CACR,CAOD,MAAM,OAAQnJ,EAAM46D,EAAe,EAAGv6C,EAAM,GAAO,CAEjD,MAAMw6C,EAAU,KAAK,IAAI,KAAK,MAAM,KAAM,KAAK,MAAM,OAAOjB,GAAqB,CAAC,CAAC,EAAI,EACvF,KAAK,OAAS,IAAItF,GAAM,KAAK,MAAM,GAAIuG,CAAO,EAE9C,MAAM79C,EAAM,OAAO,OAAO,KAAK,SAAS,KAAK,MAAO,KAAK,IAAI49C,EAAc,KAAK,MAAM,MAAM,CAAC,CAAC,EAcxFt2B,GARgBw2B,GAAgB,CACpC,MAAMpR,EAAU,IAAI,IACpB,QAASnuD,EAAI,EAAGA,GAAKu/D,EAAav/D,GAAK,EAAG,CACxC,MAAMwI,EAAQ,KAAK,IAAIxI,EAAI,EAAGyhB,EAAI,OAAS,CAAC,EAC5C0sC,EAAQ,IAAI1sC,EAAIjZ,CAAK,CAAC,CACvB,CACD,OAAO2lD,CACR,GAC+B,KAAK,IAAIkR,EAAc59C,EAAI,MAAM,CAAC,EAG9DA,EAAI,OAAS49C,GAAgB59C,EAAIA,EAAI,OAAS,CAAC,GACjDsnB,EAAW,IAAItnB,EAAIA,EAAI,OAAS,CAAC,CAAC,EAIpC,MAAMq3C,EAAQ,OAAO,KAAK,KAAK,MAAM,QAAO,EAAG,OAAOwF,GAAsB,CAAA,CAAE,CAAC,EACzEkB,EAAS/1C,GAAK,CAACqvC,EAAM,SAASrvC,CAAC,EAE/BgD,EAAO,MAAM,KAAKsc,CAAU,EAAE,IAAIm1B,EAAO,EAAE,OAAOsB,CAAM,EAGxDz4C,EAAQ,MAAMqlC,GAAM,OACxB,KAAK,SACL,KAAK,UACL,KAAK,GACL3nD,EACAq0D,EACA,KAAK,MACLrsC,EACA3H,CACD,EAGD,GAAI,CADc,MAAM,KAAK,QAAQ,UAAUiC,EAAO,KAAK,UAAU,QAAQ,EAE3E,MAAM,IAAI,MAAM,gCAAgC,KAAK,UAAU,EAAE,sCAAsC,EAGzG,YAAK,YAAY,IAAIA,EAAM,KAAMA,CAAK,EACtC+xC,EAAM,QAAQrvC,GAAM,KAAK,YAAYA,CAAC,EAAI1C,EAAM,IAAK,EACrD,KAAK,YAAc,CAAE,EACrB,KAAK,YAAYA,EAAM,IAAI,EAAIA,EAE/B,KAAK,UACEA,CACR,CAgCD,SAAU,CAAE,GAAA04C,EAAK,OAAW,IAAAC,EAAM,OAAW,GAAAC,EAAK,OAAW,IAAAC,EAAM,OAAW,OAAAd,EAAS,EAAI,EAC3F,GAAI,CACF,GAAIA,IAAW,EAAG,OAAQ,WAAc,CAAA,EAAK,EAK7C,GAJI,OAAOc,GAAQ,WAAUA,EAAM,CAAC,KAAK,IAAIA,CAAG,CAAC,GAC7C,OAAOD,GAAO,WAAUA,EAAK,CAAC,KAAK,IAAI,KAAK,IAAIA,CAAE,EAAE,KAAK,CAAC,CAAC,CAAC,GAE5DC,GAAO,CAAC,MAAM,QAAQA,CAAG,GACzBD,GAAM,CAAC,MAAM,QAAQA,CAAE,EAAG,MAAM5C,GAA4B,EAEhE,MAAM1gD,GAASujD,GAAQD,GAAM,KAAK,OAAQ,OAAOpH,CAAS,EACpDwG,EAAUW,EAAM,KAAK,IAAIA,CAAG,EAAE,KAAOD,EAAK,KAAK,IAAIA,CAAE,EAAE,KAAO,KAC9D7rC,EAAQmrC,EAAU,GAAKD,GAAU,GAEjC3Q,EAAU,KAAK,SAAS9xC,EAAOuX,EAAOmrC,CAAO,EACnD,IAAIc,EAAc,OAAO,OAAO1R,CAAO,EAGvC,OAAIsR,GAAII,EAAY,IAAK,GAGpBJ,GAAMC,IAAQZ,EAAS,KAC1Be,EAAcA,EAAY,MAAMA,EAAY,OAASf,EAAQe,EAAY,MAAM,GAGzE,WAAc,CACpB,UAAW7/D,KAAK6/D,EACd,MAAMA,EAAY7/D,CAAC,CAE3B,EAAQ,CACL,CAaD,MAAM,KAAMimB,EAAKplB,EAAO,GAAI,CAC1B,GAAI,CAAC03D,EAAUtyC,CAAG,EAAG,MAAM42C,GAAoB,EAC/C,GAAI,CAAC0B,GAAI,MAAMt4C,CAAG,EAAG,MAAM62C,GAAc,EACzC,GAAI,KAAK,KAAO72C,EAAI,GAAI,OAGxB,MAAM+3C,EAAWO,GAAI,WAAWt4C,EAAK,IAAI,EAEnCgzC,EAAmB,KAAK,UAAU,SAGlC6G,EAAY,MAAO/4C,GAAU,CAEjC,GAAI,CADc,MAAM,KAAK,QAAQ,UAAUA,EAAOkyC,CAAgB,EAEpE,MAAM,IAAI,MAAM,gCAAgClyC,EAAM,SAAS,EAAE,sCAAsC,CAE1G,EAGKg5C,EAAS,MAAOh5C,GAAU,CAC9B,MAAMi5C,EAAU,MAAM5T,GAAM,OAAO6M,EAAkBlyC,CAAK,EACpDgY,EAAYhY,EAAM,SAAWA,EAAM,SAAS,UAAYA,EAAM,IACpE,GAAI,CAACi5C,EAAS,MAAM,IAAI,MAAM,iCAAiCj5C,EAAM,GAAG,gBAAgBA,EAAM,IAAI,cAAcgY,CAAS,GAAG,CAC7H,EAEKkhC,EAAgB,OAAO,OAAOjC,CAAQ,EAC5C,MAAMrD,GAAKsF,EAAe,MAAMx2C,GAAK,CACnC,MAAMq2C,EAAUr2C,CAAC,EACjB,MAAMs2C,EAAOt2C,CAAC,CACf,EAAE,CAAE,YAAa,KAAK,gBAAiB,EAGxC,MAAMk1C,EAAkBl1C,GAAK,CACb,KAAK,IAAIA,EAAE,IAAI,GACjB,KAAK,UACjBA,EAAE,KAAK,QAAQre,GAAM,KAAK,YAAYA,CAAC,EAAIqe,EAAE,IAAK,CACnD,EACD,OAAO,OAAOu0C,CAAQ,EAAE,QAAQW,CAAe,EAG/C,KAAK,YAAY,IAAIX,CAAQ,EAG7B,MAAMkC,EAA0Bz2C,GAAK,CAAC02C,EAAkB,KAAK/0D,GAAKA,IAAMqe,EAAE,IAAI,EACxE22C,EAAoB32C,GAAK,CAAC,KAAK,YAAYA,EAAE,IAAI,EACjD02C,EAAoB,OAAO,OAAOnC,CAAQ,EAAE,IAAII,EAAe,EAAE,OAAOD,GAAS,EAAE,EACnFkC,EAAc9B,GAAI,UAAU,OAAO,OAAO,OAAO,OAAO,CAAA,EAAI,KAAK,YAAat4C,EAAI,WAAW,CAAC,CAAC,EAClG,OAAOi6C,CAAuB,EAC9B,OAAOE,CAAiB,EACxB,OAAO9B,GAAsB,EAAE,EAKlC,GAHA,KAAK,YAAc+B,EAGfx/D,EAAO,GAAI,CACb,IAAIy/D,EAAM,KAAK,OACfA,EAAMA,EAAI,MAAM,CAACz/D,CAAI,EACrB,KAAK,YAAc,KACnB,KAAK,YAAc,IAAIk9D,GAAWuC,EAAI,OAAOhC,GAAsB,CAAA,CAAE,CAAC,EACtE,KAAK,YAAcC,GAAI,UAAU+B,CAAG,EAAE,OAAOhC,GAAsB,EAAE,EACrE,KAAK,QAAU,KAAK,YAAY,MACjC,CAGD,MAAMrD,EAAW,OAAO,OAAO,KAAK,WAAW,EAAE,OAAOoD,GAAqB,CAAC,EAC9E,YAAK,OAAS,IAAItF,GAAM,KAAK,MAAM,GAAI,KAAK,IAAI,KAAK,MAAM,KAAMkC,CAAQ,CAAC,EACnE,IACR,CAMD,QAAU,CACR,MAAO,CACL,GAAI,KAAK,GACT,MAAO,KAAK,MACT,KAAK,KAAK,OAAO,EACjB,QAAS,EACT,IAAIiD,EAAO,CACf,CACF,CAMD,YAAc,CACZ,MAAO,CACL,GAAI,KAAK,GACT,MAAO,KAAK,MACZ,OAAQ,KAAK,MACd,CACF,CAMD,UAAY,CACV,OAAO7E,GAAAA,OAAO,KAAK,KAAK,UAAU,KAAK,OAAM,CAAE,CAAC,CACjD,CAUD,SAAUkH,EAAe,CACvB,OAAO,KAAK,OACT,MAAO,EACP,QAAS,EACT,IAAI,CAAC92C,EAAGwnB,IAAQ,CAEf,MAAMuvB,EADUpU,GAAM,aAAa3iC,EAAG,KAAK,MAAM,EAC7B,OACpB,IAAIg3C,EAAU,IAAI,MAAM,KAAK,IAAID,EAAM,EAAG,CAAC,CAAC,EAC5C,OAAAC,EAAUD,EAAM,EAAIC,EAAQ,KAAK,IAAI,EAAIA,EACzCA,EAAUD,EAAM,EAAIC,EAAQ,OAAO,CAAC,IAAI,CAAC,EAAIA,EAEtCA,EAAQ,KAAK,EAAE,GAAKF,EAAgBA,EAAc92C,EAAE,OAAO,EAAIA,EAAE,QAChF,CAAO,EACA,KAAK;AAAA,CAAI,CACb,CAOD,OAAO,MAAOxD,EAAK,CACjB,OAAOA,EAAI,KAAO,QAChBA,EAAI,QAAU,QACdA,EAAI,cAAgB,MACvB,CAMD,YAAa,CAAE,OAAA1a,CAAQ,EAAG,GAAI,CAC5B,OAAO4xD,GAAM,YAAY,KAAK,SAAU,KAAM,CAAE,OAAA5xD,EAAQ,CACzD,CAeD,aAAa,cAAeukC,EAAMjiC,EAAUmF,EAC1C,CAAE,OAAAwrD,EAAQ,OAAA99D,EAAS,GAAI,QAAAw5D,EAAU,CAAE,EAAE,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,OAAAgD,EAAQ,mBAAA/C,CAAkB,EAAK,CAAA,EAAI,CAE7G,KAAM,CAAE,MAAAzB,EAAO,QAAAzK,EAAS,MAAAoP,CAAK,EAAK,MAAMJ,GAAM,cAAcrtB,EAAM98B,EAChE,CAAE,OAAAtS,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,mBAAAy+C,EAAoB,YAAAD,EAAa,OAAAgD,EAAQ,EACtF,OAAO,IAAImB,GAAIzuB,EAAMjiC,EAAU,CAAE,MAAA+qD,EAAO,OAAA4F,EAAQ,QAAArQ,EAAS,MAAAoP,EAAO,OAAAH,EAAQ,CACzE,CAgBD,aAAa,cAAettB,EAAMjiC,EAAUmF,EAC1C,CAAE,MAAA4lD,EAAO,OAAA4F,EAAQ,OAAA99D,EAAS,GAAI,QAAAw5D,EAAU,CAAA,EAAI,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,OAAAgD,EAAQ,mBAAA/C,CAAkB,EAAK,CAAA,EAAI,CAEpH,KAAM,CAAE,QAAAlM,CAAO,EAAK,MAAMgP,GAAM,cAAcrtB,EAAM98B,EAClD,CAAE,OAAAtS,EAAQ,QAAAw5D,EAAS,cAAAC,EAAe,QAAAv+C,EAAS,YAAAw+C,EAAa,mBAAAC,EAAoB,EAC9E,OAAO,IAAIkE,GAAIzuB,EAAMjiC,EAAU,CAAE,MAAA+qD,EAAO,OAAA4F,EAAQ,QAAArQ,EAAS,OAAAiP,EAAQ,CAClE,CAcD,aAAa,SAAUttB,EAAMjiC,EAAU2B,EACrC,CAAE,OAAAgvD,EAAQ,OAAA99D,EAAS,GAAI,QAAAkb,EAAS,OAAAwhD,EAAQ,mBAAA/C,CAAoB,EAAG,GAAI,CAEnE,KAAM,CAAE,MAAAzB,EAAO,QAAAzK,CAAS,EAAG,MAAMgP,GAAM,SAASrtB,EAAMtgC,EACpD,CAAE,OAAA9O,EAAQ,QAAAkb,EAAS,mBAAAy+C,EAAoB,EACzC,OAAO,IAAIkE,GAAIzuB,EAAMjiC,EAAU,CAAE,MAAA+qD,EAAO,OAAA4F,EAAQ,QAAArQ,EAAS,OAAAiP,EAAQ,CAClE,CAeD,aAAa,UAAWttB,EAAMjiC,EAAU4vD,EACtC,CAAE,OAAAe,EAAQ,OAAA99D,EAAS,GAAI,QAAAw5D,EAAU,CAAA,EAAI,QAAAt+C,EAAS,YAAAw+C,EAAa,OAAAgD,EAAQ,mBAAA/C,CAAkB,EAAK,CAAA,EAAI,CAE9F,KAAM,CAAE,MAAAzB,EAAO,QAAAzK,CAAS,EAAG,MAAMgP,GAAM,UAAUrtB,EAAM2tB,EACrD,CAAE,OAAA/8D,EAAQ,QAAAw5D,EAAS,QAAAt+C,EAAS,YAAAw+C,EAAa,mBAAAC,CAAkB,CAAE,EAC/D,OAAO,IAAIkE,GAAIzuB,EAAMjiC,EAAU,CAAE,MAAA+qD,EAAO,OAAA4F,EAAQ,QAAArQ,EAAS,OAAAiP,EAAQ,CAClE,CAWD,OAAO,UAAWjP,EAAS,CACzB,MAAMuS,EAAe,CAACl3D,EAAKud,EAAOkqB,EAAK+oB,IAAQ,CAC7C,MAAM2G,EAAcl3C,GAAMjgB,EAAIigB,CAAC,EAAI1C,EAAM,KACzC,OAAAA,EAAM,KAAK,QAAQ45C,CAAW,EACvBn3D,CACR,EAEK6nC,EAAQ8c,EAAQ,OAAOuS,EAAc,CAAA,CAAE,EAEvCt2B,EAAS3gB,GAAK4nB,EAAM5nB,EAAE,IAAI,IAAM,OAChCm3C,EAAa,CAACx1D,EAAGlJ,IAAMkJ,EAAE,MAAM,GAAKlJ,EAAE,MAAM,GAElD,OAAOisD,EAAQ,OAAO/jB,CAAM,EAAE,KAAKw2B,CAAU,CAC9C,CAID,OAAO,UAAWzS,EAAS,CAEzB,MAAM0S,EAAe,CAAE,EAEjBC,EAAY,CAAE,EAEd1xD,EAAS,CAAE,EAEjB,IAAI0pD,EAAQ,CAAE,EAEd,MAAMZ,EAAczuC,GAAM,CACpBA,EAAE,KAAK,SAAW,GACpBq3C,EAAU,KAAKr3C,CAAC,EAElB,MAAMs3C,EAAqB31D,GAAM,CAE1By1D,EAAaz1D,CAAC,IAAGy1D,EAAaz1D,CAAC,EAAI,CAAE,GAC1Cy1D,EAAaz1D,CAAC,EAAE,KAAKqe,CAAC,CACvB,EAGDA,EAAE,KAAK,QAAQs3C,CAAiB,EAEhCjI,EAAQA,EAAM,OAAOrvC,EAAE,IAAI,EAE3Bra,EAAOqa,EAAE,IAAI,EAAI,EAClB,EAGD0kC,EAAQ,QAAQ+J,CAAU,EAE1B,MAAM8I,EAAa,CAACx3D,EAAK2kD,EAASld,EAAK+oB,IAAQxwD,EAAI,OAAO6uD,GAAYlK,EAAS,MAAM,CAAC,EAChF/jB,EAAS3gB,GAAKra,EAAOqa,CAAC,IAAM,OAC5Bw3C,EAAuBx3C,GAAKo3C,EAAap3C,CAAC,EAG1Cy3C,EAAQpI,EACX,OAAO1uB,CAAM,EACb,IAAI62B,CAAoB,EACxB,OAAOD,EAAY,EAAE,EACrB,OAAOF,CAAS,EAEnB,OAAOzI,GAAY6I,EAAO,MAAM,EAAE,KAAK9U,GAAM,OAAO,CACrD,CAID,OAAO,eAAgB+B,EAAS,CAC9B,MAAM/+C,EAAS,CAAE,EACX8oD,EAAazuC,GAAMra,EAAOqa,EAAE,IAAI,EAAI,GACpC03C,EAAmB,CAAC33D,EAAKud,EAAOkqB,EAAK+oB,IAAQ,CACjD,MAAM2G,EAAel3C,GAAM,CAErBra,EAAOqa,CAAC,IAAM,QAChBjgB,EAAI,OAAO,EAAG,EAAGigB,CAAC,CAErB,EACD,OAAA1C,EAAM,KAAK,UAAU,QAAQ45C,CAAW,EACjCn3D,CACR,EAED,OAAA2kD,EAAQ,QAAQ+J,CAAU,EACnB/J,EAAQ,OAAOgT,EAAkB,EAAE,CAC3C,CAED,OAAO,WAAY/1D,EAAGlJ,EAAG,CACvB,MAAMy3D,EAAQ,OAAO,KAAKvuD,EAAE,WAAW,EACjC4zD,EAAY,CAAE,EACdx1D,EAAM,CAAE,EAER43D,EAAcpuD,GAAQ,CACtB,CAACgsD,EAAUhsD,CAAI,GAAK,CAAC9Q,EAAE,IAAI8Q,CAAI,IACjC2mD,EAAM,KAAK3mD,CAAI,EACfgsD,EAAUhsD,CAAI,EAAI,GAErB,EAED,KAAO2mD,EAAM,OAAS,GAAG,CACvB,MAAM3mD,EAAO2mD,EAAM,MAAO,EACpB5yC,EAAQ3b,EAAE,IAAI4H,CAAI,EACpB+T,GAAS,CAAC7kB,EAAE,IAAI8Q,CAAI,GAAK+T,EAAM,KAAO7kB,EAAE,KAC1CsH,EAAIud,EAAM,IAAI,EAAIA,EAClBi4C,EAAUj4C,EAAM,IAAI,EAAI,GACxBA,EAAM,KAAK,OAAOA,EAAM,IAAI,EAAE,QAAQq6C,CAAW,EAEpD,CACD,OAAO53D,CACR,CACH,CCztBA,MAAM63D,GAAsB53C,GAAK,CAAC,GAAG,IAAI,IAAI,CAAC,GAAGA,EAAE,KAAM,GAAGA,EAAE,IAAI,CAAC,CAAC,EAC9D00C,GAAU,CAAC30D,EAAK8jC,IAAQ9jC,EAAI,OAAO8jC,CAAG,EAEtCg0B,GAAqB,GAEZ,MAAMC,EAAW,CAC9B,YAAatuB,EAAOmnB,EAAa,CAC/B,KAAK,OAASnnB,EACd,KAAK,aAAemnB,GAAekH,GAInC,KAAK,GAAK,IAAIp+C,GAAO,CAAE,YAAa,KAAK,aAAc,EAMvD,KAAK,MAAQ,CAAE,EAIf,KAAK,UAAY,CAAE,EAGnB,KAAK,SAAW,CAAE,EAMlB,KAAK,GAAG,GAAG,OAAQ,SAAY,CAC7B,MAAMs+C,EAAO,KAAK,MAAM,MAAO,EAE/B,GADA,KAAK,MAAQ,CAAE,EACX,KAAK,uBAAyBA,EAAK,OAAS,GAAK,KAAK,OAAO,OAC/D,GAAI,CACF,MAAM,KAAK,sBAAsBA,CAAI,EAErCA,EAAK,QAAQv7C,GAAOA,EAAI,OAAO,QAAQwD,GAAK,OAAO,KAAK,SAASA,EAAE,IAAI,CAAC,CAAC,CAC1E,OAAQA,EAAG,CACV,QAAQ,MAAMA,CAAC,CAChB,CAET,CAAK,CACF,CAMD,IAAI,cAAgB,CAClB,OAAO,KAAK,GAAG,OAChB,CAMD,IAAI,aAAe,CACjB,OAAO,KAAK,GAAG,IAChB,CAMD,IAAI,YAAc,CAChB,OAAO,OAAO,KAAK,KAAK,SAAS,CAClC,CAMD,MAAM,KAAM0kC,EAAS,CACnB,GAAI,CAEF,KAAK,YAAYA,CAAO,CACzB,OAAQ1kC,EAAG,CACV,QAAQ,MAAMA,CAAC,CAChB,CACF,CAED,MAAM,YAAa0kC,EAAS,CAE1B,MAAMgM,EAAiB3D,GAAMA,GAAK,KAAK,OAAO,SAAW,KAAK,OAAO,OAAO,IAAIA,CAAC,GAAK,KAAK,UAAUA,CAAC,IAAM,QAAa,KAAK,SAASA,CAAC,GAGlIiL,EAAyBh4C,IAE7B,KAAK,UAAUA,EAAE,MAAQA,CAAC,EAAI,GAGvB,SAAY,CAGbA,EAAE,MAAQ,KAAK,qBACjB,KAAK,oBAAoBA,CAAC,EAE5B,GAAI,CAEF,MAAMxD,EAAM,MAAM,KAAK,cAAcwD,CAAC,EAGtC,KAAK,MAAM,KAAKxD,CAAG,CACpB,OAAQwD,EAAG,CACV,cAAQ,MAAMA,CAAC,EACTA,CACP,CAED,OAAO,KAAK,UAAUA,EAAE,MAAQA,CAAC,CAClC,GAGH,GAAI0kC,EAAQ,OAAS,EAAG,CAGtB,MAAMuC,EAAQvC,EACX,OAAQ1kC,GAAM,CAAC0wC,EAAc1wC,EAAE,MAAQA,CAAC,CAAC,EACzC,IAAKA,GAAMg4C,EAAsBh4C,CAAC,CAAC,EAElCinC,EAAM,OAAS,GACjB,KAAK,GAAG,OAAOA,CAAK,CAEvB,CACF,CAED,MAAM,MAAQ,CAEZ,KAAK,GAAG,MAAO,EACf,KAAK,GAAG,MAAO,EACf,MAAM,KAAK,GAAG,OAAQ,EAEtB,KAAK,MAAQ,CAAE,EACf,KAAK,UAAY,CAAE,EACnB,KAAK,SAAW,CAAE,CACnB,CAED,MAAM,cAAe3pC,EAAO,CAC1B,MAAM/T,EAAO+T,EAAM,MAAQA,EAGrBszC,EAAsBtzC,GAAU,CACpC,KAAK,SAASA,EAAM,IAAI,EAAI,GACxB,KAAK,uBACP,KAAK,sBAAsBA,CAAK,CAEnC,EAEKozC,EAAiB3D,GAAMA,GAAKA,IAAMxjD,GAAQ,KAAK,OAAO,SAAW,KAAK,OAAO,OAAO,IAAIwjD,CAAC,GAAK,KAAK,UAAUA,CAAC,IAAM,QAAa,KAAK,SAASA,CAAC,IAAM,QAGtJvwC,EAAM,MAAMs4C,GAAI,cACpB,KAAK,OAAO,MACZ,KAAK,OAAO,SACZvrD,EACA,CACE,MAAO,KAAK,OAAO,GACnB,OAAQ,KAAK,OAAO,OACpB,OAAQ,GACR,QAAS,CAAE,EACX,cAAAmnD,EACA,YAAa,KAAK,aAClB,mBAAAE,CACD,CACF,EAGKvB,EAAQ7yC,EAAI,OAAO,IAAIo7C,EAAmB,EAAE,OAAOlD,GAAS,EAAE,EACpE,GAAI,CAEF,KAAK,YAAYrF,CAAK,CACvB,OAAQrvC,EAAG,CACV,cAAQ,MAAMA,CAAC,EACTA,CACP,CAED,OAAOxD,CACR,CACH,CCtLe,MAAMy7C,EAAgB,CACnC,aAAe,CACb,KAAK,SAAW,EAChB,KAAK,IAAM,CACZ,CAED,OAAS,CACP,KAAK,SAAW,EAChB,KAAK,IAAM,CACZ,CACH,CCCA,MAAMx7C,GAASy7C,GAAO,OAAO,iBAAkB,CAAE,MAAOA,GAAO,OAAO,KAAM,EAC5EA,GAAO,YAAY,OAAO,EAE1B,MAAMC,GAAiB,CACrB,MAAA5K,GACA,WAAY,GACZ,kBAAmB,KACnB,eAAgB,GAChB,uBAAwB,GACxB,UAAW,GACX,OAAQ,MACV,EAEA,MAAM6K,EAAM,CACV,YAAa/xB,EAAMjiC,EAAUuF,EAASlL,EAAS,CAC7C,GAAI,CAAC2F,EACH,MAAM,IAAI,MAAM,mBAAmB,EAIrC,MAAMqU,EAAO,OAAO,OAAO,CAAA,EAAI0/C,EAAc,EAC7C,OAAO,OAAO1/C,EAAMha,CAAO,EAC3B,KAAK,QAAUga,EAGf,KAAK,MAAQ,QAGb,KAAK,GAAK9O,EAAQ,SAAU,EAC5B,KAAK,SAAWvF,EAChB,KAAK,QAAUuF,EACf,KAAK,OAASA,EAAQ,MAAQ,GAC9B,KAAK,OAAS,IAAIs/C,gBAElB,KAAK,gBAAkBrhD,GAAK,KAAK,KAAK,GAAI,cAAc,EACxD,KAAK,eAAiBA,GAAK,KAAK,KAAK,GAAI,aAAa,EACtD,KAAK,aAAeA,GAAK,KAAK,KAAK,GAAI,UAAU,EACjD,KAAK,UAAYA,GAAK,KAAK,KAAK,GAAI,OAAO,EAC3C,KAAK,aAAeA,GAAK,KAAK,KAAK,GAAI,WAAW,EAGlD,KAAK,MAAQy+B,EACb,KAAK,OAAS5nC,EAAQ,MAGtB,MAAM45D,EAAgB,CACpB,UAAY/6C,GAAWA,EAAM,SAAS,YAAclZ,EAAS,SAC9D,EACD,KAAK,OAAS3F,EAAQ,kBAAoB45D,EAG1C,KAAK,OAAS,IAAIvD,GAAI,KAAK,MAAO,KAAK,SAAU,CAAE,MAAO,KAAK,GAAI,OAAQ,KAAK,OAAQ,OAAQ,KAAK,QAAQ,OAAQ,EAKrH,KAAK,OAAS,IAAIr7C,GAAO,CAAE,YAAa,CAAC,CAAE,EAG3C,KAAK,OAAS,IAAI,KAAK,QAAQ,MAAM,KAAK,QAAQ,IAAI,EAGtD,KAAK,mBAAqB,IAAIw+C,GAG9B,KAAK,OAAS,CACZ,SAAU,CACR,YAAa,EACd,EACD,sBAAuB,CACxB,EAED,GAAI,CACF,MAAMK,EAAsB,MAAOh7C,GAAU,CAE3C,KAAK,2BAA2BA,EAAM,MAAQA,EAAM,MAAM,KAAO,CAAC,EAClE,KAAK,OAAO,KAAK,YAAa,KAAK,QAAQ,SAAU,EAAEA,CAAK,CAC7D,EAEKi7C,EAAwB,MAAOj7C,GAAU,CAC7C,MAAMk7C,EAAmB,KAAK,kBAAkB,SAC1CC,EAAc,KAAK,kBAAkB,IAC3C,KAAK,8BAA8Bn7C,EAAM,MAAM,IAAI,GAC/C,KAAK,OAAO,OAAS,EAAI,KAAK,kBAAkB,UAClD,KAAK,kBAAkB,SAAWk7C,GAClC,KAAK,kBAAkB,IAAMC,IAC7B,KAAK,OAAO,KAAK,qBAAsB,KAAK,QAAQ,WAAYn7C,EAAM,KAAMA,EAAO,KAAK,kBAAkB,SAAU,KAAK,kBAAkB,GAAG,CAEjJ,EAEKo7C,EAAwB,MAAOX,GAAS,CAC5C,MAAMY,EAAc,SAAY,CAC9B,GAAI,CACF,GAAI,KAAK,QAAUZ,EAAK,OAAS,EAAG,CAClC,UAAWv7C,KAAOu7C,EAChB,MAAM,KAAK,OAAO,KAAKv7C,CAAG,EAI5B,MAAMs3C,EAAQ,KAAK,OAAO,MAC1B,MAAM,KAAK,OAAO,IAAI,KAAK,gBAAiBA,CAAK,EACjDr3C,GAAO,MAAM,eAAeq3C,EAAM,MAAM,KAAKA,EAAM,IAAI9zC,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,GAAG,EAIjF,MAAM,KAAK,aAAc,EAErB,KAAK,OAAO,OAAS,KAAK,kBAAkB,UAC9C,KAAK,8BAA8B,KAAK,OAAO,MAAM,EAGvD,KAAK,OAAO,KAAK,aAAc,KAAK,QAAQ,WAAY+3C,EAAK,OAAQ,IAAI,CAC1E,CACF,OAAQ/3C,EAAG,CACV,QAAQ,MAAMA,CAAC,CAChB,CACF,EACD,MAAM,KAAK,OAAO,IAAI24C,EAAY,KAAK,IAAI,CAAC,CAC7C,EAED,KAAK,YAAc,IAAIb,GAAW,KAAM,KAAK,QAAQ,sBAAsB,EAG3E,KAAK,QAAU,KAAK,YAEpB,KAAK,YAAY,oBAAsBQ,EACvC,KAAK,YAAY,sBAAwBC,EACzC,KAAK,YAAY,sBAAwBG,CAC1C,OAAQ14C,EAAG,CACV,QAAQ,MAAM,eAAgBA,CAAC,CAChC,CAED,KAAK,OAAO,GAAG,sBAAuB,CAACrW,EAASJ,EAAM+T,EAAOmtB,EAAUmuB,IAAS,CAC9E,KAAK,WAAWt7C,CAAK,CAC3B,CAAK,EACD,KAAK,OAAO,GAAG,QAAS,CAAC3T,EAAS2T,EAAOw2C,IAAU,CACjD,KAAK,WAAWx2C,CAAK,CAC3B,CAAK,CACF,CAED,IAAI,KAAO,CACT,OAAO,MAAM,QAAQ,KAAK,OAAO,MAAM,EACnC,KAAK,OAAO,OACZ,OAAO,KAAK,KAAK,OAAO,MAAM,EAAE,IAAI,GAAK,KAAK,OAAO,OAAO,CAAC,CAAC,CACnE,CAED,IAAI,OAAS,CACX,OAAO,KAAK,OAAO,MACpB,CAED,IAAI,MAAQ,CACV,OAAO,KAAK,KACb,CAED,IAAI,KAAO,CACT,OAAO,KAAK,IACb,CAMD,IAAI,mBAAqB,CACvB,OAAO,KAAK,kBACb,CAED,YAAalZ,EAAU,CACrB,KAAK,SAAWA,EAChB,KAAK,OAAO,YAAYA,CAAQ,CACjC,CAED,MAAM,OAAS,CAEb,MAAM,KAAK,YAAY,KAAM,EAK7B,MAAM,KAAK,OAAO,OAAQ,EAG1B,KAAK,mBAAmB,MAAO,EAG/B,KAAK,OAAS,CACZ,SAAU,CACR,YAAa,EACd,EACD,sBAAuB,CACxB,EAEG,KAAK,QAAQ,SACf,MAAM,KAAK,QAAQ,QAAQ,IAAI,EAI7B,KAAK,OAAO,OACd,MAAM,KAAK,OAAO,MAAO,EAI3B,UAAW2S,KAAS,KAAK,OAAO,QAC9B,KAAK,OAAO,mBAAmBA,CAAK,EAGtC,YAAK,OAAS,KAKd,KAAK,OAAO,KAAK,SAAU,KAAK,QAAQ,UAAU,EAC3C,QAAQ,QAAS,CACzB,CAMD,MAAM,MAAQ,CACR,KAAK,QAAQ,QACf,MAAM,KAAK,QAAQ,OAAO,IAAI,EAGhC,MAAM,KAAK,OAAO,IAAI,KAAK,cAAc,EACzC,MAAM,KAAK,OAAO,IAAI,KAAK,eAAe,EAC1C,MAAM,KAAK,OAAO,IAAI,KAAK,YAAY,EACvC,MAAM,KAAK,OAAO,IAAI,KAAK,SAAS,EACpC,MAAM,KAAK,OAAO,IAAI,KAAK,YAAY,EAEvC,MAAM,KAAK,MAAO,EAGlB,KAAK,OAAS,IAAI,KAAK,QAAQ,MAAM,KAAK,QAAQ,IAAI,EACtD,KAAK,OAAS,IAAI+9C,GAAI,KAAK,MAAO,KAAK,SAAU,CAAE,MAAO,KAAK,GAAI,OAAQ,KAAK,OAAQ,OAAQ,KAAK,QAAQ,OAAQ,EACrH,KAAK,OAAS,KAAK,QAAQ,KAC5B,CAED,MAAM,KAAMO,EAAQ58C,EAAO,CAAA,EAAI,CACzB,OAAO48C,GAAW,WACpB58C,EAAO48C,EACPA,EAAS,QAEXA,EAASA,GAAU,KAAK,QAAQ,WAChC,MAAMwD,EAAoBpgD,EAAK,mBAAqB,KAAK,QAAQ,kBAE7D,KAAK,QAAQ,QACf,MAAM,KAAK,QAAQ,OAAO,IAAI,EAEhC,MAAMqgD,EAAa,MAAM,KAAK,OAAO,IAAI,KAAK,cAAc,GAAK,CAAE,EAC7DC,EAAc,MAAM,KAAK,OAAO,IAAI,KAAK,eAAe,GAAK,CAAE,EAC/DjF,EAAQgF,EAAW,OAAOC,CAAW,EAEvCjF,EAAM,OAAS,GACjB,KAAK,OAAO,KAAK,OAAQ,KAAK,QAAQ,SAAU,EAAEA,CAAK,EAIzDA,EAAM,QAAQ/G,GAAK,KAAK,2BAA2BA,EAAE,MAAM,IAAI,CAAC,EAGhE,MAAMvwC,EAAM,MAAMs4C,GAAI,cAAc,KAAK,MAAO,KAAK,SAAUhB,EAAM,IAAI9zC,GAAKA,EAAE,IAAI,EAAG,CACrF,MAAO,KAAK,GACZ,OAAQ,KAAK,OACb,OAAQ,KAAK,QAAQ,OACrB,OAAQq1C,EACR,mBAAoB,KAAK,gBAAgB,KAAK,IAAI,EAClD,QAASwD,EACT,YAAa,KAAK,QAAQ,sBAChC,CAAK,EAED,KAAK,OAASr8C,EAGVs3C,EAAM,OAAS,GACjB,MAAM,KAAK,aAAc,EAG3B,KAAK,OAAO,KAAK,QAAS,KAAK,QAAQ,WAAY,KAAK,OAAO,KAAK,CACrE,CAED,MAAM,KAAMA,EAAO,CAGjB,OAFA,KAAK,OAAO,uBAAyB,EACrCr3C,GAAO,MAAM,iBAAiB,KAAK,OAAO,qBAAqB,IAAIq3C,EAAM,MAAM,EAAE,EAC7EA,EAAM,SAAW,EACnB,OAmCKkF,GAAUlF,EAzBE,MAAOmF,GAAS,CACjC,GAAI,CAACA,EACH,eAAQ,KAAK,wCAAwC,EAC9C,QAAQ,QAAQ,IAAI,EAG7B,MAAMzJ,EAAmB,KAAK,SAAS,SACvC,GAAI,CAACA,EAAkB,MAAM,IAAI,MAAM,oDAAoD,EAG3F,GAAI,CADc,MAAM,KAAK,OAAO,UAAUyJ,EAAMzJ,CAAgB,EAElE,eAAQ,KAAK,4FAA4F,EAClG,QAAQ,QAAQ,IAAI,EAG7B,MAAM0J,EAAWvW,GAAM,QAAQsW,CAAI,EAGnC,OAFa,MAAME,GAAS,KAAK,MAAOjK,GAAegK,CAAQ,EAAGA,EAAU,CAAE,MAAOlK,GAAY,SAAU,EAAI,CAAE,IAEpGiK,EAAK,MAChB,QAAQ,KAAK,+CAAgD,EAGxDA,CACR,CAEiC,EAC/B,KAAK,MAAOG,GACJ,KAAK,YAAY,KAAKA,EAAM,OAAOp5C,GAAKA,IAAM,IAAI,CAAC,CAC3D,CACJ,CAED,aAAcq1C,EAAQ3Q,EAAS,CAC7B,KAAK,YAAY,KAAKA,CAAO,CAC9B,CAED,MAAM,cAAgB,CACpB,MAAM2U,EAAa,KAAK,YAAY,WAE9BC,EAAe,KAAK,OAAO,WAAY,EACvCx5D,EAAM8vD,GAAM,OAAC,KAAK,KAAK,UAAU,CACrC,GAAI0J,EAAa,GACjB,MAAOA,EAAa,MACpB,KAAMA,EAAa,OAAO,OAC1B,OAAQA,EAAa,OACrB,KAAM,KAAK,IACjB,CAAK,CAAC,EAEIl0C,EAAW,MAAM,KAAK,MAAM,IAAItlB,CAAG,EAEzC,OAAAslB,EAAS,KAAOA,EAAS,IAAI,SAAU,EACvC,MAAM,KAAK,OAAO,IAAI,KAAK,aAAcA,CAAQ,EACjD,MAAM,KAAK,OAAO,IAAI,KAAK,UAAWi0C,CAAU,EAEhD58C,GAAO,MAAM,mBAAmB2I,EAAS,IAAI,mBAAmBi0C,EAAW,MAAM,EAAE,EAE5E,CAACj0C,CAAQ,CACjB,CAED,MAAM,iBAAkBwrC,EAAoB,CACtC,KAAK,QAAQ,QACf,MAAM,KAAK,QAAQ,OAAO,IAAI,EAGhC,KAAK,OAAO,KAAK,OAAQ,KAAK,QAAQ,UAAU,EAEhD,MAAMY,EAAW,CAACzxD,EAAK8jC,IAAQ,KAAK,IAAI9jC,EAAK8jC,EAAI,MAAM,IAAI,EAErDlT,EAAQ,MAAM,KAAK,OAAO,IAAI,KAAK,SAAS,EAClD,KAAK,KAAKA,GAAS,EAAE,EAErB,MAAMvL,EAAW,MAAM,KAAK,OAAO,IAAI,KAAK,YAAY,EAExD,GAAIA,EAAU,CACZ,MAAMm0C,EAAS,CAAE,EACjB,gBAAiBzgD,KAAS,KAAK,MAAM,IAAIsM,EAAS,IAAI,EACpDm0C,EAAO,KAAKzgD,CAAK,EAEnB,MAAM5gB,EAAS03D,GAAAA,OAAO,OAAO2J,CAAM,EAC7BD,EAAe,KAAK,MAAMphE,EAAO,SAAQ,CAAE,EAIjD,KAAK,2BAA2BohE,EAAa,OAAO,OAAO9H,EAAU,CAAC,CAAC,EACnE8H,IACF,KAAK,OAAS,MAAMxE,GAAI,SAAS,KAAK,MAAO,KAAK,SAAUwE,EAAc,CACxE,OAAQ,KAAK,OACb,OAAQ,KAAK,QAAQ,OACrB,OAAQ,GACR,QAAS,IACT,mBAAoB,KAAK,gBAAgB,KAAK,IAAI,CAC5D,CAAS,EACD,MAAM,KAAK,aAAc,EACzB,KAAK,OAAO,KAAK,aAAc,KAAK,QAAQ,UAAU,GAExD,KAAK,OAAO,KAAK,QAAS,KAAK,QAAQ,WAAY,KAAK,OAAO,KAAK,CAC1E,KACM,OAAM,IAAI,MAAM,gBAAgB,KAAK,OAAO,aAAa,EAG3D,OAAO,IACR,CAED,MAAM,cAAgB,CACpB,MAAM,KAAK,OAAO,YAAY,KAAK,MAAM,CAC1C,CAED,MAAM,WAAa,CACjB,MAAMR,EAAa,MAAM,KAAK,OAAO,IAAI,KAAK,cAAc,GAAK,CAAE,EAC7DC,EAAc,MAAM,KAAK,OAAO,IAAI,KAAK,eAAe,GAAK,CAAE,EAC/DjF,EAAQgF,EAAW,OAAOC,CAAW,EAC3C,QAASxiE,EAAI,EAAGA,EAAIu9D,EAAM,OAAQv9D,IAAK,CACrC,MAAM0iE,EAAOnF,EAAMv9D,CAAC,EACpB,GAAI,CAAC,KAAK,OAAO,MAAM,SAAS0iE,CAAI,EAAG,CACrC,MAAM,KAAK,KAAM,EACjB,KACD,CACF,CACF,CAED,MAAM,cAAej+D,EAAM,CAAE,mBAAA41D,EAAoB,IAAAv1C,EAAM,EAAO,EAAG,GAAI,CACnE,eAAem+C,GAAgB,CAC7B,GAAI,KAAK,OAAQ,CAEX,KAAK,QAAQ,WACf,MAAM,KAAK,UAAW,EAExB,MAAMl8C,EAAQ,MAAM,KAAK,OAAO,OAAOtiB,EAAM,KAAK,QAAQ,eAAgBqgB,CAAG,EAC7E,YAAK,8BAA8BiC,EAAM,MAAM,IAAI,EACnD,MAAM,KAAK,OAAO,IAAI,KAAK,eAAgB,CAACA,CAAK,CAAC,EAClD,MAAM,KAAK,aAAc,EACzB,KAAK,OAAO,KAAK,QAAS,KAAK,QAAQ,SAAQ,EAAIA,EAAO,KAAK,OAAO,KAAK,EACvEszC,GAAoBA,EAAmBtzC,CAAK,EACzCA,EAAM,IACd,CACF,CACD,OAAO,KAAK,OAAO,IAAIk8C,EAAa,KAAK,IAAI,CAAC,CAC/C,CAED,mBAAoBx+D,EAAMy+D,EAAgBC,EAAe9I,EAAoB,CAC3E,MAAM,IAAI,MAAM,kBAAkB,CACnC,CAED,WAAYtzC,EAAO,CACjB,KAAM,CAAE,QAAAq8C,EAAS,KAAApwD,CAAI,EAAK+T,EACpB,CAAE,GAAA4T,CAAE,EAAKyoC,EACXzoC,EACF,KAAK,OAAO,KAAK,UAAUA,CAAE,GAAI,KAAK,QAAQ,WAAY3nB,EAAMowD,CAAO,EAEvE,KAAK,OAAO,KAAK,cAAe,KAAK,QAAQ,SAAQ,EAAIpwD,EAAMowD,CAAO,EAExE,KAAK,OAAO,KAAK,SAAUzoC,EAAI,KAAK,QAAQ,SAAQ,EAAI3nB,EAAMowD,CAAO,CACtE,CAGD,iCAAmC,CACjC,KAAK,mBAAmB,SAAW,KAAK,IACtC,KAAK,IAAI,KAAK,mBAAmB,SAAW,EAAG,KAAK,mBAAmB,GAAG,EAC1E,KAAK,OAAS,KAAK,OAAO,OAAS,CACpC,CACF,CAED,2BAA4B3uC,EAAK,CAC/B,KAAK,mBAAmB,IAAM,KAAK,IAAI,MAAM,KAAM,CACjD,KAAK,kBAAkB,IACvB,KAAK,OAAS,KAAK,OAAO,OAAS,EAClCA,GAAO,CACd,CAAK,CACF,CAED,8BAA+B4uC,EAAU,CACvC,KAAK,2BAA2BA,CAAQ,EACxC,KAAK,gCAAiC,CACvC,CAGD,gBAAiBt8C,EAAO,CACtB,KAAK,8BAA8BA,EAAM,MAAM,IAAI,EACnD,KAAK,OAAO,KAAK,gBAAiB,KAAK,QAAQ,WAAYA,EAAM,KAAMA,EAAO,KAAK,kBAAkB,SAAU,KAAK,kBAAkB,GAAG,CAC1I,CACH,CCneA,MAAMixC,GAAa,CAACsL,EAAMC,IAAS,IAAI,IAAI,CAAC,GAAGD,CAAI,EAAE,OAAOrjE,GAAK,CAACsjE,EAAK,IAAItjE,CAAC,CAAC,CAAC,ECExEujE,GAAkB,CACtB,MAAO,GACP,aAAc,GAChB,EAEe,MAAMC,WAA8B/Q,EAAa,CAC9D,YAAagR,EAAYvd,EAAOj+C,EAAS,CACvC,MAAO,EACP,KAAK,QAAUw7D,EACf,KAAK,OAASvd,EACd,KAAK,SAAW,OAAO,OAAO,CAAE,EAAEqd,GAAiBt7D,CAAO,EAC1D,KAAK,OAAS,CAAE,EAChB,KAAK,UAAY,KAEb,KAAK,SAAS,OAChB,KAAK,MAAO,CACf,CAED,IAAI,SAAW,CAAE,OAAO,KAAK,YAAc,IAAM,CACjD,IAAI,QAASolC,EAAK,CAAE,MAAM,IAAI,MAAM,wBAAwB,CAAG,CAE/D,OAAS,CACH,KAAK,WACP,KAAK,KAAM,EAEb,KAAK,UAAY,YACf,KAAK,WAAW,KAAK,IAAI,EACzB,KAAK,SAAS,YACf,EACD,KAAK,WAAY,CAClB,CAED,MAAQ,CACN,cAAc,KAAK,SAAS,EAC5B,KAAK,UAAY,KACjB,KAAK,mBAAmB,OAAO,EAC/B,KAAK,mBAAmB,MAAM,EAC9B,KAAK,mBAAmB,OAAO,CAChC,CAED,MAAM,UAAY,CAChB,YAAK,OAAS,MAAM,KAAK,QAAQ,MAAM,KAAK,MAAM,EAC3C,KAAK,OAAO,MAAO,CAC3B,CAED,QAAS9O,EAAM,CACb,OAAO,KAAK,OAAO,SAASA,CAAI,CACjC,CAED,MAAM,YAAc,CAClB,GAAI,CACF,MAAM4W,EAAQ,MAAM,KAAK,QAAQ,MAAM,KAAK,MAAM,EAClDquB,GAAsB,oBAAoB,IAAI,IAAI,KAAK,MAAM,EAAG,IAAI,IAAIruB,CAAK,EAAG,IAAI,EACpF,KAAK,OAASA,CACf,OAAQ1gC,EAAK,CACZ,cAAc,KAAK,SAAS,EAC5B,KAAK,KAAK,QAASA,CAAG,CACvB,CACF,CAED,OAAO,oBAAqBivD,EAAWC,EAAWC,EAAQ,CACxD,MAAMC,EAAWC,GAAaF,EAAO,KAAK,OAAQE,CAAS,EACrDC,EAAYC,GAAeJ,EAAO,KAAK,QAASI,CAAW,EACjEjM,GAAW4L,EAAWD,CAAS,EAAE,QAAQG,CAAQ,EACjD9L,GAAW2L,EAAWC,CAAS,EAAE,QAAQI,CAAS,CACnD,CACH,CCrEA,SAASrkE,GAAKC,EAAUC,EAAM,CAC5B,GAAID,EAAS,QAAU,IACrB,MAAM,IAAI,UAAU,mBAAmB,EAGzC,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACnCD,EAASC,CAAC,EAAI,IAEhB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACxC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IACnB,MAAM,IAAI,UAAUD,EAAI,eAAe,EAEzCH,EAASI,CAAE,EAAIF,CAChB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAC3C,SAASI,EAAOC,EAAQ,CAOtB,GANIA,aAAkB,aACb,YAAY,OAAOA,CAAM,EAChCA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAClE,MAAM,QAAQA,CAAM,IAC7BA,EAAS,WAAW,KAAKA,CAAM,IAE7B,EAAEA,aAAkB,YACtB,MAAM,IAAI,UAAU,qBAAqB,EAE3C,GAAIA,EAAO,SAAW,EACpB,MAAO,GAMT,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GAC3CA,IACAF,IAIF,QAFII,GAAQD,EAAOD,GAAUL,EAAU,IAAM,EACzCQ,EAAM,IAAI,WAAWD,CAAI,EACtBF,IAAWC,GAAM,CAGtB,QAFIG,EAAQP,EAAOG,CAAM,EACrBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAWM,IAAQ,GAAIA,IAAOhB,IACzEe,GAAS,IAAMD,EAAIE,CAAG,IAAM,EAC5BF,EAAIE,CAAG,EAAID,EAAQZ,IAAS,EAC5BY,EAAQA,EAAQZ,IAAS,EAE3B,GAAIY,IAAU,EACZ,MAAM,IAAI,MAAM,gBAAgB,EAElCL,EAASV,EACTW,GACD,CAED,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAClCA,IAGF,QADIC,EAAMd,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EACnBC,GAAOtB,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAEjC,OAAOC,CACR,CACD,SAASC,EAAaX,EAAQ,CAC5B,GAAI,OAAOA,GAAW,SACpB,MAAM,IAAI,UAAU,iBAAiB,EAEvC,GAAIA,EAAO,SAAW,EACpB,OAAO,IAAI,WAEb,IAAIY,EAAM,EACV,GAAIZ,EAAOY,CAAG,IAAM,IAKpB,SAFIX,EAAS,EACTC,EAAS,EACNF,EAAOY,CAAG,IAAMhB,GACrBK,IACAW,IAIF,QAFIP,GAAQL,EAAO,OAASY,GAAOf,EAAS,IAAM,EAC9CgB,EAAO,IAAI,WAAWR,CAAI,EACvBL,EAAOY,CAAG,GAAG,CAClB,IAAIL,EAAQjB,EAASU,EAAO,WAAWY,CAAG,CAAC,EAC3C,GAAIL,IAAU,IACZ,OAGF,QADIf,EAAI,EACCsB,EAAMT,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAWY,IAAQ,GAAIA,IAAOtB,IACzEe,GAASZ,EAAOkB,EAAKC,CAAG,IAAM,EAC9BD,EAAKC,CAAG,EAAIP,EAAQ,MAAQ,EAC5BA,EAAQA,EAAQ,MAAQ,EAE1B,GAAIA,IAAU,EACZ,MAAM,IAAI,MAAM,gBAAgB,EAElCL,EAASV,EACToB,GACD,CACD,GAAIZ,EAAOY,CAAG,IAAM,IAIpB,SADIG,EAAMV,EAAOH,EACVa,IAAQV,GAAQQ,EAAKE,CAAG,IAAM,GACnCA,IAIF,QAFIC,EAAM,IAAI,WAAWf,GAAUI,EAAOU,EAAI,EAC1CxB,EAAIU,EACDc,IAAQV,GACbW,EAAIzB,GAAG,EAAIsB,EAAKE,GAAK,EAEvB,OAAOC,GACR,CACD,SAASC,EAAOC,EAAQ,CACtB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EACF,OAAOA,EAET,MAAM,IAAI,MAAM,OAAQ9B,CAAM,YAAW,CAC1C,CACD,MAAO,CACL,OAAQU,EACR,aAAcY,EACd,OAAQM,CACZ,CACA,CACA,IAAIG,GAAMjC,GACNkC,GAAkCD,GC7HtC,MAAMO,GAAS,CAACC,EAAIC,IAAO,CACzB,GAAID,IAAOC,EACT,MAAO,GACT,GAAID,EAAG,aAAeC,EAAG,WACvB,MAAO,GAET,QAASC,EAAK,EAAGA,EAAKF,EAAG,WAAYE,IACnC,GAAIF,EAAGE,CAAE,IAAMD,EAAGC,CAAE,EAClB,MAAO,GAGX,MAAO,EACT,EACMC,GAASC,GAAK,CAClB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aACpD,OAAOA,EACT,GAAIA,aAAa,YACf,OAAO,IAAI,WAAWA,CAAC,EACzB,GAAI,YAAY,OAAOA,CAAC,EACtB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE5D,MAAM,IAAI,MAAM,mCAAmC,CACrD,EAEMC,GAAavB,GAAO,IAAI,YAAa,EAAC,OAAOA,CAAG,EAChDwB,GAAWR,GAAK,IAAI,YAAW,EAAG,OAAOA,CAAC,EC7BhD,MAAMyB,EAAQ,CACZ,YAAY9D,EAAM+C,EAAQC,EAAY,CACpC,KAAK,KAAOhD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,CACnB,CACD,OAAOC,EAAO,CACZ,GAAIA,aAAiB,WACnB,MAAO,GAAI,KAAK,MAAQ,GAAG,KAAK,WAAWA,CAAK,CAAC,GAEjD,MAAM,MAAM,mCAAmC,CAElD,CACH,CACA,MAAMc,EAAQ,CACZ,YAAY/D,EAAM+C,EAAQI,EAAY,CAGpC,GAFA,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EACVA,EAAO,YAAY,CAAC,IAAM,OAC5B,MAAM,IAAI,MAAM,0BAA0B,EAE5C,KAAK,gBAAkBA,EAAO,YAAY,CAAC,EAC3C,KAAK,WAAaI,CACnB,CACD,OAAOC,EAAM,CACX,GAAI,OAAOA,GAAS,SAAU,CAC5B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC/B,MAAM,MAAM,qCAAsC,KAAK,UAAUA,CAAI,CAAC,KAAO,KAAK,IAAI,+CAAiD,KAAK,MAAM,EAAG,EAEvJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CAC3D,KACM,OAAM,MAAM,mCAAmC,CAElD,CACD,GAAGC,EAAS,CACV,OAAOC,GAAG,KAAMD,CAAO,CACxB,CACH,CACA,MAAMO,EAAgB,CACpB,YAAYJ,EAAU,CACpB,KAAK,SAAWA,CACjB,CACD,GAAGH,EAAS,CACV,OAAOC,GAAG,KAAMD,CAAO,CACxB,CACD,OAAOI,EAAO,CACZ,MAAMV,EAASU,EAAM,CAAC,EAChBJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,EACF,OAAOA,EAAQ,OAAOI,CAAK,EAE3B,MAAM,WAAW,qCAAsC,KAAK,UAAUA,CAAK,CAAC,+BAAiC,OAAO,KAAK,KAAK,QAAQ,CAAG,gBAAe,CAE3J,CACH,CACO,MAAMH,GAAK,CAACI,EAAMC,IAAU,IAAIC,GAAgB,CACrD,GAAGF,EAAK,UAAY,CAAE,CAACA,EAAK,MAAM,EAAGA,CAAM,EAC3C,GAAGC,EAAM,UAAY,CAAE,CAACA,EAAM,MAAM,EAAGA,CAAO,CAChD,CAAC,EACM,MAAMM,EAAM,CACjB,YAAYjE,EAAM+C,EAAQC,EAAYG,EAAY,CAChD,KAAK,KAAOnD,EACZ,KAAK,OAAS+C,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQ9D,EAAM+C,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQ/D,EAAM+C,EAAQI,CAAU,CACpD,CACD,OAAOM,EAAO,CACZ,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CACD,OAAOA,EAAO,CACZ,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CACH,CACO,MAAMO,GAAO,CAAC,CAAC,KAAAhE,EAAM,OAAA+C,EAAQ,OAAArC,EAAQ,OAAAkB,CAAM,IAAM,IAAIqC,GAAMjE,EAAM+C,EAAQrC,EAAQkB,CAAM,EACjFsC,GAAQ,CAAC,CAAC,OAAAnB,EAAQ,KAAA/C,EAAM,SAAAmE,CAAQ,IAAM,CACjD,KAAM,CAAC,OAAAzD,EAAQ,OAAAkB,CAAM,EAAIwC,GAAMD,EAAUnE,CAAI,EAC7C,OAAOgE,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAAU,EACA,OAAQ0C,GAAQV,GAAOd,EAAOwB,CAAI,CAAC,CACvC,CAAG,CACH,EACMxB,GAAS,CAACC,EAAQsC,EAAUE,EAAarE,IAAS,CACtD,MAAMsE,EAAQ,CAAA,EACd,QAASnE,EAAI,EAAGA,EAAIgE,EAAS,OAAQ,EAAEhE,EACrCmE,EAAMH,EAAShE,CAAC,CAAC,EAAIA,EAEvB,IAAIoE,EAAM1C,EAAO,OACjB,KAAOA,EAAO0C,EAAM,CAAC,IAAM,KACzB,EAAEA,EAEJ,MAAMC,EAAM,IAAI,WAAWD,EAAMF,EAAc,EAAI,CAAC,EACpD,IAAII,EAAO,EACP3C,EAAS,EACT4C,EAAU,EACd,QAASvE,EAAI,EAAGA,EAAIoE,EAAK,EAAEpE,EAAG,CAC5B,MAAMwE,EAAQL,EAAMzC,EAAO1B,CAAC,CAAC,EAC7B,GAAIwE,IAAU,OACZ,MAAM,IAAI,YAAY,OAAQ3E,CAAM,YAAW,EAEjD8B,EAASA,GAAUuC,EAAcM,EACjCF,GAAQJ,EACJI,GAAQ,IACVA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAM5C,GAAU2C,EAEpC,CACD,GAAIA,GAAQJ,GAAe,IAAMvC,GAAU,EAAI2C,EAC7C,MAAM,IAAI,YAAY,wBAAwB,EAEhD,OAAOD,CACT,EACM9D,GAAS,CAACkE,EAAMT,EAAUE,IAAgB,CAC9C,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GACNC,EAAO,EACP3C,EAAS,EACb,QAAS3B,EAAI,EAAGA,EAAIyE,EAAK,OAAQ,EAAEzE,EAGjC,IAFA2B,EAASA,GAAU,EAAI8C,EAAKzE,CAAC,EAC7BsE,GAAQ,EACDA,EAAOJ,GACZI,GAAQJ,EACRG,GAAOL,EAASW,EAAOhD,GAAU2C,CAAI,EAMzC,GAHIA,IACFD,GAAOL,EAASW,EAAOhD,GAAUuC,EAAcI,CAAI,GAEjDI,EACF,KAAOL,EAAI,OAASH,EAAc,GAChCG,GAAO,IAGX,OAAOA,CACT,EACaO,GAAU,CAAC,CAAC,KAAA/E,EAAM,OAAA+C,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,IACnDH,GAAK,CACV,OAAAjB,EACA,KAAA/C,EACA,OAAOyD,EAAO,CACZ,OAAO/C,GAAO+C,EAAOU,EAAUE,CAAW,CAC3C,EACD,OAAOZ,EAAO,CACZ,OAAO7B,GAAO6B,EAAOU,EAAUE,EAAarE,CAAI,CACjD,CACL,CAAG,EClJUgO,GAAWhK,GAAK,CAC3B,OAAQ,KACR,KAAM,WACN,OAAQ0F,GAAO7G,GAAS6G,CAAG,EAC3B,OAAQrI,GAAOuB,GAAWvB,CAAG,CAC/B,CAAC,4GCTY4M,GAAQlJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACf,CAAC,yGCLYmJ,GAAQnJ,GAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACf,CAAC,yGCLYoJ,GAASjK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,YACZ,CAAC,0GCJYkK,GAASrJ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACf,CAAC,EACYsJ,GAActJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACf,CAAC,yHCXYG,GAASH,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACf,CAAC,EACYI,GAAcJ,GAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACf,CAAC,EACYK,GAAYL,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACf,CAAC,EACYM,GAAiBN,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACf,CAAC,EACYO,GAAYP,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACf,CAAC,EACYQ,GAAiBR,GAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACf,CAAC,EACYS,GAAeT,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACf,CAAC,EACYU,GAAoBV,GAAQ,CACvC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACf,CAAC,EACYW,GAAUX,GAAQ,CAC7B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACf,CAAC,uOCrDYuJ,GAASpK,GAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,sCACZ,CAAC,EACYqK,GAAcrK,GAAM,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,sCACZ,CAAC,yHCTYc,GAAYd,GAAM,CAC7B,KAAM,YACN,OAAQ,IACR,SAAU,4DACZ,CAAC,EACYe,GAAef,GAAM,CAChC,KAAM,eACN,OAAQ,IACR,SAAU,4DACZ,CAAC,6HCTYyB,GAASZ,GAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACf,CAAC,EACYa,GAAYb,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACf,CAAC,EACYc,GAAYd,GAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACf,CAAC,EACYe,GAAef,GAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACf,CAAC,oJCvBKZ,GAAW,MAAM,KAAK,weAAs2F,EAC53FqK,GAAuBrK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAClDkG,EAAElG,CAAC,EAAIwG,EACAN,GACN,CAAE,CAAA,EACCoI,GAAuBtK,GAAS,OAAO,CAACkC,EAAGM,EAAGxG,KAClDkG,EAAEM,EAAE,YAAY,CAAC,CAAC,EAAIxG,EACfkG,GACN,CAAE,CAAA,EACL,SAAS3F,GAAOkE,EAAM,CACpB,OAAOA,EAAK,OAAO,CAACyB,EAAGM,KACrBN,GAAKmI,GAAqB7H,CAAC,EACpBN,GACN,EAAE,CACP,CACA,SAASzE,GAAOP,EAAK,CACnB,MAAMqN,EAAO,CAAA,EACb,UAAWC,KAAQtN,EAAK,CACtB,MAAMuN,EAAMH,GAAqBE,EAAK,YAAY,CAAC,CAAC,EACpD,GAAIC,IAAQ,OACV,MAAM,IAAI,MAAM,+BAAgCD,CAAI,EAAG,EAEzDD,EAAK,KAAKE,CAAG,CACd,CACD,OAAO,IAAI,WAAWF,CAAI,CAC5B,CACO,MAAMG,GAAe7K,GAAK,CAC/B,OAAQ,KACR,KAAM,eACR,OAAEtD,GACF,OAAEkB,EACF,CAAC,gHChCD,IAAImH,GAAWrI,GACXsI,GAAM,IAAKC,GAAO,IAAKC,GAAS,CAACD,GAAME,GAAM,KAAK,IAAI,EAAG,EAAE,EAC/D,SAASzI,GAAO0I,EAAK5E,EAAK6E,EAAQ,CAChC7E,EAAMA,GAAO,GACb6E,EAASA,GAAU,EAEnB,QADIC,EAAYD,EACTD,GAAOD,IACZ3E,EAAI6E,GAAQ,EAAID,EAAM,IAAMJ,GAC5BI,GAAO,IAET,KAAOA,EAAMF,IACX1E,EAAI6E,GAAQ,EAAID,EAAM,IAAMJ,GAC5BI,KAAS,EAEX,OAAA5E,EAAI6E,CAAM,EAAID,EAAM,EACpB1I,GAAO,MAAQ2I,EAASC,EAAY,EAC7B9E,CACT,CACA,IAAI5C,GAAS2H,GACTC,GAAQ,IAAKC,GAAS,IAC1B,SAASF,GAAKG,EAAKL,EAAQ,CACzB,IAAIM,EAAM,EAAGN,EAASA,GAAU,EAAGO,EAAQ,EAAGC,EAAUR,EAAQhH,EAAGqE,EAAIgD,EAAI,OAC3E,EAAG,CACD,GAAIG,GAAWnD,EACb6C,MAAAA,GAAK,MAAQ,EACP,IAAI,WAAW,yBAAyB,EAEhDlH,EAAIqH,EAAIG,GAAS,EACjBF,GAAOC,EAAQ,IAAMvH,EAAIoH,KAAWG,GAASvH,EAAIoH,IAAU,KAAK,IAAI,EAAGG,CAAK,EAC5EA,GAAS,CACb,OAAWvH,GAAKmH,IACdD,OAAAA,GAAK,MAAQM,EAAUR,EAChBM,CACT,CACA,IAAIG,GAAK,KAAK,IAAI,EAAG,CAAC,EAClBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBzJ,GAAS,SAAU8D,EAAO,CAC5B,OAAOA,EAAQmF,GAAK,EAAInF,EAAQoF,GAAK,EAAIpF,EAAQqF,GAAK,EAAIrF,EAAQsF,GAAK,EAAItF,EAAQuF,GAAK,EAAIvF,EAAQwF,GAAK,EAAIxF,EAAQyF,GAAK,EAAIzF,EAAQ0F,GAAK,EAAI1F,EAAQ2F,GAAK,EAAI,EAClK,EACIC,GAAS,CACX,OAAQxB,GACR,OAAQnH,GACR,eAAgBf,EAClB,EACI2J,GAAeD,GClDZ,MAAM3I,GAAS,CAACgD,EAAMyE,EAAS,IAE7B,CADMkB,GAAO,OAAO3F,EAAMyE,CAAM,EAGrCkB,GAAO,OAAO,KAClB,EAEaE,GAAW,CAACC,EAAKC,EAAQtB,EAAS,KAC7CkB,GAAO,OAAOG,EAAKC,EAAQtB,CAAM,EAC1BsB,GAEIC,GAAiBF,GACrBH,GAAO,eAAeG,CAAG,ECRrBG,GAAS,CAACC,EAAMC,IAAW,CACtC,MAAM/J,EAAO+J,EAAO,WACdC,EAAaC,GAAsBH,CAAI,EACvCI,EAAeF,EAAaC,GAAsBjK,CAAI,EACtDiC,EAAQ,IAAI,WAAWiI,EAAelK,CAAI,EAChDmK,OAAAA,GAAgBL,EAAM7H,EAAO,CAAC,EAC9BkI,GAAgBnK,EAAMiC,EAAO+H,CAAU,EACvC/H,EAAM,IAAI8H,EAAQG,CAAY,EACvB,IAAIE,GAAON,EAAM9J,EAAM+J,EAAQ9H,CAAK,CAC7C,EACarB,GAASyJ,GAAa,CACjC,MAAMpI,EAAQP,GAAO2I,CAAS,EACxB,CAACP,EAAME,CAAU,EAAIM,GAAcrI,CAAK,EACxC,CAACjC,EAAMkK,CAAY,EAAII,GAAcrI,EAAM,SAAS+H,CAAU,CAAC,EAC/DD,EAAS9H,EAAM,SAAS+H,EAAaE,CAAY,EACvD,GAAIH,EAAO,aAAe/J,EACxB,MAAM,IAAI,MAAM,kBAAkB,EAEpC,OAAO,IAAIoK,GAAON,EAAM9J,EAAM+J,EAAQ9H,CAAK,CAC7C,EACaX,GAAS,CAACiJ,EAAGlJ,IACpBkJ,IAAMlJ,EACD,GAEAkJ,EAAE,OAASlJ,EAAE,MAAQkJ,EAAE,OAASlJ,EAAE,MAAQmJ,GAAWD,EAAE,MAAOlJ,EAAE,KAAK,EAGzE,MAAM+I,EAAO,CAClB,YAAYN,EAAM9J,EAAM+J,EAAQ9H,EAAO,CACrC,KAAK,KAAO6H,EACZ,KAAK,KAAO9J,EACZ,KAAK,OAAS+J,EACd,KAAK,MAAQ9H,CACd,CACH,CCtCO,MAAMe,GAAO,CAAC,CAAC,KAAAhE,EAAM,KAAA8K,EAAM,OAAApK,CAAM,IAAM,IAAImN,GAAO7N,EAAM8K,EAAMpK,CAAM,EACpE,MAAMmN,EAAO,CAClB,YAAY7N,EAAM8K,EAAMpK,EAAQ,CAC9B,KAAK,KAAOV,EACZ,KAAK,KAAO8K,EACZ,KAAK,OAASpK,CACf,CACD,OAAO+C,EAAO,CACZ,GAAIA,aAAiB,WAAY,CAC/B,MAAMsK,EAAS,KAAK,OAAOtK,CAAK,EAChC,OAAOsK,aAAkB,WAAazB,GAAc,KAAK,KAAMyB,CAAM,EAAIA,EAAO,KAAKhD,GAAUuB,GAAc,KAAK,KAAMvB,CAAM,CAAC,CACrI,KACM,OAAM,MAAM,mCAAmC,CAElD,CACH,CCfA,MAAM+D,GAAM9O,GAAQ,MAAM4E,GAAQ,IAAI,WAAW,MAAM,OAAO,OAAO,OAAO5E,EAAM4E,CAAI,CAAC,EAC1EmK,GAAS/K,GAAK,CACzB,KAAM,WACN,KAAM,GACN,OAAQ8K,GAAI,SAAS,CACvB,CAAC,ECJKhE,GAAO,EACP9K,GAAO,WACPU,GAASgC,GACTqI,GAAStH,GAAS6I,GAAcxB,GAAMpK,GAAO+C,CAAK,CAAC,EAC5CuK,GAAW,CACtB,KAAAlD,GACA,KAAA9K,GACF,OAAEU,GACA,OAAAqK,EACF,ECXoB,IAAI,YACJ,IAAI,YCIjB,MAAMoB,EAAI,CACf,YAAYP,EAASd,EAAMO,EAAWpI,EAAO,CAC3C,KAAK,KAAO6H,EACZ,KAAK,QAAUc,EACf,KAAK,UAAYP,EACjB,KAAK,MAAQpI,EACb,KAAK,WAAaA,EAAM,WACxB,KAAK,WAAaA,EAAM,WACxB,KAAK,MAAQ,KACb,KAAK,WAAa,IAAI,IACtB,OAAO,iBAAiB,KAAM,CAC5B,WAAYohE,GACZ,WAAYA,GACZ,KAAMpkC,GACN,QAASA,GACT,UAAWA,GACX,MAAOA,GACP,WAAYokC,GACZ,MAAOA,EACb,CAAK,CACF,CACD,MAAO,CACL,OAAQ,KAAK,QAAO,CACpB,IAAK,GACD,OAAO,KAEX,QAAS,CACL,KAAM,CAAC,KAAAv5D,EAAM,UAAAO,CAAS,EAAI,KAC1B,GAAIP,IAASsB,GACX,MAAM,IAAI,MAAM,0CAA0C,EAE5D,GAAIf,EAAU,OAASgB,GACrB,MAAM,IAAI,MAAM,oDAAoD,EAEtE,OAAOF,GAAI,SAASd,CAAS,CAC9B,CACF,CACF,CACD,MAAO,CACL,OAAQ,KAAK,QAAO,CACpB,IAAK,GAAG,CACJ,KAAM,CAAC,KAAAP,EAAM,OAAAC,CAAM,EAAI,KAAK,UACtBM,EAAYiB,GAAcxB,EAAMC,CAAM,EAC5C,OAAOoB,GAAI,SAAS,KAAK,KAAMd,CAAS,CACzC,CACH,IAAK,GACD,OAAO,KAEX,QACI,MAAM,MAAM,+BAAgC,KAAK,OAAO,4CAA6C,CAExG,CACF,CACD,OAAOkB,EAAO,CACZ,OAAOA,GAAS,KAAK,OAASA,EAAM,MAAQ,KAAK,UAAYA,EAAM,SAAWG,GAAc,KAAK,UAAWH,EAAM,SAAS,CAC5H,CACD,SAASzM,EAAM,CACb,KAAM,CAAC,MAAAmD,EAAO,QAAA2I,EAAS,WAAA04D,CAAU,EAAI,KACrC,OAAQ14D,EAAO,CACf,IAAK,GACH,OAAOC,GAAW5I,EAAOqhE,EAAYxkE,GAAQkF,GAAU,OAAO,EAChE,QACE,OAAO+G,GAAW9I,EAAOqhE,EAAYxkE,GAAQoF,GAAO,OAAO,CAC5D,CACF,CACD,QAAS,CACP,MAAO,CACL,KAAM,KAAK,KACX,QAAS,KAAK,QACd,KAAM,KAAK,UAAU,KAC3B,CACG,CACD,IAAK,OAAO,WAAW,GAAI,CACzB,MAAO,KACR,CACD,CAAC,OAAO,IAAI,4BAA4B,CAAC,GAAI,CAC3C,MAAO,OAAS,KAAK,SAAQ,EAAK,GACnC,CACD,OAAO,MAAMP,EAAO,CAClB,OAAA4/D,GAAU,QAASC,EAAkB,EAC9B,CAAC,EAAE7/D,IAAUA,EAAMiI,EAAS,GAAKjI,EAAM,QAAUA,GACzD,CACD,IAAI,qBAAsB,CACxB,MAAM,IAAI,MAAM,6BAA6B,CAC9C,CACD,IAAI,OAAQ,CACV,MAAM,IAAI,MAAM,qEAAqE,CACtF,CACD,IAAI,QAAS,CACX,MAAM,IAAI,MAAM,mEAAmE,CACpF,CACD,IAAI,eAAgB,CAClB,MAAM,IAAI,MAAM,wCAAwC,CACzD,CACD,IAAI,QAAS,CACX,MAAM,IAAI,MAAM,iCAAiC,CAClD,CACD,OAAO,MAAMA,EAAO,CAClB,GAAIA,aAAiBwH,GACnB,OAAOxH,EACF,GAAIA,GAAS,MAAQA,EAAM,QAAUA,EAAO,CACjD,KAAM,CAAC,QAAAiH,EAAS,KAAAd,EAAM,UAAAO,EAAW,MAAApI,CAAK,EAAI0B,EAC1C,OAAO,IAAIwH,GAAIP,EAASd,EAAMO,EAAWpI,GAAS0J,GAAUf,EAASd,EAAMO,EAAU,KAAK,CAAC,CACjG,SAAe1G,GAAS,MAAQA,EAAMiI,EAAS,IAAM,GAAM,CACrD,KAAM,CAAC,QAAAhB,EAAS,UAAAP,EAAW,KAAAP,CAAI,EAAInG,EAC7BoG,EAAS8B,GAAcxB,CAAS,EACtC,OAAOc,GAAI,OAAOP,EAASd,EAAMC,CAAM,CAC7C,KACM,QAAO,IAEV,CACD,OAAO,OAAOa,EAASd,EAAMC,EAAQ,CACnC,GAAI,OAAOD,GAAS,SAClB,MAAM,IAAI,MAAM,uCAAuC,EAEzD,OAAQc,EAAO,CACf,IAAK,GAAG,CACJ,GAAId,IAASsB,GACX,MAAM,IAAI,MAAM,wCAAyCA,EAAa,kBAAiB,EAEvF,OAAO,IAAID,GAAIP,EAASd,EAAMC,EAAQA,EAAO,KAAK,CAErD,CACH,IAAK,GAAG,CACJ,MAAM9H,EAAQ0J,GAAUf,EAASd,EAAMC,EAAO,KAAK,EACnD,OAAO,IAAIoB,GAAIP,EAASd,EAAMC,EAAQ9H,CAAK,CAC5C,CACH,QACI,MAAM,IAAI,MAAM,iBAAiB,CAEpC,CACF,CACD,OAAO,SAAS8H,EAAQ,CACtB,OAAOoB,GAAI,OAAO,EAAGC,GAAarB,CAAM,CACzC,CACD,OAAO,SAASD,EAAMC,EAAQ,CAC5B,OAAOoB,GAAI,OAAO,EAAGrB,EAAMC,CAAM,CAClC,CACD,OAAO,OAAO9H,EAAO,CACnB,KAAM,CAACgJ,EAAKa,CAAS,EAAIX,GAAI,YAAYlJ,CAAK,EAC9C,GAAI6J,EAAU,OACZ,MAAM,IAAI,MAAM,kBAAkB,EAEpC,OAAOb,CACR,CACD,OAAO,YAAYhJ,EAAO,CACxB,MAAM8J,EAAQZ,GAAI,aAAalJ,CAAK,EAC9B+J,EAAaD,EAAM,KAAOA,EAAM,cAChCE,EAAiBvK,GAAOO,EAAM,SAAS+J,EAAYA,EAAaD,EAAM,aAAa,CAAC,EAC1F,GAAIE,EAAe,aAAeF,EAAM,cACtC,MAAM,IAAI,MAAM,kBAAkB,EAEpC,MAAMG,EAAcD,EAAe,SAASF,EAAM,cAAgBA,EAAM,UAAU,EAC5EhC,EAAS,IAAIoC,GAAcJ,EAAM,cAAeA,EAAM,WAAYG,EAAaD,CAAc,EAEnG,MAAO,CADKF,EAAM,UAAY,EAAIZ,GAAI,SAASpB,CAAM,EAAIoB,GAAI,SAASY,EAAM,MAAOhC,CAAM,EAGvF9H,EAAM,SAAS8J,EAAM,IAAI,CAC/B,CACG,CACD,OAAO,aAAaK,EAAc,CAChC,IAAI/D,EAAS,EACb,MAAMgE,EAAO,IAAM,CACjB,KAAM,CAAClN,EAAGU,CAAM,EAAIyK,GAAc8B,EAAa,SAAS/D,CAAM,CAAC,EAC/D,OAAAA,GAAUxI,EACHV,CACb,EACI,IAAIyL,EAAUyB,IACVC,EAAQlB,GAOZ,GANIR,IAAY,IACdA,EAAU,EACVvC,EAAS,GACAuC,IAAY,IACrB0B,EAAQD,EAAI,GAEVzB,IAAY,GAAKA,IAAY,EAC/B,MAAM,IAAI,WAAW,uBAAwBA,CAAO,EAAG,EAEzD,MAAMoB,EAAa3D,EACbkE,EAAgBF,IAChBG,EAAaH,IACbrM,EAAOqI,EAASmE,EAChBC,EAAgBzM,EAAOgM,EAC7B,MAAO,CACL,QAAApB,EACA,MAAA0B,EACA,cAAAC,EACA,WAAAC,EACA,cAAAC,EACA,KAAAzM,CACN,CACG,CACD,OAAO,MAAML,EAAQb,EAAM,CACzB,KAAM,CAACiD,EAAQE,CAAK,EAAIyK,GAAgB/M,EAAQb,CAAI,EAC9CmM,EAAME,GAAI,OAAOlJ,CAAK,EAC5B,OAAAgJ,EAAI,WAAW,IAAIlJ,EAAQpC,CAAM,EAC1BsL,CACR,CACH,CACA,MAAMyB,GAAkB,CAAC/M,EAAQb,IAAS,CACxC,OAAQa,EAAO,CAAC,EAAC,CACjB,IAAK,IAAK,CACN,MAAM0C,EAAUvD,GAAQkF,GACxB,MAAO,CACLA,GAAU,OACV3B,EAAQ,OAAO,GAAI2B,GAAU,MAAQ,GAAGrE,CAAM,EAAG,CACzD,CACK,CACH,KAAKqE,GAAU,OAAQ,CACnB,MAAM3B,EAAUvD,GAAQkF,GACxB,MAAO,CACLA,GAAU,OACV3B,EAAQ,OAAO1C,CAAM,CAC7B,CACK,CACH,KAAKuE,GAAO,OAAQ,CAChB,MAAM7B,EAAUvD,GAAQoF,GACxB,MAAO,CACLA,GAAO,OACP7B,EAAQ,OAAO1C,CAAM,CAC7B,CACK,CACH,QAAS,CACL,GAAIb,GAAQ,KACV,MAAM,MAAM,iFAAiF,EAE/F,MAAO,CACLa,EAAO,CAAC,EACRb,EAAK,OAAOa,CAAM,CAC1B,CACK,CACF,CACH,EACMkL,GAAa,CAAC5I,EAAO+I,EAAOlM,IAAS,CACzC,KAAM,CAAC,OAAAiD,CAAM,EAAIjD,EACjB,GAAIiD,IAAWiC,GAAU,OACvB,MAAM,MAAM,8BAA+BlF,EAAK,IAAI,WAAY,EAElE,MAAMmM,EAAMD,EAAM,IAAIjJ,CAAM,EAC5B,GAAIkJ,GAAO,KAAM,CACf,MAAMA,EAAMnM,EAAK,OAAOmD,CAAK,EAAE,MAAM,CAAC,EACtC,OAAA+I,EAAM,IAAIjJ,EAAQkJ,CAAG,EACdA,CACX,KACI,QAAOA,CAEX,EACMF,GAAa,CAAC9I,EAAO+I,EAAOlM,IAAS,CACzC,KAAM,CAAC,OAAAiD,CAAM,EAAIjD,EACXmM,EAAMD,EAAM,IAAIjJ,CAAM,EAC5B,GAAIkJ,GAAO,KAAM,CACf,MAAMA,EAAMnM,EAAK,OAAOmD,CAAK,EAC7B,OAAA+I,EAAM,IAAIjJ,EAAQkJ,CAAG,EACdA,CACX,KACI,QAAOA,CAEX,EACMG,GAAc,IACdC,GAAe,GACfM,GAAY,CAACf,EAASd,EAAMO,IAAc,CAC9C,MAAMsC,EAAa1C,GAAsBW,CAAO,EAC1CgC,EAAaD,EAAa1C,GAAsBH,CAAI,EACpD7H,EAAQ,IAAI,WAAW2K,EAAavC,EAAU,UAAU,EAC9DF,OAAAA,GAAgBS,EAAS3I,EAAO,CAAC,EACjCkI,GAAgBL,EAAM7H,EAAO0K,CAAU,EACvC1K,EAAM,IAAIoI,EAAWuC,CAAU,EACxB3K,CACT,EACM2J,GAAY,OAAO,IAAI,kBAAkB,EACzCqzB,GAAW,CACf,SAAU,GACV,aAAc,GACd,WAAY,EACd,EACMokC,GAAS,CACb,SAAU,GACV,WAAY,GACZ,aAAc,EAChB,EACMz4D,GAAU,YACV24D,GAAY,CAACE,EAAOt8D,IAAY,CACpC,GAAIs8D,EAAM,KAAK74D,EAAO,EACpB,QAAQ,KAAKzD,CAAO,MAEpB,OAAM,IAAI,MAAMA,CAAO,CAE3B,EACMq8D,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EChRrBp1D,GAAQ,CACZ,GAAGC,GACH,GAAGpB,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGlJ,GACH,GAAGoJ,GACH,GAAGgB,GACH,GAAG3J,GACH,GAAGkJ,EACL,EC5BMoxB,GAAW,CAAC,CAAC,WAAAC,EAAa,GAAM,aAAAC,EAAe,EAAK,EAAI,MAAQ,CACpE,WAAAD,EACA,aAAAC,EACA,SAAU,EACZ,GACMnS,GAAQ,UAAWrtB,EAAQb,EAAM,CACrC,GAAIa,GAAU,MAEV,EAAAA,aAAkB,YAEtB,SAAW,CAAC0d,EAAK1Z,CAAK,IAAK,OAAO,QAAQhE,CAAM,EAAG,CACjD,MAAM6Q,EAAO,CACX,GAAG1R,EACHue,CACN,EACI,GAAI1Z,GAAS,MAAQ,OAAOA,GAAU,SACpC,GAAI,MAAM,QAAQA,CAAK,EACrB,SAAW,CAACgE,EAAOslB,CAAO,IAAKtpB,EAAM,QAAO,EAAI,CAC9C,MAAMupB,EAAc,CAClB,GAAG1c,EACH7I,CACZ,EACgBsD,EAAME,GAAI,MAAM8hB,CAAO,EACzBhiB,EACF,KAAM,CACJiiB,EAAY,KAAK,GAAG,EACpBjiB,CACd,EACqB,OAAOgiB,GAAY,WAC5B,MAAOD,GAAMC,EAASC,CAAW,EAEpC,KACI,CACL,MAAMjiB,EAAME,GAAI,MAAMxH,CAAK,EACvBsH,EACF,KAAM,CACJuF,EAAK,KAAK,GAAG,EACbvF,CACZ,EAEU,MAAO+hB,GAAMrpB,EAAO6M,CAAI,CAE3B,CAEJ,CACH,EACM8lB,GAAO,UAAW32B,EAAQb,EAAM,CACpC,GAAIa,GAAU,KAEd,SAAW,CAAC0d,EAAK1Z,CAAK,IAAK,OAAO,QAAQhE,CAAM,EAAG,CACjD,MAAM6Q,EAAO,CACX,GAAG1R,EACHue,CACN,EAEI,GADA,MAAM7M,EAAK,KAAK,GAAG,EACf7M,GAAS,MAAQ,EAAEA,aAAiB,aAAe,OAAOA,GAAU,UAAY,CAACwH,GAAI,MAAMxH,CAAK,EAClG,GAAI,MAAM,QAAQA,CAAK,EACrB,SAAW,CAACgE,EAAOslB,CAAO,IAAKtpB,EAAM,QAAO,EAAI,CAC9C,MAAMupB,EAAc,CAClB,GAAG1c,EACH7I,CACZ,EACU,MAAMulB,EAAY,KAAK,GAAG,EACtB,OAAOD,GAAY,UAAY,CAAC9hB,GAAI,MAAM8hB,CAAO,IACnD,MAAOqJ,GAAKrJ,EAASC,CAAW,EAEnC,MAED,MAAOoJ,GAAK3yB,EAAO6M,CAAI,CAG5B,CACH,EACMqZ,GAAM,CAAClqB,EAAQ6Q,IAAS,CAC5B,IAAIvC,EAAOtO,EACX,SAAW,CAACgI,EAAO0V,CAAG,IAAK7M,EAAK,QAAO,EAAI,CAEzC,GADAvC,EAAOA,EAAKoP,CAAG,EACXpP,GAAQ,KACV,MAAM,IAAI,MAAM,6BAA8BuC,EAAK,MAAM,EAAG7I,EAAQ,CAAC,EAAE,IAAIoL,GAAQ,IAAK,KAAK,UAAUA,CAAI,CAAG,GAAE,EAAE,KAAK,EAAE,CAAG,EAAC,EAE/H,MAAM9H,EAAME,GAAI,MAAM8C,CAAI,EAC1B,GAAIhD,EACF,MAAO,CACL,MAAOA,EACP,UAAWuF,EAAK,MAAM7I,EAAQ,CAAC,EAAE,KAAK,GAAG,CACjD,CAEG,CACD,MAAO,CAAE,MAAOsG,EAClB,EACA,MAAMsxB,EAAM,CACV,YAAY,CAAC,IAAAt0B,EAAK,MAAAhJ,EAAO,MAAA0B,CAAK,EAAG,CAC/B,GAAI,CAACsH,GAAO,CAAChJ,GAAS,OAAO0B,EAAU,IACrC,MAAM,IAAI,MAAM,2BAA2B,EAC7C,KAAK,IAAMsH,EACX,KAAK,MAAQhJ,EACb,KAAK,MAAQ0B,EACb,KAAK,QAAU,KACf,OAAO,iBAAiB,KAAM,CAC5B,IAAKs7B,GAAU,EACf,MAAOA,GAAU,EACjB,MAAOA,GAAU,EACjB,QAASA,GAAU,CACzB,CAAK,CACF,CACD,OAAQ,CACN,OAAOjS,GAAM,KAAK,MAAO,CAAE,CAAA,CAC5B,CACD,MAAO,CACL,OAAOsJ,GAAK,KAAK,MAAO,CAAE,CAAA,CAC3B,CACD,IAAI9lB,EAAO,IAAK,CACd,OAAOqZ,GAAI,KAAK,MAAOrZ,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,CAAC,CACvD,CACH,CACK,MAAC9Q,GAAS,MAAO,CAAC,MAAAiE,EAAO,MAAA2I,EAAO,OAAAorB,CAAM,IAAM,CAC/C,GAAI,OAAO/zB,EAAU,IACnB,MAAM,IAAI,MAAM,mCAAmC,EACrD,GAAI,CAAC2I,GAAS,CAACorB,EACb,MAAM,IAAI,MAAM,4CAA4C,EAC9D,MAAMz1B,EAAQqK,EAAM,OAAO3I,CAAK,EAC1BwO,EAAO,MAAMulB,EAAO,OAAOz1B,CAAK,EAChCgJ,EAAME,GAAI,OAAO,EAAGmB,EAAM,KAAM6F,CAAI,EAC1C,OAAO,IAAIotB,GAAM,CACf,MAAA57B,EACA,MAAA1B,EACA,IAAAgJ,CACJ,CAAG,CACH,EACMrK,GAAS,MAAO,CAAC,MAAAqB,EAAO,MAAAqK,EAAO,OAAAorB,CAAM,IAAM,CAC/C,GAAI,CAACz1B,EACH,MAAM,IAAI,MAAM,mCAAmC,EACrD,GAAI,CAACqK,GAAS,CAACorB,EACb,MAAM,IAAI,MAAM,4CAA4C,EAC9D,MAAM/zB,EAAQ2I,EAAM,OAAOrK,CAAK,EAC1BkQ,EAAO,MAAMulB,EAAO,OAAOz1B,CAAK,EAChCgJ,EAAME,GAAI,OAAO,EAAGmB,EAAM,KAAM6F,CAAI,EAC1C,OAAO,IAAIotB,GAAM,CACf,MAAA57B,EACA,MAAA1B,EACA,IAAAgJ,CACJ,CAAG,CACH,EC1Ie,MAAM2yD,WAAyB/L,GAAAA,YAAa,CAKzD,aAAa,OAAQ6R,EAASr8D,EAAS,CAAE,CAGzC,WAAW,MAAQ,CACjB,MAAM,IAAI,MAAM,kEAAoE,CACrF,CAOD,IAAI,MAAQ,CACV,OAAO,KAAK,YAAY,IACzB,CAGD,IAAI,SAAW,CAAE,CAOjB,MAAM,UAAW6e,EAAOkyC,EAAkB,CAAE,CAG5C,MAAM,MAAOuF,EAAQ3wD,EAAU,CAAE,MAAO,EAAO,CAC/C,MAAM,OAAQ2wD,EAAQ3wD,EAAU,CAAE,MAAO,EAAO,CAGhD,MAAM,KAAMuF,EAAS,CAAE,CAEvB,MAAM,MAAQ,CAAE,CAEhB,MAAM,OAAS,CAAE,CACnB,CC/Ce,MAAMoxD,EAAyB,CAC5C,YAAar8D,EAAMw4C,EAAS,GAAI,CAC9B,KAAK,KAAOx4C,EACZ,KAAK,OAASw4C,CACf,CAED,aAAa,QAAS7Q,EAAM20B,EAAcv8D,EAAU,CAAA,EAAI,CACtD,GAAIA,EAAQ,aAAc,CACxB,GAAI,CAACA,EAAQ,KACX,MAAM,IAAI,MAAM,8CAA8C,EAEhE,OAAO,IAAIs8D,GAAyBt8D,EAAQ,KAAM,CAAE,QAASu8D,EAAc,CACjF,KAAW,CAEDA,EAAa,QAAQ,OAAO,IAAM,IAAKA,EAAeA,EAAa,MAAM,GAAG,EAAE,CAAC,GACnF,KAAM,CAAE,KAAAt8D,EAAM,OAAAw4C,CAAM,EAAK,MAAM+jB,GAAQ50B,EAAM20B,CAAY,EACzD,OAAO,IAAID,GAAyBr8D,EAAMw4C,CAAM,CACjD,CACF,CAED,aAAa,OAAQ7Q,EAAM3nC,EAAMw4C,EAAQ,CACvC,OAAIA,EAAO,aACFA,EAAO,QAMTiiB,GAAS9yB,EAAM,WAJL,CACf,KAAA3nC,EACA,OAAAw4C,CACD,CACyC,CAC3C,CACH,CC7BA,MAAMx4C,GAAO,cAEE,MAAMw8D,WAAmClG,EAAiB,CACvE,YAAa3uB,EAAM5nC,EAAS,CAC1B,MAAO,EACP,KAAK,MAAQ4nC,EACb,KAAK,OAAS,MAAM,KAAK5nC,EAAQ,OAAS,EAAE,CAC7C,CAGD,WAAW,MAAQ,CAAE,OAAOC,EAAM,CAGlC,IAAI,OAAS,CACX,OAAO,KAAK,MACb,CAED,MAAM,UAAW4e,EAAOkyC,EAAkB,CAExC,MAAMl6B,EAAYhY,EAAM,IACxB,MAAI,QAAK,MAAM,SAASgY,CAAS,GAC/B,KAAK,MAAM,SAAS,GAAG,EAI1B,CAED,MAAM,KAAM3rB,EAAS,CAGfA,EAAQ,QAAQ,OAAO,IAAM,IAAKA,EAAUA,EAAQ,MAAM,GAAG,EAAE,CAAC,GAEpE,GAAI,CACF,MAAMorD,EAAS,MAAMkG,GAAQ,KAAK,MAAOtxD,CAAO,EAChD,KAAK,OAASorD,EAAO,KACtB,OAAQ/0C,EAAG,CACV,QAAQ,IAAI,yCAA0CA,CAAC,CACxD,CACF,CAED,MAAM,KAAMvhB,EAAS,CACnB,IAAI4D,EACJ,MAAM0yD,EAAS,CAAE,MAAO,CAAE,EAAE,MAAO,KAAK,MAAO,KAAM,EAAI,EACzD,GAAI,CACF1yD,EAAM,MAAM82D,GAAS,KAAK,MAAO,MAAOvJ,GAAM,OAAC,KAAK,KAAK,UAAUmF,EAAQ,KAAM,CAAC,CAAC,EAAG,CAAE,OAAQ,SAAU,CAC3G,OAAQ/0C,EAAG,CACV,QAAQ,IAAI,yCAA0CA,CAAC,CACxD,CAED,MAAO,CAAE,QAAS3d,EAAK,aAAc,EAAM,CAC5C,CAED,aAAa,OAAQy4D,EAASr8D,EAAU,CAAA,EAAI,CAC1C,OAAAA,EAAU,CAAE,GAAGA,EAAc,MAAOA,EAAQ,OAAS,CAACq8D,EAAQ,SAAS,SAAS,CAAK,EAC9E,IAAII,GAA2BJ,EAAQ,MAAOr8D,CAAO,CAC7D,CACH,CCzDA,MAAMkB,GAAO,MAAO0mC,EAAMhkC,EAAK5D,EAAU,CAAA,IAAO,CAC9C,MAAMs2D,EAAS,MAAMkG,GAAQ50B,EAAMhkC,EAAK5D,CAAO,EAC/C,OAAQ,OAAOs2D,EAAO,OAAU,SAAY,KAAK,MAAMA,EAAO,KAAK,EAAIA,EAAO,KAChF,EAEM5zB,GAAQg4B,GCLRz6D,GAAO,OAEE,MAAMy8D,WAA6BnG,EAAiB,CACjE,YAAa3uB,EAAM5nC,EAAS,CAC1B,MAAO,EACP,KAAK,MAAQ4nC,EACb,KAAK,OAAS,MAAM,KAAK5nC,EAAQ,OAAS,EAAE,CAC7C,CAGD,WAAW,MAAQ,CAAE,OAAOC,EAAM,CAGlC,IAAI,OAAS,CACX,OAAO,KAAK,MACb,CAED,MAAM,UAAW4e,EAAOkyC,EAAkB,CAExC,MAAM/6C,EAAM6I,EAAM,SAAS,GAC3B,OAAI,KAAK,MAAM,SAAS7I,CAAG,GAAK,KAAK,MAAM,SAAS,GAAG,EAE9C+6C,EAAiB,eAAelyC,EAAM,QAAQ,EAEhD,EACR,CAED,MAAM,KAAM3T,EAAS,CAGfA,EAAQ,QAAQ,OAAO,IAAM,IAAKA,EAAUA,EAAQ,MAAM,GAAG,EAAE,CAAC,GAEpE,GAAI,CACF,KAAK,OAAS,MAAMsxD,GAAQ,KAAK,MAAOtxD,CAAO,CAChD,OAAQqW,EAAG,CACV,QAAQ,IAAI,mCAAoCA,CAAC,CAClD,CACF,CAED,MAAM,MAAQ,CACZ,IAAI3d,EACJ,GAAI,CACFA,EAAM,MAAM82D,GAAS,KAAK,MAAO,WAAY,CAAE,MAAO,KAAK,UAAU,KAAK,MAAO,KAAM,CAAC,CAAC,CAAE,CAC5F,OAAQn5C,EAAG,CACV,QAAQ,IAAI,mCAAoCA,CAAC,CAClD,CAED,MAAO,CAAE,QAAS3d,CAAK,CACxB,CAED,aAAa,OAAQy4D,EAASr8D,EAAU,CAAA,EAAI,CAC1C,OAAAA,EAAU,CAAE,GAAGA,EAAc,MAAOA,EAAQ,OAAS,CAACq8D,EAAQ,SAAS,EAAE,CAAK,EACvE,IAAIK,GAAqBL,EAAQ,MAAOr8D,CAAO,CACvD,CACH,CCrDA,MAAA28D,GAAezxD,GACEA,EAAQ,SAAQ,EAAG,MAAM,GAAG,EAAE,IAAK,IAChC,UACdA,EACA/B,GAAK,KAAK+B,EAAS,UAAU,ECH7BjL,GAAO,UAEE,MAAM28D,WAAgCrG,EAAiB,CACpE,YAAa8F,EAASr8D,EAAS,CAC7B,MAAO,EACP,KAAK,SAAWq8D,EAChB,KAAK,IAAM,KACX,KAAK,SAAWr8D,GAAW,CAAE,CAC9B,CAGD,WAAW,MAAQ,CAAE,OAAOC,EAAM,CAGlC,IAAI,SAAW,CACb,OAAO,KAAK,IAAI,OACjB,CAGD,MAAM,UAAW4e,EAAOkyC,EAAkB,CAExC,MAAMuF,EAAS,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,OAAO,EAAG,GAAG,KAAK,IAAI,OAAO,CAAC,CAAC,EAEnE,OAAIA,EAAO,IAAIz3C,EAAM,SAAS,EAAE,GAAKy3C,EAAO,IAAI,GAAG,EACxB,MAAMvF,EAAiB,eAAelyC,EAAM,QAAQ,EAKxE,EACR,CAED,IAAI,cAAgB,CAClB,GAAI,KAAK,IAAK,CACZ,MAAMg+C,EAAe,KAAK,IAAI,MAExBC,EAASv7C,GAAM,CACnB,MAAMvL,EAAMuL,EAAE,CAAC,EACfs7C,EAAa7mD,CAAG,EAAI,IAAI,IAAI,CAAC,GAAI6mD,EAAa7mD,CAAG,GAAK,CAAE,EAAG,GAAGuL,EAAE,CAAC,CAAC,CAAC,CACpE,EAID,cAAO,QAAQ,CACb,GAAGs7C,EAGE,MAAO,IAAI,IAAI,CAAC,GAAIA,EAAa,OAAS,GAAK,GAAG,KAAK,IAAI,OAAO,KAAK,CAAC,CACrF,CAAO,EAAE,QAAQC,CAAK,EAETD,CACR,CACD,MAAO,CAAE,CACV,CAED,IAAKE,EAAY,CACf,OAAO,KAAK,aAAaA,CAAU,GAAK,IAAI,IAAI,CAAA,CAAE,CACnD,CAED,MAAM,OAAS,CACb,MAAM,KAAK,IAAI,MAAO,CACvB,CAED,MAAM,KAAM7xD,EAAS,CACf,KAAK,KAAO,MAAM,KAAK,IAAI,QAG/B,KAAK,IAAM,MAAM,KAAK,SAAS,SAASyxD,GAAczxD,CAAO,EAAG,CAE9D,iBAAkB,CAChB,KAAM,OACN,MAAO,KAAK,SAAS,OAAS,CAAC,KAAK,SAAS,SAAS,EAAE,CACzD,EACD,KAAM,EACZ,CAAK,EAED,KAAK,IAAI,OAAO,GAAG,QAAS,KAAK,UAAU,KAAK,IAAI,CAAC,EACrD,KAAK,IAAI,OAAO,GAAG,QAAS,KAAK,UAAU,KAAK,IAAI,CAAC,EACrD,KAAK,IAAI,OAAO,GAAG,aAAc,KAAK,UAAU,KAAK,IAAI,CAAC,EAE1D,MAAM,KAAK,IAAI,KAAM,CACtB,CAED,MAAM,MAAQ,CAEZ,MAAO,CACL,QAAS,KAAK,IAAI,QAAQ,SAAU,CACrC,CACF,CAED,MAAM,cAAe6xD,EAAYp3D,EAAU,CAEzC,MAAM2wD,EAAS,IAAI,IAAI,KAAK,IAAIyG,CAAU,CAAC,EAC3C,OAAOzG,EAAO,IAAI3wD,EAAS,EAAE,GAAK2wD,EAAO,IAAI,GAAG,CACjD,CAED,MAAM,MAAOyG,EAAY/mD,EAAK,CAE5B,MAAM6mD,EAAe,IAAI,IAAI,CAAC,GAAI,KAAK,IAAI,IAAIE,CAAU,GAAK,CAAE,EAAO/mD,CAAI,CAAC,EAC5E,MAAM,KAAK,IAAI,IAAI+mD,EAAY,MAAM,KAAKF,EAAa,OAAM,CAAE,CAAC,CACjE,CAED,MAAM,OAAQE,EAAY/mD,EAAK,CAC7B,MAAM6mD,EAAe,IAAI,IAAI,KAAK,IAAI,IAAIE,CAAU,GAAK,EAAE,EAC3DF,EAAa,OAAO7mD,CAAG,EACnB6mD,EAAa,KAAO,EACtB,MAAM,KAAK,IAAI,IAAIE,EAAY,MAAM,KAAKF,EAAa,OAAM,CAAE,CAAC,EAEhE,MAAM,KAAK,IAAI,IAAIE,CAAU,CAEhC,CAGD,WAAa,CACX,KAAK,KAAK,SAAS,CACpB,CAGD,aAAa,OAAQV,EAASr8D,EAAU,CAAA,EAAI,CAC1C,MAAMg9D,EAAK,IAAIJ,GAAwBP,EAASr8D,CAAO,EACvD,aAAMg9D,EAAG,KAAKh9D,EAAQ,SAAWA,EAAQ,MAAQ,2BAA2B,EAGxEA,EAAQ,OAAS,CAACA,EAAQ,SAC5B,MAAMi9D,GAAWj9D,EAAQ,MAAO,MAAOuhB,GAAMy7C,EAAG,MAAM,QAASz7C,CAAC,CAAC,EAG5Dy7C,CACR,CACH,CC/HA,MAAME,GAAiB,CACrB,cAAeT,GACf,KAAMC,GACN,QAASE,EACX,EAEMO,GAAiBl9D,GAAS,CAC9B,GAAI,CAACm9D,GAAkB,YAAYn9D,CAAI,EACrC,MAAM,IAAI,MAAM,0BAA0BA,CAAI,oBAAoB,EAEpE,OAAOi9D,GAAej9D,CAAI,CAC5B,EAEe,IAAAo9D,GAAA,MAAMD,EAAkB,CACrC,WAAW,kBAAoB,CAAE,OAAO7G,EAAkB,CAE1D,OAAO,YAAat2D,EAAM,CACxB,OAAO,OAAO,KAAKi9D,EAAc,EAAE,SAASj9D,CAAI,CACjD,CAED,OAAO,oBAAqBD,EAAS,CACnC,GAAI,CAACA,EAAQ,iBACX,MAAM,IAAI,MAAM,uDAAuD,EAGzE,GAAI,CAACA,EAAQ,iBAAiB,MAC5B,OAAOA,EAAQ,iBAAiB,MAAS,SACzC,MAAM,IAAI,MAAM,8FAA8F,EAGhHk9D,GAAel9D,EAAQ,iBAAiB,IAAI,EAAIA,EAAQ,gBACzD,CAED,OAAO,qBAAsBA,EAAS,CACpC,MAAMs9D,EAAoBt9D,EAAQ,kBAClC,GAAI,CAACs9D,EACH,MAAM,IAAI,MAAM,wDAAwD,EAG1EA,EAAkB,QAASC,GAAqB,CAC9CH,GAAkB,oBAAoB,CAAE,iBAAkBG,CAAgB,CAAE,CAClF,CAAK,CACF,CAED,OAAO,uBAAwBt9D,EAAM,CACnC,OAAOi9D,GAAej9D,CAAI,CAC3B,CAED,aAAa,QAASo8D,EAASmB,EAAiBx9D,EAAU,CAAA,EAAI,CAC5D,KAAM,CAAE,KAAAC,EAAM,OAAAw4C,CAAM,EAAK,MAAM6jB,GAAyB,QAAQD,EAAQ,MAAOmB,EAAiBx9D,CAAO,EAEjGu9D,EAAmB,MADAJ,GAAcl9D,CAAI,EACK,OAAOo8D,EAAS,OAAO,OAAO,CAAE,EAAEr8D,EAASy4C,CAAM,CAAC,EAClG,aAAM8kB,EAAiB,KAAK9kB,EAAO,OAAO,EACnC8kB,CACR,CAED,aAAa,OAAQlB,EAASp8D,EAAMD,EAAU,CAAA,EAAI,CAGhD,MAAMy4C,EAAS,MADJ,MADc0kB,GAAcl9D,CAAI,EACT,OAAOo8D,EAASr8D,CAAO,GACjC,KAAM,EAE9B,OADa,MAAMs8D,GAAyB,OAAOD,EAAQ,MAAOp8D,EAAMw4C,CAAM,CAE/E,CACH,EClEA,MAAMglB,GAAWl8C,GAAKA,IAAM,IAAMA,IAAM,IAEzB,MAAMm8C,EAAe,CAClC,YAAalzC,EAAMrhB,EAAM,CACvB,KAAK,KAAOqhB,EACZ,KAAK,KAAOrhB,CACb,CAED,UAAY,CACV,OAAOu0D,GAAe,KAAK,KAAK,KAAM,KAAK,IAAI,CAChD,CAED,OAAO,QAASxyD,EAAS,CACvBA,EAAUA,EAAQ,SAAQ,EAAG,QAAQ,MAAO,GAAG,EAE/C,MAAMyyD,EAAyB,CAACp8C,EAAGzpB,IAAM,GAAGA,IAAM,GAAKA,IAAM,IAAMoT,EAAQ,SAAQ,EAAG,QAAQ,QAAQ,IAAM,GAAKqW,IAAM,WAEjH9V,EAAQP,EAAQ,SAAU,EAC7B,MAAM,GAAG,EACT,OAAOyyD,CAAsB,EAC7B,OAAOF,EAAQ,EAElB,IAAIG,EAEJ,MAAMC,EAAgB/yD,GAAS,CAC7B,MAAMgzD,EAAW,CAAC,KAAM,KAAM,KAAM,IAAI,EACxC,UAAW9/D,KAAK8/D,EACd,GAAIhzD,EAAK,QAAQ9M,CAAC,EAAI,GACpB,MAAO,GAGX,MAAO,EACR,EAED,GAAI,CACF4/D,EAAuBC,EAAapyD,EAAM,CAAC,CAAC,EACxC3H,EAAI,MAAM2H,EAAM,CAAC,CAAC,EAAE,SAAU,EAC9B,IACL,MAAW,CACV,MAAO,EACR,CAED,OAAOmyD,IAAyB,IACjC,CAED,OAAO,MAAO1yD,EAAS,CACrB,GAAI,CAACA,EAAW,MAAM,IAAI,MAAM,gCAAgCA,CAAO,EAAE,EAEzE,GAAI,CAACwyD,GAAe,QAAQxyD,CAAO,EAAK,MAAM,IAAI,MAAM,gCAAgCA,CAAO,EAAE,EAEjGA,EAAUA,EAAQ,SAAQ,EAAG,QAAQ,MAAO,GAAG,EAE/C,MAAMO,EAAQP,EAAQ,SAAU,EAC7B,MAAM,GAAG,EACT,OAAO,CAACqW,EAAGzpB,IAAM,GAAGA,IAAM,GAAKA,IAAM,IAAMoT,EAAQ,SAAU,EAAC,QAAQ,QAAQ,IAAM,GAAKqW,IAAM,UAAU,EACzG,OAAOA,GAAKA,IAAM,IAAMA,IAAM,GAAG,EAEpC,OAAO,IAAIm8C,GAAejyD,EAAM,CAAC,EAAGA,EAAM,MAAM,EAAGA,EAAM,MAAM,EAAE,KAAK,GAAG,CAAC,CAC3E,CAED,OAAO,QAASgZ,EAAO,CACrB,OAAQtb,GAAK,OAASA,IAAM,KAAK,WAAY,GAAGsb,CAAK,CACtD,CACH,CC9DA,MAAes5C,GAAA,MAAOn2B,EAAMjwC,EAAMsI,EAAM+9D,EAAyBh+D,IAAY,CAC3E,MAAMi+D,EAAW,OAAO,OAAO,CAC7B,KAAAtmE,EACA,KAAAsI,EACA,kBAAmBkJ,GAAK,OAASA,IAAM,KAAK,QAAS60D,CAAuB,CAC7E,EAEDh+D,EAAQ,OAAS,OAAY,CAAE,KAAMA,EAAQ,IAAI,EAAK,CAAE,CACvD,EAED,OAAO06D,GAAS9yB,EAAM5nC,EAAQ,QAAU,WAAYi+D,EAAUj+D,CAAO,CACvE,ECfek+D,GAAA,gCCEA7lE,GAAC8lE,GAAa,CAC3B,IAAIr+D,EAAUq+D,EACd,OAAKhN,GAAM,OAAC,SAASrxD,CAAO,IAC1BA,EAAUqxD,GAAAA,OAAO,KAAKrxD,CAAO,GAExBA,CACT,ECRes+D,GAAA,MAAOx2B,EAAMy2B,EAAapgB,EAAOqgB,IAAa,CAC3D,MAAMC,EAAa,SAAY,CAC7B,MAAMrxB,EAAQ,MAAMtF,EAAK,OAAO,MAAMqW,CAAK,EACrCugB,EAAgBH,EAAY,IAAI98C,GAAK,OAAOA,CAAC,CAAC,EAC9Ck9C,EAAUvxB,EAAM,IAAI3rB,GAAK,OAAOA,CAAC,CAAC,EAExC,OADoBi9C,EAAc,IAAKj9C,GAAMk9C,EAAQ,SAASl9C,CAAC,CAAC,EAAE,OAAQA,GAAMA,IAAM,EAAK,EAAE,SAAW,CAEzG,EAED,OAAI,MAAMg9C,EAAU,EACX,QAAQ,QAAS,EAGnB,IAAI,QAAQ,CAAChpD,EAASrB,IAAW,CACtC,MAAM0yB,EAAW,YAAY,SAAY,CACvC,GAAI,CACE03B,EAAQ,EACV,cAAc13B,CAAQ,EACb,MAAM23B,MACf,cAAc33B,CAAQ,EACtBrxB,EAAS,EAEZ,OAAQgM,EAAG,CACVrN,EAAOqN,CAAC,CACT,CACF,EAAE,GAAG,CACV,CAAG,CACH,EC3Bem9C,GAAA,MAAO92B,IACH,MAAMA,EAAK,GAAI,GAChB,GCOH,MAAM+2B,WAAsBnU,EAAa,CACtD,YAAa5iB,EAAMg3B,EAAY,CAM7B,GALA,MAAO,EAGP,KAAK,MAAQh3B,EAET,CAACA,EAAK,OACR,MAAM,IAAI,MAAM,yCAAyC,EAO3D,GAJA,KAAK,QAAU,GACf,KAAK,UAAY,IAAM,KAAK,QAC5B,KAAK,YAAcg3B,EAEf,CAAC,KAAK,YACR,MAAM,IAAI,MAAM,2BAA2B,CAG9C,CAMD,IAAI,IAAM,CACR,OAAO,KAAK,GACb,CAMD,IAAI,OAAS,CACX,OAAO,KAAK,MACb,CAED,MAAM,SAAW,CACf,MAAMR,GAAa,KAAK,MAAO,CAAC,KAAK,WAAW,EAAG,KAAK,IAAK,KAAK,SAAS,CAC5E,CAMD,MAAM,KAAMt+D,EAAS,CACnB,GAAI,KAAK,QAAS,OAClB,MAAM5B,EAAI7F,GAAOyH,CAAO,EACxB,MAAM,KAAK,MAAM,OAAO,QAAQ,KAAK,IAAK5B,CAAC,CAC5C,CAKD,OAAS,CACP,KAAK,QAAU,GACf,KAAK,mBAAmB,SAAS,EACjC,KAAK,MAAM,OAAO,YAAY,KAAK,IAAK,KAAK,eAAe,CAC7D,CAED,MAAM,QAAU,CACd,KAAK,UAAY,MAAMwgE,GAAU,KAAK,KAAK,EAG3C,KAAK,OAAS,MAAM,KAAK,CAAC,KAAK,UAAW,KAAK,WAAW,CAAC,EAAE,KAAM,EAGnE,KAAK,IAAM,IAAMR,GAAW,IAAM,KAAK,OAAO,KAAK,GAAG,EAGtD,KAAK,gBAAkBp+D,GAAW,CAEhBA,GAAW,OAAOA,EAAQ,IAAI,IAAM,OAAO,KAAK,WAAW,GAGzE,KAAK,KAAK,UAAWA,CAAO,CAE/B,CACF,CAED,MAAM,cAAgB,CACpB,KAAK,QAAU,GACf,MAAM,KAAK,OAAQ,EACnB,MAAM,KAAK,MAAM,OAAO,UAAU,KAAK,IAAK,KAAK,eAAe,CACjE,CAED,aAAa,KAAM8nC,EAAMg3B,EAAY,CACnC,MAAMC,EAAU,IAAIF,GAAc/2B,EAAMg3B,CAAU,EAClD,aAAMC,EAAQ,aAAc,EACrBA,CACR,CACH,CClGA,MAAM7gD,GAASy7C,GAAO,OAAO,iBAAkB,CAAE,MAAOA,GAAO,OAAO,OAAQ,EAC9EA,GAAO,YAAY,OAAO,EAE1B,MAAMqF,GAAsB,MAAM/zB,GAAS,CACzC,GAAI,EAAEA,GAASA,EAAM,QAAS,MAAO,CAAE,EACvC,MAAMsvB,EAAa,MAAMtvB,EAAM,OAAO,IAAIA,EAAM,cAAc,GAAK,CAAE,EAC/DuvB,EAAc,MAAMvvB,EAAM,OAAO,IAAIA,EAAM,eAAe,GAAK,CAAE,EACvE,MAAO,CAAC,GAAGsvB,EAAY,GAAGC,CAAW,CACvC,EAEAyE,GAAe,MAAOn3B,EAAM18B,EAASorB,EAAM0oC,EAAUC,EAAqBxgB,EAAWygB,IAAqB,CACxG,MAAMC,EAAiBr/D,GAAW,CAChC,MAAM6zC,EAAM,KAAK,MAAMwd,GAAM,OAAC,KAAKrxD,EAAQ,IAAI,EAAE,UAAU,EACrD,CAAE,QAAAoL,EAAS,MAAAmqD,CAAK,EAAK1hB,EAC3B8K,EAAUvzC,EAASmqD,CAAK,CACzB,EAED,IAAIwJ,EAAUI,EAAoB3oC,CAAI,EACtC,GAAI,CAACuoC,EACH,GAAI,CACF7gD,GAAO,MAAM,uBAAuBsY,CAAI,EAAE,EAC1CuoC,EAAU,MAAMO,GAAQ,KAAKx3B,EAAMtR,CAAI,EACvCuoC,EAAQ,GAAG,UAAWM,CAAc,EACpCnhD,GAAO,MAAM,sBAAsBsY,CAAI,EAAE,EACzC4oC,EAAiBL,CAAO,CACzB,OAAQt9C,EAAG,CACVvD,GAAO,MAAMuD,CAAC,CACf,CAIH,MAAMs9C,EAAQ,QAAS,EACvB7gD,GAAO,MAAM,gBAAgBsY,CAAI,EAAE,EAGnC,MAAM++B,EAAQ,MAAMyJ,GAAoBE,EAAS9zD,CAAO,CAAC,EACzD8S,OAAAA,GAAO,MAAM,yBAAyB9S,CAAO;AAAA,EAAQ,KAAK,UAAUmqD,EAAM,IAAI9zC,GAAKA,EAAE,IAAI,EAAG,KAAM,CAAC,CAAC,EAChG8zC,GACF,MAAMwJ,EAAQ,KAAK,KAAK,UAAU,CAAE,QAAA3zD,EAAS,MAAAmqD,CAAK,CAAE,CAAC,EAGhDwJ,CACT,EC5CexO,GAACp+C,GAA6BA,GAAQ,KCIxCotD,GAAM,CAACC,KAAmB,OAAO,QAAW,UAAY,OAAO,MAAS,UACjF,KACAC,GCFEvhD,GAASy7C,GAAO,OAAO,UAAU,EACvCA,GAAO,YAAY,OAAO,EAEX,eAAe5qB,GAAS2wB,EAASx/D,EAASy/D,EAAW,CAClE,IAAIC,EAAW1/D,EAAQ,QAAUw/D,EAAQ,OAAOx/D,EAAQ,SAAS,EAAIw/D,EAAQ,OAAOx/D,EAAQ,SAAS,EAAE,MAAQ,MAC3G2/D,EAEJ,GAAI,CAACD,EAAU,CACb,MAAMv0D,GAAQhC,GAAK,OAASA,IAAM,KAAKq2D,EAAQ,UAAWC,EAAU,KAAMA,EAAU,IAAI,EACxF,GAAIJ,IAAMA,GAAG,YAAc,CAACA,GAAG,WAAWl0D,CAAI,EAAG,OACjDw0D,EAAW,MAAMH,EAAQ,QAAQ,YAAYr0D,CAAI,EACjDu0D,EAAW,IAAIE,GAAMD,CAAQ,CAC9B,CAED,GAAI,CADgB,MAAMD,EAAS,IAAI,aAAa,EAClC,OAElB,MAAMG,EAAUJ,EAAU,SAAU,EACpCzhD,GAAO,MAAM,+CAA+C,EAC5D,MAAM8hD,EAAgB,CACpB,eACA,cACA,WACA,OACD,EAED,UAAWhoE,KAAKgoE,EACd,GAAI,CACF,MAAM9pD,EAAM7M,GAAK,KAAK02D,EAASC,EAAchoE,CAAC,CAAC,EACzCstC,EAAM,MAAMs6B,EAAS,IAAII,EAAchoE,CAAC,CAAC,EAC3CstC,GAAK,MAAMplC,EAAQ,MAAM,IAAIgW,EAAKovB,CAAG,CAC1C,OAAQ7jB,EAAG,CACVvD,GAAO,MAAMuD,EAAE,OAAO,CACvB,CAEH,MAAMvhB,EAAQ,MAAM,IAAImJ,GAAK,KAAK02D,EAAS,WAAW,EAAGJ,EAAU,IAAI,EACnEE,GAAU,MAAMA,EAAS,MAAO,CACtC,CCtCA,MAAM/wB,GAAa,CAACmxB,EAAY,EAEnBC,GAAM,MAAOR,EAASx/D,EAASy/D,IAAc,CACxD,QAAS3nE,EAAI,EAAGA,EAAI82C,GAAW,OAAQ92C,IACrC,MAAM82C,GAAW92C,CAAC,EAAE0nE,EAASx/D,EAASy/D,CAAS,CAEnD,ECYMzhD,GAASy7C,GAAO,OAAO,UAAU,EACvCA,GAAO,YAAY,OAAO,EAG1B,MAAMwG,GAAgB,CACpB,QAASC,GACT,SAAUC,GACV,KAAMC,GACN,SAAUC,GACV,SAAUC,EACZ,EAEMC,GAAiB,IACvB,IAAInD,GAAoBoD,GAET,MAAMhB,EAAQ,CAC3B,YAAa53B,EAAMjiC,EAAU3F,EAAU,CAAA,EAAI,CACzC,GAAI,CAACqwD,GAAUzoB,CAAI,EAAK,MAAM,IAAI,MAAM,wGAAwG,EAEhJ,GAAI,CAACyoB,GAAU1qD,CAAQ,EAAK,MAAM,IAAI,MAAM,4GAA4G,EAExJ,KAAK,MAAQiiC,EACb,KAAK,SAAWjiC,EAChB,KAAK,GAAK3F,EAAQ,OAClB,KAAK,QAAWA,EAAQ,QAIpB,KAHA,IACAA,EAAQ,OAASA,EAAQ,OAASygE,IAClC,KAAK,MAAO,KAAK,EAAE,EAEvB,KAAK,UAAYzgE,EAAQ,WAAa,YACtC,KAAK,QAAUA,EAAQ,QACvB,KAAK,mBAAqB,CAAE,EAE5B,KAAK,OAAS,CAAE,EAChB,KAAK,OAAO,KAAK,SAAS,EAAI,CAAE,MAAOA,EAAQ,MAAO,SAAU,IAAI,GAAO,EAC3E,KAAK,SAAWA,EAAQ,SACxB,KAAK,OAAS,CAAE,EAIhBo9D,GAAoBp9D,EAAQ,mBAAqBo9D,EAClD,CAED,WAAW,QAAU,CAAE,OAAOqD,EAAQ,CACtC,WAAW,OAAS,CAAE,OAAOb,EAAO,CACpC,WAAW,UAAY,CAAE,OAAOc,EAAU,CAC1C,WAAW,YAAc,CAAE,OAAOC,EAAY,CAC9C,WAAW,mBAAqB,CAAE,OAAOvD,EAAmB,CAC5D,WAAW,SAAW,CAAE,OAAOnb,EAAS,CACxC,WAAW,gBAAkB,CAAE,OAAOyb,EAAgB,CAEtD,WAAW,OAAS,CAAE,OAAO/D,EAAO,CACpC,WAAW,YAAc,CAAE,OAAOwG,EAAY,CAC9C,WAAW,WAAa,CAAE,OAAOC,EAAW,CAC5C,WAAW,eAAiB,CAAE,OAAOE,EAAe,CACpD,WAAW,cAAgB,CAAE,OAAOJ,EAAc,CAClD,WAAW,eAAiB,CAAE,OAAOG,EAAe,CAEpD,IAAI,OAAS,CAAE,OAAO,KAAK,OAAO,KAAK,SAAS,EAAE,KAAO,CAEzD,aAAa,eAAgBz4B,EAAM5nC,EAAU,CAAA,EAAI,CAC/C,GAAI,CAACqwD,GAAUzoB,CAAI,EAAK,MAAM,IAAI,MAAM,wGAAwG,EAMhJ,GAJI5nC,EAAQ,UAAY,SACtBA,EAAQ,QAAU,IAGhBA,EAAQ,SAAW,CAACA,EAAQ,GAC9B,MAAM,IAAI,MAAM,sDAAsD,EAGxE,KAAM,CAAE,GAAAghB,CAAI,EAAGhhB,EAAQ,IAAMA,EAAQ,QAAW,CAAE,GAAIA,EAAQ,EAAI,EAAI,MAAM4nC,EAAK,GAAI,EAIrF,GAFK5nC,EAAQ,YAAaA,EAAQ,UAAY,aAE1C,CAACA,EAAQ,QAAS,CACpB,MAAM4gE,EAAiB,CAAE,EAGzB5gE,EAAQ,QAAUiiD,GAAQ,KAAM2e,CAAc,CAC/C,CAMD,GAJI5gE,EAAQ,UAAYA,EAAQ,SAAS,SAAS,WAChDA,EAAQ,SAAWA,EAAQ,SAAS,SAAS,UAG3C,CAACA,EAAQ,SAAU,CACrB,MAAM6gE,EAAe13D,GAAK,KAAKnJ,EAAQ,UAAW,OAAOghB,GAAO,SAAWA,EAAKA,EAAG,SAAQ,EAAI,WAAW,EACpG8/C,EAAa,MAAM9gE,EAAQ,QAAQ,YAAY6gE,CAAY,EACjE7gE,EAAQ,SAAW,IAAI0gE,GAASI,CAAU,CAC3C,CASD,GAPK9gE,EAAQ,WACXA,EAAQ,SAAW,MAAM2gE,GAAW,eAAe,CACjD,GAAA3/C,EACA,SAAUhhB,EAAQ,QAC1B,CAAO,GAGC,CAACA,EAAQ,MAAO,CAClB,MAAM+gE,EAAY53D,GAAK,KAAKnJ,EAAQ,UAAW,OAAOghB,GAAO,SAAWA,EAAKA,EAAG,SAAQ,EAAI,QAAQ,EAC9FggD,EAAe,MAAMhhE,EAAQ,QAAQ,YAAY+gE,CAAS,EAChE/gE,EAAQ,MAAQ,IAAI4/D,GAAMoB,CAAY,CACvC,CAED,MAAMC,EAAe,OAAO,OAAO,CAAE,EAAEjhE,EAAS,CAAE,OAAQ,OAAOghB,GAAO,SAAWA,EAAKA,EAAG,SAAU,CAAA,CAAE,EACvG,OAAO,IAAIw+C,GAAQ53B,EAAM5nC,EAAQ,SAAUihE,CAAY,CACxD,CAGD,MAAM,KAAM/1D,EAASlL,EAAU,CAAA,EAAI,CACjC,OAAAA,EAAU,OAAO,OAAO,CAAE,OAAQ,GAAM,KAAM,MAAQ,EAAEA,CAAO,EACxD,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAED,MAAM,IAAKkL,EAASlL,EAAU,CAAA,EAAI,CAChC,OAAAA,EAAU,OAAO,OAAO,CAAE,OAAQ,GAAM,KAAM,UAAY,EAAEA,CAAO,EAC5D,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAED,MAAM,SAAUkL,EAASlL,EAAU,CAAA,EAAI,CACrC,OAAO,KAAK,IAAIkL,EAASlL,CAAO,CACjC,CAED,MAAM,SAAUkL,EAASlL,EAAU,CAAA,EAAI,CACrC,OAAAA,EAAU,OAAO,OAAO,CAAE,OAAQ,GAAM,KAAM,UAAY,EAAEA,CAAO,EAC5D,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAED,MAAM,QAASkL,EAASlL,EAAU,CAAA,EAAI,CACpC,OAAO,KAAK,SAASkL,EAASlL,CAAO,CACtC,CAED,MAAM,QAASkL,EAASlL,EAAU,CAAA,EAAI,CACpC,OAAAA,EAAU,OAAO,OAAO,CAAE,OAAQ,GAAM,KAAM,SAAW,EAAEA,CAAO,EAC3D,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAED,MAAM,KAAMkL,EAASlL,EAAU,CAAA,EAAI,CACjC,OAAAA,EAAU,OAAO,OAAO,CAAE,OAAQ,GAAM,KAAM,UAAY,EAAEA,CAAO,EAC5D,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAED,MAAM,SAAUkL,EAASlL,EAAU,CAAA,EAAI,CACrC,OAAO,KAAK,KAAKkL,EAASlL,CAAO,CAClC,CAKD,MAAM,YAAc,CAGlB,UAAWinD,KAAc,OAAO,OAAO,KAAK,kBAAkB,EAC5DA,EAAW,MAAO,EAGpB,KAAK,mBAAqB,CAAE,EAGxB,KAAK,SACP,MAAM,KAAK,QAAQ,WAAY,EAIjC,MAAM,KAAK,SAAS,MAAO,EAG3B,MAAMia,EAAY,OAAO,OAAO,KAAK,MAAM,EAC3C,UAAWl2B,KAAMk2B,EACf,MAAMl2B,EAAG,MAAO,EAElB,KAAK,OAAS,CAAE,EAEhB,MAAMm2B,EAAS,OAAO,OAAO,KAAK,MAAM,EACxC,UAAWx9D,KAASw9D,EAClB,MAAMx9D,EAAM,MAAM,MAAO,EAE3B,KAAK,OAAS,CAAE,EAGhB,KAAK,OAAS,CAAE,CACjB,CAGD,MAAM,MAAQ,CACZ,MAAM,KAAK,WAAY,CACxB,CAED,MAAM,aAAcwF,EAAM,CACxB,MAAM63D,EAAe,MAAM,KAAK,QAAQ,YAAY73D,CAAI,EACxD,OAAO,IAAIy2D,GAAMoB,CAAY,CAC9B,CAGD,MAAM,aAAc/gE,EAAMiL,EAASlL,EAAS,CAE1C,MAAM25D,EAAQsG,GAAchgE,CAAI,EAEhC,GAAI,CAAC05D,EAAS,MAAM,IAAI,MAAM,0BAA0B15D,CAAI,GAAG,EAE/D,IAAIs9D,EACAv9D,EAAQ,0BACVu9D,EAAmB,MAAMH,GAAkB,QAAQ,KAAMp9D,EAAQ,wBAAyBA,EAAQ,gBAAgB,GAGpH,MAAMga,EAAO,OAAO,OAAO,CAAE,UAAW,EAAM,EAAEha,EAAS,CACvD,iBAAAu9D,EACA,MAAOv9D,EAAQ,MACf,QAAS,KAAK,SAAS,KAAK,IAAI,EAChC,OAAQ,KAAK,QAAQ,KAAK,IAAI,EAC9B,OAAQ,KAAK,QAAQ,KAAK,IAAI,CACpC,CAAK,EACK2F,EAAW3F,EAAQ,UAAY,KAAK,SAEpC+qC,EAAQ,IAAI4uB,EAAM,KAAK,MAAOh0D,EAAUuF,EAAS8O,CAAI,EAC3D+wB,EAAM,OAAO,GAAG,QAAS,KAAK,SAAS,KAAK,IAAI,CAAC,EAGjD,MAAM5/B,EAAOD,EAAQ,SAAU,EAC/B,YAAK,OAAOC,CAAI,EAAI4/B,EAKhB/wB,EAAK,WAAa,KAAK,SAAW,MAAM,KAAK,QAAQ,UAAU7O,EAAM,KAAK,WAAW,KAAK,IAAI,EAAG,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAE9H4/B,CACR,CAGD,SAAU7/B,EAAS2T,EAAOw2C,EAAO,CAC/B,GAAI,CAACA,EAAO,MAAM,IAAI,MAAM,qBAAqB,EAC7C,KAAK,SAAS,KAAK,QAAQ,QAAQnqD,EAASmqD,CAAK,CACtD,CAGD,MAAM,WAAYnqD,EAASmqD,EAAO/+B,EAAM,CACtC,MAAMyU,EAAQ,KAAK,OAAO7/B,CAAO,EACjC,GAAI,CACF8S,GAAO,MAAM,YAAYq3C,EAAM,MAAM,eAAenqD,CAAO;AAAA,EAAQ,KAAK,UAAUmqD,EAAM,IAAI9zC,GAAKA,EAAE,IAAI,EAAG,KAAM,CAAC,CAAC,EAC9GwpB,GAASsqB,IACPA,EAAM,OAAS,GACjB,MAAMtqB,EAAM,KAAKsqB,CAAK,EAExBtqB,EAAM,OAAO,KAAK,iBAAkBzU,EAAMprB,EAASmqD,CAAK,EAE3D,OAAQ9zC,EAAG,CACVvD,GAAO,MAAMuD,CAAC,CACf,CACF,CAGD,MAAM,iBAAkBrW,EAASorB,EAAM,CACrCtY,GAAO,MAAM,aAAasY,CAAI,mBAAmBprB,CAAO,GAAG,EAE3D,MAAM8zD,EAAW9zD,GAAW,KAAK,OAAOA,CAAO,EACzC+zD,EAAsB3oC,GAAQ,KAAK,mBAAmBA,CAAI,EAC1D4oC,EAAmBL,GAAW,CAAE,KAAK,mBAAmBA,EAAQ,WAAW,EAAIA,CAAS,EAExFpgB,EAAY,CAACvzC,EAASmqD,IAAU,KAAK,WAAWnqD,EAASmqD,EAAO/+B,CAAI,EAE1E,MAAMyoC,GACJ,KAAK,MACL7zD,EACAorB,EACA0oC,EACAC,EACAxgB,EACAygB,CACD,EAEGF,EAAS9zD,CAAO,GAAK8zD,EAAS9zD,CAAO,EAAE,OAAO,KAAK,OAAQorB,CAAI,CACpE,CAGD,MAAM,SAAU0U,EAAI,CAClB,MAAM9/B,EAAU8/B,EAAG,QAAQ,SAAU,EACrChtB,GAAO,MAAM,SAAS9S,CAAO,EAAE,EAG3B,KAAK,SACP,MAAM,KAAK,QAAQ,YAAYA,CAAO,EAGxC,MAAMsiB,EAAMwd,GAAMA,EAAG,QAAQ,UAAYA,EAAG,QAAQ,UAAY,KAAK,UAC/DrnC,EAAQ,KAAK,OAAO6pB,CAAG,EAEzB7pB,GAASA,EAAM,SAAS,IAAIuH,CAAO,IACrCvH,EAAM,SAAS,OAAOuH,CAAO,EACxBvH,EAAM,SAAS,MAAM,MAAMA,EAAM,MAAM,MAAO,GAGrD,OAAO,KAAK,OAAOuH,CAAO,CAC3B,CAED,MAAM,QAAS8/B,EAAI,CACjB,MAAM9/B,EAAU8/B,EAAG,QAAQ,SAAU,EAC/Bxd,EAAMwd,GAAMA,EAAG,QAAQ,UAAYA,EAAG,QAAQ,UAAY,KAAK,UACrE,MAAM,KAAK,cAAc9/B,EAASsiB,EAAKwd,EAAG,MAAM,CACjD,CAED,MAAM,QAASA,EAAI,CACjB,MAAM9/B,EAAU8/B,EAAG,QAAQ,SAAU,EAC/Bxd,EAAMwd,GAAMA,EAAG,QAAQ,UAAYA,EAAG,QAAQ,UAAY,KAAK,UACrE,MAAM,KAAK,cAAc9/B,EAASsiB,EAAKwd,EAAG,MAAM,EAChD,KAAK,OAAO9/B,CAAO,EAAI8/B,CACxB,CAED,MAAM,kBAAmBrzC,EAAMsI,EAAMD,EAAU,CAAA,EAAI,CACjD,GAAI,CAACw/D,GAAQ,YAAYv/D,CAAI,EAAK,MAAM,IAAI,MAAM,0BAA0BA,CAAI,GAAG,EAEnF,GAAIy9D,GAAe,QAAQ/lE,CAAI,EAAK,MAAM,IAAI,MAAM,+EAA+E,EAGnIqI,EAAQ,iBAAmB,OAAO,OAAO,CAAE,EAAE,CAAE,KAAArI,EAAM,KAAM,QAAUqI,EAAQ,gBAAgB,EAC7F,MAAMg+D,EAA0B,MAAMZ,GAAkB,OAAO,KAAMp9D,EAAQ,iBAAiB,KAAMA,EAAQ,kBAAoB,CAAA,CAAE,EAG5Hu8D,EAAe,MAAMwB,GAAiB,KAAK,MAAOpmE,EAAMsI,EAAM+9D,EAAyBh+D,CAAO,EAGpG,OAAO09D,GAAe,MAAMA,GAAe,KAAKnB,EAAc5kE,CAAI,CAAC,CACpE,CAUD,MAAM,OAAQA,EAAMsI,EAAMD,EAAU,CAAA,EAAI,CACtCge,GAAO,MAAM,UAAU,EAEvBA,GAAO,MAAM,sBAAsBrmB,CAAI,QAAQsI,CAAI,EAAE,EAGrD,MAAMw/D,EAAY,MAAM,KAAK,kBAAkB9nE,EAAMsI,EAAMD,CAAO,EAOlE,GALAA,EAAQ,MAAQ,MAAM,KAAK,cAAcy/D,EAAU,SAAQ,EAAIz/D,EAAQ,SAAS,EAGjE,MAAM,KAAK,eAAeA,EAAQ,MAAOy/D,CAAS,GAEnD,CAACz/D,EAAQ,UAAa,MAAM,IAAI,MAAM,aAAay/D,CAAS,mBAAmB,EAE7F,aAAM,KAAK,SAAS,CAAE,GAAGz/D,EAAc,UAAW,KAAK,SAAa,EAAEy/D,CAAS,EAG/E,MAAM,KAAK,oBAAoBz/D,EAAQ,MAAOy/D,CAAS,EAEvDzhD,GAAO,MAAM,qBAAqByhD,CAAS,GAAG,EAGvC,KAAK,KAAKA,EAAWz/D,CAAO,CACpC,CAED,MAAM,iBAAkBrI,EAAMsI,EAAMD,EAAU,CAAA,EAAI,CAChD,MAAMga,EAAO,OAAO,OAAO,CAAA,EAAI,CAAE,SAAU,EAAM,EAAEha,CAAO,EAC1D,OAAO,KAAK,kBAAkBrI,EAAMsI,EAAM+Z,CAAI,CAC/C,CAED,MAAM,cAAe9O,EAASk2D,EAAWC,EAAe,CACtD,MAAM7zC,EAAM4zC,GAAa,KAAK,UAC9B,GAAI,CAAC,KAAK,OAAO5zC,CAAG,EAAG,CACrB,MAAM8zC,EAAWD,GAAiB,MAAM,KAAK,aAAa7zC,CAAG,EAC7D,KAAK,OAAOA,CAAG,EAAI,CAAE,MAAO8zC,EAAU,SAAU,IAAI,GAAO,CAC5D,CACD,KAAK,OAAO9zC,CAAG,EAAE,SAAS,IAAItiB,CAAO,EACrC,MAAMvH,EAAQ,KAAK,OAAO6pB,CAAG,EAAE,MAG/B,OAAI7pB,GAAO,MAAMA,EAAM,KAAM,EAEtBA,CACR,CAWD,MAAM,KAAMuH,EAASlL,EAAU,CAAA,EAAI,CAOjC,GANAge,GAAO,MAAM,QAAQ,EAErBhe,EAAU,OAAO,OAAO,CAAE,UAAW,GAAO,OAAQ,EAAO,EAAEA,CAAO,EACpEge,GAAO,MAAM,kBAAkB9S,CAAO,GAAG,EAGrC,CAACwyD,GAAe,QAAQxyD,CAAO,EACjC,GAAKlL,EAAQ,OAEN,IAAIA,EAAQ,QAAU,CAACA,EAAQ,KACpC,MAAM,IAAI,MAAM,mEAAmEw/D,GAAQ,cAAc,KAAK,GAAG,CAAC,GAAG,EAErH,OAAAxhD,GAAO,KAAK,gCAAgC9S,CAAO,0BAA0B,EAC7ElL,EAAQ,UAAYA,EAAQ,UAAYA,EAAQ,UAAY,GACrD,KAAK,OAAOkL,EAASlL,EAAQ,KAAMA,CAAO,MANjD,OAAM,IAAI,MAAM,oGAA4G,EAWhI,MAAMy/D,EAAY/B,GAAe,MAAMxyD,CAAO,EAO9ClL,EAAQ,MAAQ,MAAM,KAAK,cAAcy/D,EAAU,SAAQ,EAAIz/D,EAAQ,SAAS,EAGhF,MAAMuhE,EAAS,MAAM,KAAK,eAAevhE,EAAQ,MAAOy/D,CAAS,EAMjE,GAJAzhD,GAAO,OAAOujD,EAAS,QAAU,eAAkB,cAAc9B,CAAS,GAAG,EAIzEz/D,EAAQ,WAAa,CAACuhE,EACxB,MAAAvjD,GAAO,KAAK,aAAayhD,CAAS,kBAAkB,EAC9C,IAAI,MAAM,aAAaA,CAAS,kBAAkB,EAG1DzhD,GAAO,MAAM,yBAAyByhD,CAAS,GAAG,EAElD,IAAIxB,EACJ,GAAI,CAEFA,EAAW,MAAMzB,GAAQ,KAAK,MAAOiD,EAAU,KAAM,CAAE,QAASz/D,EAAQ,SAAWugE,EAAc,CAAE,EACnGviD,GAAO,MAAM,iBAAiByhD,CAAS;AAAA,EAAO,KAAK,UAAUxB,EAAU,KAAM,CAAC,CAAC,EAAE,CAClF,OAAQ18C,EAAG,CACV,MAAIA,EAAE,OAAS,gBAAkBA,EAAE,OAAS,eAC1C,QAAQ,MAAMA,CAAC,EACT,IAAI,MAAM,0DAA0D,GAEpEA,CAET,CAOD,GALI08C,EAAS,OAASwB,EAAU,MAC9BzhD,GAAO,KAAK,kBAAkBigD,EAAS,IAAI,oBAAoBwB,EAAU,IAAI,gBAAgB,EAI3Fz/D,EAAQ,MAAQi+D,EAAS,OAASj+D,EAAQ,KAC5C,MAAM,IAAI,MAAM,aAAay/D,CAAS,cAAcxB,EAAS,IAAI,wBAAwBj+D,EAAQ,IAAI,GAAG,EAI1G,aAAM,KAAK,oBAAoBA,EAAQ,MAAOy/D,CAAS,EAGvDz/D,EAAU,OAAO,OAAO,CAAA,EAAIA,EAAS,CAAE,wBAAyBi+D,EAAS,iBAAkB,KAAMA,EAAS,IAAI,CAAE,EACzG,KAAK,aAAaj+D,EAAQ,MAAQi+D,EAAS,KAAMwB,EAAWz/D,CAAO,CAC3E,CAGD,MAAM,oBAAqB2D,EAAO87D,EAAW,CAC3C,MAAM97D,EAAM,IAAIwF,GAAK,KAAKs2D,EAAU,SAAQ,EAAI,WAAW,EAAGA,EAAU,IAAI,EAC5EzhD,GAAO,MAAM,8BAA8ByhD,EAAU,IAAI,GAAG,CAC7D,CAQD,MAAM,eAAgB97D,EAAO87D,EAAW,CACtC,GAAI,CAAC97D,EACH,MAAO,GAGT,MAAMwH,EAAOs0D,EAAU,SAAU,EAC3BljE,EAAO,MAAMoH,EAAM,IAAIwF,GAAK,KAAKgC,EAAM,WAAW,CAAC,EACzD,OAA6B5O,GAAS,IACvC,CAOD,MAAM,SAAUyD,EAASy/D,EAAW,CAClC,MAAM+B,GAAe,KAAMxhE,EAASy/D,CAAS,CAC9C,CAOD,WAAW,eAAiB,CAC1B,OAAO,OAAO,KAAKQ,EAAa,CACjC,CAED,OAAO,YAAahgE,EAAM,CACxB,OAAO,OAAO,KAAKggE,EAAa,EAAE,SAAShgE,CAAI,CAChD,CAED,OAAO,gBAAiBA,EAAM8qC,EAAO,CACnC,GAAIk1B,GAAchgE,CAAI,EAAG,MAAM,IAAI,MAAM,wBAAwBA,CAAI,EAAE,EACvEggE,GAAchgE,CAAI,EAAI8qC,CACvB,CAED,OAAO,kBAAoB,CACzB,OAAOk1B,EACR,CAED,OAAO,eAAgB/0D,EAAS,CAC9B,OAAOwyD,GAAe,QAAQxyD,CAAO,CACtC,CAED,OAAO,aAAcA,EAAS,CAC5B,OAAOwyD,GAAe,MAAMxyD,CAAO,CACpC,CACH,CAEAs0D,GAAQ,UAAU,kBAAoBpC,GACtCoC,GAAQ,UAAU,WAAamB,GAC/BnB,GAAQ,UAAU,SAAWkB","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532]}