{"version":3,"mappings":"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","names":["detectDarkMode","prefersLight","toggleDarkTheme","mediaQuery","shouldAdd","ionApp","darkBool","minderAsciiLogo","event","startElmApp","installTaskPorts","app","Elm","elmStarted","TaskPort.install","attachODDElmLibrary","registerPreferencesTaskPorts","registerNotificationTaskPorts","TaskPort.register","getPassphrase","LocalNotifications","id","Dialog","SplashScreen","err","granted","data","Toast","e","scheduleNotifications","App","isActive","attachODDManual","problemWithOrbit","loadPwaElements","shouldReset","storedPassphrase","Preferences","fallbackPassphrase","value","cancelled","newPassphrase","elmApp","__vitePreload","webnativeElm","TaskPort","Flipping"],"sources":["../../www/darkMode.ts","../../www/scripts/asciiArt.ts","../../www/index.ts"],"sourcesContent":["\nexport function detectDarkMode() {\n    // Use matchMedia to check the user preference\nconst prefersLight = window.matchMedia('(prefers-color-scheme: light)');\nconsole.log(\"Prefers light theme?\", prefersLight)\ntoggleDarkTheme(!prefersLight.matches);\n\n// Listen for changes to the prefers-color-scheme media query\nprefersLight.addListener((mediaQuery) => toggleDarkTheme(!mediaQuery.matches));\n}\n\n\n// Add or remove the \"dark\" class based on if the media query matches\nexport function toggleDarkTheme(shouldAdd) {\n  const ionApp = document.getElementById(\"ion-app\");\n  if (ionApp) {ionApp.classList.toggle('dark', shouldAdd);} else {console.error(\"can't find #ion-app for dark mode\")}\n}\nglobalThis.toggleDarkTheme = (darkBool) => toggleDarkTheme(darkBool);\n","export const minderAsciiLogo =\n`\n                                                                      \n                                 ....                                 \n                             .,cllllll:'.                             \n                          .;loooooo'    ol;.                          \n                      .'coo''oooo.         'o:'.                      \n                   .;lo;     lol               ol;.                   \n               .,coc        :o'                   .oc,.               \n            .:oo           lo.                        co:.            \n        .,lo'            .oo                             'ol,.        \n        ooo,            ,ol                               coooo       \n         ,do,.         ;d:                              .;dddd:       \n             do:.     cd.                            .:oddddd,        \n                odl:cod:                         .;ldo   ddd.         \n                  oddddo.                    .'cdd      .dd           \n                  oddddddo;.              .:od;        ,dl            \n                 ldc      .ddc'.      .,ldd           :d:             \n                od;           dddooooddc             cd.              \n              .dd.            ,dddddddd'            ld                \n             ,dd            .:ddd.  ;dddc'.       .dd                 \n            ;dd         .;ld:            ldo;.   ,do                  \n           lxl       'cdx                   'xxddxx                   \n          oxx    .;ox'                        lxxxxo'                 \n        .dxxxc;lxo                            dx:  .xxl,.             \n       ;xxxxxx.                             .dx.       cxo;.          \n       xxxx.                               'xx            dxo;        \n       ,xxx.                              ;xl             oxxo        \n          .xo;.                          cx;          .'cdd           \n              odc'.                     ox.        .;ox.              \n                  xd:'                'dx      .;lxl                  \n                     ;xo;.          .lxxo  .,lxx.                     \n                         xxc,.    'cxxxxxddxc                         \n                            'xdloxxxxxxxx.                            \n                                cxxxx;                                \n\n`","import { Capacitor } from '@capacitor/core';\nimport { App } from '@capacitor/app'\nimport { Toast } from '@capacitor/toast'\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport {Clipboard} from '@capacitor/clipboard'\nimport {LocalNotifications} from '@capacitor/local-notifications'\nimport { Preferences } from '@capacitor/preferences';\n// import {Elm} from '../elm/Main.elm'\nimport {Elm} from '../.elm-land/src/Main.elm'\nimport { Dialog } from '@capacitor/dialog';\nimport { defineCustomElements as loadPwaElements } from '@ionic/pwa-elements/loader';\nimport { detectDarkMode, toggleDarkTheme } from './darkMode';\n//import { defineCustomElements as loadIonicElements } from '@ionic/core/loader'\nimport './scripts/ionicInit'\nimport * as TaskPort from 'elm-taskport';\nimport {registerNotificationTaskPorts, scheduleNotifications} from './scripts/capacitor/notifications'\nimport {registerPreferencesTaskPorts} from './scripts/capacitor/preferences'\nimport { native } from '@nativescript/capacitor';\nimport { minderAsciiLogo } from './scripts/asciiArt';\n\n\n\n\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/core/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/core/css/normalize.css';\nimport '@ionic/core/css/structure.css';\nimport '@ionic/core/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/core/css/padding.css';\nimport '@ionic/core/css/float-elements.css';\nimport '@ionic/core/css/text-alignment.css';\nimport '@ionic/core/css/text-transformation.css';\nimport '@ionic/core/css/flex-utils.css';\nimport '@ionic/core/css/display.css';\n\n// Display content under transparent status bar (Android only)\n// Fails in browser, suppress error\n// StatusBar.setOverlaysWebView({ overlay: true }).catch(e => {return});\n// StatusBar.setStyle({}); // set to opposite of current theme\n// FIXME: can't underlay status bar because theme switch resets status bar padding \n\n\n\naddEventListener(\"error\", (event) => {alert(event.message + \"\\n filename: \" + event.filename + \"\\n line: \" + event.lineno + \"\\n column: \" + event.colno + \"\\n error: \" + event.error)});\n\n// START ELM\nasync function startElmApp() {\n\n    await installTaskPorts();\n\n    let app = Elm.Main.init({ flags: \n        { storedRonMaybe : (null) \n        , userFlags : {darkTheme: window.matchMedia('(prefers-color-scheme: dark)').matches}\n        }\n    });\n    elmStarted(app);\n\n}\nstartElmApp();\n\nasync function installTaskPorts() {\n  \n  TaskPort.install({ logCallErrors: true, logInteropErrors: false });\n  await attachODDElmLibrary();\n  registerPreferencesTaskPorts();\n  registerNotificationTaskPorts();\n  TaskPort.register(\"changePassphrase\", () => getPassphrase(true));\n  TaskPort.register(\"requestNotificationPermission\", LocalNotifications.requestPermissions)\n  TaskPort.register(\"ionInputSetFocus\", (id : string) => document?.getElementById(id)!.setFocus())\n  TaskPort.register(\"dialogPrompt\", Dialog.prompt)\n}\n\nfunction elmStarted(app) {\n    console.log(minderAsciiLogo);\n    // hide the splash screen\n    SplashScreen.hide().catch((err) => {\n        console.log(\"No Capacitor splash screen to hide.\");\n    });\n\n\n    // Try to make storage persistent\n    if (navigator.storage && navigator.storage.persist)\n    navigator.storage.persist().then(granted => {\n      if (granted)\n        console.log(\"Storage will not be cleared except by explicit user action\");\n      else\n        console.log(\"Storage may be cleared by the UA under storage pressure.\");\n    });\n\n\n    // FLASH OR TOAST\n    app.ports.toastPort.subscribe(function(data) {\n\n        // Workaround for https://github.com/ionic-team/pwa-elements/issues/34\n        // (Line breaks are ignored and replaced with spaces)\n        //let reformatted = data.replace(/(?:\\r\\n|\\r|\\n)/g, \" — \");\n\n        try {\n          Toast.show({ text: data, duration: \"short\"}).then();\n        //console.log(\"Toast: \"+data)\n        } catch (e) {\n          console.error(\"Failed to show Toast!\", e)\n        }\n        \n    });\n\n    app.ports.ns_notify.subscribe(scheduleNotifications);\n\n\n      // Clipboard.write({\n      //   string: \"Hello, Moto\"\n      // });\n\n      App.addListener('appStateChange', ({ isActive }) => {\n        detectDarkMode();\n        Toast.show({ text: (\"App became \" + (isActive ? \"active!\" : \"inactive.\")), duration: \"short\"}).then();\n      });\n      \n      App.addListener('appUrlOpen', data => {\n        console.log('App opened with URL:', data);\n      });\n      \n      App.addListener('appRestoredResult', data => {\n        console.log('Restored state:', data);\n      });\n      \n      const checkAppLaunchUrl = async () => {\n        const url = await App.getLaunchUrl();\n      \n        console.log('App opened with URL: ' + url);\n      };\n      Toast.show({ text: window.location.href, duration: \"short\"}).then();\n      try {\n        //attachOrbit(app);\n        attachODDManual(app);\n      } catch (problemWithOrbit)\n      {\n        console.error(\"Failed to attach Orbit to Elm!\", problemWithOrbit)\n      }\n\n}  \n//loadIonicElements(window);\nloadPwaElements(window);\n\n\n\n\nasync function getPassphrase(shouldReset) {\n    const getPassphraseResult = await Preferences.get({ key: 'minder-alpha-passphrase' });\n    var storedPassphrase = getPassphraseResult.value;\n\n    const notPreviouslySet = storedPassphrase == null || storedPassphrase == \"\"\n\n    if (notPreviouslySet || shouldReset) {\n        const fallbackPassphrase = storedPassphrase ? (\"tester\" + Math.floor(Math.random()*1000)) : storedPassphrase\n\n        const { value, cancelled } = await Dialog.prompt({\n          title: 'New Device',\n          message: \"Enter a secret account passphrase to begin storing your data. If you've already got data in Minder on some other device, be sure to use the same passphrase here, and it will eventually sync over.\",\n        });\n\n        const newPassphrase = cancelled ? fallbackPassphrase : value\n\n        storedPassphrase = newPassphrase ? newPassphrase : fallbackPassphrase;\n        Toast.show({ text: `Storing new passphrase: ${storedPassphrase}`, duration: \"short\"}).then();\n        await Preferences.set({\n          key: 'minder-alpha-passphrase',\n          value: storedPassphrase,\n        });\n        return storedPassphrase;\n    } else {\n      Toast.show({ text: `Loading account: ${storedPassphrase}`, duration: \"short\"}).then();\n      return storedPassphrase;\n    }\n}\n\nasync function attachOrbit(elmApp) {\n    const orbit = await import( './scripts/orbit')\n    const storedPassphrase : string | null = await  getPassphrase(false);\n    const db = await orbit.startOrbit(storedPassphrase);\n    globalThis[\"minderLog\"] = db;\n    const dbEntries = db.iterator({ limit: -1 }).collect();\n    console.log(\"Loaded inital database entries\", dbEntries);\n    let oldFrames = dbEntries.map((e) => e.payload.value).join('\\n');\n\n    elmApp.ports.incomingRon.send(oldFrames);\n\n    // SET STORAGE\n    elmApp.ports.setStorage.subscribe(async function(state) {\n        if (state.trim() != \"\")\n        {\n          // TODO elm may call this before it's ready. make taskport, hoist to top and use await db.load? or onReady?\n          console.log(\"Adding state to database\", state);\n          const hash = db.add(state); //async?\n        }\n    });\n\n    // Notify elm of new frame from peers\n    db.events.on(\"replicate.progress\", (address, hash, entry, progress, have) => {\n      const newFrame = entry.payload.value;\n      elmApp.ports.incomingRon.send(newFrame);\n      console.log(\"New frames from peer @\", address, \"Progress is \", progress)\n    })\n}\n\n\nasync function attachODDManual(elmApp) {\n  const oddIntegration = await import('./scripts/odd')\n  //const program = oddIntegration.init();\n\n\n  // let retrievedRon = await oddIntegration.readData(program, program!.session);\n  // if (retrievedRon) {\n  //   elmApp.ports.incomingRon.send(retrievedRon)\n  // } else {\n  //   console.error(\"Couldn't retrieve RON from WNFS\", retrievedRon)\n  // }\n  //   // SET STORAGE\n  // elmApp.ports.setStorage.subscribe(async function(state) {\n  //     if (state.trim() != \"\")\n  //     {\n  //       console.log(\"Adding state to WNFS\", state);\n  //       const hash = oddIntegration.saveData(state); \n  //     } else {\n  //       console.error(\"Tried to save empty RON data...\")\n  //     }\n  // });\n}\n\nasync function attachODDElmLibrary() {\n  // Elm library (currently broken)\n  const webnativeElm = await import(\"webnative-elm\")\n  await webnativeElm.init({ TaskPort }) // await so it will be ready before elm initializes\n  console.log(\"webnative initialized\", webnativeElm)\n}\n\n// FLIP ANIMATIONS\n// Requires patch to ~/.elm/0.19.1/packages/elm/browser/1.0.2/src/Elm/Kernel/Browser.js\n// in function _Browser_makeAnimator(model, draw)\n// only in nested function updateIfNeeded(), change this line:\n// : ( _Browser_requestAnimationFrame(updateIfNeeded), flipDraw(model), __4_EXTRA_REQUEST );\n// and add function flipDraw(modelIn) {window.flipping.read();draw(modelIn);window.afterDraw();}\n//import Flipping from 'flipping/lib/adapters/web';\n//compare to:\nimport Flipping from 'flipping/lib/adapters/css';\n\n(window as any).flipping = new Flipping({duration:300});\n\n(window as any).afterDraw = async () => {\n  \n  //for normal updates\n  (window as any).flipping.flip()\n  \n  //for delayed updates\n  //requestAnimationFrame(async () => await (window as any).flipping.flip());\n}\n\n"],"file":"assets/index-f03fcf72.js"}