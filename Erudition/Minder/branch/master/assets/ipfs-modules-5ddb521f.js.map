{"version":3,"mappings":"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","names":["base","ALPHABET","name","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","str","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","src","_brrp__multiformats_scope_baseX","equals","aa","bb","ii","coerce","o","fromString","toString","b","Encoder$3","prefix","baseEncode","bytes","Decoder$3","baseDecode","text","decoder","or","ComposedDecoder$3","decoders","input","left","right","ComposedDecoder","Codec$3","Encoder","Decoder","from","Codec","baseX","alphabet","basex","bitsPerChar","codes","end","out","bits","written","value","data","pad","mask","rfc4648","base58btc","base58flickr","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base64","base64pad","base64url","base64urlpad","encode_1","MSB","REST","MSBALL","INT","num","offset","oldOffset","read","MSB$1","REST$1","buf","res","shift","counter","l","N1","N2","N3","N4","N5","N6","N7","N8","N9","varint","_brrp_varint","encodeTo","int","target","encodingLength","create","code","digest","sizeOffset","varint.encodingLength","digestOffset","varint.encodeTo","Digest","multihash","varint.decode","a","equalBytes","Digest$1","format","link","version","toStringV0","baseCache","toStringV1","cache","cid","CID$1","CID","DAG_PB_CODE","SHA_256_CODE","Digest.create","other","self","unknown","Digest.equals","encodeCID","cidSymbol","Digest.decode","remainder","specs","prefixSize","multihashBytes","digestBytes","Digest.Digest","initialBytes","next","codec","multihashCode","digestSize","multihashSize","parseCIDtoBytes","codeOffset","hashOffset","identity","base2","base8","base10","base16","base16upper","base36","base36upper","alphabetBytesToChars","p","c","alphabetCharsToBytes","byts","char","byt","base256emoji","bases","identityBase","base58","Encoder$2","Decoder$2","ComposedDecoder$2","Codec$2","isV4","isIPv4","isV6","isIPv6","toBytes","ip","byte","sections","isv4","v4Buffer","uint8ArrayToString","argv","word","view","result","names","table","row","proto","createProtocol","resolvable","path","getProtocol","convertToString","bytes2ip","bytes2str","bytes2port","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh2bytes","onion2bytes","onion32bytes","mb2bytes","uint8ArrayFromString","anybaseDecoder","acc","d","ipString","ip.isIP","ip.toBytes","ipBuff","ip.toString","port","uint8ArrayConcat","hash","mh","mbstr","mb","address","addr","portBuf","addrBytes","portBytes","stringToStringTuples","tuples","parts","part","ParseError","cleanPath","stringTuplesToString","tup","protoFromTuple","stringTuplesToTuples","tuplesToStringTuples","tuplesToBytes","fromBytes","sizeForAddr","bytesToTuples","n","bytesToString","stringToBytes","err","validateBytes","__classPrivateFieldGet","this","receiver","state","kind","f","__classPrivateFieldSet","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","inspect","DNS_CODES","resolvers","symbol","isMultiaddr","DefaultMultiaddr","codec.fromBytes","codec.fromString","codec.bytesToString","family","transport","host","zone","tcp","udp","ip4","ip6","dns6","ip6zone","codec.sizeForAddr","codec.bytesToTuples","codec.tuplesToStringTuples","addrString","s","codec.tuplesToBytes","tuple","peerIdStr","uint8ArrayEquals","options","resolvableProto","resolver","errCode","protos","multiaddr","Encoder$1","Decoder$1","ComposedDecoder$1","Codec$1","node","Hasher","sha","sha256","log","debug","unwrap","blockstore","keyToMultihash","key","multihashStr","Key","keyToCid","mhd.decode","raw.code","process","backends","onProgress","keyFunction","unwrapped","blockCount","block","newKey","migration","$Reader","$protobuf","$Writer","$root","ipfs","pin","Set","ks","m","w","r","t","PIN_DS_KEY","DEFAULT_FANOUT","MAX_ITEMS","EMPTY_KEY","PinTypes","cidToKey","PinSet","readHeader","rootNode","rootData","hdrLength","vBytes","hdrSlice","header","seed","encodedKey","fnv1a","walkItems","pbh","idx","linkHash","dagPb.decode","loadSet","storeItems","items","storePins","pins","depth","pbHeader","headerBuf","fanoutLinks","nodes","item","uint8ArrayCompare","rootLinks","bins","bin","child","storeChild","binIdx","dagPb.encode","curr","storeSet","type","cids","pinsToDatastore","datastore","pinstore","pinRootBuf","pinRoot","pinCount","pinset.loadSet","dagPb.code","cbor.encode","pinsToDAG","recursivePins","directPins","cbor.decode","pinset.storeSet","fn","CONFIG_KEY","VERSION_KEY","findLevelJs","store","db","hasWithFallback","has","levelJs","resolve","reject","req","getWithFallback","get","notFoundError","wrapStore","originalGet","originalHas","wrapBackends","keysToBinary","withEach","keysToStrings","datastores","backend","migrated","progress","message","batch","operations","transaction","index","error","loop","op","it","id","handleNext","handleEnd","err2","MFS_ROOT_KEY","storeMfsRootInDatastore","root","storeMfsRootInRoot","$util","Protocols","Addresses","Address","$oneOfFields","CertifiedRecord","Peer","Metadata","Envelope","PeerRecord","AddressInfo","storePeerUnderSingleDatastoreKey","peers","keys","keyStr","peerId","metadataKey","addrs","peer","storePeerUnderMultipleDatastoreKeys","peerRecordEnvelope","certifiedRecord","envelope","record","emptyMigration","defaultMigrations","migration8","migration9","migration10","migration11","migration12","NonReversibleMigrationError","NotInitializedRepoError","RequiredParameterError","InvalidValueError","MissingRepoOptionsError","isRepoInitialized","versionCheck","configCheck","getVersion","setVersion","getLatestMigrationVersion","migrations","migrate","repoOptions","toVersion","ignoreLock","isDryRun","errors","currentVersion","repoVersion.getVersion","verifyAvailableMigrations","lock","progressCallback","percent","e","lastSuccessfullyMigratedVersion","repoVersion.setVersion","revert","reversedMigrationArray","lastSuccessfullyRevertedVersion","fromVersion","checkReversibility","migrationCounter","Errors","repoVersion","LockExistsError","NotFoundError","InvalidRepoVersionError","ERR_REPO_NOT_INITIALIZED","ERR_REPO_ALREADY_OPEN","ERR_REPO_ALREADY_CLOSED","versionKey","expected","Queue","PQueue","configKey","config","setQueue","configStore","encodedValue","_get","_maybeDoSet","signal","_set","_saveAll","specKey","spec","sortKeys","apiFile","apiAddr","createIdStore","query","extracted","extractContents","isIdentity","pairs","output","pushable","drain","filter","k","lockFile","LOCKS","dir","file","locked","MemoryLock","defaultOptions","defaultDatastore","readonly","enumerable","configurable","linksWithin","element","elementPath","links","treeWithin","tree","Block","createUnsafe","maybeValue","encoded","walkDag","loadCodec","childCid","CID_CACHE_MAX_SIZE","invalidPinTypeErr","errMsg","PinManager","cborg.encode","entry","cborg.decode","types","all","direct","recursive","indirect","first","findChild","parentCid","seen","QuickLRU","createPinnedBlockstore","ensureNotPinned","map","pinned","reason","ERR_NOT_FOUND","BLOCK_RM_CONCURRENCY","gc","gcLock","start","release","markedSet","createMarkedSet","blockKeys","deleteUnmarkedBlocks","mfsSource","rootCid","pinsSource","merge","blocksCount","removedBlocksCount","pipe","parallelBatch","b32","msg","noLimit","AUTO_MIGRATE_CONFIG_KEY","Repo","pinnedBlockstore","mortice","buildConfig","buildDatastoreSpec","CONSTANTS.repoVersion","ERRORS.ERR_REPO_ALREADY_OPEN","ERRORS.InvalidRepoVersionError","lockfile","ERRORS.ERR_REPO_NOT_INITIALIZED","ERRORS.ERR_REPO_ALREADY_CLOSED","storageMax","blocks","getSize","autoMigrateConfig","ERRORS.NotFoundError","migrator.revert","migrator.migrate","max","count","sum","createRepo","_config","mounting","repoName","memoryDs","MemoryDatastore","codeOrName","lookup","dagPB.code","dagPB","dagPB.name","dagCBOR.code","dagCBOR","dagCBOR.name","raw","raw.name","LevelDatastore","BlockstoreDatastoreAdapter","latestPeerTimeoutIds","isSafari","KEEP_ALIVE_INTERVAL","KEEP_TRYING_INTERVAL","BACKOFF_INIT","OPTIONS","keys.RSA","createAndConnect","dependencies","pkg","peersUrl","logging","listPeers","repo","IpfsRepo.create","tryConnecting","peerStr","fetchPeers","t.isString","storage","storageKey","maybePeers","list","keepAlive","backoff","status","timeoutId","reconnect","ping","latency","updatedStatus","report","nextBackoff","peerConnections","connection","newest","activeConnections","DEFAULT_CDN_URL","nodeWithPkg","ipfsNode.createAndConnect","pkgFromCDN","cdn_url","__vitePreload","_","implementation","getIpfs","entries","chunks","chunk","uint8arrays.concat","codecId","Codecs.getByIdentifier","instance","IpfsBase.implementation","Ipfs.nodeWithPkg","Ipfs.pkgFromCDN","Ipfs.DEFAULT_CDN_URL","IPFS.implementation","FissionEndpoints.PRODUCTION"],"sources":["../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/vendor/base-x.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bytes.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base58.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base32.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base64.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/vendor/varint.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/varint.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/hashes/digest.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/cid.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/identity.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base2.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base8.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base10.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base16.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base36.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/codecs/json.js","../../node_modules/.pnpm/multiformats@11.0.2/node_modules/multiformats/src/basics.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/vendor/base-x.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bytes.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base10.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base16.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base2.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base32.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base36.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base58.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base64.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/base8.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/bases/identity.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/codecs/json.js","../../node_modules/.pnpm/multiformats@12.1.1/node_modules/multiformats/src/basics.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../node_modules/.pnpm/@multiformats+multiaddr@11.6.1/node_modules/@multiformats/multiaddr/dist/src/index.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js","../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/vendor/varint.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/varint.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bytes.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/hashes/digest.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/vendor/base-x.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base58.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base32.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/cid.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/codecs/raw.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/hashes/hasher.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/identity.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base2.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base8.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base10.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base16.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base36.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base64.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/bases/base256emoji.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/hashes/sha2-browser.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/hashes/identity.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/codecs/json.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/basics.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-8/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-9/utils.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin-set.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-9/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/utils.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-10/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/proto-book.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/address-book.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/envelope.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer-record.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/migration-12/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/migrations/index.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/errors.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/repo/init.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/repo/version.js","../../node_modules/.pnpm/ipfs-repo-migrations@14.0.1/node_modules/ipfs-repo-migrations/src/index.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/constants.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/errors.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/utils/level.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/version.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/config.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/spec.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/api-addr.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/idstore.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/locks/memory.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/default-options.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/default-datastore.js","../../node_modules/.pnpm/multiformats@10.0.3/node_modules/multiformats/src/block.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/utils/blockstore.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/utils/walk-dag.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/pin-types.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/pin-manager.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/pinned-blockstore.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/gc.js","../../node_modules/.pnpm/ipfs-repo@16.0.0/node_modules/ipfs-repo/src/index.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/ipfs/node/repo.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/ipfs/node.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/ipfs/config.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/ipfs.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/ipfs-default-pkg.js","../../node_modules/.pnpm/@oddjs+odd@0.37.2/node_modules/@oddjs/odd/lib/components/depot/implementation/fission-ipfs-production.js"],"sourcesContent":["// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","// @ts-check\n\nimport { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc'],\n    [281, 0, 'webrtc-w3c'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing alogrithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returs null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport length from 'it-length'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as mhd from 'multiformats/hashes/digest'\n\nconst log = debug('ipfs:repo:migrator:migration-8')\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\nfunction unwrap (blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child)\n  }\n\n  return blockstore\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToMultihash (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n\n    // Extract multihash from CID\n    const multihash = CID.decode(buf).multihash.bytes\n\n    // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase()\n\n    return new Key(`/${multihashStr}`, false)\n  } catch (/** @type {any} */ err) {\n    return key\n  }\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n    const digest = mhd.decode(buf)\n\n    // CID to Key\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1)\n\n    return new Key(`/${multihash.toUpperCase()}`, false)\n  } catch {\n    return key\n  }\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\nasync function process (backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks\n  await blockstore.open()\n\n  const unwrapped = unwrap(blockstore)\n\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [(key) => {\n      const newKey = keyFunction(key)\n\n      return newKey.toString() !== key.toString()\n    }]\n  }))\n\n  try {\n    let counter = 0\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key)\n\n      // If the Key is base32 CIDv0 then there's nothing to do\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key))\n\n        await unwrapped.delete(block.key)\n        await unwrapped.put(newKey, block.value)\n\n        onProgress((counter / blockCount) * 100, `Migrated Block from ${block.key} to ${newKey}`)\n      }\n    }\n  } finally {\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid)\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ipfs = $root.ipfs = (() => {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    const ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        const pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nexport { $root as default };\n","\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { CID } from 'multiformats/cid'\n\nexport const PIN_DS_KEY = new Key('/local/pins')\nexport const DEFAULT_FANOUT = 256\nexport const MAX_ITEMS = 8192\nexport const EMPTY_KEY = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n\nexport const PinTypes = {\n  direct: 'direct',\n  recursive: 'recursive'\n}\n\n/**\n * @param {import('multiformats').CID} cid\n */\nexport function cidToKey (cid) {\n  return new Key(`/${base32.encode(cid.multihash.bytes).toUpperCase().substring(1)}`)\n}\n","\nimport { CID } from 'multiformats/cid'\nimport { ipfs } from './pin.js'\n// @ts-ignore\nimport fnv1a from 'fnv1a'\nimport varint from 'varint'\nimport * as dagPb from '@ipld/dag-pb'\nimport { DEFAULT_FANOUT, MAX_ITEMS, EMPTY_KEY } from './utils.js'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nconst PinSet = ipfs.pin.Set\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} Pin\n * @property {CID} key\n * @property {Uint8Array} [data]\n */\n\n/**\n * @param {PBNode} rootNode\n */\nfunction readHeader (rootNode) {\n  // rootNode.data should be a buffer of the format:\n  // < varint(headerLength) | header | itemData... >\n  const rootData = rootNode.Data\n\n  if (!rootData) {\n    throw new Error('No data present')\n  }\n\n  const hdrLength = varint.decode(rootData)\n  const vBytes = varint.decode.bytes\n\n  if (vBytes <= 0) {\n    throw new Error('Invalid Set header length')\n  }\n\n  if (vBytes + hdrLength > rootData.length) {\n    throw new Error('Impossibly large set header length')\n  }\n\n  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes)\n  const header = PinSet.toObject(PinSet.decode(hdrSlice), {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  if (header.version !== 1) {\n    throw new Error(`Unsupported Set version: ${header.version}`)\n  }\n\n  if (header.fanout > rootNode.Links.length) {\n    throw new Error('Impossibly large fanout')\n  }\n\n  return {\n    header: header,\n    data: rootData.slice(hdrLength + vBytes)\n  }\n}\n\n/**\n * @param {number} seed\n * @param {CID} key\n */\nfunction hash (seed, key) {\n  const buffer = new Uint8Array(4)\n  const dataView = new DataView(buffer.buffer)\n  dataView.setUint32(0, seed, true)\n  const encodedKey = uint8ArrayFromString(key.toString())\n  const data = uint8ArrayConcat([buffer, encodedKey], buffer.byteLength + encodedKey.byteLength)\n\n  return fnv1a(uint8ArrayToString(data))\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} node\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkItems (blockstore, node) {\n  const pbh = readHeader(node)\n  let idx = 0\n\n  for (const link of node.Links) {\n    if (idx < pbh.header.fanout) {\n      // the first pbh.header.fanout links are fanout bins\n      // if a fanout bin is not 'empty', dig into and walk its DAGLinks\n      const linkHash = link.Hash\n\n      if (!EMPTY_KEY.equals(linkHash)) {\n        // walk the links of this fanout bin\n        const buf = await blockstore.get(linkHash)\n        const node = dagPb.decode(buf)\n\n        yield * walkItems(blockstore, node)\n      }\n    } else {\n      // otherwise, the link is a pin\n      yield link.Hash\n    }\n\n    idx++\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} rootNode\n * @param {string} name\n */\nexport async function * loadSet (blockstore, rootNode, name) {\n  const link = rootNode.Links.find(l => l.Name === name)\n\n  if (!link) {\n    throw new Error('No link found with name ' + name)\n  }\n\n  const buf = await blockstore.get(link.Hash)\n  const node = dagPb.decode(buf)\n\n  yield * walkItems(blockstore, node)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Pin[]} items\n */\nfunction storeItems (blockstore, items) {\n  return storePins(items, 0)\n\n  /**\n   * @param {Pin[]} pins\n   * @param {number} depth\n   */\n  async function storePins (pins, depth) {\n    const pbHeader = PinSet.encode({\n      version: 1,\n      fanout: DEFAULT_FANOUT,\n      seed: depth\n    }).finish()\n\n    const header = varint.encode(pbHeader.length)\n    const headerBuf = uint8ArrayConcat([header, pbHeader])\n    const fanoutLinks = []\n\n    for (let i = 0; i < DEFAULT_FANOUT; i++) {\n      fanoutLinks.push({\n        Name: '',\n        Tsize: 1,\n        Hash: EMPTY_KEY\n      })\n    }\n\n    if (pins.length <= MAX_ITEMS) {\n      const nodes = pins\n        .map(item => {\n          return ({\n            link: {\n              Name: '',\n              Tsize: 1,\n              Hash: item.key\n            },\n            data: item.data || new Uint8Array()\n          })\n        })\n        // sorting makes any ordering of `pins` produce the same DAGNode\n        .sort((a, b) => {\n          return uint8ArrayCompare(a.link.Hash.bytes, b.link.Hash.bytes)\n        })\n\n      const rootLinks = fanoutLinks.concat(nodes.map(item => item.link))\n      const rootData = uint8ArrayConcat([headerBuf, ...nodes.map(item => item.data)])\n\n      return {\n        Data: rootData,\n        Links: rootLinks\n      }\n    } else {\n      // If the array of pins is > MAX_ITEMS, we:\n      //  - distribute the pins among `DEFAULT_FANOUT` bins\n      //    - create a DAGNode for each bin\n      //      - add each pin as a DAGLink to that bin\n      //  - create a root DAGNode\n      //    - add each bin as a DAGLink\n      //  - send that root DAGNode via callback\n      // (using go-ipfs' \"wasteful but simple\" approach for consistency)\n      // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57\n\n      /** @type {Pin[][]} */\n      const bins = pins.reduce((bins, pin) => {\n        const n = hash(depth, pin.key) % DEFAULT_FANOUT\n        // @ts-ignore\n        bins[n] = n in bins ? bins[n].concat([pin]) : [pin]\n        return bins\n      }, [])\n\n      let idx = 0\n      for (const bin of bins) {\n        const child = await storePins(bin, depth + 1)\n\n        await storeChild(child, idx)\n\n        idx++\n      }\n\n      return {\n        Data: headerBuf,\n        Links: fanoutLinks\n      }\n    }\n\n    /**\n     * @param {PBNode} child\n     * @param {number} binIdx\n     */\n    async function storeChild (child, binIdx) {\n      const buf = dagPb.encode(child)\n      const digest = await sha256.digest(buf)\n      const cid = CID.createV0(digest)\n\n      await blockstore.put(cid, buf)\n\n      const size = child.Links.reduce((acc, curr) => acc + (curr.Tsize || 0), 0) + buf.length\n\n      fanoutLinks[binIdx] = {\n        Name: '',\n        Tsize: size,\n        Hash: cid\n      }\n    }\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {string} type\n * @param {CID[]} cids\n */\nexport async function storeSet (blockstore, type, cids) {\n  const rootNode = await storeItems(blockstore, cids.map(cid => {\n    return {\n      key: cid\n    }\n  }))\n  const buf = dagPb.encode(rootNode)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n\n  const size = rootNode.Links.reduce((acc, curr) => acc + curr.Tsize, 0) + buf.length\n\n  return {\n    Name: type,\n    Tsize: size,\n    Hash: cid\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as cbor from 'cborg'\nimport * as pinset from './pin-set.js'\nimport { cidToKey, PIN_DS_KEY, PinTypes } from './utils.js'\nimport length from 'it-length'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport * as mhd from 'multiformats/hashes/digest'\nimport { base32 } from 'multiformats/bases/base32'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = CID.decode(mh)\n  const pinRootBuf = await blockstore.get(cid)\n  const pinRoot = dagPb.decode(pinRootBuf)\n  let counter = 0\n  const pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cid)\n  await datastore.delete(PIN_DS_KEY)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = []\n  const directPins = []\n  let counter = 0\n  const pinCount = await length(pinstore.queryKeys({}))\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = CID.create(\n      pin.version || 0,\n      pin.codec || dagPb.code,\n      mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop()))\n    )\n\n    if (pin.depth === 0) {\n      onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n\n      directPins.push(cid)\n    } else {\n      onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = {\n    Links: [\n      await pinset.storeSet(blockstore, PinTypes.direct, directPins),\n      await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins)\n    ]\n  }\n  const buf = dagPb.encode(pinRoot)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n  await datastore.put(PIN_DS_KEY, cid.bytes)\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  const blockstore = backends.blocks\n  const datastore = backends.datastore\n  const pinstore = backends.pins\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDatastore)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDAG)\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { notFoundError } from 'datastore-core/errors'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config')\nexport const VERSION_KEY = new Key('/version')\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nexport function findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nasync function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw notFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(notFoundError())\n    }\n  })\n}\n\n/**\n * @param {Datastore} store\n */\nfunction wrapStore (store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store)\n  const originalHas = store.has.bind(store)\n  /**\n   * @param {Key} key\n   */\n  store.get = (key) => getWithFallback(key, originalGet, originalHas, store)\n  /**\n   * @param {Key} key\n   */\n  store.has = (key) => hasWithFallback(key, originalHas, store)\n\n  return store\n}\n\n/**\n * @param {import('./types').Backends} backends\n */\nexport function wrapBackends (backends) {\n  return {\n    ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  }\n}\n","\nimport { findLevelJs } from '../../utils.js'\nimport { fromString } from 'uint8arrays/from-string'\nimport { toString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (/** @type {any} */ err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n","\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Protocols = $root.Protocols = (() => {\n\n    /**\n     * Properties of a Protocols.\n     * @exports IProtocols\n     * @interface IProtocols\n     * @property {Array.<string>|null} [protocols] Protocols protocols\n     */\n\n    /**\n     * Constructs a new Protocols.\n     * @exports Protocols\n     * @classdesc Represents a Protocols.\n     * @implements IProtocols\n     * @constructor\n     * @param {IProtocols=} [p] Properties to set\n     */\n    function Protocols(p) {\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Protocols protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Protocols\n     * @instance\n     */\n    Protocols.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n     * @function encode\n     * @memberof Protocols\n     * @static\n     * @param {IProtocols} m Protocols message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Protocols.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(10).string(m.protocols[i]);\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a Protocols message from the specified reader or buffer.\n     * @function decode\n     * @memberof Protocols\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Protocols} Protocols\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Protocols.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Protocols\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Protocols} Protocols\n     */\n    Protocols.fromObject = function fromObject(d) {\n        if (d instanceof $root.Protocols)\n            return d;\n        var m = new $root.Protocols();\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Protocols.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Protocols\n     * @static\n     * @param {Protocols} m Protocols\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Protocols.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.protocols = [];\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Protocols to JSON.\n     * @function toJSON\n     * @memberof Protocols\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Protocols.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Protocols;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Addresses = $root.Addresses = (() => {\n\n    /**\n     * Properties of an Addresses.\n     * @exports IAddresses\n     * @interface IAddresses\n     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n     */\n\n    /**\n     * Constructs a new Addresses.\n     * @exports Addresses\n     * @classdesc Represents an Addresses.\n     * @implements IAddresses\n     * @constructor\n     * @param {IAddresses=} [p] Properties to set\n     */\n    function Addresses(p) {\n        this.addrs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Addresses addrs.\n     * @member {Array.<Addresses.IAddress>} addrs\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.addrs = $util.emptyArray;\n\n    /**\n     * Addresses certifiedRecord.\n     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.certifiedRecord = null;\n\n    /**\n     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses\n     * @static\n     * @param {IAddresses} m Addresses message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Addresses.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addrs != null && m.addrs.length) {\n            for (var i = 0; i < m.addrs.length; ++i)\n                $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\"))\n            $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes an Addresses message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses} Addresses\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Addresses.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addrs && m.addrs.length))\n                    m.addrs = [];\n                m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses} Addresses\n     */\n    Addresses.fromObject = function fromObject(d) {\n        if (d instanceof $root.Addresses)\n            return d;\n        var m = new $root.Addresses();\n        if (d.addrs) {\n            if (!Array.isArray(d.addrs))\n                throw TypeError(\".Addresses.addrs: array expected\");\n            m.addrs = [];\n            for (var i = 0; i < d.addrs.length; ++i) {\n                if (typeof d.addrs[i] !== \"object\")\n                    throw TypeError(\".Addresses.addrs: object expected\");\n                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n            }\n        }\n        if (d.certifiedRecord != null) {\n            if (typeof d.certifiedRecord !== \"object\")\n                throw TypeError(\".Addresses.certifiedRecord: object expected\");\n            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses\n     * @static\n     * @param {Addresses} m Addresses\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Addresses.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addrs = [];\n        }\n        if (o.defaults) {\n            d.certifiedRecord = null;\n        }\n        if (m.addrs && m.addrs.length) {\n            d.addrs = [];\n            for (var j = 0; j < m.addrs.length; ++j) {\n                d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n            }\n        }\n        if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n            d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Addresses to JSON.\n     * @function toJSON\n     * @memberof Addresses\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Addresses.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Addresses.Address = (function() {\n\n        /**\n         * Properties of an Address.\n         * @memberof Addresses\n         * @interface IAddress\n         * @property {Uint8Array|null} [multiaddr] Address multiaddr\n         * @property {boolean|null} [isCertified] Address isCertified\n         */\n\n        /**\n         * Constructs a new Address.\n         * @memberof Addresses\n         * @classdesc Represents an Address.\n         * @implements IAddress\n         * @constructor\n         * @param {Addresses.IAddress=} [p] Properties to set\n         */\n        function Address(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Address multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Address isCertified.\n         * @member {boolean|null|undefined} isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.isCertified = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Address _isCertified.\n         * @member {\"isCertified\"|undefined} _isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Object.defineProperty(Address.prototype, \"_isCertified\", {\n            get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.IAddress} m Address message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Address.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n                w.uint32(16).bool(m.isCertified);\n            return w;\n        };\n\n        /**\n         * Decodes an Address message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.Address\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.Address} Address\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Address.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                case 2:\n                    m.isCertified = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an Address message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.Address} Address\n         */\n        Address.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.Address)\n                return d;\n            var m = new $root.Addresses.Address();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            if (d.isCertified != null) {\n                m.isCertified = Boolean(d.isCertified);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an Address message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.Address} m Address\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Address.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n                d.isCertified = m.isCertified;\n                if (o.oneofs)\n                    d._isCertified = \"isCertified\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Address to JSON.\n         * @function toJSON\n         * @memberof Addresses.Address\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Address.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Address;\n    })();\n\n    Addresses.CertifiedRecord = (function() {\n\n        /**\n         * Properties of a CertifiedRecord.\n         * @memberof Addresses\n         * @interface ICertifiedRecord\n         * @property {number|null} [seq] CertifiedRecord seq\n         * @property {Uint8Array|null} [raw] CertifiedRecord raw\n         */\n\n        /**\n         * Constructs a new CertifiedRecord.\n         * @memberof Addresses\n         * @classdesc Represents a CertifiedRecord.\n         * @implements ICertifiedRecord\n         * @constructor\n         * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n         */\n        function CertifiedRecord(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CertifiedRecord seq.\n         * @member {number} seq\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CertifiedRecord raw.\n         * @member {Uint8Array} raw\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.raw = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CertifiedRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n                w.uint32(8).uint64(m.seq);\n            if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\"))\n                w.uint32(18).bytes(m.raw);\n            return w;\n        };\n\n        /**\n         * Decodes a CertifiedRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CertifiedRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seq = r.uint64();\n                    break;\n                case 2:\n                    m.raw = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         */\n        CertifiedRecord.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.CertifiedRecord)\n                return d;\n            var m = new $root.Addresses.CertifiedRecord();\n            if (d.seq != null) {\n                if ($util.Long)\n                    (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n                else if (typeof d.seq === \"string\")\n                    m.seq = parseInt(d.seq, 10);\n                else if (typeof d.seq === \"number\")\n                    m.seq = d.seq;\n                else if (typeof d.seq === \"object\")\n                    m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n            }\n            if (d.raw != null) {\n                if (typeof d.raw === \"string\")\n                    $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);\n                else if (d.raw.length)\n                    m.raw = d.raw;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.CertifiedRecord} m CertifiedRecord\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CertifiedRecord.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if ($util.Long) {\n                    var n = new $util.Long(0, 0, true);\n                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                } else\n                    d.seq = o.longs === String ? \"0\" : 0;\n                if (o.bytes === String)\n                    d.raw = \"\";\n                else {\n                    d.raw = [];\n                    if (o.bytes !== Array)\n                        d.raw = $util.newBuffer(d.raw);\n                }\n            }\n            if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n                if (typeof m.seq === \"number\")\n                    d.seq = o.longs === String ? String(m.seq) : m.seq;\n                else\n                    d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n            }\n            if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n                d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this CertifiedRecord to JSON.\n         * @function toJSON\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CertifiedRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CertifiedRecord;\n    })();\n\n    return Addresses;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Peer = $root.Peer = (() => {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\nexport const Address = $root.Address = (() => {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Envelope = $root.Envelope = (() => {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const PeerRecord = $root.PeerRecord = (() => {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nexport { $root as default };\n","import $protobuf from 'protobufjs/minimal.js'\nimport { Key } from 'interface-datastore/key'\nimport { Protocols } from './pb/proto-book.js'\nimport { Addresses } from './pb/address-book.js'\nimport { Peer } from './pb/peer.js'\nimport { Envelope } from './pb/envelope.js'\nimport { PeerRecord } from './pb/peer-record.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n// @ts-expect-error Explicitly disable long.js support\n$protobuf.util.Long = undefined\n$protobuf.configure()\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderSingleDatastoreKey (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a single datastore key')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n    const [, prefix, type, peerId, metadataKey] = keyStr.split('/')\n\n    if (prefix !== 'peers') {\n      continue\n    }\n\n    if (!['protos', 'addrs', 'metadata', 'keys'].includes(type)) {\n      continue\n    }\n\n    if (!peerId) {\n      continue\n    }\n\n    peers[peerId] = peers[peerId] || {\n      addresses: [],\n      protocols: [],\n      metadata: []\n    }\n\n    if (type === 'protos') {\n      const protos = Protocols.decode(value)\n\n      peers[peerId].protocols = protos.protocols.sort()\n    } else if (type === 'addrs') {\n      const addrs = Addresses.decode(value)\n\n      peers[peerId].addresses = addrs.addrs.sort((a, b) => {\n        return multiaddr(a.multiaddr).toString().localeCompare(multiaddr(b.multiaddr).toString())\n      })\n\n      if (addrs.certifiedRecord && addrs.certifiedRecord.raw) {\n        peers[peerId].peerRecordEnvelope = addrs.certifiedRecord.raw\n      }\n    } else if (type === 'metadata') {\n      peers[peerId].metadata.push({ key: metadataKey, value })\n    } else if (type === 'keys') {\n      peers[peerId].pubKey = value\n    }\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const peerId of Object.keys(peers)) {\n    const peer = peers[peerId]\n    peer.metadata = peer.metadata.sort((/** @type {{ key: string }} */ a, /** @type {{ key: string }} */ b) => a.key.localeCompare(b.key))\n\n    const data = Peer.encode(peer).finish()\n\n    await backends.datastore.put(new Key(`/peers/${peerId}`), data)\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under a single datastore key')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderMultipleDatastoreKeys (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a multiple datastore keys')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n\n    const [, , peerId] = keyStr.split('/')\n\n    peers[peerId] = Peer.decode(value)\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const [peerId, peer] of Object.entries(peers)) {\n    if (peer.protocols && peer.protocols.length > 0) {\n      await backends.datastore.put(new Key(`/peers/protos/${peerId}`), Protocols.encode({\n        protocols: peer.protocols\n      }).finish())\n    }\n\n    if (peer.addresses && peer.addresses.length > 0) {\n      const peerRecordEnvelope = peer.peerRecordEnvelope\n      let certifiedRecord\n\n      if (peerRecordEnvelope) {\n        const envelope = Envelope.decode(peerRecordEnvelope)\n        const record = PeerRecord.decode(envelope.payload)\n\n        certifiedRecord = {\n          raw: peerRecordEnvelope,\n          seq: record.seq\n        }\n      }\n\n      await backends.datastore.put(new Key(`/peers/addrs/${peerId}`), Addresses.encode({\n        addrs: peer.addresses,\n        certifiedRecord\n      }).finish())\n    }\n\n    if (peer.metadata && peer.metadata.length > 0) {\n      for (const { key, value } of peer.metadata) {\n        await backends.datastore.put(new Key(`/peers/metadata/${peerId}/${key}`), value)\n      }\n    }\n\n    if (peer.pubKey) {\n      await backends.datastore.put(new Key(`/peers/keys/${peerId}`), peer.pubKey)\n    }\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under multiple datastore keys')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 12,\n  description: 'Store each peerstore peer under a single datastore key',\n  migrate: storePeerUnderSingleDatastoreKey,\n  revert: storePeerUnderMultipleDatastoreKeys\n}\n","import { migration as migration8 } from './migration-8/index.js'\nimport { migration as migration9 } from './migration-9/index.js'\nimport { migration as migration10 } from './migration-10/index.js'\nimport { migration as migration11 } from './migration-11/index.js'\nimport { migration as migration12 } from './migration-12/index.js'\n\n/**\n * @type {import('../types').Migration}\n */\nconst emptyMigration = {\n  description: 'Empty migration.',\n  // @ts-ignore\n  migrate: () => {},\n  // @ts-ignore\n  revert: () => {},\n  empty: true\n}\n\nexport default [\n  Object.assign({ version: 1 }, emptyMigration),\n  Object.assign({ version: 2 }, emptyMigration),\n  Object.assign({ version: 3 }, emptyMigration),\n  Object.assign({ version: 4 }, emptyMigration),\n  Object.assign({ version: 5 }, emptyMigration),\n  Object.assign({ version: 6 }, emptyMigration),\n  Object.assign({ version: 7 }, emptyMigration),\n  migration8,\n  migration9,\n  migration10,\n  migration11,\n  migration12\n]\n","\n/**\n * Exception raised when trying to revert migration that is not possible\n * to revert.\n */\nexport class NonReversibleMigrationError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NonReversibleMigrationError'\n    this.code = NonReversibleMigrationError.code\n    this.message = message\n  }\n}\nNonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION'\n\n/**\n * Exception raised when repo is not initialized.\n */\nexport class NotInitializedRepoError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotInitializedRepoError'\n    this.code = NotInitializedRepoError.code\n    this.message = message\n  }\n}\nNotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO'\n\n/**\n * Exception raised when required parameter is not provided.\n */\nexport class RequiredParameterError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'RequiredParameterError'\n    this.code = RequiredParameterError.code\n    this.message = message\n  }\n}\nRequiredParameterError.code = 'ERR_REQUIRED_PARAMETER'\n\n/**\n * Exception raised when value is not valid.\n */\nexport class InvalidValueError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidValueError'\n    this.code = InvalidValueError.code\n    this.message = message\n  }\n}\nInvalidValueError.code = 'ERR_INVALID_VALUE'\n\n/**\n * Exception raised when config is not passed.\n */\nexport class MissingRepoOptionsError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'MissingRepoOptionsError'\n    this.code = MissingRepoOptionsError.code\n    this.message = message\n  }\n}\nMissingRepoOptionsError.code = 'ERR_MISSING_REPO_OPTIONS'\n","\nimport debug from 'debug'\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js'\nimport { MissingRepoOptionsError } from '../errors.js'\n\nconst log = debug('ipfs:repo:migrator:repo:init')\n\n/**\n * @param {import('../types').Backends} backends\n */\nexport async function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (/** @type {any} */ e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n","\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n","/* eslint complexity: [\"error\", 28] */\n\nimport defaultMigrations from './migrations/index.js'\nimport * as repoVersion from './repo/version.js'\nimport * as Errors from './errors.js'\nimport { wrapBackends } from './utils.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:migrator')\n\n/**\n * @typedef {import('./types').Migration} Migration\n * @typedef {import('./types').MigrationOptions} MigrationOptions\n * @typedef {import('./types').ProgressCallback} ProgressCallback\n * @typedef {import('./types').MigrationProgressCallback} MigrationProgressCallback\n */\n\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {Migration[]} [migrations] - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n */\nexport function getLatestMigrationVersion (migrations) {\n  migrations = migrations || defaultMigrations\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0\n  }\n\n  return migrations[migrations.length - 1].version\n}\n\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo should be migrated.\n * @param {MigrationOptions} [options] - Options for migration\n */\nexport async function migrate (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.')\n    return\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`)\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion)\n\n  let lock\n\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  try {\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break\n      }\n\n      if (migration.version <= currentVersion) {\n        continue\n      }\n\n      log(`Migrating version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.migrate(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1\n\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyMigratedVersion, backends)\n\n        throw new Error(`During migration to version ${migration.version} exception was raised: ${e.stack || e.message || e}`)\n      }\n\n      log(`Migrating to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion || getLatestMigrationVersion(migrations), backends)\n    }\n\n    log('Repo successfully migrated', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!')\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo will be reverted.\n * @param {MigrationOptions} [options] - Options for the reversion\n */\nexport async function revert (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.')\n    return\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`)\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true)\n\n  let lock\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  log(`Reverting from version ${currentVersion} to ${toVersion}`)\n\n  try {\n    const reversedMigrationArray = migrations.slice().reverse()\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break\n      }\n\n      if (migration.version > currentVersion) {\n        continue\n      }\n\n      log(`Reverting migration version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.revert(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyRevertedVersion = migration.version\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyRevertedVersion, backends)\n\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      log(`Reverting to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion, backends)\n    }\n\n    log(`All migrations successfully reverted to version ${toVersion}!`)\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {Migration[]} migrations\n * @param {number} fromVersion\n * @param {number} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n */\nfunction verifyAvailableMigrations (migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`)\n      }\n\n      migrationCounter++\n    }\n  }\n\n  if (migrationCounter !== (toVersion - fromVersion)) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`)\n  }\n}\n\nexport const getCurrentRepoVersion = repoVersion.getVersion\nexport const errors = Errors\nexport const migrations = defaultMigrations\n","\nexport const repoVersion = 12\n","/**\n * Error raised when there is lock already in place when repo is being opened.\n */\nexport class LockExistsError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'LockExistsError'\n    this.code = LockExistsError.code\n  }\n}\nLockExistsError.code = 'ERR_LOCK_EXISTS'\n\n/**\n * Error raised when requested item is not found.\n */\nexport class NotFoundError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotFoundError'\n    this.code = NotFoundError.code\n  }\n}\nNotFoundError.code = 'ERR_NOT_FOUND'\n\n/**\n * Error raised when version of the stored repo is not compatible with version of this package.\n */\nexport class InvalidRepoVersionError extends Error {\n  /**\n   * @param {string} [message]\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidRepoVersionError'\n    this.code = InvalidRepoVersionError.code\n  }\n}\nInvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION'\n\nexport const ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED'\nexport const ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN'\nexport const ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED'\n","\nimport { NotFoundError } from '../errors.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Key} Key\n */\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nexport async function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw new NotFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(new NotFoundError())\n    }\n  })\n}\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nfunction findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport PQueue from 'p-queue'\nimport _get from 'just-safe-get'\nimport _set from 'just-safe-set'\nimport errCode from 'err-code'\nimport { NotFoundError } from './errors.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\n// @ts-ignore types are broken in p-queue@6.x.x - also, if we imported via esm\n// we can use the default, if via cjs we need to get the default via prop access\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\nconst configKey = new Key('config')\n\n/**\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {Datastore} store\n */\nexport function config (store) {\n  const setQueue = new Queue({ concurrency: 1 })\n\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     * @returns {Promise<Config>}\n     */\n    async getAll (options = {}) { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const encodedValue = await getWithFallback(configKey, store.get.bind(store), store.has.bind(store), store)\n\n      return JSON.parse(uint8ArrayToString(encodedValue))\n    },\n\n    /**\n     * Get the value for the passed configuration key from the repo.\n     *\n     * @param {string} key - the config key to get\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config read\n     */\n    async get (key, options = {}) {\n      if (key == null) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      const config = await this.getAll(options)\n      const value = _get(config, key)\n\n      if (value === undefined) {\n        throw new NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      return value\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {string} key - the config key to be written\n     * @param {any} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    set (key, value, options = {}) {\n      // @ts-ignore ts thinks key will only be a string, but it may not be\n      if (typeof key !== 'string' && !(key instanceof String)) {\n        throw errCode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY')\n      }\n\n      if (value === undefined || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: key,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Config} [value] - the config value to be written\n     * @param {object} [options] - options\n     * @param {AbortSignal} [options.signal] - abort this config write\n     */\n    replace (value, options = {}) {\n      if (!value || (value instanceof Uint8Array)) {\n        throw errCode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: undefined,\n        value: value\n      }, options.signal))\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migration to v10 or above\n      return hasWithFallback(configKey, store.has.bind(store), store)\n    }\n  }\n\n  return configStore\n\n  /**\n   * @param {{ key: any; value: any; }} m\n   * @param {AbortSignal | undefined} signal\n   */\n  async function _maybeDoSet (m, signal) {\n    if (signal && signal.aborted) {\n      return\n    }\n\n    const key = m.key\n    const value = m.value\n    if (key) {\n      const config = await configStore.getAll()\n      if (typeof config === 'object' && config !== null) {\n        _set(config, key, value)\n      }\n      return _saveAll(config)\n    }\n    return _saveAll(value)\n  }\n\n  /**\n   * @param {unknown} config\n   */\n  function _saveAll (config) {\n    const buf = uint8ArrayFromString(JSON.stringify(config, null, 2))\n    return store.put(configKey, buf)\n  }\n}\n","\nimport { Key } from 'interface-datastore'\nimport sortKeys from 'sort-keys'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst specKey = new Key('datastore_spec')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function spec (store) {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists () {\n      return store.has(specKey)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get () {\n      const buf = await store.get(specKey)\n      return JSON.parse(uint8ArrayToString(buf))\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set (spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, { deep: true }))))\n    }\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst apiFile = new Key('api')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function apiAddr (store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<string>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     * TODO: fix find the proper type or remove this API\n     *\n     * @param {string} value - the api address to be written\n     */\n    set (value) {\n      return store.put(apiFile, uint8ArrayFromString(value.toString()))\n    },\n    /**\n     * Deletes api file\n     */\n    delete () {\n      return store.delete(apiFile)\n    }\n  }\n}\n","\nimport filter from 'it-filter'\nimport { pushable } from 'it-pushable'\nimport drain from 'it-drain'\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport { identity } from 'multiformats/hashes/identity'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createIdStore (store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      const extracted = extractContents(cid)\n      if (extracted.isIdentity) {\n        return Promise.resolve(extracted.digest)\n      }\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      for await (const cid of cids) {\n        yield this.get(cid, options)\n      }\n    },\n\n    async put (cid, buf, options) {\n      const { isIdentity } = extractContents(cid)\n\n      if (isIdentity) {\n        return\n      }\n\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      // in order to return all blocks. we're going to assemble a seperate iterable\n      // return rather than return the resolves of store.putMany using the same\n      // process used by blockstore.putMany\n      const output = pushable({\n        objectMode: true\n      })\n\n      // process.nextTick runs on the microtask queue, setImmediate runs on the next\n      // event loop iteration so is slower. Use process.nextTick if it is available.\n      const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : (globalThis.setImmediate || globalThis.setTimeout)\n\n      runner(async () => {\n        try {\n          await drain(store.putMany(async function * () {\n            for await (const { key, value } of pairs) {\n              if (!extractContents(key).isIdentity) {\n                yield { key, value }\n              }\n\n              // if non identity blocks successfully write, blocks are included in output\n              output.push({ key, value })\n            }\n          }()))\n\n          output.end()\n        } catch (/** @type {any} */ err) {\n          output.end(err)\n        }\n      })\n\n      yield * output\n    },\n\n    has (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve(true)\n      }\n      return store.has(cid, options)\n    },\n\n    delete (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve()\n      }\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(filter(cids, (cid) => !extractContents(cid).isIdentity), options)\n    },\n\n    batch () {\n      const batch = store.batch()\n\n      return {\n        put (cid, buf) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.put(cid, buf)\n        },\n        delete (cid) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.delete(cid)\n        },\n        commit: (options) => {\n          return batch.commit(options)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {CID} k\n * @returns {{ isIdentity: false } | { isIdentity: true, digest: Uint8Array}}\n */\nfunction extractContents (k) {\n  const cid = CID.asCID(k)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  if (cid.multihash.code !== identity.code) {\n    return {\n      isIdentity: false\n    }\n  }\n\n  return {\n    isIdentity: true,\n    digest: cid.multihash.digest\n  }\n}\n","\nimport { LockExistsError } from '../errors.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:lock:memory')\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nasync function lock (dir) {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nasync function locked (dir) {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n\nexport const MemoryLock = {\n  lock,\n  locked\n}\n","import { MemoryLock } from './locks/memory.js'\n\n/**\n * @type {Partial<import('./types').Options>}\n */\nexport default {\n  autoMigrate: true,\n  onMigrationProgress: () => {},\n  repoOwner: true,\n  repoLock: MemoryLock\n}\n","\n// Default configuration for the datastore spec in node.js\nexport default {\n  Spec: {\n    type: 'mount',\n    mounts: [\n      {\n        mountpoint: '/blocks',\n        type: 'measure',\n        prefix: 'flatfs.datastore',\n        child: {\n          type: 'flatfs',\n          path: 'blocks',\n          sync: true,\n          shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'\n        }\n      },\n      {\n        mountpoint: '/',\n        type: 'measure',\n        prefix: 'leveldb.datastore',\n        child: {\n          type: 'levelds',\n          path: 'datastore',\n          compression: 'none'\n        }\n      }\n    ]\n  }\n}\n","import { bytes as binary, CID } from './index.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\nfunction readonly ({ enumerable = true, configurable = false } = {}) {\n  return { enumerable, configurable, writable: false }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<[string, CID]>}\n */\nfunction * linksWithin (path, value) {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index]\n        const cid = CID.asCID(element)\n        if (cid) {\n          yield [elementPath.join('/'), cid]\n        } else if (typeof element === 'object') {\n          yield * links(element, elementPath)\n        }\n      }\n    } else {\n      const cid = CID.asCID(value)\n      if (cid) {\n        yield [path.join('/'), cid]\n      } else {\n        yield * links(value, path)\n      }\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nfunction * links (source, base) {\n  if (source == null || source instanceof Uint8Array) {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield * linksWithin(path, value)\n  }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<string>}\n */\nfunction * treeWithin (path, value) {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index]\n      yield elementPath.join('/')\n      if (typeof element === 'object' && !CID.asCID(element)) {\n        yield * tree(element, elementPath)\n      }\n    }\n  } else {\n    yield * tree(value, path)\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<string>}\n */\nfunction * tree (source, base) {\n  if (source == null || typeof source !== 'object') {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield path.join('/')\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      yield * treeWithin(path, value)\n    }\n  }\n}\n\n/**\n *\n * @template T\n * @param {T} source\n * @param {string[]} path\n * @returns {API.BlockCursorView<unknown>}\n */\nfunction get (source, path) {\n  let node = /** @type {Record<string, any>} */(source)\n  for (const [index, key] of path.entries()) {\n    node = node[key]\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`)\n    }\n    const cid = CID.asCID(node)\n    if (cid) {\n      return { value: cid, remaining: path.slice(index + 1).join('/') }\n    }\n  }\n  return { value: node }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} C - multicodec code corresponding to codec used to encode the block\n * @template {number} A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @implements {API.BlockView<T, C, A, V>}\n */\nclass Block {\n  /**\n   * @param {object} options\n   * @param {CID<T, C, A, V>} options.cid\n   * @param {API.ByteView<T>} options.bytes\n   * @param {T} options.value\n   */\n  constructor ({ cid, bytes, value }) {\n    if (!cid || !bytes || typeof value === 'undefined') { throw new Error('Missing required argument') }\n\n    this.cid = cid\n    this.bytes = bytes\n    this.value = value\n    this.asBlock = this\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    })\n  }\n\n  links () {\n    return links(this.value, [])\n  }\n\n  tree () {\n    return tree(this.value, [])\n  }\n\n  /**\n   *\n   * @param {string} [path]\n   * @returns {API.BlockCursorView<unknown>}\n   */\n  get (path = '/') {\n    return get(this.value, path.split('/').filter(Boolean))\n  }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {T} options.value\n * @param {API.BlockEncoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function encode ({ value, codec, hasher }) {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const bytes = codec.encode(value)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(\n    1,\n    codec.code,\n    hash\n  )\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function decode ({ bytes, codec, hasher }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash)\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @typedef {object} RequiredCreateOptions\n * @property {CID} options.cid\n */\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {{ cid: API.Link<T, Code, Alg, V>, value:T, codec?: API.BlockDecoder<Code, T>, bytes: API.ByteView<T> }|{cid:API.Link<T, Code, Alg, V>, bytes:API.ByteView<T>, value?:void, codec:API.BlockDecoder<Code, T>}} options\n * @returns {API.BlockView<T, Code, Alg, V>}\n */\nfunction createUnsafe ({ bytes, cid, value: maybeValue, codec }) {\n  const value = maybeValue !== undefined\n    ? maybeValue\n    : (codec && codec.decode(bytes))\n\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"')\n\n  return new Block({\n    // eslint-disable-next-line object-shorthand\n    cid: /** @type {CID<T, Code, Alg, V>} */ (cid),\n    bytes,\n    value\n  })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {object} options\n * @param {API.Link<T, Code, Alg, V>} options.cid\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg, V>>}\n */\nasync function create ({ bytes, cid, hasher, codec }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!hasher) throw new Error('Missing required argument \"hasher\"')\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes')\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  })\n}\n\nexport { encode, decode, create, createUnsafe, Block }\n","import { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats'\nimport * as raw from 'multiformats/codecs/raw'\nimport errCode from 'err-code'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as Digest from 'multiformats/hashes/digest'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\nexport function cidToKey (c) {\n  const cid = CID.asCID(c)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes)\n\n  return new Key('/' + encoded.slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\nexport function keyToCid (key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key))\n}\n\n/**\n * @param {Key | string} key\n */\nexport function keyToMultihash (key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`))\n}\n","import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n","\nexport const PinTypes = {\n  /** @type {'direct'} */\n  direct: 'direct',\n  /** @type {'recursive'} */\n  recursive: 'recursive',\n  /** @type {'indirect'} */\n  indirect: 'indirect',\n  /** @type {'all'} */\n  all: 'all'\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport debug from 'debug'\nimport first from 'it-first'\nimport { createUnsafe } from 'multiformats/block'\nimport * as cborg from 'cborg'\nimport * as dagPb from '@ipld/dag-pb'\nimport {\n  cidToKey,\n  keyToMultihash\n} from './utils/blockstore.js'\nimport { walkDag } from './utils/walk-dag.js'\nimport { PinTypes } from './pin-types.js'\nimport QuickLRU from 'quick-lru'\n\n/**\n * @typedef {import('./types').PinType} PinType\n * @typedef {import('./types').PinQueryType} PinQueryType\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').PinOptions} PinOptions\n * @typedef {import('./types').AbortOptions} AbortOptions\n * @typedef {import('./types').Pins} Pins\n */\n\n/**\n * @typedef {object} PinInternal\n * @property {number} depth\n * @property {import('multiformats/cid').Version} [version]\n * @property {number} [codec]\n * @property {Record<string, any>} [metadata]\n */\n\n/**\n * @typedef {object} FetchCompleteDagOptions\n * @property {AbortSignal} [signal]\n * @property {number} [cidCacheMaxSize]\n */\n\nconst CID_CACHE_MAX_SIZE = 2048\n\n/**\n * @param {string} type\n */\nfunction invalidPinTypeErr (type) {\n  const errMsg = `Invalid type '${type}', must be one of {direct, indirect, recursive, all}`\n  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE')\n}\n\n/**\n * @implements {Pins}\n */\nexport class PinManager {\n  /**\n   * @param {object} config\n   * @param {import('interface-datastore').Datastore} config.pinstore\n   * @param {import('interface-blockstore').Blockstore} config.blockstore\n   * @param {import('./types').loadCodec} config.loadCodec\n   */\n  constructor ({ pinstore, blockstore, loadCodec }) {\n    this.pinstore = pinstore\n    this.blockstore = blockstore\n    this.loadCodec = loadCodec\n    this.log = debug('ipfs:repo:pin')\n    this.directPins = new Set()\n    this.recursivePins = new Set()\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & AbortOptions} [options]\n   */\n  async pinDirectly (cid, options = {}) {\n    await this.blockstore.get(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    return this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  unpin (cid, options) {\n    return this.pinstore.delete(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinOptions & FetchCompleteDagOptions & AbortOptions} [options]\n   */\n  async pinRecursively (cid, options = {}) {\n    await this.fetchCompleteDag(cid, options)\n\n    /** @type {PinInternal} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    if (options.metadata) {\n      pin.metadata = options.metadata\n    }\n\n    await this.pinstore.put(cidToKey(cid), cborg.encode(pin))\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * directKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === 0\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * recursiveKeys (options) {\n    for await (const entry of this.pinstore.query({\n      filters: [(entry) => {\n        const pin = cborg.decode(entry.value)\n\n        return pin.depth === Infinity\n      }]\n    })) {\n      const pin = cborg.decode(entry.value)\n      const version = pin.version || 0\n      const codec = pin.codec != null ? pin.codec : dagPb.code\n      const multihash = keyToMultihash(entry.key)\n\n      yield {\n        cid: CID.create(version, codec, multihash),\n        metadata: pin.metadata\n      }\n    }\n  }\n\n  /**\n   * @param {AbortOptions} [options]\n   */\n  async * indirectKeys (options) {\n    for await (const { cid } of this.recursiveKeys()) {\n      for await (const childCid of walkDag(cid, this.blockstore, this.loadCodec, options)) {\n        // recursive pins override indirect pins\n        const types = [\n          PinTypes.recursive\n        ]\n\n        const result = await this.isPinnedWithType(childCid, types)\n\n        if (result.pinned) {\n          continue\n        }\n\n        yield childCid\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {PinQueryType|PinQueryType[]} types\n   * @param {AbortOptions} [options]\n   */\n  async isPinnedWithType (cid, types, options) {\n    if (!Array.isArray(types)) {\n      types = [types]\n    }\n\n    const all = types.includes(PinTypes.all)\n    const direct = types.includes(PinTypes.direct)\n    const recursive = types.includes(PinTypes.recursive)\n    const indirect = types.includes(PinTypes.indirect)\n\n    if (recursive || direct || all) {\n      const result = await first(this.pinstore.query({\n        prefix: cidToKey(cid).toString(),\n        filters: [entry => {\n          if (all) {\n            return true\n          }\n\n          const pin = cborg.decode(entry.value)\n\n          return types.includes(pin.depth === 0 ? PinTypes.direct : PinTypes.recursive)\n        }],\n        limit: 1\n      }))\n\n      if (result) {\n        const pin = cborg.decode(result.value)\n\n        return {\n          cid,\n          pinned: true,\n          reason: pin.depth === 0 ? PinTypes.direct : PinTypes.recursive,\n          metadata: pin.metadata\n        }\n      }\n    }\n\n    const self = this\n\n    /**\n     * @param {CID} key\n     * @param {AsyncIterable<{ cid: CID, metadata: any }>} source\n     */\n    async function * findChild (key, source) {\n      for await (const { cid: parentCid } of source) {\n        for await (const childCid of walkDag(parentCid, self.blockstore, self.loadCodec)) {\n          if (childCid.equals(key)) {\n            yield parentCid\n            return\n          }\n        }\n      }\n    }\n\n    if (all || indirect) {\n      // indirect (default)\n      // check each recursive key to see if multihash is under it\n\n      const parentCid = await first(findChild(cid, this.recursiveKeys()))\n\n      if (parentCid) {\n        return {\n          cid,\n          pinned: true,\n          reason: PinTypes.indirect,\n          parent: parentCid\n        }\n      }\n    }\n\n    return {\n      cid,\n      pinned: false\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {FetchCompleteDagOptions} [options]\n   */\n  async fetchCompleteDag (cid, options = {}) {\n    const seen = new QuickLRU({ maxSize: options.cidCacheMaxSize ?? CID_CACHE_MAX_SIZE })\n\n    /**\n     * @param {CID} cid\n     * @param {AbortOptions} options\n     */\n    const walkDag = async (cid, options) => {\n      if (seen.has(cid.toString())) {\n        return\n      }\n\n      seen.set(cid.toString(), true)\n\n      const bytes = await this.blockstore.get(cid, options)\n      const codec = await this.loadCodec(cid.code)\n      const block = createUnsafe({ bytes, cid, codec })\n\n      await Promise.all(\n        [...block.links()].map(([, childCid]) => walkDag(childCid, options))\n      )\n    }\n\n    await walkDag(cid, options)\n  }\n\n  /**\n   * Throws an error if the pin type is invalid\n   *\n   * @param {any} type\n   * @returns {type is PinType}\n   */\n  static checkPinType (type) {\n    if (typeof type !== 'string' || !Object.keys(PinTypes).includes(type)) {\n      throw invalidPinTypeErr(type)\n    }\n    return true\n  }\n}\n","\nimport map from 'it-map'\nimport errCode from 'err-code'\nimport { PinTypes } from './pin-types.js'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pin-manager').Pins} Pins\n */\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createPinnedBlockstore (pins, store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      yield * store.getMany(cids, options)\n    },\n\n    async put (cid, buf, options) {\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      yield * store.putMany(pairs, options)\n    },\n\n    has (cid, options) {\n      return store.has(cid, options)\n    },\n\n    async delete (cid, options) {\n      await ensureNotPinned(cid, pins)\n\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins)\n\n        return cid\n      }), options)\n    },\n\n    batch () {\n      return store.batch()\n    }\n  }\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned (cid, pins) {\n  const { pinned, reason } = await pins.isPinnedWithType(cid, PinTypes.all)\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED')\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport debug from 'debug'\nimport { notFoundError } from 'datastore-core/errors'\nimport parallelBatch from 'it-parallel-batch'\nimport { pipe } from 'it-pipe'\nimport merge from 'it-merge'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { walkDag } from './utils/walk-dag.js'\n\nconst log = debug('ipfs:repo:gc')\nconst ERR_NOT_FOUND = notFoundError().code\n\n// Limit on the number of parallel block remove operations\nconst BLOCK_RM_CONCURRENCY = 256\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').loadCodec} loadCodec\n * @typedef {import('./types').GCErrorResult} GCErrorResult\n * @typedef {import('./types').GCSuccessResult} GCSuccessResult\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {import('./types').GCLock} config.gcLock\n * @param {import('./types').Pins} config.pins\n * @param {Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nexport function gc ({ gcLock, pins, blockstore, root, loadCodec }) {\n  /**\n   * @returns {AsyncGenerator<GCErrorResult | GCSuccessResult, void, unknown>}\n   */\n  async function * gc () {\n    const start = Date.now()\n    log('Creating set of marked blocks')\n\n    const release = await gcLock.writeLock()\n\n    try {\n      // Mark all blocks that are being used\n      const markedSet = await createMarkedSet({ pins, blockstore, root, loadCodec })\n      // Get all blocks keys from the blockstore\n      const blockKeys = blockstore.queryKeys({})\n\n      // Delete blocks that are not being used\n      // @ts-ignore ts cannot tell that we filter out null results\n      yield * deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys)\n\n      log(`Complete (${Date.now() - start}ms)`)\n    } finally {\n      release()\n    }\n  }\n\n  return gc\n}\n\n/**\n * Get Set of CIDs of blocks to keep\n *\n * @param {object} config\n * @param {import('./pin-manager').Pins} config.pins\n * @param {import('interface-blockstore').Blockstore} config.blockstore\n * @param {import('interface-datastore').Datastore} config.root\n * @param {loadCodec} config.loadCodec\n */\nasync function createMarkedSet ({ pins, blockstore, loadCodec, root }) {\n  const mfsSource = (async function * () {\n    let mh\n    try {\n      mh = await root.get(MFS_ROOT_KEY)\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        log('No blocks in MFS')\n        return\n      }\n\n      throw err\n    }\n\n    const rootCid = CID.decode(mh)\n    yield rootCid\n    yield * walkDag(rootCid, blockstore, loadCodec)\n  })()\n\n  const pinsSource = merge(\n    map(pins.recursiveKeys(), ({ cid }) => cid),\n    pins.indirectKeys(),\n    map(pins.directKeys(), ({ cid }) => cid),\n    mfsSource\n  )\n\n  const output = new Set()\n\n  for await (const cid of merge(pinsSource, mfsSource)) {\n    output.add(base32.encode(cid.multihash.bytes))\n  }\n\n  return output\n}\n\n/**\n * Delete all blocks that are not marked as in use\n *\n * @param {object} arg\n * @param {Blockstore} arg.blockstore\n * @param {Set<string>} markedSet\n * @param {AsyncIterable<CID>} blockKeys\n */\nasync function * deleteUnmarkedBlocks ({ blockstore }, markedSet, blockKeys) {\n  // Iterate through all blocks and find those that are not in the marked set\n  // blockKeys yields { key: Key() }\n  let blocksCount = 0\n  let removedBlocksCount = 0\n\n  /**\n   * @param {CID} cid\n   */\n  const removeBlock = async (cid) => {\n    return async function remove () {\n      blocksCount++\n\n      try {\n        const b32 = base32.encode(cid.multihash.bytes)\n\n        if (markedSet.has(b32)) {\n          return null\n        }\n\n        try {\n          await blockstore.delete(cid)\n          removedBlocksCount++\n        } catch (/** @type {any} */ err) {\n          return {\n            err: new Error(`Could not delete block with CID ${cid}: ${err.message}`)\n          }\n        }\n\n        return { cid }\n      } catch (/** @type {any} */ err) {\n        const msg = `Could delete block with CID ${cid}`\n        log(msg, err)\n        return { err: new Error(msg + `: ${err.message}`) }\n      }\n    }\n  }\n\n  yield * pipe(\n    parallelBatch(map(blockKeys, removeBlock), BLOCK_RM_CONCURRENCY),\n    // filter nulls (blocks that were retained)\n    source => filter(source, Boolean)\n  )\n\n  log(`Marked set has ${markedSet.size} unique blocks. Blockstore has ${blocksCount} blocks. ` +\n  `Deleted ${removedBlocksCount} blocks.`)\n}\n","import _get from 'just-safe-get'\nimport debug from 'debug'\nimport errCode from 'err-code'\nimport * as migrator from 'ipfs-repo-migrations'\nimport bytes from 'bytes'\nimport merge from 'merge-options'\nimport * as CONSTANTS from './constants.js'\nimport { version } from './version.js'\nimport { config } from './config.js'\nimport { spec } from './spec.js'\nimport { apiAddr } from './api-addr.js'\nimport { createIdStore } from './idstore.js'\nimport defaultOptions from './default-options.js'\nimport defaultDatastore from './default-datastore.js'\nimport * as ERRORS from './errors.js'\nimport { PinManager } from './pin-manager.js'\nimport { createPinnedBlockstore } from './pinned-blockstore.js'\n// @ts-ignore - no types\nimport mortice from 'mortice'\nimport { gc } from './gc.js'\n\nconst log = debug('ipfs:repo')\n\nconst noLimit = Number.MAX_SAFE_INTEGER\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate'\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').RepoLock} RepoLock\n * @typedef {import('./types').LockCloser} LockCloser\n * @typedef {import('./types').GCLock} GCLock\n * @typedef {import('./types').Stat} Stat\n * @typedef {import('./types').Config} Config\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').Backends} Backends\n * @typedef {import('./types').IPFSRepo} IPFSRepo\n */\n\n/**\n * IPFSRepo implements all required functionality to read and write to an ipfs repo.\n */\nclass Repo {\n  /**\n   * @param {string} path - Where this repo is stored\n   * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n   * @param {Backends} backends - backends used by this repo\n   * @param {Partial<Options>} [options] - Configuration\n   */\n  constructor (path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path')\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader')\n    }\n\n    /** @type {Options} */\n    this.options = merge(defaultOptions, options)\n    this.closed = true\n    this.path = path\n    this.root = backends.root\n    this.datastore = backends.datastore\n    this.keys = backends.keys\n\n    const blockstore = backends.blocks\n    const pinstore = backends.pins\n\n    this.pins = new PinManager({ pinstore, blockstore, loadCodec })\n\n    // this blockstore will not delete blocks that have been pinned\n    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore)\n\n    // this blockstore will extract blocks from multihashes with the identity codec\n    this.blocks = createIdStore(pinnedBlockstore)\n\n    this.version = version(this.root)\n    this.config = config(this.root)\n    this.spec = spec(this.root)\n    this.apiAddr = apiAddr(this.root)\n\n    /** @type {GCLock} */\n    this.gcLock = mortice({\n      name: path,\n      singleProcess: this.options.repoOwner !== false\n    })\n\n    this.gc = gc({ gcLock: this.gcLock, pins: this.pins, blockstore: this.blocks, root: this.root, loadCodec })\n  }\n\n  /**\n   * Initialize a new repo.\n   *\n   * @param {import('./types').Config} config - config to write into `config`.\n   * @returns {Promise<void>}\n   */\n  async init (config) {\n    log('initializing at: %s', this.path)\n    await this._openRoot()\n    await this.config.replace(buildConfig(config))\n    await this.spec.set(buildDatastoreSpec(config))\n    await this.version.set(CONSTANTS.repoVersion)\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @returns {Promise<boolean>}\n   */\n  async isInitialized () {\n    if (!this.closed) {\n      // repo is open, must be initialized\n      return true\n    }\n\n    try {\n      // have to open the root datastore in the browser before\n      // we can check whether it's been initialized\n      await this._openRoot()\n      await this._checkInitialized()\n      await this.root.close()\n\n      return true\n    } catch (/** @type {any} */ err) {\n      // FIXME: do not use exceptions for flow control\n      return false\n    }\n  }\n\n  /**\n   * Open the repo. If the repo is already open an error will be thrown.\n   * If the repo is not initialized it will throw an error.\n   *\n   * @returns {Promise<void>}\n   */\n  async open () {\n    if (!this.closed) {\n      throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)\n    }\n    log('opening at: %s', this.path)\n\n    // check if the repo is already initialized\n    try {\n      await this._openRoot()\n      await this._checkInitialized()\n\n      this._lockfile = await this._openLock()\n      log('acquired repo.lock')\n\n      const isCompatible = await this.version.check(CONSTANTS.repoVersion)\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(CONSTANTS.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          })\n        } else {\n          throw new ERRORS.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.')\n        }\n      }\n\n      log('creating datastore')\n      await this.datastore.open()\n\n      log('creating blocks')\n      await this.blocks.open()\n\n      log('creating keystore')\n      await this.keys.open()\n\n      log('creating pins')\n      await this.pins.pinstore.open()\n\n      this.closed = false\n      log('all opened')\n    } catch (/** @type {any} */ err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock()\n          this._lockfile = null\n        } catch (/** @type {any} */ err2) {\n          log('error removing lock', err2)\n        }\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * Opens the root backend, catching and ignoring an 'Already open' error\n   *\n   * @private\n   */\n  async _openRoot () {\n    try {\n      await this.root.open()\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Already open') {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Creates a lock on the repo if a locker is specified. The lockfile object will\n   * be returned in the callback if one has been created.\n   *\n   * @private\n   * @returns {Promise<LockCloser>}\n   */\n  async _openLock () {\n    const lockfile = await this.options.repoLock.lock(this.path)\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION')\n    }\n\n    return lockfile\n  }\n\n  /**\n   * Closes the lock on the repo\n   *\n   * @private\n   */\n  _closeLock () {\n    return this._lockfile && this._lockfile.close()\n  }\n\n  /**\n   * Check if the repo is already initialized.\n   *\n   * @private\n   */\n  async _checkInitialized () {\n    log('init check')\n    let config\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ])\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        })\n      }\n\n      throw err\n    }\n\n    if (!config) {\n      throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      })\n    }\n  }\n\n  /**\n   * Close the repo and cleanup.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.closed) {\n      throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)\n    }\n    log('closing at: %s', this.path)\n\n    try {\n      // Delete api, ignoring irrelevant errors\n      await this.apiAddr.delete()\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERRORS.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err\n      }\n    }\n\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map((store) => store && store.close()))\n\n    log('unlocking')\n    this.closed = true\n    await this._closeLock()\n  }\n\n  /**\n   * Check if a repo exists.\n   *\n   * @returns {Promise<boolean>}\n   */\n  exists () {\n    return this.version.exists()\n  }\n\n  /**\n   * Get repo status.\n   *\n   * @returns {Promise<Stat>}\n   */\n  async stat () {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ])\n      const size = blocks.size + datastore + keys\n\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      }\n    }\n    throw errCode(new Error('repo is not initialized yet'), ERRORS.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    })\n  }\n\n  /**\n   * @private\n   */\n  async _isAutoMigrationEnabled () {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate\n    }\n\n    // TODO we need to figure out the priority here, between repo options and config.\n    let autoMigrateConfig\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY)\n    } catch (/** @type {any} */ e) {\n      if (e.code === ERRORS.NotFoundError.code) {\n        autoMigrateConfig = true // Config's default value is True\n      } else {\n        throw e\n      }\n    }\n\n    return autoMigrateConfig\n  }\n\n  /**\n   * Internal migration\n   *\n   * @private\n   * @param {number} toVersion\n   * @param {Backends} backends\n   */\n  async _migrate (toVersion, backends) {\n    const currentRepoVersion = await this.version.get()\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`)\n      return migrator.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    } else {\n      log(`migrating to version ${toVersion}`)\n      return migrator.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      })\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _storageMaxStat () {\n    try {\n      const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))\n      return BigInt(bytes(max))\n    } catch (/** @type {any} */ err) {\n      return BigInt(noLimit)\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _blockStat () {\n    let count = BigInt(0)\n    let size = BigInt(0)\n\n    if (this.blocks) {\n      for await (const { key, value } of this.blocks.query({})) {\n        count += BigInt(1)\n        size += BigInt(value.byteLength)\n        size += BigInt(key.bytes.byteLength)\n      }\n    }\n\n    return { count, size }\n  }\n}\n\n/**\n * @param {Datastore} datastore\n */\nasync function getSize (datastore) {\n  let sum = BigInt(0)\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength)\n    sum += BigInt(block.key.uint8Array().byteLength)\n  }\n  return sum\n}\n\n/**\n * @param {string} path - Where this repo is stored\n * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs\n * @param {import('./types').Backends} backends - backends used by this repo\n * @param {Partial<Options>} [options] - Configuration\n * @returns {import('./types').IPFSRepo}\n */\nexport function createRepo (path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options)\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildConfig (_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))\n\n  return _config\n}\n\n/**\n * @param {import('./types').Config} _config\n */\nfunction buildDatastoreSpec (_config) {\n  /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get(_config, 'Datastore.Spec')\n  }\n\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map((mounting) => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  }\n}\n","import * as dagCBOR from \"@ipld/dag-cbor\";\nimport * as dagPB from \"@ipld/dag-pb\";\nimport * as raw from \"multiformats/codecs/raw\";\nimport { createRepo } from \"ipfs-repo\";\nimport { BlockstoreDatastoreAdapter } from \"blockstore-datastore-adapter\";\nimport { MemoryDatastore } from \"datastore-core/memory\";\nimport { LevelDatastore } from \"datastore-level\";\nexport function create(repoName) {\n    const memoryDs = new MemoryDatastore();\n    return createRepo(repoName, codeOrName => {\n        const lookup = {\n            [dagPB.code]: dagPB,\n            [dagPB.name]: dagPB,\n            [dagCBOR.code]: dagCBOR,\n            [dagCBOR.name]: dagCBOR,\n            [raw.code]: raw,\n            [raw.name]: raw,\n        };\n        return Promise.resolve(lookup[codeOrName]);\n    }, {\n        root: new LevelDatastore(`${repoName}/root`, { prefix: \"\", version: 2 }),\n        blocks: new BlockstoreDatastoreAdapter(new LevelDatastore(`${repoName}/blocks`, { prefix: \"\", version: 2 })),\n        keys: new LevelDatastore(`${repoName}/keys`, { prefix: \"\", version: 2 }),\n        datastore: memoryDs,\n        pins: new LevelDatastore(`${repoName}/pins`, { prefix: \"\", version: 2 }),\n    }, {\n        repoLock: {\n            lock: async () => ({ close: async () => { return; } }),\n            locked: async () => false\n        },\n        autoMigrate: false,\n    });\n}\n//# sourceMappingURL=repo.js.map","/*\n\n(づ￣ ³￣)づ\n\nIPFS node things.\n\n*/\nimport * as keys from \"@libp2p/interface-keys\";\nimport { multiaddr } from \"@multiformats/multiaddr\";\nimport { peerIdFromString } from \"@libp2p/peer-id\";\nimport * as t from \"../../../../common/type-checks.js\";\nimport * as IpfsRepo from \"./node/repo.js\";\n// GLOBAL STATE\nconst latestPeerTimeoutIds = {};\nconst isSafari = /^((?!chrome|android).)*safari/i.test(globalThis.navigator?.userAgent || \"\");\n// OPTIONS\n/** 🎛️ Connection interval knobs\n *\n * KEEP_ALIVE_INTERVAL: Interval to keep the connection alive when online\n * KEEP_TRYING_INTERVAL: Interval to keep trying the connection when offline\n * BACKOFF_INIT: Starting intervals for fibonacci backoff used when establishing a connection\n */\nconst KEEP_ALIVE_INTERVAL = 1 * 60 * 1000; // 1 minute\nconst KEEP_TRYING_INTERVAL = 5 * 60 * 1000; // 5 minutes\nconst BACKOFF_INIT = {\n    retryNumber: 0,\n    lastBackoff: 0,\n    currentBackoff: 1000\n};\n/** 🎛️ IPFS Options\n */\nexport const OPTIONS = {\n    config: {\n        Addresses: {\n            Delegates: []\n        },\n        Bootstrap: [],\n        Discovery: {\n            webRTCStar: { Enabled: false }\n        },\n        Pubsub: {\n            Enabled: false\n        }\n    },\n    preload: {\n        enabled: false,\n        addresses: []\n    },\n    libp2p: {\n        peerDiscovery: [],\n        connectionManager: {\n            autoDial: false\n        }\n    },\n    init: {\n        algorithm: isSafari ? keys.RSA : undefined,\n        emptyRepo: true\n    },\n};\n// 🚀\nexport async function createAndConnect(dependencies, pkg, peersUrl, repoName, logging) {\n    const peers = await listPeers(dependencies.storage, peersUrl);\n    if (peers.length === 0) {\n        throw new Error(\"💥 Couldn't start IPFS node, peer list is empty\");\n    }\n    // Start an IPFS node & connect to all the peers\n    const repo = IpfsRepo.create(repoName);\n    const ipfs = await pkg.create({ ...OPTIONS, repo });\n    peers.forEach(peer => {\n        latestPeerTimeoutIds[peer.toString()] = null;\n        tryConnecting(ipfs, peer, logging);\n    });\n    // Try connecting when browser comes online\n    globalThis.addEventListener(\"online\", async () => {\n        (await listPeers(dependencies.storage, peersUrl))\n            .filter(peer => {\n            const peerStr = peer.toString();\n            return !peerStr.includes(\"/localhost/\") &&\n                !peerStr.includes(\"/127.0.0.1/\") &&\n                !peerStr.includes(\"/0.0.0.0/\");\n        })\n            .forEach(peer => {\n            tryConnecting(ipfs, peer, logging);\n        });\n    });\n    // Fin\n    if (logging)\n        console.log(\"🚀 Started IPFS node\");\n    return { ipfs, repo };\n}\n// PEERS\n// -----\nexport function fetchPeers(peersUrl) {\n    return fetch(peersUrl)\n        .then(r => r.json())\n        .then(r => Array.isArray(r) ? r : [])\n        .then(r => r.filter(p => t.isString(p) && p.includes(\"/wss/\")))\n        .catch(() => { throw new Error(\"💥 Couldn't start IPFS node, failed to fetch peer list\"); });\n}\nexport async function listPeers(storage, peersUrl) {\n    let peers;\n    const storageKey = `ipfs-peers-${peersUrl}`;\n    const maybePeers = await storage.getItem(storageKey);\n    if (t.isString(maybePeers) && maybePeers.trim() !== \"\") {\n        peers = JSON.parse(maybePeers);\n        fetchPeers(peersUrl).then(list => storage.setItem(storageKey, JSON.stringify(list))).catch(err => {\n            // don't throw\n            console.error(err);\n        });\n    }\n    else {\n        peers = await fetchPeers(peersUrl);\n        await storage.setItem(storageKey, JSON.stringify(peers));\n    }\n    return peers.map(multiaddr);\n}\n// CONNECTIONS\n// -----------\nfunction keepAlive(ipfs, peer, backoff, status) {\n    let timeoutId = null;\n    if (backoff.currentBackoff < KEEP_TRYING_INTERVAL) {\n        // Start race between reconnect and ping\n        timeoutId = setTimeout(() => reconnect(ipfs, peer, backoff, status), backoff.currentBackoff);\n    }\n    else {\n        // Disregard backoff, but keep trying\n        timeoutId = setTimeout(() => reconnect(ipfs, peer, backoff, status), KEEP_TRYING_INTERVAL);\n    }\n    // Track the latest reconnect attempt\n    latestPeerTimeoutIds[peer.toString()] = timeoutId;\n    ping(ipfs, peer).then(({ latency }) => {\n        const updatedStatus = { connected: true, lastConnectedAt: Date.now(), latency };\n        report(peer, updatedStatus);\n        // Cancel reconnect because ping won\n        if (timeoutId)\n            clearTimeout(timeoutId);\n        // Keep alive after the latest ping-reconnect race, ignore the rest\n        if (timeoutId === latestPeerTimeoutIds[peer.toString()]) {\n            setTimeout(() => keepAlive(ipfs, peer, BACKOFF_INIT, updatedStatus), KEEP_ALIVE_INTERVAL);\n        }\n    }).catch(() => {\n        // ignore errors\n    });\n}\nasync function reconnect(ipfs, peer, backoff, status) {\n    const updatedStatus = { ...status, connected: false, latency: null };\n    report(peer, updatedStatus);\n    try {\n        await ipfs.swarm.disconnect(peer);\n        await ipfs.swarm.connect(peer);\n    }\n    catch {\n        // No action needed, we will retry\n    }\n    if (backoff.currentBackoff < KEEP_TRYING_INTERVAL) {\n        const nextBackoff = {\n            retryNumber: backoff.retryNumber + 1,\n            lastBackoff: backoff.currentBackoff,\n            currentBackoff: backoff.lastBackoff + backoff.currentBackoff\n        };\n        keepAlive(ipfs, peer, nextBackoff, updatedStatus);\n    }\n    else {\n        keepAlive(ipfs, peer, backoff, updatedStatus);\n    }\n}\nexport function tryConnecting(ipfs, peer, logging) {\n    ping(ipfs, peer).then(({ latency }) => {\n        return ipfs.swarm\n            .connect(peer, { timeout: 60 * 1000 })\n            .then(() => {\n            if (logging)\n                console.log(`🪐 Connected to ${peer}`);\n            const status = { connected: true, lastConnectedAt: Date.now(), latency };\n            report(peer, status);\n            // Ensure permanent connection to a peer\n            // NOTE: This is a temporary solution while we wait for\n            //       https://github.com/libp2p/js-libp2p/issues/744\n            //       (see \"Keep alive\" bit)\n            setTimeout(() => keepAlive(ipfs, peer, BACKOFF_INIT, status), KEEP_ALIVE_INTERVAL);\n        });\n    }).catch(() => {\n        if (logging)\n            console.log(`🪓 Could not connect to ${peer}`);\n        const status = { connected: false, lastConnectedAt: null, latency: null };\n        report(peer, status);\n        keepAlive(ipfs, peer, BACKOFF_INIT, status);\n    });\n}\nexport async function ping(ipfs, peer) {\n    return ipfs.libp2p.ping(peer).then(latency => ({ latency }));\n}\n// REPORTING\n// ---------\nlet peerConnections = [];\nlet monitoringPeers = false;\nfunction report(peer, status) {\n    peerConnections = peerConnections\n        .filter(connection => connection.peer !== peer)\n        .concat({ peer, status });\n    const offline = peerConnections.every(connection => !connection.status.connected);\n    const lastConnectedAt = peerConnections.reduce((newest, { status }) => newest >= (status.lastConnectedAt || 0) ? newest : (status.lastConnectedAt || 0), 0);\n    const activeConnections = peerConnections.filter(connection => connection.status.latency !== null);\n    const averageLatency = activeConnections.length > 0\n        ? peerConnections.reduce((sum, connection) => sum + (connection.status.latency || 0), 0) / activeConnections.length\n        : null;\n    if (monitoringPeers) {\n        console.table(peerConnections);\n        console.log(\"offline\", offline);\n        console.log(\"last connected at\", lastConnectedAt === 0 ? null : lastConnectedAt);\n        console.log(\"average latency\", averageLatency);\n    }\n}\nexport async function monitorPeers() {\n    monitoringPeers = true;\n    console.log(\"📡 Monitoring IPFS peers\");\n}\nexport function stopMonitoringPeers() {\n    monitoringPeers = false;\n}\n// 🔮\nlet monitor = null;\nexport async function monitorBitswap(dependencies, ipfs, peersUrl, verbose) {\n    const cidCount = {};\n    const seen = [];\n    const peers = await listPeers(dependencies.storage, peersUrl);\n    verbose = verbose === undefined ? false : true;\n    console.log(\"🕵️‍♀️ Monitoring IPFS bitswap requests\");\n    await stopMonitoringBitswap();\n    monitor = setInterval(async () => {\n        const peerList = peers;\n        peerList.map(async (peer) => {\n            const peerIdString = peer.getPeerId();\n            if (!peerIdString)\n                return;\n            const peerId = peerIdFromString(peerIdString);\n            const wantList = await ipfs.bitswap.wantlistForPeer(peerId, { timeout: 120 * 1000 });\n            wantList.forEach(async (cid) => {\n                const c = cid.toString();\n                const s = peer + \"-\" + c;\n                if (!seen.includes(s)) {\n                    const seenCid = !!cidCount[c];\n                    const emoji = seenCid ? \"📡\" : \"🔮\";\n                    const msg = `${emoji} Peer ${peer} requested CID ${c}`;\n                    cidCount[c] = (cidCount[c] || 0) + 1;\n                    if (seenCid) {\n                        if (verbose)\n                            console.log(msg + ` (#${cidCount[c]})`);\n                        return;\n                    }\n                    else {\n                        console.log(msg);\n                    }\n                    const start = performance.now();\n                    seen.push(s);\n                    const dag = await ipfs.dag.get(cid);\n                    const end = performance.now();\n                    const diff = end - start;\n                    const loaded = `loaded locally in ${diff.toFixed(2)} ms`;\n                    if (dag.value.Links) {\n                        console.log(`🧱 ${c} is a 👉 DAG structure (${loaded})`);\n                        (console.table || console.log)(dag.value.Links\n                            .map((l) => {\n                            if (t.isObject(l) && t.hasProp(l, \"Name\") && t.hasProp(l, \"Hash\")) {\n                                return { name: l.Name, cid: l.Hash.toString() };\n                            }\n                            else {\n                                return null;\n                            }\n                        })\n                            .filter((a) => a));\n                    }\n                    else {\n                        console.log(`📦 ${c} is 👉 Data (${loaded})`);\n                        console.log(dag.value);\n                    }\n                }\n            });\n        });\n    }, 20);\n}\nexport async function stopMonitoringBitswap() {\n    if (monitor)\n        clearInterval(monitor);\n}\n//# sourceMappingURL=node.js.map","import * as ipfsNode from \"./node.js\";\nexport const DEFAULT_CDN_URL = \"https://unpkg.com/ipfs-core@0.17.0/dist/index.min.js\";\n/**\n * Create an IPFS Node given a `IPFSPackage`,\n * which you can get from `pkgFromCDN` or `pkgFromBundle`.\n */\nexport const nodeWithPkg = (dependencies, pkg, peersUrl, repoName, logging) => {\n    return ipfsNode.createAndConnect(dependencies, pkg, peersUrl, repoName, logging);\n};\n/**\n * Loads ipfs-core from a CDN.\n * NOTE: Make sure to cache this URL with a service worker if you want to make your app available offline.\n */\nexport const pkgFromCDN = async (cdn_url) => {\n    if (!cdn_url)\n        throw new Error(\"This function requires a URL to a CDN\");\n    return import(/* @vite-ignore */ /* webpackIgnore: true */ cdn_url).then(_ => self.IpfsCore);\n};\n//# sourceMappingURL=config.js.map","import * as uint8arrays from \"uint8arrays\";\nimport { CID } from \"multiformats/cid\";\nimport { sha256 } from \"multiformats/hashes/sha2\";\nimport * as Codecs from \"../../../dag/codecs.js\";\n// 🛳\nexport async function implementation(getIpfs) {\n    return {\n        // GET\n        getBlock: async (cid) => {\n            const { ipfs } = await getIpfs();\n            return ipfs.block.get(cid);\n        },\n        getUnixDirectory: async (cid) => {\n            const { ipfs } = await getIpfs();\n            const entries = [];\n            for await (const entry of ipfs.ls(cid)) {\n                const { name = \"\", cid, size, type } = entry;\n                entries.push({\n                    name,\n                    cid: cid,\n                    size,\n                    isFile: type !== \"dir\"\n                });\n            }\n            return entries;\n        },\n        getUnixFile: async (cid) => {\n            const { ipfs } = await getIpfs();\n            const chunks = [];\n            for await (const chunk of ipfs.cat(cid)) {\n                chunks.push(chunk);\n            }\n            return uint8arrays.concat(chunks);\n        },\n        // PUT\n        putBlock: async (data, codecId) => {\n            const { repo } = await getIpfs();\n            const codec = Codecs.getByIdentifier(codecId);\n            const multihash = await sha256.digest(data);\n            const cid = CID.createV1(codec.code, multihash);\n            await repo.blocks.put(cid, data);\n            return cid;\n        },\n        putChunked: async (data) => {\n            const { ipfs } = await getIpfs();\n            const addResult = await ipfs.add(data, {\n                cidVersion: 1,\n                hashAlg: \"sha2-256\",\n                rawLeaves: true,\n                wrapWithDirectory: false,\n                preload: false,\n                pin: false,\n            });\n            return { ...addResult, isFile: true };\n        },\n        // STATS\n        size: async (cid) => {\n            const { ipfs } = await getIpfs();\n            const stat = await ipfs.files.stat(`/ipfs/${cid}`);\n            return stat.cumulativeSize;\n        }\n    };\n}\n//# sourceMappingURL=ipfs.js.map","import * as Ipfs from \"./ipfs/index.js\";\nimport * as IpfsBase from \"./ipfs.js\";\n// 🛳\nexport async function implementation(dependencies, peersUrl, repoName) {\n    let instance = null;\n    return IpfsBase.implementation(async () => {\n        if (instance)\n            return instance;\n        instance = await Ipfs.nodeWithPkg(dependencies, await Ipfs.pkgFromCDN(Ipfs.DEFAULT_CDN_URL), peersUrl, repoName, false);\n        return instance;\n    });\n}\n//# sourceMappingURL=ipfs-default-pkg.js.map","import * as FissionEndpoints from \"../../../common/fission.js\";\nimport * as IPFS from \"./ipfs-default-pkg.js\";\n// 🛳\nexport async function implementation(dependencies, repoName) {\n    return IPFS.implementation(dependencies, FissionEndpoints.PRODUCTION.server + \"/ipfs/peers\", repoName);\n}\n//# sourceMappingURL=fission-ipfs-production.js.map"],"file":"assets/ipfs-modules-5ddb521f.js"}