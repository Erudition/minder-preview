{"version":3,"file":"libp2p-modules-7ceb3045.js","sources":["../../node_modules/.pnpm/@libp2p+logger@2.0.7/node_modules/@libp2p/logger/dist/src/index.js","../../node_modules/.pnpm/@libp2p+interfaces@3.3.2/node_modules/@libp2p/interfaces/dist/src/errors.js","../../node_modules/.pnpm/@libp2p+interface-peer-id@2.0.2/node_modules/@libp2p/interface-peer-id/dist/src/index.js","../../node_modules/.pnpm/@libp2p+peer-id@2.0.3/node_modules/@libp2p/peer-id/dist/src/index.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/webcrypto.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/exporter.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/keys.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/util.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/importer.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/random-bytes.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/jwk2pem.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/keys/index.js","../../node_modules/.pnpm/@libp2p+record@3.0.3/node_modules/@libp2p/record/dist/src/record.js","../../node_modules/.pnpm/@libp2p+record@3.0.3/node_modules/@libp2p/record/dist/src/utils.js","../../node_modules/.pnpm/@libp2p+record@3.0.3/node_modules/@libp2p/record/dist/src/index.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/errors.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/envelope/envelope.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/envelope/index.js","../../node_modules/.pnpm/@libp2p+utils@3.0.11/node_modules/@libp2p/utils/dist/src/array-equals.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/peer-record/peer-record.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/peer-record/consts.js","../../node_modules/.pnpm/@libp2p+peer-record@5.0.3/node_modules/@libp2p/peer-record/dist/src/peer-record/index.js","../../node_modules/.pnpm/@libp2p+interface-registrar@2.0.12/node_modules/@libp2p/interface-registrar/dist/src/index.js","../../node_modules/.pnpm/@libp2p+topology@4.0.1/node_modules/@libp2p/topology/dist/src/index.js","../../node_modules/.pnpm/@libp2p+interfaces@3.3.2/node_modules/@libp2p/interfaces/dist/src/events.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.cjs","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js","../../node_modules/.pnpm/@libp2p+interface-pubsub@3.0.7/node_modules/@libp2p/interface-pubsub/dist/src/index.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js","../../node_modules/.pnpm/@libp2p+crypto@1.0.17/node_modules/@libp2p/crypto/dist/src/pbkdf2.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js","../../node_modules/.pnpm/@libp2p+pubsub@6.0.6/node_modules/@libp2p/pubsub/dist/src/utils.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js","../../node_modules/.pnpm/@chainsafe+libp2p-gossipsub@6.3.0/node_modules/@chainsafe/libp2p-gossipsub/dist/src/index.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/libp2p-pubsub-routers.browser.js","../../node_modules/.pnpm/@libp2p+delegated-peer-routing@4.0.6/node_modules/@libp2p/delegated-peer-routing/dist/src/index.js","../../node_modules/.pnpm/@libp2p+delegated-content-routing@4.0.3/node_modules/@libp2p/delegated-content-routing/dist/src/index.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/constants.js","../../node_modules/.pnpm/@libp2p+webrtc-peer@2.0.2/node_modules/@libp2p/webrtc-peer/dist/src/channel.js","../../node_modules/.pnpm/@libp2p+webrtc-peer@2.0.2/node_modules/@libp2p/webrtc-peer/dist/src/peer.js","../../node_modules/.pnpm/@libp2p+webrtc-peer@2.0.2/node_modules/@libp2p/webrtc-peer/dist/src/handshake.js","../../node_modules/.pnpm/@libp2p+webrtc-peer@2.0.2/node_modules/@libp2p/webrtc-peer/dist/src/receiver.js","../../node_modules/.pnpm/@libp2p+webrtc-peer@2.0.2/node_modules/@libp2p/webrtc-peer/dist/src/initiator.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/socket-to-conn.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/utils.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/listener.js","../../node_modules/.pnpm/@libp2p+interface-transport@2.1.3/node_modules/@libp2p/interface-transport/dist/src/index.js","../../node_modules/.pnpm/@libp2p+interface-peer-discovery@1.1.1/node_modules/@libp2p/interface-peer-discovery/dist/src/index.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/transport.js","../../node_modules/.pnpm/@libp2p+webrtc-star@6.0.0/node_modules/@libp2p/webrtc-star/dist/src/index.js","../../node_modules/.pnpm/ipfs-core-config@0.7.0_prom-client@14.2.0/node_modules/ipfs-core-config/src/libp2p.browser.js","../../node_modules/.pnpm/@libp2p+interfaces@3.3.2/node_modules/@libp2p/interfaces/dist/src/startable.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/errors.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/content-routing/utils.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/peer-routing.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/content-routing/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/address-manager/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/visibility-change-emitter.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/latency-monitor.js","../../node_modules/.pnpm/@libp2p+interface-connection@3.1.1/node_modules/@libp2p/interface-connection/dist/src/status.js","../../node_modules/.pnpm/@libp2p+peer-collections@3.0.1/node_modules/@libp2p/peer-collections/dist/src/util.js","../../node_modules/.pnpm/@libp2p+peer-collections@3.0.1/node_modules/@libp2p/peer-collections/dist/src/map.js","../../node_modules/.pnpm/@libp2p+peer-collections@3.0.1/node_modules/@libp2p/peer-collections/dist/src/set.js","../../node_modules/.pnpm/@libp2p+interface-peer-store@1.2.9/node_modules/@libp2p/interface-peer-store/dist/src/tags.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/get-peer.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/auto-dialler.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/pb/index.js","../../node_modules/.pnpm/@libp2p+utils@3.0.11/node_modules/@libp2p/utils/dist/src/stream-to-ma-conn.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/multicodec.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/listener.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/circuit/utils.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/circuit/stream-handler.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/circuit/stop.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/circuit/hop.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/transport.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/utils.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/constants.js","../../node_modules/.pnpm/@libp2p+utils@3.0.11/node_modules/@libp2p/utils/dist/src/multiaddr/is-private.js","../../node_modules/.pnpm/@libp2p+utils@3.0.11/node_modules/@libp2p/utils/dist/src/address-sort.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/auto-relay.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/circuit/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/keychain/util.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/keychain/cms.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/keychain/index.js","../../node_modules/.pnpm/@libp2p+tracked-map@3.0.2/node_modules/@libp2p/tracked-map/dist/src/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/transport-manager.js","../../node_modules/.pnpm/@libp2p+multistream-select@3.1.8/node_modules/@libp2p/multistream-select/dist/src/constants.js","../../node_modules/.pnpm/@libp2p+multistream-select@3.1.8/node_modules/@libp2p/multistream-select/dist/src/multistream.js","../../node_modules/.pnpm/@libp2p+multistream-select@3.1.8/node_modules/@libp2p/multistream-select/dist/src/select.js","../../node_modules/.pnpm/@libp2p+multistream-select@3.1.8/node_modules/@libp2p/multistream-select/dist/src/handle.js","../../node_modules/.pnpm/@libp2p+interface-connection@3.1.1/node_modules/@libp2p/interface-connection/dist/src/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/registrar.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/upgrader.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/identify/pb/message.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/version.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/identify/consts.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/identify/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/fetch/pb/proto.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/fetch/constants.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/fetch/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/ping/constants.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/ping/index.js","../../node_modules/.pnpm/@libp2p+utils@3.0.11/node_modules/@libp2p/utils/dist/src/multiaddr/is-loopback.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/nat-manager.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/peer-record-updater.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/dht/dht-peer-routing.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/errors.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/address-book.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/key-book.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/metadata-book.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/proto-book.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/pb/peer.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/store.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/pb/tags.js","../../node_modules/.pnpm/@libp2p+peer-store@6.0.4/node_modules/@libp2p/peer-store/dist/src/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/dht/dht-content-routing.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/components.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/constants.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/config.js","../../node_modules/.pnpm/@libp2p+peer-id-factory@2.0.3/node_modules/@libp2p/peer-id-factory/dist/src/proto.js","../../node_modules/.pnpm/@libp2p+peer-id-factory@2.0.3/node_modules/@libp2p/peer-id-factory/dist/src/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/dht/dummy-dht.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/pubsub/dummy-pubsub.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/dialer/dial-request.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/connection-manager/dialer/index.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/libp2p.js","../../node_modules/.pnpm/libp2p@0.42.2/node_modules/libp2p/dist/src/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/constants.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/utils.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/message/dht.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/message/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/query/events.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/network.js","../../node_modules/.pnpm/@libp2p+record@3.0.3/node_modules/@libp2p/record/dist/src/validators.js","../../node_modules/.pnpm/@libp2p+record@3.0.3/node_modules/@libp2p/record/dist/src/selectors.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/providers.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/query/query-path.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/query/manager.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/rpc/index.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/topology-listener.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/query-self.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/kad-dht.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/dual-kad-dht.js","../../node_modules/.pnpm/@libp2p+kad-dht@7.0.3/node_modules/@libp2p/kad-dht/dist/src/index.js","../../node_modules/.pnpm/@libp2p+bootstrap@6.0.3/node_modules/@libp2p/bootstrap/dist/src/index.js","../../node_modules/.pnpm/@libp2p+websockets@5.0.10/node_modules/@libp2p/websockets/dist/src/listener.browser.js","../../node_modules/.pnpm/@libp2p+websockets@5.0.10/node_modules/@libp2p/websockets/dist/src/constants.js","../../node_modules/.pnpm/@libp2p+websockets@5.0.10/node_modules/@libp2p/websockets/dist/src/socket-to-conn.js","../../node_modules/.pnpm/@libp2p+websockets@5.0.10/node_modules/@libp2p/websockets/dist/src/filters.js","../../node_modules/.pnpm/@libp2p+websockets@5.0.10/node_modules/@libp2p/websockets/dist/src/index.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/alloc-unsafe-browser.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/message-types.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/encode.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/decode.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/stream.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/mplex.js","../../node_modules/.pnpm/@libp2p+mplex@7.1.7/node_modules/@libp2p/mplex/dist/src/index.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/constants.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/stablelib.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js","../../node_modules/.pnpm/@libp2p+interface-connection-encrypter@3.0.6/node_modules/@libp2p/interface-connection-encrypter/dist/src/errors.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/utils.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/logger.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/noise.js","../../node_modules/.pnpm/@chainsafe+libp2p-noise@11.0.4/node_modules/@chainsafe/libp2p-noise/dist/src/index.js","../../node_modules/.pnpm/ipfs-core@0.18.0_prom-client@14.2.0/node_modules/ipfs-core/src/components/libp2p.js"],"sourcesContent":["import debug from 'debug';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base64 } from 'multiformats/bases/base64';\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v) => {\n    return v == null ? 'undefined' : base58btc.baseEncode(v);\n};\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v) => {\n    return v == null ? 'undefined' : base32.baseEncode(v);\n};\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v) => {\n    return v == null ? 'undefined' : base64.baseEncode(v);\n};\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\nfunction createDisabledLogger(namespace) {\n    const logger = () => { };\n    logger.enabled = false;\n    logger.color = '';\n    logger.diff = 0;\n    logger.log = () => { };\n    logger.namespace = namespace;\n    logger.destroy = () => true;\n    logger.extend = () => logger;\n    return logger;\n}\nexport function logger(name) {\n    // trace logging is a no-op by default\n    let trace = createDisabledLogger(`${name}:trace`);\n    // look at all the debug names and see if trace logging has explicitly been enabled\n    if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n        trace = debug(`${name}:trace`);\n    }\n    return Object.assign(debug(name), {\n        error: debug(`${name}:error`),\n        trace\n    });\n}\nexport function disable() {\n    debug.disable();\n}\nexport function enable(namespaces) {\n    debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n    return debug.enabled(namespaces);\n}\n//# sourceMappingURL=index.js.map","/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n    code;\n    type;\n    constructor(message = 'The operation was aborted') {\n        super(message);\n        this.code = AbortError.code;\n        this.type = AbortError.type;\n    }\n    static code = 'ABORT_ERR';\n    static type = 'aborted';\n}\nexport class CodeError extends Error {\n    code;\n    props;\n    constructor(message, code, props) {\n        super(message);\n        this.code = code;\n        this.name = props?.name ?? 'CodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\n//# sourceMappingURL=errors.js.map","export const symbol = Symbol.for('@libp2p/peer-id');\nexport function isPeerId(other) {\n    return other != null && Boolean(other[symbol]);\n}\n//# sourceMappingURL=index.js.map","import { CID } from 'multiformats/cid';\nimport { bases } from 'multiformats/basics';\nimport { base58btc } from 'multiformats/bases/base58';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { symbol } from '@libp2p/interface-peer-id';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst baseDecoder = Object\n    .values(bases)\n    .map(codec => codec.decoder)\n    // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n    .reduce((acc, curr) => acc.or(curr), bases.identity.decoder);\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\nclass PeerIdImpl {\n    constructor(init) {\n        this.type = init.type;\n        this.multihash = init.multihash;\n        this.privateKey = init.privateKey;\n        // mark string cache as non-enumerable\n        Object.defineProperty(this, 'string', {\n            enumerable: false,\n            writable: true\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return `PeerId(${this.toString()})`;\n    }\n    get [symbol]() {\n        return true;\n    }\n    toString() {\n        if (this.string == null) {\n            this.string = base58btc.encode(this.multihash.bytes).slice(1);\n        }\n        return this.string;\n    }\n    // return self-describing String representation\n    // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n    toCID() {\n        return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n    }\n    toBytes() {\n        return this.multihash.bytes;\n    }\n    /**\n     * Returns Multiaddr as a JSON string\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Checks the equality of `this` peer against a given PeerId\n     */\n    equals(id) {\n        if (id instanceof Uint8Array) {\n            return uint8ArrayEquals(this.multihash.bytes, id);\n        }\n        else if (typeof id === 'string') {\n            return peerIdFromString(id).equals(this);\n        }\n        else if (id?.multihash?.bytes != null) {\n            return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n        }\n        else {\n            throw new Error('not valid Id');\n        }\n    }\n    /**\n     * Returns PeerId as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { peerIdFromString } from '@libp2p/peer-id'\n     *\n     * console.info(peerIdFromString('QmFoo'))\n     * // 'PeerId(QmFoo)'\n     * ```\n     */\n    [inspect]() {\n        return `PeerId(${this.toString()})`;\n    }\n}\nclass RSAPeerIdImpl extends PeerIdImpl {\n    constructor(init) {\n        super({ ...init, type: 'RSA' });\n        this.type = 'RSA';\n        this.publicKey = init.publicKey;\n    }\n}\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n    constructor(init) {\n        super({ ...init, type: 'Ed25519' });\n        this.type = 'Ed25519';\n        this.publicKey = init.multihash.digest;\n    }\n}\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n    constructor(init) {\n        super({ ...init, type: 'secp256k1' });\n        this.type = 'secp256k1';\n        this.publicKey = init.multihash.digest;\n    }\n}\nexport function createPeerId(init) {\n    if (init.type === 'RSA') {\n        return new RSAPeerIdImpl(init);\n    }\n    if (init.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(init);\n    }\n    if (init.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(init);\n    }\n    throw new CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromPeerId(other) {\n    if (other.type === 'RSA') {\n        return new RSAPeerIdImpl(other);\n    }\n    if (other.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(other);\n    }\n    if (other.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(other);\n    }\n    throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromString(str, decoder) {\n    decoder = decoder ?? baseDecoder;\n    if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n        // identity hash ed25519/secp256k1 key or sha2-256 hash of\n        // rsa public key - base58btc encoded either way\n        const multihash = Digest.decode(base58btc.decode(`z${str}`));\n        if (str.startsWith('12D')) {\n            return new Ed25519PeerIdImpl({ multihash });\n        }\n        else if (str.startsWith('16U')) {\n            return new Secp256k1PeerIdImpl({ multihash });\n        }\n        else {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n    try {\n        const multihash = Digest.decode(buf);\n        if (multihash.code === identity.code) {\n            if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n                return new Ed25519PeerIdImpl({ multihash });\n            }\n            else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n                return new Secp256k1PeerIdImpl({ multihash });\n            }\n        }\n        if (multihash.code === sha256.code) {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    catch {\n        return peerIdFromCID(CID.decode(buf));\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n    if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n        throw new Error('Supplied PeerID CID is invalid');\n    }\n    const multihash = cid.multihash;\n    if (multihash.code === sha256.code) {\n        return new RSAPeerIdImpl({ multihash: cid.multihash });\n    }\n    else if (multihash.code === identity.code) {\n        if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n            return new Ed25519PeerIdImpl({ multihash: cid.multihash });\n        }\n        else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n            return new Secp256k1PeerIdImpl({ multihash: cid.multihash });\n        }\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys(publicKey, privateKey) {\n    if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey });\n    }\n    if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey });\n    }\n    return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey });\n}\n//# sourceMappingURL=index.js.map","import * as ed from '@noble/ed25519';\nconst PUBLIC_KEY_BYTE_LENGTH = 32;\nconst PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys\nconst KEYS_BYTE_LENGTH = 32;\nexport { PUBLIC_KEY_BYTE_LENGTH as publicKeyLength };\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport async function generateKey() {\n    // the actual private key (32 bytes)\n    const privateKeyRaw = ed.utils.randomPrivateKey();\n    const publicKey = await ed.getPublicKey(privateKeyRaw);\n    // concatenated the public key to the private key\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\n/**\n * Generate keypair from a 32 byte uint8array\n */\nexport async function generateKeyFromSeed(seed) {\n    if (seed.length !== KEYS_BYTE_LENGTH) {\n        throw new TypeError('\"seed\" must be 32 bytes in length.');\n    }\n    else if (!(seed instanceof Uint8Array)) {\n        throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.');\n    }\n    // based on node forges algorithm, the seed is used directly as private key\n    const privateKeyRaw = seed;\n    const publicKey = await ed.getPublicKey(privateKeyRaw);\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\nexport async function hashAndSign(privateKey, msg) {\n    const privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH);\n    return ed.sign(msg, privateKeyRaw);\n}\nexport async function hashAndVerify(publicKey, sig, msg) {\n    return ed.verify(sig, msg, publicKey);\n}\nfunction concatKeys(privateKeyRaw, publicKey) {\n    const privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH);\n    for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {\n        privateKey[i] = privateKeyRaw[i];\n        privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];\n    }\n    return privateKey;\n}\n//# sourceMappingURL=ed25519-browser.js.map","/* eslint-env browser */\n// Check native crypto exists and is enabled (In insecure context `self.crypto`\n// exists but `self.crypto.subtle` does not).\nexport default {\n    get(win = globalThis) {\n        const nativeCrypto = win.crypto;\n        if (nativeCrypto == null || nativeCrypto.subtle == null) {\n            throw Object.assign(new Error('Missing Web Crypto API. ' +\n                'The most likely cause of this error is that this page is being accessed ' +\n                'from an insecure context (i.e. not HTTPS). For more information and ' +\n                'possible resolutions see ' +\n                'https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api'), { code: 'ERR_MISSING_WEB_CRYPTO' });\n        }\n        return nativeCrypto;\n    }\n};\n//# sourceMappingURL=webcrypto.js.map","import { concat } from 'uint8arrays/concat';\nimport { fromString } from 'uint8arrays/from-string';\nimport webcrypto from '../webcrypto.js';\n// WebKit on Linux does not support deriving a key from an empty PBKDF2 key.\n// So, as a workaround, we provide the generated key as a constant. We test that\n// this generated key is accurate in test/workaround.spec.ts\n// Generated via:\n// await crypto.subtle.exportKey('jwk',\n//   await crypto.subtle.deriveKey(\n//     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },\n//     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),\n//     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])\n// )\nexport const derivedEmptyPasswordKey = { alg: 'A128GCM', ext: true, k: 'scm9jmO_4BJAgdwWGVulLg', key_ops: ['encrypt', 'decrypt'], kty: 'oct' };\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nexport function create(opts) {\n    const algorithm = opts?.algorithm ?? 'AES-GCM';\n    let keyLength = opts?.keyLength ?? 16;\n    const nonceLength = opts?.nonceLength ?? 12;\n    const digest = opts?.digest ?? 'SHA-256';\n    const saltLength = opts?.saltLength ?? 16;\n    const iterations = opts?.iterations ?? 32767;\n    const crypto = webcrypto.get();\n    keyLength *= 8; // Browser crypto uses bits instead of bytes\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to encrypt the data.\n     */\n    async function encrypt(data, password) {\n        const salt = crypto.getRandomValues(new Uint8Array(saltLength));\n        const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = fromString(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['encrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            }\n        }\n        else {\n            // Derive a key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt']);\n        }\n        // Encrypt the string.\n        const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);\n        return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)]);\n    }\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to decrypt the data. The options used to create\n     * this decryption cipher must be the same as those used to create\n     * the encryption cipher.\n     */\n    async function decrypt(data, password) {\n        const salt = data.subarray(0, saltLength);\n        const nonce = data.subarray(saltLength, saltLength + nonceLength);\n        const ciphertext = data.subarray(saltLength + nonceLength);\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = fromString(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['decrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['decrypt']);\n            }\n        }\n        else {\n            // Derive the key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt']);\n        }\n        // Decrypt the string.\n        const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);\n        return new Uint8Array(plaintext);\n    }\n    const cipher = {\n        encrypt,\n        decrypt\n    };\n    return cipher;\n}\n//# sourceMappingURL=aes-gcm.browser.js.map","import { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nexport async function exporter(privateKey, password) {\n    const cipher = ciphers.create();\n    const encryptedKey = await cipher.encrypt(privateKey, password);\n    return base64.encode(encryptedKey);\n}\n//# sourceMappingURL=exporter.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var KeyType;\n(function (KeyType) {\n    KeyType[\"RSA\"] = \"RSA\";\n    KeyType[\"Ed25519\"] = \"Ed25519\";\n    KeyType[\"Secp256k1\"] = \"Secp256k1\";\n})(KeyType || (KeyType = {}));\nvar __KeyTypeValues;\n(function (__KeyTypeValues) {\n    __KeyTypeValues[__KeyTypeValues[\"RSA\"] = 0] = \"RSA\";\n    __KeyTypeValues[__KeyTypeValues[\"Ed25519\"] = 1] = \"Ed25519\";\n    __KeyTypeValues[__KeyTypeValues[\"Secp256k1\"] = 2] = \"Secp256k1\";\n})(__KeyTypeValues || (__KeyTypeValues = {}));\n(function (KeyType) {\n    KeyType.codec = () => {\n        return enumeration(__KeyTypeValues);\n    };\n})(KeyType || (KeyType = {}));\nexport var PublicKey;\n(function (PublicKey) {\n    let _codec;\n    PublicKey.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PublicKey.encode = (obj) => {\n        return encodeMessage(obj, PublicKey.codec());\n    };\n    PublicKey.decode = (buf) => {\n        return decodeMessage(buf, PublicKey.codec());\n    };\n})(PublicKey || (PublicKey = {}));\nexport var PrivateKey;\n(function (PrivateKey) {\n    let _codec;\n    PrivateKey.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PrivateKey.encode = (obj) => {\n        return encodeMessage(obj, PrivateKey.codec());\n    };\n    PrivateKey.decode = (buf) => {\n        return decodeMessage(buf, PrivateKey.codec());\n    };\n})(PrivateKey || (PrivateKey = {}));\n//# sourceMappingURL=keys.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { identity } from 'multiformats/hashes/identity';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport * as crypto from './ed25519.js';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nexport class Ed25519PublicKey {\n    _key;\n    constructor(key) {\n        this._key = ensureKey(key, crypto.publicKeyLength);\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return pbm.PublicKey.encode({\n            Type: pbm.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class Ed25519PrivateKey {\n    _key;\n    _publicKey;\n    // key       - 64 byte Uint8Array containing private key\n    // publicKey - 32 byte Uint8Array containing public key\n    constructor(key, publicKey) {\n        this._key = ensureKey(key, crypto.privateKeyLength);\n        this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Ed25519PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return pbm.PrivateKey.encode({\n            Type: pbm.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the identity multihash containing its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n    async id() {\n        const encoding = identity.digest(this.public.bytes);\n        return base58btc.encode(encoding.bytes).substring(1);\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport function unmarshalEd25519PrivateKey(bytes) {\n    // Try the old, redundant public key version\n    if (bytes.length > crypto.privateKeyLength) {\n        bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n        const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n        const publicKeyBytes = bytes.subarray(crypto.privateKeyLength, bytes.length);\n        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n    }\n    bytes = ensureKey(bytes, crypto.privateKeyLength);\n    const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n    const publicKeyBytes = bytes.subarray(crypto.publicKeyLength);\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nexport function unmarshalEd25519PublicKey(bytes) {\n    bytes = ensureKey(bytes, crypto.publicKeyLength);\n    return new Ed25519PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n    const { privateKey, publicKey } = await crypto.generateKey();\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nexport async function generateKeyPairFromSeed(seed) {\n    const { privateKey, publicKey } = await crypto.generateKeyFromSeed(seed);\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nfunction ensureKey(key, length) {\n    key = Uint8Array.from(key ?? []);\n    if (key.length !== length) {\n        throw new CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE');\n    }\n    return key;\n}\n//# sourceMappingURL=ed25519-class.js.map","import 'node-forge/lib/util.js';\nimport 'node-forge/lib/jsbn.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport function bigIntegerToUintBase64url(num, len) {\n    // Call `.abs()` to convert to unsigned\n    let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n    // toByteArray() gives us back a signed array, which will include a leading 0\n    // byte if the most significant bit of the number is 1:\n    // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n    // Our number will always be positive so we should remove the leading padding.\n    buf = buf[0] === 0 ? buf.subarray(1) : buf;\n    if (len != null) {\n        if (buf.length > len)\n            throw new Error('byte array longer than desired length');\n        buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n    }\n    return uint8ArrayToString(buf, 'base64url');\n}\n// Convert a base64url encoded string to a BigInteger\nexport function base64urlToBigInteger(str) {\n    const buf = base64urlToBuffer(str);\n    return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n}\nexport function base64urlToBuffer(str, len) {\n    let buf = uint8ArrayFromString(str, 'base64urlpad');\n    if (len != null) {\n        if (buf.length > len)\n            throw new Error('byte array longer than desired length');\n        buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n    }\n    return buf;\n}\n//# sourceMappingURL=util.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64urlToBuffer } from '../util.js';\nimport webcrypto from '../webcrypto.js';\nconst bits = {\n    'P-256': 256,\n    'P-384': 384,\n    'P-521': 521\n};\nconst curveTypes = Object.keys(bits);\nconst names = curveTypes.join(' / ');\nexport async function generateEphmeralKeyPair(curve) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const pair = await webcrypto.get().subtle.generateKey({\n        name: 'ECDH',\n        namedCurve: curve\n    }, true, ['deriveBits']);\n    // forcePrivate is used for testing only\n    const genSharedKey = async (theirPub, forcePrivate) => {\n        let privateKey;\n        if (forcePrivate != null) {\n            privateKey = await webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                name: 'ECDH',\n                namedCurve: curve\n            }, false, ['deriveBits']);\n        }\n        else {\n            privateKey = pair.privateKey;\n        }\n        const key = await webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n            name: 'ECDH',\n            namedCurve: curve\n        }, false, []);\n        const buffer = await webcrypto.get().subtle.deriveBits({\n            name: 'ECDH',\n            // @ts-expect-error namedCurve is missing from the types\n            namedCurve: curve,\n            public: key\n        }, privateKey, bits[curve]);\n        return new Uint8Array(buffer, 0, buffer.byteLength);\n    };\n    const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n    const ecdhKey = {\n        key: marshalPublicKey(publicKey),\n        genSharedKey\n    };\n    return ecdhKey;\n}\nconst curveLengths = {\n    'P-256': 32,\n    'P-384': 48,\n    'P-521': 66\n};\n// Marshal converts a jwk encoded ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey(jwk) {\n    if (jwk.crv == null || jwk.x == null || jwk.y == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    if (jwk.crv !== 'P-256' && jwk.crv !== 'P-384' && jwk.crv !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${jwk.crv}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[jwk.crv];\n    return uint8ArrayConcat([\n        Uint8Array.from([4]),\n        base64urlToBuffer(jwk.x, byteLen),\n        base64urlToBuffer(jwk.y, byteLen)\n    ], 1 + byteLen * 2);\n}\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey(curve, key) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[curve];\n    if (!uint8ArrayEquals(key.subarray(0, 1), Uint8Array.from([4]))) {\n        throw new CodeError('Cannot unmarshal public key - invalid key format', 'ERR_INVALID_KEY_FORMAT');\n    }\n    return {\n        kty: 'EC',\n        crv: curve,\n        x: uint8ArrayToString(key.subarray(1, byteLen + 1), 'base64url'),\n        y: uint8ArrayToString(key.subarray(1 + byteLen), 'base64url'),\n        ext: true\n    };\n}\nconst unmarshalPrivateKey = (curve, key) => ({\n    ...unmarshalPublicKey(curve, key.public),\n    d: uint8ArrayToString(key.private, 'base64url')\n});\n//# sourceMappingURL=ecdh-browser.js.map","import { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nexport async function importer(privateKey, password) {\n    const encryptedKey = base64.decode(privateKey);\n    const cipher = ciphers.create();\n    return cipher.decrypt(encryptedKey, password);\n}\n//# sourceMappingURL=importer.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { utils } from '@noble/secp256k1';\nexport default function randomBytes(length) {\n    if (isNaN(length) || length <= 0) {\n        throw new CodeError('random bytes length must be a Number bigger than 0', 'ERR_INVALID_LENGTH');\n    }\n    return utils.randomBytes(length);\n}\n//# sourceMappingURL=random-bytes.js.map","import 'node-forge/lib/rsa.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { base64urlToBigInteger } from '../util.js';\nfunction convert(key, types) {\n    return types.map(t => base64urlToBigInteger(key[t]));\n}\nexport function jwk2priv(key) {\n    return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));\n}\nexport function jwk2pub(key) {\n    return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']));\n}\n//# sourceMappingURL=jwk2pem.js.map","import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/rsa.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js';\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexport function pkcs1ToJwk(bytes) {\n    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n    const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n    // https://tools.ietf.org/html/rfc7518#section-6.3.1\n    return {\n        kty: 'RSA',\n        n: bigIntegerToUintBase64url(privateKey.n),\n        e: bigIntegerToUintBase64url(privateKey.e),\n        d: bigIntegerToUintBase64url(privateKey.d),\n        p: bigIntegerToUintBase64url(privateKey.p),\n        q: bigIntegerToUintBase64url(privateKey.q),\n        dp: bigIntegerToUintBase64url(privateKey.dP),\n        dq: bigIntegerToUintBase64url(privateKey.dQ),\n        qi: bigIntegerToUintBase64url(privateKey.qInv),\n        alg: 'RS256'\n    };\n}\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexport function jwkToPkcs1(jwk) {\n    if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const asn1 = forge.pki.privateKeyToAsn1({\n        n: base64urlToBigInteger(jwk.n),\n        e: base64urlToBigInteger(jwk.e),\n        d: base64urlToBigInteger(jwk.d),\n        p: base64urlToBigInteger(jwk.p),\n        q: base64urlToBigInteger(jwk.q),\n        dP: base64urlToBigInteger(jwk.dp),\n        dQ: base64urlToBigInteger(jwk.dq),\n        qInv: base64urlToBigInteger(jwk.qi)\n    });\n    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexport function pkixToJwk(bytes) {\n    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n    const publicKey = forge.pki.publicKeyFromAsn1(asn1);\n    return {\n        kty: 'RSA',\n        n: bigIntegerToUintBase64url(publicKey.n),\n        e: bigIntegerToUintBase64url(publicKey.e)\n    };\n}\n// Convert a JWK key to PKCIX in ASN1 DER format\nexport function jwkToPkix(jwk) {\n    if (jwk.n == null || jwk.e == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const asn1 = forge.pki.publicKeyToAsn1({\n        n: base64urlToBigInteger(jwk.n),\n        e: base64urlToBigInteger(jwk.e)\n    });\n    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}\n//# sourceMappingURL=rsa-utils.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport randomBytes from '../random-bytes.js';\nimport webcrypto from '../webcrypto.js';\nimport { jwk2pub, jwk2priv } from './jwk2pem.js';\nimport * as utils from './rsa-utils.js';\nexport { utils };\nexport async function generateKey(bits) {\n    const pair = await webcrypto.get().subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: { name: 'SHA-256' }\n    }, true, ['sign', 'verify']);\n    const keys = await exportKey(pair);\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\n// Takes a jwk key\nexport async function unmarshalPrivateKey(key) {\n    const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['sign']);\n    const pair = [\n        privateKey,\n        await derivePublicFromPrivate(key)\n    ];\n    const keys = await exportKey({\n        privateKey: pair[0],\n        publicKey: pair[1]\n    });\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\nexport { randomBytes as getRandomValues };\nexport async function hashAndSign(key, msg) {\n    const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['sign']);\n    const sig = await webcrypto.get().subtle.sign({ name: 'RSASSA-PKCS1-v1_5' }, privateKey, Uint8Array.from(msg));\n    return new Uint8Array(sig, 0, sig.byteLength);\n}\nexport async function hashAndVerify(key, sig, msg) {\n    const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['verify']);\n    return webcrypto.get().subtle.verify({ name: 'RSASSA-PKCS1-v1_5' }, publicKey, sig, msg);\n}\nasync function exportKey(pair) {\n    if (pair.privateKey == null || pair.publicKey == null) {\n        throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');\n    }\n    return Promise.all([\n        webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n        webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n    ]);\n}\nasync function derivePublicFromPrivate(jwKey) {\n    return webcrypto.get().subtle.importKey('jwk', {\n        kty: jwKey.kty,\n        n: jwKey.n,\n        e: jwKey.e\n    }, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workaround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\nfunction convertKey(key, pub, msg, handle) {\n    const fkey = pub ? jwk2pub(key) : jwk2priv(key);\n    const fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii');\n    const fomsg = handle(fmsg, fkey);\n    return uint8ArrayFromString(fomsg, 'ascii');\n}\nexport function encrypt(key, msg) {\n    return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));\n}\nexport function decrypt(key, msg) {\n    return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));\n}\n//# sourceMappingURL=rsa-browser.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport 'node-forge/lib/sha512.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nimport * as crypto from './rsa.js';\nexport class RsaPublicKey {\n    _key;\n    constructor(key) {\n        this._key = key;\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return crypto.utils.jwkToPkix(this._key);\n    }\n    get bytes() {\n        return pbm.PublicKey.encode({\n            Type: pbm.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    encrypt(bytes) {\n        return crypto.encrypt(this._key, bytes);\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class RsaPrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey;\n    }\n    genSecret() {\n        return crypto.getRandomValues(16);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        if (this._publicKey == null) {\n            throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');\n        }\n        return new RsaPublicKey(this._publicKey);\n    }\n    decrypt(bytes) {\n        return crypto.decrypt(this._key, bytes);\n    }\n    marshal() {\n        return crypto.utils.jwkToPkcs1(this._key);\n    }\n    get bytes() {\n        return pbm.PrivateKey.encode({\n            Type: pbm.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return uint8ArrayToString(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected PEM format\n     */\n    async export(password, format = 'pkcs-8') {\n        if (format === 'pkcs-8') {\n            const buffer = new forge.util.ByteBuffer(this.marshal());\n            const asn1 = forge.asn1.fromDer(buffer);\n            const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n            const options = {\n                algorithm: 'aes256',\n                count: 10000,\n                saltSize: 128 / 8,\n                prfAlgorithm: 'sha512'\n            };\n            return forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n        }\n        else if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport async function unmarshalRsaPrivateKey(bytes) {\n    const jwk = crypto.utils.pkcs1ToJwk(bytes);\n    const keys = await crypto.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport function unmarshalRsaPublicKey(bytes) {\n    const jwk = crypto.utils.pkixToJwk(bytes);\n    return new RsaPublicKey(jwk);\n}\nexport async function fromJwk(jwk) {\n    const keys = await crypto.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport async function generateKeyPair(bits) {\n    const keys = await crypto.generateKey(bits);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\n//# sourceMappingURL=rsa-class.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport * as secp from '@noble/secp256k1';\nimport { sha256 } from 'multiformats/hashes/sha2';\nconst PRIVATE_KEY_BYTE_LENGTH = 32;\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport function generateKey() {\n    return secp.utils.randomPrivateKey();\n}\n/**\n * Hash and sign message with private key\n */\nexport async function hashAndSign(key, msg) {\n    const { digest } = await sha256.digest(msg);\n    try {\n        return await secp.sign(digest, key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\n/**\n * Hash message and verify signature with public key\n */\nexport async function hashAndVerify(key, sig, msg) {\n    try {\n        const { digest } = await sha256.digest(msg);\n        return secp.verify(sig, digest, key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\nexport function compressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(true);\n    return point;\n}\nexport function decompressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(false);\n    return point;\n}\nexport function validatePrivateKey(key) {\n    try {\n        secp.getPublicKey(key, true);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\nexport function validatePublicKey(key) {\n    try {\n        secp.Point.fromHex(key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PUBLIC_KEY');\n    }\n}\nexport function computePublicKey(privateKey) {\n    try {\n        return secp.getPublicKey(privateKey, true);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\n//# sourceMappingURL=secp256k1.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as keysProtobuf from './keys.js';\nimport * as crypto from './secp256k1.js';\nexport class Secp256k1PublicKey {\n    _key;\n    constructor(key) {\n        crypto.validatePublicKey(key);\n        this._key = key;\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return crypto.compressPublicKey(this._key);\n    }\n    get bytes() {\n        return keysProtobuf.PublicKey.encode({\n            Type: keysProtobuf.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class Secp256k1PrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey ?? crypto.computePublicKey(key);\n        crypto.validatePrivateKey(this._key);\n        crypto.validatePublicKey(this._publicKey);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Secp256k1PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return keysProtobuf.PrivateKey.encode({\n            Type: keysProtobuf.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return uint8ArrayToString(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport function unmarshalSecp256k1PrivateKey(bytes) {\n    return new Secp256k1PrivateKey(bytes);\n}\nexport function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n    const privateKeyBytes = crypto.generateKey();\n    return new Secp256k1PrivateKey(privateKeyBytes);\n}\n//# sourceMappingURL=secp256k1-class.js.map","import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/pbe.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport * as Ed25519 from './ed25519-class.js';\nimport generateEphemeralKeyPair from './ephemeral-keys.js';\nimport { importer } from './importer.js';\nimport { keyStretcher } from './key-stretcher.js';\nimport * as keysPBM from './keys.js';\nimport * as RSA from './rsa-class.js';\nimport * as Secp256k1 from './secp256k1-class.js';\nexport { keyStretcher };\nexport { generateEphemeralKeyPair };\nexport { keysPBM };\nexport const supportedKeys = {\n    rsa: RSA,\n    ed25519: Ed25519,\n    secp256k1: Secp256k1\n};\nfunction unsupportedKey(type) {\n    const supported = Object.keys(supportedKeys).join(' / ');\n    return new CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, 'ERR_UNSUPPORTED_KEY_TYPE');\n}\nfunction typeToKey(type) {\n    type = type.toLowerCase();\n    if (type === 'rsa' || type === 'ed25519' || type === 'secp256k1') {\n        return supportedKeys[type];\n    }\n    throw unsupportedKey(type);\n}\n// Generates a keypair of the given type and bitsize\nexport async function generateKeyPair(type, bits) {\n    return typeToKey(type).generateKeyPair(bits ?? 2048);\n}\n// Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\nexport async function generateKeyPairFromSeed(type, seed, bits) {\n    if (type.toLowerCase() !== 'ed25519') {\n        throw new CodeError('Seed key derivation is unimplemented for RSA or secp256k1', 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n    }\n    return Ed25519.generateKeyPairFromSeed(seed);\n}\n// Converts a protobuf serialized public key into its\n// representative object\nexport function unmarshalPublicKey(buf) {\n    const decoded = keysPBM.PublicKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case keysPBM.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n        case keysPBM.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n        case keysPBM.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'RSA');\n    }\n}\n// Converts a public key object into a protobuf serialized public key\nexport function marshalPublicKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n// Converts a protobuf serialized private key into its\n// representative object\nexport async function unmarshalPrivateKey(buf) {\n    const decoded = keysPBM.PrivateKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case keysPBM.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n        case keysPBM.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n        case keysPBM.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'RSA');\n    }\n}\n// Converts a private key object into a protobuf serialized private key\nexport function marshalPrivateKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\nexport async function importKey(encryptedKey, password) {\n    try {\n        const key = await importer(encryptedKey, password);\n        return await unmarshalPrivateKey(key);\n    }\n    catch (_) {\n        // Ignore and try the old pem decrypt\n    }\n    // Only rsa supports pem right now\n    const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);\n    if (key === null) {\n        throw new CodeError('Cannot read the key, most likely the password is wrong or not a RSA key', 'ERR_CANNOT_DECRYPT_PEM');\n    }\n    let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n    der = uint8ArrayFromString(der.getBytes(), 'ascii');\n    return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n}\n//# sourceMappingURL=index.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.key != null && obj.key.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if ((obj.value != null && obj.value.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if ((obj.timeReceived != null && obj.timeReceived !== '')) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    key: new Uint8Array(0),\n                    value: new Uint8Array(0),\n                    timeReceived: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.bytes();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        case 5:\n                            obj.timeReceived = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return encodeMessage(obj, Record.codec());\n    };\n    Record.decode = (buf) => {\n        return decodeMessage(buf, Record.codec());\n    };\n})(Record || (Record = {}));\n//# sourceMappingURL=record.js.map","/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n    const year = time.getUTCFullYear();\n    const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(time.getUTCDate()).padStart(2, '0');\n    const hour = String(time.getUTCHours()).padStart(2, '0');\n    const minute = String(time.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n    const milliseconds = time.getUTCMilliseconds();\n    const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0');\n    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n    const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n        // 15:04:05\n        '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n        // .999999999Z\n        '\\\\.(\\\\d+)Z');\n    const m = String(time).trim().match(rfc3339Matcher);\n    if (m == null) {\n        throw new Error('Invalid format');\n    }\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const date = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    const millisecond = parseInt(m[7].slice(0, -6), 10);\n    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n//# sourceMappingURL=utils.js.map","import { Record } from './record.js';\nimport * as utils from './utils.js';\nexport class Libp2pRecord {\n    constructor(key, value, timeReceived) {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error('key must be a Uint8Array');\n        }\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('value must be a Uint8Array');\n        }\n        this.key = key;\n        this.value = value;\n        this.timeReceived = timeReceived;\n    }\n    serialize() {\n        return Record.encode(this.prepareSerialize());\n    }\n    /**\n     * Return the object format ready to be given to the protobuf library.\n     */\n    prepareSerialize() {\n        return {\n            key: this.key,\n            value: this.value,\n            timeReceived: utils.toRFC3339(this.timeReceived)\n        };\n    }\n    /**\n     * Decode a protobuf encoded record\n     */\n    static deserialize(raw) {\n        const rec = Record.decode(raw);\n        return new Libp2pRecord(rec.key, rec.value, new Date(rec.timeReceived));\n    }\n    /**\n     * Create a record from the raw object returned from the protobuf library\n     */\n    static fromDeserialized(obj) {\n        const recvtime = utils.parseRFC3339(obj.timeReceived);\n        if (obj.key == null) {\n            throw new Error('key missing from deserialized object');\n        }\n        if (obj.value == null) {\n            throw new Error('value missing from deserialized object');\n        }\n        const rec = new Libp2pRecord(obj.key, obj.value, recvtime);\n        return rec;\n    }\n}\n//# sourceMappingURL=index.js.map","export const codes = {\n    ERR_SIGNATURE_NOT_VALID: 'ERR_SIGNATURE_NOT_VALID'\n};\n//# sourceMappingURL=errors.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Envelope;\n(function (Envelope) {\n    let _codec;\n    Envelope.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.publicKey != null && obj.publicKey.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.publicKey);\n                }\n                if ((obj.payloadType != null && obj.payloadType.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.payloadType);\n                }\n                if ((obj.payload != null && obj.payload.byteLength > 0)) {\n                    w.uint32(26);\n                    w.bytes(obj.payload);\n                }\n                if ((obj.signature != null && obj.signature.byteLength > 0)) {\n                    w.uint32(42);\n                    w.bytes(obj.signature);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    publicKey: new Uint8Array(0),\n                    payloadType: new Uint8Array(0),\n                    payload: new Uint8Array(0),\n                    signature: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.payloadType = reader.bytes();\n                            break;\n                        case 3:\n                            obj.payload = reader.bytes();\n                            break;\n                        case 5:\n                            obj.signature = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Envelope.encode = (obj) => {\n        return encodeMessage(obj, Envelope.codec());\n    };\n    Envelope.decode = (buf) => {\n        return decodeMessage(buf, Envelope.codec());\n    };\n})(Envelope || (Envelope = {}));\n//# sourceMappingURL=envelope.js.map","var _a;\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { fromString as uint8arraysFromString } from 'uint8arrays/from-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { unmarshalPrivateKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { codes } from '../errors.js';\nimport { Envelope as Protobuf } from './envelope.js';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { unsigned } from 'uint8-varint';\nexport class RecordEnvelope {\n    /**\n     * The Envelope is responsible for keeping an arbitrary signed record\n     * by a libp2p peer.\n     */\n    constructor(init) {\n        const { peerId, payloadType, payload, signature } = init;\n        this.peerId = peerId;\n        this.payloadType = payloadType;\n        this.payload = payload;\n        this.signature = signature;\n    }\n    /**\n     * Marshal the envelope content\n     */\n    marshal() {\n        if (this.peerId.publicKey == null) {\n            throw new Error('Missing public key');\n        }\n        if (this.marshaled == null) {\n            this.marshaled = Protobuf.encode({\n                publicKey: this.peerId.publicKey,\n                payloadType: this.payloadType,\n                payload: this.payload.subarray(),\n                signature: this.signature\n            });\n        }\n        return this.marshaled;\n    }\n    /**\n     * Verifies if the other Envelope is identical to this one\n     */\n    equals(other) {\n        return uint8ArrayEquals(this.marshal(), other.marshal());\n    }\n    /**\n     * Validate envelope data signature for the given domain\n     */\n    async validate(domain) {\n        const signData = formatSignaturePayload(domain, this.payloadType, this.payload);\n        if (this.peerId.publicKey == null) {\n            throw new Error('Missing public key');\n        }\n        const key = unmarshalPublicKey(this.peerId.publicKey);\n        return await key.verify(signData.subarray(), this.signature);\n    }\n}\n_a = RecordEnvelope;\n/**\n * Unmarshal a serialized Envelope protobuf message\n */\nRecordEnvelope.createFromProtobuf = async (data) => {\n    const envelopeData = Protobuf.decode(data);\n    const peerId = await peerIdFromKeys(envelopeData.publicKey);\n    return new RecordEnvelope({\n        peerId,\n        payloadType: envelopeData.payloadType,\n        payload: envelopeData.payload,\n        signature: envelopeData.signature\n    });\n};\n/**\n * Seal marshals the given Record, places the marshaled bytes inside an Envelope\n * and signs it with the given peerId's private key\n */\nRecordEnvelope.seal = async (record, peerId) => {\n    if (peerId.privateKey == null) {\n        throw new Error('Missing private key');\n    }\n    const domain = record.domain;\n    const payloadType = record.codec;\n    const payload = record.marshal();\n    const signData = formatSignaturePayload(domain, payloadType, payload);\n    const key = await unmarshalPrivateKey(peerId.privateKey);\n    const signature = await key.sign(signData.subarray());\n    return new RecordEnvelope({\n        peerId,\n        payloadType,\n        payload,\n        signature\n    });\n};\n/**\n * Open and certify a given marshalled envelope.\n * Data is unmarshalled and the signature validated for the given domain.\n */\nRecordEnvelope.openAndCertify = async (data, domain) => {\n    const envelope = await RecordEnvelope.createFromProtobuf(data);\n    const valid = await envelope.validate(domain);\n    if (!valid) {\n        throw new CodeError('envelope signature is not valid for the given domain', codes.ERR_SIGNATURE_NOT_VALID);\n    }\n    return envelope;\n};\n/**\n * Helper function that prepares a Uint8Array to sign or verify a signature\n */\nconst formatSignaturePayload = (domain, payloadType, payload) => {\n    // When signing, a peer will prepare a Uint8Array by concatenating the following:\n    // - The length of the domain separation string string in bytes\n    // - The domain separation string, encoded as UTF-8\n    // - The length of the payload_type field in bytes\n    // - The value of the payload_type field\n    // - The length of the payload field in bytes\n    // - The value of the payload field\n    const domainUint8Array = uint8arraysFromString(domain);\n    const domainLength = unsigned.encode(domainUint8Array.byteLength);\n    const payloadTypeLength = unsigned.encode(payloadType.length);\n    const payloadLength = unsigned.encode(payload.length);\n    return new Uint8ArrayList(domainLength, domainUint8Array, payloadTypeLength, payloadType, payloadLength, payload);\n};\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nexport function arrayEquals(a, b) {\n    const sort = (a, b) => a.toString().localeCompare(b.toString());\n    if (a.length !== b.length) {\n        return false;\n    }\n    b.sort(sort);\n    return a.sort(sort).every((item, index) => b[index].equals(item));\n}\n//# sourceMappingURL=array-equals.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var PeerRecord;\n(function (PeerRecord) {\n    let AddressInfo;\n    (function (AddressInfo) {\n        let _codec;\n        AddressInfo.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.multiaddr);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        multiaddr: new Uint8Array(0)\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.multiaddr = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        AddressInfo.encode = (obj) => {\n            return encodeMessage(obj, AddressInfo.codec());\n        };\n        AddressInfo.decode = (buf) => {\n            return decodeMessage(buf, AddressInfo.codec());\n        };\n    })(AddressInfo = PeerRecord.AddressInfo || (PeerRecord.AddressInfo = {}));\n    let _codec;\n    PeerRecord.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.peerId != null && obj.peerId.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.peerId);\n                }\n                if ((obj.seq != null && obj.seq !== 0n)) {\n                    w.uint32(16);\n                    w.uint64(obj.seq);\n                }\n                if (obj.addresses != null) {\n                    for (const value of obj.addresses) {\n                        w.uint32(26);\n                        PeerRecord.AddressInfo.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    peerId: new Uint8Array(0),\n                    seq: 0n,\n                    addresses: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.peerId = reader.bytes();\n                            break;\n                        case 2:\n                            obj.seq = reader.uint64();\n                            break;\n                        case 3:\n                            obj.addresses.push(PeerRecord.AddressInfo.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PeerRecord.encode = (obj) => {\n        return encodeMessage(obj, PeerRecord.codec());\n    };\n    PeerRecord.decode = (buf) => {\n        return decodeMessage(buf, PeerRecord.codec());\n    };\n})(PeerRecord || (PeerRecord = {}));\n//# sourceMappingURL=peer-record.js.map","// The domain string used for peer records contained in a Envelope.\nexport const ENVELOPE_DOMAIN_PEER_RECORD = 'libp2p-peer-record';\n// The type hint used to identify peer records in a Envelope.\n// Defined in https://github.com/multiformats/multicodec/blob/master/table.csv\n// with name \"libp2p-peer-record\"\nexport const ENVELOPE_PAYLOAD_TYPE_PEER_RECORD = Uint8Array.from([3, 1]);\n//# sourceMappingURL=consts.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport { arrayEquals } from '@libp2p/utils/array-equals';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { PeerRecord as Protobuf } from './peer-record.js';\nimport { ENVELOPE_DOMAIN_PEER_RECORD, ENVELOPE_PAYLOAD_TYPE_PEER_RECORD } from './consts.js';\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nexport class PeerRecord {\n    constructor(init) {\n        this.domain = PeerRecord.DOMAIN;\n        this.codec = PeerRecord.CODEC;\n        const { peerId, multiaddrs, seqNumber } = init;\n        this.peerId = peerId;\n        this.multiaddrs = multiaddrs ?? [];\n        this.seqNumber = seqNumber ?? BigInt(Date.now());\n    }\n    /**\n     * Marshal a record to be used in an envelope\n     */\n    marshal() {\n        if (this.marshaled == null) {\n            this.marshaled = Protobuf.encode({\n                peerId: this.peerId.toBytes(),\n                seq: BigInt(this.seqNumber),\n                addresses: this.multiaddrs.map((m) => ({\n                    multiaddr: m.bytes\n                }))\n            });\n        }\n        return this.marshaled;\n    }\n    /**\n     * Returns true if `this` record equals the `other`\n     */\n    equals(other) {\n        if (!(other instanceof PeerRecord)) {\n            return false;\n        }\n        // Validate PeerId\n        if (!this.peerId.equals(other.peerId)) {\n            return false;\n        }\n        // Validate seqNumber\n        if (this.seqNumber !== other.seqNumber) {\n            return false;\n        }\n        // Validate multiaddrs\n        if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n            return false;\n        }\n        return true;\n    }\n}\n/**\n * Unmarshal Peer Record Protobuf\n */\nPeerRecord.createFromProtobuf = (buf) => {\n    const peerRecord = Protobuf.decode(buf);\n    const peerId = peerIdFromBytes(peerRecord.peerId);\n    const multiaddrs = (peerRecord.addresses ?? []).map((a) => multiaddr(a.multiaddr));\n    const seqNumber = peerRecord.seq;\n    return new PeerRecord({ peerId, multiaddrs, seqNumber });\n};\nPeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;\nPeerRecord.CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;\n//# sourceMappingURL=index.js.map","export const topologySymbol = Symbol.for('@libp2p/topology');\nexport function isTopology(other) {\n    return other != null && Boolean(other[topologySymbol]);\n}\n//# sourceMappingURL=index.js.map","import { topologySymbol as symbol } from '@libp2p/interface-registrar';\nconst noop = () => { };\nclass TopologyImpl {\n    constructor(init) {\n        this.min = init.min ?? 0;\n        this.max = init.max ?? Infinity;\n        this.peers = new Set();\n        this.onConnect = init.onConnect ?? noop;\n        this.onDisconnect = init.onDisconnect ?? noop;\n    }\n    get [Symbol.toStringTag]() {\n        return symbol.toString();\n    }\n    get [symbol]() {\n        return true;\n    }\n    async setRegistrar(registrar) {\n        this.registrar = registrar;\n    }\n    /**\n     * Notify about peer disconnected event\n     */\n    disconnect(peerId) {\n        this.onDisconnect(peerId);\n    }\n}\nexport function createTopology(init) {\n    return new TopologyImpl(init);\n}\n//# sourceMappingURL=index.js.map","/**\n * Adds types to the EventTarget class. Hopefully this won't be necessary forever.\n *\n * https://github.com/microsoft/TypeScript/issues/28357\n * https://github.com/microsoft/TypeScript/issues/43477\n * https://github.com/microsoft/TypeScript/issues/299\n * etc\n */\nexport class EventEmitter extends EventTarget {\n    #listeners = new Map();\n    listenerCount(type) {\n        const listeners = this.#listeners.get(type);\n        if (listeners == null) {\n            return 0;\n        }\n        return listeners.length;\n    }\n    addEventListener(type, listener, options) {\n        super.addEventListener(type, listener, options);\n        let list = this.#listeners.get(type);\n        if (list == null) {\n            list = [];\n            this.#listeners.set(type, list);\n        }\n        list.push({\n            callback: listener,\n            once: (options !== true && options !== false && options?.once) ?? false\n        });\n    }\n    removeEventListener(type, listener, options) {\n        super.removeEventListener(type.toString(), listener ?? null, options);\n        let list = this.#listeners.get(type);\n        if (list == null) {\n            return;\n        }\n        list = list.filter(({ callback }) => callback !== listener);\n        this.#listeners.set(type, list);\n    }\n    dispatchEvent(event) {\n        const result = super.dispatchEvent(event);\n        let list = this.#listeners.get(event.type);\n        if (list == null) {\n            return result;\n        }\n        list = list.filter(({ once }) => !once);\n        this.#listeners.set(event.type, list);\n        return result;\n    }\n    safeDispatchEvent(type, detail) {\n        return this.dispatchEvent(new CustomEvent(type, detail));\n    }\n}\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\nclass CustomEventPolyfill extends Event {\n    /** Returns any custom data event was created with. Typically used for synthetic events. */\n    detail;\n    constructor(message, data) {\n        super(message, data);\n        // @ts-expect-error could be undefined\n        this.detail = data?.detail;\n    }\n}\nexport const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill;\n//# sourceMappingURL=events.js.map","export class MessageCache {\n    /**\n     * Holds history of messages in timebounded history arrays\n     */\n    constructor(\n    /**\n     * The number of indices in the cache history used for gossiping. That means that a message\n     * won't get gossiped anymore when shift got called `gossip` many times after inserting the\n     * message in the cache.\n     */\n    gossip, historyCapacity, msgIdToStrFn) {\n        this.gossip = gossip;\n        this.msgs = new Map();\n        this.history = [];\n        /** Track with accounting of messages in the mcache that are not yet validated */\n        this.notValidatedCount = 0;\n        this.msgIdToStrFn = msgIdToStrFn;\n        for (let i = 0; i < historyCapacity; i++) {\n            this.history[i] = [];\n        }\n    }\n    get size() {\n        return this.msgs.size;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     * Returns true if the message is not known and is inserted in the cache\n     */\n    put(messageId, msg, validated = false) {\n        const { msgIdStr } = messageId;\n        // Don't add duplicate entries to the cache.\n        if (this.msgs.has(msgIdStr)) {\n            return false;\n        }\n        this.msgs.set(msgIdStr, {\n            message: msg,\n            validated,\n            originatingPeers: new Set(),\n            iwantCounts: new Map()\n        });\n        this.history[0].push({ ...messageId, topic: msg.topic });\n        if (!validated) {\n            this.notValidatedCount++;\n        }\n        return true;\n    }\n    observeDuplicate(msgId, fromPeerIdStr) {\n        const entry = this.msgs.get(msgId);\n        if (entry &&\n            // if the message is already validated, we don't need to store extra peers sending us\n            // duplicates as the message has already been forwarded\n            !entry.validated) {\n            entry.originatingPeers.add(fromPeerIdStr);\n        }\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     */\n    get(msgId) {\n        return this.msgs.get(this.msgIdToStrFn(msgId))?.message;\n    }\n    /**\n     * Increases the iwant count for the given message by one and returns the message together\n     * with the iwant if the message exists.\n     */\n    getWithIWantCount(msgIdStr, p) {\n        const msg = this.msgs.get(msgIdStr);\n        if (!msg) {\n            return null;\n        }\n        const count = (msg.iwantCounts.get(p) ?? 0) + 1;\n        msg.iwantCounts.set(p, count);\n        return { msg: msg.message, count };\n    }\n    /**\n     * Retrieves a list of message IDs for a set of topics\n     */\n    getGossipIDs(topics) {\n        const msgIdsByTopic = new Map();\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                const msg = this.msgs.get(entry.msgIdStr);\n                if (msg && msg.validated && topics.has(entry.topic)) {\n                    let msgIds = msgIdsByTopic.get(entry.topic);\n                    if (!msgIds) {\n                        msgIds = [];\n                        msgIdsByTopic.set(entry.topic, msgIds);\n                    }\n                    msgIds.push(entry.msgId);\n                }\n            });\n        }\n        return msgIdsByTopic;\n    }\n    /**\n     * Gets a message with msgId and tags it as validated.\n     * This function also returns the known peers that have sent us this message. This is used to\n     * prevent us sending redundant messages to peers who have already propagated it.\n     */\n    validate(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (!entry) {\n            return null;\n        }\n        if (!entry.validated) {\n            this.notValidatedCount--;\n        }\n        const { message, originatingPeers } = entry;\n        entry.validated = true;\n        // Clear the known peers list (after a message is validated, it is forwarded and we no\n        // longer need to store the originating peers).\n        entry.originatingPeers = new Set();\n        return { message, originatingPeers };\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     */\n    shift() {\n        const lastCacheEntries = this.history[this.history.length - 1];\n        lastCacheEntries.forEach((cacheEntry) => {\n            const entry = this.msgs.get(cacheEntry.msgIdStr);\n            if (entry) {\n                this.msgs.delete(cacheEntry.msgIdStr);\n                if (!entry.validated) {\n                    this.notValidatedCount--;\n                }\n            }\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n    remove(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (!entry) {\n            return null;\n        }\n        // Keep the message on the history vector, it will be dropped on a shift()\n        this.msgs.delete(msgId);\n        return entry;\n    }\n}\n//# sourceMappingURL=message-cache.js.map","// @ts-nocheck\n/*eslint-disable*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n    $root.RPC = (function() {\n\n        /**\n         * Properties of a RPC.\n         * @exports IRPC\n         * @interface IRPC\n         * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n         * @property {Array.<RPC.IMessage>|null} [messages] RPC messages\n         * @property {RPC.IControlMessage|null} [control] RPC control\n         */\n\n        /**\n         * Constructs a new RPC.\n         * @exports RPC\n         * @classdesc Represents a RPC.\n         * @implements IRPC\n         * @constructor\n         * @param {IRPC=} [p] Properties to set\n         */\n        function RPC(p) {\n            this.subscriptions = [];\n            this.messages = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * RPC subscriptions.\n         * @member {Array.<RPC.ISubOpts>} subscriptions\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.subscriptions = $util.emptyArray;\n\n        /**\n         * RPC messages.\n         * @member {Array.<RPC.IMessage>} messages\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.messages = $util.emptyArray;\n\n        /**\n         * RPC control.\n         * @member {RPC.IControlMessage|null|undefined} control\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.control = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * RPC _control.\n         * @member {\"control\"|undefined} _control\n         * @memberof RPC\n         * @instance\n         */\n        Object.defineProperty(RPC.prototype, \"_control\", {\n            get: $util.oneOfGetter($oneOfFields = [\"control\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n         * @function encode\n         * @memberof RPC\n         * @static\n         * @param {IRPC} m RPC message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RPC.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.subscriptions != null && m.subscriptions.length) {\n                for (var i = 0; i < m.subscriptions.length; ++i)\n                    $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.messages != null && m.messages.length) {\n                for (var i = 0; i < m.messages.length; ++i)\n                    $root.RPC.Message.encode(m.messages[i], w.uint32(18).fork()).ldelim();\n            }\n            if (m.control != null && Object.hasOwnProperty.call(m, \"control\"))\n                $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n\n        /**\n         * Decodes a RPC message from the specified reader or buffer.\n         * @function decode\n         * @memberof RPC\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {RPC} RPC\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RPC.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.subscriptions && m.subscriptions.length))\n                        m.subscriptions = [];\n                    m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    if (!(m.messages && m.messages.length))\n                        m.messages = [];\n                    m.messages.push($root.RPC.Message.decode(r, r.uint32()));\n                    break;\n                case 3:\n                    m.control = $root.RPC.ControlMessage.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof RPC\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {RPC} RPC\n         */\n        RPC.fromObject = function fromObject(d) {\n            if (d instanceof $root.RPC)\n                return d;\n            var m = new $root.RPC();\n            if (d.subscriptions) {\n                if (!Array.isArray(d.subscriptions))\n                    throw TypeError(\".RPC.subscriptions: array expected\");\n                m.subscriptions = [];\n                for (var i = 0; i < d.subscriptions.length; ++i) {\n                    if (typeof d.subscriptions[i] !== \"object\")\n                        throw TypeError(\".RPC.subscriptions: object expected\");\n                    m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n                }\n            }\n            if (d.messages) {\n                if (!Array.isArray(d.messages))\n                    throw TypeError(\".RPC.messages: array expected\");\n                m.messages = [];\n                for (var i = 0; i < d.messages.length; ++i) {\n                    if (typeof d.messages[i] !== \"object\")\n                        throw TypeError(\".RPC.messages: object expected\");\n                    m.messages[i] = $root.RPC.Message.fromObject(d.messages[i]);\n                }\n            }\n            if (d.control != null) {\n                if (typeof d.control !== \"object\")\n                    throw TypeError(\".RPC.control: object expected\");\n                m.control = $root.RPC.ControlMessage.fromObject(d.control);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a RPC message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof RPC\n         * @static\n         * @param {RPC} m RPC\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RPC.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.subscriptions = [];\n                d.messages = [];\n            }\n            if (m.subscriptions && m.subscriptions.length) {\n                d.subscriptions = [];\n                for (var j = 0; j < m.subscriptions.length; ++j) {\n                    d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n                }\n            }\n            if (m.messages && m.messages.length) {\n                d.messages = [];\n                for (var j = 0; j < m.messages.length; ++j) {\n                    d.messages[j] = $root.RPC.Message.toObject(m.messages[j], o);\n                }\n            }\n            if (m.control != null && m.hasOwnProperty(\"control\")) {\n                d.control = $root.RPC.ControlMessage.toObject(m.control, o);\n                if (o.oneofs)\n                    d._control = \"control\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this RPC to JSON.\n         * @function toJSON\n         * @memberof RPC\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RPC.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        RPC.SubOpts = (function() {\n\n            /**\n             * Properties of a SubOpts.\n             * @memberof RPC\n             * @interface ISubOpts\n             * @property {boolean|null} [subscribe] SubOpts subscribe\n             * @property {string|null} [topic] SubOpts topic\n             */\n\n            /**\n             * Constructs a new SubOpts.\n             * @memberof RPC\n             * @classdesc Represents a SubOpts.\n             * @implements ISubOpts\n             * @constructor\n             * @param {RPC.ISubOpts=} [p] Properties to set\n             */\n            function SubOpts(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * SubOpts subscribe.\n             * @member {boolean|null|undefined} subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.subscribe = null;\n\n            /**\n             * SubOpts topic.\n             * @member {string|null|undefined} topic\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.topic = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * SubOpts _subscribe.\n             * @member {\"subscribe\"|undefined} _subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n                get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * SubOpts _topic.\n             * @member {\"topic\"|undefined} _topic\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_topic\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topic\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SubOpts.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\"))\n                    w.uint32(8).bool(m.subscribe);\n                if (m.topic != null && Object.hasOwnProperty.call(m, \"topic\"))\n                    w.uint32(18).string(m.topic);\n                return w;\n            };\n\n            /**\n             * Decodes a SubOpts message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.SubOpts} SubOpts\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SubOpts.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.subscribe = r.bool();\n                        break;\n                    case 2:\n                        m.topic = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.SubOpts} SubOpts\n             */\n            SubOpts.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.SubOpts)\n                    return d;\n                var m = new $root.RPC.SubOpts();\n                if (d.subscribe != null) {\n                    m.subscribe = Boolean(d.subscribe);\n                }\n                if (d.topic != null) {\n                    m.topic = String(d.topic);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.SubOpts} m SubOpts\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SubOpts.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n                    d.subscribe = m.subscribe;\n                    if (o.oneofs)\n                        d._subscribe = \"subscribe\";\n                }\n                if (m.topic != null && m.hasOwnProperty(\"topic\")) {\n                    d.topic = m.topic;\n                    if (o.oneofs)\n                        d._topic = \"topic\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this SubOpts to JSON.\n             * @function toJSON\n             * @memberof RPC.SubOpts\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SubOpts.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SubOpts;\n        })();\n\n        RPC.Message = (function() {\n\n            /**\n             * Properties of a Message.\n             * @memberof RPC\n             * @interface IMessage\n             * @property {Uint8Array|null} [from] Message from\n             * @property {Uint8Array|null} [data] Message data\n             * @property {Uint8Array|null} [seqno] Message seqno\n             * @property {string} topic Message topic\n             * @property {Uint8Array|null} [signature] Message signature\n             * @property {Uint8Array|null} [key] Message key\n             */\n\n            /**\n             * Constructs a new Message.\n             * @memberof RPC\n             * @classdesc Represents a Message.\n             * @implements IMessage\n             * @constructor\n             * @param {RPC.IMessage=} [p] Properties to set\n             */\n            function Message(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Message from.\n             * @member {Uint8Array|null|undefined} from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.from = null;\n\n            /**\n             * Message data.\n             * @member {Uint8Array|null|undefined} data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.data = null;\n\n            /**\n             * Message seqno.\n             * @member {Uint8Array|null|undefined} seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.seqno = null;\n\n            /**\n             * Message topic.\n             * @member {string} topic\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.topic = \"\";\n\n            /**\n             * Message signature.\n             * @member {Uint8Array|null|undefined} signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.signature = null;\n\n            /**\n             * Message key.\n             * @member {Uint8Array|null|undefined} key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.key = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Message _from.\n             * @member {\"from\"|undefined} _from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_from\", {\n                get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _data.\n             * @member {\"data\"|undefined} _data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_data\", {\n                get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _seqno.\n             * @member {\"seqno\"|undefined} _seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_seqno\", {\n                get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _signature.\n             * @member {\"signature\"|undefined} _signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_signature\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Message _key.\n             * @member {\"key\"|undefined} _key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_key\", {\n                get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.IMessage} m Message message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Message.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.from != null && Object.hasOwnProperty.call(m, \"from\"))\n                    w.uint32(10).bytes(m.from);\n                if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                    w.uint32(18).bytes(m.data);\n                if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\"))\n                    w.uint32(26).bytes(m.seqno);\n                w.uint32(34).string(m.topic);\n                if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n                    w.uint32(42).bytes(m.signature);\n                if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                    w.uint32(50).bytes(m.key);\n                return w;\n            };\n\n            /**\n             * Decodes a Message message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.Message\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.Message} Message\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Message.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.from = r.bytes();\n                        break;\n                    case 2:\n                        m.data = r.bytes();\n                        break;\n                    case 3:\n                        m.seqno = r.bytes();\n                        break;\n                    case 4:\n                        m.topic = r.string();\n                        break;\n                    case 5:\n                        m.signature = r.bytes();\n                        break;\n                    case 6:\n                        m.key = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                if (!m.hasOwnProperty(\"topic\"))\n                    throw $util.ProtocolError(\"missing required 'topic'\", { instance: m });\n                return m;\n            };\n\n            /**\n             * Creates a Message message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.Message\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.Message} Message\n             */\n            Message.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.Message)\n                    return d;\n                var m = new $root.RPC.Message();\n                if (d.from != null) {\n                    if (typeof d.from === \"string\")\n                        $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);\n                    else if (d.from.length)\n                        m.from = d.from;\n                }\n                if (d.data != null) {\n                    if (typeof d.data === \"string\")\n                        $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                    else if (d.data.length)\n                        m.data = d.data;\n                }\n                if (d.seqno != null) {\n                    if (typeof d.seqno === \"string\")\n                        $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);\n                    else if (d.seqno.length)\n                        m.seqno = d.seqno;\n                }\n                if (d.topic != null) {\n                    m.topic = String(d.topic);\n                }\n                if (d.signature != null) {\n                    if (typeof d.signature === \"string\")\n                        $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n                    else if (d.signature.length)\n                        m.signature = d.signature;\n                }\n                if (d.key != null) {\n                    if (typeof d.key === \"string\")\n                        $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);\n                    else if (d.key.length)\n                        m.key = d.key;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Message message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.Message} m Message\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Message.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.topic = \"\";\n                }\n                if (m.from != null && m.hasOwnProperty(\"from\")) {\n                    d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n                    if (o.oneofs)\n                        d._from = \"from\";\n                }\n                if (m.data != null && m.hasOwnProperty(\"data\")) {\n                    d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n                    if (o.oneofs)\n                        d._data = \"data\";\n                }\n                if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n                    d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n                    if (o.oneofs)\n                        d._seqno = \"seqno\";\n                }\n                if (m.topic != null && m.hasOwnProperty(\"topic\")) {\n                    d.topic = m.topic;\n                }\n                if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n                    d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n                    if (o.oneofs)\n                        d._signature = \"signature\";\n                }\n                if (m.key != null && m.hasOwnProperty(\"key\")) {\n                    d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n                    if (o.oneofs)\n                        d._key = \"key\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Message to JSON.\n             * @function toJSON\n             * @memberof RPC.Message\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Message.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Message;\n        })();\n\n        RPC.ControlMessage = (function() {\n\n            /**\n             * Properties of a ControlMessage.\n             * @memberof RPC\n             * @interface IControlMessage\n             * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave\n             * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant\n             * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft\n             * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune\n             */\n\n            /**\n             * Constructs a new ControlMessage.\n             * @memberof RPC\n             * @classdesc Represents a ControlMessage.\n             * @implements IControlMessage\n             * @constructor\n             * @param {RPC.IControlMessage=} [p] Properties to set\n             */\n            function ControlMessage(p) {\n                this.ihave = [];\n                this.iwant = [];\n                this.graft = [];\n                this.prune = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlMessage ihave.\n             * @member {Array.<RPC.IControlIHave>} ihave\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.ihave = $util.emptyArray;\n\n            /**\n             * ControlMessage iwant.\n             * @member {Array.<RPC.IControlIWant>} iwant\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.iwant = $util.emptyArray;\n\n            /**\n             * ControlMessage graft.\n             * @member {Array.<RPC.IControlGraft>} graft\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.graft = $util.emptyArray;\n\n            /**\n             * ControlMessage prune.\n             * @member {Array.<RPC.IControlPrune>} prune\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.prune = $util.emptyArray;\n\n            /**\n             * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlMessage.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.ihave != null && m.ihave.length) {\n                    for (var i = 0; i < m.ihave.length; ++i)\n                        $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();\n                }\n                if (m.iwant != null && m.iwant.length) {\n                    for (var i = 0; i < m.iwant.length; ++i)\n                        $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.graft != null && m.graft.length) {\n                    for (var i = 0; i < m.graft.length; ++i)\n                        $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();\n                }\n                if (m.prune != null && m.prune.length) {\n                    for (var i = 0; i < m.prune.length; ++i)\n                        $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlMessage message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlMessage} ControlMessage\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlMessage.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlMessage();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.ihave && m.ihave.length))\n                            m.ihave = [];\n                        m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));\n                        break;\n                    case 2:\n                        if (!(m.iwant && m.iwant.length))\n                            m.iwant = [];\n                        m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        if (!(m.graft && m.graft.length))\n                            m.graft = [];\n                        m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));\n                        break;\n                    case 4:\n                        if (!(m.prune && m.prune.length))\n                            m.prune = [];\n                        m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlMessage} ControlMessage\n             */\n            ControlMessage.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlMessage)\n                    return d;\n                var m = new $root.RPC.ControlMessage();\n                if (d.ihave) {\n                    if (!Array.isArray(d.ihave))\n                        throw TypeError(\".RPC.ControlMessage.ihave: array expected\");\n                    m.ihave = [];\n                    for (var i = 0; i < d.ihave.length; ++i) {\n                        if (typeof d.ihave[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.ihave: object expected\");\n                        m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);\n                    }\n                }\n                if (d.iwant) {\n                    if (!Array.isArray(d.iwant))\n                        throw TypeError(\".RPC.ControlMessage.iwant: array expected\");\n                    m.iwant = [];\n                    for (var i = 0; i < d.iwant.length; ++i) {\n                        if (typeof d.iwant[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.iwant: object expected\");\n                        m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);\n                    }\n                }\n                if (d.graft) {\n                    if (!Array.isArray(d.graft))\n                        throw TypeError(\".RPC.ControlMessage.graft: array expected\");\n                    m.graft = [];\n                    for (var i = 0; i < d.graft.length; ++i) {\n                        if (typeof d.graft[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.graft: object expected\");\n                        m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);\n                    }\n                }\n                if (d.prune) {\n                    if (!Array.isArray(d.prune))\n                        throw TypeError(\".RPC.ControlMessage.prune: array expected\");\n                    m.prune = [];\n                    for (var i = 0; i < d.prune.length; ++i) {\n                        if (typeof d.prune[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.prune: object expected\");\n                        m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.ControlMessage} m ControlMessage\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlMessage.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.ihave = [];\n                    d.iwant = [];\n                    d.graft = [];\n                    d.prune = [];\n                }\n                if (m.ihave && m.ihave.length) {\n                    d.ihave = [];\n                    for (var j = 0; j < m.ihave.length; ++j) {\n                        d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);\n                    }\n                }\n                if (m.iwant && m.iwant.length) {\n                    d.iwant = [];\n                    for (var j = 0; j < m.iwant.length; ++j) {\n                        d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);\n                    }\n                }\n                if (m.graft && m.graft.length) {\n                    d.graft = [];\n                    for (var j = 0; j < m.graft.length; ++j) {\n                        d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);\n                    }\n                }\n                if (m.prune && m.prune.length) {\n                    d.prune = [];\n                    for (var j = 0; j < m.prune.length; ++j) {\n                        d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlMessage to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlMessage\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlMessage.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlMessage;\n        })();\n\n        RPC.ControlIHave = (function() {\n\n            /**\n             * Properties of a ControlIHave.\n             * @memberof RPC\n             * @interface IControlIHave\n             * @property {string|null} [topicID] ControlIHave topicID\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs\n             */\n\n            /**\n             * Constructs a new ControlIHave.\n             * @memberof RPC\n             * @classdesc Represents a ControlIHave.\n             * @implements IControlIHave\n             * @constructor\n             * @param {RPC.IControlIHave=} [p] Properties to set\n             */\n            function ControlIHave(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlIHave topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.topicID = null;\n\n            /**\n             * ControlIHave messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.messageIDs = $util.emptyArray;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlIHave _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            Object.defineProperty(ControlIHave.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIHave.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(18).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlIHave message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIHave} ControlIHave\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIHave.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIHave();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIHave} ControlIHave\n             */\n            ControlIHave.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIHave)\n                    return d;\n                var m = new $root.RPC.ControlIHave();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIHave.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.ControlIHave} m ControlIHave\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIHave.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlIHave to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIHave\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIHave.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlIHave;\n        })();\n\n        RPC.ControlIWant = (function() {\n\n            /**\n             * Properties of a ControlIWant.\n             * @memberof RPC\n             * @interface IControlIWant\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs\n             */\n\n            /**\n             * Constructs a new ControlIWant.\n             * @memberof RPC\n             * @classdesc Represents a ControlIWant.\n             * @implements IControlIWant\n             * @constructor\n             * @param {RPC.IControlIWant=} [p] Properties to set\n             */\n            function ControlIWant(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlIWant messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIWant\n             * @instance\n             */\n            ControlIWant.prototype.messageIDs = $util.emptyArray;\n\n            /**\n             * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIWant.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(10).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n\n            /**\n             * Decodes a ControlIWant message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIWant} ControlIWant\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIWant.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIWant();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIWant} ControlIWant\n             */\n            ControlIWant.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIWant)\n                    return d;\n                var m = new $root.RPC.ControlIWant();\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIWant.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.ControlIWant} m ControlIWant\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIWant.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlIWant to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIWant\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIWant.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlIWant;\n        })();\n\n        RPC.ControlGraft = (function() {\n\n            /**\n             * Properties of a ControlGraft.\n             * @memberof RPC\n             * @interface IControlGraft\n             * @property {string|null} [topicID] ControlGraft topicID\n             */\n\n            /**\n             * Constructs a new ControlGraft.\n             * @memberof RPC\n             * @classdesc Represents a ControlGraft.\n             * @implements IControlGraft\n             * @constructor\n             * @param {RPC.IControlGraft=} [p] Properties to set\n             */\n            function ControlGraft(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlGraft topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            ControlGraft.prototype.topicID = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlGraft _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            Object.defineProperty(ControlGraft.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlGraft.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                return w;\n            };\n\n            /**\n             * Decodes a ControlGraft message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlGraft} ControlGraft\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlGraft.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlGraft();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlGraft} ControlGraft\n             */\n            ControlGraft.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlGraft)\n                    return d;\n                var m = new $root.RPC.ControlGraft();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.ControlGraft} m ControlGraft\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlGraft.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlGraft to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlGraft\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlGraft.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlGraft;\n        })();\n\n        RPC.ControlPrune = (function() {\n\n            /**\n             * Properties of a ControlPrune.\n             * @memberof RPC\n             * @interface IControlPrune\n             * @property {string|null} [topicID] ControlPrune topicID\n             * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers\n             * @property {number|null} [backoff] ControlPrune backoff\n             */\n\n            /**\n             * Constructs a new ControlPrune.\n             * @memberof RPC\n             * @classdesc Represents a ControlPrune.\n             * @implements IControlPrune\n             * @constructor\n             * @param {RPC.IControlPrune=} [p] Properties to set\n             */\n            function ControlPrune(p) {\n                this.peers = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * ControlPrune topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.topicID = null;\n\n            /**\n             * ControlPrune peers.\n             * @member {Array.<RPC.IPeerInfo>} peers\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.peers = $util.emptyArray;\n\n            /**\n             * ControlPrune backoff.\n             * @member {number|null|undefined} backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.backoff = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ControlPrune _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * ControlPrune _backoff.\n             * @member {\"backoff\"|undefined} _backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_backoff\", {\n                get: $util.oneOfGetter($oneOfFields = [\"backoff\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlPrune.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.peers != null && m.peers.length) {\n                    for (var i = 0; i < m.peers.length; ++i)\n                        $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.backoff != null && Object.hasOwnProperty.call(m, \"backoff\"))\n                    w.uint32(24).uint64(m.backoff);\n                return w;\n            };\n\n            /**\n             * Decodes a ControlPrune message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlPrune} ControlPrune\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlPrune.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlPrune();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.peers && m.peers.length))\n                            m.peers = [];\n                        m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        m.backoff = r.uint64();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlPrune} ControlPrune\n             */\n            ControlPrune.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlPrune)\n                    return d;\n                var m = new $root.RPC.ControlPrune();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.peers) {\n                    if (!Array.isArray(d.peers))\n                        throw TypeError(\".RPC.ControlPrune.peers: array expected\");\n                    m.peers = [];\n                    for (var i = 0; i < d.peers.length; ++i) {\n                        if (typeof d.peers[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlPrune.peers: object expected\");\n                        m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);\n                    }\n                }\n                if (d.backoff != null) {\n                    if ($util.Long)\n                        (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;\n                    else if (typeof d.backoff === \"string\")\n                        m.backoff = parseInt(d.backoff, 10);\n                    else if (typeof d.backoff === \"number\")\n                        m.backoff = d.backoff;\n                    else if (typeof d.backoff === \"object\")\n                        m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.ControlPrune} m ControlPrune\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlPrune.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.peers = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.peers && m.peers.length) {\n                    d.peers = [];\n                    for (var j = 0; j < m.peers.length; ++j) {\n                        d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);\n                    }\n                }\n                if (m.backoff != null && m.hasOwnProperty(\"backoff\")) {\n                    if (typeof m.backoff === \"number\")\n                        d.backoff = o.longs === String ? String(m.backoff) : m.backoff;\n                    else\n                        d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;\n                    if (o.oneofs)\n                        d._backoff = \"backoff\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this ControlPrune to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlPrune\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlPrune.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ControlPrune;\n        })();\n\n        RPC.PeerInfo = (function() {\n\n            /**\n             * Properties of a PeerInfo.\n             * @memberof RPC\n             * @interface IPeerInfo\n             * @property {Uint8Array|null} [peerID] PeerInfo peerID\n             * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord\n             */\n\n            /**\n             * Constructs a new PeerInfo.\n             * @memberof RPC\n             * @classdesc Represents a PeerInfo.\n             * @implements IPeerInfo\n             * @constructor\n             * @param {RPC.IPeerInfo=} [p] Properties to set\n             */\n            function PeerInfo(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * PeerInfo peerID.\n             * @member {Uint8Array|null|undefined} peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.peerID = null;\n\n            /**\n             * PeerInfo signedPeerRecord.\n             * @member {Uint8Array|null|undefined} signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.signedPeerRecord = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * PeerInfo _peerID.\n             * @member {\"peerID\"|undefined} _peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_peerID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"peerID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * PeerInfo _signedPeerRecord.\n             * @member {\"signedPeerRecord\"|undefined} _signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_signedPeerRecord\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signedPeerRecord\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PeerInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.peerID != null && Object.hasOwnProperty.call(m, \"peerID\"))\n                    w.uint32(10).bytes(m.peerID);\n                if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\"))\n                    w.uint32(18).bytes(m.signedPeerRecord);\n                return w;\n            };\n\n            /**\n             * Decodes a PeerInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.PeerInfo} PeerInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PeerInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.PeerInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.peerID = r.bytes();\n                        break;\n                    case 2:\n                        m.signedPeerRecord = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.PeerInfo} PeerInfo\n             */\n            PeerInfo.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.PeerInfo)\n                    return d;\n                var m = new $root.RPC.PeerInfo();\n                if (d.peerID != null) {\n                    if (typeof d.peerID === \"string\")\n                        $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);\n                    else if (d.peerID.length)\n                        m.peerID = d.peerID;\n                }\n                if (d.signedPeerRecord != null) {\n                    if (typeof d.signedPeerRecord === \"string\")\n                        $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);\n                    else if (d.signedPeerRecord.length)\n                        m.signedPeerRecord = d.signedPeerRecord;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.PeerInfo} m PeerInfo\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            PeerInfo.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.peerID != null && m.hasOwnProperty(\"peerID\")) {\n                    d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;\n                    if (o.oneofs)\n                        d._peerID = \"peerID\";\n                }\n                if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n                    d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n                    if (o.oneofs)\n                        d._signedPeerRecord = \"signedPeerRecord\";\n                }\n                return d;\n            };\n\n            /**\n             * Converts this PeerInfo to JSON.\n             * @function toJSON\n             * @memberof RPC.PeerInfo\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            PeerInfo.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return PeerInfo;\n        })();\n\n        return RPC;\n    })();\n\n    return $root;\n});\n","import cjs from \"./rpc.cjs\"\n\nexport const {RPC} = cjs\n","export const second = 1000;\nexport const minute = 60 * second;\n// Protocol identifiers\nexport const FloodsubID = '/floodsub/1.0.0';\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */\nexport const GossipsubIDv10 = '/meshsub/1.0.0';\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */\nexport const GossipsubIDv11 = '/meshsub/1.1.0';\n// Overlay parameters\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */\nexport const GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */\nexport const GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */\nexport const GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */\nexport const GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */\nexport const GossipsubDout = 2;\n// Gossip parameters\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */\nexport const GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */\nexport const GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */\nexport const GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */\nexport const GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */\nexport const GossipsubGossipRetransmission = 3;\n// Heartbeat interval\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */\nexport const GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */\nexport const GossipsubHeartbeatInterval = second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */\nexport const GossipsubFanoutTTL = minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */\nexport const GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */\nexport const GossipsubPruneBackoff = minute;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */\nexport const GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */\nexport const GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */\nexport const GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */\nexport const GossipsubConnectionTimeout = 30 * second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */\nexport const GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */\nexport const GossipsubDirectConnectInitialDelay = second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */\nexport const GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */\nexport const GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */\nexport const GossipsubGraftFloodThreshold = 10 * second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */\nexport const GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */\nexport const GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */\nexport const GossipsubIWantFollowupTime = 3 * second;\n/**\n * Time in milliseconds to keep message ids in the seen cache\n */\nexport const GossipsubSeenTTL = 2 * minute;\nexport const TimeCacheDuration = 120 * 1000;\nexport const ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';\nexport const ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';\n/**\n * If peer score is better than this, we accept messages from this peer\n * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.\n **/\nexport const ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this\n * number of messages from that peer.\n */\nexport const ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from\n * this peer up to this time duration.\n */\nexport const ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;\n/**\n * The default MeshMessageDeliveriesWindow to be used in metrics.\n */\nexport const DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS = 1000;\n//# sourceMappingURL=constants.js.map","/**\n * Pseudo-randomly shuffles an array\n *\n * Mutates the input array\n */\nexport function shuffle(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const randInt = () => {\n        return Math.floor(Math.random() * Math.floor(arr.length));\n    };\n    for (let i = 0; i < arr.length; i++) {\n        const j = randInt();\n        const tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    return arr;\n}\n//# sourceMappingURL=shuffle.js.map","import { toString } from 'uint8arrays/to-string';\n/**\n * Browser friendly function to convert Uint8Array message id to base64 string.\n */\nexport function messageIdToString(msgId) {\n    return toString(msgId, 'base64');\n}\n//# sourceMappingURL=messageIdToString.js.map","/**\n * On the producing side:\n * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n *\n * On the consuming side:\n * * Enforce the fields to be present, reject otherwise.\n * * Propagate only if the fields are valid and signature can be verified, reject otherwise.\n */\nexport const StrictSign = 'StrictSign';\n/**\n * On the producing side:\n * * Build messages without the signature, key, from and seqno fields.\n * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n *\n * On the consuming side:\n * * Enforce the fields to be absent, reject otherwise.\n * * Propagate only if the fields are absent, reject otherwise.\n * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n */\nexport const StrictNoSign = 'StrictNoSign';\nexport var TopicValidatorResult;\n(function (TopicValidatorResult) {\n    /**\n     * The message is considered valid, and it should be delivered and forwarded to the network\n     */\n    TopicValidatorResult[\"Accept\"] = \"accept\";\n    /**\n     * The message is neither delivered nor forwarded to the network\n     */\n    TopicValidatorResult[\"Ignore\"] = \"ignore\";\n    /**\n     * The message is considered invalid, and it should be rejected\n     */\n    TopicValidatorResult[\"Reject\"] = \"reject\";\n})(TopicValidatorResult || (TopicValidatorResult = {}));\n//# sourceMappingURL=index.js.map","import { TopicValidatorResult } from '@libp2p/interface-pubsub';\nexport var SignaturePolicy;\n(function (SignaturePolicy) {\n    /**\n     * On the producing side:\n     * - Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be present, reject otherwise.\n     * - Propagate only if the fields are valid and signature can be verified, reject otherwise.\n     */\n    SignaturePolicy[\"StrictSign\"] = \"StrictSign\";\n    /**\n     * On the producing side:\n     * - Build messages without the signature, key, from and seqno fields.\n     * - The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be absent, reject otherwise.\n     * - Propagate only if the fields are absent, reject otherwise.\n     * - A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n     */\n    SignaturePolicy[\"StrictNoSign\"] = \"StrictNoSign\";\n})(SignaturePolicy || (SignaturePolicy = {}));\nexport var PublishConfigType;\n(function (PublishConfigType) {\n    PublishConfigType[PublishConfigType[\"Signing\"] = 0] = \"Signing\";\n    PublishConfigType[PublishConfigType[\"Anonymous\"] = 1] = \"Anonymous\";\n})(PublishConfigType || (PublishConfigType = {}));\nexport var RejectReason;\n(function (RejectReason) {\n    /**\n     * The message failed the configured validation during decoding.\n     * SelfOrigin is considered a ValidationError\n     */\n    RejectReason[\"Error\"] = \"error\";\n    /**\n     * Custom validator fn reported status IGNORE.\n     */\n    RejectReason[\"Ignore\"] = \"ignore\";\n    /**\n     * Custom validator fn reported status REJECT.\n     */\n    RejectReason[\"Reject\"] = \"reject\";\n    /**\n     * The peer that sent the message OR the source from field is blacklisted.\n     * Causes messages to be ignored, not penalized, neither do score record creation.\n     */\n    RejectReason[\"Blacklisted\"] = \"blacklisted\";\n})(RejectReason || (RejectReason = {}));\nexport var ValidateError;\n(function (ValidateError) {\n    /// The message has an invalid signature,\n    ValidateError[\"InvalidSignature\"] = \"invalid_signature\";\n    /// The sequence number was the incorrect size\n    ValidateError[\"InvalidSeqno\"] = \"invalid_seqno\";\n    /// The PeerId was invalid\n    ValidateError[\"InvalidPeerId\"] = \"invalid_peerid\";\n    /// Signature existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SignaturePresent\"] = \"signature_present\";\n    /// Sequence number existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SeqnoPresent\"] = \"seqno_present\";\n    /// Message source existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"FromPresent\"] = \"from_present\";\n    /// The data transformation failed.\n    ValidateError[\"TransformFailed\"] = \"transform_failed\";\n})(ValidateError || (ValidateError = {}));\nexport var MessageStatus;\n(function (MessageStatus) {\n    MessageStatus[\"duplicate\"] = \"duplicate\";\n    MessageStatus[\"invalid\"] = \"invalid\";\n    MessageStatus[\"valid\"] = \"valid\";\n})(MessageStatus || (MessageStatus = {}));\n/**\n * Typesafe conversion of MessageAcceptance -> RejectReason. TS ensures all values covered\n */\nexport function rejectReasonFromAcceptance(acceptance) {\n    switch (acceptance) {\n        case TopicValidatorResult.Ignore:\n            return RejectReason.Ignore;\n        case TopicValidatorResult.Reject:\n            return RejectReason.Reject;\n    }\n}\n//# sourceMappingURL=types.js.map","import { unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { StrictSign, StrictNoSign } from '@libp2p/interface-pubsub';\nimport { PublishConfigType } from '../types.js';\n/**\n * Prepare a PublishConfig object from a PeerId.\n */\nexport async function getPublishConfigFromPeerId(signaturePolicy, peerId) {\n    switch (signaturePolicy) {\n        case StrictSign: {\n            if (!peerId) {\n                throw Error('Must provide PeerId');\n            }\n            if (peerId.privateKey == null) {\n                throw Error('Cannot sign message, no private key present');\n            }\n            if (peerId.publicKey == null) {\n                throw Error('Cannot sign message, no public key present');\n            }\n            // Transform privateKey once at initialization time instead of once per message\n            const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n            return {\n                type: PublishConfigType.Signing,\n                author: peerId,\n                key: peerId.publicKey,\n                privateKey\n            };\n        }\n        case StrictNoSign:\n            return {\n                type: PublishConfigType.Anonymous\n            };\n        default:\n            throw new Error(`Unknown signature policy \"${signaturePolicy}\"`);\n    }\n}\n//# sourceMappingURL=publishConfig.js.map","export const ERR_INVALID_PEER_SCORE_PARAMS = 'ERR_INVALID_PEER_SCORE_PARAMS';\nexport const ERR_INVALID_PEER_SCORE_THRESHOLDS = 'ERR_INVALID_PEER_SCORE_THRESHOLDS';\n//# sourceMappingURL=constants.js.map","import { ERR_INVALID_PEER_SCORE_PARAMS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreParams = {\n    topics: {},\n    topicScoreCap: 10.0,\n    appSpecificScore: () => 0.0,\n    appSpecificWeight: 10.0,\n    IPColocationFactorWeight: -5.0,\n    IPColocationFactorThreshold: 10.0,\n    IPColocationFactorWhitelist: new Set(),\n    behaviourPenaltyWeight: -10.0,\n    behaviourPenaltyThreshold: 0.0,\n    behaviourPenaltyDecay: 0.2,\n    decayInterval: 1000.0,\n    decayToZero: 0.1,\n    retainScore: 3600 * 1000\n};\nexport const defaultTopicScoreParams = {\n    topicWeight: 0.5,\n    timeInMeshWeight: 1,\n    timeInMeshQuantum: 1,\n    timeInMeshCap: 3600,\n    firstMessageDeliveriesWeight: 1,\n    firstMessageDeliveriesDecay: 0.5,\n    firstMessageDeliveriesCap: 2000,\n    meshMessageDeliveriesWeight: -1,\n    meshMessageDeliveriesDecay: 0.5,\n    meshMessageDeliveriesCap: 100,\n    meshMessageDeliveriesThreshold: 20,\n    meshMessageDeliveriesWindow: 10,\n    meshMessageDeliveriesActivation: 5000,\n    meshFailurePenaltyWeight: -1,\n    meshFailurePenaltyDecay: 0.5,\n    invalidMessageDeliveriesWeight: -1,\n    invalidMessageDeliveriesDecay: 0.3\n};\nexport function createPeerScoreParams(p = {}) {\n    return {\n        ...defaultPeerScoreParams,\n        ...p,\n        topics: p.topics\n            ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams]) => {\n                topics[topic] = createTopicScoreParams(topicScoreParams);\n                return topics;\n            }, {})\n            : {}\n    };\n}\nexport function createTopicScoreParams(p = {}) {\n    return {\n        ...defaultTopicScoreParams,\n        ...p\n    };\n}\n// peer score parameter validation\nexport function validatePeerScoreParams(p) {\n    for (const [topic, params] of Object.entries(p.topics)) {\n        try {\n            validateTopicScoreParams(params);\n        }\n        catch (e) {\n            throw new CodeError(`invalid score parameters for topic ${topic}: ${e.message}`, ERR_INVALID_PEER_SCORE_PARAMS);\n        }\n    }\n    // check that the topic score is 0 or something positive\n    if (p.topicScoreCap < 0) {\n        throw new CodeError('invalid topic score cap; must be positive (or 0 for no cap)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check that we have an app specific score; the weight can be anything (but expected positive)\n    if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n        throw new CodeError('missing application specific score function', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the IP colocation factor\n    if (p.IPColocationFactorWeight > 0) {\n        throw new CodeError('invalid IPColocationFactorWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n        throw new CodeError('invalid IPColocationFactorThreshold; must be at least 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the behaviour penalty\n    if (p.behaviourPenaltyWeight > 0) {\n        throw new CodeError('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n        throw new CodeError('invalid BehaviourPenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the decay parameters\n    if (p.decayInterval < 1000) {\n        throw new CodeError('invalid DecayInterval; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n        throw new CodeError('invalid DecayToZero; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // no need to check the score retention; a value of 0 means that we don't retain scores\n}\nexport function validateTopicScoreParams(p) {\n    // make sure we have a sane topic weight\n    if (p.topicWeight < 0) {\n        throw new CodeError('invalid topic weight; must be >= 0', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P1\n    if (p.timeInMeshQuantum === 0) {\n        throw new CodeError('invalid TimeInMeshQuantum; must be non zero', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight < 0) {\n        throw new CodeError('invalid TimeInMeshWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n        throw new CodeError('invalid TimeInMeshQuantum; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n        throw new CodeError('invalid TimeInMeshCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P2\n    if (p.firstMessageDeliveriesWeight < 0) {\n        throw new CodeError('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 &&\n        (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {\n        throw new CodeError('invalid FirstMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n        throw new CodeError('invalid FirstMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3\n    if (p.meshMessageDeliveriesWeight > 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n        throw new CodeError('invalid MeshMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesThreshold; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWindow < 0) {\n        throw new CodeError('invalid MeshMessageDeliveriesWindow; must be non-negative', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n        throw new CodeError('invalid MeshMessageDeliveriesActivation; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3b\n    if (p.meshFailurePenaltyWeight > 0) {\n        throw new CodeError('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n        throw new CodeError('invalid MeshFailurePenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P4\n    if (p.invalidMessageDeliveriesWeight > 0) {\n        throw new CodeError('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n        throw new CodeError('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n}\n//# sourceMappingURL=peer-score-params.js.map","import { ERR_INVALID_PEER_SCORE_THRESHOLDS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreThresholds = {\n    gossipThreshold: -10,\n    publishThreshold: -50,\n    graylistThreshold: -80,\n    acceptPXThreshold: 10,\n    opportunisticGraftThreshold: 20\n};\nexport function createPeerScoreThresholds(p = {}) {\n    return {\n        ...defaultPeerScoreThresholds,\n        ...p\n    };\n}\nexport function validatePeerScoreThresholds(p) {\n    if (p.gossipThreshold > 0) {\n        throw new CodeError('invalid gossip threshold; it must be <= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {\n        throw new CodeError('invalid publish threshold; it must be <= 0 and <= gossip threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {\n        throw new CodeError('invalid graylist threshold; it must be <= 0 and <= publish threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.acceptPXThreshold < 0) {\n        throw new CodeError('invalid accept PX threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.opportunisticGraftThreshold < 0) {\n        throw new CodeError('invalid opportunistic grafting threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n}\n//# sourceMappingURL=peer-score-thresholds.js.map","export function computeScore(peer, pstats, params, peerIPs) {\n    let score = 0;\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n        // the topic parameters\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScore = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;\n            if (p1 > topicParams.timeInMeshCap) {\n                p1 = topicParams.timeInMeshCap;\n            }\n            topicScore += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        topicScore += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive &&\n            tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            topicScore += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        topicScore += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += topicScore * topicParams.topicWeight;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n    }\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    score += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip) => {\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            score += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    if (pstats.behaviourPenalty > params.behaviourPenaltyThreshold) {\n        const excess = pstats.behaviourPenalty - params.behaviourPenaltyThreshold;\n        const p7 = excess * excess;\n        score += p7 * params.behaviourPenaltyWeight;\n    }\n    return score;\n}\n//# sourceMappingURL=compute-score.js.map","import { TimeCacheDuration } from '../constants.js';\nimport Denque from 'denque';\nexport var DeliveryRecordStatus;\n(function (DeliveryRecordStatus) {\n    /**\n     * we don't know (yet) if the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * we know the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n    /**\n     * we know the message is invalid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n    /**\n     * we were instructed by the validator to ignore the message\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus || (DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\nexport class MessageDeliveries {\n    constructor() {\n        this.records = new Map();\n        this.queue = new Denque();\n    }\n    ensureRecord(msgIdStr) {\n        let drec = this.records.get(msgIdStr);\n        if (drec) {\n            return drec;\n        }\n        // record doesn't exist yet\n        // create record\n        drec = {\n            status: DeliveryRecordStatus.unknown,\n            firstSeen: Date.now(),\n            validated: 0,\n            peers: new Set()\n        };\n        this.records.set(msgIdStr, drec);\n        // and add msgId to the queue\n        const entry = {\n            msgId: msgIdStr,\n            expire: Date.now() + TimeCacheDuration\n        };\n        this.queue.push(entry);\n        return drec;\n    }\n    gc() {\n        const now = Date.now();\n        // queue is sorted by expiry time\n        // remove expired messages, remove from queue until first un-expired message found\n        let head = this.queue.peekFront();\n        while (head && head.expire < now) {\n            this.records.delete(head.msgId);\n            this.queue.shift();\n            head = this.queue.peekFront();\n        }\n    }\n    clear() {\n        this.records.clear();\n        this.queue.clear();\n    }\n}\n//# sourceMappingURL=message-deliveries.js.map","/**\n * Exclude up to `ineed` items from a set if item meets condition `cond`\n */\nexport function removeItemsFromSet(superSet, ineed, cond = () => true) {\n    const subset = new Set();\n    if (ineed <= 0)\n        return subset;\n    for (const id of superSet) {\n        if (subset.size >= ineed)\n            break;\n        if (cond(id)) {\n            subset.add(id);\n            superSet.delete(id);\n        }\n    }\n    return subset;\n}\n/**\n * Exclude up to `ineed` items from a set\n */\nexport function removeFirstNItemsFromSet(superSet, ineed) {\n    return removeItemsFromSet(superSet, ineed, () => true);\n}\nexport class MapDef extends Map {\n    constructor(getDefault) {\n        super();\n        this.getDefault = getDefault;\n    }\n    getOrDefault(key) {\n        let value = super.get(key);\n        if (value === undefined) {\n            value = this.getDefault();\n            this.set(key, value);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=set.js.map","import { validatePeerScoreParams } from './peer-score-params.js';\nimport { computeScore } from './compute-score.js';\nimport { MessageDeliveries, DeliveryRecordStatus } from './message-deliveries.js';\nimport { logger } from '@libp2p/logger';\nimport { RejectReason } from '../types.js';\nimport { MapDef } from '../utils/set.js';\nconst log = logger('libp2p:gossipsub:score');\nexport class PeerScore {\n    constructor(params, metrics, opts) {\n        this.params = params;\n        this.metrics = metrics;\n        /**\n         * Per-peer stats for score calculation\n         */\n        this.peerStats = new Map();\n        /**\n         * IP colocation tracking; maps IP => set of peers.\n         */\n        this.peerIPs = new MapDef(() => new Set());\n        /**\n         * Cache score up to decayInterval if topic stats are unchanged.\n         */\n        this.scoreCache = new Map();\n        /**\n         * Recent message delivery timing/participants\n         */\n        this.deliveryRecords = new MessageDeliveries();\n        validatePeerScoreParams(params);\n        this.scoreCacheValidityMs = opts.scoreCacheValidityMs;\n        this.computeScore = opts.computeScore ?? computeScore;\n    }\n    get size() {\n        return this.peerStats.size;\n    }\n    /**\n     * Start PeerScore instance\n     */\n    start() {\n        if (this._backgroundInterval) {\n            log('Peer score already running');\n            return;\n        }\n        this._backgroundInterval = setInterval(() => this.background(), this.params.decayInterval);\n        log('started');\n    }\n    /**\n     * Stop PeerScore instance\n     */\n    stop() {\n        if (!this._backgroundInterval) {\n            log('Peer score already stopped');\n            return;\n        }\n        clearInterval(this._backgroundInterval);\n        delete this._backgroundInterval;\n        this.peerIPs.clear();\n        this.peerStats.clear();\n        this.deliveryRecords.clear();\n        log('stopped');\n    }\n    /**\n     * Periodic maintenance\n     */\n    background() {\n        this.refreshScores();\n        this.deliveryRecords.gc();\n    }\n    dumpPeerScoreStats() {\n        return Object.fromEntries(Array.from(this.peerStats.entries()).map(([peer, stats]) => [peer, stats]));\n    }\n    /**\n     * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.\n     */\n    refreshScores() {\n        const now = Date.now();\n        const decayToZero = this.params.decayToZero;\n        this.peerStats.forEach((pstats, id) => {\n            if (!pstats.connected) {\n                // has the retention period expired?\n                if (now > pstats.expire) {\n                    // yes, throw it away (but clean up the IP tracking first)\n                    this.removeIPsForPeer(id, pstats.knownIPs);\n                    this.peerStats.delete(id);\n                    this.scoreCache.delete(id);\n                }\n                // we don't decay retained scores, as the peer is not active.\n                // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,\n                // unless the retention period has elapsed.\n                // similarly, a well behaved peer does not lose its score by getting disconnected.\n                return;\n            }\n            Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n                const tparams = this.params.topics[topic];\n                if (tparams === undefined) {\n                    // we are not scoring this topic\n                    // should be unreachable, we only add scored topics to pstats\n                    return;\n                }\n                // decay counters\n                tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;\n                if (tstats.firstMessageDeliveries < decayToZero) {\n                    tstats.firstMessageDeliveries = 0;\n                }\n                tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;\n                if (tstats.meshMessageDeliveries < decayToZero) {\n                    tstats.meshMessageDeliveries = 0;\n                }\n                tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;\n                if (tstats.meshFailurePenalty < decayToZero) {\n                    tstats.meshFailurePenalty = 0;\n                }\n                tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;\n                if (tstats.invalidMessageDeliveries < decayToZero) {\n                    tstats.invalidMessageDeliveries = 0;\n                }\n                // update mesh time and activate mesh message delivery parameter if need be\n                if (tstats.inMesh) {\n                    tstats.meshTime = now - tstats.graftTime;\n                    if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {\n                        tstats.meshMessageDeliveriesActive = true;\n                    }\n                }\n            });\n            // decay P7 counter\n            pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;\n            if (pstats.behaviourPenalty < decayToZero) {\n                pstats.behaviourPenalty = 0;\n            }\n        });\n    }\n    /**\n     * Return the score for a peer\n     */\n    score(id) {\n        this.metrics?.scoreFnCalls.inc();\n        const pstats = this.peerStats.get(id);\n        if (!pstats) {\n            return 0;\n        }\n        const now = Date.now();\n        const cacheEntry = this.scoreCache.get(id);\n        // Found cached score within validity period\n        if (cacheEntry && cacheEntry.cacheUntil > now) {\n            return cacheEntry.score;\n        }\n        this.metrics?.scoreFnRuns.inc();\n        const score = this.computeScore(id, pstats, this.params, this.peerIPs);\n        const cacheUntil = now + this.scoreCacheValidityMs;\n        if (cacheEntry) {\n            this.metrics?.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));\n            cacheEntry.score = score;\n            cacheEntry.cacheUntil = cacheUntil;\n        }\n        else {\n            this.scoreCache.set(id, { score, cacheUntil });\n        }\n        return score;\n    }\n    /**\n     * Apply a behavioural penalty to a peer\n     */\n    addPenalty(id, penalty, penaltyLabel) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.behaviourPenalty += penalty;\n            this.metrics?.onScorePenalty(penaltyLabel);\n        }\n    }\n    addPeer(id) {\n        // create peer stats (not including topic stats for each topic to be scored)\n        // topic stats will be added as needed\n        const pstats = {\n            connected: true,\n            expire: 0,\n            topics: {},\n            knownIPs: new Set(),\n            behaviourPenalty: 0\n        };\n        this.peerStats.set(id, pstats);\n    }\n    /** Adds a new IP to a peer, if the peer is not known the update is ignored */\n    addIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.knownIPs.add(ip);\n        }\n        this.peerIPs.getOrDefault(ip).add(id);\n    }\n    /** Remove peer association with IP */\n    removeIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            pstats.knownIPs.delete(ip);\n        }\n        const peersWithIP = this.peerIPs.get(ip);\n        if (peersWithIP) {\n            peersWithIP.delete(id);\n            if (peersWithIP.size === 0) {\n                this.peerIPs.delete(ip);\n            }\n        }\n    }\n    removePeer(id) {\n        const pstats = this.peerStats.get(id);\n        if (!pstats) {\n            return;\n        }\n        // decide whether to retain the score; this currently only retains non-positive scores\n        // to dissuade attacks on the score function.\n        if (this.score(id) > 0) {\n            this.removeIPsForPeer(id, pstats.knownIPs);\n            this.peerStats.delete(id);\n            return;\n        }\n        // furthermore, when we decide to retain the score, the firstMessageDelivery counters are\n        // reset to 0 and mesh delivery penalties applied.\n        Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n            tstats.firstMessageDeliveries = 0;\n            const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n            if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                const deficit = threshold - tstats.meshMessageDeliveries;\n                tstats.meshFailurePenalty += deficit * deficit;\n            }\n            tstats.inMesh = false;\n            tstats.meshMessageDeliveriesActive = false;\n        });\n        pstats.connected = false;\n        pstats.expire = Date.now() + this.params.retainScore;\n    }\n    /** Handles scoring functionality as a peer GRAFTs to a topic. */\n    graft(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                // if we are scoring the topic, update the mesh status.\n                tstats.inMesh = true;\n                tstats.graftTime = Date.now();\n                tstats.meshTime = 0;\n                tstats.meshMessageDeliveriesActive = false;\n            }\n        }\n    }\n    /** Handles scoring functionality as a peer PRUNEs from a topic. */\n    prune(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                // sticky mesh delivery rate failure penalty\n                const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n                if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                    const deficit = threshold - tstats.meshMessageDeliveries;\n                    tstats.meshFailurePenalty += deficit * deficit;\n                }\n                tstats.meshMessageDeliveriesActive = false;\n                tstats.inMesh = false;\n                // TODO: Consider clearing score cache on important penalties\n                // this.scoreCache.delete(id)\n            }\n        }\n    }\n    validateMessage(msgIdStr) {\n        this.deliveryRecords.ensureRecord(msgIdStr);\n    }\n    deliverMessage(from, msgIdStr, topic) {\n        this.markFirstMessageDelivery(from, topic);\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        const now = Date.now();\n        // defensive check that this is the first delivery trace -- delivery status should be unknown\n        if (drec.status !== DeliveryRecordStatus.unknown) {\n            log('unexpected delivery: message from %s was first seen %s ago and has delivery status %s', from, now - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        // mark the message as valid and reward mesh peers that have already forwarded it to us\n        drec.status = DeliveryRecordStatus.valid;\n        drec.validated = now;\n        drec.peers.forEach((p) => {\n            // this check is to make sure a peer can't send us a message twice and get a double count\n            // if it is a first delivery.\n            if (p !== from.toString()) {\n                this.markDuplicateMessageDelivery(p, topic);\n            }\n        });\n    }\n    /**\n     * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.\n     */\n    rejectInvalidMessage(from, topic) {\n        this.markInvalidMessageDelivery(from, topic);\n    }\n    rejectMessage(from, msgIdStr, topic, reason) {\n        switch (reason) {\n            // these messages are not tracked, but the peer is penalized as they are invalid\n            case RejectReason.Error:\n                this.markInvalidMessageDelivery(from, topic);\n                return;\n            // we ignore those messages, so do nothing.\n            case RejectReason.Blacklisted:\n                return;\n            // the rest are handled after record creation\n        }\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        // defensive check that this is the first rejection -- delivery status should be unknown\n        if (drec.status !== DeliveryRecordStatus.unknown) {\n            log('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', from, Date.now() - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        if (reason === RejectReason.Ignore) {\n            // we were explicitly instructed by the validator to ignore the message but not penalize the peer\n            drec.status = DeliveryRecordStatus.ignored;\n            drec.peers.clear();\n            return;\n        }\n        // mark the message as invalid and penalize peers that have already forwarded it.\n        drec.status = DeliveryRecordStatus.invalid;\n        this.markInvalidMessageDelivery(from, topic);\n        drec.peers.forEach((p) => {\n            this.markInvalidMessageDelivery(p, topic);\n        });\n        // release the delivery time tracking map to free some memory early\n        drec.peers.clear();\n    }\n    duplicateMessage(from, msgIdStr, topic) {\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        if (drec.peers.has(from)) {\n            // we have already seen this duplicate\n            return;\n        }\n        switch (drec.status) {\n            case DeliveryRecordStatus.unknown:\n                // the message is being validated; track the peer delivery and wait for\n                // the Deliver/Reject/Ignore notification.\n                drec.peers.add(from);\n                break;\n            case DeliveryRecordStatus.valid:\n                // mark the peer delivery time to only count a duplicate delivery once.\n                drec.peers.add(from);\n                this.markDuplicateMessageDelivery(from, topic, drec.validated);\n                break;\n            case DeliveryRecordStatus.invalid:\n                // we no longer track delivery time\n                this.markInvalidMessageDelivery(from, topic);\n                break;\n            case DeliveryRecordStatus.ignored:\n                // the message was ignored; do nothing (we don't know if it was valid)\n                break;\n        }\n    }\n    /**\n     * Increments the \"invalid message deliveries\" counter for all scored topics the message is published in.\n     */\n    markInvalidMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                tstats.invalidMessageDeliveries += 1;\n            }\n        }\n    }\n    /**\n     * Increments the \"first message deliveries\" counter for all scored topics the message is published in,\n     * as well as the \"mesh message deliveries\" counter, if the peer is in the mesh for the topic.\n     * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()\n     */\n    markFirstMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats) {\n                let cap = this.params.topics[topic].firstMessageDeliveriesCap;\n                tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);\n                if (tstats.inMesh) {\n                    cap = this.params.topics[topic].meshMessageDeliveriesCap;\n                    tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n                }\n            }\n        }\n    }\n    /**\n     * Increments the \"mesh message deliveries\" counter for messages we've seen before,\n     * as long the message was received within the P3 window.\n     */\n    markDuplicateMessageDelivery(from, topic, validatedTime) {\n        const pstats = this.peerStats.get(from);\n        if (pstats) {\n            const now = validatedTime !== undefined ? Date.now() : 0;\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats && tstats.inMesh) {\n                const tparams = this.params.topics[topic];\n                // check against the mesh delivery window -- if the validated time is passed as 0, then\n                // the message was received before we finished validation and thus falls within the mesh\n                // delivery window.\n                if (validatedTime !== undefined) {\n                    const deliveryDelayMs = now - validatedTime;\n                    const isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;\n                    this.metrics?.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);\n                    if (isLateDelivery) {\n                        return;\n                    }\n                }\n                const cap = tparams.meshMessageDeliveriesCap;\n                tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n            }\n        }\n    }\n    /**\n     * Removes an IP list from the tracking list for a peer.\n     */\n    removeIPsForPeer(id, ipsToRemove) {\n        for (const ipToRemove of ipsToRemove) {\n            const peerSet = this.peerIPs.get(ipToRemove);\n            if (peerSet) {\n                peerSet.delete(id);\n                if (peerSet.size === 0) {\n                    this.peerIPs.delete(ipToRemove);\n                }\n            }\n        }\n    }\n    /**\n     * Returns topic stats if they exist, otherwise if the supplied parameters score the\n     * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.\n     */\n    getPtopicStats(pstats, topic) {\n        let topicStats = pstats.topics[topic];\n        if (topicStats !== undefined) {\n            return topicStats;\n        }\n        if (this.params.topics[topic] !== undefined) {\n            topicStats = {\n                inMesh: false,\n                graftTime: 0,\n                meshTime: 0,\n                firstMessageDeliveries: 0,\n                meshMessageDeliveries: 0,\n                meshMessageDeliveriesActive: false,\n                meshFailurePenalty: 0,\n                invalidMessageDeliveries: 0\n            };\n            pstats.topics[topic] = topicStats;\n            return topicStats;\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=peer-score.js.map","import { RejectReason } from './types.js';\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\nexport class IWantTracer {\n    constructor(gossipsubIWantFollowupMs, msgIdToStrFn, metrics) {\n        this.gossipsubIWantFollowupMs = gossipsubIWantFollowupMs;\n        this.msgIdToStrFn = msgIdToStrFn;\n        this.metrics = metrics;\n        /**\n         * Promises to deliver a message\n         * Map per message id, per peer, promise expiration time\n         */\n        this.promises = new Map();\n        /**\n         * First request time by msgId. Used for metrics to track expire times.\n         * Necessary to know if peers are actually breaking promises or simply sending them a bit later\n         */\n        this.requestMsByMsg = new Map();\n        this.requestMsByMsgExpire = 10 * gossipsubIWantFollowupMs;\n    }\n    get size() {\n        return this.promises.size;\n    }\n    get requestMsByMsgSize() {\n        return this.requestMsByMsg.size;\n    }\n    /**\n     * Track a promise to deliver a message from a list of msgIds we are requesting\n     */\n    addPromise(from, msgIds) {\n        // pick msgId randomly from the list\n        const ix = Math.floor(Math.random() * msgIds.length);\n        const msgId = msgIds[ix];\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        let expireByPeer = this.promises.get(msgIdStr);\n        if (!expireByPeer) {\n            expireByPeer = new Map();\n            this.promises.set(msgIdStr, expireByPeer);\n        }\n        const now = Date.now();\n        // If a promise for this message id and peer already exists we don't update the expiry\n        if (!expireByPeer.has(from)) {\n            expireByPeer.set(from, now + this.gossipsubIWantFollowupMs);\n            if (this.metrics) {\n                this.metrics.iwantPromiseStarted.inc(1);\n                if (!this.requestMsByMsg.has(msgIdStr)) {\n                    this.requestMsByMsg.set(msgIdStr, now);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n     *\n     * This should be called not too often relative to the expire times, since it iterates over the whole data.\n     */\n    getBrokenPromises() {\n        const now = Date.now();\n        const result = new Map();\n        let brokenPromises = 0;\n        this.promises.forEach((expireByPeer, msgId) => {\n            expireByPeer.forEach((expire, p) => {\n                // the promise has been broken\n                if (expire < now) {\n                    // add 1 to result\n                    result.set(p, (result.get(p) ?? 0) + 1);\n                    // delete from tracked promises\n                    expireByPeer.delete(p);\n                    // for metrics\n                    brokenPromises++;\n                }\n            });\n            // clean up empty promises for a msgId\n            if (!expireByPeer.size) {\n                this.promises.delete(msgId);\n            }\n        });\n        this.metrics?.iwantPromiseBroken.inc(brokenPromises);\n        return result;\n    }\n    /**\n     * Someone delivered a message, stop tracking promises for it\n     */\n    deliverMessage(msgIdStr, isDuplicate = false) {\n        this.trackMessage(msgIdStr);\n        const expireByPeer = this.promises.get(msgIdStr);\n        // Expired promise, check requestMsByMsg\n        if (expireByPeer) {\n            this.promises.delete(msgIdStr);\n            if (this.metrics) {\n                this.metrics.iwantPromiseResolved.inc(1);\n                if (isDuplicate)\n                    this.metrics.iwantPromiseResolvedFromDuplicate.inc(1);\n                this.metrics.iwantPromiseResolvedPeers.inc(expireByPeer.size);\n            }\n        }\n    }\n    /**\n     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n     * unless its an obviously invalid message.\n     */\n    rejectMessage(msgIdStr, reason) {\n        this.trackMessage(msgIdStr);\n        // A message got rejected, so we can stop tracking promises and let the score penalty apply.\n        // With the expection of obvious invalid messages\n        switch (reason) {\n            case RejectReason.Error:\n                return;\n        }\n        this.promises.delete(msgIdStr);\n    }\n    clear() {\n        this.promises.clear();\n    }\n    prune() {\n        const maxMs = Date.now() - this.requestMsByMsgExpire;\n        let count = 0;\n        for (const [k, v] of this.requestMsByMsg.entries()) {\n            if (v < maxMs) {\n                // messages that stay too long in the requestMsByMsg map, delete\n                this.requestMsByMsg.delete(k);\n                count++;\n            }\n            else {\n                // recent messages, keep them\n                // sort by insertion order\n                break;\n            }\n        }\n        this.metrics?.iwantMessagePruned.inc(count);\n    }\n    trackMessage(msgIdStr) {\n        if (this.metrics) {\n            const requestMs = this.requestMsByMsg.get(msgIdStr);\n            if (requestMs !== undefined) {\n                this.metrics.iwantPromiseDeliveryTime.observe((Date.now() - requestMs) / 1000);\n                this.requestMsByMsg.delete(msgIdStr);\n            }\n        }\n    }\n}\n//# sourceMappingURL=tracer.js.map","/**\n * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js\n * for our own need, we don't use lodash throttle to improve performance.\n * This gives 4x - 5x performance gain compared to npm TimeCache\n */\nexport class SimpleTimeCache {\n    constructor(opts) {\n        this.entries = new Map();\n        this.validityMs = opts.validityMs;\n        // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js\n        // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs\n    }\n    get size() {\n        return this.entries.size;\n    }\n    /** Returns true if there was a key collision and the entry is dropped */\n    put(key, value) {\n        if (this.entries.has(key)) {\n            // Key collisions break insertion order in the entries cache, which break prune logic.\n            // prune relies on each iterated entry to have strictly ascending validUntilMs, else it\n            // won't prune expired entries and SimpleTimeCache will grow unexpectedly.\n            // As of Oct 2022 NodeJS v16, inserting the same key twice with different value does not\n            // change the key position in the iterator stream. A unit test asserts this behaviour.\n            return true;\n        }\n        this.entries.set(key, { value, validUntilMs: Date.now() + this.validityMs });\n        return false;\n    }\n    prune() {\n        const now = Date.now();\n        for (const [k, v] of this.entries.entries()) {\n            if (v.validUntilMs < now) {\n                this.entries.delete(k);\n            }\n            else {\n                // Entries are inserted with strictly ascending validUntilMs.\n                // Stop early to save iterations\n                break;\n            }\n        }\n    }\n    has(key) {\n        return this.entries.has(key);\n    }\n    get(key) {\n        const value = this.entries.get(key);\n        return value && value.validUntilMs >= Date.now() ? value.value : undefined;\n    }\n    clear() {\n        this.entries.clear();\n    }\n}\n//# sourceMappingURL=time-cache.js.map","import { RejectReason } from './types.js';\nexport var MessageSource;\n(function (MessageSource) {\n    MessageSource[\"forward\"] = \"forward\";\n    MessageSource[\"publish\"] = \"publish\";\n})(MessageSource || (MessageSource = {}));\nexport var InclusionReason;\n(function (InclusionReason) {\n    /** Peer was a fanaout peer. */\n    InclusionReason[\"Fanout\"] = \"fanout\";\n    /** Included from random selection. */\n    InclusionReason[\"Random\"] = \"random\";\n    /** Peer subscribed. */\n    InclusionReason[\"Subscribed\"] = \"subscribed\";\n    /** On heartbeat, peer was included to fill the outbound quota. */\n    InclusionReason[\"Outbound\"] = \"outbound\";\n    /** On heartbeat, not enough peers in mesh */\n    InclusionReason[\"NotEnough\"] = \"not_enough\";\n    /** On heartbeat opportunistic grafting due to low mesh score */\n    InclusionReason[\"Opportunistic\"] = \"opportunistic\";\n})(InclusionReason || (InclusionReason = {}));\n/// Reasons why a peer was removed from the mesh.\nexport var ChurnReason;\n(function (ChurnReason) {\n    /// Peer disconnected.\n    ChurnReason[\"Dc\"] = \"disconnected\";\n    /// Peer had a bad score.\n    ChurnReason[\"BadScore\"] = \"bad_score\";\n    /// Peer sent a PRUNE.\n    ChurnReason[\"Prune\"] = \"prune\";\n    /// Peer unsubscribed.\n    ChurnReason[\"Unsub\"] = \"unsubscribed\";\n    /// Too many peers.\n    ChurnReason[\"Excess\"] = \"excess\";\n})(ChurnReason || (ChurnReason = {}));\n/// Kinds of reasons a peer's score has been penalized\nexport var ScorePenalty;\n(function (ScorePenalty) {\n    /// A peer grafted before waiting the back-off time.\n    ScorePenalty[\"GraftBackoff\"] = \"graft_backoff\";\n    /// A Peer did not respond to an IWANT request in time.\n    ScorePenalty[\"BrokenPromise\"] = \"broken_promise\";\n    /// A Peer did not send enough messages as expected.\n    ScorePenalty[\"MessageDeficit\"] = \"message_deficit\";\n    /// Too many peers under one IP address.\n    ScorePenalty[\"IPColocation\"] = \"IP_colocation\";\n})(ScorePenalty || (ScorePenalty = {}));\nexport var IHaveIgnoreReason;\n(function (IHaveIgnoreReason) {\n    IHaveIgnoreReason[\"LowScore\"] = \"low_score\";\n    IHaveIgnoreReason[\"MaxIhave\"] = \"max_ihave\";\n    IHaveIgnoreReason[\"MaxIasked\"] = \"max_iasked\";\n})(IHaveIgnoreReason || (IHaveIgnoreReason = {}));\nexport var ScoreThreshold;\n(function (ScoreThreshold) {\n    ScoreThreshold[\"graylist\"] = \"graylist\";\n    ScoreThreshold[\"publish\"] = \"publish\";\n    ScoreThreshold[\"gossip\"] = \"gossip\";\n    ScoreThreshold[\"mesh\"] = \"mesh\";\n})(ScoreThreshold || (ScoreThreshold = {}));\n/**\n * A collection of metrics used throughout the Gossipsub behaviour.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getMetrics(register, topicStrToLabel, opts) {\n    // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.\n    return {\n        /* Metrics for static config */\n        protocolsEnabled: register.gauge({\n            name: 'gossipsub_protocol',\n            help: 'Status of enabled protocols',\n            labelNames: ['protocol']\n        }),\n        /* Metrics per known topic */\n        /** Status of our subscription to this topic. This metric allows analyzing other topic metrics\n         *  filtered by our current subscription status.\n         *  = rust-libp2p `topic_subscription_status` */\n        topicSubscriptionStatus: register.gauge({\n            name: 'gossipsub_topic_subscription_status',\n            help: 'Status of our subscription to this topic',\n            labelNames: ['topicStr']\n        }),\n        /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour\n         * regardless of our subscription status. */\n        topicPeersCount: register.gauge({\n            name: 'gossipsub_topic_peer_count',\n            help: 'Number of peers subscribed to each topic',\n            labelNames: ['topicStr']\n        }),\n        /* Metrics regarding mesh state */\n        /** Number of peers in our mesh. This metric should be updated with the count of peers for a\n         *  topic in the mesh regardless of inclusion and churn events.\n         *  = rust-libp2p `mesh_peer_counts` */\n        meshPeerCounts: register.gauge({\n            name: 'gossipsub_mesh_peer_count',\n            help: 'Number of peers in our mesh',\n            labelNames: ['topicStr']\n        }),\n        /** Number of times we include peers in a topic mesh for different reasons.\n         *  = rust-libp2p `mesh_peer_inclusion_events` */\n        meshPeerInclusionEvents: register.gauge({\n            name: 'gossipsub_mesh_peer_inclusion_events_total',\n            help: 'Number of times we include peers in a topic mesh for different reasons',\n            labelNames: ['topic', 'reason']\n        }),\n        /** Number of times we remove peers in a topic mesh for different reasons.\n         *  = rust-libp2p `mesh_peer_churn_events` */\n        meshPeerChurnEvents: register.gauge({\n            name: 'gossipsub_peer_churn_events_total',\n            help: 'Number of times we remove peers in a topic mesh for different reasons',\n            labelNames: ['topic', 'reason']\n        }),\n        /* General Metrics */\n        /** Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based\n         *  on which protocol they support. This metric keeps track of the number of peers that are\n         *  connected of each type. */\n        peersPerProtocol: register.gauge({\n            name: 'gossipsub_peers_per_protocol_count',\n            help: 'Peers connected for each topic',\n            labelNames: ['protocol']\n        }),\n        /** The time it takes to complete one iteration of the heartbeat. */\n        heartbeatDuration: register.histogram({\n            name: 'gossipsub_heartbeat_duration_seconds',\n            help: 'The time it takes to complete one iteration of the heartbeat',\n            // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled\n            buckets: [0.01, 0.1, 1]\n        }),\n        /** Heartbeat run took longer than heartbeat interval so next is skipped */\n        heartbeatSkipped: register.gauge({\n            name: 'gossipsub_heartbeat_skipped',\n            help: 'Heartbeat run took longer than heartbeat interval so next is skipped'\n        }),\n        /** Message validation results for each topic.\n         *  Invalid == Reject?\n         *  = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */\n        asyncValidationResult: register.gauge({\n            name: 'gossipsub_async_validation_result_total',\n            help: 'Message validation result for each topic',\n            labelNames: ['topic', 'acceptance']\n        }),\n        /** When the user validates a message, it tries to re propagate it to its mesh peers. If the\n         *  message expires from the memcache before it can be validated, we count this a cache miss\n         *  and it is an indicator that the memcache size should be increased.\n         *  = rust-libp2p `mcache_misses` */\n        asyncValidationMcacheHit: register.gauge({\n            name: 'gossipsub_async_validation_mcache_hit_total',\n            help: 'Async validation result reported by the user layer',\n            labelNames: ['hit']\n        }),\n        // peer stream\n        peerReadStreamError: register.gauge({\n            name: 'gossipsub_peer_read_stream_err_count_total',\n            help: 'Peer read stream error'\n        }),\n        // RPC outgoing. Track byte length + data structure sizes\n        rpcRecvBytes: register.gauge({ name: 'gossipsub_rpc_recv_bytes_total', help: 'RPC recv' }),\n        rpcRecvCount: register.gauge({ name: 'gossipsub_rpc_recv_count_total', help: 'RPC recv' }),\n        rpcRecvSubscription: register.gauge({ name: 'gossipsub_rpc_recv_subscription_total', help: 'RPC recv' }),\n        rpcRecvMessage: register.gauge({ name: 'gossipsub_rpc_recv_message_total', help: 'RPC recv' }),\n        rpcRecvControl: register.gauge({ name: 'gossipsub_rpc_recv_control_total', help: 'RPC recv' }),\n        rpcRecvIHave: register.gauge({ name: 'gossipsub_rpc_recv_ihave_total', help: 'RPC recv' }),\n        rpcRecvIWant: register.gauge({ name: 'gossipsub_rpc_recv_iwant_total', help: 'RPC recv' }),\n        rpcRecvGraft: register.gauge({ name: 'gossipsub_rpc_recv_graft_total', help: 'RPC recv' }),\n        rpcRecvPrune: register.gauge({ name: 'gossipsub_rpc_recv_prune_total', help: 'RPC recv' }),\n        rpcDataError: register.gauge({ name: 'gossipsub_rpc_data_err_count_total', help: 'RPC data error' }),\n        rpcRecvError: register.gauge({ name: 'gossipsub_rpc_recv_err_count_total', help: 'RPC recv error' }),\n        /** Total count of RPC dropped because acceptFrom() == false */\n        rpcRecvNotAccepted: register.gauge({\n            name: 'gossipsub_rpc_rcv_not_accepted_total',\n            help: 'Total count of RPC dropped because acceptFrom() == false'\n        }),\n        // RPC incoming. Track byte length + data structure sizes\n        rpcSentBytes: register.gauge({ name: 'gossipsub_rpc_sent_bytes_total', help: 'RPC sent' }),\n        rpcSentCount: register.gauge({ name: 'gossipsub_rpc_sent_count_total', help: 'RPC sent' }),\n        rpcSentSubscription: register.gauge({ name: 'gossipsub_rpc_sent_subscription_total', help: 'RPC sent' }),\n        rpcSentMessage: register.gauge({ name: 'gossipsub_rpc_sent_message_total', help: 'RPC sent' }),\n        rpcSentControl: register.gauge({ name: 'gossipsub_rpc_sent_control_total', help: 'RPC sent' }),\n        rpcSentIHave: register.gauge({ name: 'gossipsub_rpc_sent_ihave_total', help: 'RPC sent' }),\n        rpcSentIWant: register.gauge({ name: 'gossipsub_rpc_sent_iwant_total', help: 'RPC sent' }),\n        rpcSentGraft: register.gauge({ name: 'gossipsub_rpc_sent_graft_total', help: 'RPC sent' }),\n        rpcSentPrune: register.gauge({ name: 'gossipsub_rpc_sent_prune_total', help: 'RPC sent' }),\n        // publish message. Track peers sent to and bytes\n        /** Total count of msg published by topic */\n        msgPublishCount: register.gauge({\n            name: 'gossipsub_msg_publish_count_total',\n            help: 'Total count of msg published by topic',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers that we publish a msg to */\n        msgPublishPeers: register.gauge({\n            name: 'gossipsub_msg_publish_peers_total',\n            help: 'Total count of peers that we publish a msg to',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers (by group) that we publish a msg to */\n        // NOTE: Do not use 'group' label since it's a generic already used by Prometheus to group instances\n        msgPublishPeersByGroup: register.gauge({\n            name: 'gossipsub_msg_publish_peers_by_group',\n            help: 'Total count of peers (by group) that we publish a msg to',\n            labelNames: ['topic', 'peerGroup']\n        }),\n        /** Total count of msg publish data.length bytes */\n        msgPublishBytes: register.gauge({\n            name: 'gossipsub_msg_publish_bytes_total',\n            help: 'Total count of msg publish data.length bytes',\n            labelNames: ['topic']\n        }),\n        /** Total count of msg forwarded by topic */\n        msgForwardCount: register.gauge({\n            name: 'gossipsub_msg_forward_count_total',\n            help: 'Total count of msg forwarded by topic',\n            labelNames: ['topic']\n        }),\n        /** Total count of peers that we forward a msg to */\n        msgForwardPeers: register.gauge({\n            name: 'gossipsub_msg_forward_peers_total',\n            help: 'Total count of peers that we forward a msg to',\n            labelNames: ['topic']\n        }),\n        /** Total count of recv msgs before any validation */\n        msgReceivedPreValidation: register.gauge({\n            name: 'gossipsub_msg_received_prevalidation_total',\n            help: 'Total count of recv msgs before any validation',\n            labelNames: ['topic']\n        }),\n        /** Total count of recv msgs error */\n        msgReceivedError: register.gauge({\n            name: 'gossipsub_msg_received_error_total',\n            help: 'Total count of recv msgs error',\n            labelNames: ['topic']\n        }),\n        /** Tracks distribution of recv msgs by duplicate, invalid, valid */\n        msgReceivedStatus: register.gauge({\n            name: 'gossipsub_msg_received_status_total',\n            help: 'Tracks distribution of recv msgs by duplicate, invalid, valid',\n            labelNames: ['topic', 'status']\n        }),\n        /** Tracks specific reason of invalid */\n        msgReceivedInvalid: register.gauge({\n            name: 'gossipsub_msg_received_invalid_total',\n            help: 'Tracks specific reason of invalid',\n            labelNames: ['topic', 'error']\n        }),\n        /** Track duplicate message delivery time */\n        duplicateMsgDeliveryDelay: register.histogram({\n            name: 'gossisub_duplicate_msg_delivery_delay_seconds',\n            help: 'Time since the 1st duplicated message validated',\n            labelNames: ['topic'],\n            buckets: [\n                0.25 * opts.maxMeshMessageDeliveriesWindowSec,\n                0.5 * opts.maxMeshMessageDeliveriesWindowSec,\n                1 * opts.maxMeshMessageDeliveriesWindowSec,\n                2 * opts.maxMeshMessageDeliveriesWindowSec,\n                4 * opts.maxMeshMessageDeliveriesWindowSec\n            ]\n        }),\n        /** Total count of late msg delivery total by topic */\n        duplicateMsgLateDelivery: register.gauge({\n            name: 'gossisub_duplicate_msg_late_delivery_total',\n            help: 'Total count of late duplicate message delivery by topic, which triggers P3 penalty',\n            labelNames: ['topic']\n        }),\n        duplicateMsgIgnored: register.gauge({\n            name: 'gossisub_ignored_published_duplicate_msgs_total',\n            help: 'Total count of published duplicate message ignored by topic',\n            labelNames: ['topic']\n        }),\n        /* Metrics related to scoring */\n        /** Total times score() is called */\n        scoreFnCalls: register.gauge({\n            name: 'gossipsub_score_fn_calls_total',\n            help: 'Total times score() is called'\n        }),\n        /** Total times score() call actually computed computeScore(), no cache */\n        scoreFnRuns: register.gauge({\n            name: 'gossipsub_score_fn_runs_total',\n            help: 'Total times score() call actually computed computeScore(), no cache'\n        }),\n        scoreCachedDelta: register.histogram({\n            name: 'gossipsub_score_cache_delta',\n            help: 'Delta of score between cached values that expired',\n            buckets: [10, 100, 1000]\n        }),\n        /** Current count of peers by score threshold */\n        peersByScoreThreshold: register.gauge({\n            name: 'gossipsub_peers_by_score_threshold_count',\n            help: 'Current count of peers by score threshold',\n            labelNames: ['threshold']\n        }),\n        score: register.avgMinMax({\n            name: 'gossipsub_score',\n            help: 'Avg min max of gossip scores',\n            labelNames: ['topic', 'p']\n        }),\n        /** Separate score weights */\n        scoreWeights: register.avgMinMax({\n            name: 'gossipsub_score_weights',\n            help: 'Separate score weights',\n            labelNames: ['topic', 'p']\n        }),\n        /** Histogram of the scores for each mesh topic. */\n        // TODO: Not implemented\n        scorePerMesh: register.avgMinMax({\n            name: 'gossipsub_score_per_mesh',\n            help: 'Histogram of the scores for each mesh topic',\n            labelNames: ['topic']\n        }),\n        /** A counter of the kind of penalties being applied to peers. */\n        // TODO: Not fully implemented\n        scoringPenalties: register.gauge({\n            name: 'gossipsub_scoring_penalties_total',\n            help: 'A counter of the kind of penalties being applied to peers',\n            labelNames: ['penalty']\n        }),\n        behaviourPenalty: register.histogram({\n            name: 'gossipsub_peer_stat_behaviour_penalty',\n            help: 'Current peer stat behaviour_penalty at each scrape',\n            buckets: [\n                0.25 * opts.behaviourPenaltyThreshold,\n                0.5 * opts.behaviourPenaltyThreshold,\n                1 * opts.behaviourPenaltyThreshold,\n                2 * opts.behaviourPenaltyThreshold,\n                4 * opts.behaviourPenaltyThreshold\n            ]\n        }),\n        // TODO:\n        // - iasked per peer (on heartbeat)\n        // - when promise is resolved, track messages from promises\n        /** Total received IHAVE messages that we ignore for some reason */\n        ihaveRcvIgnored: register.gauge({\n            name: 'gossipsub_ihave_rcv_ignored_total',\n            help: 'Total received IHAVE messages that we ignore for some reason',\n            labelNames: ['reason']\n        }),\n        /** Total received IHAVE messages by topic */\n        ihaveRcvMsgids: register.gauge({\n            name: 'gossipsub_ihave_rcv_msgids_total',\n            help: 'Total received IHAVE messages by topic',\n            labelNames: ['topic']\n        }),\n        /** Total messages per topic we don't have. Not actual requests.\n         *  The number of times we have decided that an IWANT control message is required for this\n         *  topic. A very high metric might indicate an underperforming network.\n         *  = rust-libp2p `topic_iwant_msgs` */\n        ihaveRcvNotSeenMsgids: register.gauge({\n            name: 'gossipsub_ihave_rcv_not_seen_msgids_total',\n            help: 'Total messages per topic we do not have, not actual requests',\n            labelNames: ['topic']\n        }),\n        /** Total received IWANT messages by topic */\n        iwantRcvMsgids: register.gauge({\n            name: 'gossipsub_iwant_rcv_msgids_total',\n            help: 'Total received IWANT messages by topic',\n            labelNames: ['topic']\n        }),\n        /** Total requested messageIDs that we don't have */\n        iwantRcvDonthaveMsgids: register.gauge({\n            name: 'gossipsub_iwant_rcv_dont_have_msgids_total',\n            help: 'Total requested messageIDs that we do not have'\n        }),\n        iwantPromiseStarted: register.gauge({\n            name: 'gossipsub_iwant_promise_sent_total',\n            help: 'Total count of started IWANT promises'\n        }),\n        /** Total count of resolved IWANT promises */\n        iwantPromiseResolved: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_total',\n            help: 'Total count of resolved IWANT promises'\n        }),\n        /** Total count of resolved IWANT promises from duplicate messages */\n        iwantPromiseResolvedFromDuplicate: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_from_duplicate_total',\n            help: 'Total count of resolved IWANT promises from duplicate messages'\n        }),\n        /** Total count of peers we have asked IWANT promises that are resolved */\n        iwantPromiseResolvedPeers: register.gauge({\n            name: 'gossipsub_iwant_promise_resolved_peers',\n            help: 'Total count of peers we have asked IWANT promises that are resolved'\n        }),\n        iwantPromiseBroken: register.gauge({\n            name: 'gossipsub_iwant_promise_broken',\n            help: 'Total count of broken IWANT promises'\n        }),\n        iwantMessagePruned: register.gauge({\n            name: 'gossipsub_iwant_message_pruned',\n            help: 'Total count of pruned IWANT messages'\n        }),\n        /** Histogram of delivery time of resolved IWANT promises */\n        iwantPromiseDeliveryTime: register.histogram({\n            name: 'gossipsub_iwant_promise_delivery_seconds',\n            help: 'Histogram of delivery time of resolved IWANT promises',\n            buckets: [\n                0.5 * opts.gossipPromiseExpireSec,\n                1 * opts.gossipPromiseExpireSec,\n                2 * opts.gossipPromiseExpireSec,\n                4 * opts.gossipPromiseExpireSec\n            ]\n        }),\n        iwantPromiseUntracked: register.gauge({\n            name: 'gossip_iwant_promise_untracked',\n            help: 'Total count of untracked IWANT promise'\n        }),\n        /* Data structure sizes */\n        /** Unbounded cache sizes */\n        cacheSize: register.gauge({\n            name: 'gossipsub_cache_size',\n            help: 'Unbounded cache sizes',\n            labelNames: ['cache']\n        }),\n        /** Current mcache msg count */\n        mcacheSize: register.gauge({\n            name: 'gossipsub_mcache_size',\n            help: 'Current mcache msg count'\n        }),\n        mcacheNotValidatedCount: register.gauge({\n            name: 'gossipsub_mcache_not_validated_count',\n            help: 'Current mcache msg count not validated'\n        }),\n        fastMsgIdCacheCollision: register.gauge({\n            name: 'gossipsub_fastmsgid_cache_collision_total',\n            help: 'Total count of key collisions on fastmsgid cache put'\n        }),\n        newConnectionCount: register.gauge({\n            name: 'gossipsub_new_connection_total',\n            help: 'Total new connection by status',\n            labelNames: ['status']\n        }),\n        topicStrToLabel: topicStrToLabel,\n        toTopic(topicStr) {\n            return this.topicStrToLabel.get(topicStr) ?? topicStr;\n        },\n        /** We joined a topic */\n        onJoin(topicStr) {\n            this.topicSubscriptionStatus.set({ topicStr }, 1);\n            this.meshPeerCounts.set({ topicStr }, 0); // Reset count\n        },\n        /** We left a topic */\n        onLeave(topicStr) {\n            this.topicSubscriptionStatus.set({ topicStr }, 0);\n            this.meshPeerCounts.set({ topicStr }, 0); // Reset count\n        },\n        /** Register the inclusion of peers in our mesh due to some reason. */\n        onAddToMesh(topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            this.meshPeerInclusionEvents.inc({ topic, reason }, count);\n        },\n        /** Register the removal of peers in our mesh due to some reason */\n        // - remove_peer_from_mesh()\n        // - heartbeat() Churn::BadScore\n        // - heartbeat() Churn::Excess\n        // - on_disconnect() Churn::Ds\n        onRemoveFromMesh(topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            this.meshPeerChurnEvents.inc({ topic, reason }, count);\n        },\n        onReportValidationMcacheHit(hit) {\n            this.asyncValidationMcacheHit.inc({ hit: hit ? 'hit' : 'miss' });\n        },\n        onReportValidation(topicStr, acceptance) {\n            const topic = this.toTopic(topicStr);\n            this.asyncValidationResult.inc({ topic: topic, acceptance });\n        },\n        /**\n         * - in handle_graft() Penalty::GraftBackoff\n         * - in apply_iwant_penalties() Penalty::BrokenPromise\n         * - in metric_score() P3 Penalty::MessageDeficit\n         * - in metric_score() P6 Penalty::IPColocation\n         */\n        onScorePenalty(penalty) {\n            // Can this be labeled by topic too?\n            this.scoringPenalties.inc({ penalty }, 1);\n        },\n        onIhaveRcv(topicStr, ihave, idonthave) {\n            const topic = this.toTopic(topicStr);\n            this.ihaveRcvMsgids.inc({ topic }, ihave);\n            this.ihaveRcvNotSeenMsgids.inc({ topic }, idonthave);\n        },\n        onIwantRcv(iwantByTopic, iwantDonthave) {\n            for (const [topicStr, iwant] of iwantByTopic) {\n                const topic = this.toTopic(topicStr);\n                this.iwantRcvMsgids.inc({ topic }, iwant);\n            }\n            this.iwantRcvDonthaveMsgids.inc(iwantDonthave);\n        },\n        onForwardMsg(topicStr, tosendCount) {\n            const topic = this.toTopic(topicStr);\n            this.msgForwardCount.inc({ topic }, 1);\n            this.msgForwardPeers.inc({ topic }, tosendCount);\n        },\n        onPublishMsg(topicStr, tosendGroupCount, tosendCount, dataLen) {\n            const topic = this.toTopic(topicStr);\n            this.msgPublishCount.inc({ topic }, 1);\n            this.msgPublishBytes.inc({ topic }, tosendCount * dataLen);\n            this.msgPublishPeers.inc({ topic }, tosendCount);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'direct' }, tosendGroupCount.direct);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'floodsub' }, tosendGroupCount.floodsub);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'mesh' }, tosendGroupCount.mesh);\n            this.msgPublishPeersByGroup.inc({ topic, peerGroup: 'fanout' }, tosendGroupCount.fanout);\n        },\n        onMsgRecvPreValidation(topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedPreValidation.inc({ topic }, 1);\n        },\n        onMsgRecvError(topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedError.inc({ topic }, 1);\n        },\n        onMsgRecvResult(topicStr, status) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedStatus.inc({ topic, status });\n        },\n        onMsgRecvInvalid(topicStr, reason) {\n            const topic = this.toTopic(topicStr);\n            const error = reason.reason === RejectReason.Error ? reason.error : reason.reason;\n            this.msgReceivedInvalid.inc({ topic, error }, 1);\n        },\n        onDuplicateMsgDelivery(topicStr, deliveryDelayMs, isLateDelivery) {\n            this.duplicateMsgDeliveryDelay.observe(deliveryDelayMs / 1000);\n            if (isLateDelivery) {\n                const topic = this.toTopic(topicStr);\n                this.duplicateMsgLateDelivery.inc({ topic }, 1);\n            }\n        },\n        onPublishDuplicateMsg(topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.duplicateMsgIgnored.inc({ topic }, 1);\n        },\n        onPeerReadStreamError() {\n            this.peerReadStreamError.inc(1);\n        },\n        onRpcRecvError() {\n            this.rpcRecvError.inc(1);\n        },\n        onRpcDataError() {\n            this.rpcDataError.inc(1);\n        },\n        onRpcRecv(rpc, rpcBytes) {\n            this.rpcRecvBytes.inc(rpcBytes);\n            this.rpcRecvCount.inc(1);\n            if (rpc.subscriptions)\n                this.rpcRecvSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages)\n                this.rpcRecvMessage.inc(rpc.messages.length);\n            if (rpc.control) {\n                this.rpcRecvControl.inc(1);\n                if (rpc.control.ihave)\n                    this.rpcRecvIHave.inc(rpc.control.ihave.length);\n                if (rpc.control.iwant)\n                    this.rpcRecvIWant.inc(rpc.control.iwant.length);\n                if (rpc.control.graft)\n                    this.rpcRecvGraft.inc(rpc.control.graft.length);\n                if (rpc.control.prune)\n                    this.rpcRecvPrune.inc(rpc.control.prune.length);\n            }\n        },\n        onRpcSent(rpc, rpcBytes) {\n            this.rpcSentBytes.inc(rpcBytes);\n            this.rpcSentCount.inc(1);\n            if (rpc.subscriptions)\n                this.rpcSentSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages)\n                this.rpcSentMessage.inc(rpc.messages.length);\n            if (rpc.control) {\n                const ihave = rpc.control.ihave?.length ?? 0;\n                const iwant = rpc.control.iwant?.length ?? 0;\n                const graft = rpc.control.graft?.length ?? 0;\n                const prune = rpc.control.prune?.length ?? 0;\n                if (ihave > 0)\n                    this.rpcSentIHave.inc(ihave);\n                if (iwant > 0)\n                    this.rpcSentIWant.inc(iwant);\n                if (graft > 0)\n                    this.rpcSentGraft.inc(graft);\n                if (prune > 0)\n                    this.rpcSentPrune.inc(prune);\n                if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0)\n                    this.rpcSentControl.inc(1);\n            }\n        },\n        registerScores(scores, scoreThresholds) {\n            let graylist = 0;\n            let publish = 0;\n            let gossip = 0;\n            let mesh = 0;\n            for (const score of scores) {\n                if (score >= scoreThresholds.graylistThreshold)\n                    graylist++;\n                if (score >= scoreThresholds.publishThreshold)\n                    publish++;\n                if (score >= scoreThresholds.gossipThreshold)\n                    gossip++;\n                if (score >= 0)\n                    mesh++;\n            }\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.graylist }, graylist);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.publish }, publish);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.gossip }, gossip);\n            this.peersByScoreThreshold.set({ threshold: ScoreThreshold.mesh }, mesh);\n            // Register full score too\n            this.score.set(scores);\n        },\n        registerScoreWeights(sw) {\n            for (const [topic, wsTopic] of sw.byTopic) {\n                this.scoreWeights.set({ topic, p: 'p1' }, wsTopic.p1w);\n                this.scoreWeights.set({ topic, p: 'p2' }, wsTopic.p2w);\n                this.scoreWeights.set({ topic, p: 'p3' }, wsTopic.p3w);\n                this.scoreWeights.set({ topic, p: 'p3b' }, wsTopic.p3bw);\n                this.scoreWeights.set({ topic, p: 'p4' }, wsTopic.p4w);\n            }\n            this.scoreWeights.set({ p: 'p5' }, sw.p5w);\n            this.scoreWeights.set({ p: 'p6' }, sw.p6w);\n            this.scoreWeights.set({ p: 'p7' }, sw.p7w);\n        },\n        registerScorePerMesh(mesh, scoreByPeer) {\n            const peersPerTopicLabel = new Map();\n            mesh.forEach((peers, topicStr) => {\n                // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n                const topicLabel = this.topicStrToLabel.get(topicStr) ?? 'unknown';\n                let peersInMesh = peersPerTopicLabel.get(topicLabel);\n                if (!peersInMesh) {\n                    peersInMesh = new Set();\n                    peersPerTopicLabel.set(topicLabel, peersInMesh);\n                }\n                peers.forEach((p) => peersInMesh?.add(p));\n            });\n            for (const [topic, peers] of peersPerTopicLabel) {\n                const meshScores = [];\n                peers.forEach((peer) => {\n                    meshScores.push(scoreByPeer.get(peer) ?? 0);\n                });\n                this.scorePerMesh.set({ topic }, meshScores);\n            }\n        }\n    };\n}\n//# sourceMappingURL=metrics.js.map","import { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forgePbkdf2 from 'node-forge/lib/pbkdf2.js';\n// @ts-expect-error types are missing\nimport forgeUtil from 'node-forge/lib/util.js';\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n    sha1: 'sha1',\n    'sha2-256': 'sha256',\n    'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\nexport default function pbkdf2(password, salt, iterations, keySize, hash) {\n    if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n        const types = Object.keys(hashName).join(' / ');\n        throw new CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE');\n    }\n    const hasher = hashName[hash];\n    const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);\n    return forgeUtil.encode64(dek, null);\n}\n//# sourceMappingURL=pbkdf2.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { randomBytes } from '@libp2p/crypto';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { RPC } from '../message/rpc.js';\nimport { PublishConfigType, ValidateError } from '../types.js';\nimport { StrictSign, StrictNoSign } from '@libp2p/interface-pubsub';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const SignPrefix = uint8ArrayFromString('libp2p-pubsub:');\nexport async function buildRawMessage(publishConfig, topic, originalData, transformedData) {\n    switch (publishConfig.type) {\n        case PublishConfigType.Signing: {\n            const rpcMsg = {\n                from: publishConfig.author.toBytes(),\n                data: transformedData,\n                seqno: randomBytes(8),\n                topic,\n                signature: undefined,\n                key: undefined // Exclude key field for signing\n            };\n            // Get the message in bytes, and prepend with the pubsub prefix\n            // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n            const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsg).finish()]);\n            rpcMsg.signature = await publishConfig.privateKey.sign(bytes);\n            rpcMsg.key = publishConfig.key;\n            const msg = {\n                type: 'signed',\n                from: publishConfig.author,\n                data: originalData,\n                sequenceNumber: BigInt(`0x${uint8ArrayToString(rpcMsg.seqno, 'base16')}`),\n                topic,\n                signature: rpcMsg.signature,\n                key: rpcMsg.key\n            };\n            return {\n                raw: rpcMsg,\n                msg: msg\n            };\n        }\n        case PublishConfigType.Anonymous: {\n            return {\n                raw: {\n                    from: undefined,\n                    data: transformedData,\n                    seqno: undefined,\n                    topic,\n                    signature: undefined,\n                    key: undefined\n                },\n                msg: {\n                    type: 'unsigned',\n                    data: originalData,\n                    topic\n                }\n            };\n        }\n    }\n}\nexport async function validateToRawMessage(signaturePolicy, msg) {\n    // If strict-sign, verify all\n    // If anonymous (no-sign), ensure no preven\n    switch (signaturePolicy) {\n        case StrictNoSign:\n            if (msg.signature != null)\n                return { valid: false, error: ValidateError.SignaturePresent };\n            if (msg.seqno != null)\n                return { valid: false, error: ValidateError.SeqnoPresent };\n            if (msg.key != null)\n                return { valid: false, error: ValidateError.FromPresent };\n            return { valid: true, message: { type: 'unsigned', topic: msg.topic, data: msg.data ?? new Uint8Array(0) } };\n        case StrictSign: {\n            // Verify seqno\n            if (msg.seqno == null)\n                return { valid: false, error: ValidateError.InvalidSeqno };\n            if (msg.seqno.length !== 8) {\n                return { valid: false, error: ValidateError.InvalidSeqno };\n            }\n            if (msg.signature == null)\n                return { valid: false, error: ValidateError.InvalidSignature };\n            if (msg.from == null)\n                return { valid: false, error: ValidateError.InvalidPeerId };\n            let fromPeerId;\n            try {\n                // TODO: Fix PeerId types\n                fromPeerId = peerIdFromBytes(msg.from);\n            }\n            catch (e) {\n                return { valid: false, error: ValidateError.InvalidPeerId };\n            }\n            // - check from defined\n            // - transform source to PeerId\n            // - parse signature\n            // - get .key, else from source\n            // - check key == source if present\n            // - verify sig\n            let publicKey;\n            if (msg.key) {\n                publicKey = unmarshalPublicKey(msg.key);\n                // TODO: Should `fromPeerId.pubKey` be optional?\n                if (fromPeerId.publicKey !== undefined && !uint8ArrayEquals(publicKey.bytes, fromPeerId.publicKey)) {\n                    return { valid: false, error: ValidateError.InvalidPeerId };\n                }\n            }\n            else {\n                if (fromPeerId.publicKey == null) {\n                    return { valid: false, error: ValidateError.InvalidPeerId };\n                }\n                publicKey = unmarshalPublicKey(fromPeerId.publicKey);\n            }\n            const rpcMsgPreSign = {\n                from: msg.from,\n                data: msg.data,\n                seqno: msg.seqno,\n                topic: msg.topic,\n                signature: undefined,\n                key: undefined // Exclude key field for signing\n            };\n            // Get the message in bytes, and prepend with the pubsub prefix\n            // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n            const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsgPreSign).finish()]);\n            if (!(await publicKey.verify(bytes, msg.signature))) {\n                return { valid: false, error: ValidateError.InvalidSignature };\n            }\n            return {\n                valid: true,\n                message: {\n                    type: 'signed',\n                    from: fromPeerId,\n                    data: msg.data ?? new Uint8Array(0),\n                    sequenceNumber: BigInt(`0x${uint8ArrayToString(msg.seqno, 'base16')}`),\n                    topic: msg.topic,\n                    signature: msg.signature,\n                    key: msg.key ?? marshalPublicKey(publicKey)\n                }\n            };\n        }\n    }\n}\n//# sourceMappingURL=buildRawMessage.js.map","import { randomBytes } from '@libp2p/crypto';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { peerIdFromBytes, peerIdFromKeys } from '@libp2p/peer-id';\nimport { codes } from './errors.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n/**\n * Generate a random sequence number\n */\nexport function randomSeqno() {\n    return BigInt(`0x${uint8ArrayToString(randomBytes(8), 'base16')}`);\n}\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport const msgId = (key, seqno) => {\n    const seqnoBytes = uint8ArrayFromString(seqno.toString(16).padStart(16, '0'), 'base16');\n    const msgId = new Uint8Array(key.length + seqnoBytes.length);\n    msgId.set(key, 0);\n    msgId.set(seqnoBytes, key.length);\n    return msgId;\n};\n/**\n * Generate a message id, based on message `data`\n */\nexport const noSignMsgId = (data) => {\n    return sha256.encode(data);\n};\n/**\n * Check if any member of the first set is also a member\n * of the second set\n */\nexport const anyMatch = (a, b) => {\n    let bHas;\n    if (Array.isArray(b)) {\n        bHas = (val) => b.includes(val);\n    }\n    else {\n        bHas = (val) => b.has(val);\n    }\n    for (const val of a) {\n        if (bHas(val)) {\n            return true;\n        }\n    }\n    return false;\n};\n/**\n * Make everything an array\n */\nexport const ensureArray = function (maybeArray) {\n    if (!Array.isArray(maybeArray)) {\n        return [maybeArray];\n    }\n    return maybeArray;\n};\nconst isSigned = async (message) => {\n    if ((message.sequenceNumber == null) || (message.from == null) || (message.signature == null)) {\n        return false;\n    }\n    // if a public key is present in the `from` field, the message should be signed\n    const fromID = peerIdFromBytes(message.from);\n    if (fromID.publicKey != null) {\n        return true;\n    }\n    if (message.key != null) {\n        const signingID = await peerIdFromKeys(message.key);\n        return signingID.equals(fromID);\n    }\n    return false;\n};\nexport const toMessage = async (message) => {\n    if (message.from == null) {\n        throw new CodeError('RPC message was missing from', codes.ERR_MISSING_FROM);\n    }\n    if (!await isSigned(message)) {\n        return {\n            type: 'unsigned',\n            topic: message.topic ?? '',\n            data: message.data ?? new Uint8Array(0)\n        };\n    }\n    const from = peerIdFromBytes(message.from);\n    const msg = {\n        type: 'signed',\n        from: peerIdFromBytes(message.from),\n        topic: message.topic ?? '',\n        sequenceNumber: bigIntFromBytes(message.sequenceNumber ?? new Uint8Array(0)),\n        data: message.data ?? new Uint8Array(0),\n        signature: message.signature ?? new Uint8Array(0),\n        key: message.key ?? from.publicKey ?? new Uint8Array(0)\n    };\n    if (msg.key.length === 0) {\n        throw new CodeError('Signed RPC message was missing key', codes.ERR_MISSING_KEY);\n    }\n    return msg;\n};\nexport const toRpcMessage = (message) => {\n    if (message.type === 'signed') {\n        return {\n            from: message.from.multihash.bytes,\n            data: message.data,\n            sequenceNumber: bigIntToBytes(message.sequenceNumber),\n            topic: message.topic,\n            signature: message.signature,\n            key: message.key\n        };\n    }\n    return {\n        data: message.data,\n        topic: message.topic\n    };\n};\nexport const bigIntToBytes = (num) => {\n    let str = num.toString(16);\n    if (str.length % 2 !== 0) {\n        str = `0${str}`;\n    }\n    return uint8ArrayFromString(str, 'base16');\n};\nexport const bigIntFromBytes = (num) => {\n    return BigInt(`0x${uint8ArrayToString(num, 'base16')}`);\n};\n//# sourceMappingURL=utils.js.map","import { sha256 } from 'multiformats/hashes/sha2';\nimport { msgId } from '@libp2p/pubsub/utils';\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport function msgIdFnStrictSign(msg) {\n    if (msg.type !== 'signed') {\n        throw new Error('expected signed message type');\n    }\n    // Should never happen\n    if (msg.sequenceNumber == null)\n        throw Error('missing seqno field');\n    // TODO: Should use .from here or key?\n    return msgId(msg.from.toBytes(), msg.sequenceNumber);\n}\n/**\n * Generate a message id, based on message `data`\n */\nexport async function msgIdFnStrictNoSign(msg) {\n    return await sha256.encode(msg.data);\n}\n//# sourceMappingURL=msgIdFn.js.map","export function computeScoreWeights(peer, pstats, params, peerIPs, topicStrToLabel) {\n    let score = 0;\n    const byTopic = new Map();\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n        // the topic parameters\n        // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n        const topicLabel = topicStrToLabel.get(topic) ?? 'unknown';\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScores = byTopic.get(topicLabel);\n        if (!topicScores) {\n            topicScores = {\n                p1w: 0,\n                p2w: 0,\n                p3w: 0,\n                p3bw: 0,\n                p4w: 0\n            };\n            byTopic.set(topicLabel, topicScores);\n        }\n        let p1w = 0;\n        let p2w = 0;\n        let p3w = 0;\n        let p3bw = 0;\n        let p4w = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            const p1 = Math.max(tstats.meshTime / topicParams.timeInMeshQuantum, topicParams.timeInMeshCap);\n            p1w += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        p2w += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive &&\n            tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            p3w += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        p3bw += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        p4w += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += (p1w + p2w + p3w + p3bw + p4w) * topicParams.topicWeight;\n        topicScores.p1w += p1w;\n        topicScores.p2w += p2w;\n        topicScores.p3w += p3w;\n        topicScores.p3bw += p3bw;\n        topicScores.p4w += p4w;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n        // Proportionally apply cap to all individual contributions\n        const capF = params.topicScoreCap / score;\n        for (const ws of byTopic.values()) {\n            ws.p1w *= capF;\n            ws.p2w *= capF;\n            ws.p3w *= capF;\n            ws.p3bw *= capF;\n            ws.p4w *= capF;\n        }\n    }\n    let p5w = 0;\n    let p6w = 0;\n    let p7w = 0;\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    p5w += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip) => {\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            p6w += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    const p7 = pstats.behaviourPenalty * pstats.behaviourPenalty;\n    p7w += p7 * params.behaviourPenaltyWeight;\n    score += p5w + p6w + p7w;\n    return {\n        byTopic,\n        p5w,\n        p6w,\n        p7w,\n        score\n    };\n}\nexport function computeAllPeersScoreWeights(peerIdStrs, peerStats, params, peerIPs, topicStrToLabel) {\n    const sw = {\n        byTopic: new Map(),\n        p5w: [],\n        p6w: [],\n        p7w: [],\n        score: []\n    };\n    for (const peerIdStr of peerIdStrs) {\n        const pstats = peerStats.get(peerIdStr);\n        if (pstats) {\n            const swPeer = computeScoreWeights(peerIdStr, pstats, params, peerIPs, topicStrToLabel);\n            for (const [topic, swPeerTopic] of swPeer.byTopic) {\n                let swTopic = sw.byTopic.get(topic);\n                if (!swTopic) {\n                    swTopic = {\n                        p1w: [],\n                        p2w: [],\n                        p3w: [],\n                        p3bw: [],\n                        p4w: []\n                    };\n                    sw.byTopic.set(topic, swTopic);\n                }\n                swTopic.p1w.push(swPeerTopic.p1w);\n                swTopic.p2w.push(swPeerTopic.p2w);\n                swTopic.p3w.push(swPeerTopic.p3w);\n                swTopic.p3bw.push(swPeerTopic.p3bw);\n                swTopic.p4w.push(swPeerTopic.p4w);\n            }\n            sw.p5w.push(swPeer.p5w);\n            sw.p6w.push(swPeer.p6w);\n            sw.p7w.push(swPeer.p7w);\n            sw.score.push(swPeer.score);\n        }\n        else {\n            sw.p5w.push(0);\n            sw.p6w.push(0);\n            sw.p7w.push(0);\n            sw.score.push(0);\n        }\n    }\n    return sw;\n}\n//# sourceMappingURL=scoreMetrics.js.map","import { abortableSource } from 'abortable-iterator';\nimport { pipe } from 'it-pipe';\nimport { pushable } from 'it-pushable';\nimport { encode, decode } from 'it-length-prefixed';\nexport class OutboundStream {\n    constructor(rawStream, errCallback, opts) {\n        this.rawStream = rawStream;\n        this.pushable = pushable({ objectMode: false });\n        this.closeController = new AbortController();\n        this.maxBufferSize = opts.maxBufferSize ?? Infinity;\n        pipe(abortableSource(this.pushable, this.closeController.signal, { returnOnAbort: true }), encode(), this.rawStream).catch(errCallback);\n    }\n    get protocol() {\n        // TODO remove this non-nullish assertion after https://github.com/libp2p/js-libp2p-interfaces/pull/265 is incorporated\n        return this.rawStream.stat.protocol;\n    }\n    push(data) {\n        if (this.pushable.readableLength > this.maxBufferSize) {\n            throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);\n        }\n        this.pushable.push(data);\n    }\n    close() {\n        this.closeController.abort();\n        // similar to pushable.end() but clear the internal buffer\n        this.pushable.return();\n        this.rawStream.close();\n    }\n}\nexport class InboundStream {\n    constructor(rawStream, opts = {}) {\n        this.rawStream = rawStream;\n        this.closeController = new AbortController();\n        this.source = abortableSource(pipe(this.rawStream, decode(opts)), this.closeController.signal, {\n            returnOnAbort: true\n        });\n    }\n    close() {\n        this.closeController.abort();\n        this.rawStream.close();\n    }\n}\n//# sourceMappingURL=stream.js.map","import protobuf from 'protobufjs/minimal.js';\nexport const defaultDecodeRpcLimits = {\n    maxSubscriptions: Infinity,\n    maxMessages: Infinity,\n    maxIhaveMessageIDs: Infinity,\n    maxIwantMessageIDs: Infinity,\n    maxControlMessages: Infinity,\n    maxPeerInfos: Infinity\n};\n/**\n * Copied code from src/message/rpc.cjs but with decode limits to prevent OOM attacks\n */\nexport function decodeRpc(bytes, opts) {\n    // Mutate to use the option as stateful counter. Must limit the total count of messageIDs across all IWANT, IHAVE\n    // else one count put 100 messageIDs into each 100 IWANT and \"get around\" the limit\n    opts = { ...opts };\n    const r = protobuf.Reader.create(bytes);\n    const l = bytes.length;\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.subscriptions && m.subscriptions.length))\n                    m.subscriptions = [];\n                if (m.subscriptions.length < opts.maxSubscriptions)\n                    m.subscriptions.push(decodeSubOpts(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 2:\n                if (!(m.messages && m.messages.length))\n                    m.messages = [];\n                if (m.messages.length < opts.maxMessages)\n                    m.messages.push(decodeMessage(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                m.control = decodeControlMessage(r, r.uint32(), opts);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeSubOpts(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.subscribe = r.bool();\n                break;\n            case 2:\n                m.topic = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeMessage(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.from = r.bytes();\n                break;\n            case 2:\n                m.data = r.bytes();\n                break;\n            case 3:\n                m.seqno = r.bytes();\n                break;\n            case 4:\n                m.topic = r.string();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            case 6:\n                m.key = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    if (!m.topic)\n        throw Error(\"missing required 'topic'\");\n    return m;\n}\nfunction decodeControlMessage(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.ihave && m.ihave.length))\n                    m.ihave = [];\n                if (m.ihave.length < opts.maxControlMessages)\n                    m.ihave.push(decodeControlIHave(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 2:\n                if (!(m.iwant && m.iwant.length))\n                    m.iwant = [];\n                if (m.iwant.length < opts.maxControlMessages)\n                    m.iwant.push(decodeControlIWant(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                if (!(m.graft && m.graft.length))\n                    m.graft = [];\n                if (m.graft.length < opts.maxControlMessages)\n                    m.graft.push(decodeControlGraft(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 4:\n                if (!(m.prune && m.prune.length))\n                    m.prune = [];\n                if (m.prune.length < opts.maxControlMessages)\n                    m.prune.push(decodeControlPrune(r, r.uint32(), opts));\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlIHave(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            case 2:\n                if (!(m.messageIDs && m.messageIDs.length))\n                    m.messageIDs = [];\n                if (opts.maxIhaveMessageIDs-- > 0)\n                    m.messageIDs.push(r.bytes());\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlIWant(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                if (!(m.messageIDs && m.messageIDs.length))\n                    m.messageIDs = [];\n                if (opts.maxIwantMessageIDs-- > 0)\n                    m.messageIDs.push(r.bytes());\n                else\n                    r.skipType(t & 7);\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlGraft(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodeControlPrune(r, l, opts) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.topicID = r.string();\n                break;\n            case 2:\n                if (!(m.peers && m.peers.length))\n                    m.peers = [];\n                if (opts.maxPeerInfos-- > 0)\n                    m.peers.push(decodePeerInfo(r, r.uint32()));\n                else\n                    r.skipType(t & 7);\n                break;\n            case 3:\n                m.backoff = r.uint64();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\nfunction decodePeerInfo(r, l) {\n    const c = l === undefined ? r.len : r.pos + l;\n    const m = {};\n    while (r.pos < c) {\n        const t = r.uint32();\n        switch (t >>> 3) {\n            case 1:\n                m.peerID = r.bytes();\n                break;\n            case 2:\n                m.signedPeerRecord = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n        }\n    }\n    return m;\n}\n//# sourceMappingURL=decodeRpc.js.map","import { convertToString } from '@multiformats/multiaddr/convert';\n// Protocols https://github.com/multiformats/multiaddr/blob/master/protocols.csv\n// code  size  name\n// 4     32    ip4\n// 41    128   ip6\nvar Protocol;\n(function (Protocol) {\n    Protocol[Protocol[\"ip4\"] = 4] = \"ip4\";\n    Protocol[Protocol[\"ip6\"] = 41] = \"ip6\";\n})(Protocol || (Protocol = {}));\nexport function multiaddrToIPStr(multiaddr) {\n    for (const tuple of multiaddr.tuples()) {\n        switch (tuple[0]) {\n            case Protocol.ip4:\n            case Protocol.ip6:\n                return convertToString(tuple[0], tuple[1]);\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=multiaddr.js.map","import { pipe } from 'it-pipe';\nimport { RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromBytes, peerIdFromString } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { MessageCache } from './message-cache.js';\nimport { RPC } from './message/rpc.js';\nimport * as constants from './constants.js';\nimport { shuffle, messageIdToString } from './utils/index.js';\nimport { PeerScore, createPeerScoreParams, createPeerScoreThresholds } from './score/index.js';\nimport { IWantTracer } from './tracer.js';\nimport { SimpleTimeCache } from './utils/time-cache.js';\nimport { ACCEPT_FROM_WHITELIST_DURATION_MS, ACCEPT_FROM_WHITELIST_MAX_MESSAGES, ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE } from './constants.js';\nimport { ChurnReason, getMetrics, IHaveIgnoreReason, InclusionReason, ScorePenalty } from './metrics.js';\nimport { ValidateError, MessageStatus, RejectReason, rejectReasonFromAcceptance } from './types.js';\nimport { buildRawMessage, validateToRawMessage } from './utils/buildRawMessage.js';\nimport { msgIdFnStrictNoSign, msgIdFnStrictSign } from './utils/msgIdFn.js';\nimport { computeAllPeersScoreWeights } from './score/scoreMetrics.js';\nimport { getPublishConfigFromPeerId } from './utils/publishConfig.js';\nimport { StrictNoSign, StrictSign, TopicValidatorResult } from '@libp2p/interface-pubsub';\nimport { removeFirstNItemsFromSet, removeItemsFromSet } from './utils/set.js';\nimport { pushable } from 'it-pushable';\nimport { InboundStream, OutboundStream } from './stream.js';\nimport { decodeRpc, defaultDecodeRpcLimits } from './message/decodeRpc.js';\nimport { multiaddrToIPStr } from './utils/multiaddr.js';\nexport const multicodec = constants.GossipsubIDv11;\nvar GossipStatusCode;\n(function (GossipStatusCode) {\n    GossipStatusCode[GossipStatusCode[\"started\"] = 0] = \"started\";\n    GossipStatusCode[GossipStatusCode[\"stopped\"] = 1] = \"stopped\";\n})(GossipStatusCode || (GossipStatusCode = {}));\nexport class GossipSub extends EventEmitter {\n    constructor(components, options = {}) {\n        super();\n        this.multicodecs = [constants.GossipsubIDv11, constants.GossipsubIDv10];\n        // State\n        this.peers = new Set();\n        this.streamsInbound = new Map();\n        this.streamsOutbound = new Map();\n        /** Ensures outbound streams are created sequentially */\n        this.outboundInflightQueue = pushable({ objectMode: true });\n        /** Direct peers */\n        this.direct = new Set();\n        /** Floodsub peers */\n        this.floodsubPeers = new Set();\n        /**\n         * Map of peer id and AcceptRequestWhileListEntry\n         */\n        this.acceptFromWhitelist = new Map();\n        /**\n         * Map of topics to which peers are subscribed to\n         */\n        this.topics = new Map();\n        /**\n         * List of our subscriptions\n         */\n        this.subscriptions = new Set();\n        /**\n         * Map of topic meshes\n         * topic => peer id set\n         */\n        this.mesh = new Map();\n        /**\n         * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership\n         * topic => peer id set\n         */\n        this.fanout = new Map();\n        /**\n         * Map of last publish time for fanout topics\n         * topic => last publish time\n         */\n        this.fanoutLastpub = new Map();\n        /**\n         * Map of pending messages to gossip\n         * peer id => control messages\n         */\n        this.gossip = new Map();\n        /**\n         * Map of control messages\n         * peer id => control message\n         */\n        this.control = new Map();\n        /**\n         * Number of IHAVEs received from peer in the last heartbeat\n         */\n        this.peerhave = new Map();\n        /** Number of messages we have asked from peer in the last heartbeat */\n        this.iasked = new Map();\n        /** Prune backoff map */\n        this.backoff = new Map();\n        /**\n         * Connection direction cache, marks peers with outbound connections\n         * peer id => direction\n         */\n        this.outbound = new Map();\n        /**\n         * Custom validator function per topic.\n         * Must return or resolve quickly (< 100ms) to prevent causing penalties for late messages.\n         * If you need to apply validation that may require longer times use `asyncValidation` option and callback the\n         * validation result through `Gossipsub.reportValidationResult`\n         */\n        this.topicValidators = new Map();\n        /**\n         * Number of heartbeats since the beginning of time\n         * This allows us to amortize some resource cleanup -- eg: backoff cleanup\n         */\n        this.heartbeatTicks = 0;\n        this.directPeerInitial = null;\n        this.status = { code: GossipStatusCode.stopped };\n        this.heartbeatTimer = null;\n        this.runHeartbeat = () => {\n            const timer = this.metrics?.heartbeatDuration.startTimer();\n            this.heartbeat()\n                .catch((err) => {\n                this.log('Error running heartbeat', err);\n            })\n                .finally(() => {\n                if (timer != null) {\n                    timer();\n                }\n                // Schedule the next run if still in started status\n                if (this.status.code === GossipStatusCode.started) {\n                    // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.\n                    clearTimeout(this.status.heartbeatTimeout);\n                    // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.\n                    // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.\n                    let msToNextHeartbeat = this.opts.heartbeatInterval - ((Date.now() - this.status.hearbeatStartMs) % this.opts.heartbeatInterval);\n                    // If too close to next heartbeat, skip one\n                    if (msToNextHeartbeat < this.opts.heartbeatInterval * 0.25) {\n                        msToNextHeartbeat += this.opts.heartbeatInterval;\n                        this.metrics?.heartbeatSkipped.inc();\n                    }\n                    this.status.heartbeatTimeout = setTimeout(this.runHeartbeat, msToNextHeartbeat);\n                }\n            });\n        };\n        const opts = {\n            fallbackToFloodsub: true,\n            floodPublish: true,\n            doPX: false,\n            directPeers: [],\n            D: constants.GossipsubD,\n            Dlo: constants.GossipsubDlo,\n            Dhi: constants.GossipsubDhi,\n            Dscore: constants.GossipsubDscore,\n            Dout: constants.GossipsubDout,\n            Dlazy: constants.GossipsubDlazy,\n            heartbeatInterval: constants.GossipsubHeartbeatInterval,\n            fanoutTTL: constants.GossipsubFanoutTTL,\n            mcacheLength: constants.GossipsubHistoryLength,\n            mcacheGossip: constants.GossipsubHistoryGossip,\n            seenTTL: constants.GossipsubSeenTTL,\n            gossipsubIWantFollowupMs: constants.GossipsubIWantFollowupTime,\n            prunePeers: constants.GossipsubPrunePeers,\n            pruneBackoff: constants.GossipsubPruneBackoff,\n            graftFloodThreshold: constants.GossipsubGraftFloodThreshold,\n            opportunisticGraftPeers: constants.GossipsubOpportunisticGraftPeers,\n            opportunisticGraftTicks: constants.GossipsubOpportunisticGraftTicks,\n            directConnectTicks: constants.GossipsubDirectConnectTicks,\n            ...options,\n            scoreParams: createPeerScoreParams(options.scoreParams),\n            scoreThresholds: createPeerScoreThresholds(options.scoreThresholds)\n        };\n        this.components = components;\n        this.decodeRpcLimits = opts.decodeRpcLimits ?? defaultDecodeRpcLimits;\n        this.globalSignaturePolicy = opts.globalSignaturePolicy ?? StrictSign;\n        // Also wants to get notified of peers connected using floodsub\n        if (opts.fallbackToFloodsub) {\n            this.multicodecs.push(constants.FloodsubID);\n        }\n        // From pubsub\n        this.log = logger(opts.debugName ?? 'libp2p:gossipsub');\n        // Gossipsub\n        this.opts = opts;\n        this.direct = new Set(opts.directPeers.map((p) => p.id.toString()));\n        this.seenCache = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        this.publishedMessageIds = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        if (options.msgIdFn) {\n            // Use custom function\n            this.msgIdFn = options.msgIdFn;\n        }\n        else {\n            switch (this.globalSignaturePolicy) {\n                case StrictSign:\n                    this.msgIdFn = msgIdFnStrictSign;\n                    break;\n                case StrictNoSign:\n                    this.msgIdFn = msgIdFnStrictNoSign;\n                    break;\n            }\n        }\n        if (options.fastMsgIdFn) {\n            this.fastMsgIdFn = options.fastMsgIdFn;\n            this.fastMsgIdCache = new SimpleTimeCache({ validityMs: opts.seenTTL });\n        }\n        // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.\n        this.msgIdToStrFn = options.msgIdToStrFn ?? messageIdToString;\n        this.mcache = options.messageCache || new MessageCache(opts.mcacheGossip, opts.mcacheLength, this.msgIdToStrFn);\n        if (options.dataTransform) {\n            this.dataTransform = options.dataTransform;\n        }\n        if (options.metricsRegister) {\n            if (!options.metricsTopicStrToLabel) {\n                throw Error('Must set metricsTopicStrToLabel with metrics');\n            }\n            // in theory, each topic has its own meshMessageDeliveriesWindow param\n            // however in lodestar, we configure it mostly the same so just pick the max of positive ones\n            // (some topics have meshMessageDeliveriesWindow as 0)\n            const maxMeshMessageDeliveriesWindowMs = Math.max(...Object.values(opts.scoreParams.topics).map((topicParam) => topicParam.meshMessageDeliveriesWindow), constants.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS);\n            const metrics = getMetrics(options.metricsRegister, options.metricsTopicStrToLabel, {\n                gossipPromiseExpireSec: this.opts.gossipsubIWantFollowupMs / 1000,\n                behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,\n                maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000\n            });\n            metrics.mcacheSize.addCollect(() => this.onScrapeMetrics(metrics));\n            for (const protocol of this.multicodecs) {\n                metrics.protocolsEnabled.set({ protocol }, 1);\n            }\n            this.metrics = metrics;\n        }\n        else {\n            this.metrics = null;\n        }\n        this.gossipTracer = new IWantTracer(this.opts.gossipsubIWantFollowupMs, this.msgIdToStrFn, this.metrics);\n        /**\n         * libp2p\n         */\n        this.score = new PeerScore(this.opts.scoreParams, this.metrics, {\n            scoreCacheValidityMs: opts.heartbeatInterval\n        });\n        this.maxInboundStreams = options.maxInboundStreams;\n        this.maxOutboundStreams = options.maxOutboundStreams;\n        this.allowedTopics = opts.allowedTopics ? new Set(opts.allowedTopics) : null;\n    }\n    getPeers() {\n        return [...this.peers.keys()].map((str) => peerIdFromString(str));\n    }\n    isStarted() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    // LIFECYCLE METHODS\n    /**\n     * Mounts the gossipsub protocol onto the libp2p node and sends our\n     * our subscriptions to every peer connected\n     */\n    async start() {\n        // From pubsub\n        if (this.isStarted()) {\n            return;\n        }\n        this.log('starting');\n        this.publishConfig = await getPublishConfigFromPeerId(this.globalSignaturePolicy, this.components.peerId);\n        // Create the outbound inflight queue\n        // This ensures that outbound stream creation happens sequentially\n        this.outboundInflightQueue = pushable({ objectMode: true });\n        pipe(this.outboundInflightQueue, async (source) => {\n            for await (const { peerId, connection } of source) {\n                await this.createOutboundStream(peerId, connection);\n            }\n        }).catch((e) => this.log.error('outbound inflight queue error', e));\n        // set direct peer addresses in the address book\n        await Promise.all(this.opts.directPeers.map(async (p) => {\n            await this.components.peerStore.addressBook.add(p.id, p.addrs);\n        }));\n        const registrar = this.components.registrar;\n        // Incoming streams\n        // Called after a peer dials us\n        await Promise.all(this.multicodecs.map((multicodec) => registrar.handle(multicodec, this.onIncomingStream.bind(this), {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams\n        })));\n        // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022\n        //\n        // ## Setup:\n        // Gossipsub requests libp2p to callback, TBD\n        //\n        // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols\n        // The handler callback is registered in libp2p Upgrader.protocols map.\n        //\n        // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):\n        // - Adds encryption (NOISE in our case)\n        // - Multiplex stream\n        // - Create a muxer and register that for each new stream call Upgrader.protocols handler\n        //\n        // ## Topology\n        // - new instance of Topology (unlinked to libp2p) with handlers\n        // - registar.register(topology)\n        // register protocol with topology\n        // Topology callbacks called on connection manager changes\n        const topology = createTopology({\n            onConnect: this.onPeerConnected.bind(this),\n            onDisconnect: this.onPeerDisconnected.bind(this)\n        });\n        const registrarTopologyIds = await Promise.all(this.multicodecs.map((multicodec) => registrar.register(multicodec, topology)));\n        // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`\n        const heartbeatTimeout = setTimeout(this.runHeartbeat, constants.GossipsubHeartbeatInitialDelay);\n        // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`\n        this.status = {\n            code: GossipStatusCode.started,\n            registrarTopologyIds,\n            heartbeatTimeout: heartbeatTimeout,\n            hearbeatStartMs: Date.now() + constants.GossipsubHeartbeatInitialDelay\n        };\n        this.score.start();\n        // connect to direct peers\n        this.directPeerInitial = setTimeout(() => {\n            Promise.resolve()\n                .then(async () => {\n                await Promise.all(Array.from(this.direct).map(async (id) => await this.connect(id)));\n            })\n                .catch((err) => {\n                this.log(err);\n            });\n        }, constants.GossipsubDirectConnectInitialDelay);\n        this.log('started');\n    }\n    /**\n     * Unmounts the gossipsub protocol and shuts down every connection\n     */\n    async stop() {\n        this.log('stopping');\n        // From pubsub\n        if (this.status.code !== GossipStatusCode.started) {\n            return;\n        }\n        const { registrarTopologyIds } = this.status;\n        this.status = { code: GossipStatusCode.stopped };\n        // unregister protocol and handlers\n        const registrar = this.components.registrar;\n        registrarTopologyIds.forEach((id) => registrar.unregister(id));\n        this.outboundInflightQueue.end();\n        for (const outboundStream of this.streamsOutbound.values()) {\n            outboundStream.close();\n        }\n        this.streamsOutbound.clear();\n        for (const inboundStream of this.streamsInbound.values()) {\n            inboundStream.close();\n        }\n        this.streamsInbound.clear();\n        this.peers.clear();\n        this.subscriptions.clear();\n        // Gossipsub\n        if (this.heartbeatTimer) {\n            this.heartbeatTimer.cancel();\n            this.heartbeatTimer = null;\n        }\n        this.score.stop();\n        this.mesh.clear();\n        this.fanout.clear();\n        this.fanoutLastpub.clear();\n        this.gossip.clear();\n        this.control.clear();\n        this.peerhave.clear();\n        this.iasked.clear();\n        this.backoff.clear();\n        this.outbound.clear();\n        this.gossipTracer.clear();\n        this.seenCache.clear();\n        if (this.fastMsgIdCache)\n            this.fastMsgIdCache.clear();\n        if (this.directPeerInitial)\n            clearTimeout(this.directPeerInitial);\n        this.log('stopped');\n    }\n    /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */\n    dumpPeerScoreStats() {\n        return this.score.dumpPeerScoreStats();\n    }\n    /**\n     * On an inbound stream opened\n     */\n    onIncomingStream({ stream, connection }) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const peerId = connection.remotePeer;\n        // add peer to router\n        this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n        // create inbound stream\n        this.createInboundStream(peerId, stream);\n        // attempt to create outbound stream\n        this.outboundInflightQueue.push({ peerId, connection });\n    }\n    /**\n     * Registrar notifies an established connection with pubsub protocol\n     */\n    onPeerConnected(peerId, connection) {\n        this.metrics?.newConnectionCount.inc({ status: connection.stat.status });\n        // libp2p may emit a closed connection and never issue peer:disconnect event\n        // see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/398\n        if (!this.isStarted() || connection.stat.status !== 'OPEN') {\n            return;\n        }\n        this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n        this.outboundInflightQueue.push({ peerId, connection });\n    }\n    /**\n     * Registrar notifies a closing connection with pubsub protocol\n     */\n    onPeerDisconnected(peerId) {\n        this.log('connection ended %p', peerId);\n        this.removePeer(peerId);\n    }\n    async createOutboundStream(peerId, connection) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for inbound streams\n        // If an outbound stream already exists, don't create a new stream\n        if (this.streamsOutbound.has(id)) {\n            return;\n        }\n        try {\n            const stream = new OutboundStream(await connection.newStream(this.multicodecs), (e) => this.log.error('outbound pipe error', e), { maxBufferSize: this.opts.maxOutboundBufferSize });\n            this.log('create outbound stream %p', peerId);\n            this.streamsOutbound.set(id, stream);\n            const protocol = stream.protocol;\n            if (protocol === constants.FloodsubID) {\n                this.floodsubPeers.add(id);\n            }\n            this.metrics?.peersPerProtocol.inc({ protocol }, 1);\n            // Immediately send own subscriptions via the newly attached stream\n            if (this.subscriptions.size > 0) {\n                this.log('send subscriptions to', id);\n                this.sendSubscriptions(id, Array.from(this.subscriptions), true);\n            }\n        }\n        catch (e) {\n            this.log.error('createOutboundStream error', e);\n        }\n    }\n    async createInboundStream(peerId, stream) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for outbound streams\n        // If a peer initiates a new inbound connection\n        // we assume that one is the new canonical inbound stream\n        const priorInboundStream = this.streamsInbound.get(id);\n        if (priorInboundStream !== undefined) {\n            this.log('replacing existing inbound steam %s', id);\n            priorInboundStream.close();\n        }\n        this.log('create inbound stream %s', id);\n        const inboundStream = new InboundStream(stream, { maxDataLength: this.opts.maxInboundDataLength });\n        this.streamsInbound.set(id, inboundStream);\n        this.pipePeerReadStream(peerId, inboundStream.source).catch((err) => this.log(err));\n    }\n    /**\n     * Add a peer to the router\n     */\n    addPeer(peerId, direction, addr) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            this.log('new peer %p', peerId);\n            this.peers.add(id);\n            // Add to peer scoring\n            this.score.addPeer(id);\n            const currentIP = multiaddrToIPStr(addr);\n            if (currentIP !== null) {\n                this.score.addIP(id, currentIP);\n            }\n            else {\n                this.log('Added peer has no IP in current address %s %s', id, addr.toString());\n            }\n            // track the connection direction. Don't allow to unset outbound\n            if (!this.outbound.has(id)) {\n                this.outbound.set(id, direction === 'outbound');\n            }\n        }\n    }\n    /**\n     * Removes a peer from the router\n     */\n    removePeer(peerId) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // delete peer\n        this.log('delete peer %p', peerId);\n        this.peers.delete(id);\n        const outboundStream = this.streamsOutbound.get(id);\n        const inboundStream = this.streamsInbound.get(id);\n        if (outboundStream) {\n            this.metrics?.peersPerProtocol.inc({ protocol: outboundStream.protocol }, -1);\n        }\n        // close streams\n        outboundStream?.close();\n        inboundStream?.close();\n        // remove streams\n        this.streamsOutbound.delete(id);\n        this.streamsInbound.delete(id);\n        // remove peer from topics map\n        for (const peers of this.topics.values()) {\n            peers.delete(id);\n        }\n        // Remove this peer from the mesh\n        for (const [topicStr, peers] of this.mesh) {\n            if (peers.delete(id) === true) {\n                this.metrics?.onRemoveFromMesh(topicStr, ChurnReason.Dc, 1);\n            }\n        }\n        // Remove this peer from the fanout\n        for (const peers of this.fanout.values()) {\n            peers.delete(id);\n        }\n        // Remove from floodsubPeers\n        this.floodsubPeers.delete(id);\n        // Remove from gossip mapping\n        this.gossip.delete(id);\n        // Remove from control mapping\n        this.control.delete(id);\n        // Remove from backoff mapping\n        this.outbound.delete(id);\n        // Remove from peer scoring\n        this.score.removePeer(id);\n        this.acceptFromWhitelist.delete(id);\n    }\n    // API METHODS\n    get started() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    /**\n     * Get a the peer-ids in a topic mesh\n     */\n    getMeshPeers(topic) {\n        const peersInTopic = this.mesh.get(topic);\n        return peersInTopic ? Array.from(peersInTopic) : [];\n    }\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     */\n    getSubscribers(topic) {\n        const peersInTopic = this.topics.get(topic);\n        return (peersInTopic ? Array.from(peersInTopic) : []).map((str) => peerIdFromString(str));\n    }\n    /**\n     * Get the list of topics which the peer is subscribed to.\n     */\n    getTopics() {\n        return Array.from(this.subscriptions);\n    }\n    // TODO: Reviewing Pubsub API\n    // MESSAGE METHODS\n    /**\n     * Responsible for processing each RPC message received by other peers.\n     */\n    async pipePeerReadStream(peerId, stream) {\n        try {\n            await pipe(stream, async (source) => {\n                for await (const data of source) {\n                    try {\n                        // TODO: Check max gossip message size, before decodeRpc()\n                        const rpcBytes = data.subarray();\n                        // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.\n                        // TODO: What should we do if the entire RPC is invalid?\n                        const rpc = decodeRpc(rpcBytes, this.decodeRpcLimits);\n                        this.metrics?.onRpcRecv(rpc, rpcBytes.length);\n                        // Since processRpc may be overridden entirely in unsafe ways,\n                        // the simplest/safest option here is to wrap in a function and capture all errors\n                        // to prevent a top-level unhandled exception\n                        // This processing of rpc messages should happen without awaiting full validation/execution of prior messages\n                        if (this.opts.awaitRpcHandler) {\n                            try {\n                                await this.handleReceivedRpc(peerId, rpc);\n                            }\n                            catch (err) {\n                                this.metrics?.onRpcRecvError();\n                                this.log(err);\n                            }\n                        }\n                        else {\n                            this.handleReceivedRpc(peerId, rpc).catch((err) => {\n                                this.metrics?.onRpcRecvError();\n                                this.log(err);\n                            });\n                        }\n                    }\n                    catch (e) {\n                        this.metrics?.onRpcDataError();\n                        this.log(e);\n                    }\n                }\n            });\n        }\n        catch (err) {\n            this.metrics?.onPeerReadStreamError();\n            this.handlePeerReadStreamError(err, peerId);\n        }\n    }\n    /**\n     * Handle error when read stream pipe throws, less of the functional use but more\n     * to for testing purposes to spy on the error handling\n     * */\n    handlePeerReadStreamError(err, peerId) {\n        this.log.error(err);\n        this.onPeerDisconnected(peerId);\n    }\n    /**\n     * Handles an rpc request from a peer\n     */\n    async handleReceivedRpc(from, rpc) {\n        // Check if peer is graylisted in which case we ignore the event\n        if (!this.acceptFrom(from.toString())) {\n            this.log('received message from unacceptable peer %p', from);\n            this.metrics?.rpcRecvNotAccepted.inc();\n            return;\n        }\n        const subscriptions = rpc.subscriptions ? rpc.subscriptions.length : 0;\n        const messages = rpc.messages ? rpc.messages.length : 0;\n        let ihave = 0;\n        let iwant = 0;\n        let graft = 0;\n        let prune = 0;\n        if (rpc.control) {\n            if (rpc.control.ihave)\n                ihave = rpc.control.ihave.length;\n            if (rpc.control.iwant)\n                iwant = rpc.control.iwant.length;\n            if (rpc.control.graft)\n                graft = rpc.control.graft.length;\n            if (rpc.control.prune)\n                prune = rpc.control.prune.length;\n        }\n        this.log(`rpc.from ${from.toString()} subscriptions ${subscriptions} messages ${messages} ihave ${ihave} iwant ${iwant} graft ${graft} prune ${prune}`);\n        // Handle received subscriptions\n        if (rpc.subscriptions && rpc.subscriptions.length > 0) {\n            // update peer subscriptions\n            const subscriptions = [];\n            rpc.subscriptions.forEach((subOpt) => {\n                const topic = subOpt.topic;\n                const subscribe = subOpt.subscribe === true;\n                if (topic != null) {\n                    if (this.allowedTopics && !this.allowedTopics.has(topic)) {\n                        // Not allowed: subscription data-structures are not bounded by topic count\n                        // TODO: Should apply behaviour penalties?\n                        return;\n                    }\n                    this.handleReceivedSubscription(from, topic, subscribe);\n                    subscriptions.push({ topic, subscribe });\n                }\n            });\n            this.dispatchEvent(new CustomEvent('subscription-change', {\n                detail: { peerId: from, subscriptions }\n            }));\n        }\n        // Handle messages\n        // TODO: (up to limit)\n        if (rpc.messages) {\n            for (const message of rpc.messages) {\n                if (this.allowedTopics && !this.allowedTopics.has(message.topic)) {\n                    // Not allowed: message cache data-structures are not bounded by topic count\n                    // TODO: Should apply behaviour penalties?\n                    continue;\n                }\n                const handleReceivedMessagePromise = this.handleReceivedMessage(from, message)\n                    // Should never throw, but handle just in case\n                    .catch((err) => {\n                    this.metrics?.onMsgRecvError(message.topic);\n                    this.log(err);\n                });\n                if (this.opts.awaitRpcMessageHandler) {\n                    await handleReceivedMessagePromise;\n                }\n            }\n        }\n        // Handle control messages\n        if (rpc.control) {\n            await this.handleControlMessage(from.toString(), rpc.control);\n        }\n    }\n    /**\n     * Handles a subscription change from a peer\n     */\n    handleReceivedSubscription(from, topic, subscribe) {\n        this.log('subscription update from %p topic %s', from, topic);\n        let topicSet = this.topics.get(topic);\n        if (topicSet == null) {\n            topicSet = new Set();\n            this.topics.set(topic, topicSet);\n        }\n        if (subscribe) {\n            // subscribe peer to new topic\n            topicSet.add(from.toString());\n        }\n        else {\n            // unsubscribe from existing topic\n            topicSet.delete(from.toString());\n        }\n        // TODO: rust-libp2p has A LOT more logic here\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n    async handleReceivedMessage(from, rpcMsg) {\n        this.metrics?.onMsgRecvPreValidation(rpcMsg.topic);\n        const validationResult = await this.validateReceivedMessage(from, rpcMsg);\n        this.metrics?.onMsgRecvResult(rpcMsg.topic, validationResult.code);\n        switch (validationResult.code) {\n            case MessageStatus.duplicate:\n                // Report the duplicate\n                this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);\n                // due to the collision of fastMsgIdFn, 2 different messages may end up the same fastMsgId\n                // so we need to also mark the duplicate message as delivered or the promise is not resolved\n                // and peer gets penalized. See https://github.com/ChainSafe/js-libp2p-gossipsub/pull/385\n                this.gossipTracer.deliverMessage(validationResult.msgIdStr, true);\n                this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());\n                return;\n            case MessageStatus.invalid:\n                // invalid messages received\n                // metrics.register_invalid_message(&raw_message.topic)\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                if (validationResult.msgIdStr) {\n                    const msgIdStr = validationResult.msgIdStr;\n                    this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);\n                    this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);\n                }\n                else {\n                    this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);\n                }\n                this.metrics?.onMsgRecvInvalid(rpcMsg.topic, validationResult);\n                return;\n            case MessageStatus.valid:\n                // Tells score that message arrived (but is maybe not fully validated yet).\n                // Consider the message as delivered for gossip promises.\n                this.score.validateMessage(validationResult.messageId.msgIdStr);\n                this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);\n                // Add the message to our memcache\n                // if no validation is required, mark the message as validated\n                this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);\n                // Dispatch the message to the user if we are subscribed to the topic\n                if (this.subscriptions.has(rpcMsg.topic)) {\n                    const isFromSelf = this.components.peerId.equals(from);\n                    if (!isFromSelf || this.opts.emitSelf) {\n                        super.dispatchEvent(new CustomEvent('gossipsub:message', {\n                            detail: {\n                                propagationSource: from,\n                                msgId: validationResult.messageId.msgIdStr,\n                                msg: validationResult.msg\n                            }\n                        }));\n                        // TODO: Add option to switch between emit per topic or all messages in one\n                        super.dispatchEvent(new CustomEvent('message', { detail: validationResult.msg }));\n                    }\n                }\n                // Forward the message to mesh peers, if no validation is required\n                // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward\n                if (!this.opts.asyncValidation) {\n                    // TODO: in rust-libp2p\n                    // .forward_msg(&msg_id, raw_message, Some(propagation_source))\n                    this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());\n                }\n        }\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */\n    async validateReceivedMessage(propagationSource, rpcMsg) {\n        // Fast message ID stuff\n        const fastMsgIdStr = this.fastMsgIdFn?.(rpcMsg);\n        const msgIdCached = fastMsgIdStr !== undefined ? this.fastMsgIdCache?.get(fastMsgIdStr) : undefined;\n        if (msgIdCached) {\n            // This message has been seen previously. Ignore it\n            return { code: MessageStatus.duplicate, msgIdStr: msgIdCached };\n        }\n        // Perform basic validation on message and convert to RawGossipsubMessage for fastMsgIdFn()\n        const validationResult = await validateToRawMessage(this.globalSignaturePolicy, rpcMsg);\n        if (!validationResult.valid) {\n            return { code: MessageStatus.invalid, reason: RejectReason.Error, error: validationResult.error };\n        }\n        const msg = validationResult.message;\n        // Try and perform the data transform to the message. If it fails, consider it invalid.\n        try {\n            if (this.dataTransform) {\n                msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);\n            }\n        }\n        catch (e) {\n            this.log('Invalid message, transform failed', e);\n            return { code: MessageStatus.invalid, reason: RejectReason.Error, error: ValidateError.TransformFailed };\n        }\n        // TODO: Check if message is from a blacklisted source or propagation origin\n        // - Reject any message from a blacklisted peer\n        // - Also reject any message that originated from a blacklisted peer\n        // - reject messages claiming to be from ourselves but not locally published\n        // Calculate the message id on the transformed data.\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        const messageId = { msgId, msgIdStr };\n        // Add the message to the duplicate caches\n        if (fastMsgIdStr !== undefined && this.fastMsgIdCache) {\n            const collision = this.fastMsgIdCache.put(fastMsgIdStr, msgIdStr);\n            if (collision) {\n                this.metrics?.fastMsgIdCacheCollision.inc();\n            }\n        }\n        if (this.seenCache.has(msgIdStr)) {\n            return { code: MessageStatus.duplicate, msgIdStr };\n        }\n        else {\n            this.seenCache.put(msgIdStr);\n        }\n        // (Optional) Provide custom validation here with dynamic validators per topic\n        // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores\n        // to not penalize peers for long validation times.\n        const topicValidator = this.topicValidators.get(rpcMsg.topic);\n        if (topicValidator != null) {\n            let acceptance;\n            // Use try {} catch {} in case topicValidator() is synchronous\n            try {\n                acceptance = await topicValidator(propagationSource, msg);\n            }\n            catch (e) {\n                const errCode = e.code;\n                if (errCode === constants.ERR_TOPIC_VALIDATOR_IGNORE)\n                    acceptance = TopicValidatorResult.Ignore;\n                if (errCode === constants.ERR_TOPIC_VALIDATOR_REJECT)\n                    acceptance = TopicValidatorResult.Reject;\n                else\n                    acceptance = TopicValidatorResult.Ignore;\n            }\n            if (acceptance !== TopicValidatorResult.Accept) {\n                return { code: MessageStatus.invalid, reason: rejectReasonFromAcceptance(acceptance), msgIdStr };\n            }\n        }\n        return { code: MessageStatus.valid, messageId, msg };\n    }\n    /**\n     * Return score of a peer.\n     */\n    getScore(peerId) {\n        return this.score.score(peerId);\n    }\n    /**\n     * Send an rpc object to a peer with subscriptions\n     */\n    sendSubscriptions(toPeer, topics, subscribe) {\n        this.sendRpc(toPeer, {\n            subscriptions: topics.map((topic) => ({ topic, subscribe }))\n        });\n    }\n    /**\n     * Handles an rpc control message from a peer\n     */\n    async handleControlMessage(id, controlMsg) {\n        if (controlMsg === undefined) {\n            return;\n        }\n        const iwant = controlMsg.ihave ? this.handleIHave(id, controlMsg.ihave) : [];\n        const ihave = controlMsg.iwant ? this.handleIWant(id, controlMsg.iwant) : [];\n        const prune = controlMsg.graft ? await this.handleGraft(id, controlMsg.graft) : [];\n        controlMsg.prune && (await this.handlePrune(id, controlMsg.prune));\n        if (!iwant.length && !ihave.length && !prune.length) {\n            return;\n        }\n        const sent = this.sendRpc(id, { messages: ihave, control: { iwant, prune } });\n        const iwantMessageIds = iwant[0]?.messageIDs;\n        if (iwantMessageIds) {\n            if (sent) {\n                this.gossipTracer.addPromise(id, iwantMessageIds);\n            }\n            else {\n                this.metrics?.iwantPromiseUntracked.inc(1);\n            }\n        }\n    }\n    /**\n     * Whether to accept a message from a peer\n     */\n    acceptFrom(id) {\n        if (this.direct.has(id)) {\n            return true;\n        }\n        const now = Date.now();\n        const entry = this.acceptFromWhitelist.get(id);\n        if (entry && entry.messagesAccepted < ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {\n            entry.messagesAccepted += 1;\n            return true;\n        }\n        const score = this.score.score(id);\n        if (score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {\n            // peer is unlikely to be able to drop its score to `graylistThreshold`\n            // after 128 messages or 1s\n            this.acceptFromWhitelist.set(id, {\n                messagesAccepted: 0,\n                acceptUntil: now + ACCEPT_FROM_WHITELIST_DURATION_MS\n            });\n        }\n        else {\n            this.acceptFromWhitelist.delete(id);\n        }\n        return score >= this.opts.scoreThresholds.graylistThreshold;\n    }\n    /**\n     * Handles IHAVE messages\n     */\n    handleIHave(id, ihave) {\n        if (!ihave.length) {\n            return [];\n        }\n        // we ignore IHAVE gossip from any peer whose score is below the gossips threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.LowScore });\n            return [];\n        }\n        // IHAVE flood protection\n        const peerhave = (this.peerhave.get(id) ?? 0) + 1;\n        this.peerhave.set(id, peerhave);\n        if (peerhave > constants.GossipsubMaxIHaveMessages) {\n            this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIhave });\n            return [];\n        }\n        const iasked = this.iasked.get(id) ?? 0;\n        if (iasked >= constants.GossipsubMaxIHaveLength) {\n            this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);\n            this.metrics?.ihaveRcvIgnored.inc({ reason: IHaveIgnoreReason.MaxIasked });\n            return [];\n        }\n        // string msgId => msgId\n        const iwant = new Map();\n        ihave.forEach(({ topicID, messageIDs }) => {\n            if (!topicID || !messageIDs || !this.mesh.has(topicID)) {\n                return;\n            }\n            let idonthave = 0;\n            messageIDs.forEach((msgId) => {\n                const msgIdStr = this.msgIdToStrFn(msgId);\n                if (!this.seenCache.has(msgIdStr)) {\n                    iwant.set(msgIdStr, msgId);\n                    idonthave++;\n                }\n            });\n            this.metrics?.onIhaveRcv(topicID, messageIDs.length, idonthave);\n        });\n        if (!iwant.size) {\n            return [];\n        }\n        let iask = iwant.size;\n        if (iask + iasked > constants.GossipsubMaxIHaveLength) {\n            iask = constants.GossipsubMaxIHaveLength - iasked;\n        }\n        this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);\n        let iwantList = Array.from(iwant.values());\n        // ask in random order\n        shuffle(iwantList);\n        // truncate to the messages we are actually asking for and update the iasked counter\n        iwantList = iwantList.slice(0, iask);\n        this.iasked.set(id, iasked + iask);\n        // do not add gossipTracer promise here until a successful sendRpc()\n        return [\n            {\n                messageIDs: iwantList\n            }\n        ];\n    }\n    /**\n     * Handles IWANT messages\n     * Returns messages to send back to peer\n     */\n    handleIWant(id, iwant) {\n        if (!iwant.length) {\n            return [];\n        }\n        // we don't respond to IWANT requests from any per whose score is below the gossip threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);\n            return [];\n        }\n        const ihave = new Map();\n        const iwantByTopic = new Map();\n        let iwantDonthave = 0;\n        iwant.forEach(({ messageIDs }) => {\n            messageIDs &&\n                messageIDs.forEach((msgId) => {\n                    const msgIdStr = this.msgIdToStrFn(msgId);\n                    const entry = this.mcache.getWithIWantCount(msgIdStr, id);\n                    if (entry == null) {\n                        iwantDonthave++;\n                        return;\n                    }\n                    iwantByTopic.set(entry.msg.topic, 1 + (iwantByTopic.get(entry.msg.topic) ?? 0));\n                    if (entry.count > constants.GossipsubGossipRetransmission) {\n                        this.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);\n                        return;\n                    }\n                    ihave.set(msgIdStr, entry.msg);\n                });\n        });\n        this.metrics?.onIwantRcv(iwantByTopic, iwantDonthave);\n        if (!ihave.size) {\n            this.log('IWANT: Could not provide any wanted messages to %s', id);\n            return [];\n        }\n        this.log('IWANT: Sending %d messages to %s', ihave.size, id);\n        return Array.from(ihave.values());\n    }\n    /**\n     * Handles Graft messages\n     */\n    async handleGraft(id, graft) {\n        const prune = [];\n        const score = this.score.score(id);\n        const now = Date.now();\n        let doPX = this.opts.doPX;\n        graft.forEach(({ topicID }) => {\n            if (!topicID) {\n                return;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (!peersInMesh) {\n                // don't do PX when there is an unknown topic to avoid leaking our peers\n                doPX = false;\n                // spam hardening: ignore GRAFTs for unknown topics\n                return;\n            }\n            // check if peer is already in the mesh; if so do nothing\n            if (peersInMesh.has(id)) {\n                return;\n            }\n            // we don't GRAFT to/from direct peers; complain loudly if this happens\n            if (this.direct.has(id)) {\n                this.log('GRAFT: ignoring request from direct peer %s', id);\n                // this is possibly a bug from a non-reciprical configuration; send a PRUNE\n                prune.push(topicID);\n                // but don't px\n                doPX = false;\n                return;\n            }\n            // make sure we are not backing off that peer\n            const expire = this.backoff.get(topicID)?.get(id);\n            if (typeof expire === 'number' && now < expire) {\n                this.log('GRAFT: ignoring backed off peer %s', id);\n                // add behavioral penalty\n                this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                // no PX\n                doPX = false;\n                // check the flood cutoff -- is the GRAFT coming too fast?\n                const floodCutoff = expire + this.opts.graftFloodThreshold - this.opts.pruneBackoff;\n                if (now < floodCutoff) {\n                    // extra penalty\n                    this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n                }\n                // refresh the backoff\n                this.addBackoff(id, topicID);\n                prune.push(topicID);\n                return;\n            }\n            // check the score\n            if (score < 0) {\n                // we don't GRAFT peers with negative score\n                this.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);\n                // we do send them PRUNE however, because it's a matter of protocol correctness\n                prune.push(topicID);\n                // but we won't PX to them\n                doPX = false;\n                // add/refresh backoff so that we don't reGRAFT too early even if the score decays\n                this.addBackoff(id, topicID);\n                return;\n            }\n            // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts\n            // from peers with outbound connections; this is a defensive check to restrict potential\n            // mesh takeover attacks combined with love bombing\n            if (peersInMesh.size >= this.opts.Dhi && !this.outbound.get(id)) {\n                prune.push(topicID);\n                this.addBackoff(id, topicID);\n                return;\n            }\n            this.log('GRAFT: Add mesh link from %s in %s', id, topicID);\n            this.score.graft(id, topicID);\n            peersInMesh.add(id);\n            this.metrics?.onAddToMesh(topicID, InclusionReason.Subscribed, 1);\n        });\n        if (!prune.length) {\n            return [];\n        }\n        return await Promise.all(prune.map((topic) => this.makePrune(id, topic, doPX)));\n    }\n    /**\n     * Handles Prune messages\n     */\n    async handlePrune(id, prune) {\n        const score = this.score.score(id);\n        for (const { topicID, backoff, peers } of prune) {\n            if (topicID == null) {\n                continue;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (!peersInMesh) {\n                return;\n            }\n            this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);\n            this.score.prune(id, topicID);\n            if (peersInMesh.has(id)) {\n                peersInMesh.delete(id);\n                this.metrics?.onRemoveFromMesh(topicID, ChurnReason.Unsub, 1);\n            }\n            // is there a backoff specified by the peer? if so obey it\n            if (typeof backoff === 'number' && backoff > 0) {\n                this.doAddBackoff(id, topicID, backoff * 1000);\n            }\n            else {\n                this.addBackoff(id, topicID);\n            }\n            // PX\n            if (peers && peers.length) {\n                // we ignore PX from peers with insufficient scores\n                if (score < this.opts.scoreThresholds.acceptPXThreshold) {\n                    this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);\n                    continue;\n                }\n                await this.pxConnect(peers);\n            }\n        }\n    }\n    /**\n     * Add standard backoff log for a peer in a topic\n     */\n    addBackoff(id, topic) {\n        this.doAddBackoff(id, topic, this.opts.pruneBackoff);\n    }\n    /**\n     * Add backoff expiry interval for a peer in a topic\n     *\n     * @param id\n     * @param topic\n     * @param interval - backoff duration in milliseconds\n     */\n    doAddBackoff(id, topic, interval) {\n        let backoff = this.backoff.get(topic);\n        if (!backoff) {\n            backoff = new Map();\n            this.backoff.set(topic, backoff);\n        }\n        const expire = Date.now() + interval;\n        const existingExpire = backoff.get(id) ?? 0;\n        if (existingExpire < expire) {\n            backoff.set(id, expire);\n        }\n    }\n    /**\n     * Apply penalties from broken IHAVE/IWANT promises\n     */\n    applyIwantPenalties() {\n        this.gossipTracer.getBrokenPromises().forEach((count, p) => {\n            this.log(\"peer %s didn't follow up in %d IWANT requests; adding penalty\", p, count);\n            this.score.addPenalty(p, count, ScorePenalty.BrokenPromise);\n        });\n    }\n    /**\n     * Clear expired backoff expiries\n     */\n    clearBackoff() {\n        // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much\n        if (this.heartbeatTicks % constants.GossipsubPruneBackoffTicks !== 0) {\n            return;\n        }\n        const now = Date.now();\n        this.backoff.forEach((backoff, topic) => {\n            backoff.forEach((expire, id) => {\n                if (expire < now) {\n                    backoff.delete(id);\n                }\n            });\n            if (backoff.size === 0) {\n                this.backoff.delete(topic);\n            }\n        });\n    }\n    /**\n     * Maybe reconnect to direct peers\n     */\n    async directConnect() {\n        const toconnect = [];\n        this.direct.forEach((id) => {\n            if (!this.streamsOutbound.has(id)) {\n                toconnect.push(id);\n            }\n        });\n        await Promise.all(toconnect.map(async (id) => await this.connect(id)));\n    }\n    /**\n     * Maybe attempt connection given signed peer records\n     */\n    async pxConnect(peers) {\n        if (peers.length > this.opts.prunePeers) {\n            shuffle(peers);\n            peers = peers.slice(0, this.opts.prunePeers);\n        }\n        const toconnect = [];\n        await Promise.all(peers.map(async (pi) => {\n            if (!pi.peerID) {\n                return;\n            }\n            const p = peerIdFromBytes(pi.peerID).toString();\n            if (this.peers.has(p)) {\n                return;\n            }\n            if (!pi.signedPeerRecord) {\n                toconnect.push(p);\n                return;\n            }\n            // The peer sent us a signed record\n            // This is not a record from the peer who sent the record, but another peer who is connected with it\n            // Ensure that it is valid\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(pi.signedPeerRecord, 'libp2p-peer-record');\n                const eid = envelope.peerId;\n                if (!envelope.peerId.equals(p)) {\n                    this.log(\"bogus peer record obtained through px: peer ID %p doesn't match expected peer %p\", eid, p);\n                    return;\n                }\n                if (!(await this.components.peerStore.addressBook.consumePeerRecord(envelope))) {\n                    this.log('bogus peer record obtained through px: could not add peer record to address book');\n                    return;\n                }\n                toconnect.push(p);\n            }\n            catch (e) {\n                this.log('bogus peer record obtained through px: invalid signature or not a peer record');\n            }\n        }));\n        if (!toconnect.length) {\n            return;\n        }\n        await Promise.all(toconnect.map(async (id) => await this.connect(id)));\n    }\n    /**\n     * Connect to a peer using the gossipsub protocol\n     */\n    async connect(id) {\n        this.log('Initiating connection with %s', id);\n        const peerId = peerIdFromString(id);\n        const connection = await this.components.connectionManager.openConnection(peerId);\n        for (const multicodec of this.multicodecs) {\n            for (const topology of this.components.registrar.getTopologies(multicodec)) {\n                topology.onConnect(peerId, connection);\n            }\n        }\n    }\n    /**\n     * Subscribes to a topic\n     */\n    subscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Pubsub has not started');\n        }\n        if (!this.subscriptions.has(topic)) {\n            this.subscriptions.add(topic);\n            for (const peerId of this.peers.keys()) {\n                this.sendSubscriptions(peerId, [topic], true);\n            }\n        }\n        this.join(topic);\n    }\n    /**\n     * Unsubscribe to a topic\n     */\n    unsubscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Pubsub is not started');\n        }\n        const wasSubscribed = this.subscriptions.delete(topic);\n        this.log('unsubscribe from %s - am subscribed %s', topic, wasSubscribed);\n        if (wasSubscribed) {\n            for (const peerId of this.peers.keys()) {\n                this.sendSubscriptions(peerId, [topic], false);\n            }\n        }\n        this.leave(topic);\n    }\n    /**\n     * Join topic\n     */\n    join(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Gossipsub has not started');\n        }\n        // if we are already in the mesh, return\n        if (this.mesh.has(topic)) {\n            return;\n        }\n        this.log('JOIN %s', topic);\n        this.metrics?.onJoin(topic);\n        const toAdd = new Set();\n        // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,\n        // removing the fanout entry.\n        const fanoutPeers = this.fanout.get(topic);\n        if (fanoutPeers) {\n            // Remove fanout entry and the last published time\n            this.fanout.delete(topic);\n            this.fanoutLastpub.delete(topic);\n            // remove explicit peers, peers with negative scores, and backoffed peers\n            fanoutPeers.forEach((id) => {\n                // TODO:rust-libp2p checks `self.backoffs.is_backoff_with_slack()`\n                if (!this.direct.has(id) && this.score.score(id) >= 0) {\n                    toAdd.add(id);\n                }\n            });\n            this.metrics?.onAddToMesh(topic, InclusionReason.Fanout, toAdd.size);\n        }\n        // check if we need to get more peers, which we randomly select\n        if (toAdd.size < this.opts.D) {\n            const fanoutCount = toAdd.size;\n            const newPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => \n            // filter direct peers and peers with negative score\n            !toAdd.has(id) && !this.direct.has(id) && this.score.score(id) >= 0);\n            newPeers.forEach((peer) => {\n                toAdd.add(peer);\n            });\n            this.metrics?.onAddToMesh(topic, InclusionReason.Random, toAdd.size - fanoutCount);\n        }\n        this.mesh.set(topic, toAdd);\n        toAdd.forEach((id) => {\n            this.log('JOIN: Add mesh link to %s in %s', id, topic);\n            this.sendGraft(id, topic);\n            // rust-libp2p\n            // - peer_score.graft()\n            // - Self::control_pool_add()\n            // - peer_added_to_mesh()\n        });\n    }\n    /**\n     * Leave topic\n     */\n    leave(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error('Gossipsub has not started');\n        }\n        this.log('LEAVE %s', topic);\n        this.metrics?.onLeave(topic);\n        // Send PRUNE to mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers) {\n            Promise.all(Array.from(meshPeers).map(async (id) => {\n                this.log('LEAVE: Remove mesh link to %s in %s', id, topic);\n                return await this.sendPrune(id, topic);\n            })).catch((err) => {\n                this.log('Error sending prunes to mesh peers', err);\n            });\n            this.mesh.delete(topic);\n        }\n    }\n    selectPeersToForward(topic, propagationSource, excludePeers) {\n        const tosend = new Set();\n        // Add explicit peers\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic) {\n            this.direct.forEach((peer) => {\n                if (peersInTopic.has(peer) && propagationSource !== peer && !excludePeers?.has(peer)) {\n                    tosend.add(peer);\n                }\n            });\n            // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not\n            // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693\n            // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361\n            this.floodsubPeers.forEach((peer) => {\n                if (peersInTopic.has(peer) &&\n                    propagationSource !== peer &&\n                    !excludePeers?.has(peer) &&\n                    this.score.score(peer) >= this.opts.scoreThresholds.publishThreshold) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        // add mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers && meshPeers.size > 0) {\n            meshPeers.forEach((peer) => {\n                if (propagationSource !== peer && !excludePeers?.has(peer)) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        return tosend;\n    }\n    selectPeersToPublish(topic) {\n        const tosend = new Set();\n        const tosendCount = {\n            direct: 0,\n            floodsub: 0,\n            mesh: 0,\n            fanout: 0\n        };\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic) {\n            // flood-publish behavior\n            // send to direct peers and _all_ peers meeting the publishThreshold\n            if (this.opts.floodPublish) {\n                peersInTopic.forEach((id) => {\n                    if (this.direct.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    }\n                    else if (this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n            }\n            else {\n                // non-flood-publish behavior\n                // send to direct peers, subscribed floodsub peers\n                // and some mesh peers above publishThreshold\n                // direct peers (if subscribed)\n                this.direct.forEach((id) => {\n                    if (peersInTopic.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    }\n                });\n                // floodsub peers\n                // Note: if there are no floodsub peers, we save a loop through peersInTopic Map\n                this.floodsubPeers.forEach((id) => {\n                    if (peersInTopic.has(id) && this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n                // Gossipsub peers handling\n                const meshPeers = this.mesh.get(topic);\n                if (meshPeers && meshPeers.size > 0) {\n                    meshPeers.forEach((peer) => {\n                        tosend.add(peer);\n                        tosendCount.mesh++;\n                    });\n                }\n                // We are not in the mesh for topic, use fanout peers\n                else {\n                    const fanoutPeers = this.fanout.get(topic);\n                    if (fanoutPeers && fanoutPeers.size > 0) {\n                        fanoutPeers.forEach((peer) => {\n                            tosend.add(peer);\n                            tosendCount.fanout++;\n                        });\n                    }\n                    // We have no fanout peers, select mesh_n of them and add them to the fanout\n                    else {\n                        // If we are not in the fanout, then pick peers in topic above the publishThreshold\n                        const newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, (id) => {\n                            return this.score.score(id) >= this.opts.scoreThresholds.publishThreshold;\n                        });\n                        if (newFanoutPeers.size > 0) {\n                            // eslint-disable-line max-depth\n                            this.fanout.set(topic, newFanoutPeers);\n                            newFanoutPeers.forEach((peer) => {\n                                // eslint-disable-line max-depth\n                                tosend.add(peer);\n                                tosendCount.fanout++;\n                            });\n                        }\n                    }\n                    // We are publishing to fanout peers - update the time we published\n                    this.fanoutLastpub.set(topic, Date.now());\n                }\n            }\n        }\n        return { tosend, tosendCount };\n    }\n    /**\n     * Forwards a message from our peers.\n     *\n     * For messages published by us (the app layer), this class uses `publish`\n     */\n    forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {\n        // message is fully validated inform peer_score\n        if (propagationSource) {\n            this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);\n        }\n        const tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);\n        // Note: Don't throw if tosend is empty, we can have a mesh with a single peer\n        // forward the message to peers\n        tosend.forEach((id) => {\n            // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n            this.sendRpc(id, { messages: [rawMsg] });\n        });\n        this.metrics?.onForwardMsg(rawMsg.topic, tosend.size);\n    }\n    /**\n     * App layer publishes a message to peers, return number of peers this message is published to\n     * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.\n     *\n     * For messages not from us, this class uses `forwardMessage`.\n     */\n    async publish(topic, data, opts) {\n        const transformedData = this.dataTransform ? this.dataTransform.outboundTransform(topic, data) : data;\n        if (this.publishConfig == null) {\n            throw Error('PublishError.Uninitialized');\n        }\n        // Prepare raw message with user's publishConfig\n        const { raw: rawMsg, msg } = await buildRawMessage(this.publishConfig, topic, data, transformedData);\n        // calculate the message id from the un-transformed data\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const ignoreDuplicatePublishError = opts?.ignoreDuplicatePublishError ?? this.opts.ignoreDuplicatePublishError;\n        if (this.seenCache.has(msgIdStr)) {\n            // This message has already been seen. We don't re-publish messages that have already\n            // been published on the network.\n            if (ignoreDuplicatePublishError) {\n                this.metrics?.onPublishDuplicateMsg(topic);\n                return { recipients: [] };\n            }\n            throw Error('PublishError.Duplicate');\n        }\n        const { tosend, tosendCount } = this.selectPeersToPublish(topic);\n        const willSendToSelf = this.opts.emitSelf === true && this.subscriptions.has(topic);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const allowPublishToZeroPeers = opts?.allowPublishToZeroPeers ?? this.opts.allowPublishToZeroPeers;\n        if (tosend.size === 0 && !allowPublishToZeroPeers && !willSendToSelf) {\n            throw Error('PublishError.InsufficientPeers');\n        }\n        // If the message isn't a duplicate and we have sent it to some peers add it to the\n        // duplicate cache and memcache.\n        this.seenCache.put(msgIdStr);\n        // all published messages are valid\n        this.mcache.put({ msgId, msgIdStr }, rawMsg, true);\n        // If the message is anonymous or has a random author add it to the published message ids cache.\n        this.publishedMessageIds.put(msgIdStr);\n        // Send to set of peers aggregated from direct, mesh, fanout\n        for (const id of tosend) {\n            // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n            const sent = this.sendRpc(id, { messages: [rawMsg] });\n            // did not actually send the message\n            if (!sent) {\n                tosend.delete(id);\n            }\n        }\n        this.metrics?.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0);\n        // Dispatch the message to the user if we are subscribed to the topic\n        if (willSendToSelf) {\n            tosend.add(this.components.peerId.toString());\n            super.dispatchEvent(new CustomEvent('gossipsub:message', {\n                detail: {\n                    propagationSource: this.components.peerId,\n                    msgId: msgIdStr,\n                    msg\n                }\n            }));\n            // TODO: Add option to switch between emit per topic or all messages in one\n            super.dispatchEvent(new CustomEvent('message', { detail: msg }));\n        }\n        return {\n            recipients: Array.from(tosend.values()).map((str) => peerIdFromString(str))\n        };\n    }\n    /**\n     * This function should be called when `asyncValidation` is `true` after\n     * the message got validated by the caller. Messages are stored in the `mcache` and\n     * validation is expected to be fast enough that the messages should still exist in the cache.\n     * There are three possible validation outcomes and the outcome is given in acceptance.\n     *\n     * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the\n     * network. The `propagation_source` parameter indicates who the message was received by and\n     * will not be forwarded back to that peer.\n     *\n     * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache\n     * and the P₄ penalty will be applied to the `propagationSource`.\n     *\n     * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache\n     * but no P₄ penalty will be applied.\n     *\n     * This function will return true if the message was found in the cache and false if was not\n     * in the cache anymore.\n     *\n     * This should only be called once per message.\n     */\n    reportMessageValidationResult(msgId, propagationSource, acceptance) {\n        if (acceptance === TopicValidatorResult.Accept) {\n            const cacheEntry = this.mcache.validate(msgId);\n            this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n            if (cacheEntry != null) {\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // message is fully validated inform peer_score\n                this.score.deliverMessage(propagationSource.toString(), msgId, rawMsg.topic);\n                this.forwardMessage(msgId, cacheEntry.message, propagationSource.toString(), originatingPeers);\n                this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n            }\n            // else, Message not in cache. Ignoring forwarding\n        }\n        // Not valid\n        else {\n            const cacheEntry = this.mcache.remove(msgId);\n            this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n            if (cacheEntry) {\n                const rejectReason = rejectReasonFromAcceptance(acceptance);\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                this.score.rejectMessage(propagationSource.toString(), msgId, rawMsg.topic, rejectReason);\n                for (const peer of originatingPeers) {\n                    this.score.rejectMessage(peer, msgId, rawMsg.topic, rejectReason);\n                }\n                this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n            }\n            // else, Message not in cache. Ignoring forwarding\n        }\n    }\n    /**\n     * Sends a GRAFT message to a peer\n     */\n    sendGraft(id, topic) {\n        const graft = [\n            {\n                topicID: topic\n            }\n        ];\n        this.sendRpc(id, { control: { graft } });\n    }\n    /**\n     * Sends a PRUNE message to a peer\n     */\n    async sendPrune(id, topic) {\n        const prune = [await this.makePrune(id, topic, this.opts.doPX)];\n        this.sendRpc(id, { control: { prune } });\n    }\n    /**\n     * Send an rpc object to a peer\n     */\n    sendRpc(id, rpc) {\n        const outboundStream = this.streamsOutbound.get(id);\n        if (!outboundStream) {\n            this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);\n            return false;\n        }\n        // piggyback control message retries\n        const ctrl = this.control.get(id);\n        if (ctrl) {\n            this.piggybackControl(id, rpc, ctrl);\n            this.control.delete(id);\n        }\n        // piggyback gossip\n        const ihave = this.gossip.get(id);\n        if (ihave) {\n            this.piggybackGossip(id, rpc, ihave);\n            this.gossip.delete(id);\n        }\n        const rpcBytes = RPC.encode(rpc).finish();\n        try {\n            outboundStream.push(rpcBytes);\n        }\n        catch (e) {\n            this.log.error(`Cannot send rpc to ${id}`, e);\n            // if the peer had control messages or gossip, re-attach\n            if (ctrl) {\n                this.control.set(id, ctrl);\n            }\n            if (ihave) {\n                this.gossip.set(id, ihave);\n            }\n            return false;\n        }\n        this.metrics?.onRpcSent(rpc, rpcBytes.length);\n        return true;\n    }\n    /** Mutates `outRpc` adding graft and prune control messages */\n    piggybackControl(id, outRpc, ctrl) {\n        if (ctrl.graft) {\n            if (!outRpc.control)\n                outRpc.control = {};\n            if (!outRpc.control.graft)\n                outRpc.control.graft = [];\n            for (const graft of ctrl.graft) {\n                if (graft.topicID && this.mesh.get(graft.topicID)?.has(id)) {\n                    outRpc.control.graft.push(graft);\n                }\n            }\n        }\n        if (ctrl.prune) {\n            if (!outRpc.control)\n                outRpc.control = {};\n            if (!outRpc.control.prune)\n                outRpc.control.prune = [];\n            for (const prune of ctrl.prune) {\n                if (prune.topicID && !this.mesh.get(prune.topicID)?.has(id)) {\n                    outRpc.control.prune.push(prune);\n                }\n            }\n        }\n    }\n    /** Mutates `outRpc` adding ihave control messages */\n    piggybackGossip(id, outRpc, ihave) {\n        if (!outRpc.control)\n            outRpc.control = {};\n        outRpc.control.ihave = ihave;\n    }\n    /**\n     * Send graft and prune messages\n     *\n     * @param tograft - peer id => topic[]\n     * @param toprune - peer id => topic[]\n     */\n    async sendGraftPrune(tograft, toprune, noPX) {\n        const doPX = this.opts.doPX;\n        for (const [id, topics] of tograft) {\n            const graft = topics.map((topicID) => ({ topicID }));\n            let prune = [];\n            // If a peer also has prunes, process them now\n            const pruning = toprune.get(id);\n            if (pruning) {\n                prune = await Promise.all(pruning.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n                toprune.delete(id);\n            }\n            this.sendRpc(id, { control: { graft, prune } });\n        }\n        for (const [id, topics] of toprune) {\n            const prune = await Promise.all(topics.map(async (topicID) => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n            this.sendRpc(id, { control: { prune } });\n        }\n    }\n    /**\n     * Emits gossip - Send IHAVE messages to a random set of gossip peers\n     */\n    emitGossip(peersToGossipByTopic) {\n        const gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));\n        for (const [topic, peersToGossip] of peersToGossipByTopic) {\n            this.doEmitGossip(topic, peersToGossip, gossipIDsByTopic.get(topic) ?? []);\n        }\n    }\n    /**\n     * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy\n     * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers\n     * We also exclude direct peers, as there is no reason to emit gossip to them\n     * @param topic\n     * @param candidateToGossip - peers to gossip\n     * @param messageIDs - message ids to gossip\n     */\n    doEmitGossip(topic, candidateToGossip, messageIDs) {\n        if (!messageIDs.length) {\n            return;\n        }\n        // shuffle to emit in random order\n        shuffle(messageIDs);\n        // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list\n        if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n            // we do the truncation (with shuffling) per peer below\n            this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);\n        }\n        if (!candidateToGossip.size)\n            return;\n        let target = this.opts.Dlazy;\n        const factor = constants.GossipsubGossipFactor * candidateToGossip.size;\n        let peersToGossip = candidateToGossip;\n        if (factor > target) {\n            target = factor;\n        }\n        if (target > peersToGossip.size) {\n            target = peersToGossip.size;\n        }\n        else {\n            // only shuffle if needed\n            peersToGossip = shuffle(Array.from(peersToGossip)).slice(0, target);\n        }\n        // Emit the IHAVE gossip to the selected peers up to the target\n        peersToGossip.forEach((id) => {\n            let peerMessageIDs = messageIDs;\n            if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n                // shuffle and slice message IDs per peer so that we emit a different set for each peer\n                // we have enough reduncancy in the system that this will significantly increase the message\n                // coverage when we do truncate\n                peerMessageIDs = shuffle(peerMessageIDs.slice()).slice(0, constants.GossipsubMaxIHaveLength);\n            }\n            this.pushGossip(id, {\n                topicID: topic,\n                messageIDs: peerMessageIDs\n            });\n        });\n    }\n    /**\n     * Flush gossip and control messages\n     */\n    flush() {\n        // send gossip first, which will also piggyback control\n        for (const [peer, ihave] of this.gossip.entries()) {\n            this.gossip.delete(peer);\n            this.sendRpc(peer, { control: { ihave } });\n        }\n        // send the remaining control messages\n        for (const [peer, control] of this.control.entries()) {\n            this.control.delete(peer);\n            this.sendRpc(peer, { control: { graft: control.graft, prune: control.prune } });\n        }\n    }\n    /**\n     * Adds new IHAVE messages to pending gossip\n     */\n    pushGossip(id, controlIHaveMsgs) {\n        this.log('Add gossip to %s', id);\n        const gossip = this.gossip.get(id) || [];\n        this.gossip.set(id, gossip.concat(controlIHaveMsgs));\n    }\n    /**\n     * Make a PRUNE control message for a peer in a topic\n     */\n    async makePrune(id, topic, doPX) {\n        this.score.prune(id, topic);\n        if (this.streamsOutbound.get(id).protocol === constants.GossipsubIDv10) {\n            // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway\n            return {\n                topicID: topic,\n                peers: []\n            };\n        }\n        // backoff is measured in seconds\n        // GossipsubPruneBackoff is measured in milliseconds\n        // The protobuf has it as a uint64\n        const backoff = this.opts.pruneBackoff / 1000;\n        if (!doPX) {\n            return {\n                topicID: topic,\n                peers: [],\n                backoff: backoff\n            };\n        }\n        // select peers for Peer eXchange\n        const peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, (xid) => {\n            return xid !== id && this.score.score(xid) >= 0;\n        });\n        const px = await Promise.all(Array.from(peers).map(async (peerId) => {\n            // see if we have a signed record to send back; if we don't, just send\n            // the peer ID and let the pruned peer find them in the DHT -- we can't trust\n            // unsigned address records through PX anyways\n            // Finding signed records in the DHT is not supported at the time of writing in js-libp2p\n            const id = peerIdFromString(peerId);\n            return {\n                peerID: id.toBytes(),\n                signedPeerRecord: await this.components.peerStore.addressBook.getRawEnvelope(id)\n            };\n        }));\n        return {\n            topicID: topic,\n            peers: px,\n            backoff: backoff\n        };\n    }\n    /**\n     * Maintains the mesh and fanout maps in gossipsub.\n     */\n    async heartbeat() {\n        const { D, Dlo, Dhi, Dscore, Dout, fanoutTTL } = this.opts;\n        this.heartbeatTicks++;\n        // cache scores throught the heartbeat\n        const scores = new Map();\n        const getScore = (id) => {\n            let s = scores.get(id);\n            if (s === undefined) {\n                s = this.score.score(id);\n                scores.set(id, s);\n            }\n            return s;\n        };\n        // peer id => topic[]\n        const tograft = new Map();\n        // peer id => topic[]\n        const toprune = new Map();\n        // peer id => don't px\n        const noPX = new Map();\n        // clean up expired backoffs\n        this.clearBackoff();\n        // clean up peerhave/iasked counters\n        this.peerhave.clear();\n        this.metrics?.cacheSize.set({ cache: 'iasked' }, this.iasked.size);\n        this.iasked.clear();\n        // apply IWANT request penalties\n        this.applyIwantPenalties();\n        // ensure direct peers are connected\n        if (this.heartbeatTicks % this.opts.directConnectTicks === 0) {\n            // we only do this every few ticks to allow pending connections to complete and account for restarts/downtime\n            await this.directConnect();\n        }\n        // EXTRA: Prune caches\n        this.fastMsgIdCache?.prune();\n        this.seenCache.prune();\n        this.gossipTracer.prune();\n        this.publishedMessageIds.prune();\n        /**\n         * Instead of calling getRandomGossipPeers multiple times to:\n         *   + get more mesh peers\n         *   + more outbound peers\n         *   + oppportunistic grafting\n         *   + emitGossip\n         *\n         * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance\n         */\n        const peersToGossipByTopic = new Map();\n        // maintain the mesh for topics we have joined\n        this.mesh.forEach((peers, topic) => {\n            const peersInTopic = this.topics.get(topic);\n            const candidateMeshPeers = new Set();\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic) {\n                const shuffledPeers = shuffle(Array.from(peersInTopic));\n                const backoff = this.backoff.get(topic);\n                for (const id of shuffledPeers) {\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams &&\n                        this.multicodecs.includes(peerStreams.protocol) &&\n                        !peers.has(id) &&\n                        !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if ((!backoff || !backoff.has(id)) && score >= 0)\n                            candidateMeshPeers.add(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold)\n                            peersToGossip.add(id);\n                    }\n                }\n            }\n            // prune/graft helper functions (defined per topic)\n            const prunePeer = (id, reason) => {\n                this.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);\n                // no need to update peer score here as we do it in makePrune\n                // add prune backoff record\n                this.addBackoff(id, topic);\n                // remove peer from mesh\n                peers.delete(id);\n                // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold\n                if (getScore(id) >= this.opts.scoreThresholds.gossipThreshold)\n                    peersToGossip.add(id);\n                this.metrics?.onRemoveFromMesh(topic, reason, 1);\n                // add to toprune\n                const topics = toprune.get(id);\n                if (!topics) {\n                    toprune.set(id, [topic]);\n                }\n                else {\n                    topics.push(topic);\n                }\n            };\n            const graftPeer = (id, reason) => {\n                this.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);\n                // update peer score\n                this.score.graft(id, topic);\n                // add peer to mesh\n                peers.add(id);\n                // when we add a new mesh peer, we don't want to gossip messages to it\n                peersToGossip.delete(id);\n                this.metrics?.onAddToMesh(topic, reason, 1);\n                // add to tograft\n                const topics = tograft.get(id);\n                if (!topics) {\n                    tograft.set(id, [topic]);\n                }\n                else {\n                    topics.push(topic);\n                }\n            };\n            // drop all peers with negative score, without PX\n            peers.forEach((id) => {\n                const score = getScore(id);\n                // Record the score\n                if (score < 0) {\n                    this.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);\n                    prunePeer(id, ChurnReason.BadScore);\n                    noPX.set(id, true);\n                }\n            });\n            // do we have enough peers?\n            if (peers.size < Dlo) {\n                const ineed = D - peers.size;\n                // slice up to first `ineed` items and remove them from candidateMeshPeers\n                // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`\n                const newMeshPeers = removeFirstNItemsFromSet(candidateMeshPeers, ineed);\n                newMeshPeers.forEach((p) => {\n                    graftPeer(p, InclusionReason.NotEnough);\n                });\n            }\n            // do we have to many peers?\n            if (peers.size > Dhi) {\n                let peersArray = Array.from(peers);\n                // sort by score\n                peersArray.sort((a, b) => getScore(b) - getScore(a));\n                // We keep the first D_score peers by score and the remaining up to D randomly\n                // under the constraint that we keep D_out peers in the mesh (if we have that many)\n                peersArray = peersArray.slice(0, Dscore).concat(shuffle(peersArray.slice(Dscore)));\n                // count the outbound peers we are keeping\n                let outbound = 0;\n                peersArray.slice(0, D).forEach((p) => {\n                    if (this.outbound.get(p)) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, bubble up some outbound peers from the random selection\n                if (outbound < Dout) {\n                    const rotate = (i) => {\n                        // rotate the peersArray to the right and put the ith peer in the front\n                        const p = peersArray[i];\n                        for (let j = i; j > 0; j--) {\n                            peersArray[j] = peersArray[j - 1];\n                        }\n                        peersArray[0] = p;\n                    };\n                    // first bubble up all outbound peers already in the selection to the front\n                    if (outbound > 0) {\n                        let ihave = outbound;\n                        for (let i = 1; i < D && ihave > 0; i++) {\n                            if (this.outbound.get(peersArray[i])) {\n                                rotate(i);\n                                ihave--;\n                            }\n                        }\n                    }\n                    // now bubble up enough outbound peers outside the selection to the front\n                    let ineed = D - outbound;\n                    for (let i = D; i < peersArray.length && ineed > 0; i++) {\n                        if (this.outbound.get(peersArray[i])) {\n                            rotate(i);\n                            ineed--;\n                        }\n                    }\n                }\n                // prune the excess peers\n                peersArray.slice(D).forEach((p) => {\n                    prunePeer(p, ChurnReason.Excess);\n                });\n            }\n            // do we have enough outbound peers?\n            if (peers.size >= Dlo) {\n                // count the outbound peers we have\n                let outbound = 0;\n                peers.forEach((p) => {\n                    if (this.outbound.get(p)) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, select some peers with outbound connections and graft them\n                if (outbound < Dout) {\n                    const ineed = Dout - outbound;\n                    const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => this.outbound.get(id) === true);\n                    newMeshPeers.forEach((p) => {\n                        graftPeer(p, InclusionReason.Outbound);\n                    });\n                }\n            }\n            // should we try to improve the mesh with opportunistic grafting?\n            if (this.heartbeatTicks % this.opts.opportunisticGraftTicks === 0 && peers.size > 1) {\n                // Opportunistic grafting works as follows: we check the median score of peers in the\n                // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at\n                // random with score over the median.\n                // The intention is to (slowly) improve an underperforming mesh by introducing good\n                // scoring peers that may have been gossiping at us. This allows us to get out of sticky\n                // situations where we are stuck with poor peers and also recover from churn of good peers.\n                // now compute the median peer score in the mesh\n                const peersList = Array.from(peers).sort((a, b) => getScore(a) - getScore(b));\n                const medianIndex = Math.floor(peers.size / 2);\n                const medianScore = getScore(peersList[medianIndex]);\n                // if the median score is below the threshold, select a better peer (if any) and GRAFT\n                if (medianScore < this.opts.scoreThresholds.opportunisticGraftThreshold) {\n                    const ineed = this.opts.opportunisticGraftPeers;\n                    const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, (id) => getScore(id) > medianScore);\n                    for (const id of newMeshPeers) {\n                        this.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);\n                        graftPeer(id, InclusionReason.Opportunistic);\n                    }\n                }\n            }\n        });\n        // expire fanout for topics we haven't published to in a while\n        const now = Date.now();\n        this.fanoutLastpub.forEach((lastpb, topic) => {\n            if (lastpb + fanoutTTL < now) {\n                this.fanout.delete(topic);\n                this.fanoutLastpub.delete(topic);\n            }\n        });\n        // maintain our fanout for topics we are publishing but we have not joined\n        this.fanout.forEach((fanoutPeers, topic) => {\n            // checks whether our peers are still in the topic and have a score above the publish threshold\n            const topicPeers = this.topics.get(topic);\n            fanoutPeers.forEach((id) => {\n                if (!topicPeers.has(id) || getScore(id) < this.opts.scoreThresholds.publishThreshold) {\n                    fanoutPeers.delete(id);\n                }\n            });\n            const peersInTopic = this.topics.get(topic);\n            const candidateFanoutPeers = [];\n            // the fanout map contains topics to which we are not subscribed.\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic) {\n                const shuffledPeers = shuffle(Array.from(peersInTopic));\n                for (const id of shuffledPeers) {\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams &&\n                        this.multicodecs.includes(peerStreams.protocol) &&\n                        !fanoutPeers.has(id) &&\n                        !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if (score >= this.opts.scoreThresholds.publishThreshold)\n                            candidateFanoutPeers.push(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold)\n                            peersToGossip.add(id);\n                    }\n                }\n            }\n            // do we need more peers?\n            if (fanoutPeers.size < D) {\n                const ineed = D - fanoutPeers.size;\n                candidateFanoutPeers.slice(0, ineed).forEach((id) => {\n                    fanoutPeers.add(id);\n                    peersToGossip?.delete(id);\n                });\n            }\n        });\n        this.emitGossip(peersToGossipByTopic);\n        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n        await this.sendGraftPrune(tograft, toprune, noPX);\n        // flush pending gossip that wasn't piggybacked above\n        this.flush();\n        // advance the message history window\n        this.mcache.shift();\n        this.dispatchEvent(new CustomEvent('gossipsub:heartbeat'));\n    }\n    /**\n     * Given a topic, returns up to count peers subscribed to that topic\n     * that pass an optional filter function\n     *\n     * @param topic\n     * @param count\n     * @param filter - a function to filter acceptable peers\n     */\n    getRandomGossipPeers(topic, count, filter = () => true) {\n        const peersInTopic = this.topics.get(topic);\n        if (!peersInTopic) {\n            return new Set();\n        }\n        // Adds all peers using our protocol\n        // that also pass the filter function\n        let peers = [];\n        peersInTopic.forEach((id) => {\n            const peerStreams = this.streamsOutbound.get(id);\n            if (!peerStreams) {\n                return;\n            }\n            if (this.multicodecs.includes(peerStreams.protocol) && filter(id)) {\n                peers.push(id);\n            }\n        });\n        // Pseudo-randomly shuffles peers\n        peers = shuffle(peers);\n        if (count > 0 && peers.length > count) {\n            peers = peers.slice(0, count);\n        }\n        return new Set(peers);\n    }\n    onScrapeMetrics(metrics) {\n        /* Data structure sizes */\n        metrics.mcacheSize.set(this.mcache.size);\n        metrics.mcacheNotValidatedCount.set(this.mcache.notValidatedCount);\n        // Arbitrary size\n        metrics.cacheSize.set({ cache: 'direct' }, this.direct.size);\n        metrics.cacheSize.set({ cache: 'seenCache' }, this.seenCache.size);\n        metrics.cacheSize.set({ cache: 'fastMsgIdCache' }, this.fastMsgIdCache?.size ?? 0);\n        metrics.cacheSize.set({ cache: 'publishedMessageIds' }, this.publishedMessageIds.size);\n        metrics.cacheSize.set({ cache: 'mcache' }, this.mcache.size);\n        metrics.cacheSize.set({ cache: 'score' }, this.score.size);\n        metrics.cacheSize.set({ cache: 'gossipTracer.promises' }, this.gossipTracer.size);\n        metrics.cacheSize.set({ cache: 'gossipTracer.requests' }, this.gossipTracer.requestMsByMsgSize);\n        // Bounded by topic\n        metrics.cacheSize.set({ cache: 'topics' }, this.topics.size);\n        metrics.cacheSize.set({ cache: 'subscriptions' }, this.subscriptions.size);\n        metrics.cacheSize.set({ cache: 'mesh' }, this.mesh.size);\n        metrics.cacheSize.set({ cache: 'fanout' }, this.fanout.size);\n        // Bounded by peer\n        metrics.cacheSize.set({ cache: 'peers' }, this.peers.size);\n        metrics.cacheSize.set({ cache: 'streamsOutbound' }, this.streamsOutbound.size);\n        metrics.cacheSize.set({ cache: 'streamsInbound' }, this.streamsInbound.size);\n        metrics.cacheSize.set({ cache: 'acceptFromWhitelist' }, this.acceptFromWhitelist.size);\n        metrics.cacheSize.set({ cache: 'gossip' }, this.gossip.size);\n        metrics.cacheSize.set({ cache: 'control' }, this.control.size);\n        metrics.cacheSize.set({ cache: 'peerhave' }, this.peerhave.size);\n        metrics.cacheSize.set({ cache: 'outbound' }, this.outbound.size);\n        // 2D nested data structure\n        let backoffSize = 0;\n        for (const backoff of this.backoff.values()) {\n            backoffSize += backoff.size;\n        }\n        metrics.cacheSize.set({ cache: 'backoff' }, backoffSize);\n        // Peer counts\n        for (const [topicStr, peers] of this.topics) {\n            metrics.topicPeersCount.set({ topicStr }, peers.size);\n        }\n        for (const [topicStr, peers] of this.mesh) {\n            metrics.meshPeerCounts.set({ topicStr }, peers.size);\n        }\n        // Peer scores\n        const scores = [];\n        const scoreByPeer = new Map();\n        metrics.behaviourPenalty.reset();\n        for (const peerIdStr of this.peers.keys()) {\n            const score = this.score.score(peerIdStr);\n            scores.push(score);\n            scoreByPeer.set(peerIdStr, score);\n            metrics.behaviourPenalty.observe(this.score.peerStats.get(peerIdStr)?.behaviourPenalty ?? 0);\n        }\n        metrics.registerScores(scores, this.opts.scoreThresholds);\n        // Breakdown score per mesh topicLabel\n        metrics.registerScorePerMesh(this.mesh, scoreByPeer);\n        // Breakdown on each score weight\n        const sw = computeAllPeersScoreWeights(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);\n        metrics.registerScoreWeights(sw);\n    }\n}\nGossipSub.multicodec = constants.GossipsubIDv11;\nexport function gossipsub(init = {}) {\n    return (components) => new GossipSub(components, init);\n}\n//# sourceMappingURL=index.js.map","import { gossipsub } from '@chainsafe/libp2p-gossipsub'\n\n/** @typedef {import('@libp2p/interface-pubsub').PubSub} PubSub */\n\n/** @type {() => Record<string, (components: any) => PubSub>}>} */\nexport const routers = () => ({\n  gossipsub: gossipsub({\n    fallbackToFloodsub: true,\n    emitSelf: true,\n    maxInboundStreams: 64,\n    maxOutboundStreams: 128\n  })\n})\n","import { logger } from '@libp2p/logger';\nimport { CID } from 'multiformats/cid';\nimport PQueue from 'p-queue';\nimport defer from 'p-defer';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport anySignal from 'any-signal';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nconst log = logger('libp2p:delegated-peer-routing');\nconst DEFAULT_TIMEOUT = 30e3; // 30 second default\nconst CONCURRENT_HTTP_REQUESTS = 4;\nexport var EventTypes;\n(function (EventTypes) {\n    EventTypes[EventTypes[\"SENDING_QUERY\"] = 0] = \"SENDING_QUERY\";\n    EventTypes[EventTypes[\"PEER_RESPONSE\"] = 1] = \"PEER_RESPONSE\";\n    EventTypes[EventTypes[\"FINAL_PEER\"] = 2] = \"FINAL_PEER\";\n    EventTypes[EventTypes[\"QUERY_ERROR\"] = 3] = \"QUERY_ERROR\";\n    EventTypes[EventTypes[\"PROVIDER\"] = 4] = \"PROVIDER\";\n    EventTypes[EventTypes[\"VALUE\"] = 5] = \"VALUE\";\n    EventTypes[EventTypes[\"ADDING_PEER\"] = 6] = \"ADDING_PEER\";\n    EventTypes[EventTypes[\"DIALING_PEER\"] = 7] = \"DIALING_PEER\";\n})(EventTypes || (EventTypes = {}));\n/**\n * The types of messages set/received during DHT queries\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n    MessageType[MessageType[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n    MessageType[MessageType[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n    MessageType[MessageType[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n    MessageType[MessageType[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n    MessageType[MessageType[\"PING\"] = 5] = \"PING\";\n})(MessageType || (MessageType = {}));\nclass DelegatedPeerRouting {\n    /**\n     * Create a new DelegatedPeerRouting instance\n     */\n    constructor(client) {\n        if (client == null) {\n            throw new Error('missing ipfs http client');\n        }\n        this.client = client;\n        this.started = false;\n        this.abortController = new AbortController();\n        // limit concurrency to avoid request flood in web browser\n        // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12\n        this.httpQueue = new PQueue({\n            concurrency: CONCURRENT_HTTP_REQUESTS\n        });\n        const { protocol, host, port } = client.getEndpointConfig();\n        log(`enabled DelegatedPeerRouting via ${protocol}://${host}:${port}`);\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    stop() {\n        this.httpQueue.clear();\n        this.abortController.abort();\n        this.abortController = new AbortController();\n        this.started = false;\n    }\n    /**\n     * Attempts to find the given peer\n     */\n    async findPeer(id, options = {}) {\n        log('findPeer starts: %p', id);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        const onStart = defer();\n        const onFinish = defer();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return await onFinish.promise;\n        });\n        try {\n            await onStart.promise;\n            for await (const event of this.client.dht.findPeer(id, options)) {\n                if (event.name === 'FINAL_PEER') {\n                    const peerInfo = {\n                        id: event.peer.id,\n                        multiaddrs: event.peer.multiaddrs,\n                        protocols: []\n                    };\n                    return peerInfo;\n                }\n            }\n        }\n        catch (err) {\n            log.error('findPeer errored: %o', err);\n            throw err;\n        }\n        finally {\n            onFinish.resolve();\n            log('findPeer finished: %p', id);\n        }\n        throw new CodeError('Not found', 'ERR_NOT_FOUND');\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */\n    async *getClosestPeers(key, options = {}) {\n        let cidOrPeerId;\n        const cid = CID.asCID(key);\n        if (cid != null) {\n            cidOrPeerId = cid;\n        }\n        else {\n            cidOrPeerId = peerIdFromBytes(key);\n        }\n        log('getClosestPeers starts: %s', cidOrPeerId);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        const onStart = defer();\n        const onFinish = defer();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return await onFinish.promise;\n        });\n        try {\n            await onStart.promise;\n            for await (const event of this.client.dht.query(cidOrPeerId, options)) {\n                if (event.name === 'PEER_RESPONSE') {\n                    yield* event.closer.map(closer => ({\n                        id: closer.id,\n                        multiaddrs: closer.multiaddrs,\n                        protocols: []\n                    }));\n                }\n            }\n        }\n        catch (err) {\n            log.error('getClosestPeers errored:', err);\n            throw err;\n        }\n        finally {\n            onFinish.resolve();\n            log('getClosestPeers finished: %b', key);\n        }\n    }\n}\nexport function delegatedPeerRouting(client) {\n    return () => new DelegatedPeerRouting(client);\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport drain from 'it-drain';\nimport PQueue from 'p-queue';\nimport defer from 'p-defer';\nimport errCode from 'err-code';\nimport anySignal from 'any-signal';\nconst log = logger('libp2p:delegated-content-routing');\nconst DEFAULT_TIMEOUT = 30e3; // 30 second default\nconst CONCURRENT_HTTP_REQUESTS = 4;\nconst CONCURRENT_HTTP_REFS_REQUESTS = 2;\nexport var EventTypes;\n(function (EventTypes) {\n    EventTypes[EventTypes[\"SENDING_QUERY\"] = 0] = \"SENDING_QUERY\";\n    EventTypes[EventTypes[\"PEER_RESPONSE\"] = 1] = \"PEER_RESPONSE\";\n    EventTypes[EventTypes[\"FINAL_PEER\"] = 2] = \"FINAL_PEER\";\n    EventTypes[EventTypes[\"QUERY_ERROR\"] = 3] = \"QUERY_ERROR\";\n    EventTypes[EventTypes[\"PROVIDER\"] = 4] = \"PROVIDER\";\n    EventTypes[EventTypes[\"VALUE\"] = 5] = \"VALUE\";\n    EventTypes[EventTypes[\"ADDING_PEER\"] = 6] = \"ADDING_PEER\";\n    EventTypes[EventTypes[\"DIALING_PEER\"] = 7] = \"DIALING_PEER\";\n})(EventTypes || (EventTypes = {}));\n/**\n * The types of messages set/received during DHT queries\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n    MessageType[MessageType[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n    MessageType[MessageType[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n    MessageType[MessageType[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n    MessageType[MessageType[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n    MessageType[MessageType[\"PING\"] = 5] = \"PING\";\n})(MessageType || (MessageType = {}));\n/**\n * An implementation of content routing, using a delegated peer\n */\nclass DelegatedContentRouting {\n    /**\n     * Create a new DelegatedContentRouting instance\n     */\n    constructor(client) {\n        if (client == null) {\n            throw new Error('missing ipfs http client');\n        }\n        this.client = client;\n        this.started = false;\n        this.abortController = new AbortController();\n        // limit concurrency to avoid request flood in web browser\n        // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12\n        this.httpQueue = new PQueue({\n            concurrency: CONCURRENT_HTTP_REQUESTS\n        });\n        // sometimes refs requests take long time, they need separate queue\n        // to not suffocate regular business\n        this.httpQueueRefs = new PQueue({\n            concurrency: CONCURRENT_HTTP_REFS_REQUESTS\n        });\n        const { protocol, host, port } = client.getEndpointConfig();\n        log(`enabled DelegatedContentRouting via ${protocol}://${host}:${port}`);\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    stop() {\n        this.httpQueue.clear();\n        this.httpQueueRefs.clear();\n        this.abortController.abort();\n        this.abortController = new AbortController();\n        this.started = false;\n    }\n    /**\n     * Search the dht for providers of the given CID.\n     *\n     * - call `findProviders` on the delegated node.\n     */\n    async *findProviders(key, options = {}) {\n        log('findProviders starts: %c', key);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        const onStart = defer();\n        const onFinish = defer();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return await onFinish.promise;\n        });\n        try {\n            await onStart.promise;\n            for await (const event of this.client.dht.findProvs(key, options)) {\n                if (event.name === 'PROVIDER') {\n                    yield* event.providers.map(prov => {\n                        const peerInfo = {\n                            id: prov.id,\n                            protocols: [],\n                            multiaddrs: prov.multiaddrs\n                        };\n                        return peerInfo;\n                    });\n                }\n            }\n        }\n        catch (err) {\n            log.error('findProviders errored:', err);\n            throw err;\n        }\n        finally {\n            onFinish.resolve();\n            log('findProviders finished: %c', key);\n        }\n    }\n    /**\n     * Announce to the network that the delegated node can provide the given key.\n     *\n     * Currently this uses the following hack\n     * - delegate is one of bootstrap nodes, so we are always connected to it\n     * - call block stat on the delegated node, so it fetches the content\n     * - call dht provide with the passed cid\n     *\n     * N.B. this must be called for every block in the dag you want provided otherwise\n     * the delegate will only be able to supply the root block of the dag when asked\n     * for the data by an interested peer.\n     */\n    async provide(key, options = {}) {\n        log('provide starts: %c', key);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        await this.httpQueueRefs.add(async () => {\n            await this.client.block.stat(key, options);\n            await drain(this.client.dht.provide(key, options));\n        });\n        log('provide finished: %c', key);\n    }\n    /**\n     * Stores a value in the backing key/value store of the delegated content router.\n     * This may fail if the delegated node's content routing implementation does not\n     * use a key/value store, or if the delegated operation fails.\n     */\n    async put(key, value, options = {}) {\n        log('put value start: %b', key);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        await this.httpQueue.add(async () => {\n            await drain(this.client.dht.put(key, value, options));\n        });\n        log('put value finished: %b', key);\n    }\n    /**\n     * Fetches an value from the backing key/value store of the delegated content router.\n     * This may fail if the delegated node's content routing implementation does not\n     * use a key/value store, or if the delegated operation fails.\n     */\n    async get(key, options = {}) {\n        log('get value start: %b', key);\n        options.timeout = options.timeout ?? DEFAULT_TIMEOUT;\n        options.signal = anySignal([this.abortController.signal].concat((options.signal != null) ? [options.signal] : []));\n        const value = await this.httpQueue.add(async () => {\n            for await (const event of this.client.dht.get(key, options)) {\n                if (event.name === 'VALUE') {\n                    log('get value finished: %b', key);\n                    return event.value;\n                }\n            }\n            throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        });\n        if (value === undefined) {\n            throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n        else {\n            return value;\n        }\n    }\n}\nexport function delegatedContentRouting(client) {\n    return () => new DelegatedContentRouting(client);\n}\n//# sourceMappingURL=index.js.map","// p2p multi-address code\nexport const CODE_P2P = 421;\nexport const CODE_CIRCUIT = 290;\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 2000;\n//# sourceMappingURL=constants.js.map","import errCode from 'err-code';\nimport defer from 'p-defer';\nconst MAX_BUFFERED_AMOUNT = 64 * 1024;\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000;\nexport class WebRTCDataChannel {\n    constructor(channel, opts) {\n        this.label = channel.label;\n        this.open = defer();\n        this.channel = channel;\n        this.channel.binaryType = 'arraybuffer';\n        this.log = opts.log;\n        if (typeof this.channel.bufferedAmountLowThreshold === 'number') {\n            this.channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;\n        }\n        channel.addEventListener('message', event => {\n            opts.onMessage(event);\n        });\n        channel.addEventListener('bufferedamountlow', () => {\n            this.log('stop backpressure: bufferedAmount %d', this.channel.bufferedAmount);\n            this.open.resolve();\n        });\n        channel.addEventListener('open', () => {\n            this.open.resolve();\n            opts.onOpen();\n        });\n        channel.addEventListener('close', () => {\n            opts.onClose();\n        });\n        channel.addEventListener('error', event => {\n            // @ts-expect-error ChannelErrorEvent is just an Event in the types?\n            if (event.error?.message === 'Transport channel closed') {\n                return this.close();\n            }\n            // @ts-expect-error ChannelErrorEvent is just an Event in the types?\n            opts.log.error('channel encounter an error in state \"%s\" message: \"%s\" detail: \"%s', channel.readyState, event.error?.message, event.error?.errorDetail); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n            // @ts-expect-error ChannelErrorEvent is just an Event in the types?\n            const err = event.error instanceof Error\n                // @ts-expect-error ChannelErrorEvent is just an Event in the types?\n                ? event.error\n                // @ts-expect-error ChannelErrorEvent is just an Event in the types?\n                : new Error(`datachannel error: ${event.error?.message} ${event.error?.errorDetail}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n            opts.onError(errCode(err, 'ERR_DATA_CHANNEL'));\n        });\n        // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n        let isClosing = false;\n        this.closingInterval = setInterval(() => {\n            if (channel.readyState === 'closing') {\n                if (isClosing) {\n                    opts.onClose(); // closing timed out: equivalent to onclose firing\n                }\n                isClosing = true;\n            }\n            else {\n                isClosing = false;\n            }\n        }, CHANNEL_CLOSING_TIMEOUT);\n    }\n    async send(data) {\n        await this.open.promise;\n        this.channel.send(data);\n        if (this.channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n            this.log('start backpressure: bufferedAmount %d', this.channel.bufferedAmount);\n            this.open = defer();\n        }\n    }\n    close() {\n        clearInterval(this.closingInterval);\n        this.channel.close();\n    }\n    get bufferedAmount() {\n        return this.channel.bufferedAmount;\n    }\n}\n//# sourceMappingURL=channel.js.map","import { logger } from '@libp2p/logger';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nimport randombytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { pushable } from 'it-pushable';\nimport defer from 'p-defer';\nimport { WebRTCDataChannel } from './channel.js';\nimport delay from 'delay';\n// const ICECOMPLETE_TIMEOUT = 5 * 1000\nconst DEFAULT_PEER_CONNECTION_CONFIG = {\n    iceServers: [{\n            urls: [\n                'stun:stun.l.google.com:19302',\n                'stun:global.stun.twilio.com:3478'\n            ]\n        }]\n};\nfunction getBrowserRTC() {\n    if (typeof globalThis === 'undefined') {\n        throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT');\n    }\n    const wrtc = {\n        // @ts-expect-error browser-specific properties\n        RTCPeerConnection: globalThis.RTCPeerConnection ?? globalThis.mozRTCPeerConnection ?? globalThis.webkitRTCPeerConnection,\n        // @ts-expect-error browser-specific properties\n        RTCSessionDescription: globalThis.RTCSessionDescription ?? globalThis.mozRTCSessionDescription ?? globalThis.webkitRTCSessionDescription,\n        // @ts-expect-error browser-specific properties\n        RTCIceCandidate: globalThis.RTCIceCandidate ?? globalThis.mozRTCIceCandidate ?? globalThis.webkitRTCIceCandidate\n    };\n    if (wrtc.RTCPeerConnection == null) {\n        throw errCode(new Error('No WebRTC support detected'), 'ERR_WEBRTC_SUPPORT');\n    }\n    return wrtc;\n}\nexport class WebRTCPeer extends EventEmitter {\n    constructor(opts) {\n        super();\n        this.id = opts.id ?? uint8ArrayToString(randombytes(4), 'hex').slice(0, 7);\n        this.log = logger(`libp2p:webrtc-peer:${opts.logPrefix}:${this.id}`);\n        this.wrtc = opts.wrtc ?? getBrowserRTC();\n        this.peerConnection = new this.wrtc.RTCPeerConnection(Object.assign({}, DEFAULT_PEER_CONNECTION_CONFIG, opts.peerConnectionConfig));\n        this.closed = false;\n        this.connected = defer();\n        // duplex properties\n        this.source = pushable();\n        this.sink = async (source) => {\n            await this.connected.promise;\n            if (this.channel == null) {\n                throw errCode(new Error('Connected but no channel?!'), 'ERR_DATA_CHANNEL');\n            }\n            for await (const buf of source) {\n                await this.channel.send(buf);\n            }\n            await this.close();\n        };\n    }\n    handleDataChannelEvent(event) {\n        const dataChannel = event.channel;\n        if (dataChannel == null) {\n            // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n            // which is invalid behavior. Handle it gracefully.\n            // See: https://github.com/feross/simple-peer/issues/163\n            this.close(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'))\n                .catch(err => {\n                this.log('Error closing after event channel was found to be null', err);\n            });\n            return;\n        }\n        this.channel = new WebRTCDataChannel(dataChannel, {\n            log: this.log,\n            onMessage: (event) => {\n                this.source.push(new Uint8Array(event.data));\n            },\n            onOpen: () => {\n                this.connected.resolve();\n                this.dispatchEvent(new CustomEvent('ready'));\n            },\n            onClose: () => {\n                this.close().catch(err => {\n                    this.log('error closing connection after channel close', err);\n                });\n            },\n            onError: (err) => {\n                this.close(err).catch(err => {\n                    this.log('error closing connection after channel error', err);\n                });\n            }\n        });\n    }\n    async close(err) {\n        this.closed = true;\n        if (err == null && this.channel != null) {\n            // wait for the channel to flush all data before closing the channel\n            while (this.channel.bufferedAmount > 0) {\n                await delay(100);\n            }\n        }\n        this.channel?.close();\n        this.peerConnection.close();\n        this.source.end(err);\n        this.dispatchEvent(new CustomEvent('close'));\n    }\n}\n//# sourceMappingURL=peer.js.map","import { EventEmitter } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nexport class WebRTCHandshake extends EventEmitter {\n    constructor(options) {\n        super();\n        this.log = options.log;\n        this.peerConnection = options.peerConnection;\n        this.wrtc = options.wrtc;\n        this.status = 'idle';\n        this.peerConnection.addEventListener('negotiationneeded', () => {\n            this.log('peer connection negotiation needed');\n            this.handleRenegotiate({ type: 'renegotiate' }).catch(err => {\n                this.log.error('could not renegotiate %o', err);\n            });\n        });\n    }\n    async handleSignal(signal) {\n        this.log('incoming signal \"%s\"', signal.type);\n        if (signal.type === 'offer') {\n            return await this.handleOffer(signal);\n        }\n        else if (signal.type === 'answer') {\n            return await this.handleAnswer(signal);\n        }\n        else if (signal.type === 'candidate') {\n            return await this.handleCandidate(signal);\n        }\n        else if (signal.type === 'renegotiate') {\n            return await this.handleRenegotiate(signal);\n        }\n        else if (signal.type === 'goodbye') {\n            return await this.handleGoodye(signal);\n        }\n        else {\n            // @ts-expect-error all types are handled above\n            this.log(`Unknown signal type ${signal.type}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n        }\n    }\n    async handleOffer(signal) { }\n    async handleAnswer(signal) { }\n    async handleRenegotiate(signal) { }\n    async handleGoodye(signal) {\n        this.peerConnection.close();\n    }\n    async handleCandidate(signal) {\n        const iceCandidate = new this.wrtc.RTCIceCandidate(signal.candidate);\n        try {\n            await this.peerConnection.addIceCandidate(iceCandidate);\n        }\n        catch (err) {\n            if (iceCandidate.address == null || iceCandidate.address.endsWith('.local')) {\n                this.log('ignoring unsupported ICE candidate.');\n            }\n            else {\n                throw errCode(err, 'ERR_ADD_ICE_CANDIDATE');\n            }\n        }\n    }\n}\n//# sourceMappingURL=handshake.js.map","import { WebRTCPeer } from './peer.js';\nimport { WebRTCHandshake } from './handshake.js';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:webrtc-peer:receiver');\nexport class WebRTCReceiver extends WebRTCPeer {\n    constructor(opts = {}) {\n        super({\n            ...opts,\n            logPrefix: 'receiver'\n        });\n        this.handshake = new WebRTCReceiverHandshake({\n            log: this.log,\n            peerConnection: this.peerConnection,\n            wrtc: this.wrtc,\n            answerOptions: opts.answerOptions\n        });\n        this.handshake.addEventListener('signal', event => this.dispatchEvent(new CustomEvent('signal', {\n            detail: event.detail\n        })));\n        this.peerConnection.addEventListener('datachannel', (event) => {\n            this.handleDataChannelEvent(event);\n        });\n    }\n    handleSignal(signal) {\n        this.handshake.handleSignal(signal).catch(err => {\n            this.log('error handling signal %o %o', signal, err);\n        });\n    }\n}\nclass WebRTCReceiverHandshake extends WebRTCHandshake {\n    constructor(options) {\n        super(options);\n        this.options = options;\n        this.status = 'idle';\n        this.iceCandidates = [];\n    }\n    async handleRenegotiate() {\n        log.trace('renegotiate');\n        this.dispatchEvent(new CustomEvent('signal', {\n            detail: {\n                type: 'renegotiate'\n            }\n        }));\n    }\n    async handleOffer(signal) {\n        await this.peerConnection.setRemoteDescription(new this.wrtc.RTCSessionDescription(signal));\n        // add any candidates we were sent before the offer arrived\n        for (const candidate of this.iceCandidates) {\n            await this.handleCandidate(candidate);\n        }\n        this.iceCandidates = [];\n        const answer = await this.peerConnection.createAnswer(this.options.answerOptions);\n        await this.peerConnection.setLocalDescription(answer);\n        log.trace('handle offer', this.peerConnection.localDescription);\n        this.dispatchEvent(new CustomEvent('signal', {\n            detail: this.peerConnection.localDescription ?? answer\n        }));\n    }\n    async handleCandidate(signal) {\n        if (this.peerConnection.remoteDescription == null || this.peerConnection.remoteDescription.type == null) {\n            // we haven't been sent an offer yet, cache the remote ICE candidates\n            this.iceCandidates.push(signal);\n            return;\n        }\n        await super.handleCandidate(signal);\n    }\n}\n//# sourceMappingURL=receiver.js.map","import { WebRTCPeer } from './peer.js';\nimport { WebRTCHandshake } from './handshake.js';\nimport randombytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { pEvent } from 'p-event';\nimport delay from 'delay';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:webrtc-peer:initator');\nconst ICECOMPLETE_TIMEOUT = 1000;\nexport class WebRTCInitiator extends WebRTCPeer {\n    constructor(opts = {}) {\n        super({\n            ...opts,\n            logPrefix: 'initiator'\n        });\n        this.handleDataChannelEvent({\n            channel: this.peerConnection.createDataChannel(opts.dataChannelLabel ?? uint8ArrayToString(randombytes(20), 'hex').slice(0, 7), opts.dataChannelInit)\n        });\n        this.handshake = new WebRTCInitiatorHandshake({\n            log: this.log,\n            peerConnection: this.peerConnection,\n            wrtc: this.wrtc,\n            offerOptions: opts.offerOptions\n        });\n        this.handshake.addEventListener('signal', event => {\n            this.dispatchEvent(new CustomEvent('signal', { detail: event.detail }));\n        });\n    }\n    handleSignal(signal) {\n        this.handshake.handleSignal(signal).catch(err => {\n            this.log('error handling signal %o %o', signal, err);\n        });\n    }\n}\nclass WebRTCInitiatorHandshake extends WebRTCHandshake {\n    constructor(options) {\n        super(options);\n        this.options = options;\n        this.status = 'idle';\n        this.peerConnection.addEventListener('icecandidate', (event) => {\n            if (event.candidate == null) {\n                return;\n            }\n            const signal = {\n                type: 'candidate',\n                candidate: {\n                    candidate: event.candidate.candidate,\n                    sdpMLineIndex: event.candidate.sdpMLineIndex,\n                    sdpMid: event.candidate.sdpMid\n                }\n            };\n            log.trace('create candidate', signal);\n            this.dispatchEvent(new CustomEvent('signal', {\n                detail: signal\n            }));\n            this.dispatchEvent(new CustomEvent('ice-candidate'));\n        });\n    }\n    async handleRenegotiate() {\n        if (this.status === 'negotiating') {\n            this.log('already negotiating, queueing');\n            return;\n        }\n        this.status = 'negotiating';\n        const offer = await this.peerConnection.createOffer(this.options.offerOptions);\n        await this.peerConnection.setLocalDescription(offer);\n        // wait for at least one candidate before sending the offer\n        await pEvent(this, 'ice-candidate');\n        await delay(ICECOMPLETE_TIMEOUT);\n        log.trace('renegotiate', this.peerConnection.localDescription);\n        this.dispatchEvent(new CustomEvent('signal', {\n            detail: this.peerConnection.localDescription ?? offer\n        }));\n    }\n    async handleAnswer(signal) {\n        log.trace('handle answer', signal);\n        await this.peerConnection.setRemoteDescription(new this.wrtc.RTCSessionDescription(signal));\n        this.status = 'idle';\n    }\n}\n//# sourceMappingURL=initiator.js.map","import { abortableSource } from 'abortable-iterator';\nimport { CLOSE_TIMEOUT } from './constants.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:webrtc-star:socket');\n/**\n * Convert a socket into a MultiaddrConnection\n * https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n */\nexport function toMultiaddrConnection(socket, options) {\n    const { sink, source } = socket;\n    const maConn = {\n        remoteAddr: options.remoteAddr,\n        async sink(source) {\n            if (options.signal != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await sink(source);\n            }\n            catch (err) {\n                // If aborted we can safely ignore\n                if (err.type !== 'aborted') {\n                    // If the source errored the socket will already have been destroyed by\n                    // toIterable.duplex(). If the socket errored it will already be\n                    // destroyed. There's nothing to do here except log the error & return.\n                    log.error(err);\n                }\n            }\n        },\n        source: (options.signal != null) ? abortableSource(source, options.signal) : source,\n        timeline: { open: Date.now() },\n        async close() {\n            if (socket.closed) {\n                return;\n            }\n            const start = Date.now();\n            // Attempt to end the socket. If it takes longer to close than the\n            // timeout, destroy it manually.\n            const timeout = setTimeout(() => {\n                if (maConn.remoteAddr != null) {\n                    const { host, port } = maConn.remoteAddr.toOptions();\n                    log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n                }\n                if (!socket.closed) {\n                    socket.close().catch(err => {\n                        log.error('could not close socket', err);\n                    });\n                }\n            }, CLOSE_TIMEOUT);\n            try {\n                await socket.close();\n            }\n            finally {\n                clearTimeout(timeout);\n            }\n        }\n    };\n    socket.addEventListener('close', () => {\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }, {\n        once: true\n    });\n    return maConn;\n}\n//# sourceMappingURL=socket-to-conn.js.map","import { multiaddr, isName } from '@multiformats/multiaddr';\nexport function cleanUrlSIO(ma) {\n    const maStrSplit = ma.toString().split('/');\n    const tcpProto = ma.protos()[1].name;\n    const wsProto = ma.protos()[2].name;\n    const tcpPort = ma.stringTuples()[1][1];\n    if (tcpProto !== 'tcp' || (wsProto !== 'ws' && wsProto !== 'wss')) {\n        throw new Error(`invalid multiaddr: ${ma.toString()}`);\n    }\n    if (!isName(ma)) {\n        return `http://${maStrSplit[2]}:${maStrSplit[4]}`;\n    }\n    if (wsProto === 'ws') {\n        return `http://${maStrSplit[2]}${tcpPort == null || tcpPort === '80' ? '' : `:${tcpPort}`}`;\n    }\n    if (wsProto === 'wss') {\n        return `https://${maStrSplit[2]}${tcpPort == null || tcpPort === '443' ? '' : `:${tcpPort}`}`;\n    }\n    throw new Error('invalid multiaddr: ' + ma.toString());\n}\nexport function cleanMultiaddr(maStr) {\n    const legacy = '/libp2p-webrtc-star';\n    if (maStr.startsWith(legacy)) {\n        maStr = maStr.substring(legacy.length, maStr.length);\n        let ma = multiaddr(maStr);\n        const tuppleIPFS = ma.stringTuples().filter((tupple) => {\n            return tupple[0] === 421; // ipfs code\n        })[0];\n        if (tuppleIPFS[1] == null) {\n            throw new Error('invalid multiaddr: ' + maStr);\n        }\n        ma = ma.decapsulate('p2p');\n        ma = ma.encapsulate('/p2p-webrtc-star');\n        ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`);\n        maStr = ma.toString();\n    }\n    return maStr;\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { connect } from 'socket.io-client';\nimport pDefer from 'p-defer';\nimport { WebRTCReceiver } from '@libp2p/webrtc-peer';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanUrlSIO } from './utils.js';\nimport { CODE_P2P } from './constants.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:webrtc-star:listener');\nconst sioOptions = {\n    transports: ['websocket'],\n    path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed\n};\nclass SigServer extends EventEmitter {\n    constructor(signallingUrl, signallingAddr, upgrader, handler, channelOptions) {\n        super();\n        this.signallingAddr = signallingAddr;\n        this.socket = connect(signallingUrl, sioOptions);\n        this.connections = [];\n        this.channels = new Map();\n        this.pendingSignals = new Map();\n        this.upgrader = upgrader;\n        this.handler = handler;\n        this.channelOptions = channelOptions;\n        this.handleWsHandshake = this.handleWsHandshake.bind(this);\n        let previouslyConnected = false;\n        this.socket.on('connect_error', err => {\n            // @ts-expect-error `.type` is missing from the types\n            if (previouslyConnected && err.type === 'TransportError') {\n                // if we've had an open connection before, and this is a\n                // transport error, let socket.io's reconnect logic take over\n                return;\n            }\n            this.dispatchEvent(new CustomEvent('error', {\n                detail: err\n            }));\n        });\n        this.socket.on('error', (err) => {\n            this.dispatchEvent(new CustomEvent('error', {\n                detail: err\n            }));\n        });\n        this.socket.on('ws-handshake', this.handleWsHandshake);\n        this.socket.on('ws-peer', (maStr) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: maStr\n            }));\n        });\n        this.socket.on('connect', () => {\n            this.socket.emit('ss-join', this.signallingAddr.toString());\n            if (previouslyConnected) {\n                this.dispatchEvent(new CustomEvent('reconnect'));\n            }\n        });\n        this.socket.once('connect', () => {\n            // make sure we can reconnect in future\n            previouslyConnected = true;\n            this.dispatchEvent(new CustomEvent('listening'));\n        });\n        this.socket.on('disconnect', () => {\n            this.dispatchEvent(new CustomEvent('disconnect'));\n        });\n    }\n    _createChannel(intentId, srcMultiaddr, dstMultiaddr) {\n        const channelOptions = {\n            ...this.channelOptions\n        };\n        const channel = new WebRTCReceiver(channelOptions);\n        const onError = (evt) => {\n            const err = evt.detail;\n            log.error('incoming connection errored', err);\n        };\n        channel.addEventListener('error', onError);\n        channel.addEventListener('close', () => {\n            channel.removeEventListener('error', onError);\n        }, {\n            once: true\n        });\n        channel.addEventListener('signal', (evt) => {\n            const signal = evt.detail;\n            this.socket.emit('ss-handshake', {\n                intentId,\n                srcMultiaddr,\n                dstMultiaddr,\n                answer: true,\n                signal\n            });\n        });\n        channel.addEventListener('ready', () => {\n            const maConn = toMultiaddrConnection(channel, { remoteAddr: this.signallingAddr });\n            log('new inbound connection %s', maConn.remoteAddr);\n            try {\n                this.upgrader.upgradeInbound(maConn)\n                    .then(conn => {\n                    log('inbound connection %s upgraded', maConn.remoteAddr);\n                    this.connections.push(maConn);\n                    const untrackConn = () => {\n                        this.connections = this.connections.filter(c => c !== maConn);\n                        this.channels.delete(intentId);\n                        this.pendingSignals.delete(intentId);\n                    };\n                    channel.addEventListener('close', untrackConn, {\n                        once: true\n                    });\n                    this.dispatchEvent(new CustomEvent('connection', {\n                        detail: conn\n                    }));\n                    this.handler(conn);\n                })\n                    .catch(err => {\n                    log.error('inbound connection failed to upgrade', err);\n                    maConn.close().catch(err => {\n                        log.error('inbound connection failed to close after failing to upgrade', err);\n                    });\n                });\n            }\n            catch (err) {\n                log.error('inbound connection failed to upgrade', err);\n                maConn.close().catch(err => {\n                    log.error('inbound connection failed to close after failing to upgrade', err);\n                });\n            }\n        }, {\n            once: true\n        });\n        return channel;\n    }\n    handleWsHandshake(offer) {\n        log('incoming handshake. signal type \"%s\" is answer %s', offer.signal.type, offer.answer);\n        if (offer.answer === true || offer.err != null || offer.intentId == null) {\n            return;\n        }\n        const intentId = offer.intentId;\n        let pendingSignals = this.pendingSignals.get(intentId);\n        if (pendingSignals == null) {\n            pendingSignals = [];\n            this.pendingSignals.set(intentId, pendingSignals);\n        }\n        pendingSignals.push(offer);\n        let channel = this.channels.get(intentId);\n        if (channel == null) {\n            if (offer.signal.type !== 'offer') {\n                log('handshake is not an offer and channel does not exist, buffering until we receive an offer');\n                return;\n            }\n            log('creating new channel to handle offer handshake');\n            channel = this._createChannel(offer.intentId, offer.srcMultiaddr, offer.dstMultiaddr);\n            this.channels.set(intentId, channel);\n        }\n        else {\n            log('channel already exists, using it to handle handshake');\n        }\n        while (pendingSignals.length > 0) {\n            const handshake = pendingSignals.shift();\n            if (handshake?.signal != null) {\n                channel.handleSignal(handshake.signal);\n            }\n        }\n    }\n    async close() {\n        // Close listener\n        this.socket.emit('ss-leave', this.signallingAddr.toString());\n        this.socket.removeAllListeners();\n        this.socket.close();\n        await Promise.all([\n            ...this.connections.map(async (maConn) => await maConn.close()),\n            ...Array.from(this.channels.values()).map(async (channel) => await channel.close())\n        ]);\n        this.dispatchEvent(new CustomEvent('close'));\n    }\n}\nclass WebRTCListener extends EventEmitter {\n    constructor(upgrader, handler, peerId, transport, options) {\n        super();\n        this.upgrader = upgrader;\n        this.handler = handler;\n        this.peerId = peerId;\n        this.transport = transport;\n        this.options = options;\n    }\n    async listen(ma) {\n        // Should only be used if not already listening\n        if (this.listeningAddr != null) {\n            throw errCode(new Error('listener already in use'), 'ERR_ALREADY_LISTENING');\n        }\n        const defer = pDefer(); // eslint-disable-line @typescript-eslint/no-invalid-void-type\n        // Should be kept unmodified\n        this.listeningAddr = ma;\n        let signallingAddr;\n        if (!ma.protoCodes().includes(CODE_P2P)) {\n            signallingAddr = ma.encapsulate(`/p2p/${this.peerId.toString()}`);\n        }\n        else {\n            signallingAddr = ma;\n        }\n        const signallingUrl = this.signallingUrl = cleanUrlSIO(ma);\n        log('connecting to signalling server on: %s', this.signallingUrl);\n        const server = new SigServer(this.signallingUrl, signallingAddr, this.upgrader, this.handler, this.options.channelOptions);\n        server.addEventListener('error', (evt) => {\n            const err = evt.detail;\n            log('error connecting to signalling server %o', err);\n            server.close().catch(err => {\n                log.error('error closing server after error', err);\n            });\n            defer.reject(err);\n        });\n        server.addEventListener('listening', () => {\n            log('connected to signalling server');\n            this.dispatchEvent(new CustomEvent('listening'));\n            defer.resolve();\n        });\n        server.addEventListener('peer', (evt) => {\n            this.transport.peerDiscovered(evt.detail);\n        });\n        server.addEventListener('connection', (evt) => {\n            const conn = evt.detail;\n            if (conn.remoteAddr == null) {\n                try {\n                    conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toString()}`);\n                }\n                catch (err) {\n                    log.error('could not determine remote address', err);\n                }\n            }\n            this.dispatchEvent(new CustomEvent('connection', {\n                detail: conn\n            }));\n        });\n        server.addEventListener('disconnect', () => {\n            // Ensure we error if we try to dial while we are disconnected from\n            // the signalling server\n            this.transport.sigServers.delete(signallingUrl);\n        });\n        server.addEventListener('reconnect', () => {\n            // We can dial via the signalling server again\n            this.transport.sigServers.set(signallingUrl, server);\n        });\n        // Store listen and signal reference addresses\n        this.transport.sigServers.set(this.signallingUrl, server);\n        return await defer.promise;\n    }\n    async close() {\n        if (this.signallingUrl != null) {\n            const server = this.transport.sigServers.get(this.signallingUrl);\n            if (server != null) {\n                await server.close();\n                this.transport.sigServers.delete(this.signallingUrl);\n            }\n        }\n        this.dispatchEvent(new CustomEvent('close'));\n        // Reset state\n        this.listeningAddr = undefined;\n    }\n    getAddrs() {\n        if (this.listeningAddr != null) {\n            return [\n                this.listeningAddr\n            ];\n        }\n        return [];\n    }\n}\nexport function createListener(upgrader, handler, peerId, transport, options) {\n    return new WebRTCListener(upgrader, handler, peerId, transport, options);\n}\n//# sourceMappingURL=listener.js.map","export const symbol = Symbol.for('@libp2p/transport');\nexport function isTransport(other) {\n    return other != null && Boolean(other[symbol]);\n}\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nexport var FaultTolerance;\n(function (FaultTolerance) {\n    /**\n     * should be used for failing in any listen circumstance\n     */\n    FaultTolerance[FaultTolerance[\"FATAL_ALL\"] = 0] = \"FATAL_ALL\";\n    /**\n     * should be used for not failing when not listening\n     */\n    FaultTolerance[FaultTolerance[\"NO_FATAL\"] = 1] = \"NO_FATAL\";\n})(FaultTolerance || (FaultTolerance = {}));\n//# sourceMappingURL=index.js.map","/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```js\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nexport const peerDiscovery = Symbol.for('@libp2p/peer-discovery');\nexport const symbol = Symbol.for('@libp2p/peer-discovery');\nexport function isPeerDiscovery(other) {\n    return other != null && Boolean(other[symbol]);\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport errcode from 'err-code';\nimport { AbortError } from 'abortable-iterator';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT } from './constants.js';\nimport { createListener } from './listener.js';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanMultiaddr, cleanUrlSIO } from './utils.js';\nimport { WebRTCInitiator } from '@libp2p/webrtc-peer';\nimport randomBytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-transport';\nimport { symbol as peerDiscoverySymbol } from '@libp2p/interface-peer-discovery';\nconst webrtcSupport = 'RTCPeerConnection' in globalThis;\nconst log = logger('libp2p:webrtc-star');\nconst noop = () => { };\nexport class WebRTCStarDiscovery extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.started = false;\n    }\n    get [peerDiscoverySymbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/webrtc-star-discovery';\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    dispatchEvent(event) {\n        if (!this.isStarted()) {\n            return false;\n        }\n        return super.dispatchEvent(event);\n    }\n}\n/**\n * @class WebRTCStar\n */\nexport class WebRTCStar {\n    constructor(init) {\n        if (init?.wrtc != null) {\n            this.wrtc = init.wrtc;\n        }\n        // Keep Signalling references\n        this.sigServers = new Map();\n        // Discovery\n        this._discovery = new WebRTCStarDiscovery();\n        this.discovery = () => this._discovery;\n        this.peerDiscovered = this.peerDiscovered.bind(this);\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/webrtc-star';\n    }\n    async dial(ma, options) {\n        const rawConn = await this._connect(ma, options);\n        const maConn = toMultiaddrConnection(rawConn, { remoteAddr: ma, signal: options.signal });\n        log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options.signal?.aborted === true) {\n            throw new AbortError();\n        }\n        const channelOptions = {\n            ...(options.channelOptions ?? {})\n        };\n        // Use custom WebRTC implementation\n        if (this.wrtc != null) {\n            channelOptions.wrtc = this.wrtc;\n        }\n        const cOpts = ma.toOptions();\n        const intentId = uint8ArrayToString(randomBytes(36), 'hex');\n        return await new Promise((resolve, reject) => {\n            const sio = this.sigServers.get(cleanUrlSIO(ma));\n            if (sio?.socket == null) {\n                return reject(errcode(new Error('unknown signal server to use'), 'ERR_UNKNOWN_SIGNAL_SERVER'));\n            }\n            let connected = false;\n            log('dialing %s:%s', cOpts.host, cOpts.port);\n            const channel = new WebRTCInitiator(channelOptions);\n            const onError = (evt) => {\n                const err = evt.detail;\n                if (!connected) {\n                    const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;\n                    log.error(msg);\n                    done(err);\n                }\n            };\n            const onReady = () => {\n                connected = true;\n                log('connection opened %s:%s', cOpts.host, cOpts.port);\n                done();\n            };\n            const onAbort = () => {\n                log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n                channel.close().finally(() => {\n                    done(new AbortError());\n                });\n            };\n            const done = (err) => {\n                channel.removeEventListener('ready', onReady);\n                options.signal?.removeEventListener('abort', onAbort);\n                if (err == null) {\n                    resolve(channel);\n                }\n                else {\n                    reject(err);\n                }\n            };\n            channel.addEventListener('ready', onReady, {\n                once: true\n            });\n            channel.addEventListener('close', () => {\n                channel.removeEventListener('error', onError);\n            });\n            options.signal?.addEventListener('abort', onAbort);\n            channel.addEventListener('signal', (evt) => {\n                const signal = evt.detail;\n                sio.socket.emit('ss-handshake', {\n                    intentId: intentId,\n                    srcMultiaddr: sio.signallingAddr.toString(),\n                    dstMultiaddr: ma.toString(),\n                    signal: signal\n                });\n            });\n            sio.socket.on('ws-handshake', (offer) => {\n                if (offer.intentId === intentId && offer.err != null) {\n                    channel.close().finally(() => {\n                        reject(errcode(new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n                    });\n                }\n                if (offer.intentId !== intentId || offer.answer == null || channel.closed) {\n                    return;\n                }\n                channel.handleSignal(offer.signal);\n            });\n        });\n    }\n    /**\n     * Creates a WebrtcStar listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`.\n     */\n    createListener(options) {\n        if (!webrtcSupport && this.wrtc == null) {\n            throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n        }\n        options.channelOptions = options.channelOptions ?? {};\n        if (this.wrtc != null) {\n            options.channelOptions.wrtc = this.wrtc;\n        }\n        if (this.peerId == null) {\n            throw errcode(new Error('PeerId not set'), 'ERR_MISSING_PEER_ID');\n        }\n        return createListener(options.upgrader, options.handler ?? noop, this.peerId, this, options);\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter((ma) => {\n            if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n                return false;\n            }\n            return mafmt.WebRTCStar.matches(ma);\n        });\n    }\n    peerDiscovered(maStr) {\n        log('peer discovered: %s', maStr);\n        maStr = cleanMultiaddr(maStr);\n        const ma = multiaddr(maStr);\n        const peerIdStr = ma.getPeerId();\n        if (peerIdStr == null) {\n            return;\n        }\n        const peerId = peerIdFromString(peerIdStr);\n        this._discovery.dispatchEvent(new CustomEvent('peer', {\n            detail: {\n                id: peerId,\n                multiaddrs: [ma],\n                protocols: []\n            }\n        }));\n    }\n}\n//# sourceMappingURL=transport.js.map","import { WebRTCStar } from './transport.js';\nexport function webRTCStar(init = {}) {\n    const transport = new WebRTCStar(init);\n    return {\n        transport: (components) => {\n            transport.peerId = components.peerId;\n            return transport;\n        },\n        discovery: transport.discovery\n    };\n}\n//# sourceMappingURL=index.js.map","import { webRTCStar } from '@libp2p/webrtc-star'\n\nexport function libp2pConfig () {\n  const webRtcStar = webRTCStar()\n\n  /** @type {import('libp2p').Libp2pOptions} */\n  const options = {\n    transports: [\n      webRtcStar.transport\n    ],\n    peerDiscovery: [\n      webRtcStar.discovery\n    ],\n    connectionManager: {\n      maxParallelDials: 150, // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4, // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3, // 10 second dial timeout per peer dial\n      autoDial: true\n    },\n    nat: {\n      enabled: false\n    }\n  }\n\n  return options\n}\n","export function isStartable(obj) {\n    return obj != null && typeof obj.start === 'function' && typeof obj.stop === 'function';\n}\nexport async function start(...objs) {\n    const startables = [];\n    for (const obj of objs) {\n        if (isStartable(obj)) {\n            startables.push(obj);\n        }\n    }\n    await Promise.all(startables.map(async (s) => {\n        if (s.beforeStart != null) {\n            await s.beforeStart();\n        }\n    }));\n    await Promise.all(startables.map(async (s) => {\n        await s.start();\n    }));\n    await Promise.all(startables.map(async (s) => {\n        if (s.afterStart != null) {\n            await s.afterStart();\n        }\n    }));\n}\nexport async function stop(...objs) {\n    const startables = [];\n    for (const obj of objs) {\n        if (isStartable(obj)) {\n            startables.push(obj);\n        }\n    }\n    await Promise.all(startables.map(async (s) => {\n        if (s.beforeStop != null) {\n            await s.beforeStop();\n        }\n    }));\n    await Promise.all(startables.map(async (s) => {\n        await s.stop();\n    }));\n    await Promise.all(startables.map(async (s) => {\n        if (s.afterStop != null) {\n            await s.afterStop();\n        }\n    }));\n}\n//# sourceMappingURL=startable.js.map","export var messages;\n(function (messages) {\n    messages[\"NOT_STARTED_YET\"] = \"The libp2p node is not started yet\";\n    messages[\"DHT_DISABLED\"] = \"DHT is not available\";\n    messages[\"PUBSUB_DISABLED\"] = \"PubSub is not available\";\n    messages[\"CONN_ENCRYPTION_REQUIRED\"] = \"At least one connection encryption module is required\";\n    messages[\"ERR_TRANSPORTS_REQUIRED\"] = \"At least one transport module is required\";\n    messages[\"ERR_PROTECTOR_REQUIRED\"] = \"Private network is enforced, but no protector was provided\";\n    messages[\"NOT_FOUND\"] = \"Not found\";\n})(messages || (messages = {}));\nexport var codes;\n(function (codes) {\n    codes[\"DHT_DISABLED\"] = \"ERR_DHT_DISABLED\";\n    codes[\"ERR_PUBSUB_DISABLED\"] = \"ERR_PUBSUB_DISABLED\";\n    codes[\"PUBSUB_NOT_STARTED\"] = \"ERR_PUBSUB_NOT_STARTED\";\n    codes[\"DHT_NOT_STARTED\"] = \"ERR_DHT_NOT_STARTED\";\n    codes[\"CONN_ENCRYPTION_REQUIRED\"] = \"ERR_CONN_ENCRYPTION_REQUIRED\";\n    codes[\"ERR_TRANSPORTS_REQUIRED\"] = \"ERR_TRANSPORTS_REQUIRED\";\n    codes[\"ERR_PROTECTOR_REQUIRED\"] = \"ERR_PROTECTOR_REQUIRED\";\n    codes[\"ERR_PEER_DIAL_INTERCEPTED\"] = \"ERR_PEER_DIAL_INTERCEPTED\";\n    codes[\"ERR_CONNECTION_INTERCEPTED\"] = \"ERR_CONNECTION_INTERCEPTED\";\n    codes[\"ERR_INVALID_PROTOCOLS_FOR_STREAM\"] = \"ERR_INVALID_PROTOCOLS_FOR_STREAM\";\n    codes[\"ERR_CONNECTION_ENDED\"] = \"ERR_CONNECTION_ENDED\";\n    codes[\"ERR_CONNECTION_FAILED\"] = \"ERR_CONNECTION_FAILED\";\n    codes[\"ERR_NODE_NOT_STARTED\"] = \"ERR_NODE_NOT_STARTED\";\n    codes[\"ERR_ALREADY_ABORTED\"] = \"ERR_ALREADY_ABORTED\";\n    codes[\"ERR_TOO_MANY_ADDRESSES\"] = \"ERR_TOO_MANY_ADDRESSES\";\n    codes[\"ERR_NO_VALID_ADDRESSES\"] = \"ERR_NO_VALID_ADDRESSES\";\n    codes[\"ERR_RELAYED_DIAL\"] = \"ERR_RELAYED_DIAL\";\n    codes[\"ERR_DIALED_SELF\"] = \"ERR_DIALED_SELF\";\n    codes[\"ERR_DISCOVERED_SELF\"] = \"ERR_DISCOVERED_SELF\";\n    codes[\"ERR_DUPLICATE_TRANSPORT\"] = \"ERR_DUPLICATE_TRANSPORT\";\n    codes[\"ERR_ENCRYPTION_FAILED\"] = \"ERR_ENCRYPTION_FAILED\";\n    codes[\"ERR_HOP_REQUEST_FAILED\"] = \"ERR_HOP_REQUEST_FAILED\";\n    codes[\"ERR_INVALID_KEY\"] = \"ERR_INVALID_KEY\";\n    codes[\"ERR_INVALID_MESSAGE\"] = \"ERR_INVALID_MESSAGE\";\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_INVALID_PEER\"] = \"ERR_INVALID_PEER\";\n    codes[\"ERR_MUXER_UNAVAILABLE\"] = \"ERR_MUXER_UNAVAILABLE\";\n    codes[\"ERR_NOT_FOUND\"] = \"ERR_NOT_FOUND\";\n    codes[\"ERR_TIMEOUT\"] = \"ERR_TIMEOUT\";\n    codes[\"ERR_TRANSPORT_UNAVAILABLE\"] = \"ERR_TRANSPORT_UNAVAILABLE\";\n    codes[\"ERR_TRANSPORT_DIAL_FAILED\"] = \"ERR_TRANSPORT_DIAL_FAILED\";\n    codes[\"ERR_UNSUPPORTED_PROTOCOL\"] = \"ERR_UNSUPPORTED_PROTOCOL\";\n    codes[\"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\"] = \"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\";\n    codes[\"ERR_INVALID_MULTIADDR\"] = \"ERR_INVALID_MULTIADDR\";\n    codes[\"ERR_SIGNATURE_NOT_VALID\"] = \"ERR_SIGNATURE_NOT_VALID\";\n    codes[\"ERR_FIND_SELF\"] = \"ERR_FIND_SELF\";\n    codes[\"ERR_NO_ROUTERS_AVAILABLE\"] = \"ERR_NO_ROUTERS_AVAILABLE\";\n    codes[\"ERR_CONNECTION_NOT_MULTIPLEXED\"] = \"ERR_CONNECTION_NOT_MULTIPLEXED\";\n    codes[\"ERR_NO_DIAL_TOKENS\"] = \"ERR_NO_DIAL_TOKENS\";\n    codes[\"ERR_KEYCHAIN_REQUIRED\"] = \"ERR_KEYCHAIN_REQUIRED\";\n    codes[\"ERR_INVALID_CMS\"] = \"ERR_INVALID_CMS\";\n    codes[\"ERR_MISSING_KEYS\"] = \"ERR_MISSING_KEYS\";\n    codes[\"ERR_NO_KEY\"] = \"ERR_NO_KEY\";\n    codes[\"ERR_INVALID_KEY_NAME\"] = \"ERR_INVALID_KEY_NAME\";\n    codes[\"ERR_INVALID_KEY_TYPE\"] = \"ERR_INVALID_KEY_TYPE\";\n    codes[\"ERR_KEY_ALREADY_EXISTS\"] = \"ERR_KEY_ALREADY_EXISTS\";\n    codes[\"ERR_INVALID_KEY_SIZE\"] = \"ERR_INVALID_KEY_SIZE\";\n    codes[\"ERR_KEY_NOT_FOUND\"] = \"ERR_KEY_NOT_FOUND\";\n    codes[\"ERR_OLD_KEY_NAME_INVALID\"] = \"ERR_OLD_KEY_NAME_INVALID\";\n    codes[\"ERR_NEW_KEY_NAME_INVALID\"] = \"ERR_NEW_KEY_NAME_INVALID\";\n    codes[\"ERR_PASSWORD_REQUIRED\"] = \"ERR_PASSWORD_REQUIRED\";\n    codes[\"ERR_PEM_REQUIRED\"] = \"ERR_PEM_REQUIRED\";\n    codes[\"ERR_CANNOT_READ_KEY\"] = \"ERR_CANNOT_READ_KEY\";\n    codes[\"ERR_MISSING_PRIVATE_KEY\"] = \"ERR_MISSING_PRIVATE_KEY\";\n    codes[\"ERR_MISSING_PUBLIC_KEY\"] = \"ERR_MISSING_PUBLIC_KEY\";\n    codes[\"ERR_INVALID_OLD_PASS_TYPE\"] = \"ERR_INVALID_OLD_PASS_TYPE\";\n    codes[\"ERR_INVALID_NEW_PASS_TYPE\"] = \"ERR_INVALID_NEW_PASS_TYPE\";\n    codes[\"ERR_INVALID_PASS_LENGTH\"] = \"ERR_INVALID_PASS_LENGTH\";\n    codes[\"ERR_NOT_IMPLEMENTED\"] = \"ERR_NOT_IMPLEMENTED\";\n    codes[\"ERR_WRONG_PING_ACK\"] = \"ERR_WRONG_PING_ACK\";\n    codes[\"ERR_INVALID_RECORD\"] = \"ERR_INVALID_RECORD\";\n    codes[\"ERR_ALREADY_SUCCEEDED\"] = \"ERR_ALREADY_SUCCEEDED\";\n    codes[\"ERR_NO_HANDLER_FOR_PROTOCOL\"] = \"ERR_NO_HANDLER_FOR_PROTOCOL\";\n    codes[\"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_CONNECTION_DENIED\"] = \"ERR_CONNECTION_DENIED\";\n})(codes || (codes = {}));\n//# sourceMappingURL=errors.js.map","import errCode from 'err-code';\nimport filter from 'it-filter';\nimport map from 'it-map';\n/**\n * Store the multiaddrs from every peer in the passed peer store\n */\nexport async function* storeAddresses(source, peerStore) {\n    yield* map(source, async (peer) => {\n        // ensure we have the addresses for a given peer\n        await peerStore.addressBook.add(peer.id, peer.multiaddrs);\n        return peer;\n    });\n}\n/**\n * Filter peers by unique peer id\n */\nexport function uniquePeers(source) {\n    /** @type Set<string> */\n    const seen = new Set();\n    return filter(source, (peer) => {\n        // dedupe by peer id\n        if (seen.has(peer.id.toString())) {\n            return false;\n        }\n        seen.add(peer.id.toString());\n        return true;\n    });\n}\n/**\n * Require at least `min` peers to be yielded from `source`\n */\nexport async function* requirePeers(source, min = 1) {\n    let seen = 0;\n    for await (const peer of source) {\n        seen++;\n        yield peer;\n    }\n    if (seen < min) {\n        throw errCode(new Error('not found'), 'NOT_FOUND');\n    }\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes, messages } from './errors.js';\nimport { storeAddresses, uniquePeers, requirePeers } from './content-routing/utils.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport merge from 'it-merge';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport { setDelayedInterval, clearDelayedInterval\n// @ts-expect-error module with no types\n } from 'set-delayed-interval';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:peer-routing');\nexport class DefaultPeerRouting {\n    constructor(components, init) {\n        this.components = components;\n        this.routers = init.routers ?? [];\n        this.refreshManagerInit = init.refreshManager ?? {};\n        this.started = false;\n        this._findClosestPeersTask = this._findClosestPeersTask.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start peer routing service.\n     */\n    async start() {\n        if (this.started || this.routers.length === 0 || this.timeoutId != null || this.refreshManagerInit.enabled === false) {\n            return;\n        }\n        this.timeoutId = setDelayedInterval(this._findClosestPeersTask, this.refreshManagerInit.interval, this.refreshManagerInit.bootDelay);\n        this.started = true;\n    }\n    /**\n     * Recurrent task to find closest peers and add their addresses to the Address Book.\n     */\n    async _findClosestPeersTask() {\n        if (this.abortController != null) {\n            // we are already running the query\n            return;\n        }\n        try {\n            this.abortController = new TimeoutController(this.refreshManagerInit.timeout ?? 10e3);\n            // this controller may be used while dialing lots of peers so prevent MaxListenersExceededWarning\n            // appearing in the console\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, this.abortController.signal);\n            }\n            catch { }\n            // nb getClosestPeers adds the addresses to the address book\n            await drain(this.getClosestPeers(this.components.peerId.toBytes(), { signal: this.abortController.signal }));\n        }\n        catch (err) {\n            log.error(err);\n        }\n        finally {\n            this.abortController?.clear();\n            this.abortController = undefined;\n        }\n    }\n    /**\n     * Stop peer routing service.\n     */\n    async stop() {\n        clearDelayedInterval(this.timeoutId);\n        // abort query if it is in-flight\n        this.abortController?.abort();\n        this.started = false;\n    }\n    /**\n     * Iterates over all peer routers in parallel to find the given peer\n     */\n    async findPeer(id, options) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No peer routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        if (id.toString() === this.components.peerId.toString()) {\n            throw errCode(new Error('Should not try to find self'), codes.ERR_FIND_SELF);\n        }\n        const output = await pipe(merge(...this.routers.map(router => (async function* () {\n            try {\n                yield await router.findPeer(id, options);\n            }\n            catch (err) {\n                log.error(err);\n            }\n        })())), (source) => filter(source, Boolean), (source) => storeAddresses(source, this.components.peerStore), async (source) => await first(source));\n        if (output != null) {\n            return output;\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */\n    async *getClosestPeers(key, options) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No peer routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        yield* pipe(merge(...this.routers.map(router => router.getClosestPeers(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));\n    }\n}\n//# sourceMappingURL=peer-routing.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nimport { storeAddresses, uniquePeers, requirePeers } from './utils.js';\nimport drain from 'it-drain';\nimport merge from 'it-merge';\nimport { pipe } from 'it-pipe';\nexport class CompoundContentRouting {\n    constructor(components, init) {\n        this.routers = init.routers ?? [];\n        this.started = false;\n        this.components = components;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    /**\n     * Iterates over all content routers in parallel to find providers of the given key\n     */\n    async *findProviders(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No content this.routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        yield* pipe(merge(...this.routers.map(router => router.findProviders(key, options))), (source) => storeAddresses(source, this.components.peerStore), (source) => uniquePeers(source), (source) => requirePeers(source));\n    }\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key\n     */\n    async provide(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw errCode(new Error('No content routers available'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        await Promise.all(this.routers.map(async (router) => await router.provide(key, options)));\n    }\n    /**\n     * Store the given key/value pair in the available content routings\n     */\n    async put(key, value, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        const dht = this.components.dht;\n        if (dht != null) {\n            await drain(dht.put(key, value, options));\n        }\n    }\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     */\n    async get(key, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        const dht = this.components.dht;\n        if (dht != null) {\n            for await (const event of dht.get(key, options)) {\n                if (event.name === 'VALUE') {\n                    return event.value;\n                }\n            }\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n    async *getMany(key, nVals, options) {\n        if (!this.isStarted()) {\n            throw errCode(new Error(messages.NOT_STARTED_YET), codes.DHT_NOT_STARTED);\n        }\n        if (nVals == null || nVals === 0) {\n            return;\n        }\n        let gotValues = 0;\n        const dht = this.components.dht;\n        if (dht != null) {\n            for await (const event of dht.get(key, options)) {\n                if (event.name === 'VALUE') {\n                    yield { from: event.from, val: event.value };\n                    gotValues++;\n                    if (gotValues === nVals) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (gotValues === 0) {\n            throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst defaultAddressFilter = (addrs) => addrs;\nexport class DefaultAddressManager extends EventEmitter {\n    /**\n     * Responsible for managing the peer addresses.\n     * Peers can specify their listen and announce addresses.\n     * The listen addresses will be used by the libp2p transports to listen for new connections,\n     * while the announce addresses will be used for the peer addresses' to other peers in the network.\n     */\n    constructor(components, init) {\n        super();\n        const { listen = [], announce = [] } = init;\n        this.components = components;\n        this.listen = listen.map(ma => ma.toString());\n        this.announce = new Set(announce.map(ma => ma.toString()));\n        this.observed = new Set();\n        this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n    }\n    /**\n     * Get peer listen multiaddrs\n     */\n    getListenAddrs() {\n        return Array.from(this.listen).map((a) => multiaddr(a));\n    }\n    /**\n     * Get peer announcing multiaddrs\n     */\n    getAnnounceAddrs() {\n        return Array.from(this.announce).map((a) => multiaddr(a));\n    }\n    /**\n     * Get observed multiaddrs\n     */\n    getObservedAddrs() {\n        return Array.from(this.observed).map((a) => multiaddr(a));\n    }\n    /**\n     * Add peer observed addresses\n     * Signal that we have confidence an observed multiaddr is publicly dialable -\n     * this will make it appear in the output of getAddresses()\n     */\n    confirmObservedAddr(addr) {\n    }\n    /**\n     * Signal that we do not have confidence an observed multiaddr is publicly dialable -\n     * this will remove it from the output of getObservedAddrs()\n     */\n    removeObservedAddr(addr) {\n    }\n    /**\n     * Add peer observed addresses\n     */\n    addObservedAddr(addr) {\n        let ma = multiaddr(addr);\n        const remotePeer = ma.getPeerId();\n        // strip our peer id if it has been passed\n        if (remotePeer != null) {\n            const remotePeerId = peerIdFromString(remotePeer);\n            // use same encoding for comparison\n            if (remotePeerId.equals(this.components.peerId)) {\n                ma = ma.decapsulate(multiaddr(`/p2p/${this.components.peerId.toString()}`));\n            }\n        }\n        const addrString = ma.toString();\n        // do not trigger the change:addresses event if we already know about this address\n        if (this.observed.has(addrString)) {\n            return;\n        }\n        this.observed.add(addrString);\n        this.dispatchEvent(new CustomEvent('change:addresses'));\n    }\n    getAddresses() {\n        let addrs = this.getAnnounceAddrs().map(ma => ma.toString());\n        if (addrs.length === 0) {\n            // no configured announce addrs, add configured listen addresses\n            addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());\n        }\n        addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString()));\n        // dedupe multiaddrs\n        const addrSet = new Set(addrs);\n        // Create advertising list\n        return this.announceFilter(Array.from(addrSet)\n            .map(str => multiaddr(str)))\n            .map(ma => {\n            // do not append our peer id to a path multiaddr as it will become invalid\n            if (ma.protos().pop()?.path === true) {\n                return ma;\n            }\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma;\n            }\n            return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nexport class VisibilityChangeEmitter extends EventEmitter {\n    constructor() {\n        super();\n        this.hidden = 'hidden';\n        this.visibilityChange = 'visibilityChange';\n        if (globalThis.document != null) {\n            this._initializeVisibilityVarNames();\n            this._addVisibilityChangeListener();\n        }\n    }\n    /**\n     * document.hidden and document.visibilityChange are the two variables we need to check for;\n     * Since these variables are named differently in different browsers, this function sets\n     * the appropriate name based on the browser being used. Once executed, tha actual names of\n     * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n     * respectively\n     *\n     * @private\n     */\n    _initializeVisibilityVarNames() {\n        let hidden = 'hidden';\n        let visibilityChange = 'visibilitychange';\n        if (typeof globalThis.document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n            hidden = 'hidden';\n            visibilityChange = 'visibilitychange';\n            // @ts-expect-error mozHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.mozHidden !== 'undefined') {\n            hidden = 'mozHidden';\n            visibilityChange = 'mozvisibilitychange';\n            // @ts-expect-error msHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.msHidden !== 'undefined') {\n            hidden = 'msHidden';\n            visibilityChange = 'msvisibilitychange';\n            // @ts-expect-error webkitHidden is a non-standard field name\n        }\n        else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n            hidden = 'webkitHidden';\n            visibilityChange = 'webkitvisibilitychange';\n        }\n        this.hidden = hidden;\n        this.visibilityChange = visibilityChange;\n    }\n    /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     *\n     * @private\n     */\n    _addVisibilityChangeListener() {\n        // @ts-expect-error cannot index document object with string key\n        if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n            log('Checking page visibility requires a browser that supports the Page Visibility API.');\n        }\n        else {\n            // Handle page visibility change\n            globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false);\n        }\n    }\n    /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     */\n    isVisible() {\n        // @ts-expect-error cannot index document object with string key\n        if (this.hidden === undefined || document[this.hidden] === undefined) {\n            return undefined;\n        }\n        // @ts-expect-error cannot index document object with string key\n        return document[this.hidden] == null;\n    }\n    /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n    _handleVisibilityChange() {\n        // @ts-expect-error cannot index document object with string key\n        const visible = globalThis.document[this.hidden] === false;\n        log(visible ? 'Page Visible' : 'Page Hidden');\n        // Emit the event\n        this.dispatchEvent(new CustomEvent('visibilityChange', {\n            detail: visible\n        }));\n    }\n}\n//# sourceMappingURL=visibility-change-emitter.js.map","/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { VisibilityChangeEmitter } from './visibility-change-emitter.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection-manager:latency-monitor');\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * @extends {EventEmitter}\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\nexport class LatencyMonitor extends EventEmitter {\n    constructor(init = {}) {\n        super();\n        const { latencyCheckIntervalMs, dataEmitIntervalMs, asyncTestFn, latencyRandomPercentage } = init;\n        // 0 isn't valid here, so its ok to use ||\n        this.latencyCheckIntervalMs = latencyCheckIntervalMs ?? 500; // 0.5s\n        this.latencyRandomPercentage = latencyRandomPercentage ?? 10;\n        this.latencyCheckMultiply = 2 * (this.latencyRandomPercentage / 100.0) * this.latencyCheckIntervalMs;\n        this.latencyCheckSubtract = this.latencyCheckMultiply / 2;\n        this.dataEmitIntervalMs = (dataEmitIntervalMs === null || dataEmitIntervalMs === 0)\n            ? undefined\n            : dataEmitIntervalMs ?? 5 * 1000; // 5s\n        log('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', this.latencyCheckIntervalMs, this.dataEmitIntervalMs);\n        if (this.dataEmitIntervalMs != null) {\n            log('Expecting ~%s events per summary', this.latencyCheckIntervalMs / this.dataEmitIntervalMs);\n        }\n        else {\n            log('Not emitting summaries');\n        }\n        this.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency\n        // If process: use high resolution timer\n        if (globalThis.process?.hrtime != null) {\n            log('Using process.hrtime for timing');\n            this.now = globalThis.process.hrtime; // eslint-disable-line no-undef\n            this.getDeltaMS = (startTime) => {\n                const hrtime = this.now(startTime);\n                return (hrtime[0] * 1000) + (hrtime[1] / 1000000);\n            };\n            // Let's try for a timer that only monotonically increases\n        }\n        else if (typeof window !== 'undefined' && window.performance?.now != null) {\n            log('Using performance.now for timing');\n            this.now = window.performance.now.bind(window.performance);\n            this.getDeltaMS = (startTime) => Math.round(this.now() - startTime);\n        }\n        else {\n            log('Using Date.now for timing');\n            this.now = Date.now;\n            this.getDeltaMS = (startTime) => this.now() - startTime;\n        }\n        this.latencyData = this.initLatencyData();\n    }\n    start() {\n        // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n        // so we fall back to another library\n        // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n        if (isBrowser()) {\n            this.visibilityChangeEmitter = new VisibilityChangeEmitter();\n            this.visibilityChangeEmitter.addEventListener('visibilityChange', (evt) => {\n                const { detail: pageInFocus } = evt;\n                if (pageInFocus) {\n                    this._startTimers();\n                }\n                else {\n                    this._emitSummary();\n                    this._stopTimers();\n                }\n            });\n        }\n        if (this.visibilityChangeEmitter?.isVisible() === true) {\n            this._startTimers();\n        }\n    }\n    stop() {\n        this._stopTimers();\n    }\n    /**\n     * Start internal timers\n     *\n     * @private\n     */\n    _startTimers() {\n        // Timer already started, ignore this\n        if (this.checkLatencyID != null) {\n            return;\n        }\n        this.checkLatency();\n        if (this.dataEmitIntervalMs != null) {\n            this.emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs);\n            if (typeof this.emitIntervalID.unref === 'function') {\n                this.emitIntervalID.unref(); // Doesn't block exit\n            }\n        }\n    }\n    /**\n     * Stop internal timers\n     *\n     * @private\n     */\n    _stopTimers() {\n        if (this.checkLatencyID != null) {\n            clearTimeout(this.checkLatencyID);\n            this.checkLatencyID = undefined;\n        }\n        if (this.emitIntervalID != null) {\n            clearInterval(this.emitIntervalID);\n            this.emitIntervalID = undefined;\n        }\n    }\n    /**\n     * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n     *\n     * @private\n     */\n    _emitSummary() {\n        const summary = this.getSummary();\n        if (summary.events > 0) {\n            this.dispatchEvent(new CustomEvent('data', {\n                detail: summary\n            }));\n        }\n    }\n    /**\n     * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n     * it will not count for this time period\n     */\n    getSummary() {\n        // We might want to adjust for the number of expected events\n        // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n        // Then this fires - looks like no latency!!\n        const latency = {\n            events: this.latencyData.events,\n            minMs: this.latencyData.minMs,\n            maxMs: this.latencyData.maxMs,\n            avgMs: this.latencyData.events > 0\n                ? this.latencyData.totalMs / this.latencyData.events\n                : Number.POSITIVE_INFINITY,\n            lengthMs: this.getDeltaMS(this.latencyData.startTime)\n        };\n        this.latencyData = this.initLatencyData(); // Clear\n        log.trace('Summary: %O', latency);\n        return latency;\n    }\n    /**\n     * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n     * it will simply report on event loop latency.\n     */\n    checkLatency() {\n        // Randomness is needed to avoid alignment by accident to regular things in the event loop\n        const randomness = (Math.random() * this.latencyCheckMultiply) - this.latencyCheckSubtract;\n        // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n        const localData = {\n            deltaOffset: Math.ceil(this.latencyCheckIntervalMs + randomness),\n            startTime: this.now()\n        };\n        const cb = () => {\n            // We are already stopped, ignore this datapoint\n            if (this.checkLatencyID == null) {\n                return;\n            }\n            const deltaMS = this.getDeltaMS(localData.startTime) - localData.deltaOffset;\n            this.checkLatency(); // Start again ASAP\n            // Add the data point. If this gets complex, refactor it\n            this.latencyData.events++;\n            this.latencyData.minMs = Math.min(this.latencyData.minMs, deltaMS);\n            this.latencyData.maxMs = Math.max(this.latencyData.maxMs, deltaMS);\n            this.latencyData.totalMs += deltaMS;\n            log.trace('MS: %s Data: %O', deltaMS, this.latencyData);\n        };\n        log.trace('localData: %O', localData);\n        this.checkLatencyID = setTimeout(() => {\n            // This gets rid of including event loop\n            if (this.asyncTestFn != null) {\n                // Clear timing related things\n                localData.deltaOffset = 0;\n                localData.startTime = this.now();\n                this.asyncTestFn(cb);\n            }\n            else {\n                // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n                // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n                localData.deltaOffset -= 1;\n                // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n                // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n                cb();\n            }\n        }, localData.deltaOffset);\n        if (typeof this.checkLatencyID.unref === 'function') {\n            this.checkLatencyID.unref(); // Doesn't block exit\n        }\n    }\n    initLatencyData() {\n        return {\n            startTime: this.now(),\n            minMs: Number.POSITIVE_INFINITY,\n            maxMs: Number.NEGATIVE_INFINITY,\n            events: 0,\n            totalMs: 0\n        };\n    }\n}\nfunction isBrowser() {\n    return typeof globalThis.window !== 'undefined';\n}\n//# sourceMappingURL=latency-monitor.js.map","export const OPEN = 'OPEN';\nexport const CLOSING = 'CLOSING';\nexport const CLOSED = 'CLOSED';\n//# sourceMappingURL=status.js.map","/**\n * Calls the passed map function on every entry of the passed iterable iterator\n */\nexport function mapIterable(iter, map) {\n    const iterator = {\n        [Symbol.iterator]: () => {\n            return iterator;\n        },\n        next: () => {\n            const next = iter.next();\n            const val = next.value;\n            if (next.done === true || val == null) {\n                const result = {\n                    done: true,\n                    value: undefined\n                };\n                return result;\n            }\n            return {\n                done: false,\n                value: map(val)\n            };\n        }\n    };\n    return iterator;\n}\n//# sourceMappingURL=util.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as map keys because map keys are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerMap } from '@libp2p/peer-collections'\n *\n * const map = peerMap<string>()\n * map.set(peerId, 'value')\n * ```\n */\nexport class PeerMap {\n    constructor(map) {\n        this.map = new Map();\n        if (map != null) {\n            for (const [key, value] of map.entries()) {\n                this.map.set(key.toString(), value);\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    clear() {\n        this.map.clear();\n    }\n    delete(peer) {\n        this.map.delete(peer.toString());\n    }\n    entries() {\n        return mapIterable(this.map.entries(), (val) => {\n            return [peerIdFromString(val[0]), val[1]];\n        });\n    }\n    forEach(fn) {\n        this.map.forEach((value, key) => {\n            fn(value, peerIdFromString(key), this);\n        });\n    }\n    get(peer) {\n        return this.map.get(peer.toString());\n    }\n    has(peer) {\n        return this.map.has(peer.toString());\n    }\n    set(peer, value) {\n        this.map.set(peer.toString(), value);\n    }\n    keys() {\n        return mapIterable(this.map.keys(), (val) => {\n            return peerIdFromString(val);\n        });\n    }\n    values() {\n        return this.map.values();\n    }\n    get size() {\n        return this.map.size;\n    }\n}\n//# sourceMappingURL=map.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { mapIterable } from './util.js';\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```JavaScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nexport class PeerSet {\n    constructor(set) {\n        this.set = new Set();\n        if (set != null) {\n            for (const key of set) {\n                this.set.add(key.toString());\n            }\n        }\n    }\n    get size() {\n        return this.set.size;\n    }\n    [Symbol.iterator]() {\n        return this.values();\n    }\n    add(peer) {\n        this.set.add(peer.toString());\n    }\n    clear() {\n        this.set.clear();\n    }\n    delete(peer) {\n        this.set.delete(peer.toString());\n    }\n    entries() {\n        return mapIterable(this.set.entries(), (val) => {\n            const peerId = peerIdFromString(val[0]);\n            return [peerId, peerId];\n        });\n    }\n    forEach(predicate) {\n        this.set.forEach((str) => {\n            const id = peerIdFromString(str);\n            predicate(id, id, this);\n        });\n    }\n    has(peer) {\n        return this.set.has(peer.toString());\n    }\n    values() {\n        return mapIterable(this.set.values(), (val) => {\n            return peerIdFromString(val);\n        });\n    }\n    intersection(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            if (this.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    difference(other) {\n        const output = new PeerSet();\n        for (const peerId of this) {\n            if (!other.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    union(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            output.add(peerId);\n        }\n        for (const peerId of this) {\n            output.add(peerId);\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=set.js.map","export const KEEP_ALIVE = 'keep-alive';\n//# sourceMappingURL=tags.js.map","import { peerIdFromString } from '@libp2p/peer-id';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr\n */\nexport function getPeerAddress(peer) {\n    if (isPeerId(peer)) {\n        return {\n            peerId: peer\n        };\n    }\n    if (isMultiaddr(peer)) {\n        const peerId = peer.getPeerId();\n        return {\n            multiaddr: peer,\n            peerId: peerId == null ? undefined : peerIdFromString(peerId)\n        };\n    }\n    throw errCode(new Error(`${peer} is not a PeerId or a Multiaddr`), // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    codes.ERR_INVALID_MULTIADDR);\n}\n//# sourceMappingURL=get-peer.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport mergeOptions from 'merge-options';\nimport { LatencyMonitor } from './latency-monitor.js';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { codes } from '../errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nimport { setMaxListeners } from 'events';\nimport * as STATUS from '@libp2p/interface-connection/status';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { PeerMap } from '@libp2p/peer-collections';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { KEEP_ALIVE } from '@libp2p/interface-peer-store/tags';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { getPeerAddress } from '../get-peer.js';\nconst log = logger('libp2p:connection-manager');\nconst defaultOptions = {\n    maxConnections: Infinity,\n    minConnections: 0,\n    maxEventLoopDelay: Infinity,\n    pollInterval: 2000,\n    autoDialInterval: 10000,\n    inboundConnectionThreshold: 5,\n    maxIncomingPendingConnections: 10\n};\nconst STARTUP_RECONNECT_TIMEOUT = 60000;\n/**\n * Responsible for managing known connections.\n */\nexport class DefaultConnectionManager extends EventEmitter {\n    constructor(components, init) {\n        super();\n        this.opts = mergeOptions.call({ ignoreUndefined: true }, defaultOptions, init);\n        if (this.opts.maxConnections < this.opts.minConnections) {\n            throw errCode(new Error('Connection Manager maxConnections must be greater than minConnections'), codes.ERR_INVALID_PARAMETERS);\n        }\n        log('options: %o', this.opts);\n        this.components = components;\n        /**\n         * Map of connections per peer\n         */\n        this.connections = new Map();\n        this.started = false;\n        if (init.maxEventLoopDelay != null && init.maxEventLoopDelay > 0 && init.maxEventLoopDelay !== Infinity) {\n            this.latencyMonitor = new LatencyMonitor({\n                latencyCheckIntervalMs: init.pollInterval,\n                dataEmitIntervalMs: init.pollInterval\n            });\n        }\n        try {\n            // This emitter gets listened to a lot\n            setMaxListeners?.(Infinity, this);\n        }\n        catch { }\n        this.onConnect = this.onConnect.bind(this);\n        this.onDisconnect = this.onDisconnect.bind(this);\n        this.startupReconnectTimeout = init.startupReconnectTimeout ?? STARTUP_RECONNECT_TIMEOUT;\n        this.dialTimeout = init.dialTimeout ?? 30000;\n        this.allow = (init.allow ?? []).map(ma => multiaddr(ma));\n        this.deny = (init.deny ?? []).map(ma => multiaddr(ma));\n        this.inboundConnectionRateLimiter = new RateLimiterMemory({\n            points: this.opts.inboundConnectionThreshold,\n            duration: 1\n        });\n        this.incomingPendingConnections = 0;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Starts the Connection Manager. If Metrics are not enabled on libp2p\n     * only event loop and connection limits will be monitored.\n     */\n    async start() {\n        // track inbound/outbound connections\n        this.components.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n            calculate: () => {\n                const metric = {\n                    inbound: 0,\n                    outbound: 0\n                };\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        if (conn.stat.direction === 'inbound') {\n                            metric.inbound++;\n                        }\n                        else {\n                            metric.outbound++;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track total number of streams per protocol\n        this.components.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n            label: 'protocol',\n            calculate: () => {\n                const metric = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        for (const stream of conn.streams) {\n                            const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n                            metric[key] = (metric[key] ?? 0) + 1;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track 90th percentile of streams per protocol\n        this.components.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n            label: 'protocol',\n            calculate: () => {\n                const allStreams = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        const streams = {};\n                        for (const stream of conn.streams) {\n                            const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n                            streams[key] = (streams[key] ?? 0) + 1;\n                        }\n                        for (const [protocol, count] of Object.entries(streams)) {\n                            allStreams[protocol] = allStreams[protocol] ?? [];\n                            allStreams[protocol].push(count);\n                        }\n                    }\n                }\n                const metric = {};\n                for (let [protocol, counts] of Object.entries(allStreams)) {\n                    counts = counts.sort((a, b) => a - b);\n                    const index = Math.floor(counts.length * 0.9);\n                    metric[protocol] = counts[index];\n                }\n                return metric;\n            }\n        });\n        // latency monitor\n        this.latencyMonitor?.start();\n        this._onLatencyMeasure = this._onLatencyMeasure.bind(this);\n        this.latencyMonitor?.addEventListener('data', this._onLatencyMeasure);\n        this.started = true;\n        log('started');\n    }\n    async afterStart() {\n        this.components.upgrader.addEventListener('connection', this.onConnect);\n        this.components.upgrader.addEventListener('connectionEnd', this.onDisconnect);\n        // re-connect to any peers with the KEEP_ALIVE tag\n        void Promise.resolve()\n            .then(async () => {\n            const keepAlivePeers = [];\n            for (const peer of await this.components.peerStore.all()) {\n                const tags = await this.components.peerStore.getTags(peer.id);\n                const hasKeepAlive = tags.filter(tag => tag.name === KEEP_ALIVE).length > 0;\n                if (hasKeepAlive) {\n                    keepAlivePeers.push(peer.id);\n                }\n            }\n            this.connectOnStartupController?.clear();\n            this.connectOnStartupController = new TimeoutController(this.startupReconnectTimeout);\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, this.connectOnStartupController.signal);\n            }\n            catch { }\n            await Promise.all(keepAlivePeers.map(async (peer) => {\n                await this.openConnection(peer, {\n                    signal: this.connectOnStartupController?.signal\n                })\n                    .catch(err => {\n                    log.error(err);\n                });\n            }));\n        })\n            .catch(err => {\n            log.error(err);\n        })\n            .finally(() => {\n            this.connectOnStartupController?.clear();\n        });\n    }\n    async beforeStop() {\n        // if we are still dialing KEEP_ALIVE peers, abort those dials\n        this.connectOnStartupController?.abort();\n        this.components.upgrader.removeEventListener('connection', this.onConnect);\n        this.components.upgrader.removeEventListener('connectionEnd', this.onDisconnect);\n    }\n    /**\n     * Stops the Connection Manager\n     */\n    async stop() {\n        this.latencyMonitor?.removeEventListener('data', this._onLatencyMeasure);\n        this.latencyMonitor?.stop();\n        this.started = false;\n        await this._close();\n        log('stopped');\n    }\n    /**\n     * Cleans up the connections\n     */\n    async _close() {\n        // Close all connections we're tracking\n        const tasks = [];\n        for (const connectionList of this.connections.values()) {\n            for (const connection of connectionList) {\n                tasks.push((async () => {\n                    try {\n                        await connection.close();\n                    }\n                    catch (err) {\n                        log.error(err);\n                    }\n                })());\n            }\n        }\n        log('closing %d connections', tasks.length);\n        await Promise.all(tasks);\n        this.connections.clear();\n    }\n    onConnect(evt) {\n        void this._onConnect(evt).catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Tracks the incoming connection and check the connection limit\n     */\n    async _onConnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            await connection.close();\n            return;\n        }\n        const peerId = connection.remotePeer;\n        const peerIdStr = peerId.toString();\n        const storedConns = this.connections.get(peerIdStr);\n        if (storedConns != null) {\n            storedConns.push(connection);\n        }\n        else {\n            this.connections.set(peerIdStr, [connection]);\n        }\n        if (peerId.publicKey != null) {\n            await this.components.peerStore.keyBook.set(peerId, peerId.publicKey);\n        }\n        const numConnections = this.getConnections().length;\n        const toPrune = numConnections - this.opts.maxConnections;\n        await this._checkMaxLimit('maxConnections', numConnections, toPrune);\n        this.dispatchEvent(new CustomEvent('peer:connect', { detail: connection }));\n    }\n    /**\n     * Removes the connection from tracking\n     */\n    onDisconnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            return;\n        }\n        const peerId = connection.remotePeer.toString();\n        let storedConn = this.connections.get(peerId);\n        if (storedConn != null && storedConn.length > 1) {\n            storedConn = storedConn.filter((conn) => conn.id !== connection.id);\n            this.connections.set(peerId, storedConn);\n        }\n        else if (storedConn != null) {\n            this.connections.delete(peerId);\n            this.dispatchEvent(new CustomEvent('peer:disconnect', { detail: connection }));\n        }\n    }\n    getConnections(peerId) {\n        if (peerId != null) {\n            return this.connections.get(peerId.toString()) ?? [];\n        }\n        let conns = [];\n        for (const c of this.connections.values()) {\n            conns = conns.concat(c);\n        }\n        return conns;\n    }\n    async openConnection(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddr } = getPeerAddress(peerIdOrMultiaddr);\n        if (peerId == null && multiaddr == null) {\n            throw errCode(new TypeError('Can only open connections to PeerIds or Multiaddrs'), codes.ERR_INVALID_PARAMETERS);\n        }\n        if (peerId != null) {\n            log('dial to', peerId);\n            const existingConnections = this.getConnections(peerId);\n            if (existingConnections.length > 0) {\n                log('had an existing connection to %p', peerId);\n                return existingConnections[0];\n            }\n        }\n        let timeoutController;\n        if (options?.signal == null) {\n            timeoutController = new TimeoutController(this.dialTimeout);\n            options.signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            const connection = await this.components.dialer.dial(peerIdOrMultiaddr, options);\n            let peerConnections = this.connections.get(connection.remotePeer.toString());\n            if (peerConnections == null) {\n                peerConnections = [];\n                this.connections.set(connection.remotePeer.toString(), peerConnections);\n            }\n            // we get notified of connections via the Upgrader emitting \"connection\"\n            // events, double check we aren't already tracking this connection before\n            // storing it\n            let trackedConnection = false;\n            for (const conn of peerConnections) {\n                if (conn.id === connection.id) {\n                    trackedConnection = true;\n                }\n            }\n            if (!trackedConnection) {\n                peerConnections.push(connection);\n            }\n            return connection;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n        }\n    }\n    async closeConnections(peerId) {\n        const connections = this.connections.get(peerId.toString()) ?? [];\n        await Promise.all(connections.map(async (connection) => {\n            return await connection.close();\n        }));\n    }\n    /**\n     * Get all open connections with a peer\n     */\n    getAll(peerId) {\n        if (!isPeerId(peerId)) {\n            throw errCode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const id = peerId.toString();\n        const connections = this.connections.get(id);\n        // Return all open connections\n        if (connections != null) {\n            return connections.filter(connection => connection.stat.status === STATUS.OPEN);\n        }\n        return [];\n    }\n    /**\n     * If the event loop is slow, maybe close a connection\n     */\n    _onLatencyMeasure(evt) {\n        const { detail: summary } = evt;\n        this._checkMaxLimit('maxEventLoopDelay', summary.avgMs, 1)\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * If the `value` of `name` has exceeded its limit, maybe close a connection\n     */\n    async _checkMaxLimit(name, value, toPrune = 1) {\n        const limit = this.opts[name];\n        if (limit == null) {\n            log.trace('limit %s was not set so it cannot be applied', name);\n            return;\n        }\n        log.trace('checking limit of %s. current value: %d of %d', name, value, limit);\n        if (value > limit) {\n            log('%s: limit exceeded: %p, %d/%d, pruning %d connection(s)', this.components.peerId, name, value, limit, toPrune);\n            await this._pruneConnections(toPrune);\n        }\n    }\n    /**\n     * If we have more connections than our maximum, select some excess connections\n     * to prune based on peer value\n     */\n    async _pruneConnections(toPrune) {\n        const connections = this.getConnections();\n        const peerValues = new PeerMap();\n        // work out peer values\n        for (const connection of connections) {\n            const remotePeer = connection.remotePeer;\n            if (peerValues.has(remotePeer)) {\n                continue;\n            }\n            const tags = await this.components.peerStore.getTags(remotePeer);\n            // sum all tag values\n            peerValues.set(remotePeer, tags.reduce((acc, curr) => {\n                return acc + curr.value;\n            }, 0));\n        }\n        // sort by value, lowest to highest\n        const sortedConnections = connections.sort((a, b) => {\n            const peerAValue = peerValues.get(a.remotePeer) ?? 0;\n            const peerBValue = peerValues.get(b.remotePeer) ?? 0;\n            if (peerAValue > peerBValue) {\n                return 1;\n            }\n            if (peerAValue < peerBValue) {\n                return -1;\n            }\n            // if the peers have an equal tag value then we want to close short-lived connections first\n            const connectionALifespan = a.stat.timeline.open;\n            const connectionBLifespan = b.stat.timeline.open;\n            if (connectionALifespan < connectionBLifespan) {\n                return 1;\n            }\n            if (connectionALifespan > connectionBLifespan) {\n                return -1;\n            }\n            return 0;\n        });\n        // close some connections\n        const toClose = [];\n        for (const connection of sortedConnections) {\n            log('too many connections open - closing a connection to %p', connection.remotePeer);\n            toClose.push(connection);\n            if (toClose.length === toPrune) {\n                break;\n            }\n        }\n        // close connections\n        await Promise.all(toClose.map(async (connection) => {\n            try {\n                await connection.close();\n            }\n            catch (err) {\n                log.error(err);\n            }\n            // TODO: should not need to invoke this manually\n            this.onDisconnect(new CustomEvent('connectionEnd', {\n                detail: connection\n            }));\n        }));\n    }\n    async acceptIncomingConnection(maConn) {\n        // check deny list\n        const denyConnection = this.deny.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (denyConnection) {\n            log('connection from %s refused - connection remote address was in deny list', maConn.remoteAddr);\n            return false;\n        }\n        // check allow list\n        const allowConnection = this.allow.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (allowConnection) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        // check pending connections\n        if (this.incomingPendingConnections === this.opts.maxIncomingPendingConnections) {\n            log('connection from %s refused - incomingPendingConnections exceeded by peer %s', maConn.remoteAddr);\n            return false;\n        }\n        if (maConn.remoteAddr.isThinWaistAddress()) {\n            const host = maConn.remoteAddr.nodeAddress().address;\n            try {\n                await this.inboundConnectionRateLimiter.consume(host, 1);\n            }\n            catch {\n                log('connection from %s refused - inboundConnectionThreshold exceeded by host %s', host, maConn.remoteAddr);\n                return false;\n            }\n        }\n        if (this.getConnections().length < this.opts.maxConnections) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        log('connection from %s refused - maxConnections exceeded', maConn.remoteAddr);\n        return false;\n    }\n    afterUpgradeInbound() {\n        this.incomingPendingConnections--;\n    }\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport mergeOptions from 'merge-options';\n// @ts-expect-error retimer does not have types\nimport retimer from 'retimer';\nimport all from 'it-all';\nimport { pipe } from 'it-pipe';\nimport filter from 'it-filter';\nimport sort from 'it-sort';\nconst log = logger('libp2p:connection-manager:auto-dialler');\nconst defaultOptions = {\n    enabled: true,\n    minConnections: 0,\n    autoDialInterval: 10000\n};\nexport class AutoDialler {\n    /**\n     * Proactively tries to connect to known peers stored in the PeerStore.\n     * It will keep the number of connections below the upper limit and sort\n     * the peers to connect based on wether we know their keys and protocols.\n     */\n    constructor(components, init) {\n        this.components = components;\n        this.options = mergeOptions.call({ ignoreUndefined: true }, defaultOptions, init);\n        this.running = false;\n        this._autoDial = this._autoDial.bind(this);\n        log('options: %j', this.options);\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Starts the auto dialer\n     */\n    async start() {\n        if (!this.options.enabled) {\n            log('not enabled');\n            return;\n        }\n        this.running = true;\n        void this._autoDial().catch(err => {\n            log.error('could start autodial', err);\n        });\n        log('started');\n    }\n    /**\n     * Stops the auto dialler\n     */\n    async stop() {\n        if (!this.options.enabled) {\n            log('not enabled');\n            return;\n        }\n        this.running = false;\n        if (this.autoDialTimeout != null) {\n            this.autoDialTimeout.clear();\n        }\n        log('stopped');\n    }\n    async _autoDial() {\n        if (this.autoDialTimeout != null) {\n            this.autoDialTimeout.clear();\n        }\n        const minConnections = this.options.minConnections;\n        // Already has enough connections\n        if (this.components.connectionManager.getConnections().length >= minConnections) {\n            this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n            return;\n        }\n        // Sort peers on whether we know protocols or public keys for them\n        const allPeers = await this.components.peerStore.all();\n        const peers = await pipe(\n        // shuffle the peers\n        allPeers.sort(() => Math.random() > 0.5 ? 1 : -1), (source) => filter(source, (peer) => !peer.id.equals(this.components.peerId)), (source) => sort(source, (a, b) => {\n            if (b.protocols.length > a.protocols.length) {\n                return 1;\n            }\n            else if (b.id.publicKey != null && a.id.publicKey == null) {\n                return 1;\n            }\n            return -1;\n        }), async (source) => await all(source));\n        for (let i = 0; this.running && i < peers.length && this.components.connectionManager.getConnections().length < minConnections; i++) {\n            // Connection Manager was stopped during async dial\n            if (!this.running) {\n                return;\n            }\n            const peer = peers[i];\n            if (this.components.connectionManager.getConnections(peer.id).length === 0) {\n                log('connecting to a peerStore stored peer %p', peer.id);\n                try {\n                    await this.components.connectionManager.openConnection(peer.id);\n                }\n                catch (err) {\n                    log.error('could not connect to peerStore stored peer', err);\n                }\n            }\n        }\n        // Connection Manager was stopped\n        if (!this.running) {\n            return;\n        }\n        this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n    }\n}\n//# sourceMappingURL=auto-dialler.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var CircuitRelay;\n(function (CircuitRelay) {\n    let Status;\n    (function (Status) {\n        Status[\"SUCCESS\"] = \"SUCCESS\";\n        Status[\"HOP_SRC_ADDR_TOO_LONG\"] = \"HOP_SRC_ADDR_TOO_LONG\";\n        Status[\"HOP_DST_ADDR_TOO_LONG\"] = \"HOP_DST_ADDR_TOO_LONG\";\n        Status[\"HOP_SRC_MULTIADDR_INVALID\"] = \"HOP_SRC_MULTIADDR_INVALID\";\n        Status[\"HOP_DST_MULTIADDR_INVALID\"] = \"HOP_DST_MULTIADDR_INVALID\";\n        Status[\"HOP_NO_CONN_TO_DST\"] = \"HOP_NO_CONN_TO_DST\";\n        Status[\"HOP_CANT_DIAL_DST\"] = \"HOP_CANT_DIAL_DST\";\n        Status[\"HOP_CANT_OPEN_DST_STREAM\"] = \"HOP_CANT_OPEN_DST_STREAM\";\n        Status[\"HOP_CANT_SPEAK_RELAY\"] = \"HOP_CANT_SPEAK_RELAY\";\n        Status[\"HOP_CANT_RELAY_TO_SELF\"] = \"HOP_CANT_RELAY_TO_SELF\";\n        Status[\"STOP_SRC_ADDR_TOO_LONG\"] = \"STOP_SRC_ADDR_TOO_LONG\";\n        Status[\"STOP_DST_ADDR_TOO_LONG\"] = \"STOP_DST_ADDR_TOO_LONG\";\n        Status[\"STOP_SRC_MULTIADDR_INVALID\"] = \"STOP_SRC_MULTIADDR_INVALID\";\n        Status[\"STOP_DST_MULTIADDR_INVALID\"] = \"STOP_DST_MULTIADDR_INVALID\";\n        Status[\"STOP_RELAY_REFUSED\"] = \"STOP_RELAY_REFUSED\";\n        Status[\"MALFORMED_MESSAGE\"] = \"MALFORMED_MESSAGE\";\n    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n    let __StatusValues;\n    (function (__StatusValues) {\n        __StatusValues[__StatusValues[\"SUCCESS\"] = 100] = \"SUCCESS\";\n        __StatusValues[__StatusValues[\"HOP_SRC_ADDR_TOO_LONG\"] = 220] = \"HOP_SRC_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"HOP_DST_ADDR_TOO_LONG\"] = 221] = \"HOP_DST_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"HOP_SRC_MULTIADDR_INVALID\"] = 250] = \"HOP_SRC_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"HOP_DST_MULTIADDR_INVALID\"] = 251] = \"HOP_DST_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"HOP_NO_CONN_TO_DST\"] = 260] = \"HOP_NO_CONN_TO_DST\";\n        __StatusValues[__StatusValues[\"HOP_CANT_DIAL_DST\"] = 261] = \"HOP_CANT_DIAL_DST\";\n        __StatusValues[__StatusValues[\"HOP_CANT_OPEN_DST_STREAM\"] = 262] = \"HOP_CANT_OPEN_DST_STREAM\";\n        __StatusValues[__StatusValues[\"HOP_CANT_SPEAK_RELAY\"] = 270] = \"HOP_CANT_SPEAK_RELAY\";\n        __StatusValues[__StatusValues[\"HOP_CANT_RELAY_TO_SELF\"] = 280] = \"HOP_CANT_RELAY_TO_SELF\";\n        __StatusValues[__StatusValues[\"STOP_SRC_ADDR_TOO_LONG\"] = 320] = \"STOP_SRC_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"STOP_DST_ADDR_TOO_LONG\"] = 321] = \"STOP_DST_ADDR_TOO_LONG\";\n        __StatusValues[__StatusValues[\"STOP_SRC_MULTIADDR_INVALID\"] = 350] = \"STOP_SRC_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"STOP_DST_MULTIADDR_INVALID\"] = 351] = \"STOP_DST_MULTIADDR_INVALID\";\n        __StatusValues[__StatusValues[\"STOP_RELAY_REFUSED\"] = 390] = \"STOP_RELAY_REFUSED\";\n        __StatusValues[__StatusValues[\"MALFORMED_MESSAGE\"] = 400] = \"MALFORMED_MESSAGE\";\n    })(__StatusValues || (__StatusValues = {}));\n    (function (Status) {\n        Status.codec = () => {\n            return enumeration(__StatusValues);\n        };\n    })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n    let Type;\n    (function (Type) {\n        Type[\"HOP\"] = \"HOP\";\n        Type[\"STOP\"] = \"STOP\";\n        Type[\"STATUS\"] = \"STATUS\";\n        Type[\"CAN_HOP\"] = \"CAN_HOP\";\n    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"HOP\"] = 1] = \"HOP\";\n        __TypeValues[__TypeValues[\"STOP\"] = 2] = \"STOP\";\n        __TypeValues[__TypeValues[\"STATUS\"] = 3] = \"STATUS\";\n        __TypeValues[__TypeValues[\"CAN_HOP\"] = 4] = \"CAN_HOP\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return enumeration(__TypeValues);\n        };\n    })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n    let Peer;\n    (function (Peer) {\n        let _codec;\n        Peer.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (opts.writeDefaults === true || (obj.id != null && obj.id.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.id);\n                    }\n                    if (obj.addrs != null) {\n                        for (const value of obj.addrs) {\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        id: new Uint8Array(0),\n                        addrs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.id = reader.bytes();\n                                break;\n                            case 2:\n                                obj.addrs.push(reader.bytes());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer.encode = (obj) => {\n            return encodeMessage(obj, Peer.codec());\n        };\n        Peer.decode = (buf) => {\n            return decodeMessage(buf, Peer.codec());\n        };\n    })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));\n    let _codec;\n    CircuitRelay.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    CircuitRelay.Type.codec().encode(obj.type, w);\n                }\n                if (obj.srcPeer != null) {\n                    w.uint32(18);\n                    CircuitRelay.Peer.codec().encode(obj.srcPeer, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (obj.dstPeer != null) {\n                    w.uint32(26);\n                    CircuitRelay.Peer.codec().encode(obj.dstPeer, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (obj.code != null) {\n                    w.uint32(32);\n                    CircuitRelay.Status.codec().encode(obj.code, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = CircuitRelay.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            obj.code = CircuitRelay.Status.codec().decode(reader);\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    CircuitRelay.encode = (obj) => {\n        return encodeMessage(obj, CircuitRelay.codec());\n    };\n    CircuitRelay.decode = (buf) => {\n        return decodeMessage(buf, CircuitRelay.codec());\n    };\n})(CircuitRelay || (CircuitRelay = {}));\n//# sourceMappingURL=index.js.map","import { abortableSource } from 'abortable-iterator';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:stream:converter');\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n */\nexport function streamToMaConnection(props, options = {}) {\n    const { stream, remoteAddr } = props;\n    const { sink, source } = stream;\n    const mapSource = (async function* () {\n        for await (const list of source) {\n            if (list instanceof Uint8Array) {\n                yield list;\n            }\n            else {\n                yield* list;\n            }\n        }\n    }());\n    const maConn = {\n        async sink(source) {\n            if (options.signal != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await sink(source);\n                await close();\n            }\n            catch (err) {\n                // If aborted we can safely ignore\n                if (err.type !== 'aborted') {\n                    // If the source errored the socket will already have been destroyed by\n                    // toIterable.duplex(). If the socket errored it will already be\n                    // destroyed. There's nothing to do here except log the error & return.\n                    log(err);\n                }\n            }\n        },\n        source: (options.signal != null) ? abortableSource(mapSource, options.signal) : mapSource,\n        remoteAddr,\n        timeline: { open: Date.now(), close: undefined },\n        async close() {\n            await sink(async function* () {\n                yield new Uint8Array(0);\n            }());\n            await close();\n        }\n    };\n    async function close() {\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n        await Promise.resolve();\n    }\n    return maConn;\n}\n//# sourceMappingURL=stream-to-ma-conn.js.map","export const RELAY_CODEC = '/libp2p/circuit/relay/0.1.0';\n//# sourceMappingURL=multicodec.js.map","import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { multiaddr } from '@multiformats/multiaddr';\nexport function createListener(options) {\n    const listeningAddrs = new Map();\n    /**\n     * Add swarm handler and listen for incoming connections\n     */\n    async function listen(addr) {\n        const addrString = addr.toString().split('/p2p-circuit').find(a => a !== '');\n        const ma = multiaddr(addrString);\n        const relayPeerStr = ma.getPeerId();\n        if (relayPeerStr == null) {\n            throw new Error('Could not determine relay peer from multiaddr');\n        }\n        const relayPeerId = peerIdFromString(relayPeerStr);\n        await options.peerStore.addressBook.add(relayPeerId, [ma]);\n        const relayConn = await options.connectionManager.openConnection(relayPeerId);\n        const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');\n        listeningAddrs.set(relayConn.remotePeer.toString(), relayedAddr);\n        listener.dispatchEvent(new CustomEvent('listening'));\n    }\n    /**\n     * Get fixed up multiaddrs\n     *\n     * NOTE: This method will grab the peers multiaddrs and expand them such that:\n     *\n     * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n     * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n     * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n     * `QmPeer` is this peers id\n     * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n     * addr, such when dialing over a relay with this address, it will create the circuit using\n     * the encapsulated transport address. This is useful when for example, a peer should only\n     * be dialed over TCP rather than any other transport\n     *\n     * @returns {Multiaddr[]}\n     */\n    function getAddrs() {\n        const addrs = [];\n        for (const addr of listeningAddrs.values()) {\n            addrs.push(addr);\n        }\n        return addrs;\n    }\n    const listener = Object.assign(new EventEmitter(), {\n        close: async () => await Promise.resolve(),\n        listen,\n        getAddrs\n    });\n    // Remove listeningAddrs when a peer disconnects\n    options.connectionManager.addEventListener('peer:disconnect', (evt) => {\n        const { detail: connection } = evt;\n        const deleted = listeningAddrs.delete(connection.remotePeer.toString());\n        if (deleted) {\n            // Announce listen addresses change\n            listener.dispatchEvent(new CustomEvent('close'));\n        }\n    });\n    return listener;\n}\n//# sourceMappingURL=listener.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay } from '../pb/index.js';\n/**\n * Write a response\n */\nfunction writeResponse(streamHandler, status) {\n    streamHandler.write({\n        type: CircuitRelay.Type.STATUS,\n        code: status\n    });\n}\n/**\n * Validate incomming HOP/STOP message\n */\nexport function validateAddrs(msg, streamHandler) {\n    try {\n        if (msg.dstPeer?.addrs != null) {\n            msg.dstPeer.addrs.forEach((addr) => {\n                return multiaddr(addr);\n            });\n        }\n    }\n    catch (err) {\n        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n            ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID\n            : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);\n        throw err;\n    }\n    try {\n        if (msg.srcPeer?.addrs != null) {\n            msg.srcPeer.addrs.forEach((addr) => {\n                return multiaddr(addr);\n            });\n        }\n    }\n    catch (err) {\n        writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n            ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID\n            : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);\n        throw err;\n    }\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport * as lp from 'it-length-prefixed';\nimport { handshake } from 'it-handshake';\nimport { CircuitRelay } from '../pb/index.js';\nconst log = logger('libp2p:circuit:stream-handler');\nexport class StreamHandler {\n    constructor(options) {\n        const { stream, maxLength = 4096 } = options;\n        this.stream = stream;\n        this.shake = handshake(this.stream);\n        this.decoder = lp.decode.fromReader(this.shake.reader, { maxDataLength: maxLength });\n    }\n    /**\n     * Read and decode message\n     */\n    async read() {\n        // @ts-expect-error FIXME is a source, needs to be a generator\n        const msg = await this.decoder.next();\n        if (msg.value != null) {\n            const value = CircuitRelay.decode(msg.value);\n            log('read message type', value.type);\n            return value;\n        }\n        log('read received no value, closing stream');\n        // End the stream, we didn't get data\n        this.close();\n    }\n    /**\n     * Encode and write array of buffers\n     */\n    write(msg) {\n        log('write message type %s', msg.type);\n        this.shake.write(lp.encode.single(CircuitRelay.encode(msg)));\n    }\n    /**\n     * Return the handshake rest stream and invalidate handler\n     */\n    rest() {\n        this.shake.rest();\n        return this.shake.stream;\n    }\n    /**\n     * @param {CircuitRelay} msg - An unencoded CircuitRelay protobuf message\n     */\n    end(msg) {\n        this.write(msg);\n        this.close();\n    }\n    /**\n     * Close the stream\n     */\n    close() {\n        log('closing the stream');\n        void this.rest().sink([]).catch(err => {\n            log.error(err);\n        });\n    }\n}\n//# sourceMappingURL=stream-handler.js.map","import { logger } from '@libp2p/logger';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { validateAddrs } from './utils.js';\nconst log = logger('libp2p:circuit:stop');\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop(options) {\n    const { connection, request, streamHandler } = options;\n    // Validate the STOP request has the required input\n    try {\n        validateAddrs(request, streamHandler);\n    }\n    catch (err) {\n        log.error('invalid stop request via peer %p %o', connection.remotePeer, err);\n        return;\n    }\n    // The request is valid\n    log('stop request is valid');\n    streamHandler.write({\n        type: CircuitPB.Type.STATUS,\n        code: CircuitPB.Status.SUCCESS\n    });\n    return streamHandler.rest();\n}\n/**\n * Creates a STOP request\n */\nexport async function stop(options) {\n    const { connection, request, signal } = options;\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    log('starting stop request to %p', connection.remotePeer);\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write(request);\n    const response = await streamHandler.read();\n    if (response == null) {\n        streamHandler.close();\n        return;\n    }\n    if (response.code === CircuitPB.Status.SUCCESS) {\n        log('stop request to %p was successful', connection.remotePeer);\n        return streamHandler.rest();\n    }\n    log('stop request failed with code %d', response.code);\n    streamHandler.close();\n}\n//# sourceMappingURL=stop.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { validateAddrs } from './utils.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { pipe } from 'it-pipe';\nimport { codes as Errors } from '../../errors.js';\nimport { stop } from './stop.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nconst log = logger('libp2p:circuit:hop');\nexport async function handleHop(hopRequest) {\n    const { connection, request, streamHandler, circuit, connectionManager } = hopRequest;\n    // Ensure hop is enabled\n    if (!circuit.hopEnabled()) {\n        log('HOP request received but we are not acting as a relay');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n        });\n    }\n    // Validate the HOP request has the required input\n    try {\n        validateAddrs(request, streamHandler);\n    }\n    catch (err) {\n        log.error('invalid hop request via peer %p %o', connection.remotePeer, err);\n        return;\n    }\n    if (request.dstPeer == null) {\n        log('HOP request received but we do not receive a dstPeer');\n        return;\n    }\n    // Get the connection to the destination (stop) peer\n    const destinationPeer = peerIdFromBytes(request.dstPeer.id);\n    const destinationConnections = connectionManager.getConnections(destinationPeer);\n    if (destinationConnections.length === 0 && !circuit.hopActive()) {\n        log('HOP request received but we are not connected to the destination peer');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n        });\n    }\n    // TODO: Handle being an active relay\n    if (destinationConnections.length === 0) {\n        log('did not have connection to remote peer');\n        return streamHandler.end({\n            type: CircuitPB.Type.STATUS,\n            code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n        });\n    }\n    // Handle the incoming HOP request by performing a STOP request\n    const stopRequest = {\n        type: CircuitPB.Type.STOP,\n        dstPeer: request.dstPeer,\n        srcPeer: request.srcPeer\n    };\n    let destinationStream;\n    try {\n        log('performing STOP request');\n        const result = await stop({\n            connection: destinationConnections[0],\n            request: stopRequest\n        });\n        if (result == null) {\n            throw new Error('Could not stop');\n        }\n        destinationStream = result;\n    }\n    catch (err) {\n        log.error(err);\n        return;\n    }\n    log('hop request from %p is valid', connection.remotePeer);\n    streamHandler.write({\n        type: CircuitPB.Type.STATUS,\n        code: CircuitPB.Status.SUCCESS\n    });\n    const sourceStream = streamHandler.rest();\n    log('creating related connections');\n    // Short circuit the two streams to create the relayed connection\n    return await pipe(sourceStream, destinationStream, sourceStream);\n}\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n */\nexport async function hop(options) {\n    const { connection, request, signal } = options;\n    // Create a new stream to the relay\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    // Send the HOP request\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write(request);\n    const response = await streamHandler.read();\n    if (response == null) {\n        throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED);\n    }\n    if (response.code === CircuitPB.Status.SUCCESS) {\n        log('hop request was successful');\n        return streamHandler.rest();\n    }\n    log('hop request failed with code %d, closing stream', response.code);\n    streamHandler.close();\n    throw errCode(new Error(`HOP request failed with code \"${response.code ?? 'unknown'}\"`), Errors.ERR_HOP_REQUEST_FAILED);\n}\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities\n */\nexport async function canHop(options) {\n    const { connection, signal } = options;\n    // Create a new stream to the relay\n    const stream = await connection.newStream(RELAY_CODEC, {\n        signal\n    });\n    // Send the HOP request\n    const streamHandler = new StreamHandler({ stream });\n    streamHandler.write({\n        type: CircuitPB.Type.CAN_HOP\n    });\n    const response = await streamHandler.read();\n    await streamHandler.close();\n    if (response == null || response.code !== CircuitPB.Status.SUCCESS) {\n        return false;\n    }\n    return true;\n}\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n */\nexport function handleCanHop(options) {\n    const { connection, streamHandler, circuit } = options;\n    const canHop = circuit.hopEnabled();\n    log('can hop (%s) request from %p', canHop, connection.remotePeer);\n    streamHandler.end({\n        type: CircuitPB.Type.STATUS,\n        code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    });\n}\n//# sourceMappingURL=hop.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as mafmt from '@multiformats/mafmt';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay as CircuitPB } from './pb/index.js';\nimport { codes } from '../errors.js';\nimport { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn';\nimport { RELAY_CODEC } from './multicodec.js';\nimport { createListener } from './listener.js';\nimport { handleCanHop, handleHop, hop } from './circuit/hop.js';\nimport { handleStop } from './circuit/stop.js';\nimport { StreamHandler } from './circuit/stream-handler.js';\nimport { symbol } from '@libp2p/interface-transport';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:circuit');\nexport class Circuit {\n    constructor(components, init) {\n        this._init = init;\n        this.components = components;\n        this._started = false;\n    }\n    isStarted() {\n        return this._started;\n    }\n    async start() {\n        if (this._started) {\n            return;\n        }\n        this._started = true;\n        await this.components.registrar.handle(RELAY_CODEC, (data) => {\n            void this._onProtocol(data).catch(err => {\n                log.error(err);\n            });\n        }, { ...this._init })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    async stop() {\n        await this.components.registrar.unhandle(RELAY_CODEC);\n    }\n    hopEnabled() {\n        return true;\n    }\n    hopActive() {\n        return true;\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return 'libp2p/circuit-relay-v1';\n    }\n    async _onProtocol(data) {\n        const { connection, stream } = data;\n        const controller = new TimeoutController(this._init.hop.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, controller.signal);\n        }\n        catch { }\n        try {\n            const source = abortableDuplex(stream, controller.signal);\n            const streamHandler = new StreamHandler({\n                stream: {\n                    ...stream,\n                    ...source\n                }\n            });\n            const request = await streamHandler.read();\n            if (request == null) {\n                log('request was invalid, could not read from stream');\n                streamHandler.write({\n                    type: CircuitPB.Type.STATUS,\n                    code: CircuitPB.Status.MALFORMED_MESSAGE\n                });\n                streamHandler.close();\n                return;\n            }\n            let virtualConnection;\n            switch (request.type) {\n                case CircuitPB.Type.CAN_HOP: {\n                    log('received CAN_HOP request from %p', connection.remotePeer);\n                    await handleCanHop({ circuit: this, connection, streamHandler });\n                    break;\n                }\n                case CircuitPB.Type.HOP: {\n                    log('received HOP request from %p', connection.remotePeer);\n                    await handleHop({\n                        connection,\n                        request,\n                        streamHandler,\n                        circuit: this,\n                        connectionManager: this.components.connectionManager\n                    });\n                    break;\n                }\n                case CircuitPB.Type.STOP: {\n                    log('received STOP request from %p', connection.remotePeer);\n                    virtualConnection = await handleStop({\n                        connection,\n                        request,\n                        streamHandler\n                    });\n                    break;\n                }\n                default: {\n                    log('Request of type %s not supported', request.type);\n                    streamHandler.write({\n                        type: CircuitPB.Type.STATUS,\n                        code: CircuitPB.Status.MALFORMED_MESSAGE\n                    });\n                    streamHandler.close();\n                    return;\n                }\n            }\n            if (virtualConnection != null) {\n                const remoteAddr = connection.remoteAddr\n                    .encapsulate('/p2p-circuit')\n                    .encapsulate(multiaddr(request.dstPeer?.addrs[0]));\n                const localAddr = multiaddr(request.srcPeer?.addrs[0]);\n                const maConn = streamToMaConnection({\n                    stream: virtualConnection,\n                    remoteAddr,\n                    localAddr\n                });\n                const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n                log('new %s connection %s', type, maConn.remoteAddr);\n                const conn = await this.components.upgrader.upgradeInbound(maConn);\n                log('%s connection %s upgraded', type, maConn.remoteAddr);\n                if (this.handler != null) {\n                    this.handler(conn);\n                }\n            }\n        }\n        finally {\n            controller.clear();\n        }\n    }\n    /**\n     * Dial a peer over a relay\n     */\n    async dial(ma, options = {}) {\n        // Check the multiaddr to see if it contains a relay and a destination peer\n        const addrs = ma.toString().split('/p2p-circuit');\n        const relayAddr = multiaddr(addrs[0]);\n        const destinationAddr = multiaddr(addrs[addrs.length - 1]);\n        const relayId = relayAddr.getPeerId();\n        const destinationId = destinationAddr.getPeerId();\n        if (relayId == null || destinationId == null) {\n            const errMsg = 'Circuit relay dial failed as addresses did not have peer id';\n            log.error(errMsg);\n            throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);\n        }\n        const relayPeer = peerIdFromString(relayId);\n        const destinationPeer = peerIdFromString(destinationId);\n        let disconnectOnFailure = false;\n        const relayConnections = this.components.connectionManager.getConnections(relayPeer);\n        let relayConnection = relayConnections[0];\n        if (relayConnection == null) {\n            await this.components.peerStore.addressBook.add(relayPeer, [relayAddr]);\n            relayConnection = await this.components.connectionManager.openConnection(relayPeer, options);\n            disconnectOnFailure = true;\n        }\n        try {\n            const virtualConnection = await hop({\n                ...options,\n                connection: relayConnection,\n                request: {\n                    type: CircuitPB.Type.HOP,\n                    srcPeer: {\n                        id: this.components.peerId.toBytes(),\n                        addrs: this.components.addressManager.getAddresses().map(addr => addr.bytes)\n                    },\n                    dstPeer: {\n                        id: destinationPeer.toBytes(),\n                        addrs: [multiaddr(destinationAddr).bytes]\n                    }\n                }\n            });\n            const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.components.peerId.toString()}`);\n            const maConn = streamToMaConnection({\n                stream: virtualConnection,\n                remoteAddr: ma,\n                localAddr\n            });\n            log('new outbound connection %s', maConn.remoteAddr);\n            return await this.components.upgrader.upgradeOutbound(maConn);\n        }\n        catch (err) {\n            log.error('Circuit relay dial failed', err);\n            disconnectOnFailure && await relayConnection.close();\n            throw err;\n        }\n    }\n    /**\n     * Create a listener\n     */\n    createListener(options) {\n        // Called on successful HOP and STOP requests\n        this.handler = options.handler;\n        return createListener({\n            connectionManager: this.components.connectionManager,\n            peerStore: this.components.peerStore\n        });\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]}\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter((ma) => {\n            return mafmt.Circuit.matches(ma);\n        });\n    }\n}\n//# sourceMappingURL=transport.js.map","import { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\n/**\n * Convert a namespace string into a cid\n */\nexport async function namespaceToCid(namespace) {\n    const bytes = new TextEncoder().encode(namespace);\n    const hash = await sha256.digest(bytes);\n    return CID.createV0(hash);\n}\n//# sourceMappingURL=utils.js.map","const minute = 60 * 1000;\n/**\n * Delay before HOP relay service is advertised on the network\n */\nexport const ADVERTISE_BOOT_DELAY = 15 * minute;\n/**\n * Delay Between HOP relay service advertisements on the network\n */\nexport const ADVERTISE_TTL = 30 * minute;\n/**\n * Multicodec code\n */\nexport const CIRCUIT_PROTO_CODE = 290;\n/**\n * PeerStore metadaBook key for HOP relay service\n */\nexport const HOP_METADATA_KEY = 'hop_relay';\n/**\n * PeerStore metadaBook value for HOP relay service\n */\nexport const HOP_METADATA_VALUE = 'true';\n/**\n * Relay HOP relay service namespace for discovery\n */\nexport const RELAY_RENDEZVOUS_NS = '/libp2p/relay';\n//# sourceMappingURL=constants.js.map","import isIpPrivate from 'private-ip';\n/**\n * Check if a given multiaddr has a private address.\n */\nexport function isPrivate(ma) {\n    try {\n        const { address } = ma.nodeAddress();\n        return Boolean(isIpPrivate(address));\n    }\n    catch {\n        return true;\n    }\n}\n//# sourceMappingURL=is-private.js.map","/**\n * @packageDocumentation\n *\n * Provides strategies to sort a list of multiaddrs.\n *\n * @example\n *\n * ```typescript\n * import { publicAddressesFirst } from '@libp2p/utils/address-sort'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n *\n * const addresses = [\n *   multiaddr('/ip4/127.0.0.1/tcp/9000'),\n *   multiaddr('/ip4/82.41.53.1/tcp/9000')\n * ].sort(publicAddressesFirst)\n *\n * console.info(addresses)\n * // ['/ip4/82.41.53.1/tcp/9000', '/ip4/127.0.0.1/tcp/9000']\n * ```\n */\nimport { isPrivate } from './multiaddr/is-private.js';\n/**\n * Compare function for array.sort().\n * This sort aims to move the private addresses to the end of the array.\n * In case of equality, a certified address will come first.\n */\nexport function publicAddressesFirst(a, b) {\n    const isAPrivate = isPrivate(a.multiaddr);\n    const isBPrivate = isPrivate(b.multiaddr);\n    if (isAPrivate && !isBPrivate) {\n        return 1;\n    }\n    else if (!isAPrivate && isBPrivate) {\n        return -1;\n    }\n    // Check certified?\n    if (a.isCertified && !b.isCertified) {\n        return -1;\n    }\n    else if (!a.isCertified && b.isCertified) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * A test thing\n */\nexport async function something() {\n    return Uint8Array.from([0, 1, 2]);\n}\n//# sourceMappingURL=address-sort.js.map","import { logger } from '@libp2p/logger';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { RELAY_CODEC } from './multicodec.js';\nimport { canHop } from './circuit/hop.js';\nimport { namespaceToCid } from './utils.js';\nimport { CIRCUIT_PROTO_CODE, HOP_METADATA_KEY, HOP_METADATA_VALUE, RELAY_RENDEZVOUS_NS } from './constants.js';\nimport sort from 'it-sort';\nimport all from 'it-all';\nimport { pipe } from 'it-pipe';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nconst log = logger('libp2p:auto-relay');\nconst noop = () => { };\nexport class AutoRelay {\n    constructor(components, init) {\n        this.components = components;\n        this.addressSorter = init.addressSorter ?? publicAddressesFirst;\n        this.maxListeners = init.maxListeners ?? 1;\n        this.listenRelays = new Set();\n        this.onError = init.onError ?? noop;\n        this._onProtocolChange = this._onProtocolChange.bind(this);\n        this._onPeerDisconnected = this._onPeerDisconnected.bind(this);\n        this.components.peerStore.addEventListener('change:protocols', (evt) => {\n            void this._onProtocolChange(evt).catch(err => {\n                log.error(err);\n            });\n        });\n        this.components.connectionManager.addEventListener('peer:disconnect', this._onPeerDisconnected);\n    }\n    /**\n     * Check if a peer supports the relay protocol.\n     * If the protocol is not supported, check if it was supported before and remove it as a listen relay.\n     * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if\n     * inside the threshold.\n     */\n    async _onProtocolChange(evt) {\n        const { peerId, protocols } = evt.detail;\n        const id = peerId.toString();\n        // Check if it has the protocol\n        const hasProtocol = protocols.find(protocol => protocol === RELAY_CODEC);\n        // If no protocol, check if we were keeping the peer before as a listenRelay\n        if (hasProtocol == null) {\n            if (this.listenRelays.has(id)) {\n                await this._removeListenRelay(id);\n            }\n            return;\n        }\n        if (this.listenRelays.has(id)) {\n            return;\n        }\n        // If protocol, check if can hop, store info in the metadataBook and listen on it\n        try {\n            const connections = this.components.connectionManager.getConnections(peerId);\n            if (connections.length === 0) {\n                return;\n            }\n            const connection = connections[0];\n            // Do not hop on a relayed connection\n            if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {\n                log(`relayed connection to ${id} will not be used to hop on`);\n                return;\n            }\n            const supportsHop = await canHop({ connection });\n            if (supportsHop) {\n                await this.components.peerStore.metadataBook.setValue(peerId, HOP_METADATA_KEY, uint8ArrayFromString(HOP_METADATA_VALUE));\n                await this._addListenRelay(connection, id);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    /**\n     * Peer disconnects\n     */\n    _onPeerDisconnected(evt) {\n        const connection = evt.detail;\n        const peerId = connection.remotePeer;\n        const id = peerId.toString();\n        // Not listening on this relay\n        if (!this.listenRelays.has(id)) {\n            return;\n        }\n        this._removeListenRelay(id).catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Attempt to listen on the given relay connection\n     */\n    async _addListenRelay(connection, id) {\n        try {\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n            // Get peer known addresses and sort them with public addresses first\n            const remoteAddrs = await pipe(await this.components.peerStore.addressBook.get(connection.remotePeer), (source) => sort(source, this.addressSorter), async (source) => await all(source));\n            // Attempt to listen on relay\n            const result = await Promise.all(remoteAddrs.map(async (addr) => {\n                try {\n                    let multiaddr = addr.multiaddr;\n                    if (multiaddr.getPeerId() == null) {\n                        multiaddr = multiaddr.encapsulate(`/p2p/${connection.remotePeer.toString()}`);\n                    }\n                    multiaddr = multiaddr.encapsulate('/p2p-circuit');\n                    // Announce multiaddrs will update on listen success by TransportManager event being triggered\n                    await this.components.transportManager.listen([multiaddr]);\n                    return true;\n                }\n                catch (err) {\n                    log.error('error listening on circuit address', err);\n                    this.onError(err);\n                }\n                return false;\n            }));\n            if (result.includes(true)) {\n                this.listenRelays.add(id);\n            }\n        }\n        catch (err) {\n            this.onError(err);\n            this.listenRelays.delete(id);\n        }\n    }\n    /**\n     * Remove listen relay\n     */\n    async _removeListenRelay(id) {\n        if (this.listenRelays.delete(id)) {\n            // TODO: this should be responsibility of the connMgr\n            await this._listenOnAvailableHopRelays([id]);\n        }\n    }\n    /**\n     * Try to listen on available hop relay connections.\n     * The following order will happen while we do not have enough relays.\n     * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.\n     * 2. Dial and try to listen on the peers we know that support hop but are not connected.\n     * 3. Search the network.\n     */\n    async _listenOnAvailableHopRelays(peersToIgnore = []) {\n        // TODO: The peer redial issue on disconnect should be handled by connection gating\n        // Check if already listening on enough relays\n        if (this.listenRelays.size >= this.maxListeners) {\n            return;\n        }\n        const knownHopsToDial = [];\n        const peers = await this.components.peerStore.all();\n        // Check if we have known hop peers to use and attempt to listen on the already connected\n        for (const { id, metadata } of peers) {\n            const idStr = id.toString();\n            // Continue to next if listening on this or peer to ignore\n            if (this.listenRelays.has(idStr)) {\n                continue;\n            }\n            if (peersToIgnore.includes(idStr)) {\n                continue;\n            }\n            const supportsHop = metadata.get(HOP_METADATA_KEY);\n            // Continue to next if it does not support Hop\n            if ((supportsHop == null) || uint8ArrayToString(supportsHop) !== HOP_METADATA_VALUE) {\n                continue;\n            }\n            const connections = this.components.connectionManager.getConnections(id);\n            // If not connected, store for possible later use.\n            if (connections.length === 0) {\n                knownHopsToDial.push(id);\n                continue;\n            }\n            await this._addListenRelay(connections[0], idStr);\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n        }\n        // Try to listen on known peers that are not connected\n        for (const peerId of knownHopsToDial) {\n            await this._tryToListenOnRelay(peerId);\n            // Check if already listening on enough relays\n            if (this.listenRelays.size >= this.maxListeners) {\n                return;\n            }\n        }\n        // Try to find relays to hop on the network\n        try {\n            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n            for await (const provider of this.components.contentRouting.findProviders(cid)) {\n                if (provider.multiaddrs.length === 0) {\n                    continue;\n                }\n                const peerId = provider.id;\n                if (peerId.equals(this.components.peerId)) {\n                    // Skip the provider if it's us as dialing will fail\n                    continue;\n                }\n                await this.components.peerStore.addressBook.add(peerId, provider.multiaddrs);\n                await this._tryToListenOnRelay(peerId);\n                // Check if already listening on enough relays\n                if (this.listenRelays.size >= this.maxListeners) {\n                    return;\n                }\n            }\n        }\n        catch (err) {\n            this.onError(err);\n        }\n    }\n    async _tryToListenOnRelay(peerId) {\n        try {\n            const connection = await this.components.connectionManager.openConnection(peerId);\n            await this._addListenRelay(connection, peerId.toString());\n        }\n        catch (err) {\n            log.error('Could not use %p as relay', peerId, err);\n            this.onError(err, `could not connect and listen on known hop relay ${peerId.toString()}`);\n        }\n    }\n}\n//# sourceMappingURL=auto-relay.js.map","import { logger } from '@libp2p/logger';\nimport { codes } from '../errors.js';\nimport { setDelayedInterval, clearDelayedInterval\n// @ts-expect-error set-delayed-interval does not export types\n } from 'set-delayed-interval';\nimport { AutoRelay } from './auto-relay.js';\nimport { namespaceToCid } from './utils.js';\nimport { RELAY_RENDEZVOUS_NS } from './constants.js';\nconst log = logger('libp2p:relay');\nexport class Relay {\n    /**\n     * Creates an instance of Relay\n     */\n    constructor(components, init) {\n        this.components = components;\n        // Create autoRelay if enabled\n        this.autoRelay = init.autoRelay?.enabled !== false\n            ? new AutoRelay(components, {\n                addressSorter: init.addressSorter,\n                ...init.autoRelay\n            })\n            : undefined;\n        this.started = false;\n        this.init = init;\n        this._advertiseService = this._advertiseService.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start Relay service\n     */\n    async start() {\n        // Advertise service if HOP enabled\n        if (this.init.hop.enabled !== false && this.init.advertise.enabled !== false) {\n            this.timeout = setDelayedInterval(this._advertiseService, this.init.advertise.ttl, this.init.advertise.bootDelay);\n        }\n        this.started = true;\n    }\n    /**\n     * Stop Relay service\n     */\n    async stop() {\n        if (this.timeout != null) {\n            clearDelayedInterval(this.timeout);\n        }\n        this.started = false;\n    }\n    /**\n     * Advertise hop relay service in the network.\n     */\n    async _advertiseService() {\n        try {\n            const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n            await this.components.contentRouting.provide(cid);\n        }\n        catch (err) {\n            if (err.code === codes.ERR_NO_ROUTERS_AVAILABLE) {\n                log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err);\n                // Stop the advertise\n                await this.stop();\n            }\n            else {\n                log.error(err);\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import 'node-forge/lib/x509.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nconst pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n */\nexport const certificateForKey = (key, privateKey) => {\n    const publicKey = pki.rsa.setPublicKey(privateKey.n, privateKey.e);\n    const cert = pki.createCertificate();\n    cert.publicKey = publicKey;\n    cert.serialNumber = '01';\n    cert.validity.notBefore = new Date();\n    cert.validity.notAfter = new Date();\n    cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    const attrs = [{\n            name: 'organizationName',\n            value: 'ipfs'\n        }, {\n            shortName: 'OU',\n            value: 'keystore'\n        }, {\n            name: 'commonName',\n            value: key.id\n        }];\n    cert.setSubject(attrs);\n    cert.setIssuer(attrs);\n    cert.setExtensions([{\n            name: 'basicConstraints',\n            cA: true\n        }, {\n            name: 'keyUsage',\n            keyCertSign: true,\n            digitalSignature: true,\n            nonRepudiation: true,\n            keyEncipherment: true,\n            dataEncipherment: true\n        }, {\n            name: 'extKeyUsage',\n            serverAuth: true,\n            clientAuth: true,\n            codeSigning: true,\n            emailProtection: true,\n            timeStamping: true\n        }, {\n            name: 'nsCertType',\n            client: true,\n            server: true,\n            email: true,\n            objsign: true,\n            sslCA: true,\n            emailCA: true,\n            objCA: true\n        }]);\n    // self-sign certificate\n    cert.sign(privateKey);\n    return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nexport async function findAsync(array, asyncCompare) {\n    const promises = array.map(asyncCompare);\n    const results = await Promise.all(promises);\n    const index = results.findIndex(result => result);\n    return array[index];\n}\n//# sourceMappingURL=util.js.map","import 'node-forge/lib/pkcs7.js';\nimport 'node-forge/lib/pbe.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { certificateForKey, findAsync } from './util.js';\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { codes } from '../errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:keychain:cms');\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nexport class CMS {\n    /**\n     * Creates a new instance with a keychain\n     */\n    constructor(keychain, dek) {\n        if (keychain == null) {\n            throw errCode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED);\n        }\n        this.keychain = keychain;\n        privates.set(this, { dek });\n    }\n    /**\n     * Creates some protected data.\n     *\n     * The output Uint8Array contains the PKCS #7 message in DER.\n     */\n    async encrypt(name, plain) {\n        if (!(plain instanceof Uint8Array)) {\n            throw errCode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const key = await this.keychain.findKeyByName(name);\n        const pem = await this.keychain.getPrivateKey(name);\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n        const certificate = await certificateForKey(key, privateKey);\n        // create a p7 enveloped message\n        const p7 = forge.pkcs7.createEnvelopedData();\n        p7.addRecipient(certificate);\n        p7.content = forge.util.createBuffer(plain);\n        p7.encrypt();\n        // convert message to DER\n        const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n        return uint8ArrayFromString(der, 'ascii');\n    }\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     */\n    async decrypt(cmsData) {\n        if (!(cmsData instanceof Uint8Array)) {\n            throw errCode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS);\n        }\n        let cms;\n        try {\n            const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n            const obj = forge.asn1.fromDer(buf);\n            cms = forge.pkcs7.messageFromAsn1(obj);\n        }\n        catch (err) {\n            log.error(err);\n            throw errCode(new Error('Invalid CMS'), codes.ERR_INVALID_CMS);\n        }\n        // Find a recipient whose key we hold. We only deal with recipient certs\n        // issued by ipfs (O=ipfs).\n        const recipients = cms.recipients\n            // @ts-expect-error cms types not defined\n            .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n            // @ts-expect-error cms types not defined\n            .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n            // @ts-expect-error cms types not defined\n            .map(r => {\n            return {\n                recipient: r,\n                // @ts-expect-error cms types not defined\n                keyId: r.issuer.find(a => a.shortName === 'CN').value\n            };\n        });\n        const r = await findAsync(recipients, async (recipient) => {\n            try {\n                const key = await this.keychain.findKeyById(recipient.keyId);\n                if (key != null) {\n                    return true;\n                }\n            }\n            catch (err) {\n                return false;\n            }\n            return false;\n        });\n        if (r == null) {\n            // @ts-expect-error cms types not defined\n            const missingKeys = recipients.map(r => r.keyId);\n            throw errCode(new Error(`Decryption needs one of the key(s): ${missingKeys.join(', ')}`), codes.ERR_MISSING_KEYS, {\n                missingKeys\n            });\n        }\n        const key = await this.keychain.findKeyById(r.keyId);\n        if (key == null) {\n            throw errCode(new Error('No key available to decrypto'), codes.ERR_NO_KEY);\n        }\n        const pem = await this.keychain.getPrivateKey(key.name);\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n        cms.decrypt(r.recipient, privateKey);\n        return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n    }\n}\n//# sourceMappingURL=cms.js.map","/* eslint max-nested-callbacks: [\"error\", 5] */\nimport { logger } from '@libp2p/logger';\nimport sanitize from 'sanitize-filename';\nimport mergeOptions from 'merge-options';\nimport { Key } from 'interface-datastore/key';\nimport { CMS } from './cms.js';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { generateKeyPair, importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { pbkdf2, randomBytes } from '@libp2p/crypto';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nconst log = logger('libp2p:keychain');\nconst keyPrefix = '/pkcs8/';\nconst infoPrefix = '/info/';\nconst privates = new WeakMap();\n// NIST SP 800-132\nconst NIST = {\n    minKeyLength: 112 / 8,\n    minSaltLength: 128 / 8,\n    minIterationCount: 1000\n};\nconst defaultOptions = {\n    // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n    dek: {\n        keyLength: 512 / 8,\n        iterationCount: 10000,\n        salt: 'you should override this value with a crypto secure random number',\n        hash: 'sha2-512'\n    }\n};\nfunction validateKeyName(name) {\n    if (name == null) {\n        return false;\n    }\n    if (typeof name !== 'string') {\n        return false;\n    }\n    return name === sanitize(name.trim()) && name.length > 0;\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay() {\n    const min = 200;\n    const max = 1000;\n    const delay = Math.random() * (max - min) + min;\n    await new Promise(resolve => setTimeout(resolve, delay));\n}\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName(name) {\n    return new Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName(name) {\n    return new Key(infoPrefix + name);\n}\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport class KeyChain {\n    /**\n     * Creates a new instance of a key chain\n     */\n    constructor(components, init) {\n        this.components = components;\n        this.init = mergeOptions(defaultOptions, init);\n        // Enforce NIST SP 800-132\n        if (this.init.pass != null && this.init.pass?.length < 20) {\n            throw new Error('pass must be least 20 characters');\n        }\n        if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n            throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);\n        }\n        if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n            throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);\n        }\n        if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n            throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);\n        }\n        const dek = this.init.pass != null && this.init.dek?.salt != null\n            ? pbkdf2(this.init.pass, this.init.dek?.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        const dsname = DsInfoName('self');\n        if (!(await this.components.datastore.has(dsname))) {\n            await this.importPeer('self', this.components.peerId);\n        }\n        this.started = true;\n    }\n    stop() {\n        this.started = false;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data\n     * using the Cryptographic Message Syntax (CMS).\n     *\n     * CMS describes an encapsulation syntax for data protection. It\n     * is used to digitally sign, digest, authenticate, or encrypt\n     * arbitrary message content\n     */\n    get cms() {\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const dek = cached.dek;\n        return new CMS(this, dek);\n    }\n    /**\n     * Generates the options for a keychain.  A random salt is produced.\n     *\n     * @returns {object}\n     */\n    static generateOptions() {\n        const options = Object.assign({}, defaultOptions);\n        const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n        options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64');\n        return options;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data.\n     * The default options for a keychain.\n     *\n     * @returns {object}\n     */\n    static get options() {\n        return defaultOptions;\n    }\n    /**\n     * Create a new key.\n     *\n     * @param {string} name - The local key name; cannot already exist.\n     * @param {string} type - One of the key types; 'rsa'.\n     * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n     */\n    async createKey(name, type, size = 2048) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error('Invalid key name'), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (typeof type !== 'string') {\n            await randomDelay();\n            throw errCode(new Error('Invalid key type'), codes.ERR_INVALID_KEY_TYPE);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error('Key name already exists'), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        switch (type.toLowerCase()) {\n            case 'rsa':\n                if (!Number.isSafeInteger(size) || size < 2048) {\n                    await randomDelay();\n                    throw errCode(new Error('Invalid RSA key size'), codes.ERR_INVALID_KEY_SIZE);\n                }\n                break;\n            default:\n                break;\n        }\n        let keyInfo;\n        try {\n            const keypair = await generateKeyPair(type, size);\n            const kid = await keypair.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await keypair.export(dek);\n            keyInfo = {\n                name: name,\n                id: kid\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, uint8ArrayFromString(pem));\n            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        return keyInfo;\n    }\n    /**\n     * List all the keys.\n     *\n     * @returns {Promise<KeyInfo[]>}\n     */\n    async listKeys() {\n        const query = {\n            prefix: infoPrefix\n        };\n        const info = [];\n        for await (const value of this.components.datastore.query(query)) {\n            info.push(JSON.parse(uint8ArrayToString(value.value)));\n        }\n        return info;\n    }\n    /**\n     * Find a key by it's id\n     */\n    async findKeyById(id) {\n        try {\n            const keys = await this.listKeys();\n            return keys.find((k) => k.id === id);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Find a key by it's name.\n     *\n     * @param {string} name - The local key name.\n     * @returns {Promise<KeyInfo>}\n     */\n    async findKeyByName(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsInfoName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            return JSON.parse(uint8ArrayToString(res));\n        }\n        catch (err) {\n            await randomDelay();\n            log.error(err);\n            throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Remove an existing key.\n     *\n     * @param {string} name - The local key name; must already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async removeKey(name) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsName(name);\n        const keyInfo = await this.findKeyByName(name);\n        const batch = this.components.datastore.batch();\n        batch.delete(dsname);\n        batch.delete(DsInfoName(name));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Rename a key\n     *\n     * @param {string} oldName - The old local key name; must already exist.\n     * @param {string} newName - The new local key name; must not already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async renameKey(oldName, newName) {\n        if (!validateKeyName(oldName) || oldName === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid old key name '${oldName}'`), codes.ERR_OLD_KEY_NAME_INVALID);\n        }\n        if (!validateKeyName(newName) || newName === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid new key name '${newName}'`), codes.ERR_NEW_KEY_NAME_INVALID);\n        }\n        const oldDsname = DsName(oldName);\n        const newDsname = DsName(newName);\n        const oldInfoName = DsInfoName(oldName);\n        const newInfoName = DsInfoName(newName);\n        const exists = await this.components.datastore.has(newDsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error(`Key '${newName}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        try {\n            const pem = await this.components.datastore.get(oldDsname);\n            const res = await this.components.datastore.get(oldInfoName);\n            const keyInfo = JSON.parse(uint8ArrayToString(res));\n            keyInfo.name = newName;\n            const batch = this.components.datastore.batch();\n            batch.put(newDsname, pem);\n            batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)));\n            batch.delete(oldDsname);\n            batch.delete(oldInfoName);\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PEM encrypted PKCS #8 string\n     */\n    async exportKey(name, password) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (password == null) {\n            await randomDelay();\n            throw errCode(new Error('Password is required'), codes.ERR_PASSWORD_REQUIRED);\n        }\n        const dsname = DsName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            const pem = uint8ArrayToString(res);\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const privateKey = await importKey(pem, dek);\n            return await privateKey.export(password);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PeerId\n     */\n    async exportPeerId(name) {\n        const password = 'temporary-password';\n        const pem = await this.exportKey(name, password);\n        const privateKey = await importKey(pem, password);\n        return await peerIdFromKeys(privateKey.public.bytes, privateKey.bytes);\n    }\n    /**\n     * Import a new key from a PEM encoded PKCS #8 string\n     *\n     * @param {string} name - The local key name; must not already exist.\n     * @param {string} pem - The PEM encoded PKCS #8 string\n     * @param {string} password - The password.\n     * @returns {Promise<KeyInfo>}\n     */\n    async importKey(name, pem, password) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        if (pem == null) {\n            await randomDelay();\n            throw errCode(new Error('PEM encoded key is required'), codes.ERR_PEM_REQUIRED);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        let privateKey;\n        try {\n            privateKey = await importKey(pem, password);\n        }\n        catch (err) {\n            await randomDelay();\n            throw errCode(new Error('Cannot read the key, most likely the password is wrong'), codes.ERR_CANNOT_READ_KEY);\n        }\n        let kid;\n        try {\n            kid = await privateKey.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            pem = await privateKey.export(dek);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        const keyInfo = {\n            name: name,\n            id: kid\n        };\n        const batch = this.components.datastore.batch();\n        batch.put(dsname, uint8ArrayFromString(pem));\n        batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Import a peer key\n     */\n    async importPeer(name, peer) {\n        try {\n            if (!validateKeyName(name)) {\n                throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n            }\n            if (peer == null) {\n                throw errCode(new Error('PeerId is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            if (peer.privateKey == null) {\n                throw errCode(new Error('PeerId.privKey is required'), codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            const privateKey = await unmarshalPrivateKey(peer.privateKey);\n            const dsname = DsName(name);\n            const exists = await this.components.datastore.has(dsname);\n            if (exists) {\n                await randomDelay();\n                throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n            }\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await privateKey.export(dek);\n            const keyInfo = {\n                name: name,\n                id: peer.toString()\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, uint8ArrayFromString(pem));\n            batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Gets the private key as PEM encoded PKCS #8 string\n     */\n    async getPrivateKey(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n        }\n        try {\n            const dsname = DsName(name);\n            const res = await this.components.datastore.get(dsname);\n            return uint8ArrayToString(res);\n        }\n        catch (err) {\n            await randomDelay();\n            log.error(err);\n            throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Rotate keychain password and re-encrypt all associated keys\n     */\n    async rotateKeychainPass(oldPass, newPass) {\n        if (typeof oldPass !== 'string') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid old pass type '${typeof oldPass}'`), codes.ERR_INVALID_OLD_PASS_TYPE);\n        }\n        if (typeof newPass !== 'string') {\n            await randomDelay();\n            throw errCode(new Error(`Invalid new pass type '${typeof newPass}'`), codes.ERR_INVALID_NEW_PASS_TYPE);\n        }\n        if (newPass.length < 20) {\n            await randomDelay();\n            throw errCode(new Error(`Invalid pass length ${newPass.length}`), codes.ERR_INVALID_PASS_LENGTH);\n        }\n        log('recreating keychain');\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n        }\n        const oldDek = cached.dek;\n        this.init.pass = newPass;\n        const newDek = newPass != null && this.init.dek?.salt != null\n            ? pbkdf2(newPass, this.init.dek.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek: newDek });\n        const keys = await this.listKeys();\n        for (const key of keys) {\n            const res = await this.components.datastore.get(DsName(key.name));\n            const pem = uint8ArrayToString(res);\n            const privateKey = await importKey(pem, oldDek);\n            const password = newDek.toString();\n            const keyAsPEM = await privateKey.export(password);\n            // Update stored key\n            const batch = this.components.datastore.batch();\n            const keyInfo = {\n                name: key.name,\n                id: key.id\n            };\n            batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM));\n            batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        log('keychain reconstructed');\n    }\n}\n//# sourceMappingURL=index.js.map","class TrackedMap extends Map {\n    constructor(init) {\n        super();\n        const { name, metrics } = init;\n        this.metric = metrics.registerMetric(name);\n        this.updateComponentMetric();\n    }\n    set(key, value) {\n        super.set(key, value);\n        this.updateComponentMetric();\n        return this;\n    }\n    delete(key) {\n        const deleted = super.delete(key);\n        this.updateComponentMetric();\n        return deleted;\n    }\n    clear() {\n        super.clear();\n        this.updateComponentMetric();\n    }\n    updateComponentMetric() {\n        this.metric.update(this.size);\n    }\n}\nexport function trackedMap(config) {\n    const { name, metrics } = config;\n    let map;\n    if (metrics != null) {\n        map = new TrackedMap({ name, metrics });\n    }\n    else {\n        map = new Map();\n    }\n    return map;\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport pSettle from 'p-settle';\nimport { codes } from './errors.js';\nimport errCode from 'err-code';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { trackedMap } from '@libp2p/tracked-map';\nconst log = logger('libp2p:transports');\nexport class DefaultTransportManager extends EventEmitter {\n    constructor(components, init = {}) {\n        super();\n        this.components = components;\n        this.started = false;\n        this.transports = new Map();\n        this.listeners = trackedMap({\n            name: 'libp2p_transport_manager_listeners',\n            metrics: this.components.metrics\n        });\n        this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL;\n    }\n    /**\n     * Adds a `Transport` to the manager\n     */\n    add(transport) {\n        const tag = transport[Symbol.toStringTag];\n        if (tag == null) {\n            throw errCode(new Error('Transport must have a valid tag'), codes.ERR_INVALID_KEY);\n        }\n        if (this.transports.has(tag)) {\n            throw errCode(new Error('There is already a transport with this tag'), codes.ERR_DUPLICATE_TRANSPORT);\n        }\n        log('adding transport %s', tag);\n        this.transports.set(tag, transport);\n        if (!this.listeners.has(tag)) {\n            this.listeners.set(tag, []);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        // Listen on the provided transports for the provided addresses\n        const addrs = this.components.addressManager.getListenAddrs();\n        await this.listen(addrs);\n        this.started = true;\n    }\n    /**\n     * Stops all listeners\n     */\n    async stop() {\n        const tasks = [];\n        for (const [key, listeners] of this.listeners) {\n            log('closing listeners for %s', key);\n            while (listeners.length > 0) {\n                const listener = listeners.pop();\n                if (listener == null) {\n                    continue;\n                }\n                tasks.push(listener.close());\n            }\n        }\n        await Promise.all(tasks);\n        log('all listeners closed');\n        for (const key of this.listeners.keys()) {\n            this.listeners.set(key, []);\n        }\n        this.started = false;\n    }\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     */\n    async dial(ma, options) {\n        const transport = this.transportForMultiaddr(ma);\n        if (transport == null) {\n            throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n        }\n        try {\n            return await transport.dial(ma, {\n                ...options,\n                upgrader: this.components.upgrader\n            });\n        }\n        catch (err) {\n            if (err.code == null) {\n                err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Returns all Multiaddr's the listeners are using\n     */\n    getAddrs() {\n        let addrs = [];\n        for (const listeners of this.listeners.values()) {\n            for (const listener of listeners) {\n                addrs = [...addrs, ...listener.getAddrs()];\n            }\n        }\n        return addrs;\n    }\n    /**\n     * Returns all the transports instances\n     */\n    getTransports() {\n        return Array.of(...this.transports.values());\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     */\n    transportForMultiaddr(ma) {\n        for (const transport of this.transports.values()) {\n            const addrs = transport.filter([ma]);\n            if (addrs.length > 0) {\n                return transport;\n            }\n        }\n    }\n    /**\n     * Starts listeners for each listen Multiaddr\n     */\n    async listen(addrs) {\n        if (addrs == null || addrs.length === 0) {\n            log('no addresses were provided for listening, this node is dial only');\n            return;\n        }\n        const couldNotListen = [];\n        for (const [key, transport] of this.transports.entries()) {\n            const supportedAddrs = transport.filter(addrs);\n            const tasks = [];\n            // For each supported multiaddr, create a listener\n            for (const addr of supportedAddrs) {\n                log('creating listener for %s on %s', key, addr);\n                const listener = transport.createListener({\n                    upgrader: this.components.upgrader\n                });\n                let listeners = this.listeners.get(key);\n                if (listeners == null) {\n                    listeners = [];\n                    this.listeners.set(key, listeners);\n                }\n                listeners.push(listener);\n                // Track listen/close events\n                listener.addEventListener('listening', () => {\n                    this.dispatchEvent(new CustomEvent('listener:listening', {\n                        detail: listener\n                    }));\n                });\n                listener.addEventListener('close', () => {\n                    this.dispatchEvent(new CustomEvent('listener:close', {\n                        detail: listener\n                    }));\n                });\n                // We need to attempt to listen on everything\n                tasks.push(listener.listen(addr));\n            }\n            // Keep track of transports we had no addresses for\n            if (tasks.length === 0) {\n                couldNotListen.push(key);\n                continue;\n            }\n            const results = await pSettle(tasks);\n            // If we are listening on at least 1 address, succeed.\n            // TODO: we should look at adding a retry (`p-retry`) here to better support\n            // listening on remote addresses as they may be offline. We could then potentially\n            // just wait for any (`p-any`) listener to succeed on each transport before returning\n            const isListening = results.find(r => r.isFulfilled);\n            if ((isListening == null) && this.faultTolerance !== FaultTolerance.NO_FATAL) {\n                throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n            }\n        }\n        // If no transports were able to listen, throw an error. This likely\n        // means we were given addresses we do not have transports for\n        if (couldNotListen.length === this.transports.size) {\n            const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`;\n            if (this.faultTolerance === FaultTolerance.FATAL_ALL) {\n                throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n            }\n            log(`libp2p in dial mode only: ${message}`);\n        }\n    }\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     */\n    async remove(key) {\n        log('removing %s', key);\n        // Close any running listeners\n        for (const listener of this.listeners.get(key) ?? []) {\n            await listener.close();\n        }\n        this.transports.delete(key);\n        this.listeners.delete(key);\n    }\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */\n    async removeAll() {\n        const tasks = [];\n        for (const key of this.transports.keys()) {\n            tasks.push(this.remove(key));\n        }\n        await Promise.all(tasks);\n    }\n}\n//# sourceMappingURL=transport-manager.js.map","export const PROTOCOL_ID = '/multistream/1.0.0';\n// Conforming to go-libp2p\n// See https://github.com/multiformats/go-multistream/blob/master/multistream.go#L297\nexport const MAX_PROTOCOL_LENGTH = 1024;\n//# sourceMappingURL=constants.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport * as lp from 'it-length-prefixed';\nimport { pipe } from 'it-pipe';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport first from 'it-first';\nimport { abortableSource } from 'abortable-iterator';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { MAX_PROTOCOL_LENGTH } from './constants.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:mss');\nconst NewLine = uint8ArrayFromString('\\n');\nexport function encode(buffer) {\n    const list = new Uint8ArrayList(buffer, NewLine);\n    return lp.encode.single(list);\n}\n/**\n * `write` encodes and writes a single buffer\n */\nexport function write(writer, buffer, options = {}) {\n    const encoded = encode(buffer);\n    if (options.writeBytes === true) {\n        writer.push(encoded.subarray());\n    }\n    else {\n        writer.push(encoded);\n    }\n}\n/**\n * `writeAll` behaves like `write`, except it encodes an array of items as a single write\n */\nexport function writeAll(writer, buffers, options = {}) {\n    const list = new Uint8ArrayList();\n    for (const buf of buffers) {\n        list.append(encode(buf));\n    }\n    if (options.writeBytes === true) {\n        writer.push(list.subarray());\n    }\n    else {\n        writer.push(list);\n    }\n}\nexport async function read(reader, options) {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = {\n        [Symbol.asyncIterator]: () => varByteSource,\n        next: async () => await reader.next(byteLength)\n    };\n    let input = varByteSource;\n    // If we have been passed an abort signal, wrap the input source in an abortable\n    // iterator that will throw if the operation is aborted\n    if (options?.signal != null) {\n        input = abortableSource(varByteSource, options.signal);\n    }\n    // Once the length has been parsed, read chunk for that length\n    const onLength = (l) => {\n        byteLength = l;\n    };\n    const buf = await pipe(input, (source) => lp.decode(source, { onLength, maxDataLength: MAX_PROTOCOL_LENGTH }), async (source) => await first(source));\n    if (buf == null || buf.length === 0) {\n        throw new CodeError('no buffer returned', 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');\n    }\n    if (buf.get(buf.byteLength - 1) !== NewLine[0]) {\n        log.error('Invalid mss message - missing newline - %s', buf.subarray());\n        throw new CodeError('missing newline', 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');\n    }\n    return buf.sublist(0, -1); // Remove newline\n}\nexport async function readString(reader, options) {\n    const buf = await read(reader, options);\n    return uint8ArrayToString(buf.subarray());\n}\n//# sourceMappingURL=multistream.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport * as multistream from './multistream.js';\nimport { handshake } from 'it-handshake';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { PROTOCOL_ID } from './index.js';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nimport { reader } from 'it-reader';\nconst log = logger('libp2p:mss:select');\nexport async function select(stream, protocols, options = {}) {\n    protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n    const { reader, writer, rest, stream: shakeStream } = handshake(stream);\n    const protocol = protocols.shift();\n    if (protocol == null) {\n        throw new Error('At least one protocol must be specified');\n    }\n    log.trace('select: write [\"%s\", \"%s\"]', PROTOCOL_ID, protocol);\n    const p1 = uint8ArrayFromString(PROTOCOL_ID);\n    const p2 = uint8ArrayFromString(protocol);\n    multistream.writeAll(writer, [p1, p2], options);\n    let response = await multistream.readString(reader, options);\n    log.trace('select: read \"%s\"', response);\n    // Read the protocol response if we got the protocolId in return\n    if (response === PROTOCOL_ID) {\n        response = await multistream.readString(reader, options);\n        log.trace('select: read \"%s\"', response);\n    }\n    // We're done\n    if (response === protocol) {\n        rest();\n        return { stream: shakeStream, protocol };\n    }\n    // We haven't gotten a valid ack, try the other protocols\n    for (const protocol of protocols) {\n        log.trace('select: write \"%s\"', protocol);\n        multistream.write(writer, uint8ArrayFromString(protocol), options);\n        const response = await multistream.readString(reader, options);\n        log.trace('select: read \"%s\" for \"%s\"', response, protocol);\n        if (response === protocol) {\n            rest(); // End our writer so others can start writing to stream\n            return { stream: shakeStream, protocol };\n        }\n    }\n    rest();\n    throw new CodeError('protocol selection failed', 'ERR_UNSUPPORTED_PROTOCOL');\n}\nexport function lazySelect(stream, protocol) {\n    // This is a signal to write the multistream headers if the consumer tries to\n    // read from the source\n    const negotiateTrigger = pushable();\n    let negotiated = false;\n    return {\n        stream: {\n            sink: async (source) => {\n                await stream.sink((async function* () {\n                    let first = true;\n                    for await (const chunk of merge(source, negotiateTrigger)) {\n                        if (first) {\n                            first = false;\n                            negotiated = true;\n                            negotiateTrigger.end();\n                            const p1 = uint8ArrayFromString(PROTOCOL_ID);\n                            const p2 = uint8ArrayFromString(protocol);\n                            const list = new Uint8ArrayList(multistream.encode(p1), multistream.encode(p2));\n                            if (chunk.length > 0)\n                                list.append(chunk);\n                            yield* list;\n                        }\n                        else {\n                            yield chunk;\n                        }\n                    }\n                })());\n            },\n            source: (async function* () {\n                if (!negotiated)\n                    negotiateTrigger.push(new Uint8Array());\n                const byteReader = reader(stream.source);\n                let response = await multistream.readString(byteReader);\n                if (response === PROTOCOL_ID) {\n                    response = await multistream.readString(byteReader);\n                }\n                if (response !== protocol) {\n                    throw new CodeError('protocol selection failed', 'ERR_UNSUPPORTED_PROTOCOL');\n                }\n                for await (const chunk of byteReader) {\n                    yield* chunk;\n                }\n            })()\n        },\n        protocol\n    };\n}\n//# sourceMappingURL=select.js.map","import { logger } from '@libp2p/logger';\nimport * as multistream from './multistream.js';\nimport { handshake } from 'it-handshake';\nimport { PROTOCOL_ID } from './constants.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { Uint8ArrayList } from 'uint8arraylist';\nconst log = logger('libp2p:mss:handle');\nexport async function handle(stream, protocols, options) {\n    protocols = Array.isArray(protocols) ? protocols : [protocols];\n    const { writer, reader, rest, stream: shakeStream } = handshake(stream);\n    while (true) {\n        const protocol = await multistream.readString(reader, options);\n        log.trace('read \"%s\"', protocol);\n        if (protocol === PROTOCOL_ID) {\n            log.trace('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n            multistream.write(writer, uint8ArrayFromString(PROTOCOL_ID), options);\n            continue;\n        }\n        if (protocols.includes(protocol)) {\n            multistream.write(writer, uint8ArrayFromString(protocol), options);\n            log.trace('respond with \"%s\" for \"%s\"', protocol, protocol);\n            rest();\n            return { stream: shakeStream, protocol };\n        }\n        if (protocol === 'ls') {\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n            multistream.write(writer, new Uint8ArrayList(...protocols.map(p => multistream.encode(uint8ArrayFromString(p)))), options);\n            // multistream.writeAll(writer, protocols.map(p => uint8ArrayFromString(p)))\n            log.trace('respond with \"%s\" for %s', protocols, protocol);\n            continue;\n        }\n        multistream.write(writer, uint8ArrayFromString('na'), options);\n        log('respond with \"na\" for \"%s\"', protocol);\n    }\n}\n//# sourceMappingURL=handle.js.map","export const symbol = Symbol.for('@libp2p/connection');\nexport function isConnection(other) {\n    return other != null && Boolean(other[symbol]);\n}\n//# sourceMappingURL=index.js.map","import errCode from 'err-code';\nimport { OPEN, CLOSING, CLOSED } from '@libp2p/interface-connection/status';\nimport { symbol } from '@libp2p/interface-connection';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection');\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nexport class ConnectionImpl {\n    /**\n     * An implementation of the js-libp2p connection.\n     * Any libp2p transport should use an upgrader to return this connection.\n     */\n    constructor(init) {\n        const { remoteAddr, remotePeer, newStream, close, getStreams, stat } = init;\n        this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`;\n        this.remoteAddr = remoteAddr;\n        this.remotePeer = remotePeer;\n        this.stat = {\n            ...stat,\n            status: OPEN\n        };\n        this._newStream = newStream;\n        this._close = close;\n        this._getStreams = getStreams;\n        this.tags = [];\n        this._closing = false;\n    }\n    get [Symbol.toStringTag]() {\n        return 'Connection';\n    }\n    get [symbol]() {\n        return true;\n    }\n    /**\n     * Get all the streams of the muxer\n     */\n    get streams() {\n        return this._getStreams();\n    }\n    /**\n     * Create a new stream from this connection\n     */\n    async newStream(protocols, options) {\n        if (this.stat.status === CLOSING) {\n            throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');\n        }\n        if (this.stat.status === CLOSED) {\n            throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');\n        }\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        const stream = await this._newStream(protocols, options);\n        stream.stat.direction = 'outbound';\n        return stream;\n    }\n    /**\n     * Add a stream when it is opened to the registry\n     */\n    addStream(stream) {\n        stream.stat.direction = 'inbound';\n    }\n    /**\n     * Remove stream registry after it is closed\n     */\n    removeStream(id) {\n    }\n    /**\n     * Close the connection\n     */\n    async close() {\n        if (this.stat.status === CLOSED || this._closing) {\n            return;\n        }\n        this.stat.status = CLOSING;\n        // close all streams - this can throw if we're not multiplexed\n        try {\n            this.streams.forEach(s => s.close());\n        }\n        catch (err) {\n            log.error(err);\n        }\n        // Close raw connection\n        this._closing = true;\n        await this._close();\n        this._closing = false;\n        this.stat.timeline.close = Date.now();\n        this.stat.status = CLOSED;\n    }\n}\nexport function createConnection(init) {\n    return new ConnectionImpl(init);\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isTopology } from '@libp2p/interface-registrar';\nimport merge from 'merge-options';\nconst log = logger('libp2p:registrar');\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nexport class DefaultRegistrar {\n    constructor(components) {\n        this.topologies = new Map();\n        this.handlers = new Map();\n        this.components = components;\n        this._onDisconnect = this._onDisconnect.bind(this);\n        this._onProtocolChange = this._onProtocolChange.bind(this);\n        this._onConnect = this._onConnect.bind(this);\n        this.components.connectionManager.addEventListener('peer:disconnect', this._onDisconnect);\n        this.components.connectionManager.addEventListener('peer:connect', this._onConnect);\n        // happens after identify\n        this.components.peerStore.addEventListener('change:protocols', this._onProtocolChange);\n    }\n    getProtocols() {\n        return Array.from(new Set([\n            ...this.topologies.keys(),\n            ...this.handlers.keys()\n        ])).sort();\n    }\n    getHandler(protocol) {\n        const handler = this.handlers.get(protocol);\n        if (handler == null) {\n            throw errCode(new Error(`No handler registered for protocol ${protocol}`), codes.ERR_NO_HANDLER_FOR_PROTOCOL);\n        }\n        return handler;\n    }\n    getTopologies(protocol) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            return [];\n        }\n        return [\n            ...topologies.values()\n        ];\n    }\n    /**\n     * Registers the `handler` for each protocol\n     */\n    async handle(protocol, handler, opts) {\n        if (this.handlers.has(protocol)) {\n            throw errCode(new Error(`Handler already registered for protocol ${protocol}`), codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);\n        }\n        const options = merge.bind({ ignoreUndefined: true })({\n            maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n            maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n        }, opts);\n        this.handlers.set(protocol, {\n            handler,\n            options\n        });\n        // Add new protocols to self protocols in the Protobook\n        await this.components.peerStore.protoBook.add(this.components.peerId, [protocol]);\n    }\n    /**\n     * Removes the handler for each protocol. The protocol\n     * will no longer be supported on streams.\n     */\n    async unhandle(protocols) {\n        const protocolList = Array.isArray(protocols) ? protocols : [protocols];\n        protocolList.forEach(protocol => {\n            this.handlers.delete(protocol);\n        });\n        // Remove protocols from self protocols in the Protobook\n        await this.components.peerStore.protoBook.remove(this.components.peerId, protocolList);\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     */\n    async register(protocol, topology) {\n        if (!isTopology(topology)) {\n            log.error('topology must be an instance of interfaces/topology');\n            throw errCode(new Error('topology must be an instance of interfaces/topology'), codes.ERR_INVALID_PARAMETERS);\n        }\n        // Create topology\n        const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;\n        let topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            topologies = new Map();\n            this.topologies.set(protocol, topologies);\n        }\n        topologies.set(id, topology);\n        // Set registrar\n        await topology.setRegistrar(this);\n        return id;\n    }\n    /**\n     * Unregister topology\n     */\n    unregister(id) {\n        for (const [protocol, topologies] of this.topologies.entries()) {\n            if (topologies.has(id)) {\n                topologies.delete(id);\n                if (topologies.size === 0) {\n                    this.topologies.delete(protocol);\n                }\n            }\n        }\n    }\n    /**\n     * Remove a disconnected peer from the record\n     */\n    _onDisconnect(evt) {\n        const connection = evt.detail;\n        void this.components.peerStore.protoBook.get(connection.remotePeer)\n            .then(peerProtocols => {\n            for (const protocol of peerProtocols) {\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    // no topologies are interested in this protocol\n                    continue;\n                }\n                for (const topology of topologies.values()) {\n                    topology.onDisconnect(connection.remotePeer);\n                }\n            }\n        })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * On peer connected if we already have their protocols. Usually used for reconnects\n     * as change:protocols event won't be emitted due to identical protocols.\n     */\n    _onConnect(evt) {\n        const connection = evt.detail;\n        void this.components.peerStore.protoBook.get(connection.remotePeer)\n            .then(peerProtocols => {\n            for (const protocol of peerProtocols) {\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    // no topologies are interested in this protocol\n                    continue;\n                }\n                for (const topology of topologies.values()) {\n                    topology.onConnect(connection.remotePeer, connection);\n                }\n            }\n        })\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Check if a new peer support the multicodecs for this topology\n     */\n    _onProtocolChange(evt) {\n        const { peerId, protocols, oldProtocols } = evt.detail;\n        const removed = oldProtocols.filter(protocol => !protocols.includes(protocol));\n        const added = protocols.filter(protocol => !oldProtocols.includes(protocol));\n        for (const protocol of removed) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                topology.onDisconnect(peerId);\n            }\n        }\n        for (const protocol of added) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                const connection = this.components.connectionManager.getConnections(peerId)[0];\n                if (connection == null) {\n                    continue;\n                }\n                topology.onConnect(peerId, connection);\n            }\n        }\n    }\n}\n//# sourceMappingURL=registrar.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as mss from '@libp2p/multistream-select';\nimport { codes } from './errors.js';\nimport { createConnection } from './connection/index.js';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { DEFAULT_MAX_INBOUND_STREAMS, DEFAULT_MAX_OUTBOUND_STREAMS } from './registrar.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:upgrader');\nfunction findIncomingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxInboundStreams;\n    }\n    catch (err) {\n        if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return DEFAULT_MAX_INBOUND_STREAMS;\n}\nfunction findOutgoingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxOutboundStreams;\n    }\n    catch (err) {\n        if (err.code !== codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return DEFAULT_MAX_OUTBOUND_STREAMS;\n}\nfunction countStreams(protocol, direction, connection) {\n    let streamCount = 0;\n    connection.streams.forEach(stream => {\n        if (stream.stat.direction === direction && stream.stat.protocol === protocol) {\n            streamCount++;\n        }\n    });\n    return streamCount;\n}\nexport class DefaultUpgrader extends EventEmitter {\n    constructor(components, init) {\n        super();\n        this.components = components;\n        this.connectionEncryption = new Map();\n        init.connectionEncryption.forEach(encrypter => {\n            this.connectionEncryption.set(encrypter.protocol, encrypter);\n        });\n        this.muxers = new Map();\n        init.muxers.forEach(muxer => {\n            this.muxers.set(muxer.protocol, muxer);\n        });\n        this.inboundUpgradeTimeout = init.inboundUpgradeTimeout;\n    }\n    /**\n     * Upgrades an inbound connection\n     */\n    async upgradeInbound(maConn, opts) {\n        const accept = await this.components.connectionManager.acceptIncomingConnection(maConn);\n        if (!accept) {\n            throw errCode(new Error('connection denied'), codes.ERR_CONNECTION_DENIED);\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let muxerFactory;\n        let cryptoProtocol;\n        const timeoutController = new TimeoutController(this.inboundUpgradeTimeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        try {\n            const abortableStream = abortableDuplex(maConn, timeoutController.signal);\n            maConn.source = abortableStream.source;\n            maConn.sink = abortableStream.sink;\n            if (await this.components.connectionGater.denyInboundConnection(maConn)) {\n                throw errCode(new Error('The multiaddr connection is blocked by gater.acceptConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            this.components.metrics?.trackMultiaddrConnection(maConn);\n            log('starting the inbound connection upgrade');\n            // Protect\n            let protectedConn = maConn;\n            if (opts?.skipProtection !== true) {\n                const protector = this.components.connectionProtector;\n                if (protector != null) {\n                    log('protecting the inbound connection');\n                    protectedConn = await protector.protect(maConn);\n                }\n            }\n            try {\n                // Encrypt the connection\n                encryptedConn = protectedConn;\n                if (opts?.skipEncryption !== true) {\n                    ({\n                        conn: encryptedConn,\n                        remotePeer,\n                        protocol: cryptoProtocol\n                    } = await this._encryptInbound(protectedConn));\n                    if (await this.components.connectionGater.denyInboundEncryptedConnection(remotePeer, {\n                        ...protectedConn,\n                        ...encryptedConn\n                    })) {\n                        throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n                    }\n                }\n                else {\n                    const idStr = maConn.remoteAddr.getPeerId();\n                    if (idStr == null) {\n                        throw errCode(new Error('inbound connection that skipped encryption must have a peer id'), codes.ERR_INVALID_MULTIADDR);\n                    }\n                    const remotePeerId = peerIdFromString(idStr);\n                    cryptoProtocol = 'native';\n                    remotePeer = remotePeerId;\n                }\n                upgradedConn = encryptedConn;\n                if (opts?.muxerFactory != null) {\n                    muxerFactory = opts.muxerFactory;\n                }\n                else if (this.muxers.size > 0) {\n                    // Multiplex the connection\n                    const multiplexed = await this._multiplexInbound({\n                        ...protectedConn,\n                        ...encryptedConn\n                    }, this.muxers);\n                    muxerFactory = multiplexed.muxerFactory;\n                    upgradedConn = multiplexed.stream;\n                }\n            }\n            catch (err) {\n                log.error('Failed to upgrade inbound connection', err);\n                throw err;\n            }\n            if (await this.components.connectionGater.denyInboundUpgradedConnection(remotePeer, {\n                ...protectedConn,\n                ...encryptedConn\n            })) {\n                throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            log('Successfully upgraded inbound connection');\n            return this._createConnection({\n                cryptoProtocol,\n                direction: 'inbound',\n                maConn,\n                upgradedConn,\n                muxerFactory,\n                remotePeer\n            });\n        }\n        finally {\n            this.components.connectionManager.afterUpgradeInbound();\n            timeoutController.clear();\n        }\n    }\n    /**\n     * Upgrades an outbound connection\n     */\n    async upgradeOutbound(maConn, opts) {\n        const idStr = maConn.remoteAddr.getPeerId();\n        let remotePeerId;\n        if (idStr != null) {\n            remotePeerId = peerIdFromString(idStr);\n            if (await this.components.connectionGater.denyOutboundConnection(remotePeerId, maConn)) {\n                throw errCode(new Error('The multiaddr connection is blocked by connectionGater.denyOutboundConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n            }\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let cryptoProtocol;\n        let muxerFactory;\n        this.components.metrics?.trackMultiaddrConnection(maConn);\n        log('Starting the outbound connection upgrade');\n        // If the transport natively supports encryption, skip connection\n        // protector and encryption\n        // Protect\n        let protectedConn = maConn;\n        if (opts?.skipProtection !== true) {\n            const protector = this.components.connectionProtector;\n            if (protector != null) {\n                protectedConn = await protector.protect(maConn);\n            }\n        }\n        try {\n            // Encrypt the connection\n            encryptedConn = protectedConn;\n            if (opts?.skipEncryption !== true) {\n                ({\n                    conn: encryptedConn,\n                    remotePeer,\n                    protocol: cryptoProtocol\n                } = await this._encryptOutbound(protectedConn, remotePeerId));\n                if (await this.components.connectionGater.denyOutboundEncryptedConnection(remotePeer, {\n                    ...protectedConn,\n                    ...encryptedConn\n                })) {\n                    throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n                }\n            }\n            else {\n                if (remotePeerId == null) {\n                    throw errCode(new Error('Encryption was skipped but no peer id was passed'), codes.ERR_INVALID_PEER);\n                }\n                cryptoProtocol = 'native';\n                remotePeer = remotePeerId;\n            }\n            upgradedConn = encryptedConn;\n            if (opts?.muxerFactory != null) {\n                muxerFactory = opts.muxerFactory;\n            }\n            else if (this.muxers.size > 0) {\n                // Multiplex the connection\n                const multiplexed = await this._multiplexOutbound({\n                    ...protectedConn,\n                    ...encryptedConn\n                }, this.muxers);\n                muxerFactory = multiplexed.muxerFactory;\n                upgradedConn = multiplexed.stream;\n            }\n        }\n        catch (err) {\n            log.error('Failed to upgrade outbound connection', err);\n            await maConn.close(err);\n            throw err;\n        }\n        if (await this.components.connectionGater.denyOutboundUpgradedConnection(remotePeer, {\n            ...protectedConn,\n            ...encryptedConn\n        })) {\n            throw errCode(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes.ERR_CONNECTION_INTERCEPTED);\n        }\n        log('Successfully upgraded outbound connection');\n        return this._createConnection({\n            cryptoProtocol,\n            direction: 'outbound',\n            maConn,\n            upgradedConn,\n            muxerFactory,\n            remotePeer\n        });\n    }\n    /**\n     * A convenience method for generating a new `Connection`\n     */\n    _createConnection(opts) {\n        const { cryptoProtocol, direction, maConn, upgradedConn, remotePeer, muxerFactory } = opts;\n        let muxer;\n        let newStream;\n        let connection; // eslint-disable-line prefer-const\n        if (muxerFactory != null) {\n            // Create the muxer\n            muxer = muxerFactory.createStreamMuxer({\n                direction,\n                // Run anytime a remote stream is created\n                onIncomingStream: muxedStream => {\n                    if (connection == null) {\n                        return;\n                    }\n                    void Promise.resolve()\n                        .then(async () => {\n                        const protocols = this.components.registrar.getProtocols();\n                        const { stream, protocol } = await mss.handle(muxedStream, protocols);\n                        log('%s: incoming stream opened on %s', direction, protocol);\n                        if (connection == null) {\n                            return;\n                        }\n                        const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar);\n                        const streamCount = countStreams(protocol, 'inbound', connection);\n                        if (streamCount === incomingLimit) {\n                            muxedStream.abort(errCode(new Error(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`), codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS));\n                            return;\n                        }\n                        // after the handshake the returned stream can have early data so override\n                        // the souce/sink\n                        muxedStream.source = stream.source;\n                        muxedStream.sink = stream.sink;\n                        muxedStream.stat.protocol = protocol;\n                        // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                        // the peerstore should ensure that the peer is registered with that protocol\n                        this.components.peerStore.protoBook.add(remotePeer, [protocol]).catch(err => log.error(err));\n                        connection.addStream(muxedStream);\n                        this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                        this._onStream({ connection, stream: muxedStream, protocol });\n                    })\n                        .catch(err => {\n                        log.error(err);\n                        if (muxedStream.stat.timeline.close == null) {\n                            muxedStream.close();\n                        }\n                    });\n                },\n                // Run anytime a stream closes\n                onStreamEnd: muxedStream => {\n                    connection?.removeStream(muxedStream.id);\n                }\n            });\n            newStream = async (protocols, options = {}) => {\n                if (muxer == null) {\n                    throw errCode(new Error('Stream is not multiplexed'), codes.ERR_MUXER_UNAVAILABLE);\n                }\n                log('%s: starting new stream on %s', direction, protocols);\n                const muxedStream = await muxer.newStream();\n                let controller;\n                try {\n                    if (options.signal == null) {\n                        log('No abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols);\n                        controller = new TimeoutController(30000);\n                        options.signal = controller.signal;\n                        try {\n                            // fails on node < 15.4\n                            setMaxListeners?.(Infinity, controller.signal);\n                        }\n                        catch { }\n                    }\n                    const { stream, protocol } = await mss.select(muxedStream, protocols, options);\n                    const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar);\n                    const streamCount = countStreams(protocol, 'outbound', connection);\n                    if (streamCount === outgoingLimit) {\n                        const err = errCode(new Error(`Too many outbound protocol streams for protocol \"${protocol}\" - limit ${outgoingLimit}`), codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);\n                        muxedStream.abort(err);\n                        throw err;\n                    }\n                    // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                    // the peerstore should ensure that the peer is registered with that protocol\n                    this.components.peerStore.protoBook.add(remotePeer, [protocol]).catch(err => log.error(err));\n                    // after the handshake the returned stream can have early data so override\n                    // the souce/sink\n                    muxedStream.source = stream.source;\n                    muxedStream.sink = stream.sink;\n                    muxedStream.stat.protocol = protocol;\n                    this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                    return muxedStream;\n                }\n                catch (err) {\n                    log.error('could not create new stream', err);\n                    if (muxedStream.stat.timeline.close == null) {\n                        muxedStream.close();\n                    }\n                    if (err.code != null) {\n                        throw err;\n                    }\n                    throw errCode(err, codes.ERR_UNSUPPORTED_PROTOCOL);\n                }\n                finally {\n                    if (controller != null) {\n                        controller.clear();\n                    }\n                }\n            };\n            // Pipe all data through the muxer\n            void Promise.all([\n                muxer.sink(upgradedConn.source),\n                upgradedConn.sink(muxer.source)\n            ]).catch(err => {\n                log.error(err);\n            });\n        }\n        const _timeline = maConn.timeline;\n        maConn.timeline = new Proxy(_timeline, {\n            set: (...args) => {\n                if (connection != null && args[1] === 'close' && args[2] != null && _timeline.close == null) {\n                    // Wait for close to finish before notifying of the closure\n                    (async () => {\n                        try {\n                            if (connection.stat.status === 'OPEN') {\n                                await connection.close();\n                            }\n                        }\n                        catch (err) {\n                            log.error(err);\n                        }\n                        finally {\n                            this.dispatchEvent(new CustomEvent('connectionEnd', {\n                                detail: connection\n                            }));\n                        }\n                    })().catch(err => {\n                        log.error(err);\n                    });\n                }\n                return Reflect.set(...args);\n            }\n        });\n        maConn.timeline.upgraded = Date.now();\n        const errConnectionNotMultiplexed = () => {\n            throw errCode(new Error('connection is not multiplexed'), codes.ERR_CONNECTION_NOT_MULTIPLEXED);\n        };\n        // Create the connection\n        connection = createConnection({\n            remoteAddr: maConn.remoteAddr,\n            remotePeer: remotePeer,\n            stat: {\n                status: 'OPEN',\n                direction,\n                timeline: maConn.timeline,\n                multiplexer: muxer?.protocol,\n                encryption: cryptoProtocol\n            },\n            newStream: newStream ?? errConnectionNotMultiplexed,\n            getStreams: () => muxer != null ? muxer.streams : errConnectionNotMultiplexed(),\n            close: async () => {\n                await maConn.close();\n                // Ensure remaining streams are closed\n                if (muxer != null) {\n                    muxer.close();\n                }\n            }\n        });\n        this.dispatchEvent(new CustomEvent('connection', {\n            detail: connection\n        }));\n        return connection;\n    }\n    /**\n     * Routes incoming streams to the correct handler\n     */\n    _onStream(opts) {\n        const { connection, stream, protocol } = opts;\n        const { handler } = this.components.registrar.getHandler(protocol);\n        handler({ connection, stream });\n    }\n    /**\n     * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n     */\n    async _encryptInbound(connection) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        log('handling inbound crypto protocol selection', protocols);\n        try {\n            const { stream, protocol } = await mss.handle(connection, protocols, {\n                writeBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            log('encrypting inbound connection...');\n            return {\n                ...await encrypter.secureInbound(this.components.peerId, stream),\n                protocol\n            };\n        }\n        catch (err) {\n            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Attempts to encrypt the given `connection` with the provided connection encrypters.\n     * The first `ConnectionEncrypter` module to succeed will be used\n     */\n    async _encryptOutbound(connection, remotePeerId) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        log('selecting outbound crypto protocol', protocols);\n        try {\n            const { stream, protocol } = await mss.select(connection, protocols, {\n                writeBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            log('encrypting outbound connection to %p', remotePeerId);\n            return {\n                ...await encrypter.secureOutbound(this.components.peerId, stream, remotePeerId),\n                protocol\n            };\n        }\n        catch (err) {\n            throw errCode(err, codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Selects one of the given muxers via multistream-select. That\n     * muxer will be used for all future streams on the connection.\n     */\n    async _multiplexOutbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        log('outbound selecting muxer %s', protocols);\n        try {\n            const { stream, protocol } = await mss.select(connection, protocols, {\n                writeBytes: true\n            });\n            log('%s selected as muxer protocol', protocol);\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            log.error('error multiplexing outbound stream', err);\n            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n    /**\n     * Registers support for one of the given muxers via multistream-select. The\n     * selected muxer will be used for all future streams on the connection.\n     */\n    async _multiplexInbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        log('inbound handling muxers %s', protocols);\n        try {\n            const { stream, protocol } = await mss.handle(connection, protocols, {\n                writeBytes: true\n            });\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            log.error('error multiplexing inbound stream', err);\n            throw errCode(err, codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n}\n//# sourceMappingURL=upgrader.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Identify;\n(function (Identify) {\n    let _codec;\n    Identify.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.protocolVersion != null) {\n                    w.uint32(42);\n                    w.string(obj.protocolVersion);\n                }\n                if (obj.agentVersion != null) {\n                    w.uint32(50);\n                    w.string(obj.agentVersion);\n                }\n                if (obj.publicKey != null) {\n                    w.uint32(10);\n                    w.bytes(obj.publicKey);\n                }\n                if (obj.listenAddrs != null) {\n                    for (const value of obj.listenAddrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.observedAddr != null) {\n                    w.uint32(34);\n                    w.bytes(obj.observedAddr);\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(26);\n                        w.string(value);\n                    }\n                }\n                if (obj.signedPeerRecord != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signedPeerRecord);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    listenAddrs: [],\n                    protocols: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 5:\n                            obj.protocolVersion = reader.string();\n                            break;\n                        case 6:\n                            obj.agentVersion = reader.string();\n                            break;\n                        case 1:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.listenAddrs.push(reader.bytes());\n                            break;\n                        case 4:\n                            obj.observedAddr = reader.bytes();\n                            break;\n                        case 3:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 8:\n                            obj.signedPeerRecord = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Identify.encode = (obj) => {\n        return encodeMessage(obj, Identify.codec());\n    };\n    Identify.decode = (buf) => {\n        return decodeMessage(buf, Identify.codec());\n    };\n})(Identify || (Identify = {}));\n//# sourceMappingURL=message.js.map","export const version = '0.0.0';\nexport const name = 'libp2p';\n//# sourceMappingURL=version.js.map","import { version } from '../version.js';\nexport const PROTOCOL_VERSION = 'ipfs/0.1.0'; // deprecated\nexport const AGENT_VERSION = `js-libp2p/${version}`;\nexport const MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0'; // deprecated\nexport const MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0'; // deprecated\nexport const IDENTIFY_PROTOCOL_VERSION = '0.1.0';\nexport const MULTICODEC_IDENTIFY_PROTOCOL_NAME = 'id';\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = 'id/push';\nexport const MULTICODEC_IDENTIFY_PROTOCOL_VERSION = '1.0.0';\nexport const MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = '1.0.0';\n//# sourceMappingURL=consts.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as lp from 'it-length-prefixed';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { multiaddr, protocols } from '@multiformats/multiaddr';\nimport { Identify } from './pb/message.js';\nimport { RecordEnvelope, PeerRecord } from '@libp2p/peer-record';\nimport { MULTICODEC_IDENTIFY, MULTICODEC_IDENTIFY_PUSH, IDENTIFY_PROTOCOL_VERSION, MULTICODEC_IDENTIFY_PROTOCOL_NAME, MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME, MULTICODEC_IDENTIFY_PROTOCOL_VERSION, MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION } from './consts.js';\nimport { codes } from '../errors.js';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:identify');\n// https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L52\nconst MAX_IDENTIFY_MESSAGE_SIZE = 1024 * 8;\nexport class IdentifyService {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.init = init;\n        this.identifyProtocolStr = `/${init.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`;\n        this.identifyPushProtocolStr = `/${init.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`;\n        // Store self host metadata\n        this.host = {\n            protocolVersion: `${init.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,\n            ...init.host\n        };\n        // When a new connection happens, trigger identify\n        this.components.connectionManager.addEventListener('peer:connect', (evt) => {\n            const connection = evt.detail;\n            this.identify(connection).catch(log.error);\n        });\n        // When self multiaddrs change, trigger identify-push\n        this.components.peerStore.addEventListener('change:multiaddrs', (evt) => {\n            const { peerId } = evt.detail;\n            if (this.components.peerId.equals(peerId)) {\n                void this.pushToPeerStore().catch(err => log.error(err));\n            }\n        });\n        // When self protocols change, trigger identify-push\n        this.components.peerStore.addEventListener('change:protocols', (evt) => {\n            const { peerId } = evt.detail;\n            if (this.components.peerId.equals(peerId)) {\n                void this.pushToPeerStore().catch(err => log.error(err));\n            }\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        await this.components.peerStore.metadataBook.setValue(this.components.peerId, 'AgentVersion', uint8ArrayFromString(this.host.agentVersion));\n        await this.components.peerStore.metadataBook.setValue(this.components.peerId, 'ProtocolVersion', uint8ArrayFromString(this.host.protocolVersion));\n        await this.components.registrar.handle(this.identifyProtocolStr, (data) => {\n            void this._handleIdentify(data).catch(err => {\n                log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        await this.components.registrar.handle(this.identifyPushProtocolStr, (data) => {\n            void this._handlePush(data).catch(err => {\n                log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.init.maxPushIncomingStreams,\n            maxOutboundStreams: this.init.maxPushOutgoingStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.identifyProtocolStr);\n        await this.components.registrar.unhandle(this.identifyPushProtocolStr);\n        this.started = false;\n    }\n    /**\n     * Send an Identify Push update to the list of connections\n     */\n    async push(connections) {\n        const signedPeerRecord = await this.components.peerStore.addressBook.getRawEnvelope(this.components.peerId);\n        const listenAddrs = this.components.addressManager.getAddresses().map((ma) => ma.bytes);\n        const protocols = await this.components.peerStore.protoBook.get(this.components.peerId);\n        const pushes = connections.map(async (connection) => {\n            let stream;\n            const timeoutController = new TimeoutController(this.init.timeout);\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n            try {\n                stream = await connection.newStream([this.identifyPushProtocolStr], {\n                    signal: timeoutController.signal\n                });\n                // make stream abortable\n                const source = abortableDuplex(stream, timeoutController.signal);\n                await source.sink(pipe([Identify.encode({\n                        listenAddrs,\n                        signedPeerRecord,\n                        protocols\n                    })], lp.encode()));\n            }\n            catch (err) {\n                // Just log errors\n                log.error('could not push identify update to peer', err);\n            }\n            finally {\n                if (stream != null) {\n                    stream.close();\n                }\n                timeoutController.clear();\n            }\n        });\n        await Promise.all(pushes);\n    }\n    /**\n     * Calls `push` on all peer connections\n     */\n    async pushToPeerStore() {\n        // Do not try to push if we are not running\n        if (!this.isStarted()) {\n            return;\n        }\n        const connections = [];\n        for (const conn of this.components.connectionManager.getConnections()) {\n            const peerId = conn.remotePeer;\n            const peer = await this.components.peerStore.get(peerId);\n            if (!peer.protocols.includes(this.identifyPushProtocolStr)) {\n                continue;\n            }\n            connections.push(conn);\n        }\n        await this.push(connections);\n    }\n    async _identify(connection, options = {}) {\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream([this.identifyProtocolStr], {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            const data = await pipe([], source, lp.decode({\n                maxDataLength: this.init.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }), async (source) => await first(source));\n            if (data == null) {\n                throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED);\n            }\n            try {\n                return Identify.decode(data);\n            }\n            catch (err) {\n                throw errCode(err, codes.ERR_INVALID_MESSAGE);\n            }\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Requests the `Identify` message from peer associated with the given `connection`.\n     * If the identified peer does not match the `PeerId` associated with the connection,\n     * an error will be thrown.\n     */\n    async identify(connection, options = {}) {\n        const message = await this._identify(connection, options);\n        const { publicKey, listenAddrs, protocols, observedAddr, signedPeerRecord, agentVersion, protocolVersion } = message;\n        if (publicKey == null) {\n            throw errCode(new Error('public key was missing from identify message'), codes.ERR_MISSING_PUBLIC_KEY);\n        }\n        const id = await peerIdFromKeys(publicKey);\n        if (!connection.remotePeer.equals(id)) {\n            throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n        }\n        if (this.components.peerId.equals(id)) {\n            throw errCode(new Error('identified peer is our own peer id?'), codes.ERR_INVALID_PEER);\n        }\n        // Get the observedAddr if there is one\n        const cleanObservedAddr = IdentifyService.getCleanMultiaddr(observedAddr);\n        if (signedPeerRecord != null) {\n            log('received signed peer record from %p', id);\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);\n                if (!envelope.peerId.equals(id)) {\n                    throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n                }\n                if (await this.components.peerStore.addressBook.consumePeerRecord(envelope)) {\n                    await this.components.peerStore.protoBook.set(id, protocols);\n                    if (agentVersion != null) {\n                        await this.components.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(agentVersion));\n                    }\n                    if (protocolVersion != null) {\n                        await this.components.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(protocolVersion));\n                    }\n                    log('identify completed for peer %p and protocols %o', id, protocols);\n                    return;\n                }\n            }\n            catch (err) {\n                log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n            }\n        }\n        else {\n            log('no signed peer record received from %p', id);\n        }\n        log('falling back to legacy addresses from %p', id);\n        // LEGACY: Update peers data in PeerStore\n        try {\n            await this.components.peerStore.addressBook.set(id, listenAddrs.map((addr) => multiaddr(addr)));\n        }\n        catch (err) {\n            log.error('received invalid addrs', err);\n        }\n        await this.components.peerStore.protoBook.set(id, protocols);\n        if (agentVersion != null) {\n            await this.components.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(agentVersion));\n        }\n        if (protocolVersion != null) {\n            await this.components.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(protocolVersion));\n        }\n        log('identify completed for peer %p and protocols %o', id, protocols);\n        // TODO: Add and score our observed addr\n        log('received observed address of %s', cleanObservedAddr?.toString());\n        // this.components.addressManager.addObservedAddr(observedAddr)\n    }\n    /**\n     * Sends the `Identify` response with the Signed Peer Record\n     * to the requesting peer over the given `connection`\n     */\n    async _handleIdentify(data) {\n        const { connection, stream } = data;\n        const timeoutController = new TimeoutController(this.init.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        try {\n            const publicKey = this.components.peerId.publicKey ?? new Uint8Array(0);\n            const peerData = await this.components.peerStore.get(this.components.peerId);\n            const multiaddrs = this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code));\n            let signedPeerRecord = peerData.peerRecordEnvelope;\n            if (multiaddrs.length > 0 && signedPeerRecord == null) {\n                const peerRecord = new PeerRecord({\n                    peerId: this.components.peerId,\n                    multiaddrs\n                });\n                const envelope = await RecordEnvelope.seal(peerRecord, this.components.peerId);\n                await this.components.peerStore.addressBook.consumePeerRecord(envelope);\n                signedPeerRecord = envelope.marshal().subarray();\n            }\n            const message = Identify.encode({\n                protocolVersion: this.host.protocolVersion,\n                agentVersion: this.host.agentVersion,\n                publicKey,\n                listenAddrs: multiaddrs.map(addr => addr.bytes),\n                signedPeerRecord,\n                observedAddr: connection.remoteAddr.bytes,\n                protocols: peerData.protocols\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, timeoutController.signal);\n            const msgWithLenPrefix = pipe([message], lp.encode());\n            await source.sink(msgWithLenPrefix);\n        }\n        catch (err) {\n            log.error('could not respond to identify request', err);\n        }\n        finally {\n            stream.close();\n            timeoutController.clear();\n        }\n    }\n    /**\n     * Reads the Identify Push message from the given `connection`\n     */\n    async _handlePush(data) {\n        const { connection, stream } = data;\n        const timeoutController = new TimeoutController(this.init.timeout);\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, timeoutController.signal);\n        }\n        catch { }\n        let message;\n        try {\n            // make stream abortable\n            const source = abortableDuplex(stream, timeoutController.signal);\n            const data = await pipe([], source, lp.decode({\n                maxDataLength: this.init.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }), async (source) => await first(source));\n            if (data != null) {\n                message = Identify.decode(data);\n            }\n        }\n        catch (err) {\n            return log.error('received invalid message', err);\n        }\n        finally {\n            stream.close();\n            timeoutController.clear();\n        }\n        if (message == null) {\n            return log.error('received invalid message');\n        }\n        const id = connection.remotePeer;\n        if (this.components.peerId.equals(id)) {\n            log('received push from ourselves?');\n            return;\n        }\n        log('received push from %p', id);\n        if (message.signedPeerRecord != null) {\n            log('received signedPeerRecord in push');\n            try {\n                const envelope = await RecordEnvelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);\n                if (await this.components.peerStore.addressBook.consumePeerRecord(envelope)) {\n                    log('consumed signedPeerRecord sent in push');\n                    await this.components.peerStore.protoBook.set(id, message.protocols);\n                    return;\n                }\n                else {\n                    log('failed to consume signedPeerRecord sent in push');\n                }\n            }\n            catch (err) {\n                log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n            }\n        }\n        else {\n            log('did not receive signedPeerRecord in push');\n        }\n        // LEGACY: Update peers data in PeerStore\n        try {\n            await this.components.peerStore.addressBook.set(id, message.listenAddrs.map((addr) => multiaddr(addr)));\n        }\n        catch (err) {\n            log.error('received invalid addrs', err);\n        }\n        // Update the protocols\n        try {\n            await this.components.peerStore.protoBook.set(id, message.protocols);\n        }\n        catch (err) {\n            log.error('received invalid protocols', err);\n        }\n        log('handled push from %p', id);\n    }\n    /**\n     * Takes the `addr` and converts it to a Multiaddr if possible\n     */\n    static getCleanMultiaddr(addr) {\n        if (addr != null && addr.length > 0) {\n            try {\n                return multiaddr(addr);\n            }\n            catch {\n            }\n        }\n    }\n}\n/**\n * The protocols the IdentifyService supports\n */\nexport const multicodecs = {\n    IDENTIFY: MULTICODEC_IDENTIFY,\n    IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH\n};\nexport const Message = { Identify };\n//# sourceMappingURL=index.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { encodeMessage, decodeMessage, message, enumeration } from 'protons-runtime';\nexport var FetchRequest;\n(function (FetchRequest) {\n    let _codec;\n    FetchRequest.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || obj.identifier !== '') {\n                    w.uint32(10);\n                    w.string(obj.identifier);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    identifier: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.identifier = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    FetchRequest.encode = (obj) => {\n        return encodeMessage(obj, FetchRequest.codec());\n    };\n    FetchRequest.decode = (buf) => {\n        return decodeMessage(buf, FetchRequest.codec());\n    };\n})(FetchRequest || (FetchRequest = {}));\nexport var FetchResponse;\n(function (FetchResponse) {\n    let StatusCode;\n    (function (StatusCode) {\n        StatusCode[\"OK\"] = \"OK\";\n        StatusCode[\"NOT_FOUND\"] = \"NOT_FOUND\";\n        StatusCode[\"ERROR\"] = \"ERROR\";\n    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));\n    let __StatusCodeValues;\n    (function (__StatusCodeValues) {\n        __StatusCodeValues[__StatusCodeValues[\"OK\"] = 0] = \"OK\";\n        __StatusCodeValues[__StatusCodeValues[\"NOT_FOUND\"] = 1] = \"NOT_FOUND\";\n        __StatusCodeValues[__StatusCodeValues[\"ERROR\"] = 2] = \"ERROR\";\n    })(__StatusCodeValues || (__StatusCodeValues = {}));\n    (function (StatusCode) {\n        StatusCode.codec = () => {\n            return enumeration(__StatusCodeValues);\n        };\n    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));\n    let _codec;\n    FetchResponse.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || (obj.status != null && __StatusCodeValues[obj.status] !== 0)) {\n                    w.uint32(8);\n                    FetchResponse.StatusCode.codec().encode(obj.status, w);\n                }\n                if (opts.writeDefaults === true || (obj.data != null && obj.data.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    status: StatusCode.OK,\n                    data: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.status = FetchResponse.StatusCode.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    FetchResponse.encode = (obj) => {\n        return encodeMessage(obj, FetchResponse.codec());\n    };\n    FetchResponse.decode = (buf) => {\n        return decodeMessage(buf, FetchResponse.codec());\n    };\n})(FetchResponse || (FetchResponse = {}));\n//# sourceMappingURL=proto.js.map","// https://github.com/libp2p/specs/tree/master/fetch#wire-protocol\nexport const PROTOCOL_VERSION = '0.0.1';\nexport const PROTOCOL_NAME = 'fetch';\n//# sourceMappingURL=constants.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport * as lp from 'it-length-prefixed';\nimport { FetchRequest, FetchResponse } from './pb/proto.js';\nimport { PROTOCOL_NAME, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nimport { fromString as uint8arrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8arrayToString } from 'uint8arrays/to-string';\nconst log = logger('libp2p:fetch');\n/**\n * A simple libp2p protocol for requesting a value corresponding to a key from a peer.\n * Developers can register one or more lookup function for retrieving the value corresponding to\n * a given key.  Each lookup function must act on a distinct part of the overall key space, defined\n * by a fixed prefix that all keys that should be routed to that lookup function will start with.\n */\nexport class FetchService {\n    constructor(components, init) {\n        this.started = false;\n        this.components = components;\n        this.protocol = `/${init.protocolPrefix ?? 'libp2p'}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n        this.lookupFunctions = new Map(); // Maps key prefix to value lookup function\n        this.handleMessage = this.handleMessage.bind(this);\n        this.init = init;\n    }\n    async start() {\n        await this.components.registrar.handle(this.protocol, (data) => {\n            void this.handleMessage(data)\n                .catch(err => {\n                log.error(err);\n            })\n                .finally(() => {\n                data.stream.close();\n            });\n        }, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Sends a request to fetch the value associated with the given key from the given peer\n     */\n    async fetch(peer, key, options = {}) {\n        log('dialing %s to %p', this.protocol, peer);\n        const connection = await this.components.connectionManager.openConnection(peer, options);\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            log('using default timeout of %d ms', this.init.timeout);\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream(this.protocol, {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            log('fetch %s', key);\n            const result = await pipe([FetchRequest.encode({ identifier: key })], lp.encode(), source, lp.decode(), async function (source) {\n                const buf = await first(source);\n                if (buf == null) {\n                    throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n                }\n                const response = FetchResponse.decode(buf);\n                switch (response.status) {\n                    case (FetchResponse.StatusCode.OK): {\n                        log('received status for %s ok', key);\n                        return response.data;\n                    }\n                    case (FetchResponse.StatusCode.NOT_FOUND): {\n                        log('received status for %s not found', key);\n                        return null;\n                    }\n                    case (FetchResponse.StatusCode.ERROR): {\n                        log('received status for %s error', key);\n                        const errmsg = uint8arrayToString(response.data);\n                        throw errCode(new Error('Error in fetch protocol response: ' + errmsg), codes.ERR_INVALID_PARAMETERS);\n                    }\n                    default: {\n                        log('received status for %s unknown', key);\n                        throw errCode(new Error('Unknown response status'), codes.ERR_INVALID_MESSAGE);\n                    }\n                }\n            });\n            return result ?? null;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Invoked when a fetch request is received.  Reads the request message off the given stream and\n     * responds based on looking up the key in the request via the lookup callback that corresponds\n     * to the key's prefix.\n     */\n    async handleMessage(data) {\n        const { stream } = data;\n        const self = this;\n        await pipe(stream, lp.decode(), async function* (source) {\n            const buf = await first(source);\n            if (buf == null) {\n                throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n            }\n            // for await (const buf of source) {\n            const request = FetchRequest.decode(buf);\n            let response;\n            const lookup = self._getLookupFunction(request.identifier);\n            if (lookup != null) {\n                log('look up data with identifier %s', request.identifier);\n                const data = await lookup(request.identifier);\n                if (data != null) {\n                    log('sending status for %s ok', request.identifier);\n                    response = { status: FetchResponse.StatusCode.OK, data };\n                }\n                else {\n                    log('sending status for %s not found', request.identifier);\n                    response = { status: FetchResponse.StatusCode.NOT_FOUND, data: new Uint8Array(0) };\n                }\n            }\n            else {\n                log('sending status for %s error', request.identifier);\n                const errmsg = uint8arrayFromString(`No lookup function registered for key: ${request.identifier}`);\n                response = { status: FetchResponse.StatusCode.ERROR, data: errmsg };\n            }\n            yield FetchResponse.encode(response);\n        }, lp.encode(), stream);\n    }\n    /**\n     * Given a key, finds the appropriate function for looking up its corresponding value, based on\n     * the key's prefix.\n     */\n    _getLookupFunction(key) {\n        for (const prefix of this.lookupFunctions.keys()) {\n            if (key.startsWith(prefix)) {\n                return this.lookupFunctions.get(prefix);\n            }\n        }\n    }\n    /**\n     * Registers a new lookup callback that can map keys to values, for a given set of keys that\n     * share the same prefix\n     *\n     * @example\n     *\n     * ```js\n     * // ...\n     * libp2p.fetchService.registerLookupFunction('/prefix', (key) => { ... })\n     * ```\n     */\n    registerLookupFunction(prefix, lookup) {\n        if (this.lookupFunctions.has(prefix)) {\n            throw errCode(new Error(\"Fetch protocol handler for key prefix '\" + prefix + \"' already registered\"), codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        this.lookupFunctions.set(prefix, lookup);\n    }\n    /**\n     * Registers a new lookup callback that can map keys to values, for a given set of keys that\n     * share the same prefix.\n     *\n     * @example\n     *\n     * ```js\n     * // ...\n     * libp2p.fetchService.unregisterLookupFunction('/prefix')\n     * ```\n     */\n    unregisterLookupFunction(prefix, lookup) {\n        if (lookup != null) {\n            const existingLookup = this.lookupFunctions.get(prefix);\n            if (existingLookup !== lookup) {\n                return;\n            }\n        }\n        this.lookupFunctions.delete(prefix);\n    }\n}\n//# sourceMappingURL=index.js.map","export const PROTOCOL = '/ipfs/ping/1.0.0';\nexport const PING_LENGTH = 32;\nexport const PROTOCOL_VERSION = '1.0.0';\nexport const PROTOCOL_NAME = 'ping';\n//# sourceMappingURL=constants.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { randomBytes } from '@libp2p/crypto';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:ping');\nexport class PingService {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.protocol = `/${init.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n        this.init = init;\n    }\n    async start() {\n        await this.components.registrar.handle(this.protocol, this.handleMessage, {\n            maxInboundStreams: this.init.maxInboundStreams,\n            maxOutboundStreams: this.init.maxOutboundStreams\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * A handler to register with Libp2p to process ping messages\n     */\n    handleMessage(data) {\n        const { stream } = data;\n        void pipe(stream, stream)\n            .catch(err => {\n            log.error(err);\n        });\n    }\n    /**\n     * Ping a given peer and wait for its response, getting the operation latency.\n     *\n     * @param {PeerId|Multiaddr} peer\n     * @returns {Promise<number>}\n     */\n    async ping(peer, options = {}) {\n        log('dialing %s to %p', this.protocol, peer);\n        const start = Date.now();\n        const data = randomBytes(PING_LENGTH);\n        const connection = await this.components.connectionManager.openConnection(peer, options);\n        let timeoutController;\n        let signal = options.signal;\n        let stream;\n        // create a timeout if no abort signal passed\n        if (signal == null) {\n            timeoutController = new TimeoutController(this.init.timeout);\n            signal = timeoutController.signal;\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, timeoutController.signal);\n            }\n            catch { }\n        }\n        try {\n            stream = await connection.newStream([this.protocol], {\n                signal\n            });\n            // make stream abortable\n            const source = abortableDuplex(stream, signal);\n            const result = await pipe([data], source, async (source) => await first(source));\n            const end = Date.now();\n            if (result == null || !uint8ArrayEquals(data, result.subarray())) {\n                throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK);\n            }\n            return end - start;\n        }\n        finally {\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { isLoopbackAddr } from 'is-loopback-addr';\n/**\n * Check if a given multiaddr is a loopback address.\n */\nexport function isLoopback(ma) {\n    const { address } = ma.nodeAddress();\n    return isLoopbackAddr(address);\n}\n//# sourceMappingURL=is-loopback.js.map","import { upnpNat } from '@achingbrain/nat-port-mapper';\nimport { logger } from '@libp2p/logger';\nimport { fromNodeAddress } from '@multiformats/multiaddr';\nimport { isBrowser } from 'wherearewe';\nimport isPrivateIp from 'private-ip';\nimport * as pkg from './version.js';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isLoopback } from '@libp2p/utils/multiaddr/is-loopback';\nconst log = logger('libp2p:nat');\nconst DEFAULT_TTL = 7200;\nfunction highPort(min = 1024, max = 65535) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport class NatManager {\n    constructor(components, init) {\n        this.components = components;\n        this.started = false;\n        this.enabled = init.enabled;\n        this.externalAddress = init.externalAddress;\n        this.localAddress = init.localAddress;\n        this.description = init.description ?? `${pkg.name}@${pkg.version} ${this.components.peerId.toString()}`;\n        this.ttl = init.ttl ?? DEFAULT_TTL;\n        this.keepAlive = init.keepAlive ?? true;\n        this.gateway = init.gateway;\n        if (this.ttl < DEFAULT_TTL) {\n            throw errCode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), codes.ERR_INVALID_PARAMETERS);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() { }\n    /**\n     * Attempt to use uPnP to configure port mapping using the current gateway.\n     *\n     * Run after start to ensure the transport manager has all addresses configured.\n     */\n    afterStart() {\n        if (isBrowser || !this.enabled || this.started) {\n            return;\n        }\n        this.started = true;\n        // done async to not slow down startup\n        void this._start().catch((err) => {\n            // hole punching errors are non-fatal\n            log.error(err);\n        });\n    }\n    async _start() {\n        const addrs = this.components.transportManager.getAddrs();\n        for (const addr of addrs) {\n            // try to open uPnP ports for each thin waist address\n            const { family, host, port, transport } = addr.toOptions();\n            if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n                // only bare tcp addresses\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (isLoopback(addr)) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (family !== 4) {\n                // ignore ipv6\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            const client = await this._getClient();\n            const publicIp = this.externalAddress ?? await client.externalIp();\n            const isPrivate = isPrivateIp(publicIp);\n            if (isPrivate === true) {\n                throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);\n            }\n            if (isPrivate == null) {\n                throw new Error(`${publicIp} is not an IP address`);\n            }\n            const publicPort = highPort();\n            log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);\n            await client.map({\n                publicPort,\n                localPort: port,\n                localAddress: this.localAddress,\n                protocol: transport.toUpperCase() === 'TCP' ? 'TCP' : 'UDP'\n            });\n            this.components.addressManager.addObservedAddr(fromNodeAddress({\n                family: 4,\n                address: publicIp,\n                port: publicPort\n            }, transport));\n        }\n    }\n    async _getClient() {\n        if (this.client != null) {\n            return this.client;\n        }\n        this.client = await upnpNat({\n            description: this.description,\n            ttl: this.ttl,\n            keepAlive: this.keepAlive,\n            gateway: this.gateway\n        });\n        return this.client;\n    }\n    /**\n     * Stops the NAT manager\n     */\n    async stop() {\n        if (isBrowser || this.client == null) {\n            return;\n        }\n        try {\n            await this.client.close();\n            this.client = undefined;\n        }\n        catch (err) {\n            log.error(err);\n        }\n    }\n}\n//# sourceMappingURL=nat-manager.js.map","import { RecordEnvelope, PeerRecord } from '@libp2p/peer-record';\nimport { logger } from '@libp2p/logger';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:peer-record-updater');\nexport class PeerRecordUpdater {\n    constructor(components) {\n        this.components = components;\n        this.started = false;\n        this.update = this.update.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n        this.components.transportManager.addEventListener('listener:listening', this.update);\n        this.components.transportManager.addEventListener('listener:close', this.update);\n        this.components.addressManager.addEventListener('change:addresses', this.update);\n    }\n    async stop() {\n        this.started = false;\n        this.components.transportManager.removeEventListener('listener:listening', this.update);\n        this.components.transportManager.removeEventListener('listener:close', this.update);\n        this.components.addressManager.removeEventListener('change:addresses', this.update);\n    }\n    /**\n     * Create (or update if existing) self peer record and store it in the AddressBook.\n     */\n    update() {\n        Promise.resolve()\n            .then(async () => {\n            const peerRecord = new PeerRecord({\n                peerId: this.components.peerId,\n                multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n            });\n            const envelope = await RecordEnvelope.seal(peerRecord, this.components.peerId);\n            await this.components.peerStore.addressBook.consumePeerRecord(envelope);\n        })\n            .catch(err => {\n            log.error('Could not update self peer record: %o', err);\n        });\n    }\n}\n//# sourceMappingURL=peer-record-updater.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTPeerRouting {\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async findPeer(peerId, options = {}) {\n        for await (const event of this.dht.findPeer(peerId, options)) {\n            if (event.name === 'FINAL_PEER') {\n                return event.peer;\n            }\n        }\n        throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n    }\n    async *getClosestPeers(key, options = {}) {\n        for await (const event of this.dht.getClosestPeers(key, options)) {\n            if (event.name === 'FINAL_PEER') {\n                yield event.peer;\n            }\n        }\n    }\n}\n//# sourceMappingURL=dht-peer-routing.js.map","export const codes = {\n    ERR_INVALID_PARAMETERS: 'ERR_INVALID_PARAMETERS',\n    ERR_NOT_FOUND: 'ERR_NOT_FOUND'\n};\n//# sourceMappingURL=errors.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { codes } from './errors.js';\nimport { PeerRecord, RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:address-book');\nconst EVENT_NAME = 'change:multiaddrs';\nasync function allowAll() {\n    return true;\n}\nexport class PeerStoreAddressBook {\n    constructor(dispatchEvent, store, addressFilter) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n        this.addressFilter = addressFilter ?? allowAll;\n    }\n    /**\n     * ConsumePeerRecord adds addresses from a signed peer record contained in a record envelope.\n     * This will return a boolean that indicates if the record was successfully processed and added\n     * into the AddressBook.\n     */\n    async consumePeerRecord(envelope) {\n        log.trace('consumePeerRecord await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('consumePeerRecord got write lock');\n        let peerId;\n        let peer;\n        let updatedPeer;\n        try {\n            let peerRecord;\n            try {\n                peerRecord = PeerRecord.createFromProtobuf(envelope.payload);\n            }\n            catch (err) {\n                log.error('invalid peer record received');\n                return false;\n            }\n            peerId = peerRecord.peerId;\n            const multiaddrs = peerRecord.multiaddrs;\n            // Verify peerId\n            if (!peerId.equals(envelope.peerId)) {\n                log('signing key does not match PeerId in the PeerRecord');\n                return false;\n            }\n            // ensure the record has multiaddrs\n            if (multiaddrs == null || multiaddrs.length === 0) {\n                return false;\n            }\n            if (await this.store.has(peerId)) {\n                peer = await this.store.load(peerId);\n                if (peer.peerRecordEnvelope != null) {\n                    const storedEnvelope = await RecordEnvelope.createFromProtobuf(peer.peerRecordEnvelope);\n                    const storedRecord = PeerRecord.createFromProtobuf(storedEnvelope.payload);\n                    // ensure seq is greater than, or equal to, the last received\n                    if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n                        log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber);\n                        return false;\n                    }\n                }\n            }\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter, true);\n            // Replace unsigned addresses by the new ones from the record\n            // TODO: Once we have ttls for the addresses, we should merge these in\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                addresses,\n                peerRecordEnvelope: envelope.marshal().subarray()\n            });\n            log('stored provided peer record for %p', peerRecord.peerId);\n        }\n        finally {\n            log.trace('consumePeerRecord release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(({ multiaddr }) => multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        return true;\n    }\n    async getRawEnvelope(peerId) {\n        log.trace('getRawEnvelope await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getRawEnvelope got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.peerRecordEnvelope;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('getRawEnvelope release read lock');\n            release();\n        }\n    }\n    /**\n     * Get an Envelope containing a PeerRecord for the given peer.\n     * Returns undefined if no record exists.\n     */\n    async getPeerRecord(peerId) {\n        const raw = await this.getRawEnvelope(peerId);\n        if (raw == null) {\n            return undefined;\n        }\n        return await RecordEnvelope.createFromProtobuf(raw);\n    }\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get wait for read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.addresses;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return [];\n    }\n    async set(peerId, multiaddrs) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(multiaddrs)) {\n            log.error('multiaddrs must be an array of Multiaddrs');\n            throw new CodeError('multiaddrs must be an array of Multiaddrs', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let hasPeer = false;\n        let peer;\n        let updatedPeer;\n        try {\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter);\n            // No valid addresses found\n            if (addresses.length === 0) {\n                return;\n            }\n            try {\n                peer = await this.store.load(peerId);\n                hasPeer = true;\n                if (new Set([\n                    ...addresses.map(({ multiaddr }) => multiaddr.toString()),\n                    ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())\n                ]).size === peer.addresses.length && addresses.length === peer.addresses.length) {\n                    // not changing anything, no need to update\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, { addresses });\n            log('set multiaddrs for %p', peerId);\n        }\n        finally {\n            log.trace('set multiaddrs for %p', peerId);\n            log('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        // Notify the existence of a new peer\n        if (!hasPeer) {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: {\n                    id: peerId,\n                    multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                    protocols: updatedPeer.protocols\n                }\n            }));\n        }\n    }\n    async add(peerId, multiaddrs) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(multiaddrs)) {\n            log.error('multiaddrs must be an array of Multiaddrs');\n            throw new CodeError('multiaddrs must be an array of Multiaddrs', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('add await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('add got write lock');\n        let hasPeer;\n        let peer;\n        let updatedPeer;\n        try {\n            const addresses = await filterMultiaddrs(peerId, multiaddrs, this.addressFilter);\n            // No valid addresses found\n            if (addresses.length === 0) {\n                return;\n            }\n            try {\n                peer = await this.store.load(peerId);\n                hasPeer = true;\n                if (new Set([\n                    ...addresses.map(({ multiaddr }) => multiaddr.toString()),\n                    ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())\n                ]).size === peer.addresses.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, { addresses });\n            log('added multiaddrs for %p', peerId);\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n            }\n        }));\n        // Notify the existence of a new peer\n        if (hasPeer === true) {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: {\n                    id: peerId,\n                    multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr),\n                    protocols: updatedPeer.protocols\n                }\n            }));\n        }\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                addresses: []\n            });\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    multiaddrs: [],\n                    oldMultiaddrs: peer == null ? [] : peer.addresses.map(({ multiaddr }) => multiaddr)\n                }\n            }));\n        }\n    }\n}\nasync function filterMultiaddrs(peerId, multiaddrs, addressFilter, isCertified = false) {\n    const output = [];\n    await Promise.all(multiaddrs.map(async (multiaddr) => {\n        if (!isMultiaddr(multiaddr)) {\n            log.error('multiaddr must be an instance of Multiaddr');\n            throw new CodeError('multiaddr must be an instance of Multiaddr', codes.ERR_INVALID_PARAMETERS);\n        }\n        const include = await addressFilter(peerId, multiaddr);\n        if (!include) {\n            return;\n        }\n        output.push({\n            multiaddr,\n            isCertified\n        });\n    }));\n    return output;\n}\n//# sourceMappingURL=address-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:key-book');\nconst EVENT_NAME = 'change:pubkey';\nexport class PeerStoreKeyBook {\n    /**\n     * The KeyBook is responsible for keeping the known public keys of a peer\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    /**\n     * Set the Peer public key\n     */\n    async set(peerId, publicKey) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!(publicKey instanceof Uint8Array)) {\n            log.error('publicKey must be an instance of Uint8Array to store data');\n            throw new CodeError('publicKey must be an instance of PublicKey', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let updatedKey = false;\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if ((peer.pubKey != null) && uint8arrayEquals(peer.pubKey, publicKey)) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                pubKey: publicKey\n            });\n            updatedKey = true;\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        if (updatedKey) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    publicKey,\n                    oldPublicKey: peer == null ? undefined : peer.pubKey\n                }\n            }));\n        }\n    }\n    /**\n     * Get Public key of the given PeerId, if stored\n     */\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get await write lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got write lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.pubKey;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log('get release write lock');\n            release();\n        }\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                pubKey: undefined\n            });\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                publicKey: undefined,\n                oldPublicKey: peer == null ? undefined : peer.pubKey\n            }\n        }));\n    }\n}\n//# sourceMappingURL=key-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:metadata-book');\nconst EVENT_NAME = 'change:metadata';\nexport class PeerStoreMetadataBook {\n    /**\n     * The MetadataBook is responsible for keeping metadata\n     * about known peers\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    /**\n     * Get the known data of a provided peer\n     */\n    async get(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('get await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.metadata;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return new Map();\n    }\n    /**\n     * Get specific metadata value, if it exists\n     */\n    async getValue(peerId, key) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('getValue await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getValue got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.metadata.get(key);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('getValue release write lock');\n            release();\n        }\n    }\n    async set(peerId, metadata) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!(metadata instanceof Map)) {\n            log.error('valid metadata must be provided to store data');\n            throw new CodeError('valid metadata must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.mergeOrCreate(peerId, {\n                metadata\n            });\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                metadata,\n                oldMetadata: peer == null ? new Map() : peer.metadata\n            }\n        }));\n    }\n    /**\n     * Set metadata key and value of a provided peer\n     */\n    async setValue(peerId, key, value) {\n        peerId = peerIdFromPeerId(peerId);\n        if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n            log.error('valid key and value must be provided to store data');\n            throw new CodeError('valid key and value must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('setValue await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('setValue got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                const existingValue = peer.metadata.get(key);\n                if (existingValue != null && uint8ArrayEquals(value, existingValue)) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, {\n                metadata: new Map([[key, value]])\n            });\n        }\n        finally {\n            log.trace('setValue release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                metadata: updatedPeer.metadata,\n                oldMetadata: peer == null ? new Map() : peer.metadata\n            }\n        }));\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            if (peer != null) {\n                await this.store.patch(peerId, {\n                    metadata: new Map()\n                });\n            }\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    metadata: new Map(),\n                    oldMetadata: peer.metadata\n                }\n            }));\n        }\n    }\n    async deleteValue(peerId, key) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('deleteValue await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('deleteValue got write lock');\n        let metadata;\n        let peer;\n        try {\n            peer = await this.store.load(peerId);\n            metadata = peer.metadata;\n            metadata.delete(key);\n            await this.store.patch(peerId, {\n                metadata\n            });\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('deleteValue release write lock');\n            release();\n        }\n        if (metadata != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    metadata,\n                    oldMetadata: peer == null ? new Map() : peer.metadata\n                }\n            }));\n        }\n    }\n}\n//# sourceMappingURL=metadata-book.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:proto-book');\nconst EVENT_NAME = 'change:protocols';\nexport class PeerStoreProtoBook {\n    /**\n     * The ProtoBook is responsible for keeping the known supported\n     * protocols of a peer\n     */\n    constructor(dispatchEvent, store) {\n        this.dispatchEvent = dispatchEvent;\n        this.store = store;\n    }\n    async get(peerId) {\n        log.trace('get wait for read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            const peer = await this.store.load(peerId);\n            return peer.protocols;\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n        return [];\n    }\n    async set(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('set await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('set got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if (new Set([\n                    ...protocols\n                ]).size === peer.protocols.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                protocols\n            });\n            log('stored provided protocols for %p', peerId);\n        }\n        finally {\n            log.trace('set release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async add(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('add await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('add got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                if (new Set([\n                    ...peer.protocols,\n                    ...protocols\n                ]).size === peer.protocols.length) {\n                    return;\n                }\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.mergeOrCreate(peerId, {\n                protocols\n            });\n            log('added provided protocols for %p', peerId);\n        }\n        finally {\n            log.trace('add release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async remove(peerId, protocols) {\n        peerId = peerIdFromPeerId(peerId);\n        if (!Array.isArray(protocols)) {\n            log.error('protocols must be provided to store data');\n            throw new CodeError('protocols must be provided', codes.ERR_INVALID_PARAMETERS);\n        }\n        log.trace('remove await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('remove got write lock');\n        let peer;\n        let updatedPeer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n                const protocolSet = new Set(peer.protocols);\n                for (const protocol of protocols) {\n                    protocolSet.delete(protocol);\n                }\n                if (peer.protocols.length === protocolSet.size) {\n                    return;\n                }\n                protocols = Array.from(protocolSet);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            updatedPeer = await this.store.patchOrCreate(peerId, {\n                protocols\n            });\n        }\n        finally {\n            log.trace('remove release write lock');\n            release();\n        }\n        this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n            detail: {\n                peerId,\n                protocols: updatedPeer.protocols,\n                oldProtocols: peer == null ? [] : peer.protocols\n            }\n        }));\n    }\n    async delete(peerId) {\n        peerId = peerIdFromPeerId(peerId);\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        let peer;\n        try {\n            try {\n                peer = await this.store.load(peerId);\n            }\n            catch (err) {\n                if (err.code !== codes.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n            await this.store.patchOrCreate(peerId, {\n                protocols: []\n            });\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n        if (peer != null) {\n            this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n                detail: {\n                    peerId,\n                    protocols: [],\n                    oldProtocols: peer.protocols\n                }\n            }));\n        }\n    }\n}\n//# sourceMappingURL=proto-book.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Peer;\n(function (Peer) {\n    let _codec;\n    Peer.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.addresses != null) {\n                    for (const value of obj.addresses) {\n                        w.uint32(10);\n                        Address.codec().encode(value, w);\n                    }\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(18);\n                        w.string(value);\n                    }\n                }\n                if (obj.metadata != null) {\n                    for (const value of obj.metadata) {\n                        w.uint32(26);\n                        Metadata.codec().encode(value, w);\n                    }\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(34);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.peerRecordEnvelope != null) {\n                    w.uint32(42);\n                    w.bytes(obj.peerRecordEnvelope);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    addresses: [],\n                    protocols: [],\n                    metadata: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.addresses.push(Address.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 3:\n                            obj.metadata.push(Metadata.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 5:\n                            obj.peerRecordEnvelope = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Peer.encode = (obj) => {\n        return encodeMessage(obj, Peer.codec());\n    };\n    Peer.decode = (buf) => {\n        return decodeMessage(buf, Peer.codec());\n    };\n})(Peer || (Peer = {}));\nexport var Address;\n(function (Address) {\n    let _codec;\n    Address.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.multiaddr);\n                }\n                if (obj.isCertified != null) {\n                    w.uint32(16);\n                    w.bool(obj.isCertified);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    multiaddr: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.multiaddr = reader.bytes();\n                            break;\n                        case 2:\n                            obj.isCertified = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Address.encode = (obj) => {\n        return encodeMessage(obj, Address.codec());\n    };\n    Address.decode = (buf) => {\n        return decodeMessage(buf, Address.codec());\n    };\n})(Address || (Address = {}));\nexport var Metadata;\n(function (Metadata) {\n    let _codec;\n    Metadata.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.key != null && obj.key !== '')) {\n                    w.uint32(10);\n                    w.string(obj.key);\n                }\n                if ((obj.value != null && obj.value.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    key: '',\n                    value: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.string();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Metadata.encode = (obj) => {\n        return encodeMessage(obj, Metadata.codec());\n    };\n    Metadata.decode = (buf) => {\n        return decodeMessage(buf, Metadata.codec());\n    };\n})(Metadata || (Metadata = {}));\n//# sourceMappingURL=peer.js.map","import { logger } from '@libp2p/logger';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { Key } from 'interface-datastore/key';\nimport { base32 } from 'multiformats/bases/base32';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Peer as PeerPB } from './pb/peer.js';\nimport mortice from 'mortice';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nconst log = logger('libp2p:peer-store:store');\nconst NAMESPACE_COMMON = '/peers/';\nexport class PersistentStore {\n    constructor(components) {\n        this.components = components;\n        this.lock = mortice({\n            name: 'peer-store',\n            singleProcess: true\n        });\n    }\n    _peerIdToDatastoreKey(peerId) {\n        if (peerId.type == null) {\n            log.error('peerId must be an instance of peer-id to store data');\n            throw new CodeError('peerId must be an instance of peer-id', codes.ERR_INVALID_PARAMETERS);\n        }\n        const b32key = peerId.toCID().toString();\n        return new Key(`${NAMESPACE_COMMON}${b32key}`);\n    }\n    async has(peerId) {\n        return await this.components.datastore.has(this._peerIdToDatastoreKey(peerId));\n    }\n    async delete(peerId) {\n        await this.components.datastore.delete(this._peerIdToDatastoreKey(peerId));\n    }\n    async load(peerId) {\n        const buf = await this.components.datastore.get(this._peerIdToDatastoreKey(peerId));\n        const peer = PeerPB.decode(buf);\n        const metadata = new Map();\n        for (const meta of peer.metadata) {\n            metadata.set(meta.key, meta.value);\n        }\n        return {\n            ...peer,\n            id: peerId,\n            addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {\n                return {\n                    multiaddr: multiaddr(ma),\n                    isCertified: isCertified ?? false\n                };\n            }),\n            metadata,\n            pubKey: peer.pubKey ?? undefined,\n            peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined\n        };\n    }\n    async save(peer) {\n        if (peer.pubKey != null && peer.id.publicKey != null && !uint8arrayEquals(peer.pubKey, peer.id.publicKey)) {\n            log.error('peer publicKey bytes do not match peer id publicKey bytes');\n            throw new CodeError('publicKey bytes do not match peer id publicKey bytes', codes.ERR_INVALID_PARAMETERS);\n        }\n        // dedupe addresses\n        const addressSet = new Set();\n        const addresses = peer.addresses\n            .filter(address => {\n            if (addressSet.has(address.multiaddr.toString())) {\n                return false;\n            }\n            addressSet.add(address.multiaddr.toString());\n            return true;\n        })\n            .sort((a, b) => {\n            return a.multiaddr.toString().localeCompare(b.multiaddr.toString());\n        })\n            .map(({ multiaddr, isCertified }) => ({\n            multiaddr: multiaddr.bytes,\n            isCertified\n        }));\n        const metadata = [];\n        [...peer.metadata.keys()].sort().forEach(key => {\n            const value = peer.metadata.get(key);\n            if (value != null) {\n                metadata.push({ key, value });\n            }\n        });\n        const buf = PeerPB.encode({\n            addresses,\n            protocols: peer.protocols.sort(),\n            pubKey: peer.pubKey,\n            metadata,\n            peerRecordEnvelope: peer.peerRecordEnvelope\n        });\n        await this.components.datastore.put(this._peerIdToDatastoreKey(peer.id), buf.subarray());\n        return await this.load(peer.id);\n    }\n    async patch(peerId, data) {\n        const peer = await this.load(peerId);\n        return await this._patch(peerId, data, peer);\n    }\n    async patchOrCreate(peerId, data) {\n        let peer;\n        try {\n            peer = await this.load(peerId);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n            peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };\n        }\n        return await this._patch(peerId, data, peer);\n    }\n    async _patch(peerId, data, peer) {\n        return await this.save({\n            ...peer,\n            ...data,\n            id: peerId\n        });\n    }\n    async merge(peerId, data) {\n        const peer = await this.load(peerId);\n        return await this._merge(peerId, data, peer);\n    }\n    async mergeOrCreate(peerId, data) {\n        /** @type {Peer} */\n        let peer;\n        try {\n            peer = await this.load(peerId);\n        }\n        catch (err) {\n            if (err.code !== codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n            peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };\n        }\n        return await this._merge(peerId, data, peer);\n    }\n    async _merge(peerId, data, peer) {\n        // if the peer has certified addresses, use those in\n        // favour of the supplied versions\n        const addresses = new Map();\n        peer.addresses.forEach((addr) => {\n            addresses.set(addr.multiaddr.toString(), addr.isCertified);\n        });\n        (data.addresses ?? []).forEach(addr => {\n            const addrString = addr.multiaddr.toString();\n            const isAlreadyCertified = Boolean(addresses.get(addrString));\n            const isCertified = isAlreadyCertified || addr.isCertified;\n            addresses.set(addrString, isCertified);\n        });\n        return await this.save({\n            id: peerId,\n            addresses: Array.from(addresses.entries()).map(([addrStr, isCertified]) => {\n                return {\n                    multiaddr: multiaddr(addrStr),\n                    isCertified\n                };\n            }),\n            protocols: Array.from(new Set([\n                ...(peer.protocols ?? []),\n                ...(data.protocols ?? [])\n            ])),\n            metadata: new Map([\n                ...(peer.metadata?.entries() ?? []),\n                ...(data.metadata?.entries() ?? [])\n            ]),\n            pubKey: data.pubKey ?? (peer != null ? peer.pubKey : undefined),\n            peerRecordEnvelope: data.peerRecordEnvelope ?? (peer != null ? peer.peerRecordEnvelope : undefined)\n        });\n    }\n    async *all() {\n        for await (const key of this.components.datastore.queryKeys({\n            prefix: NAMESPACE_COMMON\n        })) {\n            // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n            const base32Str = key.toString().split('/')[2];\n            const buf = base32.decode(base32Str);\n            yield this.load(peerIdFromBytes(buf));\n        }\n    }\n}\n//# sourceMappingURL=store.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Tags;\n(function (Tags) {\n    let _codec;\n    Tags.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.tags != null) {\n                    for (const value of obj.tags) {\n                        w.uint32(10);\n                        Tag.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    tags: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.tags.push(Tag.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Tags.encode = (obj) => {\n        return encodeMessage(obj, Tags.codec());\n    };\n    Tags.decode = (buf) => {\n        return decodeMessage(buf, Tags.codec());\n    };\n})(Tags || (Tags = {}));\nexport var Tag;\n(function (Tag) {\n    let _codec;\n    Tag.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.name != null && obj.name !== '')) {\n                    w.uint32(10);\n                    w.string(obj.name);\n                }\n                if (obj.value != null) {\n                    w.uint32(16);\n                    w.uint32(obj.value);\n                }\n                if (obj.expiry != null) {\n                    w.uint32(24);\n                    w.uint64(obj.expiry);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    name: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.name = reader.string();\n                            break;\n                        case 2:\n                            obj.value = reader.uint32();\n                            break;\n                        case 3:\n                            obj.expiry = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Tag.encode = (obj) => {\n        return encodeMessage(obj, Tag.codec());\n    };\n    Tag.decode = (buf) => {\n        return decodeMessage(buf, Tag.codec());\n    };\n})(Tag || (Tag = {}));\n//# sourceMappingURL=tags.js.map","import { logger } from '@libp2p/logger';\nimport { EventEmitter } from '@libp2p/interfaces/events';\nimport { PeerStoreAddressBook } from './address-book.js';\nimport { PeerStoreKeyBook } from './key-book.js';\nimport { PeerStoreMetadataBook } from './metadata-book.js';\nimport { PeerStoreProtoBook } from './proto-book.js';\nimport { PersistentStore } from './store.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Tags } from './pb/tags.js';\nconst log = logger('libp2p:peer-store');\n/**\n * An implementation of PeerStore that stores data in a Datastore\n */\nexport class PersistentPeerStore extends EventEmitter {\n    constructor(components, init = {}) {\n        super();\n        this.components = components;\n        this.store = new PersistentStore(components);\n        this.addressBook = new PeerStoreAddressBook(this.dispatchEvent.bind(this), this.store, init.addressFilter);\n        this.keyBook = new PeerStoreKeyBook(this.dispatchEvent.bind(this), this.store);\n        this.metadataBook = new PeerStoreMetadataBook(this.dispatchEvent.bind(this), this.store);\n        this.protoBook = new PeerStoreProtoBook(this.dispatchEvent.bind(this), this.store);\n    }\n    async forEach(fn) {\n        log.trace('getPeers await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('getPeers got read lock');\n        try {\n            for await (const peer of this.store.all()) {\n                if (peer.id.equals(this.components.peerId)) {\n                    // Skip self peer if present\n                    continue;\n                }\n                fn(peer);\n            }\n        }\n        finally {\n            log.trace('getPeers release read lock');\n            release();\n        }\n    }\n    async all() {\n        const output = [];\n        await this.forEach(peer => {\n            output.push(peer);\n        });\n        return output;\n    }\n    /**\n     * Delete the information of the given peer in every book\n     */\n    async delete(peerId) {\n        log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        log.trace('delete got write lock');\n        try {\n            await this.store.delete(peerId);\n        }\n        finally {\n            log.trace('delete release write lock');\n            release();\n        }\n    }\n    /**\n     * Get the stored information of a given peer\n     */\n    async get(peerId) {\n        log.trace('get await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('get got read lock');\n        try {\n            return await this.store.load(peerId);\n        }\n        finally {\n            log.trace('get release read lock');\n            release();\n        }\n    }\n    /**\n     * Returns true if we have a record of the peer\n     */\n    async has(peerId) {\n        log.trace('has await read lock');\n        const release = await this.store.lock.readLock();\n        log.trace('has got read lock');\n        try {\n            return await this.store.has(peerId);\n        }\n        finally {\n            log.trace('has release read lock');\n            release();\n        }\n    }\n    async tagPeer(peerId, tag, options = {}) {\n        const providedValue = options.value ?? 0;\n        const value = Math.round(providedValue);\n        const ttl = options.ttl ?? undefined;\n        if (value !== providedValue || value < 0 || value > 100) {\n            throw new CodeError('Tag value must be between 0-100', 'ERR_TAG_VALUE_OUT_OF_BOUNDS');\n        }\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        // do not allow duplicate tags\n        tags = tags.filter(t => t.name !== tag);\n        tags.push({\n            name: tag,\n            value,\n            expiry: ttl == null ? undefined : BigInt(Date.now() + ttl)\n        });\n        await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags }).subarray());\n    }\n    async unTagPeer(peerId, tag) {\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        tags = tags.filter(t => t.name !== tag);\n        await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags }).subarray());\n    }\n    async getTags(peerId) {\n        const buf = await this.metadataBook.getValue(peerId, 'tags');\n        let tags = [];\n        if (buf != null) {\n            tags = Tags.decode(buf).tags;\n        }\n        const now = BigInt(Date.now());\n        const unexpiredTags = tags.filter(tag => tag.expiry == null || tag.expiry > now);\n        if (unexpiredTags.length !== tags.length) {\n            // remove any expired tags\n            await this.metadataBook.setValue(peerId, 'tags', Tags.encode({ tags: unexpiredTags }).subarray());\n        }\n        return unexpiredTags.map(t => ({\n            name: t.name,\n            value: t.value ?? 0\n        }));\n    }\n}\n//# sourceMappingURL=index.js.map","import drain from 'it-drain';\nimport errCode from 'err-code';\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTContentRouting {\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async provide(cid) {\n        await drain(this.dht.provide(cid));\n    }\n    async *findProviders(cid, options = {}) {\n        for await (const event of this.dht.findProviders(cid, options)) {\n            if (event.name === 'PROVIDER') {\n                yield* event.providers;\n            }\n        }\n    }\n    async put(key, value, options) {\n        await drain(this.dht.put(key, value, options));\n    }\n    async get(key, options) {\n        for await (const event of this.dht.get(key, options)) {\n            if (event.name === 'VALUE') {\n                return event.value;\n            }\n        }\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n    }\n}\n//# sourceMappingURL=dht-content-routing.js.map","import errCode from 'err-code';\nimport { isStartable } from '@libp2p/interfaces/startable';\nexport class DefaultComponents {\n    constructor(init = {}) {\n        this._started = false;\n        this._peerId = init.peerId;\n        this._addressManager = init.addressManager;\n        this._peerStore = init.peerStore;\n        this._upgrader = init.upgrader;\n        this._metrics = init.metrics;\n        this._registrar = init.registrar;\n        this._connectionManager = init.connectionManager;\n        this._transportManager = init.transportManager;\n        this._connectionGater = init.connectionGater;\n        this._contentRouting = init.contentRouting;\n        this._peerRouting = init.peerRouting;\n        this._datastore = init.datastore;\n        this._connectionProtector = init.connectionProtector;\n        this._dht = init.dht;\n        this._pubsub = init.pubsub;\n        this._dialer = init.dialer;\n    }\n    isStarted() {\n        return this._started;\n    }\n    async beforeStart() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.beforeStart != null) {\n                await startable.beforeStart();\n            }\n        }));\n    }\n    async start() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            await startable.start();\n        }));\n        this._started = true;\n    }\n    async afterStart() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.afterStart != null) {\n                await startable.afterStart();\n            }\n        }));\n    }\n    async beforeStop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.beforeStop != null) {\n                await startable.beforeStop();\n            }\n        }));\n    }\n    async stop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            await startable.stop();\n        }));\n        this._started = false;\n    }\n    async afterStop() {\n        await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async (startable) => {\n            if (startable.afterStop != null) {\n                await startable.afterStop();\n            }\n        }));\n    }\n    get peerId() {\n        if (this._peerId == null) {\n            throw errCode(new Error('peerId not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerId;\n    }\n    set peerId(peerId) {\n        this._peerId = peerId;\n    }\n    get addressManager() {\n        if (this._addressManager == null) {\n            throw errCode(new Error('addressManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._addressManager;\n    }\n    set addressManager(addressManager) {\n        this._addressManager = addressManager;\n    }\n    get peerStore() {\n        if (this._peerStore == null) {\n            throw errCode(new Error('peerStore not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerStore;\n    }\n    set peerStore(peerStore) {\n        this._peerStore = peerStore;\n    }\n    get upgrader() {\n        if (this._upgrader == null) {\n            throw errCode(new Error('upgrader not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._upgrader;\n    }\n    set upgrader(upgrader) {\n        this._upgrader = upgrader;\n    }\n    get registrar() {\n        if (this._registrar == null) {\n            throw errCode(new Error('registrar not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._registrar;\n    }\n    set registrar(registrar) {\n        this._registrar = registrar;\n    }\n    get connectionManager() {\n        if (this._connectionManager == null) {\n            throw errCode(new Error('connectionManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._connectionManager;\n    }\n    set connectionManager(connectionManager) {\n        this._connectionManager = connectionManager;\n    }\n    get transportManager() {\n        if (this._transportManager == null) {\n            throw errCode(new Error('transportManager not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._transportManager;\n    }\n    set transportManager(transportManager) {\n        this._transportManager = transportManager;\n    }\n    get connectionGater() {\n        if (this._connectionGater == null) {\n            throw errCode(new Error('connectionGater not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._connectionGater;\n    }\n    set connectionGater(connectionGater) {\n        this._connectionGater = connectionGater;\n    }\n    get contentRouting() {\n        if (this._contentRouting == null) {\n            throw errCode(new Error('contentRouting not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._contentRouting;\n    }\n    set contentRouting(contentRouting) {\n        this._contentRouting = contentRouting;\n    }\n    get peerRouting() {\n        if (this._peerRouting == null) {\n            throw errCode(new Error('peerRouting not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._peerRouting;\n    }\n    set peerRouting(peerRouting) {\n        this._peerRouting = peerRouting;\n    }\n    get datastore() {\n        if (this._datastore == null) {\n            throw errCode(new Error('datastore not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._datastore;\n    }\n    set datastore(datastore) {\n        this._datastore = datastore;\n    }\n    get connectionProtector() {\n        return this._connectionProtector;\n    }\n    set connectionProtector(connectionProtector) {\n        this._connectionProtector = connectionProtector;\n    }\n    get dialer() {\n        if (this._dialer == null) {\n            throw errCode(new Error('dialer not set'), 'ERR_SERVICE_MISSING');\n        }\n        return this._dialer;\n    }\n    set dialer(dialer) {\n        this._dialer = dialer;\n    }\n    get metrics() {\n        return this._metrics;\n    }\n    set metrics(metrics) {\n        this._metrics = metrics;\n    }\n    get dht() {\n        return this._dht;\n    }\n    set dht(dht) {\n        this._dht = dht;\n    }\n    get pubsub() {\n        return this._pubsub;\n    }\n    set pubsub(pubsub) {\n        this._pubsub = pubsub;\n    }\n}\n//# sourceMappingURL=components.js.map","/**\n * How long in ms a dial attempt is allowed to take\n */\nexport const DIAL_TIMEOUT = 30e3;\n/**\n * How long in ms an inbound connection upgrade is allowed to take\n */\nexport const INBOUND_UPGRADE_TIMEOUT = 30e3;\n/**\n * Maximum allowed concurrent dials\n */\nexport const MAX_PARALLEL_DIALS = 100;\n/**\n * Allowed parallel dials per DialRequest\n */\nexport const MAX_PER_PEER_DIALS = 4;\n/**\n * Maximum number of allowed addresses to attempt to dial\n */\nexport const MAX_ADDRS_TO_DIAL = 25;\nexport const METRICS = {\n    computeThrottleMaxQueueSize: 1000,\n    computeThrottleTimeout: 2000,\n    movingAverageIntervals: [\n        60 * 1000,\n        5 * 60 * 1000,\n        15 * 60 * 1000 // 15 minutes\n    ],\n    maxOldPeersRetention: 50\n};\n//# sourceMappingURL=constants.js.map","import mergeOptions from 'merge-options';\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers';\nimport * as Constants from './constants.js';\nimport { AGENT_VERSION } from './identify/consts.js';\nimport * as RelayConstants from './circuit/constants.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { codes, messages } from './errors.js';\nimport errCode from 'err-code';\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe';\nconst DefaultConfig = {\n    addresses: {\n        listen: [],\n        announce: [],\n        noAnnounce: [],\n        announceFilter: (multiaddrs) => multiaddrs\n    },\n    connectionManager: {\n        maxConnections: 300,\n        minConnections: 50,\n        autoDial: true,\n        autoDialInterval: 10000,\n        maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n        maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n        dialTimeout: Constants.DIAL_TIMEOUT,\n        inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n        resolvers: {\n            dnsaddr: dnsaddrResolver\n        },\n        addressSorter: publicAddressesFirst\n    },\n    connectionGater: {},\n    transportManager: {\n        faultTolerance: FaultTolerance.FATAL_ALL\n    },\n    peerRouting: {\n        refreshManager: {\n            enabled: true,\n            interval: 6e5,\n            bootDelay: 10e3\n        }\n    },\n    nat: {\n        enabled: true,\n        ttl: 7200,\n        keepAlive: true\n    },\n    relay: {\n        enabled: true,\n        advertise: {\n            bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n            enabled: false,\n            ttl: RelayConstants.ADVERTISE_TTL\n        },\n        hop: {\n            enabled: false,\n            active: false,\n            timeout: 30000\n        },\n        autoRelay: {\n            enabled: false,\n            maxListeners: 2\n        }\n    },\n    identify: {\n        protocolPrefix: 'ipfs',\n        host: {\n            agentVersion: AGENT_VERSION\n        },\n        // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n        timeout: 60000,\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        maxPushIncomingStreams: 1,\n        maxPushOutgoingStreams: 1\n    },\n    ping: {\n        protocolPrefix: 'ipfs',\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        timeout: 10000\n    },\n    fetch: {\n        protocolPrefix: 'libp2p',\n        maxInboundStreams: 1,\n        maxOutboundStreams: 1,\n        timeout: 10000\n    }\n};\nexport function validateConfig(opts) {\n    const resultingOptions = mergeOptions(DefaultConfig, opts);\n    if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n        throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED);\n    }\n    if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n        throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);\n    }\n    if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n        throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED);\n    }\n    // Append user agent version to default AGENT_VERSION depending on the environment\n    if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n        if (isNode || isElectronMain) {\n            resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`;\n        }\n        else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n            resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`;\n        }\n    }\n    return resultingOptions;\n}\n//# sourceMappingURL=config.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var PeerIdProto;\n(function (PeerIdProto) {\n    let _codec;\n    PeerIdProto.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.id != null) {\n                    w.uint32(10);\n                    w.bytes(obj.id);\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(18);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.privKey != null) {\n                    w.uint32(26);\n                    w.bytes(obj.privKey);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.id = reader.bytes();\n                            break;\n                        case 2:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 3:\n                            obj.privKey = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PeerIdProto.encode = (obj) => {\n        return encodeMessage(obj, PeerIdProto.codec());\n    };\n    PeerIdProto.decode = (buf) => {\n        return decodeMessage(buf, PeerIdProto.codec());\n    };\n})(PeerIdProto || (PeerIdProto = {}));\n//# sourceMappingURL=proto.js.map","import { generateKeyPair, marshalPrivateKey, unmarshalPrivateKey, marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { peerIdFromKeys, peerIdFromBytes } from '@libp2p/peer-id';\nimport { PeerIdProto } from './proto.js';\nexport const createEd25519PeerId = async () => {\n    const key = await generateKeyPair('Ed25519');\n    const id = await createFromPrivKey(key);\n    if (id.type === 'Ed25519') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport const createSecp256k1PeerId = async () => {\n    const key = await generateKeyPair('secp256k1');\n    const id = await createFromPrivKey(key);\n    if (id.type === 'secp256k1') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport const createRSAPeerId = async (opts) => {\n    const key = await generateKeyPair('RSA', opts?.bits ?? 2048);\n    const id = await createFromPrivKey(key);\n    if (id.type === 'RSA') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport async function createFromPubKey(publicKey) {\n    return await peerIdFromKeys(marshalPublicKey(publicKey));\n}\nexport async function createFromPrivKey(privateKey) {\n    return await peerIdFromKeys(marshalPublicKey(privateKey.public), marshalPrivateKey(privateKey));\n}\nexport function exportToProtobuf(peerId, excludePrivateKey) {\n    return PeerIdProto.encode({\n        id: peerId.multihash.bytes,\n        pubKey: peerId.publicKey,\n        privKey: excludePrivateKey === true || peerId.privateKey == null ? undefined : peerId.privateKey\n    });\n}\nexport async function createFromProtobuf(buf) {\n    const { id, privKey, pubKey } = PeerIdProto.decode(buf);\n    return await createFromParts(id ?? new Uint8Array(0), privKey, pubKey);\n}\nexport async function createFromJSON(obj) {\n    return await createFromParts(uint8ArrayFromString(obj.id, 'base58btc'), obj.privKey != null ? uint8ArrayFromString(obj.privKey, 'base64pad') : undefined, obj.pubKey != null ? uint8ArrayFromString(obj.pubKey, 'base64pad') : undefined);\n}\nasync function createFromParts(multihash, privKey, pubKey) {\n    if (privKey != null) {\n        const key = await unmarshalPrivateKey(privKey);\n        return await createFromPrivKey(key);\n    }\n    else if (pubKey != null) {\n        const key = unmarshalPublicKey(pubKey);\n        return await createFromPubKey(key);\n    }\n    return peerIdFromBytes(multihash);\n}\n//# sourceMappingURL=index.js.map","import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nimport { EventEmitter } from '@libp2p/interfaces/events';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nexport class DummyDHT extends EventEmitter {\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/dummy-dht';\n    }\n    get wan() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    get lan() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    get() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    findProviders() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    findPeer() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    getClosestPeers() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    provide() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    put() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async getMode() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async setMode() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n    async refreshRoutingTable() {\n        throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n    }\n}\n//# sourceMappingURL=dummy-dht.js.map","import { EventEmitter } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nexport class DummyPubSub extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.topicValidators = new Map();\n    }\n    isStarted() {\n        return false;\n    }\n    start() {\n    }\n    stop() {\n    }\n    get globalSignaturePolicy() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    get multicodecs() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getPeers() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getTopics() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    subscribe() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    unsubscribe() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    getSubscribers() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n    async publish() {\n        throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n    }\n}\n//# sourceMappingURL=dummy-pubsub.js.map","import errCode from 'err-code';\nimport { anySignal } from 'any-signal';\nimport FIFO from 'p-fifo';\nimport { setMaxListeners } from 'events';\nimport { codes } from '../../errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:dialer:dial-request');\nexport class DialRequest {\n    /**\n     * Manages running the `dialAction` on multiple provided `addrs` in parallel\n     * up to a maximum determined by the number of tokens returned\n     * from `dialer.getTokens`. Once a DialRequest is created, it can be\n     * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n     * all other dials in the request will be cancelled.\n     */\n    constructor(options) {\n        const { addrs, dialAction, dialer } = options;\n        this.addrs = addrs;\n        this.dialer = dialer;\n        this.dialAction = dialAction;\n    }\n    async run(options = {}) {\n        const tokens = this.dialer.getTokens(this.addrs.length);\n        // If no tokens are available, throw\n        if (tokens.length < 1) {\n            throw errCode(new Error('No dial tokens available'), codes.ERR_NO_DIAL_TOKENS);\n        }\n        const tokenHolder = new FIFO();\n        for (const token of tokens) {\n            void tokenHolder.push(token).catch(err => {\n                log.error(err);\n            });\n        }\n        const dialAbortControllers = this.addrs.map(() => {\n            const controller = new AbortController();\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, controller.signal);\n            }\n            catch { }\n            return controller;\n        });\n        if (options.signal != null) {\n            try {\n                // fails on node < 15.4\n                setMaxListeners?.(Infinity, options.signal);\n            }\n            catch { }\n        }\n        let completedDials = 0;\n        let done = false;\n        try {\n            return await Promise.any(this.addrs.map(async (addr, i) => {\n                const token = await tokenHolder.shift(); // get token\n                // End attempt once another attempt succeeded\n                if (done) {\n                    this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                    throw errCode(new Error('dialAction already succeeded'), codes.ERR_ALREADY_SUCCEEDED);\n                }\n                const controller = dialAbortControllers[i];\n                if (controller == null) {\n                    throw errCode(new Error('dialAction did not come with an AbortController'), codes.ERR_INVALID_PARAMETERS);\n                }\n                let conn;\n                try {\n                    const signal = controller.signal;\n                    conn = await this.dialAction(addr, { ...options, signal: (options.signal != null) ? anySignal([signal, options.signal]) : signal });\n                    // Remove the successful AbortController so it is not aborted\n                    dialAbortControllers[i] = undefined;\n                }\n                finally {\n                    completedDials++;\n                    // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n                    if (this.addrs.length - completedDials >= tokens.length) {\n                        void tokenHolder.push(token).catch(err => {\n                            log.error(err);\n                        });\n                    }\n                    else {\n                        this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                    }\n                }\n                if (conn == null) {\n                    // Notify Promise.any that attempt was not successful\n                    // to prevent from returning undefined despite there\n                    // were successful dial attempts\n                    throw errCode(new Error('dialAction led to empty object'), codes.ERR_TRANSPORT_DIAL_FAILED);\n                }\n                else {\n                    // This dial succeeded, don't attempt anything else\n                    done = true;\n                }\n                return conn;\n            }));\n        }\n        finally {\n            // success/failure happened, abort everything else\n            dialAbortControllers.forEach(c => {\n                if (c !== undefined) {\n                    c.abort();\n                }\n            });\n            tokens.forEach(token => this.dialer.releaseToken(token)); // release tokens back to the dialer\n        }\n    }\n}\n//# sourceMappingURL=dial-request.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { isMultiaddr, multiaddr, resolvers } from '@multiformats/multiaddr';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { setMaxListeners } from 'events';\nimport { DialRequest } from './dial-request.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { trackedMap } from '@libp2p/tracked-map';\nimport { codes } from '../../errors.js';\nimport { DIAL_TIMEOUT, MAX_PARALLEL_DIALS, MAX_PER_PEER_DIALS, MAX_ADDRS_TO_DIAL } from '../../constants.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nimport { getPeerAddress } from '../../get-peer.js';\nconst log = logger('libp2p:dialer');\nexport class DefaultDialer {\n    constructor(components, init = {}) {\n        this.started = false;\n        this.addressSorter = init.addressSorter ?? publicAddressesFirst;\n        this.maxAddrsToDial = init.maxAddrsToDial ?? MAX_ADDRS_TO_DIAL;\n        this.timeout = init.dialTimeout ?? DIAL_TIMEOUT;\n        this.maxDialsPerPeer = init.maxDialsPerPeer ?? MAX_PER_PEER_DIALS;\n        this.tokens = [...new Array(init.maxParallelDials ?? MAX_PARALLEL_DIALS)].map((_, index) => index);\n        this.components = components;\n        this.pendingDials = trackedMap({\n            name: 'libp2p_dialler_pending_dials',\n            metrics: components.metrics\n        });\n        this.pendingDialTargets = trackedMap({\n            name: 'libp2p_dialler_pending_dial_targets',\n            metrics: components.metrics\n        });\n        for (const [key, value] of Object.entries(init.resolvers ?? {})) {\n            resolvers.set(key, value);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    /**\n     * Clears any pending dials\n     */\n    async stop() {\n        this.started = false;\n        for (const dial of this.pendingDials.values()) {\n            try {\n                dial.controller.abort();\n            }\n            catch (err) {\n                log.error(err);\n            }\n        }\n        this.pendingDials.clear();\n        for (const pendingTarget of this.pendingDialTargets.values()) {\n            pendingTarget.abort();\n        }\n        this.pendingDialTargets.clear();\n    }\n    /**\n     * Connects to a given `peer` by dialing all of its known addresses.\n     * The dial to the first address that is successfully able to upgrade a connection\n     * will be used.\n     */\n    async dial(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddr } = getPeerAddress(peerIdOrMultiaddr);\n        if (peerId != null) {\n            if (this.components.peerId.equals(peerId)) {\n                throw errCode(new Error('Tried to dial self'), codes.ERR_DIALED_SELF);\n            }\n            if (multiaddr != null) {\n                log('storing multiaddrs %p', peerId, multiaddr);\n                await this.components.peerStore.addressBook.add(peerId, [multiaddr]);\n            }\n            if (await this.components.connectionGater.denyDialPeer(peerId)) {\n                throw errCode(new Error('The dial request is blocked by gater.allowDialPeer'), codes.ERR_PEER_DIAL_INTERCEPTED);\n            }\n        }\n        log('creating dial target for %p', peerId);\n        // resolving multiaddrs can involve dns lookups so allow them to be aborted\n        const controller = new AbortController();\n        const controllerId = randomId();\n        this.pendingDialTargets.set(controllerId, controller);\n        let signal = controller.signal;\n        // merge with the passed signal, if any\n        if (options.signal != null) {\n            signal = anySignal([signal, options.signal]);\n        }\n        let dialTarget;\n        try {\n            dialTarget = await this._createDialTarget({ peerId, multiaddr }, {\n                ...options,\n                signal\n            });\n        }\n        finally {\n            // done resolving the multiaddrs so remove the abort controller\n            this.pendingDialTargets.delete(controllerId);\n        }\n        if (dialTarget.addrs.length === 0) {\n            throw errCode(new Error('The dial request has no valid addresses'), codes.ERR_NO_VALID_ADDRESSES);\n        }\n        // try to join an in-flight dial for this peer if one is available\n        const pendingDial = this.pendingDials.get(dialTarget.id) ?? this._createPendingDial(dialTarget, options);\n        try {\n            const connection = await pendingDial.promise;\n            log('dial succeeded to %s', dialTarget.id);\n            return connection;\n        }\n        catch (err) {\n            log('dial failed to %s', dialTarget.id, err);\n            // Error is a timeout\n            if (pendingDial.controller.signal.aborted) {\n                err.code = codes.ERR_TIMEOUT;\n            }\n            log.error(err);\n            throw err;\n        }\n        finally {\n            pendingDial.destroy();\n        }\n    }\n    /**\n     * Creates a DialTarget. The DialTarget is used to create and track\n     * the DialRequest to a given peer.\n     *\n     * If a multiaddr is received it should be the only address attempted.\n     *\n     * Multiaddrs not supported by the available transports will be filtered out.\n     */\n    async _createDialTarget(peerIdOrMultiaddr, options) {\n        let addrs = [];\n        if (isMultiaddr(peerIdOrMultiaddr.multiaddr)) {\n            addrs.push(peerIdOrMultiaddr.multiaddr);\n        }\n        // only load addresses if a peer id was passed, otherwise only dial the passed multiaddr\n        if (!isMultiaddr(peerIdOrMultiaddr.multiaddr) && isPeerId(peerIdOrMultiaddr.peerId)) {\n            addrs.push(...await this._loadAddresses(peerIdOrMultiaddr.peerId));\n        }\n        addrs = (await Promise.all(addrs.map(async (ma) => await this._resolve(ma, options))))\n            .flat()\n            // Multiaddrs not supported by the available transports will be filtered out.\n            .filter(ma => Boolean(this.components.transportManager.transportForMultiaddr(ma)));\n        // deduplicate addresses\n        addrs = [...new Set(addrs.map(ma => ma.toString()))].map(ma => multiaddr(ma));\n        if (addrs.length > this.maxAddrsToDial) {\n            throw errCode(new Error('dial with more addresses than allowed'), codes.ERR_TOO_MANY_ADDRESSES);\n        }\n        const peerId = isPeerId(peerIdOrMultiaddr.peerId) ? peerIdOrMultiaddr.peerId : undefined;\n        if (peerId != null) {\n            const peerIdMultiaddr = `/p2p/${peerId.toString()}`;\n            addrs = addrs.map(addr => {\n                const addressPeerId = addr.getPeerId();\n                if (addressPeerId == null || !peerId.equals(addressPeerId)) {\n                    return addr.encapsulate(peerIdMultiaddr);\n                }\n                return addr;\n            });\n        }\n        return {\n            id: peerId == null ? randomId() : peerId.toString(),\n            addrs\n        };\n    }\n    /**\n     * Loads a list of addresses from the peer store for the passed peer id\n     */\n    async _loadAddresses(peer) {\n        const addresses = await this.components.peerStore.addressBook.get(peer);\n        return (await Promise.all(addresses.map(async (address) => {\n            const deny = await this.components.connectionGater.denyDialMultiaddr(peer, address.multiaddr);\n            if (deny) {\n                return false;\n            }\n            return address;\n        })))\n            .filter(isTruthy)\n            // Sort addresses so, for example, we try certified public address first\n            .sort(this.addressSorter)\n            .map(address => address.multiaddr);\n    }\n    /**\n     * Creates a PendingDial that wraps the underlying DialRequest\n     */\n    _createPendingDial(dialTarget, options = {}) {\n        /**\n         * @param {Multiaddr} addr\n         * @param {{ signal: { aborted: any; }; }} options\n         */\n        const dialAction = async (addr, options = {}) => {\n            if (options.signal?.aborted === true) {\n                throw errCode(new Error('already aborted'), codes.ERR_ALREADY_ABORTED);\n            }\n            return await this.components.transportManager.dial(addr, options).catch(err => {\n                log.error('dial to %s failed', addr, err);\n                throw err;\n            });\n        };\n        const dialRequest = new DialRequest({\n            addrs: dialTarget.addrs,\n            dialAction,\n            dialer: this\n        });\n        // Combine the timeout signal and options.signal, if provided\n        const timeoutController = new TimeoutController(this.timeout);\n        const signals = [timeoutController.signal];\n        (options.signal != null) && signals.push(options.signal);\n        const signal = anySignal(signals);\n        // this signal will potentially be used while dialing lots of\n        // peers so prevent MaxListenersExceededWarning appearing in the console\n        try {\n            // fails on node < 15.4\n            setMaxListeners?.(Infinity, signal);\n        }\n        catch { }\n        const pendingDial = {\n            dialRequest,\n            controller: timeoutController,\n            promise: dialRequest.run({ ...options, signal }),\n            destroy: () => {\n                timeoutController.clear();\n                this.pendingDials.delete(dialTarget.id);\n            }\n        };\n        this.pendingDials.set(dialTarget.id, pendingDial);\n        return pendingDial;\n    }\n    getTokens(num) {\n        const total = Math.min(num, this.maxDialsPerPeer, this.tokens.length);\n        const tokens = this.tokens.splice(0, total);\n        log('%d tokens request, returning %d, %d remaining', num, total, this.tokens.length);\n        return tokens;\n    }\n    releaseToken(token) {\n        // Guard against duplicate releases\n        if (this.tokens.includes(token)) {\n            return;\n        }\n        log('token %d released', token);\n        this.tokens.push(token);\n    }\n    /**\n     * Resolve multiaddr recursively\n     */\n    async _resolve(ma, options) {\n        // TODO: recursive logic should live in multiaddr once dns4/dns6 support is in place\n        // Now only supporting resolve for dnsaddr\n        const resolvableProto = ma.protoNames().includes('dnsaddr');\n        // Multiaddr is not resolvable? End recursion!\n        if (!resolvableProto) {\n            return [ma];\n        }\n        const resolvedMultiaddrs = await this._resolveRecord(ma, options);\n        const recursiveMultiaddrs = await Promise.all(resolvedMultiaddrs.map(async (nm) => {\n            return await this._resolve(nm, options);\n        }));\n        const addrs = recursiveMultiaddrs.flat();\n        return addrs.reduce((array, newM) => {\n            if (array.find(m => m.equals(newM)) == null) {\n                array.push(newM);\n            }\n            return array;\n        }, ([]));\n    }\n    /**\n     * Resolve a given multiaddr. If this fails, an empty array will be returned\n     */\n    async _resolveRecord(ma, options) {\n        try {\n            ma = multiaddr(ma.toString()); // Use current multiaddr module\n            const multiaddrs = await ma.resolve(options);\n            return multiaddrs;\n        }\n        catch (err) {\n            log.error(`multiaddr ${ma.toString()} could not be resolved`, err);\n            return [];\n        }\n    }\n}\n/**\n * Type safe version of `list.filter(Boolean)`\n */\nfunction isTruthy(e) {\n    return Boolean(e);\n}\n/**\n * Returns a random string\n */\nfunction randomId() {\n    return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`;\n}\n//# sourceMappingURL=index.js.map","import { logger } from '@libp2p/logger';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { isStartable } from '@libp2p/interfaces/startable';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { MemoryDatastore } from 'datastore-core/memory';\nimport { DefaultPeerRouting } from './peer-routing.js';\nimport { CompoundContentRouting } from './content-routing/index.js';\nimport { codes } from './errors.js';\nimport { DefaultAddressManager } from './address-manager/index.js';\nimport { DefaultConnectionManager } from './connection-manager/index.js';\nimport { AutoDialler } from './connection-manager/auto-dialler.js';\nimport { Circuit } from './circuit/transport.js';\nimport { Relay } from './circuit/index.js';\nimport { KeyChain } from './keychain/index.js';\nimport { DefaultTransportManager } from './transport-manager.js';\nimport { DefaultUpgrader } from './upgrader.js';\nimport { DefaultRegistrar } from './registrar.js';\nimport { IdentifyService } from './identify/index.js';\nimport { FetchService } from './fetch/index.js';\nimport { PingService } from './ping/index.js';\nimport { NatManager } from './nat-manager.js';\nimport { PeerRecordUpdater } from './peer-record-updater.js';\nimport { DHTPeerRouting } from './dht/dht-peer-routing.js';\nimport { PersistentPeerStore } from '@libp2p/peer-store';\nimport { DHTContentRouting } from './dht/dht-content-routing.js';\nimport { DefaultComponents } from './components.js';\nimport { validateConfig } from './config.js';\nimport { createEd25519PeerId } from '@libp2p/peer-id-factory';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport errCode from 'err-code';\nimport { unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { DummyDHT } from './dht/dummy-dht.js';\nimport { DummyPubSub } from './pubsub/dummy-pubsub.js';\nimport { PeerSet } from '@libp2p/peer-collections';\nimport { DefaultDialer } from './connection-manager/dialer/index.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('libp2p');\nexport class Libp2pNode extends EventEmitter {\n    constructor(init) {\n        super();\n        this.started = false;\n        this.peerId = init.peerId;\n        const components = this.components = new DefaultComponents({\n            peerId: init.peerId,\n            datastore: init.datastore ?? new MemoryDatastore(),\n            connectionGater: {\n                denyDialPeer: async () => await Promise.resolve(false),\n                denyDialMultiaddr: async () => await Promise.resolve(false),\n                denyInboundConnection: async () => await Promise.resolve(false),\n                denyOutboundConnection: async () => await Promise.resolve(false),\n                denyInboundEncryptedConnection: async () => await Promise.resolve(false),\n                denyOutboundEncryptedConnection: async () => await Promise.resolve(false),\n                denyInboundUpgradedConnection: async () => await Promise.resolve(false),\n                denyOutboundUpgradedConnection: async () => await Promise.resolve(false),\n                filterMultiaddrForPeer: async () => await Promise.resolve(true),\n                ...init.connectionGater\n            }\n        });\n        components.peerStore = new PersistentPeerStore(components, {\n            addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n            ...init.peerStore\n        });\n        this.services = [\n            components\n        ];\n        // Create Metrics\n        if (init.metrics != null) {\n            this.metrics = this.components.metrics = this.configureComponent(init.metrics(this.components));\n        }\n        this.peerStore = this.components.peerStore;\n        this.peerStore.addEventListener('peer', evt => {\n            const { detail: peerData } = evt;\n            this.dispatchEvent(new CustomEvent('peer:discovery', { detail: peerData }));\n        });\n        // Set up connection protector if configured\n        if (init.connectionProtector != null) {\n            this.components.connectionProtector = init.connectionProtector(components);\n        }\n        // Set up the Upgrader\n        this.components.upgrader = new DefaultUpgrader(this.components, {\n            connectionEncryption: (init.connectionEncryption ?? []).map(fn => this.configureComponent(fn(this.components))),\n            muxers: (init.streamMuxers ?? []).map(fn => this.configureComponent(fn(this.components))),\n            inboundUpgradeTimeout: init.connectionManager.inboundUpgradeTimeout\n        });\n        // Create the dialer\n        this.components.dialer = new DefaultDialer(this.components, init.connectionManager);\n        // Create the Connection Manager\n        this.connectionManager = this.components.connectionManager = new DefaultConnectionManager(this.components, init.connectionManager);\n        // forward connection manager events\n        this.components.connectionManager.addEventListener('peer:disconnect', (event) => {\n            this.dispatchEvent(new CustomEvent('peer:disconnect', { detail: event.detail }));\n        });\n        this.components.connectionManager.addEventListener('peer:connect', (event) => {\n            this.dispatchEvent(new CustomEvent('peer:connect', { detail: event.detail }));\n        });\n        // Create the Registrar\n        this.registrar = this.components.registrar = new DefaultRegistrar(this.components);\n        // Setup the transport manager\n        this.components.transportManager = new DefaultTransportManager(this.components, init.transportManager);\n        // Addresses {listen, announce, noAnnounce}\n        this.components.addressManager = new DefaultAddressManager(this.components, init.addresses);\n        // update our peer record when addresses change\n        this.configureComponent(new PeerRecordUpdater(this.components));\n        this.configureComponent(new AutoDialler(this.components, {\n            enabled: init.connectionManager.autoDial,\n            minConnections: init.connectionManager.minConnections,\n            autoDialInterval: init.connectionManager.autoDialInterval\n        }));\n        // Create keychain\n        const keychainOpts = KeyChain.generateOptions();\n        this.keychain = this.configureComponent(new KeyChain(this.components, {\n            ...keychainOpts,\n            ...init.keychain\n        }));\n        // Create the Nat Manager\n        this.services.push(new NatManager(this.components, init.nat));\n        init.transports.forEach((fn) => {\n            this.components.transportManager.add(this.configureComponent(fn(this.components)));\n        });\n        // Add the identify service\n        this.identifyService = new IdentifyService(this.components, {\n            ...init.identify\n        });\n        this.configureComponent(this.identifyService);\n        // dht provided components (peerRouting, contentRouting, dht)\n        if (init.dht != null) {\n            this.dht = this.components.dht = init.dht(this.components);\n        }\n        else {\n            this.dht = new DummyDHT();\n        }\n        // Create pubsub if provided\n        if (init.pubsub != null) {\n            this.pubsub = this.components.pubsub = init.pubsub(this.components);\n        }\n        else {\n            this.pubsub = new DummyPubSub();\n        }\n        // Attach remaining APIs\n        // peer and content routing will automatically get modules from _modules and _dht\n        const peerRouters = (init.peerRouters ?? []).map(fn => this.configureComponent(fn(this.components)));\n        if (init.dht != null) {\n            // add dht to routers\n            peerRouters.push(this.configureComponent(new DHTPeerRouting(this.dht)));\n            // use dht for peer discovery\n            this.dht.addEventListener('peer', (evt) => {\n                this.onDiscoveryPeer(evt);\n            });\n        }\n        this.peerRouting = this.components.peerRouting = this.configureComponent(new DefaultPeerRouting(this.components, {\n            ...init.peerRouting,\n            routers: peerRouters\n        }));\n        const contentRouters = (init.contentRouters ?? []).map(fn => this.configureComponent(fn(this.components)));\n        if (init.dht != null) {\n            // add dht to routers\n            contentRouters.push(this.configureComponent(new DHTContentRouting(this.dht)));\n        }\n        this.contentRouting = this.components.contentRouting = this.configureComponent(new CompoundContentRouting(this.components, {\n            routers: contentRouters\n        }));\n        if (init.relay.enabled) {\n            this.components.transportManager.add(this.configureComponent(new Circuit(this.components, init.relay)));\n            this.configureComponent(new Relay(this.components, {\n                addressSorter: init.connectionManager.addressSorter,\n                ...init.relay\n            }));\n        }\n        this.fetchService = this.configureComponent(new FetchService(this.components, {\n            ...init.fetch\n        }));\n        this.pingService = this.configureComponent(new PingService(this.components, {\n            ...init.ping\n        }));\n        // Discovery modules\n        for (const fn of init.peerDiscovery ?? []) {\n            const service = this.configureComponent(fn(this.components));\n            service.addEventListener('peer', (evt) => {\n                this.onDiscoveryPeer(evt);\n            });\n        }\n    }\n    configureComponent(component) {\n        if (isStartable(component)) {\n            this.services.push(component);\n        }\n        return component;\n    }\n    /**\n     * Starts the libp2p node and all its subsystems\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        log('libp2p is starting');\n        try {\n            await Promise.all(this.services.map(async (service) => {\n                if (service.beforeStart != null) {\n                    await service.beforeStart();\n                }\n            }));\n            // start any startables\n            await Promise.all(this.services.map(service => service.start()));\n            await Promise.all(this.services.map(async (service) => {\n                if (service.afterStart != null) {\n                    await service.afterStart();\n                }\n            }));\n            log('libp2p has started');\n        }\n        catch (err) {\n            log.error('An error occurred starting libp2p', err);\n            await this.stop();\n            throw err;\n        }\n    }\n    /**\n     * Stop the libp2p node by closing its listeners and open connections\n     */\n    async stop() {\n        if (!this.started) {\n            return;\n        }\n        log('libp2p is stopping');\n        this.started = false;\n        await Promise.all(this.services.map(async (service) => {\n            if (service.beforeStop != null) {\n                await service.beforeStop();\n            }\n        }));\n        await Promise.all(this.services.map(service => service.stop()));\n        await Promise.all(this.services.map(async (service) => {\n            if (service.afterStop != null) {\n                await service.afterStop();\n            }\n        }));\n        log('libp2p has stopped');\n    }\n    isStarted() {\n        return this.started;\n    }\n    getConnections(peerId) {\n        return this.components.connectionManager.getConnections(peerId);\n    }\n    getPeers() {\n        const peerSet = new PeerSet();\n        for (const conn of this.components.connectionManager.getConnections()) {\n            peerSet.add(conn.remotePeer);\n        }\n        return Array.from(peerSet);\n    }\n    async dial(peer, options = {}) {\n        return await this.components.connectionManager.openConnection(peer, options);\n    }\n    async dialProtocol(peer, protocols, options = {}) {\n        if (protocols == null) {\n            throw errCode(new Error('no protocols were provided to open a stream'), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        protocols = Array.isArray(protocols) ? protocols : [protocols];\n        if (protocols.length === 0) {\n            throw errCode(new Error('no protocols were provided to open a stream'), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        const connection = await this.dial(peer, options);\n        return await connection.newStream(protocols, options);\n    }\n    getMultiaddrs() {\n        return this.components.addressManager.getAddresses();\n    }\n    getProtocols() {\n        return this.components.registrar.getProtocols();\n    }\n    async hangUp(peer) {\n        if (isMultiaddr(peer)) {\n            peer = peerIdFromString(peer.getPeerId() ?? '');\n        }\n        await this.components.connectionManager.closeConnections(peer);\n    }\n    /**\n     * Get the public key for the given peer id\n     */\n    async getPublicKey(peer, options = {}) {\n        log('getPublicKey %p', peer);\n        if (peer.publicKey != null) {\n            return peer.publicKey;\n        }\n        const peerInfo = await this.peerStore.get(peer);\n        if (peerInfo.pubKey != null) {\n            return peerInfo.pubKey;\n        }\n        if (this.dht == null) {\n            throw errCode(new Error('Public key was not in the peer store and the DHT is not enabled'), codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const peerKey = uint8ArrayConcat([\n            uint8ArrayFromString('/pk/'),\n            peer.multihash.digest\n        ]);\n        // search the dht\n        for await (const event of this.dht.get(peerKey, options)) {\n            if (event.name === 'VALUE') {\n                const key = unmarshalPublicKey(event.value);\n                await this.peerStore.keyBook.set(peer, event.value);\n                return key.bytes;\n            }\n        }\n        throw errCode(new Error(`Node not responding with its public key: ${peer.toString()}`), codes.ERR_INVALID_RECORD);\n    }\n    async fetch(peer, key, options = {}) {\n        if (isMultiaddr(peer)) {\n            const peerId = peerIdFromString(peer.getPeerId() ?? '');\n            await this.components.peerStore.addressBook.add(peerId, [peer]);\n            peer = peerId;\n        }\n        return await this.fetchService.fetch(peer, key, options);\n    }\n    async ping(peer, options = {}) {\n        if (isMultiaddr(peer)) {\n            const peerId = peerIdFromString(peer.getPeerId() ?? '');\n            await this.components.peerStore.addressBook.add(peerId, [peer]);\n            peer = peerId;\n        }\n        return await this.pingService.ping(peer, options);\n    }\n    async handle(protocols, handler, options) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.handle(protocol, handler, options);\n        }));\n    }\n    async unhandle(protocols) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.unhandle(protocol);\n        }));\n    }\n    async register(protocol, topology) {\n        return await this.registrar.register(protocol, topology);\n    }\n    unregister(id) {\n        this.registrar.unregister(id);\n    }\n    /**\n     * Called whenever peer discovery services emit `peer` events.\n     * Known peers may be emitted.\n     */\n    onDiscoveryPeer(evt) {\n        const { detail: peer } = evt;\n        if (peer.id.toString() === this.peerId.toString()) {\n            log.error(new Error(codes.ERR_DISCOVERED_SELF));\n            return;\n        }\n        if (peer.multiaddrs.length > 0) {\n            void this.components.peerStore.addressBook.add(peer.id, peer.multiaddrs).catch(err => log.error(err));\n        }\n        if (peer.protocols.length > 0) {\n            void this.components.peerStore.protoBook.set(peer.id, peer.protocols).catch(err => log.error(err));\n        }\n        this.dispatchEvent(new CustomEvent('peer:discovery', { detail: peer }));\n    }\n}\n/**\n * Returns a new Libp2pNode instance - this exposes more of the internals than the\n * libp2p interface and is useful for testing and debugging.\n */\nexport async function createLibp2pNode(options) {\n    if (options.peerId == null) {\n        const datastore = options.datastore;\n        if (datastore != null) {\n            try {\n                // try load the peer id from the keychain\n                // @ts-expect-error missing the peer id property\n                const keyChain = new KeyChain({\n                    datastore\n                }, {\n                    ...KeyChain.generateOptions(),\n                    ...(options.keychain ?? {})\n                });\n                options.peerId = await keyChain.exportPeerId('self');\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n    }\n    if (options.peerId == null) {\n        // no peer id in the keychain, create a new peer id\n        options.peerId = await createEd25519PeerId();\n    }\n    return new Libp2pNode(validateConfig(options));\n}\n//# sourceMappingURL=libp2p.js.map","/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\nimport { createLibp2pNode } from './libp2p.js';\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```js\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [mplex()],\n *   connectionEncryption: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nexport async function createLibp2p(options) {\n    const node = await createLibp2pNode(options);\n    if (options.start !== false) {\n        await node.start();\n    }\n    return node;\n}\n//# sourceMappingURL=index.js.map","// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\nexport const second = 1000;\nexport const minute = 60 * second;\nexport const hour = 60 * minute;\nexport const MAX_RECORD_AGE = 36 * hour;\nexport const LAN_PREFIX = '/lan';\nexport const PROTOCOL_PREFIX = '/ipfs';\nexport const PROTOCOL_DHT = '/kad/1.0.0';\nexport const RECORD_KEY_PREFIX = '/dht/record';\nexport const PROVIDER_KEY_PREFIX = '/dht/provider';\nexport const PROVIDERS_LRU_CACHE_SIZE = 256;\nexport const PROVIDERS_VALIDITY = 24 * hour;\nexport const PROVIDERS_CLEANUP_INTERVAL = hour;\nexport const READ_MESSAGE_TIMEOUT = 10 * second;\n// The number of records that will be retrieved on a call to getMany()\nexport const GET_MANY_RECORD_COUNT = 16;\n// K is the maximum number of requests to perform before returning failure\nexport const K = 20;\n// Alpha is the concurrency for asynchronous requests\nexport const ALPHA = 3;\n// How often we look for our closest DHT neighbours\nexport const QUERY_SELF_INTERVAL = Number(5 * minute);\n// How long to look for our closest DHT neighbours for\nexport const QUERY_SELF_TIMEOUT = Number(30 * second);\n// How often we try to find new peers\nexport const TABLE_REFRESH_INTERVAL = Number(5 * minute);\n// How how long to look for new peers for\nexport const TABLE_REFRESH_QUERY_TIMEOUT = Number(30 * second);\n// When a timeout is not specified, run a query for this long\nexport const DEFAULT_QUERY_TIMEOUT = Number(30 * second);\n//# sourceMappingURL=constants.js.map","import { sha256 } from 'multiformats/hashes/sha2';\nimport { Key } from 'interface-datastore/key';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport isPrivateIp from 'private-ip';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { RECORD_KEY_PREFIX } from './constants.js';\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = uint8ArrayFromString('/pk/');\nexport function removePrivateAddresses(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            // treat /dns, /dns4, and /dns6 addrs as public\n            if (type === 53 || type === 54 || type === 55) {\n                // localhost can be a dns address but it's private\n                if (addr === 'localhost') {\n                    return false;\n                }\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = isPrivateIp(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return true;\n            }\n            return !isPrivate;\n        })\n    };\n}\nexport function removePublicAddresses(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            if (addr === 'localhost') {\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = isPrivateIp(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return false;\n            }\n            return isPrivate;\n        })\n    };\n}\n/**\n * Creates a DHT ID by hashing a given Uint8Array\n */\nexport async function convertBuffer(buf) {\n    const multihash = await sha256.digest(buf);\n    return multihash.digest;\n}\n/**\n * Creates a DHT ID by hashing a Peer ID\n */\nexport async function convertPeerId(peerId) {\n    return await convertBuffer(peerId.toBytes());\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToKey(buf) {\n    return new Key('/' + uint8ArrayToString(buf, 'base32'), false);\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToRecordKey(buf) {\n    return new Key(`${RECORD_KEY_PREFIX}/${uint8ArrayToString(buf, 'base32')}`, false);\n}\n/**\n * Generate the key for a public key.\n */\nexport function keyForPublicKey(peer) {\n    return uint8ArrayConcat([\n        PK_PREFIX,\n        peer.toBytes()\n    ]);\n}\nexport function isPublicKeyKey(key) {\n    return uint8ArrayToString(key.subarray(0, 4)) === '/pk/';\n}\nexport function isIPNSKey(key) {\n    return uint8ArrayToString(key.subarray(0, 4)) === '/ipns/';\n}\nexport function fromPublicKeyKey(key) {\n    return peerIdFromBytes(key.subarray(4));\n}\n/**\n * Create a new put record, encodes and signs it if enabled\n */\nexport function createPutRecord(key, value) {\n    const timeReceived = new Date();\n    const rec = new Libp2pRecord(key, value, timeReceived);\n    return rec.serialize();\n}\nexport function debounce(callback, wait = 100) {\n    let timeout;\n    return () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => { callback(); }, wait);\n    };\n}\n//# sourceMappingURL=utils.js.map","// @ts-expect-error no types\nimport KBuck from 'k-bucket';\nimport * as utils from '../utils.js';\nimport Queue from 'p-queue';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { logger } from '@libp2p/logger';\nimport { PeerSet } from '@libp2p/peer-collections';\nexport const KAD_CLOSE_TAG_NAME = 'kad-close';\nexport const KAD_CLOSE_TAG_VALUE = 50;\nexport const KBUCKET_SIZE = 20;\nexport const PING_TIMEOUT = 10000;\nexport const PING_CONCURRENCY = 10;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nexport class RoutingTable {\n    constructor(components, init) {\n        const { kBucketSize, pingTimeout, lan, pingConcurrency, protocol, tagName, tagValue } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table`);\n        this.kBucketSize = kBucketSize ?? KBUCKET_SIZE;\n        this.pingTimeout = pingTimeout ?? PING_TIMEOUT;\n        this.pingConcurrency = pingConcurrency ?? PING_CONCURRENCY;\n        this.lan = lan;\n        this.running = false;\n        this.protocol = protocol;\n        this.tagName = tagName ?? KAD_CLOSE_TAG_NAME;\n        this.tagValue = tagValue ?? KAD_CLOSE_TAG_VALUE;\n        const updatePingQueueSizeMetric = () => {\n            this.metrics?.pingQueueSize.update(this.pingQueue.size);\n            this.metrics?.pingRunning.update(this.pingQueue.pending);\n        };\n        this.pingQueue = new Queue({ concurrency: this.pingConcurrency });\n        this.pingQueue.addListener('add', updatePingQueueSizeMetric);\n        this.pingQueue.addListener('next', updatePingQueueSizeMetric);\n        this._onPing = this._onPing.bind(this);\n    }\n    isStarted() {\n        return this.running;\n    }\n    async start() {\n        this.running = true;\n        if (this.components.metrics != null) {\n            this.metrics = {\n                routingTableSize: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_routing_table_size`),\n                pingQueueSize: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_ping_queue_size`),\n                pingRunning: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_ping_running`)\n            };\n        }\n        const kBuck = new KBuck({\n            localNodeId: await utils.convertPeerId(this.components.peerId),\n            numberOfNodesPerKBucket: this.kBucketSize,\n            numberOfNodesToPing: 1\n        });\n        this.kb = kBuck;\n        // test whether to evict peers\n        kBuck.on('ping', this._onPing);\n        // tag kad-close peers\n        this._tagPeers(kBuck);\n    }\n    async stop() {\n        this.running = false;\n        this.pingQueue.clear();\n        this.kb = undefined;\n    }\n    /**\n     * Keep track of our k-closest peers and tag them in the peer store as such\n     * - this will lower the chances that connections to them get closed when\n     * we reach connection limits\n     */\n    _tagPeers(kBuck) {\n        let kClosest = new PeerSet();\n        const updatePeerTags = utils.debounce(() => {\n            const newClosest = new PeerSet(kBuck.closest(kBuck.localNodeId, KBUCKET_SIZE).map(contact => contact.peer));\n            const addedPeers = newClosest.difference(kClosest);\n            const removedPeers = kClosest.difference(newClosest);\n            Promise.resolve()\n                .then(async () => {\n                for (const peer of addedPeers) {\n                    await this.components.peerStore.tagPeer(peer, this.tagName, {\n                        value: this.tagValue\n                    });\n                }\n                for (const peer of removedPeers) {\n                    await this.components.peerStore.unTagPeer(peer, this.tagName);\n                }\n            })\n                .catch(err => {\n                this.log.error('Could not update peer tags', err);\n            });\n            kClosest = newClosest;\n        });\n        kBuck.on('added', () => {\n            updatePeerTags();\n        });\n        kBuck.on('removed', () => {\n            updatePeerTags();\n        });\n    }\n    /**\n     * Called on the `ping` event from `k-bucket` when a bucket is full\n     * and cannot split.\n     *\n     * `oldContacts.length` is defined by the `numberOfNodesToPing` param\n     * passed to the `k-bucket` constructor.\n     *\n     * `oldContacts` will not be empty and is the list of contacts that\n     * have not been contacted for the longest.\n     */\n    _onPing(oldContacts, newContact) {\n        // add to a queue so multiple ping requests do not overlap and we don't\n        // flood the network with ping requests if lots of newContact requests\n        // are received\n        this.pingQueue.add(async () => {\n            if (!this.running) {\n                return;\n            }\n            let responded = 0;\n            try {\n                await Promise.all(oldContacts.map(async (oldContact) => {\n                    let timeoutController;\n                    try {\n                        timeoutController = new TimeoutController(this.pingTimeout);\n                        const options = {\n                            signal: timeoutController.signal\n                        };\n                        this.log('pinging old contact %p', oldContact.peer);\n                        const connection = await this.components.connectionManager.openConnection(oldContact.peer, options);\n                        const stream = await connection.newStream(this.protocol, options);\n                        stream.close();\n                        responded++;\n                    }\n                    catch (err) {\n                        if (this.running && this.kb != null) {\n                            // only evict peers if we are still running, otherwise we evict when dialing is\n                            // cancelled due to shutdown in progress\n                            this.log.error('could not ping peer %p', oldContact.peer, err);\n                            this.log('evicting old contact after ping failed %p', oldContact);\n                            this.kb.remove(oldContact.id);\n                        }\n                    }\n                    finally {\n                        if (timeoutController != null) {\n                            timeoutController.clear();\n                        }\n                        this.metrics?.routingTableSize.update(this.size);\n                    }\n                }));\n                if (this.running && responded < oldContacts.length && this.kb != null) {\n                    this.log('adding new contact %p', newContact.peer);\n                    this.kb.add(newContact);\n                }\n            }\n            catch (err) {\n                this.log.error('could not process k-bucket ping event', err);\n            }\n        })\n            .catch(err => {\n            this.log.error('could not process k-bucket ping event', err);\n        });\n    }\n    // -- Public Interface\n    /**\n     * Amount of currently stored peers\n     */\n    get size() {\n        if (this.kb == null) {\n            return 0;\n        }\n        return this.kb.count();\n    }\n    /**\n     * Find a specific peer by id\n     */\n    async find(peer) {\n        const key = await utils.convertPeerId(peer);\n        const closest = this.closestPeer(key);\n        if (closest != null && peer.equals(closest)) {\n            return closest;\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the closest peers to the given key\n     */\n    closestPeer(key) {\n        const res = this.closestPeers(key, 1);\n        if (res.length > 0) {\n            return res[0];\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the `count`-closest peers to the given key\n     */\n    closestPeers(key, count = this.kBucketSize) {\n        if (this.kb == null) {\n            return [];\n        }\n        const closest = this.kb.closest(key, count);\n        return closest.map(p => p.peer);\n    }\n    /**\n     * Add or update the routing table with the given peer\n     */\n    async add(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await utils.convertPeerId(peer);\n        this.kb.add({ id, peer });\n        this.log('added %p with kad id %b', peer, id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n    /**\n     * Remove a given peer from the table\n     */\n    async remove(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await utils.convertPeerId(peer);\n        this.kb.remove(id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n}\n//# sourceMappingURL=index.js.map","export default [\n    77591, 22417, 43971, 28421, 740, 29829, 71467, 228973, 196661, 78537, 27689, 36431, 44415, 14362, 19456, 106025,\n    96308, 2882, 49509, 21149, 87173, 131409, 75844, 23676, 121838, 30291, 17492, 2953, 7564, 110620, 129477, 127283,\n    53113, 72417, 165166, 109690, 21200, 102125, 24049, 71504, 90342, 25307, 72039, 26812, 26715, 32264, 133800, 71161,\n    88956, 171987, 51779, 24425, 16671, 30251, 186294, 247761, 14202, 2121, 8465, 35024, 4876, 85917, 169730, 3638,\n    256836, 96184, 943, 18678, 6583, 52907, 35807, 112254, 214097, 18796, 11595, 9243, 23554, 887, 268203, 382004,\n    24590, 111335, 11625, 16619, 29039, 102425, 69006, 97976, 92362, 32552, 63717, 41433, 128974, 137630, 59943, 10019,\n    13986, 35430, 33665, 108037, 43799, 43280, 38195, 29078, 58629, 18265, 14425, 46832, 235538, 40830, 77881, 110717,\n    58937, 3463, 325358, 51300, 47623, 117252, 19007, 10170, 20540, 91237, 294813, 4951, 79841, 56232, 36270, 128547,\n    69209, 66275, 100156, 32063, 73531, 34439, 80937, 28892, 44466, 88595, 216307, 32583, 49620, 16605, 82127, 45807,\n    21630, 78726, 20235, 40163, 111007, 96926, 5567, 72083, 21665, 58844, 39419, 179767, 48328, 42662, 51550, 5251,\n    37811, 49608, 81056, 50854, 55513, 20922, 18891, 197409, 164656, 32593, 71449, 220474, 58919, 85682, 67854, 13758,\n    35066, 3565, 61905, 214793, 119572, 141419, 21504, 10302, 27354, 67003, 46131, 32668, 15165, 64871, 34450, 17821,\n    2757, 11452, 34189, 5160, 12257, 85523, 560, 53385, 65887, 119549, 135620, 312353, 115979, 122356, 10867, 193231,\n    124537, 54783, 90675, 120791, 4715, 142253, 50943, 17271, 43358, 25331, 4917, 120566, 34580, 12878, 33786, 160528,\n    32523, 4869, 301307, 104817, 81491, 23276, 8832, 97911, 31265, 52065, 7998, 49622, 9715, 43998, 34091, 84587,\n    20664, 69041, 29419, 53205, 10838, 58288, 116145, 6185, 5154, 141795, 35924, 21307, 144738, 43730, 12085, 8279,\n    10002, 119, 133779, 199668, 72938, 31768, 39176, 67875, 38453, 9700, 44144, 4121, 116048, 41733, 12868, 82669,\n    92308, 128, 34262, 11332, 7712, 90764, 36141, 13553, 71312, 77470, 117314, 96549, 49135, 23602, 54468, 28605,\n    6327, 62308, 17171, 67531, 21319, 14105, 894, 107722, 46157, 8503, 51069, 100472, 45138, 15246, 14577, 35609,\n    191464, 1757, 13364, 161349, 32067, 91705, 81144, 52339, 5408, 91066, 21983, 14157, 100545, 4372, 26630, 129112,\n    1423, 29676, 213626, 4397, 88436, 99190, 6877, 49958, 26122, 114348, 60661, 29818, 293118, 50042, 179738, 16400,\n    163423, 89627, 31040, 43973, 36638, 45952, 5153, 1894, 109322, 1898, 134021, 12402, 112077, 68309, 190269, 69866,\n    31938, 107383, 11522, 105232, 11248, 14868, 39852, 71707, 186525, 16530, 38162, 106212, 11700, 5130, 16608, 26998,\n    59586, 108399, 230033, 43683, 48135, 82179, 2073, 5015, 196684, 189293, 16378, 23452, 8301, 35640, 11632, 214551,\n    29240, 57644, 33137, 91949, 55157, 52384, 117313, 5090, 17717, 89668, 49363, 82238, 241035, 66216, 29066, 184088,\n    97206, 62820, 26595, 4241, 135635, 173672, 8202, 459, 71355, 146294, 29587, 3008, 135385, 141203, 14803, 6634,\n    45094, 69362, 50925, 546, 51884, 62011, 83296, 234584, 44515, 56050, 89476, 87751, 19373, 12691, 149923, 19794,\n    13833, 35846, 87557, 58339, 2884, 19145, 25647, 12224, 11024, 77338, 64608, 122297, 53025, 7205, 36189, 36294,\n    170779, 21750, 7739, 173883, 75192, 35664, 224240, 113121, 30181, 26267, 27036, 117827, 92015, 106516, 55628, 203549,\n    67949, 60462, 60844, 35911, 20457, 1820, 920, 19773, 8738, 73173, 181993, 38521, 98254, 76257, 46008, 92796,\n    5384, 26868, 151566, 22124, 2411, 15919, 186872, 180021, 28099, 152961, 78811, 80237, 62352, 102653, 74259, 184890,\n    16792, 123702, 224945, 29940, 19512, 75283, 14059, 112691, 92811, 233329, 20411, 138569, 53341, 109802, 50600, 134528,\n    66747, 5529, 166531, 31578, 64732, 67189, 1596, 126357, 967, 167999, 206598, 109752, 119431, 207825, 78791, 91938,\n    10301, 27311, 24233, 252343, 28831, 32812, 66002, 112267, 90895, 8786, 8095, 16824, 22866, 21813, 60507, 174833,\n    19549, 130985, 117051, 52110, 6938, 81923, 123864, 38061, 919, 18680, 53534, 46739, 112893, 161529, 85429, 26761,\n    11900, 81121, 91968, 15390, 217947, 56524, 1713, 6654, 37089, 85630, 138866, 61850, 16491, 75577, 16884, 98296,\n    73523, 6140, 44645, 6062, 36366, 29844, 57946, 37932, 42472, 5266, 20834, 19309, 33753, 127182, 134259, 35810,\n    41805, 45878, 312001, 14881, 47757, 49251, 120050, 44252, 3708, 25856, 107864, 120347, 1228, 36550, 41682, 34496,\n    47025, 8393, 173365, 246526, 12894, 161607, 35670, 90785, 126572, 2095, 124731, 157033, 58694, 554, 12786, 9642,\n    4817, 16136, 47864, 174698, 66992, 4639, 69284, 10625, 40710, 27763, 51738, 30404, 264105, 137904, 109882, 52487,\n    42824, 57514, 2740, 10479, 146799, 107390, 16586, 88038, 174951, 9410, 16185, 44158, 5568, 40658, 46108, 12763,\n    97385, 26175, 108859, 664, 230732, 67470, 46663, 14395, 50750, 141320, 93140, 15361, 47997, 55784, 6791, 307840,\n    118569, 107326, 18056, 58281, 260415, 54691, 8790, 73332, 45633, 7511, 45674, 143373, 14031, 11799, 94491, 35646,\n    96544, 14560, 26049, 32983, 25791, 83814, 42094, 231370, 63955, 139212, 2359, 169908, 3108, 183486, 105867, 28197,\n    32941, 124968, 26402, 88267, 149768, 23053, 3078, 19091, 52924, 25383, 19209, 111548, 97361, 3959, 24880, 235061,\n    9099, 24921, 161254, 151405, 20508, 7159, 34381, 20133, 11434, 74036, 19974, 34769, 36585, 1076, 22454, 17354,\n    38727, 235160, 111547, 96454, 117448, 156940, 91330, 37299, 7310, 26915, 117060, 51369, 22620, 61861, 322264, 106850,\n    111694, 15091, 2624, 40345, 300446, 177064, 1707, 27389, 54792, 327783, 132669, 183543, 59003, 17744, 20603, 151134,\n    106923, 53084, 71803, 279424, 319816, 11579, 21946, 16728, 38274, 72711, 5085, 83391, 88646, 40159, 25027, 34680,\n    10752, 12988, 54126, 30365, 18338, 100445, 230674, 44874, 84974, 143877, 123253, 139372, 28082, 91477, 144002, 13096,\n    219729, 46016, 50029, 42377, 14601, 6660, 58244, 58978, 23918, 88206, 113611, 64452, 17541, 41032, 10942, 12021,\n    49189, 10978, 40175, 37156, 10947, 71709, 106894, 112538, 57007, 137486, 150608, 152719, 40615, 7746, 279716, 13101,\n    19524, 28708, 40578, 72320, 1096, 182051, 94527, 51275, 22833, 45164, 81917, 77519, 48508, 5421, 140302, 37845,\n    149830, 5587, 27579, 5357, 428725, 248187, 6326, 206760, 39814, 32585, 89923, 44341, 288753, 284443, 96368, 31201,\n    94189, 119504, 20359, 52073, 103216, 179, 27934, 32801, 96035, 34111, 34309, 101326, 18198, 20704, 210266, 37643,\n    27880, 141873, 106000, 19414, 56614, 167714, 66483, 107885, 86602, 4379, 20796, 75467, 4987, 5017, 118857, 26003,\n    34308, 114428, 29198, 6686, 29697, 73632, 3739, 69795, 16798, 41504, 7207, 30722, 21436, 36735, 28067, 28545,\n    3239, 11221, 36031, 41889, 100010, 19247, 317673, 29495, 174554, 6424, 129725, 53845, 94986, 7955, 59676, 2604,\n    191497, 19735, 102214, 62954, 23844, 11872, 179525, 261436, 34492, 428, 78404, 142035, 16747, 17246, 27578, 37021,\n    33672, 57944, 26056, 135760, 2369, 61674, 122066, 31327, 19374, 157065, 40553, 130982, 69619, 71290, 38855, 72100,\n    92903, 95940, 51422, 165999, 65713, 57873, 50726, 7288, 20272, 2081, 42326, 22624, 81120, 57914, 79352, 19447,\n    1684, 72302, 11774, 302559, 161481, 96396, 13692, 414988, 3721, 79066, 56627, 46883, 21150, 11747, 12184, 5856,\n    113458, 176117, 84416, 52079, 27933, 3354, 59765, 141359, 2212, 216309, 2555, 23458, 196722, 142463, 45701, 44548,\n    28798, 19418, 215, 29916, 9396, 10574, 114226, 84475, 13520, 18694, 34056, 4524, 90302, 62930, 13539, 19407,\n    77209, 7728, 38088, 9535, 2263, 23875, 183945, 17750, 26274, 67172, 10585, 28042, 22199, 7478, 51331, 66030,\n    26774, 192929, 31434, 25850, 50197, 52926, 178158, 4679, 181256, 70184, 229600, 9959, 105594, 72158, 73974, 2726,\n    35085, 78087, 23284, 35568, 51713, 155676, 5401, 27254, 11966, 17569, 223253, 71993, 103357, 111477, 55722, 30504,\n    26034, 46774, 35392, 36285, 214814, 41143, 163465, 1051, 16094, 81044, 6636, 76489, 179102, 20712, 39178, 35683,\n    125177, 54219, 30617, 52994, 25324, 50123, 2543, 87529, 58995, 10688, 125199, 12388, 60158, 125481, 131646, 7642,\n    133350, 65874, 3438, 97277, 101450, 10075, 56344, 116821, 50778, 60547, 98016, 106135, 13859, 14255, 16300, 77373,\n    173521, 8285, 45932, 37426, 4054, 114295, 55947, 7703, 39114, 52, 51119, 128135, 19714, 60715, 9554, 50492,\n    88180, 2823, 118271, 52993, 122625, 97919, 23859, 37895, 25040, 33614, 32102, 20431, 3577, 9275, 15686, 43031,\n    157741, 110358, 1884, 40291, 125391, 13736, 5008, 64881, 87336, 77381, 70711, 43032, 49155, 118587, 70494, 4318,\n    10168, 30126, 12580, 10524, 280104, 104001, 145413, 2862, 84140, 6603, 106005, 13566, 12780, 11251, 42830, 571,\n    179910, 82443, 13146, 469, 42714, 32591, 265217, 424024, 92553, 54721, 134100, 6007, 15242, 114681, 59030, 16718,\n    85465, 200214, 85982, 55174, 165013, 23493, 56964, 82529, 109150, 32706, 27568, 82442, 5350, 14976, 13165, 44890,\n    60021, 21343, 33978, 17264, 4655, 22328, 27819, 75730, 16567, 55483, 14510, 17926, 45827, 150609, 3704, 7385,\n    272531, 161543, 76904, 122163, 52405, 2039, 19165, 41623, 14423, 228354, 3369, 176360, 85491, 7122, 35789, 303724,\n    4465, 13628, 2233, 55311, 118771, 20713, 10006, 221519, 45115, 71021, 35650, 29775, 7337, 10864, 20665, 21142,\n    1746, 15080, 1624, 32449, 10905, 105743, 229797, 7701, 3940, 22997, 178467, 57208, 389057, 39683, 59403, 63344,\n    63125, 54847, 69691, 18336, 56448, 3362, 37202, 18282, 29648, 138224, 35867, 10495, 5911, 28814, 26653, 31514,\n    176702, 26550, 45621, 11734, 4525, 40543, 73944, 121080, 27858, 155561, 14887, 44670, 30742, 8796, 107455, 113472,\n    56369, 75581, 183777, 240095, 133699, 153299, 8768, 160464, 26058, 49078, 103971, 21875, 71486, 44888, 17156, 9678,\n    89541, 123019, 102337, 3972, 83930, 21245, 87852, 109660, 287918, 183019, 686, 10100, 39177, 283941, 11274, 24736,\n    26793, 26214, 25995, 77011, 141580, 4070, 23742, 46285, 46632, 30700, 26669, 19056, 35951, 115575, 174034, 56097,\n    35463, 87425, 24575, 44245, 38701, 82317, 85922, 281616, 100333, 147697, 61503, 7730, 84330, 8530, 59917, 61597,\n    17173, 9092, 32658, 90288, 193136, 39023, 20381, 56654, 31132, 7779, 1919, 1375, 117128, 30819, 11169, 40938,\n    23935, 115201, 101155, 151034, 4835, 11231, 74550, 89388, 59951, 91704, 107312, 167882, 115062, 12732, 72738, 88703,\n    464019, 158267, 57995, 60496, 737, 14371, 123867, 4174, 243339, 159946, 7568, 16025, 134556, 110916, 38103, 191,\n    80226, 88794, 29688, 27230, 10454, 76308, 57647, 77409, 113483, 66864, 14745, 19808, 12023, 46583, 84805, 16015,\n    17102, 2231, 20611, 3547, 95740, 250131, 34559, 108894, 8498, 15853, 159169, 148920, 20942, 2813, 93160, 45188,\n    210613, 45531, 52587, 149062, 39782, 28194, 57849, 60965, 84954, 89766, 84453, 100927, 16501, 27658, 165311, 103841,\n    54192, 207341, 19558, 20084, 319622, 5672, 205467, 98462, 61849, 36279, 13609, 147177, 24726, 165015, 209489, 59591,\n    31157, 6551, 117580, 75060, 141146, 277310, 21072, 22023, 106474, 63041, 137443, 122965, 68371, 5383, 42146, 98961,\n    113467, 30863, 23794, 4843, 99630, 30392, 82679, 13699, 241612, 33601, 93146, 24319, 18643, 32155, 95669, 40440,\n    15333, 34089, 67799, 142144, 58245, 38633, 114531, 117400, 77861, 188726, 5507, 2568, 8853, 10987, 107222, 2663,\n    2421, 11530, 13345, 30075, 41785, 118661, 104786, 17459, 12490, 16281, 71936, 193555, 17431, 5944, 71758, 26485,\n    77317, 20803, 367167, 158, 7362, 93430, 11735, 172445, 46002, 11532, 54482, 930, 62911, 2235, 23004, 179236,\n    4764, 101859, 208113, 22477, 55163, 95579, 14098, 67320, 162556, 90709, 156949, 3826, 57492, 4025, 34092, 87442,\n    104565, 6718, 186015, 28214, 14209, 10039, 107186, 233912, 58877, 81637, 55265, 39828, 6194, 145813, 50831, 105849,\n    4974, 88319, 122296, 10272, 197216, 95714, 51540, 72418, 23324, 91555, 8743, 140452, 250249, 51666, 34124, 7229,\n    38592, 129641, 78169, 174242, 22464, 149964, 51450, 14034, 10026, 95376, 26190, 120062, 14401, 8700, 265, 31386,\n    143573, 7203, 229889, 61567, 4227, 140981, 2466, 72052, 10787, 10062, 30958, 6099, 38471, 30103, 23202, 208101,\n    70847, 467, 58934, 32271, 32984, 36637, 24107, 30771, 17109, 73353, 13650, 2098, 157040, 67366, 66904, 106018,\n    265380, 107238, 18535, 44025, 32681, 144983, 62505, 91295, 56120, 3082, 77508, 10322, 63023, 36700, 81885, 224127,\n    16721, 45023, 239261, 111272, 13852, 7866, 149243, 204199, 32309, 22084, 42029, 38316, 126644, 104973, 14406, 43454,\n    67322, 61310, 15789, 40285, 24026, 181047, 6301, 70927, 23319, 115823, 27248, 66693, 115875, 278566, 63007, 146844,\n    56841, 59007, 87368, 180001, 22370, 42114, 80605, 12022, 10374, 308, 25079, 14689, 12618, 63368, 7936, 264973,\n    212291, 136713, 95999, 105801, 18965, 32075, 48700, 52230, 35119, 96912, 32992, 8586, 16606, 101333, 101812, 14969,\n    39930, 759, 193090, 27387, 42914, 12937, 5058, 62646, 64528, 38624, 25743, 37502, 3716, 4435, 30352, 178687,\n    26461, 132611, 42002, 138442, 35833, 59582, 16345, 8048, 60319, 49349, 309, 47800, 49739, 90482, 26405, 34470,\n    63786, 32479, 85028, 39866, 47846, 11649, 23934, 29466, 2816, 42864, 31828, 7410, 74885, 49632, 47629, 111801,\n    90749, 19536, 18767, 105764, 59606, 21223, 10746, 76298, 22220, 39408, 7190, 79654, 64856, 11602, 82156, 272765,\n    17079, 70089, 245473, 51813, 184407, 384678, 1576, 122249, 5064, 27481, 6188, 25790, 74361, 27541, 318284, 45430,\n    31488, 620, 93579, 45723, 192118, 22670, 51913, 4162, 70244, 35966, 26397, 16199, 50899, 209613, 121702, 287507,\n    2993, 36101, 132229, 67345, 33062, 76295, 118628, 78705, 52316, 34375, 107083, 107454, 44863, 127561, 33964, 3073,\n    154010, 190914, 55967, 39074, 6272, 31047, 5550, 41123, 26154, 98638, 47110, 19998, 148091, 50229, 31329, 59900,\n    195442, 19106, 61347, 73497, 70015, 682, 45850, 25776, 38022, 148951, 6288, 37411, 232526, 109277, 27286, 32342,\n    9262, 5220, 16651, 23175, 46740, 129438, 78614, 121925, 66914, 88710, 127952, 5563, 21500, 34521, 10739, 14863,\n    191006, 62956, 17359, 16749, 67027, 56284, 69134, 43301, 35039, 58883, 54466, 60823, 404451, 75743, 59856, 86979,\n    7923, 34273, 83785, 32142, 7693, 268986, 197428, 282681, 17049, 22346, 22990, 92245, 107180, 3357, 37104, 96724,\n    49153, 7683, 31197, 43267, 82231, 164276, 23696, 20848, 188364, 22309, 24821, 158707, 1018, 22514, 70922, 27792,\n    45589, 59709, 10765, 736, 35218, 63479, 51987, 24275, 63588, 55361, 92929, 81964, 4658, 20122, 12330, 44058,\n    13065, 311456, 72224, 8337, 211229, 38979, 22590, 138478, 52757, 32595, 133600, 8838, 31549, 94412, 43391, 90056,\n    1585, 94802, 127271, 6223, 31889, 137038, 132910, 2165, 57616, 230152, 6080, 10748, 36737, 74579, 134062, 50525,\n    180532, 119270, 34556, 76155, 82394, 52595, 29258, 31435, 87820, 67996, 26943, 183878, 38007, 2410, 13526, 180297,\n    69856, 3503, 187396, 167700, 7838, 16701, 9199, 56267, 3661, 37407, 65994, 23767, 5708, 62508, 221700, 67088,\n    86978, 46776, 84434, 32088, 5612, 9149, 88244, 21685, 95151, 46750, 189612, 2979, 506311, 2594, 3628, 40074,\n    105039, 78243, 28523, 6651, 38058, 71999, 30992, 12764, 68261, 108991, 6165, 26450, 61961, 13400, 22426, 7490,\n    60890, 109623, 2070, 12958, 50355, 67979, 257096, 7213, 42578, 52121, 35716, 65461, 7516, 124758, 39268, 302,\n    64712, 14977, 1467, 219452, 2840, 34229, 11121, 21602, 19270, 63574, 8024, 1532, 17331, 79839, 78885, 52029,\n    180767, 57957, 6069, 91265, 61380, 55767, 8927, 32881, 287603, 22149, 35029, 68876, 6428, 199567, 46926, 13412,\n    104132, 21434, 366616, 45060, 110046, 81924, 128910, 45886, 52821, 130416, 29416, 77342, 21762, 67329, 121432, 79924,\n    11724, 38625, 81006, 102033, 28338, 13326, 3250, 82056, 82526, 38212, 21112, 12382, 111495, 3263, 7414, 86274,\n    93490, 40844, 30224, 45212, 24019, 48411, 71367, 24941, 76729, 57776, 3769, 38114, 202019, 197745, 31953, 237533,\n    33270, 201580, 255648, 100798, 44741, 32241, 98468, 106931, 10085, 15090, 170358, 33154, 66787, 18819, 69760, 25061,\n    234005, 82660, 6295, 131975, 16874, 9076, 4094, 25005, 17740, 40908, 19533, 220019, 44330, 99792, 50040, 19619,\n    13950, 55228, 24423, 31253, 95308, 103177, 184795, 28590, 82285, 5059, 3210, 75525, 49894, 70007, 56178, 10580,\n    36051, 139681, 21617, 98736, 3555, 106306, 164189, 37352, 63915, 47824, 24883, 145530, 61904, 28444, 11483, 19837,\n    145446, 30420, 112972, 85939, 11835, 191233, 2262, 20705, 58630, 1753, 148334, 1197, 144714, 6887, 11223, 107667,\n    60879, 77914, 4151, 57417, 81594, 96681, 169430, 1784, 20444, 95138, 254041, 27038, 596, 7117, 72808, 13759,\n    3353, 126776, 21074, 55322, 27081, 36942, 39547, 139830, 179275, 4453, 713, 8722, 71399, 19204, 25785, 22794,\n    23923, 104114, 11291, 25458, 102309, 88396, 75288, 230440, 206396, 104551, 58447, 130857, 37247, 94734, 31548, 176529,\n    226077, 65159, 20104, 10096, 66881, 94191, 237909, 27109, 37404, 1520, 27421, 25220, 113003, 23423, 24884, 50585,\n    6286, 231877, 150800, 11789, 3226, 90004, 60642, 5053, 202400, 61442, 132531, 175329, 57138, 30116, 103847, 9973,\n    75367, 16452, 32360, 59119, 21246, 10191, 164804, 23305, 61051, 37348, 154530, 13214, 5468, 50403, 66754, 130976,\n    50559, 80515, 14436, 155492, 84017, 5472, 43107, 41240, 2890, 90431, 70188, 382, 76234, 48040, 50211, 281038,\n    237007, 32115, 142178, 1536, 22761, 96429, 1811, 31243, 1679, 49143, 55209, 17402, 235054, 61494, 7462, 77030,\n    34925, 87609, 78002, 9499, 9027, 73289, 201078, 101379, 63544, 27666, 5469, 10642, 30029, 49816, 132979, 95620,\n    58086, 351930, 116300, 2110, 2043, 30845, 6154, 11279, 16727, 4122, 2277, 27281, 4971, 3650, 39060, 61970,\n    65951, 39674, 75686, 38151, 11370, 130809, 177895, 32665, 63725, 122267, 7857, 39618, 118483, 44792, 157755, 178624,\n    136994, 24260, 41308, 22471, 12404, 21707, 12486, 30473, 52781, 50246, 20247, 39065, 909, 56825, 103158, 128603,\n    31542, 1089, 41935, 32744, 12428, 37963, 84420, 33134, 72921, 208449, 42622, 168151, 127335, 147107, 46699, 38216,\n    12591, 94342, 85814, 31423, 24944, 2605, 87542, 67473, 192551, 4496, 56321, 91819, 17630, 6300, 256183, 114569,\n    202090, 33209, 35289, 34897, 24967, 40520, 43470, 5344, 10199, 34810, 14283, 10381, 10017, 62923, 49924, 23233,\n    64539, 13051, 35686, 19698, 11570, 135555, 120868, 44924, 87065, 52318, 52335, 47586, 140906, 245885, 109834, 78668,\n    9065, 46990, 25258, 72022, 61243, 40838, 4545, 146387, 10537, 11557, 17470, 36930, 68104, 46711, 24264, 79401,\n    81043, 18225, 120488, 24746, 84338, 81652, 28266, 13776, 21878, 46973, 1047, 230465, 73357, 95777, 24973, 210160,\n    62210, 58404, 110633, 169651, 6937, 41870, 9909, 26822, 191062, 76553, 27519, 96256, 239070, 2478, 205678, 67955,\n    58532, 20601, 50120, 19148, 78501, 195724, 110740, 8249, 109665, 27446, 30568, 57631, 31425, 49752, 32820, 65504,\n    50079, 3663, 102256, 219898, 23849, 211315, 14645, 4359, 91767, 9528, 12449, 49366, 7941, 49763, 107848, 8930,\n    27086, 50686, 9744, 10447, 81935, 39513, 46514, 1670, 29229, 6172, 22312, 137280, 97759, 9806, 14445, 22976,\n    56458, 73391, 34983, 93760, 174219, 52573, 33149, 59747, 2429, 136277, 75123, 165263, 91040, 7446, 57632, 48633,\n    97140, 246081, 84766, 151684, 79918, 93268, 120346, 54059, 54875, 77858, 32996, 103590, 45276, 11968, 19600, 25849,\n    17159, 132907, 42828, 16817, 4913, 99462, 103303, 27395, 5737, 74184, 20749, 21160, 14377, 77062, 131403, 158735,\n    10999, 27799, 77785, 9320, 34366, 51593, 61070, 33746, 47048, 29268, 36675, 30262, 53297, 9832, 82000, 20188,\n    122292, 39917, 7331, 18160, 68301, 185935, 134830, 15031, 4935, 10004, 165845, 185534, 46923, 30109, 44134, 122631,\n    18874, 22903, 112790, 26561, 18549, 348902, 82871, 140345, 255565, 135390, 63556, 103747, 145055, 179600, 145662, 296111,\n    61661, 211987, 23952, 52342, 126343, 48450, 32919, 44277, 82185, 9591, 62139, 205363, 376969, 394874, 108461, 18040,\n    120885, 14798, 39863, 16571, 16794, 58271, 81025, 55206, 14640, 118656, 6361, 44092, 85970, 6262, 153863, 108244,\n    180200, 72264, 79947, 38044, 10050, 5735, 61221, 80712, 5471, 115689, 11391, 11661, 184257, 20010, 60116, 30320,\n    19327, 134598, 45455, 27542, 18004, 125092, 452272, 1549, 91523, 46567, 180063, 156026, 2608, 11174, 58848, 37788,\n    65907, 80194, 30490, 5786, 40775, 119519, 106241, 11323, 156297, 8425, 61495, 2617, 29675, 2425, 59886, 112582,\n    49142, 59618, 4863, 50597, 86710, 50650, 168632, 27693, 85641, 83643, 18993, 25768, 84284, 28090, 93592, 36627,\n    312804, 43381, 9887, 9402, 100931, 97165, 3311, 173330, 66805, 28935, 4963, 184460, 3201, 78102, 19126, 21607,\n    37496, 24938, 22615, 16153, 32862, 134792, 153318, 61120, 6067, 2812, 12826, 12792, 23825, 37559, 64662, 202250,\n    102694, 155488, 85881, 149193, 46233, 65383, 15521, 106982, 11358, 176786, 25752, 39717, 34208, 24510, 32464, 77742,\n    39371, 72028, 138229, 60688, 71386, 102834, 132477, 2208, 11548, 63670, 271279, 28351, 30338, 38620, 32491, 99845,\n    143885, 152266, 13252, 2825, 178663, 108097, 1775, 78201, 14897, 113573, 163346, 62292, 171129, 22183, 96598, 38733,\n    64971, 166776, 117445, 9968, 146393, 44677, 74867, 20908, 97328, 12761, 25656, 26785, 9148, 112344, 26115, 99176,\n    110121, 22437, 49547, 6180, 79320, 5835, 31392, 43328, 33377, 75870, 119860, 69497, 80273, 7325, 155219, 43167,\n    111173, 28347, 20222, 3763, 71752, 55041, 47252, 14618, 28088, 15012, 97805, 194698, 54636, 2036, 41349, 6173,\n    96604, 61530, 51859, 43782, 13361, 24334, 22668, 24792, 7070, 23441, 16789, 3209, 36211, 208475, 26242, 32880,\n    122181, 182407, 21444, 31060, 88459, 29929, 77907, 12716, 10934, 97005, 20599, 31690, 8403, 58445, 30303, 22700,\n    10336, 86731, 103115, 337709, 72556, 46788, 112566, 47684, 67089, 53548, 36874, 56487, 41387, 125985, 26893, 40071,\n    106683, 73712, 18787, 40105, 72992, 67246, 137276, 50802, 36790, 70328, 138827, 22466, 39263, 183295, 29858, 50975,\n    9322, 57397, 10654, 24364, 30383, 55799, 41600, 23584, 127295, 296610, 129078, 143558, 244131, 86397, 36049, 1085,\n    80677, 3820, 108139, 5476, 34767, 24683, 7758, 13060, 7239, 131671, 250593, 59556, 103392, 29810, 4188, 252323,\n    39404, 116877, 7651, 43600, 40338, 13554, 157253, 39196, 25978, 144387, 61211, 234, 50104, 6129, 10449, 93777,\n    9240, 356378, 274148, 4439, 72970, 3724, 147770, 78680, 62570, 115877, 40027, 40547, 36817, 224392, 64609, 34795,\n    165027, 67440, 2477, 37206, 23431, 50754, 164797, 46018, 94995, 170982, 27051, 7957, 22767, 3674, 27900, 56419,\n    18930, 60701, 41302, 2692, 84749, 339721, 61996, 111094, 80221, 50129, 1045, 8153, 62945, 19202, 8250, 37208,\n    37418, 32560, 79477, 41106, 88569, 33963, 36693, 5892, 30570, 1581, 66471, 49647, 11922, 160717, 29442, 5643,\n    114865, 82962, 95982, 132098, 22633, 22838, 94726, 54556, 28566, 205039, 162340, 33216, 16849, 35847, 221339, 94851,\n    26533, 71469, 1805, 3804, 12935, 45483, 71020, 36310, 65381, 192960, 34240, 35165, 59773, 1248, 46954, 155332,\n    96864, 4246, 388800, 16129, 57133, 74592, 44807, 442014, 38203, 42574, 80818, 91592, 26377, 36424, 65760, 977,\n    77387, 22628, 147610, 28018, 30561, 98454, 6969, 119628, 63648, 18170, 36854, 26601, 64018, 22027, 37279, 51395,\n    152934, 21153, 9430, 58760, 194742, 5330, 55115, 34158, 28917, 174111, 13171, 122326, 1526, 43896, 66094, 25325,\n    4234, 148354, 11450, 275, 18999, 112191, 44365, 22723, 68409, 8733, 57746, 96565, 75007, 14196, 108844, 29475,\n    88599, 177563, 100792, 106156, 86323, 93726, 14248, 135341, 194131, 40126, 47099, 14779, 8272, 39597, 95983, 171398,\n    65882, 28052, 10393, 47213, 40689, 22120, 72212, 106829, 34964, 109146, 753, 648, 21660, 30047, 17527, 181025,\n    5619, 145357, 4085, 216883, 9359, 186951, 24779, 53931, 24545, 36197, 223296, 62628, 168101, 4243, 107313, 30321,\n    26642, 13049, 51059, 31027, 107912, 807, 73550, 26551, 84369, 122422, 165872, 49754, 74213, 234264, 33151, 52014,\n    33100, 87183, 22365, 52500, 40013, 23302, 5652, 72723, 21404, 26107, 48434, 587, 94049, 168493, 96418, 32871,\n    70860, 31709, 25128, 443, 71597, 166253, 15670, 70994, 26341, 133675, 28280, 75491, 54756, 47955, 56028, 26182,\n    11952, 113272, 472197, 64640, 110753, 17919, 337, 50642, 22576, 142, 87371, 53391, 93210, 126694, 15285, 19642,\n    85667, 14148, 1506, 42092, 52962, 33243, 11970, 20734, 135843, 57044, 58880, 13002, 219134, 22876, 64754, 232519,\n    4257, 43120, 321573, 24799, 64526, 124728, 52579, 81472, 70831, 276848, 17403, 74359, 23021, 182101, 74597, 23744,\n    148267, 12055, 7976, 5349, 11772, 67540, 167347, 65318, 18720, 127832, 108238, 22828, 90233, 9987, 259080, 118185,\n    73209, 79270, 13775, 90100, 137742, 90799, 70569, 15699, 19961, 9087, 67475, 57872, 39731, 8810, 134897, 131868,\n    146849, 19898, 3334, 2281, 167061, 91073, 60356, 467742, 74712, 188, 53179, 137679, 92769, 29241, 9537, 132595,\n    80119, 1041, 88962, 5976, 40171, 44911, 102859, 139059, 104558, 98987, 47761, 19272, 71472, 113864, 175377, 73338,\n    10857, 23402, 23758, 1591, 139864, 5644, 4076, 118760, 16427, 134198, 18853, 20291, 100849, 37423, 22038, 36677,\n    19071, 195521, 57445, 11069, 31869, 55718, 66882, 148490, 44, 41296, 75242, 49704, 166810, 9906, 20943, 122258,\n    49112, 105667, 15969, 10344, 6408, 187694, 21399, 72742, 58970, 14867, 14376, 81889, 41856, 23225, 15042, 56993,\n    16074, 131389, 74276, 72407, 53875, 383108, 53597, 37363, 68993, 44854, 122548, 430927, 198279, 38430, 80409, 12245,\n    2981, 628, 2818, 17760, 37437, 238229, 7968, 46892, 2200, 3730, 34190, 65983, 37959, 112291, 87850, 70827,\n    6522, 20750, 73913, 111621, 41652, 19587, 2780, 58668, 25916, 85259, 18200, 168962, 95781, 42445, 102050, 7776,\n    57662, 103313, 47742, 96358, 41964, 66174, 100396, 29069, 204735, 19679, 27978, 7479, 40264, 22534, 61183, 36081,\n    107436, 58223, 14680, 23002, 101311, 24716, 124108, 12908, 5646, 31750, 40380, 14215, 232799, 102772, 14122, 96775,\n    61398, 50917, 12096, 149880, 67833, 598749, 124194, 155871, 49216, 790, 14677, 65319, 56917, 7440, 145744, 95701,\n    12206, 49405, 129269, 76199, 45732, 9767, 11058, 9047, 210885, 11051, 7392, 26307, 2130, 8132, 147526, 20802,\n    232698, 115660, 50060, 59789, 57344, 107623, 80343, 112676, 23291, 9866, 160971, 34032, 118291, 15719, 59730, 164911,\n    28975, 2659, 58046, 78480, 21854, 66209, 53863, 109085, 116045, 29021, 46481, 107552, 22130, 18764, 70254, 31272,\n    11300, 52460, 43933, 84738, 20721, 53869, 190840, 79673, 105300, 7561, 321817, 66924, 13940, 33281, 101046, 183181,\n    32176, 71878, 5678, 62924, 79535, 56646, 40303, 19559, 27703, 93042, 73368, 42187, 3670, 37376, 46440, 7023,\n    36816, 109628, 20680, 5940, 276440, 275233, 170848, 112093, 136996, 14984, 20226, 111441, 77693, 112960, 48577, 39370,\n    55707, 50314, 123404, 26570, 54281, 61372, 123391, 4857, 35928, 246740, 132507, 106646, 44241, 7196, 92258, 9825,\n    37688, 51197, 303141, 5590, 15476, 132986, 10955, 85782, 34486, 26696, 7991, 28813, 18858, 39546, 11703, 11365,\n    38185, 5716, 93555, 11925, 40121, 60002, 6985, 10976, 171384, 3887, 43394, 13337, 56346, 6381, 252336, 39573,\n    75042, 53711, 1028, 31781, 44295, 95925, 131713, 7214, 68125, 43571, 70954, 213234, 1628, 8760, 13391, 65485,\n    17320, 56038, 1710, 25248, 60803, 57399, 19839, 3870, 326, 281556, 50945, 72400, 21460, 316244, 75619, 56246,\n    98775, 481, 13513, 55765, 50427, 7388, 123519, 32929, 57908, 27124, 61316, 101097, 57467, 30228, 48792, 10788,\n    20402, 37318, 50526, 155730, 34456, 158065, 145305, 17832, 43733, 64052, 4506, 35072, 205355, 177028, 184004, 187081,\n    68616, 35938, 83703, 10367, 36892, 93186, 260137, 51934, 89970, 4985, 23445, 26755, 21558, 7948, 78741, 23376,\n    124405, 85594, 68596, 57536, 49351, 12619, 56593, 132668, 99924, 109728, 71844, 71935, 196018, 65464, 17617, 14987,\n    89701, 143773, 33997, 8687, 22701, 33258, 2914, 4436, 72108, 85610, 9671, 49067, 2327, 82988, 1361, 1672,\n    44033, 35777, 30269, 24057, 10605, 82236, 616, 15793, 13919, 47249, 112086, 116698, 9484, 80207, 90574, 33304,\n    68624, 93127, 56101, 42210, 160929, 4827, 38995, 38095, 4701, 125119, 5027, 33680, 9236, 231236, 14135, 87837,\n    23318, 70261, 78893, 30151, 81482, 14332, 1084, 74256, 27532, 46644, 79185, 3148, 62615, 6981, 55672, 31668,\n    36825, 1849, 14536, 37446, 14738, 23779, 43058, 162749, 72199, 1168, 21346, 5592, 85932, 85302, 9668, 18351,\n    57135, 150360, 2080, 228015, 77953, 34670, 119302, 151751, 31009, 106725, 84265, 45214, 59289, 74178, 113071, 263206,\n    111009, 4021, 44449, 188119, 192629, 123592, 392506, 292847, 114487, 12831, 205858, 9852, 20780, 79648, 75767, 357014,\n    97721, 18166, 21005, 67950, 33226, 204009, 16536, 2987, 11335, 66717, 144910, 47950, 17262, 55060, 15063, 2934,\n    51038, 26775, 178497, 66008, 3427, 49433, 128592, 20036, 157553, 63861, 3089, 23015, 51210, 28696, 35933, 49942,\n    71135, 231518, 99620, 17248, 21835, 176536, 20676, 16944, 38700, 165831, 233253, 295625, 36723, 13023, 52745, 10907,\n    19423, 67972, 125868, 95473, 82875, 1183, 108455, 52685, 33417, 64095, 21433, 52438, 33191, 127809, 44505, 211823,\n    7810, 2752, 95548, 162031, 7185, 91196, 47563, 61721, 33359, 17897, 23682, 42806, 178101, 22874, 49707, 199897,\n    75419, 82456, 8618, 11171, 79712, 116847, 18783, 44190, 46564, 5346, 59046, 95032, 7893, 14916, 3214, 26800,\n    24172, 121453, 34362, 10250, 17408, 18888, 4840, 68696, 22831, 13162, 36005, 32512, 14800, 62357, 41723, 45046,\n    27247, 37486, 5372, 2564, 34261, 298500, 66509, 133920, 89138, 31305, 117697, 19097, 108304, 81386, 84106, 23802,\n    46411, 63304, 946, 51417, 41777, 41041, 19501, 115864, 60743, 294354, 37955, 94165, 18116, 1156, 17937, 20645,\n    57114, 90804, 58042, 48643, 92288, 9861, 2557, 88546, 61333, 101008, 12853, 5148, 87856, 4152, 144503, 73841,\n    18718, 9789, 147565, 10846, 42085, 12789, 30223, 8993, 56352, 67203, 2448, 28215, 6052, 23540, 126319, 75933,\n    36689, 80235, 23231, 23561, 21383, 38800, 77548, 102798, 21234, 31468, 158608, 46188, 63960, 191679, 8051, 67014,\n    11185, 170078, 42186, 28827, 34777, 41930, 212079, 12421, 34750, 24111, 110344, 73918, 45171, 70826, 141949, 40063,\n    23979, 24254, 37309, 26724, 27179, 24718, 83648, 54938, 14591, 17425, 29525, 102675, 48975, 48654, 12316, 8929,\n    60640, 41709, 50168, 63264, 89812, 50716, 48632, 38755, 138583, 160123, 55579, 71829, 24230, 233277, 46322, 39650,\n    166388, 34718, 24108, 98252, 7031, 106695, 62498, 18258, 35062, 217827, 78731, 34824, 33354, 19520, 60852, 2432,\n    60224, 8587, 2836, 62955, 702, 20227, 42285, 40560, 95592, 62486, 11094, 53035, 143291, 18842, 46177, 77994,\n    1770, 9657, 107422, 172915, 32655, 128716, 25886, 25164, 156740, 119928, 165875, 85817, 11007, 89110, 33956, 12652,\n    65156, 180266, 8494, 36889, 19958, 20955, 96, 1264, 118288, 135769, 44754, 86671, 5632, 19026, 168220, 289120,\n    33569, 93821, 66144, 70635, 7687, 5642, 2714, 55445, 56636, 71545, 184182, 93133, 7332, 37389, 12643, 52315,\n    22729, 11014, 158742, 17050, 152889, 50178, 34601, 41945, 52136, 9948, 26914, 63548, 95721, 115951, 40759, 8960,\n    158258, 38938, 49232, 48325, 42234, 81523, 253019, 66128, 40978, 20048, 238048, 38760, 62928, 122560, 118532, 43687,\n    137472, 163689, 26680, 9878, 17448, 51035, 16211, 60834, 36749, 29178, 14241, 59868, 150086, 2305, 26477, 42422,\n    34342, 165341, 83279, 33894, 14257, 29928, 12743, 13957, 125571, 89134, 66712, 10952, 16507, 147839, 30146, 7249,\n    16565, 45399, 39874, 114565, 215780, 31990, 230881, 171477, 102, 196546, 44538, 10880, 84948, 281705, 86651, 10617,\n    31395, 2342, 453658, 43569, 60561, 132901, 21845, 17727, 58556, 258242, 22262, 58728, 4008, 77997, 11806, 37431,\n    30599, 81375, 109137, 185787, 114085, 217292, 97453, 169085, 30593, 60212, 11544, 102056, 65580, 2384, 91655, 4855,\n    95725, 7295, 157994, 16228, 20669, 53276, 141590, 105246, 17334, 25440, 76067, 17967, 39321, 38911, 11362, 28559,\n    63807, 21627, 26468, 85816, 40120, 1025, 15234, 58319, 69516, 66512, 124548, 75845, 78873, 22137, 46681, 51242,\n    85683, 32909, 76747, 35555, 43396, 101465, 1765, 73094, 1077, 2962, 39028, 66777, 57831, 42048, 15828, 13962,\n    36041, 63657, 52412, 5242, 58846, 2141, 5506, 219012, 134451, 3936, 182230, 17558, 17153, 152237, 22621, 49377,\n    170216, 35257, 68233, 65374, 6510, 11126, 212151, 7184, 2480, 22517, 3437, 33073, 30156, 16557, 3768, 55067,\n    86829, 91000, 12350, 148650, 66017, 79424, 70885, 49066, 28250, 21369, 51213, 34533, 11510, 3258, 18176, 18465,\n    84413, 6315, 36411, 163765, 4346, 356, 107618, 598, 13727, 285026, 162695, 8749, 14583, 7132, 63521, 184253,\n    32378, 25991, 5604, 30961, 53675, 4874, 84693, 5086, 34811, 26978, 56564, 7904, 33519, 51221, 113942, 69253,\n    6664, 125563, 22055, 220680, 102008, 742, 51930, 19494, 176108, 44424, 35123, 13025, 75685, 11759, 74335, 22250,\n    181453, 131147, 16984, 132115, 154311, 11991, 76452, 52609, 85351, 196, 30969, 9198, 74919, 2529, 56838, 71779,\n    29187, 116304, 3504, 62330, 41190, 86153, 28393, 254926, 104228, 105189, 13264, 84359, 3574, 12415, 8534, 57147,\n    10175, 188174, 59504, 60932, 66318, 16407, 107921, 17638, 99103, 49278, 28403, 39786, 145865, 8462, 3558, 43406,\n    142271, 29139, 21989, 36552, 93955, 72365, 7176, 13556, 106185, 37957, 321774, 17782, 129017, 51154, 27938, 24952,\n    1935, 39366, 2791, 33489, 41582, 56078, 24558, 9311, 5449, 218786, 27808, 190429, 68013, 36020, 86003, 29735,\n    3404, 87348, 119357, 115714, 2324, 86796, 81973, 40992, 43376, 93621, 28784, 16808, 36367, 2517, 2909, 191926,\n    24978, 55303, 53308, 205724, 60068, 3098, 21375, 64784, 23949, 26579, 63121, 12319, 80145, 39967, 97861, 6757,\n    70143, 67642, 37082, 34698, 69140, 122883, 46151, 62187, 80934, 429, 19437, 135071, 137885, 222647, 13331, 154065,\n    327, 61778, 74257, 40116, 37493, 14855, 85079, 237641, 42342, 102164, 199965, 71204, 4662, 29368, 5042, 113914,\n    122214, 8955, 13149, 102503, 43173, 5659, 163787, 69003, 307084, 63392, 171080, 21390, 81918, 86666, 36622, 24126,\n    28887, 5736, 28054, 207170, 163428, 79891, 346467, 95363, 38980, 111806, 80828, 9200, 19288, 294896, 114468, 87405,\n    111715, 141705, 7015, 72754, 68463, 48738, 243147, 33397, 101210, 37051, 98801, 82847, 20397, 4940, 185559, 18716,\n    54718, 83491, 11725, 40803, 1128, 12128, 23060, 5174, 7745, 67007, 46701, 1571, 27807, 180186, 256996, 18975,\n    16837, 7877, 212758, 250379, 15440, 87954, 57755, 24719, 124057, 83461, 258, 50864, 8874, 29038, 71289, 31627,\n    15429, 9005, 4061, 113851, 107716, 82819, 13651, 79656, 117851, 17539, 111446, 12938, 39724, 190787, 4352, 15402,\n    21070, 62708, 8539, 23777, 73853, 13552, 38810, 86117, 16285, 56400, 1718, 75342, 142863, 29033, 378, 110113,\n    180321, 32586, 23606, 26393, 160984, 207987, 23783, 8406, 16904, 24596, 47274, 11693, 46539, 60524, 78595, 48423,\n    31718, 20170, 9009, 146268, 15183, 191060, 172765, 1349, 138436, 37365, 10970, 40509, 225817, 20021, 70394, 152138,\n    21541, 66559, 66544, 89352, 2725, 17258, 91345, 7313, 3815, 115868, 8660, 40362, 4071, 103524, 39388, 118275,\n    21950, 6549, 38226, 32754, 209574, 29201, 43495, 18028, 20296, 40597, 18370, 47520, 202450, 24134, 2219, 8195,\n    69545, 38041, 136934, 46374, 19041, 159811, 84865, 58620, 846, 98749, 13569, 30714, 97246, 32186, 4479, 27355,\n    92973, 35214, 151491, 75963, 37631, 1561, 27200, 238083, 23182, 60756, 12291, 25766, 39355, 102333, 87362, 65741,\n    59906, 19538, 201575, 48772, 102938, 24438, 292580, 39964, 66366, 9004, 61379, 50548, 37622, 38732, 28379, 68180,\n    76622, 17488, 69849, 5963, 7219, 48143, 43413, 55358, 540, 58691, 29506, 19245, 52193, 48621, 5518, 13048,\n    118625, 44755, 191081, 42061, 89197, 2259, 60665, 66994, 71210, 51232, 3585, 142096, 55024, 7892, 8345, 58653,\n    463307, 65658, 64319, 137941, 136323, 53499, 12746, 43492, 6978, 95163, 29925, 60175, 5128, 7352, 41463, 184756,\n    121146, 20473, 18426, 4598, 5309, 54580, 14277, 121151, 10691, 56711, 43880, 63409, 76682, 11830, 172218, 264898,\n    32632, 66536, 81062, 31649, 25788, 92774, 60222, 11100, 63159, 9432, 224657, 25240, 53613, 152, 138620, 163829,\n    2397, 85345, 12501, 37507, 64932, 38575, 43522, 65789, 80198, 78796, 35226, 3851, 108891, 73311, 3060, 28391,\n    93671, 39663, 46142, 30982, 66041, 37281, 68157, 26553, 71872, 81142, 211527, 39747, 118119, 22695, 2859, 11066,\n    20232, 168911, 7933, 197005, 17066, 111071, 44434, 133994, 120798, 12766, 227798, 45756, 132852, 29917, 36076, 55352,\n    65281, 129800, 41958, 18944, 84678, 18580, 168093, 132621, 39997, 54092, 27740, 32354, 3770, 114118, 103242, 43918,\n    15899, 18574, 145944, 3190, 123469, 219903, 24169, 100571, 62403, 16776, 92779, 14535, 17168, 16475, 14304, 37231,\n    1712, 28218, 242754, 61688, 28980, 1318, 51359, 222657, 99200, 67989, 31772, 23932, 35351, 201251, 49041, 27306,\n    19128, 40135, 3986, 77333, 19649, 120683, 151927, 21081, 7076, 78375, 77501, 101599, 8011, 89585, 96715, 58179,\n    5378, 102138, 106793, 26051, 217276, 4197, 16297, 27014, 46721, 13322, 22806, 5278, 29629, 70632, 9647, 71519,\n    58818, 40603, 128530, 8903, 36770, 56900, 31483, 26935, 43845, 34265, 34920, 87658, 6114, 84767, 64250, 47318,\n    50720, 19264, 162514, 33357, 13117, 6705, 46696, 75032, 71054, 87004, 42035, 69138, 11903, 99854, 102328, 19611,\n    34525, 69312, 6431, 49842, 101600, 133178, 108751, 41829, 89939, 225664, 48916, 99556, 9195, 130387, 5960, 36857,\n    116724, 53518, 94002, 39077, 53996, 6945, 22261, 64291, 8314, 152785, 57588, 16522, 9091, 5048, 87671, 35441,\n    39509, 1945, 12423, 158923, 178413, 37549, 14095, 1475, 73188, 62878, 4819, 24012, 68534, 42606, 4010, 120809,\n    57497, 59564, 101758, 103718, 32701, 80116, 12345, 95834, 46918, 21468, 53213, 15665, 31200, 3867, 5140, 96013,\n    250744, 21016, 10069, 13968, 35449, 180829, 27683, 39704, 59956, 22893, 3115, 26293, 32785, 75934, 62445, 141162,\n    62720, 2018, 83638, 19949, 114012, 95006, 3330, 99829, 130935, 309272, 9565, 55874, 121727, 37017, 23586, 319858,\n    40970, 27602, 8625, 112329, 61060, 100088, 118525, 25922, 16232, 1907, 60671, 51583, 44553, 80993, 5262, 94679,\n    8676, 940, 20736, 11823, 3020, 16476, 12340, 152600, 97416, 3703, 25744, 66826, 16245, 16876, 46446, 84798,\n    74227, 176020, 45192, 61955, 75496, 23946, 23626, 40372, 26036, 6149, 11822, 30582, 16541, 41914, 82385, 232823,\n    40921, 80773, 14930, 3631, 7517, 39619, 4348, 36180, 126106, 138939, 62611, 1477, 113512, 47321, 25052, 14546,\n    118881, 29060, 23589, 128322, 36795, 18401, 137921, 104699, 267929, 36194, 172791, 18113, 4766, 188215, 30083, 332586,\n    94089, 5805, 77909, 22194, 68234, 154976, 43220, 40660, 70001, 184893, 138095, 11128, 103010, 22663, 5108, 212615,\n    8485, 5565, 49222, 54614, 26530, 42639, 16319, 55062, 152662, 105595, 21114, 22216, 10294, 68158, 10436, 86950,\n    7206, 62115, 3977, 3657, 59874, 456, 118617, 18156, 106663, 112229, 80992, 17442, 8217, 55551, 5133, 34344,\n    251927, 51153, 39364, 201321, 7816, 66803, 23057, 156724, 145664, 14276, 95705, 979, 2796, 6875, 13429, 212525,\n    50602, 26276, 28284, 3424, 19465, 52397, 46963, 31420, 51399, 206476, 92317, 48851, 637, 100820, 83349, 10317,\n    60227, 21972, 6908, 282439, 32857, 224767, 95629, 83882, 42106, 87338, 69757, 29840, 68709, 37665, 45244, 114577,\n    49188, 175943, 54009, 186746, 106158, 70168, 3358, 234002, 50555, 9221, 129338, 9562, 20118, 32923, 78479, 118280,\n    65752, 4977, 10474, 102174, 60947, 129006, 10570, 83451, 8598, 8078, 159367, 123785, 80438, 16742, 5905, 5281,\n    181513, 42402, 6977, 163136, 93179, 42191, 14968, 50421, 112401, 105440, 33456, 57347, 121611, 4221, 94954, 36517,\n    24046, 27796, 6255, 33394, 72990, 135408, 116627, 1233, 57874, 25654, 95419, 68156, 401399, 313338, 55208, 45573,\n    93124, 119251, 47200, 38196, 11909, 130667, 45391, 73904, 64964, 167846, 4137, 115606, 52036, 62214, 7969, 160925,\n    7187, 1132, 134835, 40309, 73195, 64494, 80472, 444841, 61111, 26500, 45323, 40743, 53625, 52797, 22659, 15631,\n    29739, 36706, 28841, 39147, 102836, 26794, 10536, 14845, 87305, 45874, 12241, 127587, 83833, 57183, 79722, 30844,\n    41304, 84655, 20825, 92500, 3722, 25655, 27811, 10157, 81634, 31362, 34088, 92487, 70123, 22190, 185100, 72658,\n    139035, 192523, 88241, 2078, 230490, 44528, 85638, 100198, 22088, 29982, 291233, 241062, 13865, 4445, 137791, 37835,\n    107218, 31726, 19718, 38234, 72528, 23046, 19177, 66695, 5109, 17251, 28077, 5617, 21554, 47839, 72425, 133825,\n    1486, 73065, 181275, 141508, 21768, 62971, 63082, 2512, 34200, 9904, 120309, 6392, 91243, 68416, 268253, 41199,\n    116757, 138551, 185526, 41246, 28986, 4093, 19057, 17295, 4148, 245766, 122360, 35356, 112075, 20301, 75441, 10998,\n    7977, 19769, 62922, 937, 63547, 100196, 26427, 157820, 20983, 236696, 22935, 8140, 90315, 156004, 47204, 140973,\n    7726, 45097, 52725, 22636, 23436, 257282, 105247, 522, 88389, 216031, 202204, 46812, 211666, 19693, 68828, 81691,\n    45925, 11256, 30292, 372, 5236, 167826, 88328, 232776, 151611, 5360, 82104, 18841, 80393, 25465, 18285, 20320,\n    72377, 31730, 33160, 45803, 38715, 27705, 37379, 24163, 18360, 103586, 4015, 32305, 269494, 91252, 20080, 36567,\n    54650, 7797, 57073, 12650, 31164, 42209, 6375, 261663, 105528, 81661, 106002, 2800, 5375, 17247, 43151, 4442,\n    15727, 194619, 100855, 144898, 62320, 78465, 39929, 16454, 1967, 28311, 61363, 17219, 9395, 8745, 121445, 76939,\n    80385, 162380, 22009, 54191, 44248, 16299, 122830, 48151, 74429, 78291, 64755, 14238, 44966, 2511, 17712, 67954,\n    93583, 829, 105899, 49935, 84750, 11591, 33185, 85447, 42717, 27409, 208542, 28965, 62052, 52525, 5597, 25694,\n    65594, 16343, 63224, 276188, 12475, 9331, 127507, 38522, 57287, 24128, 133161, 79723, 105548, 133695, 48917, 27558,\n    43278, 46520, 13778, 141954, 110785, 83366, 17715, 46317, 105763, 66298, 147013, 41086, 94180, 16478, 220447, 44611,\n    730, 19722, 78975, 117889, 125643, 26254, 16574, 18480, 65006, 15806, 38549, 246418, 46052, 36056, 8440, 34984,\n    30170, 3163, 59800, 4458, 115442, 4283, 41970, 33507, 104078, 1653, 22, 121158, 276486, 3655, 6338, 24048,\n    133421, 23641, 2161, 24422, 36006, 8086, 10675, 181474, 12307, 29514, 59143, 14729, 52509, 87128, 122470, 19446,\n    80852, 33314, 24573, 119864, 14237, 9652, 57779, 6612, 51851, 15284, 98871, 90581, 124466, 156831, 21190, 22015,\n    71380, 161906, 87247, 69201, 18392, 17908, 108470, 72962, 40719, 14338, 17911, 95260, 43339, 20610, 78916, 20710,\n    72451, 11315, 31448, 17263, 58853, 178878, 48111, 116002, 45497, 80506, 82605, 85880, 36300, 121755, 25215, 36118,\n    301929, 88728, 405223, 276136, 553, 34704, 212438, 49970, 78329, 922, 20711, 25036, 257130, 38295, 145369, 18128,\n    15385, 30829, 55656, 48345, 8012, 3561, 28004, 122041, 192900, 58338, 112508, 41085, 29976, 87040, 47117, 23905,\n    4336, 92061, 138880, 97407, 42083, 172121, 6256, 25192, 172671, 5, 93568, 1420, 12677, 31605, 56743, 40620,\n    6015, 78415, 231077, 31298, 80026, 13902, 19048, 24924, 170586, 32955, 176119, 87859, 36731, 6773, 27711, 24658,\n    26475, 115216, 133207, 93250, 95820, 88522, 8317, 5714, 124047, 55219, 86860, 19677, 23961, 22928, 162209, 8904,\n    225992, 359835, 56084, 96201, 29392, 96558, 86071, 93643, 55114, 13347, 8183, 95129, 82012, 2017, 123336, 34219,\n    115554, 157159, 47747, 101684, 41008, 18735, 193781, 104151, 226906, 7552, 179874, 124113, 31159, 21162, 44010, 14771,\n    51268, 166128, 31382, 73124, 77438, 92830, 205709, 12113, 1292, 38937, 13114, 1334, 2118, 15597, 69581, 14449,\n    21934, 76618, 48728, 67038, 14967, 51495, 24243, 87736, 147249, 26720, 11119, 46063, 43749, 5843, 44147, 152629,\n    133428, 65703, 14269, 45604, 57982, 28672, 55616, 45957, 8438, 95433, 37698, 220862, 132034, 39456, 61870, 4161,\n    26501, 73560, 56418, 9845, 4654, 20916, 10456, 88920, 119358, 9015, 65931, 96507, 48029, 38534, 21676, 109081,\n    43078, 34943, 25089, 6131, 28766, 23665, 5477, 10255, 16695, 67, 45778, 42443, 42770, 29534, 23733, 100513,\n    62617, 42630, 48746, 14191, 43753, 50295, 26007, 8792, 57243, 43119, 54725, 164253, 58250, 112304, 131796, 25165,\n    4651, 3188, 24831, 47748, 3705, 19540, 13211, 102095, 5593, 18699, 23666, 32005, 117571, 33541, 60584, 74573,\n    86311, 99443, 25172, 27222, 168938, 7143, 11853, 53560, 18834, 19960, 86522, 28217, 53266, 117700, 72989, 34323,\n    18721, 66450, 34346, 74056, 47217, 202002, 46269, 9429, 68582, 75458, 37823, 82843, 96652, 32549, 145144, 27958,\n    19820, 158086, 31955, 201406, 135379, 31207, 192545, 12950, 51704, 9094, 248263, 76147, 64028, 110009, 79407, 89345,\n    99284, 223492, 47966, 26848, 15359, 201137, 2861, 110507, 71231, 72297, 31851, 118777, 71039, 151051, 240855, 16333,\n    50766, 14727, 7939, 4149, 80908, 418780, 88378, 59276, 1327, 7284, 38576, 79814, 65820, 42199, 84860, 49574,\n    62596, 12396, 70598, 40117, 8648, 7994, 16836, 7630, 14047, 359699, 106878, 525, 29037, 28064, 13380, 11675,\n    50669, 74216, 103539, 180314, 27449, 56299, 172344, 19274, 7301, 246099, 32043, 19422, 36506, 129317, 6806, 30140,\n    4614, 46639, 66926, 932, 86600, 6322, 27847, 233103, 10541, 39025, 34887, 3517, 12972, 26220, 2031, 66561,\n    115015, 48658, 47596, 12714, 33845, 3893, 16165, 35237, 89983, 14769, 11962, 147224, 47018, 29977, 27979, 5552,\n    82338, 86023, 131368, 1218, 24853, 237840, 132193, 15455, 40873, 3668, 65351, 53388, 15229, 59889, 272245, 47934,\n    11858, 34347, 18038, 90853, 86981, 300602, 19343, 114181, 29362, 84921, 6095, 106059, 79472, 38015, 1206, 48741,\n    6208, 80000, 21916, 17423, 6002, 108083, 24479, 34931, 56661, 9511, 26995, 100694, 163853, 35997, 81254, 58321,\n    18919, 171890, 86877, 91341, 74503, 70477, 53412, 7027, 59281, 39892, 131302, 5864, 15947, 61301, 67466, 162369,\n    47956, 27874, 35624, 282324, 21270, 111847, 102548, 41482, 30955, 116737, 28264, 8592, 55458, 22301, 75090, 29821,\n    30697, 51709, 3041, 19208, 8038, 24634, 30467, 87509, 126428, 19389, 18814, 152686, 20701, 83474, 45832, 80891,\n    105808, 11378, 153223, 120770, 98186, 150633, 49838, 9141, 12755, 30962, 5260, 74490, 21256, 31678, 65062, 33326,\n    289838, 187831, 20595, 89768, 2805, 58535, 10844, 70085, 12090, 2451, 138068, 98544, 24461, 4511, 6754, 41684,\n    28203, 3383, 65355, 82833, 30161, 83924, 234361, 128424, 28921, 222594, 33975, 125491, 34069, 11508, 67464, 144226,\n    41850, 98703, 34371, 7901, 21254, 38398, 65651, 23549, 53883, 213340, 123269, 12028, 71764, 177701, 28758, 2623,\n    68395, 11549, 15232, 68603, 9660, 63116, 36079, 57093, 31198, 20475, 48467, 89984, 35619, 186847, 107469, 31389,\n    43631, 73867, 41949, 68841, 114250, 1605, 30564, 63403, 17588, 27680, 99533, 12641, 70325, 50428, 73426, 78379,\n    11855, 91651, 72081, 91720, 60198, 15743, 12065, 83398, 140046, 6761, 46598, 45900, 5068, 886, 62448, 148968,\n    37347, 19405, 9680, 15819, 43496, 63370, 75667, 163700, 37639, 3633, 22774, 34341, 183131, 134335, 37200, 23915,\n    7054, 14194, 12970, 26438, 13350, 285521, 25594, 8219, 104410, 91039, 168804, 138480, 149734, 15907, 33818, 61132,\n    60082, 4622, 110187, 56736, 13551, 73571, 3945, 73463, 65498, 17758, 263266, 17593, 2710, 27585, 54469, 38200,\n    45367, 63754, 28881, 3473, 12791, 98287, 31895, 65787, 4463, 94536, 24951, 36332, 59901, 28803, 52130, 86403,\n    7668, 181822, 74831, 18977, 9850, 177206, 145485, 109798, 7292, 31421, 26280, 77211, 58511, 12507, 127004, 11113,\n    147, 8729, 56208, 43066, 79926, 129937, 31345, 83947, 39915, 46146, 98763, 42566, 1337, 13192, 18323, 105163,\n    80570, 117753, 16555, 72883, 11077, 159438, 40764, 70933, 83329, 26066, 12276, 72059, 21655, 173836, 126713, 69454,\n    153482, 91585, 70644, 102558, 110483, 6764, 127864, 190133, 3961, 101798, 20945, 71138, 82402, 90884, 69669, 44753,\n    923, 16939, 59700, 164258, 25969, 27082, 31399, 43846, 6306, 246093, 51342, 6153, 151581, 202801, 182731, 56475,\n    162188, 89426, 141356, 14355, 121815, 27536, 28023, 65257, 77523, 106668, 127314, 24947, 12790, 38796, 169698, 23555,\n    10725, 44573, 183083, 42088, 62716, 43265, 105958, 32050, 44067, 50118, 1668, 3874, 6243, 318411, 16599, 1691,\n    94999, 52378, 28671, 216728, 123258, 2059, 34969, 69225, 5913, 136280, 171443, 141515, 91662, 22175, 135282, 80020,\n    92270, 1663, 4808, 4482, 3495, 34691, 5226, 109830, 108512, 17342, 107488, 11606, 123190, 100247, 29666, 146527,\n    113014, 15794, 30894, 13224, 39585, 243192, 22351, 9903, 7836, 47699, 11078, 25468, 122291, 48821, 26780, 122679,\n    75521, 81450, 630, 4895, 92900, 55074, 74293, 17441, 3563, 111657, 103102, 51613, 12318, 52370, 36191, 68245,\n    34269, 40445, 41354, 122901, 168604, 182500, 62012, 42557, 11259, 24428, 115113, 86345, 12362, 3909, 78430, 86852,\n    134602, 20459, 47853, 93879, 22577, 7659, 3688, 38555, 13349, 17381, 56715, 91639, 12493, 10895, 92438, 3142,\n    37057, 28928, 2004, 36427, 32268, 34222, 209974, 10432, 67436, 41989, 173518, 107930, 27079, 62729, 30908, 55558,\n    5828, 45031, 14902, 53546, 8204, 144263, 60255, 14520, 88212, 86582, 109589, 69356, 8064, 47449, 8505, 66558,\n    16886, 4844, 52817, 111260, 215129, 12941, 91118, 650, 20770, 6273, 73089, 40618, 62790, 2873, 35002, 14023,\n    97208, 19386, 102646, 36993, 143736, 135457, 35385, 113601, 17893, 32627, 84439, 100619, 56016, 6581, 57264, 172160,\n    45452, 111710, 203627, 70131, 24100, 322787, 1996, 35665, 70078, 22358, 90922, 83658, 4097, 63200, 58499, 14542,\n    99153, 52159, 6615, 12414, 63415, 31986, 16823, 1579, 65405, 137809, 8841, 16898, 48082, 259, 33014, 42375,\n    12260, 179850, 73667, 91389, 98882, 29532, 17311, 326251, 41092, 5928, 20742, 44964, 48019, 43505, 9317, 49265,\n    6643, 192712, 48424, 163487, 19861, 20113, 70848, 31928, 105333, 23685, 78563, 14638, 54755, 7158, 24142, 44018,\n    20774, 125255, 20331, 24280, 10163, 1285, 2336, 39851, 4299, 117269, 46714, 63816, 87779, 159624, 11731, 9971,\n    990, 137317, 108831, 50994, 74554, 162680, 23640, 131597, 146962, 170620, 34829, 91205, 21184, 1913, 63616, 18427,\n    93136, 156592, 17519, 67565, 115882, 138220, 78622, 88535, 18115, 2711, 33554, 109492, 54298, 971, 24914, 25863,\n    36363, 45715, 27099, 194995, 14299, 178181, 111488, 72395, 322385, 157719, 130787, 11897, 81843, 83999, 11369, 49280,\n    118604, 40922, 61332, 110343, 53407, 75639, 40582, 300440, 54722, 25637, 13694, 48248, 48278, 194521, 56203, 52779,\n    48783, 72627, 10953, 376, 16733, 280238, 26351, 230789, 15132, 25168, 137270, 3588, 63704, 73376, 94031, 74284,\n    19443, 159557, 9697, 39901, 13351, 119050, 15406, 146455, 3460, 29556, 75195, 37673, 102524, 92329, 47289, 98413,\n    15311, 100684, 56345, 7116, 95480, 11590, 7200, 167, 23610, 58426, 17730, 136656, 27944, 53151, 2701, 8824,\n    103124, 3017, 90744, 113588, 53216, 79736, 65940, 26931, 498, 29568, 80540, 143543, 21292, 1740, 59268, 16561,\n    180816, 42323, 50174, 40890, 52866, 10703, 57169, 4700, 17191, 4424, 93511, 49698, 166650, 26972, 48631, 165169,\n    82879, 69326, 202970, 4007, 2376, 231325, 139592, 22119, 62851, 37504, 68816, 58345, 67398, 186643, 43331, 277416,\n    53749, 15746, 23102, 17432, 4793, 151138, 48822, 54265, 48203, 198688, 14305, 54287, 2291, 18018, 113378, 123260,\n    7180, 97549, 87027, 120085, 2920, 76080, 8190, 102005, 5641, 64580, 14955, 59802, 54028, 58884, 19367, 81779,\n    412567, 85957, 97053, 103637, 78871, 29364, 27637, 141728, 4767, 30686, 112738, 130146, 42745, 12730, 105040, 14844,\n    232, 210944, 36581, 152317, 135543, 29744, 3129, 55647, 58149, 46319, 27265, 17499, 28005, 59948, 7170, 34138,\n    5702, 293047, 110892, 408, 91760, 218674, 18469, 46095, 81403, 14389, 4610, 35672, 73060, 11006, 74848, 104820,\n    118143, 190357, 20043, 105358, 141735, 5115, 27093, 45924, 123073, 52599, 29433, 9616, 238350, 78610, 24851, 58858,\n    26769, 31969, 24613, 18294, 4982, 32735, 39639, 143563, 112073, 202205, 12567, 4873, 88601, 44897, 81503, 101648,\n    81362, 34662, 85277, 17574, 48173, 21435, 221188, 40215, 39576, 80786, 26544, 64668, 81841, 10731, 37733, 247986,\n    149188, 127703, 495, 18382, 54388, 72446, 43071, 30974, 198723, 89608, 41360, 190, 33045, 8386, 31658, 19992,\n    237838, 119015, 137622, 50890, 100913, 6460, 116233, 267230, 26621, 104129, 65114, 14190, 41542, 14888, 85962, 23342,\n    23041, 26453, 43725, 71809, 45186, 4770, 46452, 53894, 56616, 221286, 18973, 9038, 109299, 55365, 19366, 26863,\n    18808, 60909, 69353, 41738, 83463, 12100, 68561, 72860, 3980, 13796, 49340, 12332, 31311, 27418, 4255, 53430,\n    18976, 45523, 510, 14224, 30477, 26581, 4530, 3651, 101663, 139840, 22709, 150861, 31996, 63923, 120623, 262522,\n    3076, 10528, 2929, 14672, 130238, 18087, 9816, 121894, 100308, 25085, 55111, 14565, 18952, 53293, 2042, 369988,\n    23674, 61789, 133529, 28783, 108293, 35477, 47119, 36448, 71049, 40015, 33055, 78598, 198442, 1833, 159937, 40654,\n    77444, 189245, 113153, 8621, 18599, 38553, 35223, 166072, 2375, 11659, 21786, 89523, 6032, 12116, 63046, 159398,\n    18454, 3678, 32521, 47626, 11411, 103527, 38896, 42946, 15696, 26370, 10185, 8413, 37080, 165583, 4331, 63555,\n    14907, 72220, 50056, 6623, 62236, 36565, 49783, 10049, 17503, 100581, 55951, 146244, 24724, 9626, 17969, 25524,\n    109300, 173965, 99994, 101056, 46459, 43647, 53737, 277968, 8347, 123521, 74858, 33829, 44762, 77574, 877, 81377,\n    222525, 123532, 30602, 43881, 53145, 2973, 16284, 81940, 61281, 127044, 63620, 9875, 14756, 114829, 19032, 9202,\n    52759, 119141, 23928, 120551, 19607, 3599, 33401, 76821, 73233, 117430, 39968, 36539, 7071, 5446, 121735, 194059,\n    15206, 45283, 6706, 15603, 65615, 1207, 165723, 92275, 34773, 104447, 8396, 32353, 205240, 164323, 13600, 60555,\n    79205, 25532, 22907, 33410, 57480, 107111, 69630, 32137, 47832, 70913, 33161, 20321, 2371, 117348, 10714, 86246,\n    1625, 11763, 17900, 268, 78457, 99175, 97940, 101092, 86660, 32221, 14041, 128504, 125080, 53744, 124263, 31017,\n    13897, 403, 31859, 21964, 5633, 111630, 5547, 77329, 17961, 18241, 84995, 25984, 12983, 67491, 62168, 47262,\n    5241, 297, 51191, 7351, 8967, 147212, 82060, 16821, 782, 11033, 82431, 62957, 5026, 43459, 77963, 203477,\n    53528, 6247, 191852, 87774, 74164, 215654, 13467, 1522, 219964, 28589, 244104, 16242, 117821, 67725, 72570, 156792,\n    17186, 15979, 26990, 44128, 193014, 35276, 57125, 16212, 166451, 68017, 6905, 77608, 16364, 53777, 75921, 76426,\n    37975, 26203, 269296, 64099, 84122, 12077, 38533, 830, 4407, 20139, 963, 43028, 38902, 42911, 37503, 83343,\n    85045, 16979, 1165, 60835, 137387, 58380, 86990, 110066, 134540, 56331, 193845, 81238, 17922, 163093, 38744, 110641,\n    12502, 56404, 34862, 26865, 125964, 12965, 111648, 25547, 7771, 27196, 136980, 9555, 29551, 107158, 57885, 18831,\n    37705, 35505, 101742, 13970, 102109, 62548, 124657, 23328, 11124, 89592, 146376, 248050, 6241, 22033, 18337, 80685,\n    29898, 11908, 216623, 67721, 106162, 146610, 21377, 15085, 91552, 42041, 62560, 122532, 125336, 102365, 121537, 142559,\n    29693, 223919, 11515, 110495, 18776, 22494, 5895, 185059, 103592, 229351, 51220, 100102, 37027, 257855, 29359, 54123,\n    36066, 106493, 12244, 79258, 32002, 432, 56205, 94836, 90182, 6726, 14762, 29391, 48938, 26864, 38083, 60364,\n    3310, 60192, 14766, 205567, 57504, 110760, 22649, 24666, 46333, 21517, 3430, 13135, 28873, 27052, 158809, 11597,\n    20529, 6695, 23138, 22960, 37137, 45574, 6545, 305877, 43423, 26153, 24769, 59844, 14501, 10430, 134352, 56169,\n    13213, 103432, 49523, 35181, 13435, 12408, 129475, 64620, 230854, 77390, 51990, 15653, 83248, 33466, 44571, 117828,\n    51481, 2187, 10559, 68019, 18021, 54895, 48247, 18354, 33737, 4554, 108595, 37288, 39767, 116707, 9175, 3726,\n    108877, 21616, 83684, 49862, 1938, 8543, 276466, 20134, 108498, 48770, 102254, 31914, 131520, 185291, 100559, 51890,\n    209, 19526, 76471, 50544, 71814, 99351, 8172, 198526, 28816, 20419, 9109, 98389, 136777, 76479, 75596, 30635,\n    165417, 48216, 120220, 25955, 211071, 39314, 24308, 32164, 2559, 146280, 43403, 9233, 17947, 90585, 1786, 86920,\n    125662, 2457, 64741, 32152, 32918, 122882, 78538, 44001, 31723, 56426, 23375, 103172, 88177, 145697, 52506, 49319,\n    68016, 31664, 41488, 18486, 110400, 7030, 28241, 986, 109199, 19900, 42147, 56864, 65287, 49183, 7858, 24000,\n    30453, 840, 16673, 25907, 68916, 89927, 6309, 158335, 36407, 199737, 130464, 13137, 59603, 201778, 195292, 21015,\n    42466, 179062, 172561, 89492, 11075, 180407, 31868, 72493, 20998, 60217, 9865, 19530, 39274, 130266, 54539, 21623,\n    12535, 13505, 40641, 73375, 4087, 85633, 2153, 3117, 70680, 55788, 92096, 47509, 98493, 37490, 271936, 151475,\n    3032, 16171, 96642, 34106, 78425, 125761, 19591, 3366, 19316, 54508, 24183, 50786, 194248, 91528, 33253, 34622,\n    108355, 41741, 705, 3814, 3883, 108929, 13203, 67831, 10142, 59754, 68208, 29128, 84820, 56880, 38794, 24972,\n    48571, 40821, 40476, 18137, 164254, 24064, 236309, 79181, 11282, 395, 39169, 2013, 51587, 28551, 9645, 701,\n    109513, 115899, 113566, 12762, 62045, 58322, 103726, 41343, 40866, 244102, 143816, 2490, 70346, 40973, 52618, 15412,\n    30720, 104315, 38917, 42027, 93676, 17513, 107418, 20706, 123890, 13399, 97727, 24044, 87962, 65606, 44250, 98044,\n    65276, 74790, 101473, 19350, 91570, 1326, 87790, 172042, 7577, 100813, 86896, 85891, 41512, 108130, 27794, 14875,\n    71431, 12835, 156250, 58135, 3759, 22476, 42176, 115873, 34686, 56523, 73643, 108505, 51491, 20838, 12721, 32863,\n    45700, 29496, 13700, 34294, 55360, 29206, 155942, 123812, 7706, 163234, 203, 132720, 49358, 144431, 8130, 175788,\n    35818, 3270, 76832, 25710, 54095, 97274, 28779, 94621, 74396, 19092, 128242, 58067, 20885, 14670, 93255, 15107,\n    63291, 23654, 126900, 129421, 59294, 262659, 9798, 3251, 67344, 28600, 44629, 50672, 29072, 26999, 31526, 23183,\n    49175, 165843, 175455, 17282, 175411, 32022, 45989, 30298, 90690, 78118, 83156, 23749, 35636, 31317, 7069, 80381,\n    94561, 133756, 14960, 97404, 6138, 41065, 78041, 32843, 16601, 34123, 9559, 146529, 123377, 96395, 54441, 42012,\n    84257, 123541, 10745, 22139, 106459, 11720, 150883, 172651, 154996, 110538, 4728, 53447, 25704, 2009, 71152, 119354,\n    21166, 66604, 1429, 216162, 8637, 122250, 63520, 27180, 29172, 36124, 276428, 107787, 77184, 4680, 14952, 104903,\n    24418, 14793, 51561, 52931, 8371, 26342, 48526, 7118, 92066, 67280, 40653, 8847, 34597, 105438, 14198, 50163,\n    61188, 146286, 50315, 41205, 170829, 161496, 585, 197359, 95056, 1687, 365794, 91349, 48507, 5804, 49263, 5146,\n    104902, 96365, 117343, 132222, 46084, 96919, 16875, 8073, 262381, 79982, 52663, 13928, 16056, 153908, 15145, 109256,\n    132308, 18763, 24904, 167644, 13618, 40750, 18686, 147124, 114709, 150038, 52849, 2938, 12568, 48617, 8778, 5459,\n    44202, 44591, 74914, 17183, 248689, 13878, 7822, 80060, 23116, 194037, 18487, 2067, 7798, 43077, 33678, 244028,\n    31320, 74273, 2794, 19466, 8218, 36280, 183997, 48124, 19416, 29656, 19280, 98734, 7715, 18311, 30701, 133602,\n    150307, 126956, 7378, 2933, 79903, 13178, 12593, 86571, 26604, 92446, 13574, 44205, 65699, 427599, 21118, 8245,\n    14407, 27877, 47936, 33542, 7916, 26460, 117762, 21596, 37818, 2249, 127359, 209394, 60044, 47677, 308089, 36791,\n    154971, 31417, 6998, 150042, 174360, 12255, 43009, 29335, 48739, 3912, 101398, 53340, 2580, 146939, 151295, 45360,\n    125275, 15273, 45383, 27456, 48761, 23314, 8750, 60801, 85823, 104759, 27894, 123685, 66968, 39480, 26917, 55290,\n    83305, 2696, 98390, 57569, 145853, 340733, 4919, 20024, 52268, 30884, 7413, 203685, 70989, 112855, 4129, 50536,\n    349518, 68205, 332641, 159581, 135361, 236026, 37563, 176404, 64899, 6578, 122033, 63871, 1850, 85234, 82089, 66124,\n    74145, 121098, 107351, 12687, 36881, 117334, 13136, 14698, 85933, 93866, 18047, 32620, 310, 15094, 46000, 88451,\n    23632, 36645, 27940, 87618, 80520, 58892, 20976, 27702, 140090, 96075, 67841, 103292, 238964, 87778, 107338, 17019,\n    83427, 67522, 7302, 8261, 47570, 116787, 8730, 80484, 61772, 174422, 56005, 131193, 52875, 14588, 28471, 59817,\n    9586, 15720, 158155, 51307, 109734, 15196, 11025, 59331, 3884, 52626, 102602, 84797, 25158, 27314, 4437, 20488,\n    76214, 189248, 35023, 114952, 157376, 2827, 62439, 102878, 129749, 36405, 10329, 109339, 108633, 36662, 1254, 13267,\n    5470, 87105, 58004, 15397, 10434, 159667, 21864, 52022, 179464, 3013, 32147, 31496, 116832, 18494, 105502, 129227,\n    107267, 50033, 13481, 9954, 24267, 22141, 16257, 116154, 36185, 950, 115685, 11305, 176708, 2048, 178671, 112573,\n    287867, 162328, 497663, 95170, 50979, 193861, 50987, 30368, 136257, 31830, 46549, 15119, 169876, 23788, 17462, 249887,\n    57377, 1949, 35448, 14791, 43769, 210091, 3783, 34612, 282103, 88380, 245190, 5457, 20491, 98908, 11402, 86899,\n    117916, 16028, 162584, 60644, 320177, 156096, 31065, 55876, 22000, 77655, 9992, 23397, 13757, 317623, 63978, 215255,\n    2443, 17648, 93231, 27388, 104529, 93807, 55505, 140477, 12046, 112040, 70887, 40152, 94365, 112353, 25063, 114679,\n    266061, 71248, 119555, 15589, 2244, 617, 14129, 211431, 70110, 100652, 7777, 4383, 85911, 89221, 21010, 120615,\n    58357, 86405, 37554, 41647, 18, 15143, 69662, 60491, 14714, 186134, 148344, 42347, 5410, 168175, 44535, 42449,\n    343894, 129417, 99682, 20659, 27272, 140483, 63455, 222159, 17536, 13722, 42637, 62324, 11976, 114691, 148109, 2283,\n    32057, 182393, 4295, 147364, 33705, 2075, 44303, 30274, 28331, 63740, 69740, 29148, 10346, 44862, 33716, 73937,\n    153333, 12930, 38784, 247159, 2515, 41053, 20256, 83368, 256189, 54639, 115240, 5096, 24661, 175419, 153552, 26516,\n    141, 138176, 63885, 34115, 47222, 55709, 2765, 28479, 38875, 236608, 12229, 22921, 77291, 54426, 45388, 2860,\n    57787, 114579, 295139, 105782, 17826, 71066, 19119, 54364, 69385, 16568, 12323, 28057, 33346, 34919, 124763, 155533,\n    101386, 31644, 8627, 49001, 303600, 29868, 63213, 9103, 77280, 71333, 9696, 138789, 37059, 24823, 5057, 21352,\n    32368, 114208, 56803, 19424, 10445, 58514, 8661, 209508, 26187, 171838, 10460, 63454, 14016, 122504, 41328, 21329,\n    46618, 32493, 38225, 7855, 31763, 7945, 29876, 8734, 6438, 24205, 97490, 139977, 130740, 47323, 33195, 85390,\n    57194, 13813, 60600, 21313, 96251, 7699, 27584, 170521, 139271, 1363, 4402, 336738, 129223, 84983, 69150, 13147,\n    3590, 163929, 207225, 155260, 55916, 20288, 4503, 8398, 98490, 11773, 27512, 37113, 84976, 86558, 28365, 11756,\n    116005, 182148, 13733, 115313, 47644, 67208, 85069, 9347, 14995, 226141, 14704, 101835, 41159, 35314, 13113, 63526,\n    214039, 29978, 50446, 83339, 17440, 129441, 72522, 118641, 97816, 24907, 73844, 15717, 118884, 167255, 96509, 162793,\n    30847, 36849, 51297, 78974, 77793, 10427, 1873, 2972, 9999, 35074, 28190, 64297, 146836, 46298, 60038, 163007,\n    108919, 61219, 2403, 75022, 127339, 4233, 110389, 69022, 9833, 128097, 88016, 79390, 222936, 22570, 94657, 28462,\n    56956, 38803, 81536, 30474, 152794, 19566, 16481, 147408, 74574, 81895, 20731, 1918, 1366, 76367, 187321, 54494,\n    24366, 21690, 61696, 33283, 107477, 77499, 31112, 414383, 74362, 18463, 218441, 120929, 59848, 258629, 201924, 69269,\n    454, 19989, 13054, 59894, 3623, 58908, 20681, 35723, 78523, 102680, 38988, 184112, 108087, 50944, 132704, 52966,\n    21699, 18860, 96349, 201411, 82697, 85395, 95658, 5093, 6427, 177894, 44191, 32755, 26961, 155739, 6249, 31310,\n    81030, 26574, 84311, 120155, 86730, 113535, 7424, 48888, 13516, 45747, 98098, 20077, 183995, 81945, 43210, 26704,\n    40420, 75831, 45648, 11180, 6855, 57927, 65528, 124096, 34851, 2598, 156633, 107572, 127352, 38169, 123845, 60142,\n    62722, 105584, 232364, 23211, 68120, 1601, 22169, 89299, 747, 258039, 80572, 7258, 152249, 11862, 101204, 8834,\n    121434, 33761, 19175, 133142, 46343, 40178, 48723, 3589, 41977, 30210, 38868, 62257, 10087, 82658, 87827, 90646,\n    16415, 47552, 351723, 28298, 72225, 91146, 272760, 1701, 11295, 1652, 109651, 300747, 51863, 198800, 29446, 11794,\n    32345, 37538, 22356, 33102, 37590, 113544, 37970, 11478, 179743, 25454, 103417, 59905, 221970, 105196, 145604, 7817,\n    164809, 102360, 16974, 75840, 255333, 56902, 6659, 1954, 645, 59400, 67769, 7689, 18675, 5215, 13793, 20536,\n    27852, 3387, 29523, 259718, 16860, 94625, 43143, 29245, 15848, 233581, 22685, 63631, 78557, 22836, 133302, 84513,\n    1348, 51826, 47129, 98836, 58284, 1830, 1749, 94642, 10933, 6145, 12506, 10975, 13879, 103781, 144434, 10268,\n    28409, 32346, 52968, 121567, 107374, 77268, 23686, 35097, 10501, 155275, 15303, 47136, 21102, 168741, 55332, 90385,\n    15996, 84817, 681, 137803, 25054, 142275, 6163, 38175, 8056, 124296, 240642, 65621, 4934, 178205, 16101, 62803,\n    60964, 18230, 100622, 76465, 44689, 14545, 9543, 47514, 16852, 93380, 28048, 12047, 107106, 37575, 101485, 77047,\n    57326, 34819, 96137, 76916, 6469, 46264, 115983, 75768, 87668, 69942, 13027, 165, 8373, 114231, 26434, 52844,\n    42799, 182044, 23580, 146254, 38081, 43236, 33883, 146220, 382894, 14606, 46035, 36481, 166621, 35417, 95382, 2957,\n    59384, 60428, 36358, 66343, 75378, 22267, 22950, 83528, 17577, 56474, 25285, 4619, 179691, 75355, 95836, 53295,\n    34588, 171410, 4487, 14679, 84208, 44015, 18562, 109133, 54101, 11531, 86052, 174479, 303157, 28095, 9953, 35642,\n    14564, 39802, 16145, 77606, 117406, 53038, 121117, 53624, 22062, 1212, 7632, 127157, 237292, 189087, 10478, 127345,\n    102515, 181997, 86752, 87623, 10966, 121602, 68783, 68681, 83042, 114380, 138349, 191305, 67176, 50085, 39016, 1427,\n    42384, 1412, 67118, 122616, 72389, 25260, 2237, 13576, 137346, 19938, 20304, 2191, 68759, 5373, 61364, 238507,\n    75814, 23931, 69565, 38993, 131741, 38364, 12528, 87762, 5679, 129853, 5310, 186831, 32653, 90338, 260176, 389531,\n    108118, 26843, 43985, 50175, 30563, 25106, 56965, 18130, 140428, 4542, 165503, 117991, 24219, 229605, 1819, 129663,\n    1240, 3797, 76093, 18398, 71339, 51919, 93043, 27175, 47060, 216257, 6483, 35051, 1217, 16512, 80798, 129064,\n    13225, 69339, 8548, 237079, 72298, 2575, 34280, 51379, 117910, 55671, 53345, 247552, 29486, 39328, 140821, 34681,\n    57045, 60177, 5004, 90269, 78522, 2479, 322607, 48474, 61296, 13057, 31558, 4678, 59271, 6699, 27044, 31988,\n    35944, 12503, 83480, 4389, 136508, 3781, 114121, 70279, 4488, 155829, 42214, 2898, 68191, 75695, 305850, 45041,\n    74344, 106509, 30087, 17429, 93292, 12477, 290, 23080, 114802, 35714, 18751, 26554, 105424, 17775, 2144, 2412,\n    100610, 65192, 113975, 52975, 180272, 135050, 129815, 76238, 106483, 21440, 63186, 4260, 46189, 9711, 28249, 4169,\n    23429, 23390, 8324, 141585, 63809, 67668, 38457, 38063, 39226, 59972, 1189, 203916, 62368, 14403, 16949, 61767,\n    85801, 1739, 40147, 35049, 76757, 33124, 62102, 15780, 103593, 103009, 53484, 22952, 67973, 114645, 6566, 5245,\n    50462, 7601, 8288, 3513, 194571, 80276, 1908, 54592, 5124, 58571, 2513, 6800, 273997, 193904, 1119, 17991,\n    117245, 2508, 129156, 82366, 26278, 71465, 63341, 56943, 39662, 106116, 94966, 156875, 9736, 2204, 122308, 94418,\n    27134, 1280, 24539, 49022, 45314, 3764, 50904, 46424, 30699, 28087, 293839, 9400, 33646, 40165, 822, 147499,\n    50263, 116179, 29085, 11863, 31314, 5578, 17797, 5104, 12454, 1604, 15342, 219206, 10232, 67800, 94261, 25872,\n    13565, 90339, 78971, 75377, 26649, 41184, 47695, 11514, 35369, 20767, 14227, 41953, 309396, 148270, 147938, 33074,\n    14453, 27499, 109019, 39018, 25738, 240196, 158931, 52820, 8612, 95853, 21524, 137010, 84901, 70869, 70021, 116794,\n    48404, 38771, 6732, 1070, 70990, 187297, 49140, 5238, 576, 3564, 253975, 16027, 16483, 2811, 37775, 19034,\n    25259, 4053, 2000, 70083, 95774, 19713, 33431, 92703, 91314, 42381, 288770, 48194, 95985, 3991, 77418, 13406,\n    241328, 245086, 56533, 35275, 62725, 9246, 51924, 70181, 95331, 16163, 31410, 79016, 39312, 120878, 119371, 275987,\n    80124, 27712, 9186, 220, 23598, 146167, 85209, 68238, 282190, 57048, 31273, 30555, 80913, 17594, 75779, 59160,\n    135002, 101219, 189377, 29225, 96735, 60126, 62522, 104000, 27620, 86814, 17240, 147533, 11001, 5425, 43682, 410,\n    49460, 87270, 69480, 46315, 59448, 1816, 76201, 9431, 11788, 87960, 29063, 65539, 47347, 11678, 33846, 7008,\n    196704, 9895, 6753, 8633, 120892, 59970, 572824, 115934, 6646, 202559, 892, 48351, 37611, 251282, 57823, 67263,\n    57750, 26527, 34485, 90747, 7685, 88370, 6144, 64182, 1709, 41969, 21458, 62327, 181657, 49247, 225330, 122600,\n    114574, 107124, 85361, 111833, 63243, 71420, 15655, 191178, 72430, 18063, 51425, 54002, 12364, 53225, 86557, 18193,\n    97580, 41232, 138398, 67821, 128724, 8944, 233212, 101353, 52099, 42127, 14006, 120107, 32789, 32132, 3498, 18123,\n    33758, 56058, 5779, 128760, 59888, 98869, 18445, 84702, 51911, 13234, 218379, 20093, 39031, 8074, 70195, 20708,\n    23462, 24355, 131384, 60189, 26390, 10403, 41060, 7140, 10781, 49410, 42261, 87202, 82566, 41663, 43105, 60276,\n    2768, 5733, 74176, 28329, 2297, 145430, 131632, 83615, 122915, 105441, 655, 224102, 5284, 136426, 67763, 16294,\n    188511, 32538, 61049, 27893, 3394, 13951, 159099, 28542, 17930, 145360, 9492, 190122, 32285, 78855, 26440, 13570,\n    58648, 73908, 4239, 124561, 2444, 74172, 53131, 11468, 10794, 73566, 11623, 35343, 64710, 30481, 4163, 10328,\n    38309, 29901, 10538, 154377, 76132, 92405, 24839, 11679, 3465, 13449, 11637, 7824, 2337, 57754, 1260, 14458,\n    41118, 19878, 38661, 13416, 159180, 37074, 163164, 54137, 28627, 52134, 184900, 8520, 40385, 29546, 30502, 22386,\n    66527, 107458, 6850, 24022, 47983, 30603, 35083, 8934, 304066, 39500, 9, 28261, 33026, 77251, 9374, 44833,\n    116312, 34990, 29236, 63563, 125639, 135405, 165398, 159055, 55690, 88141, 69643, 236964, 31983, 25572, 20436, 36746,\n    60896, 31850, 16179, 11828, 5888, 3043, 66368, 9750, 31167, 7915, 53111, 36430, 1333, 64344, 93659, 20061,\n    60596, 180191, 51630, 6792, 30244, 43509, 101058, 22409, 420, 44210, 109783, 43223, 27030, 72477, 72831, 32679,\n    29235, 7675, 47556, 12258, 39907, 149412, 84926, 118247, 24692, 71717, 105038, 86009, 45941, 41189, 89453, 29856,\n    52543, 30627, 226798, 67303, 59230, 67415, 34408, 1367, 99685, 16867, 128419, 52147, 4111, 125381, 117881, 16173,\n    44093, 102224, 31575, 23234, 24870, 83790, 127407, 239098, 3200, 994, 1255, 100903, 242275, 117266, 55116, 38205,\n    16140, 29662, 11307, 40414, 208793, 123355, 56470, 4862, 75600, 30119, 58218, 70828, 24075, 26974, 7802, 192353,\n    4851, 5475, 78720, 66596, 3409, 28573, 64396, 30381, 30690, 59859, 88256, 5406, 99945, 103064, 34463, 37727,\n    24238, 86643, 60088, 4057, 23741, 5967, 162904, 38240, 28356, 93858, 25510, 122879, 6897, 3278, 7057, 11971,\n    4400, 35461, 211413, 21395, 59615, 39471, 87233, 55795, 128426, 3051, 22470, 41950, 14705, 3974, 180108, 80476,\n    78442, 204996, 91987, 15634, 67610, 139015, 142373, 35611, 51134, 10387, 4353, 153456, 57749, 181039, 14183, 68447,\n    151532, 21107, 36452, 20551, 3186, 46247, 46383, 129666, 88736, 140662, 146243, 2066, 8360, 7978, 64818, 106963,\n    17896, 47801, 10723, 114821, 223295, 74192, 3293, 3393, 16987, 74064, 11277, 91622, 4270, 29828, 27951, 387869,\n    103235, 1374, 61988, 120083, 477, 145892, 128378, 11779, 211263, 61354, 18221, 17869, 46530, 83061, 108538, 157981,\n    90608, 67199, 95080, 49064, 195814, 12302, 66307, 10348, 231346, 160732, 112859, 63633, 146558, 21271, 31037, 198802,\n    47622, 12862, 95710, 3910, 77850, 73961, 85585, 34752, 61000, 4082, 24595, 103679, 71107, 8208, 79568, 150019,\n    16615, 24961, 139857, 32664, 197366, 4559, 54735, 32696, 4126, 162019, 75698, 13916, 70108, 159638, 19834, 9349,\n    24675, 175560, 49643, 18206, 52459, 27992, 10809, 88865, 401975, 133172, 29000, 34558, 30915, 3658, 25834, 42430,\n    36562, 125265, 18182, 10155, 40149, 97082, 208980, 19575, 60853, 90529, 66545, 9600, 789, 46420, 2317, 88593,\n    55595, 98980, 115302, 5742, 169155, 1073, 177901, 3472, 11189, 63711, 78643, 65472, 50459, 127979, 93, 42202,\n    67053, 21720, 157650, 11145, 141378, 42033, 22824, 85705, 79114, 35584, 15974, 1510, 54172, 28562, 12451, 104226,\n    19190, 97151, 73024, 20948, 5151, 81741, 21499, 29006, 84183, 198074, 54003, 45120, 170125, 26240, 35177, 28389,\n    64863, 79974, 60778, 176915, 232183, 45342, 2038, 80253, 41564, 40703, 32689, 5430, 100689, 5366, 23007, 134279,\n    14266, 26712, 73993, 24934, 64242, 52113, 102887, 61801, 46415, 201049, 54251, 62133, 122757, 164883, 30815, 139966,\n    2319, 30842, 766, 13362, 10287, 134518, 86111, 81665, 82440, 28333, 43019, 18963, 8804, 161944, 23439, 102144,\n    101145, 80029, 39052, 248708, 30350, 117340, 11878, 128467, 974, 138625, 63961, 5237, 74778, 61834, 67040, 43814,\n    13690, 65947, 33809, 232476, 115258, 181745, 28824, 94013, 9510, 10246, 93722, 81976, 7217, 114383, 3493, 16014,\n    69045, 72692, 12145, 80981, 9507, 6692, 1620, 60820, 330444, 35474, 33962, 4797, 7053, 295463, 46445, 27026,\n    12491, 77988, 49524, 35675, 90947, 29114, 166705, 101385, 133782, 32704, 6186, 84595, 176031, 185623, 45966, 151302,\n    63069, 1699, 107491, 947, 15458, 74452, 196212, 6046, 10498, 12163, 10239, 35191, 243951, 9277, 9090, 29539,\n    54460, 22820, 26514, 112549, 60372, 51753, 48756, 21812, 70861, 260326, 41, 44222, 10441, 16961, 48148, 138771,\n    216194, 5914, 52153, 53400, 212036, 56519, 26245, 10117, 45888, 15294, 138019, 90913, 26368, 43842, 42111, 23348,\n    6082, 194845, 161089, 156206, 51546, 11647, 30759, 302912, 262094, 8635, 78876, 26535, 35283, 54183, 31183, 85484,\n    147873, 12989, 5197, 6356, 72894, 65347, 20150, 27370, 73787, 1493, 45918, 12366, 190217, 20724, 13858, 10981,\n    67449, 81213, 7553, 14115, 72242, 271517, 11842, 48310, 88743, 143726, 22177, 3290, 243231, 58452, 62937, 12592,\n    1654, 40066, 33477, 13751, 9921, 128442, 15868, 7106, 75236, 83773, 10775, 36938, 10482, 170465, 17368, 17469,\n    161508, 32752, 98340, 800, 19824, 264456, 3901, 87319, 2867, 26782, 9630, 113102, 185815, 24197, 44584, 86366,\n    40224, 3636, 140916, 31731, 267731, 9567, 53678, 72984, 29389, 27963, 17106, 50282, 284911, 60170, 8322, 12608,\n    23374, 89652, 5268, 39044, 229766, 8869, 151350, 31436, 177342, 12269, 183212, 120418, 116270, 2843, 78888, 69192,\n    7865, 184099, 1086, 129897, 18383, 70508, 20242, 18508, 229924, 124569, 35749, 50589, 55626, 9884, 83115, 40971,\n    30671, 18135, 14452, 38861, 17844, 201826, 5549, 26413, 17189, 13561, 38539, 10679, 143331, 3314, 36785, 171194,\n    49685, 187713, 67506, 4618, 104039, 17060, 195080, 50648, 33159, 19238, 67559, 134840, 28599, 157523, 17130, 38064,\n    117398, 94355, 31918, 13575, 34538, 40326, 13997, 3494, 348283, 62481, 26862, 3603, 104426, 244363, 153709, 112487,\n    304612, 199674, 41239, 35545, 54869, 293005, 28223, 26277, 26899, 4533, 18518, 15492, 38587, 80488, 70485, 160395,\n    263, 60162, 11382, 222152, 4696, 250751, 51921, 182609, 10707, 48463, 46243, 1227, 49111, 111564, 46502, 33342,\n    56846, 68541, 63559, 858, 139927, 16654, 229375, 76759, 26478, 33205, 95828, 23399, 92945, 2637, 35630, 28470,\n    143992, 50214, 14174, 21456, 166191, 65665, 1711, 21594, 78019, 97599, 111701, 36, 147151, 110246, 189022, 43021,\n    30397, 40757, 131935, 42065, 73335, 48039, 26596, 28984, 15102, 2361, 7421, 202167, 69744, 43766, 52826, 3642,\n    83304, 33873, 75140, 63169, 192389, 36551, 92748, 13039, 123959, 233220, 21738, 84447, 77230, 20228, 187852, 19095,\n    25799, 92136, 108774, 29237, 53947, 2299, 118106, 2687, 8830, 42331, 202924, 33667, 2023, 73763, 30704, 19363,\n    19779, 16737, 35629, 48081, 24068, 101013, 162338, 291912, 13749, 24745, 328289, 167679, 70086, 48299, 23306, 16732,\n    17801, 43322, 54589, 3586, 63653, 43624, 53474, 925, 109177, 251316, 43805, 13082, 19511, 86565, 142182, 92461,\n    17117, 101033, 103319, 64589, 4022, 4351, 235897, 5352, 82705, 107142, 46391, 156084, 5860, 61365, 10558, 13045,\n    7717, 18357, 33922, 12590, 33065, 6928, 46993, 783, 46937, 67846, 8952, 26295, 6107, 119656, 18799, 17458,\n    50747, 4229, 179559, 112727, 118080, 20683, 41464, 125468, 51560, 49749, 44231, 7359, 35339, 62988, 136487, 67015,\n    5208, 29150, 24956, 105186, 48858, 6143, 18097, 6972, 16404, 73489, 58742, 97196, 36357, 164616, 5834, 32267,\n    13746, 147733, 15113, 132091, 34127, 106298, 39729, 106426, 22294, 9780, 15602, 36213, 71502, 42808, 66802, 599,\n    60755, 5851, 39120, 67363, 108623, 126368, 72770, 91263, 32486, 30596, 151717, 7951, 52002, 43103, 11768, 68942,\n    40901, 39344, 24037, 127500, 116890, 48403, 16926, 86750, 17745, 48648, 159545, 34460, 58419, 5634, 114317, 67865,\n    31462, 23352, 24010, 98185, 125708, 69686, 68337, 13610, 26271, 70691, 2980, 4768, 27225, 102402, 75453, 28106,\n    8104, 6931, 1176, 6274, 6475, 112635, 22498, 6176, 238686, 26832, 28893, 90319, 14441, 15682, 15087, 39517,\n    45270, 109134, 104440, 45965, 47645, 81772, 7876, 52683, 87720, 12898, 4505, 185665, 2769, 113401, 15664, 57592,\n    105229, 137381, 97059, 119268, 6876, 43309, 33886, 128363, 35476, 144249, 67013, 143587, 83367, 25703, 91436, 59347,\n    53236, 2289, 16519, 19844, 46309, 58558, 99834, 23313, 218816, 231303, 36388, 51333, 183535, 109792, 139277, 54306,\n    90139, 18235, 8275, 32710, 37677, 82464, 86025, 92204, 88842, 117723, 37570, 128723, 234242, 76350, 73795, 34896,\n    148247, 58424, 11105, 11744, 45746, 63372, 17118, 49772, 199520, 81902, 38004, 22911, 33752, 3125, 1995, 53792,\n    4689, 26909, 108150, 146062, 69674, 41811, 161444, 84855, 8999, 28561, 16731, 93937, 3189, 21967, 24890, 22943,\n    1356, 145300, 51569, 28802, 517, 118679, 31703, 40607, 48098, 108854, 25003, 10233, 73969, 177495, 5248, 24516,\n    215347, 146192, 48712, 60626, 69188, 40735, 5866, 586, 101541, 6509, 47590, 52129, 5969, 222045, 110933, 25733,\n    24223, 65339, 62812, 2414, 155418, 35819, 16022, 78423, 43138, 20995, 128255, 240673, 46745, 236093, 72176, 57085,\n    97841, 61248, 107, 36068, 193177, 105427, 55726, 215229, 20446, 47228, 100420, 87091, 14429, 121708, 23605, 21157,\n    187721, 21880, 2997, 203976, 99166, 95068, 25877, 7724, 98925, 83401, 4829, 13182, 18229, 13718, 239662, 38653,\n    116505, 153497, 30589, 89029, 38962, 181302, 43853, 78872, 180301, 4786, 248240, 7401, 106136, 112590, 77745, 19731,\n    60880, 77789, 125748, 135487, 5975, 48627, 34084, 12419, 215770, 47557, 254582, 10364, 106495, 21856, 67539, 88981,\n    38805, 21428, 48732, 42316, 12149, 16078, 52808, 25327, 51322, 33850, 51147, 12253, 122354, 46077, 56483, 254553,\n    115417, 81834, 150991, 94662, 86668, 7381, 12841, 100650, 18218, 15741, 22372, 68294, 50705, 15535, 84660, 61887,\n    22553, 72299, 31361, 24824, 17743, 46820, 64288, 31582, 77006, 111674, 116384, 30760, 80920, 86149, 77192, 51979,\n    79691, 60342, 122805, 103800, 240873, 160744, 233114, 78962, 54920, 8608, 3484, 316104, 72548, 24337, 5088, 230040,\n    21926, 10172, 36838, 26, 86221, 83458, 102176, 12062, 17571, 41929, 41170, 28428, 68239, 41750, 103930, 2634,\n    18313, 53019, 34825, 97837, 63115, 24606, 73157, 152474, 14715, 91439, 37033, 109806, 140259, 30668, 174760, 380,\n    135597, 95673, 136073, 65073, 134249, 13829, 17279, 122305, 4420, 46444, 10237, 64848, 203623, 70728, 10349, 182885,\n    65075, 24519, 25783, 40318, 34139, 22222, 63394, 55266, 102764, 41422, 20126, 65100, 90408, 53640, 35128, 48932,\n    11192, 38935, 96839, 34782, 39492, 19396, 41332, 6250, 5511, 19492, 51304, 25936, 104466, 54099, 73771, 86115,\n    5080, 7669, 30891, 111700, 13931, 25276, 72289, 135447, 14820, 258641, 25265, 31005, 281179, 75286, 393, 95359,\n    14623, 13584, 6680, 101227, 80173, 44933, 76666, 54542, 13244, 39348, 458, 25379, 109451, 134348, 81143, 6959,\n    65554, 12027, 51311, 8716, 57589, 140731, 28467, 23316, 17272, 30458, 25980, 55229, 77197, 83798, 28302, 114784,\n    7428, 34548, 26241, 14712, 39336, 103304, 18928, 54080, 12870, 334, 87722, 15208, 16895, 142098, 114262, 39820,\n    83913, 57817, 28682, 7721, 14900, 108672, 11250, 62246, 42849, 415188, 1724, 26555, 24549, 25505, 26443, 107450,\n    145899, 61035, 43528, 6901, 60726, 65906, 267741, 21338, 147590, 42079, 18924, 73017, 135236, 15393, 5206, 4026,\n    84185, 1531, 5988, 113890, 82647, 303391, 7386, 69844, 71611, 189865, 76523, 31877, 13315, 19314, 198575, 32821,\n    1928, 67641, 25913, 104475, 103489, 3297, 70391, 18406, 15446, 113347, 19295, 93790, 27856, 1792, 167471, 116449,\n    8541, 4408, 41757, 63233, 25765, 86680, 64501, 27034, 24816, 34975, 6079, 4486, 49693, 36229, 16917, 21581,\n    62426, 27862, 11612, 54284, 35702, 194034, 355, 24277, 48262, 87411, 70504, 310164, 118018, 12516, 47559, 43502,\n    57433, 107139, 9290, 66533, 80863, 14634, 34312, 91725, 28606, 21342, 67241, 72355, 43244, 375789, 37402, 174015,\n    105070, 8342, 44167, 67494, 1890, 16365, 11723, 271002, 1865, 47918, 8350, 45564, 27742, 25110, 125803, 8553,\n    49504, 81925, 62211, 4534, 15491, 19011, 80373, 206920, 667, 102405, 128623, 245524, 5553, 113309, 192739, 65766,\n    19567, 22832, 261958, 29679, 21293, 71134, 20962, 105123, 24721, 860, 21752, 33448, 18372, 157167, 94822, 35770,\n    173224, 232737, 75729, 28937, 46828, 28062, 25453, 5207, 140366, 36665, 30652, 6169, 67920, 150458, 92040, 23186,\n    184604, 92330, 20891, 176492, 49427, 27828, 38305, 42495, 143982, 49560, 25503, 90043, 29747, 65328, 47830, 12932,\n    11068, 77721, 9003, 25213, 94205, 140426, 46090, 89945, 138173, 192691, 33329, 112232, 129905, 35709, 27514, 1841,\n    19957, 31411, 127476, 53572, 17497, 173549, 55063, 175135, 19841, 69314, 5192, 237921, 117660, 150697, 4060, 273045,\n    50414, 98940, 65348, 153665, 164423, 58804, 156695, 48994, 213928, 86036, 28608, 8355, 39574, 34540, 16927, 135680,\n    18374, 151587, 10830, 53805, 16878, 16623, 4282, 48030, 8537, 14986, 46102, 13062, 72897, 72, 33050, 108227,\n    39451, 45935, 651, 113320, 40535, 95176, 57450, 48843, 5003, 19019, 10407, 211163, 3848, 1068, 4988, 32091,\n    30095, 41692, 15099, 43602, 107434, 50744, 7627, 171349, 16313, 150832, 352665, 207750, 33937, 38256, 51091, 156000,\n    87889, 90663, 84175, 24908, 114900, 50365, 31494, 83829, 5398, 169342, 47521, 54818, 18935, 8356, 43094, 41212,\n    174536, 10082, 92550, 6678, 60614, 23355, 69721, 14796, 34149, 128830, 58187, 3179, 208, 40325, 28399, 225029,\n    401412, 51150, 31580, 207268, 6657, 10993, 69818, 64282, 289845, 23308, 12961, 38447, 6681, 52944, 31855, 2572,\n    47646, 120728, 179148, 37240, 45196, 218274, 4816, 3695, 21961, 50084, 35209, 18073, 51452, 27004, 6100, 33941,\n    1377, 84831, 171214, 85, 141510, 9078, 99227, 32610, 6417, 11718, 49868, 65579, 87902, 73018, 49062, 46280,\n    61742, 21512, 40862, 107733, 15941, 29168, 157765, 144919, 14487, 5767, 158014, 140070, 7241, 573, 71584, 16921,\n    223566, 40331, 179473, 35081, 47926, 140885, 41508, 52104, 59180, 42310, 32811, 29048, 123517, 102413, 80208, 10104,\n    14746, 12649, 153641, 126022, 37965, 113017, 4171, 83, 142592, 2809, 6362, 50416, 71323, 116894, 260776, 16204,\n    1524, 5760, 30351, 12658, 20703, 54403, 36083, 45408, 74772, 4946, 14485, 50759, 111222, 10890, 2195, 167147,\n    92962, 130534, 16283, 177256, 35016, 15472, 210156, 151187, 73922, 117691, 43250, 52051, 37392, 24811, 24358, 30830,\n    5775, 818, 21969, 1476, 127322, 151783, 58392, 31021, 106913, 65215, 89407, 90802, 28531, 11690, 20234, 95249,\n    44602, 37256, 18707, 11928, 5161, 4410, 26571, 51903, 49768, 22008, 25252, 65780, 209499, 68769, 203726, 13249,\n    137363, 48845, 86823, 6658, 5674, 31881, 1083, 1823, 108676, 34518, 166752, 13791, 14287, 91576, 91429, 8665,\n    11529, 26401, 16191, 91972, 30964, 5254, 28486, 54697, 79613, 66520, 18447, 22870, 45203, 194466, 22822, 51703,\n    12278, 76716, 44595, 73455, 33546, 12235, 144843, 36154, 51247, 11116, 33040, 3180, 225753, 60864, 1972, 28469,\n    12891, 28879, 10338, 144157, 56294, 353058, 38302, 41447, 87532, 110616, 27065, 168438, 6557, 1213, 50804, 144643,\n    24817, 2390, 136531, 38174, 247513, 16190, 4059, 122791, 131994, 137430, 39506, 57650, 16305, 5188, 54309, 106128,\n    20628, 88071, 67394, 395446, 250285, 66176, 91254, 1399, 114196, 43915, 60230, 44853, 27206, 106353, 43013, 18733,\n    345105, 226453, 51202, 16607, 57106, 117175, 35492, 10476, 89598, 127439, 15187, 39624, 13688, 61570, 10615, 31111,\n    59370, 6238, 175252, 32143, 224492, 41388, 95408, 34384, 148238, 78307, 38959, 9340, 160091, 61443, 15737, 11216,\n    41244, 170, 38299, 102443, 113097, 26382, 14027, 33707, 3957, 76300, 66160, 19431, 18900, 6952, 1717, 108656,\n    82206, 188021, 257335, 27295, 43999, 41210, 31777, 46956, 57457, 12657, 11489, 15697, 48060, 204748, 53583, 82422,\n    284790, 30503, 137341, 8120, 19615, 220311, 15991, 10217, 63424, 9808, 67431, 70976, 98221, 4491, 15177, 28535,\n    144789, 751, 13230, 2394, 1504, 33977, 132104, 30316, 22230, 931, 97193, 185240, 24826, 22687, 174322, 15307,\n    22988, 1390, 188745, 180325, 29580, 59068, 74903, 18994, 29195, 79, 15436, 7622, 38462, 11566, 138710, 44828,\n    45774, 37768, 99236, 68137, 84083, 19282, 22698, 17134, 74807, 126662, 173497, 46248, 16938, 119735, 3212, 28292,\n    213652, 49013, 9975, 32180, 45660, 86250, 4801, 68788, 95490, 77482, 113751, 11994, 44624, 94452, 46839, 128497,\n    100316, 5798, 58588, 73184, 202987, 65417, 37790, 88524, 1606, 43156, 97964, 105717, 34947, 11203, 100060, 37742,\n    130074, 93653, 107799, 94311, 196106, 41347, 8035, 10780, 16390, 27883, 118236, 167395, 1979, 25006, 19375, 31628,\n    18916, 144723, 78502, 114047, 103107, 86492, 107686, 5844, 20934, 206963, 23556, 22591, 16562, 146333, 20167, 10471,\n    117434, 33085, 2863, 9740, 36669, 41849, 37271, 22790, 18209, 28979, 8231, 12952, 54408, 21731, 25130, 45208,\n    55748, 138120, 75826, 414, 29593, 9925, 292865, 25999, 683, 123149, 7036, 92159, 86055, 61827, 103680, 23176,\n    54918, 58466, 57578, 13305, 5709, 86479, 16697, 31064, 17660, 200919, 10770, 49793, 33423, 32370, 52047, 16488,\n    62555, 6459, 8426, 83493, 7763, 59725, 82812, 18628, 67760, 79405, 68557, 9612, 7673, 28102, 56517, 69620,\n    171797, 32458, 29541, 15870, 81109, 32080, 207644, 71495, 21202, 11039, 91036, 61230, 2810, 130800, 32260, 4613,\n    60590, 37112, 75214, 33979, 126402, 155062, 30642, 63875, 12810, 194463, 82799, 47664, 16725, 36685, 43367, 61099,\n    449, 172150, 102867, 21691, 301838, 36745, 7130, 18671, 57316, 34852, 38034, 54182, 35578, 65900, 99486, 19771,\n    3456, 2658, 16914, 99866, 28390, 28109, 8262, 21147, 34353, 20006, 4228, 137085, 1675, 203023, 283196, 198286,\n    214375, 163329, 290603, 152574, 40471, 83506, 30068, 14730, 23177, 131539, 34759, 27668, 32178, 71896, 104799, 116305,\n    85430, 119262, 42860, 25160, 8911, 23428, 49437, 105322, 6519, 16203, 6349, 74711, 1230, 38045, 8540, 75165,\n    44736, 25909, 51026, 317034, 4984, 32281, 91312, 27060, 44431, 17817, 45363, 155937, 239085, 35697, 59784, 91993,\n    29531, 126740, 213757, 76560, 167776, 285273, 24262, 8237, 65030, 41160, 74437, 48804, 118916, 13159, 37842, 1031,\n    75349, 1478, 11655, 108777, 23435, 277425, 101734, 67469, 70231, 124711, 43532, 28514, 65526, 54956, 1000, 21882,\n    17728, 25302, 40952, 52214, 149632, 1999, 2111, 3259, 63362, 89961, 220561, 39777, 26335, 9063, 10572, 12416,\n    34551, 34623, 38604, 24723, 5947, 15588, 69927, 66252, 119177, 69173, 46629, 28714, 70715, 212408, 20521, 406913,\n    74380, 11716, 50659, 50862, 37009, 88460, 130101, 7210, 53853, 538, 65120, 151950, 55806, 163748, 52837, 13153,\n    21100, 16674, 64536, 6091, 138201, 44837, 58547, 3723, 163, 2177, 32288, 85454, 34033, 8497, 14282, 25742,\n    10535, 10741, 79559, 117493, 243787, 49337, 100718, 79495, 40139, 42956, 7551, 55433, 15421, 31509, 23034, 45081,\n    547, 61176, 53434, 328001, 8470, 36263, 30145, 4519, 74173, 53935, 11845, 73774, 60211, 78025, 3, 4102,\n    73782, 109293, 315332, 48412, 26683, 13714, 6865, 20128, 18490, 104141, 325, 39470, 171970, 115860, 15707, 7268,\n    73301, 74336, 31370, 2368, 111827, 107757, 136231, 142844, 97138, 96638, 84053, 38691, 23801, 1588, 10573, 122098,\n    77039, 240, 186135, 146101, 11996, 18143, 112963, 46171, 155836, 348769, 47795, 121213, 116266, 132515, 3344, 144804,\n    31286, 99187, 255838, 129694, 35894, 48779, 55235, 148582, 71967, 65282, 15174, 13920, 47080, 6147, 108242, 157593,\n    125025, 7136, 1286, 28957, 127956, 28402, 98813, 20805, 7532, 109417, 40610, 5041, 32958, 15142, 18408, 108596,\n    33543, 50517, 27748, 80114, 233434, 91447, 487, 37094, 100048, 30541, 43477, 10639, 89862, 155868, 37667, 8726,\n    60684, 237903, 73408, 99589, 12190, 38739, 97348, 3914, 13594, 2680, 149016, 13907, 30171, 28343, 23530, 115225,\n    61104, 35821, 147679, 14337, 4297, 244282, 24085, 326976, 56428, 7851, 21303, 131620, 71446, 83253, 68692, 111870,\n    5224, 15813, 38197, 49026, 45057, 13660, 3306, 76345, 40671, 27905, 91072, 996, 68527, 62085, 91351, 122634,\n    55109, 168209, 2024, 27560, 112707, 17352, 8306, 167115, 169921, 166958, 5031, 46020, 11844, 67284, 19130, 76185,\n    6920, 32849, 5450, 14610, 22451, 21002, 17392, 31872, 66682, 84796, 13709, 40210, 59898, 12029, 8719, 53564,\n    21462, 91884, 21647, 88379, 194428, 12754, 37797, 132826, 160016, 22567, 54383, 53186, 77611, 31107, 8339, 4694,\n    19185, 90355, 23597, 17222, 140675, 28442, 23668, 55977, 9128, 61555, 28774, 155229, 17658, 9390, 24379, 69357,\n    15752, 127381, 239631, 62460, 93181, 55913, 45133, 140155, 18676, 25249, 33164, 29581, 82837, 67223, 22362, 29975,\n    7317, 52813, 1943, 29613, 20012, 207130, 49617, 49651, 5636, 15334, 36313, 29226, 28084, 95247, 72072, 19000,\n    224932, 15811, 114, 32127, 38097, 37508, 88507, 37225, 27359, 91626, 12193, 69279, 20608, 11055, 88156, 92808,\n    2152, 57259, 55275, 72789, 24475, 104414, 1708, 9882, 3818, 48661, 66897, 1631, 34806, 227930, 85815, 87753,\n    18321, 250664, 72733, 25107, 206797, 50891, 8082, 196411, 92596, 96764, 152823, 65514, 22819, 387277, 62176, 51225,\n    40329, 15563, 189, 3659, 73670, 64357, 51793, 275136, 33482, 86653, 74615, 67058, 11318, 125720, 15388, 22388,\n    8267, 1730, 102663, 170910, 40784, 7144, 85373, 13040, 7088, 94309, 583, 44224, 140424, 77439, 18496, 164026,\n    36578, 4722, 9151, 5824, 63365, 26510, 35199, 40500, 79277, 32495, 44614, 35233, 9566, 203293, 152144, 7097,\n    2330, 183480, 98629, 13423, 330887, 44130, 68600, 30939, 97829, 31012, 345465, 56747, 94879, 4939, 160027, 149761,\n    99423, 46099, 32251, 15332, 8761, 96094, 128555, 5763, 235318, 222223, 55729, 30241, 55420, 201746, 3987, 81382,\n    8259, 49325, 23287, 7719, 24633, 251100, 92311, 18591, 110533, 64759, 170260, 393860, 7175, 21144, 132887, 3593,\n    75346, 101277, 91109, 16387, 259187, 11627, 57459, 173829, 44694, 55780, 49797, 89192, 120443, 62622, 3904, 14814,\n    23887, 1027, 112258, 64955, 99800, 11132, 66353, 36202, 48624, 18158, 88481, 96882, 43059, 11040, 2455, 7077,\n    21651, 181159, 99126, 100434, 61388, 68186, 19161, 110468, 120052, 8819, 55324, 41494, 7014, 37689, 3618, 87729,\n    92615, 207943, 9823, 128657, 12587, 15857, 6379, 67628, 51216, 71775, 157617, 63244, 1503, 3864, 218754, 110864,\n    5769, 21492, 7243, 1192, 87921, 85529, 31512, 18537, 42698, 35350, 73510, 84474, 34301, 8991, 21013, 35034,\n    566, 38832, 19838, 35586, 37216, 39413, 55006, 12178, 59742, 856, 84563, 6900, 25632, 17437, 49786, 30723,\n    13847, 70845, 4044, 7843, 23944, 235976, 55530, 48942, 6518, 20939, 73769, 192653, 52936, 95207, 23895, 132542,\n    142982, 22632, 87452, 48042, 54018, 178468, 10728, 26230, 23559, 363, 81269, 142012, 5718, 346258, 31456, 84333,\n    246476, 51018, 66692, 101804, 120570, 39962, 30373, 70593, 2864, 60541, 19425, 54209, 104092, 7201, 31545, 48018,\n    25865, 15442, 46257, 40443, 8328, 6451, 111782, 47527, 97754, 33046, 470, 245116, 31095, 39, 91934, 87208,\n    73470, 36708, 36521, 12801, 70624, 36272, 8892, 79768, 12427, 55454, 103756, 5908, 52390, 62962, 22720, 141138,\n    94634, 41689, 128402, 126390, 6628, 106394, 35527, 134394, 82727, 254651, 194502, 148064, 89549, 3202, 28359, 957,\n    21954, 27906, 49840, 142747, 8307, 24206, 48978, 1186, 71728, 133038, 71474, 91306, 6333, 110959, 74600, 70387,\n    18983, 62609, 56057, 22970, 1147, 135850, 1321, 28834, 3578, 59715, 102227, 32827, 81415, 99952, 55636, 257598,\n    390, 22702, 35701, 85872, 402916, 39216, 189795, 14929, 19467, 10112, 144422, 61514, 5279, 63421, 134686, 41436,\n    8424, 51925, 10598, 132295, 124416, 4604, 194739, 210929, 57866, 31829, 51626, 50007, 9976, 91878, 61906, 56168,\n    81906, 60918, 61859, 40017, 23059, 16887, 40927, 62064, 12785, 32893, 32913, 21782, 93965, 20169, 44387, 79084,\n    38463, 11457, 93950, 27127, 157050, 2697, 337088, 5116, 54128, 48255, 33279, 8821, 27352, 25515, 124022, 65710,\n    28906, 38557, 33390, 1722, 104435, 72215, 38551, 12094, 30978, 25113, 6671, 37355, 175109, 42862, 98024, 65406,\n    221276, 59624, 118012, 64637, 78760, 86697, 21426, 1639, 40350, 12584, 67193, 84144, 31396, 7863, 143011, 69629,\n    63112, 9454, 28666, 65798, 46372, 134721, 6314, 51402, 30837, 151922, 2847, 38676, 38008, 92823, 136245, 17540,\n    5504, 109295, 205242, 37606, 5211, 214892, 1586, 20670, 208711, 137743, 19328, 40652, 16995, 20023, 14657, 154919,\n    34422, 12996, 13918, 38221, 47690, 16398, 2959, 37680, 89122, 6721, 198469, 91876, 172043, 83898, 101992, 26084,\n    94570, 3635, 76958, 22853, 76497, 38266, 176590, 168403, 44464, 142840, 79180, 184594, 1984, 41806, 83147, 11985,\n    6546, 366068, 59732, 24533, 271505, 8736, 39084, 222992, 93429, 28962, 58985, 86665, 8432, 30028, 14548, 32439,\n    54424, 165029, 55175, 27458, 69046, 121277, 46168, 33732, 20661, 24581, 135574, 123110, 37556, 79260, 72611, 16957,\n    12939, 46162, 58238, 44907, 72936, 253758, 41324, 32518, 96480, 11949, 124438, 65280, 43256, 34107, 53533, 43531,\n    37037, 28366, 45970, 32741, 173438, 6121, 194202, 62969, 26355, 30314, 58370, 28455, 1848, 50519, 82830, 90393,\n    21761, 295490, 10936, 256940, 133568, 44050, 20269, 4089, 27457, 21610, 219460, 36743, 14821, 101388, 52005, 13124,\n    30979, 140816, 167362, 26054, 18458, 60789, 34917, 40447, 26606, 33422, 9066, 3452, 83614, 5761, 20263, 137238,\n    25038, 91310, 101, 52322, 74548, 42572, 38084, 214054, 186568, 31802, 17665, 30620, 141936, 37730, 14420, 4265,\n    187218, 49640, 188208, 51441, 55388, 96452, 66659, 40869, 42039, 60967, 221027, 19234, 178581, 29105, 96050, 9165,\n    196118, 157335, 3738, 40354, 117436, 2965, 34136, 59659, 15570, 50843, 230035, 31444, 71260, 43886, 18316, 5387,\n    38500, 168508, 17406, 32174, 8828, 103373, 143806, 90367, 3560, 18719, 122310, 16508, 26719, 2541, 105429, 6645,\n    37998, 73190, 10591, 235916, 49737, 87112, 233941, 53188, 32193, 79154, 4544, 52905, 126477, 7580, 63501, 57314,\n    3216, 31337, 6541, 103083, 60846, 49, 9756, 15481, 1355, 43840, 14319, 13743, 27486, 10222, 73114, 230718,\n    418644, 16706, 6674, 279748, 23058, 45273, 295831, 86306, 2743, 5535, 88773, 21829, 35253, 120938, 31153, 3169,\n    16839, 42847, 8751, 80974, 33942, 36867, 35514, 16485, 26474, 77775, 56877, 5391, 48346, 3882, 108713, 31403,\n    27804, 55248, 26235, 43821, 136104, 40118, 175507, 28034, 203908, 18732, 1788, 34030, 106427, 36958, 54359, 7251,\n    44936, 15356, 69139, 455, 157915, 22173, 140291, 50348, 43275, 82066, 49621, 54952, 15216, 36226, 96695, 66855,\n    6936, 1987, 8227, 196087, 4631, 68827, 99004, 47541, 110265, 17953, 147605, 110242, 58520, 31312, 38724, 329975,\n    642, 3155, 34497, 75937, 6207, 73843, 6120, 17249, 51429, 117746, 3218, 910, 68961, 319671, 14938, 29555,\n    34700, 1649, 66673, 72268, 9655, 76800, 153087, 6941, 210168, 27130, 35398, 1780, 73242, 3135, 56689, 19556,\n    165307, 8765, 35967, 121458, 13333, 70453, 17350, 117253, 22265, 13340, 44265, 39869, 441, 3742, 135025, 23581,\n    33309, 16543, 17731, 13291, 157637, 283005, 21408, 101360, 63887, 52312, 83873, 5338, 233779, 23759, 186949, 34531,\n    177320, 38069, 156465, 91004, 19353, 59852, 68160, 14891, 1338, 1072, 29823, 1950, 28901, 81407, 313445, 73038,\n    84807, 162348, 240257, 37162, 138934, 16111, 58013, 41253, 102951, 16457, 96056, 19541, 56402, 67217, 41638, 94381,\n    89674, 29481, 37456, 80815, 151579, 13937, 13683, 132537, 19699, 134545, 67020, 29816, 222341, 141235, 427578, 48868,\n    129557, 233342, 23077, 87871, 16213, 18728, 16184, 9469, 37913, 19680, 2798, 171356, 178328, 13216, 50049, 72690,\n    71904, 124644, 55455, 7504, 29052, 41036, 266546, 19899, 30391, 188755, 8659, 59469, 16, 104298, 112943, 53865,\n    76203, 138226, 68857, 139953, 14125, 107625, 119795, 173133, 4398, 50273, 48808, 54390, 16466, 122086, 31835, 67035,\n    50971, 48859, 7508, 46427, 66477, 73021, 84615, 39985, 83076, 46779, 201569, 53336, 36443, 60865, 168164, 143810,\n    51393, 25548, 169307, 32896, 24485, 38424, 21837, 29087, 275813, 51674, 6714, 64883, 46169, 187369, 55186, 76192,\n    12852, 12018, 62134, 31067, 118303, 16542, 12125, 10579, 4928, 26291, 43854, 7091, 10946, 253716, 109062, 39283,\n    17261, 113012, 258512, 47764, 125126, 32646, 55892, 80279, 201623, 149872, 3192, 385, 1208, 48750, 5376, 58738,\n    22335, 5427, 82416, 47811, 32435, 143086, 38930, 94128, 59975, 156037, 37977, 38224, 62485, 7698, 50405, 71027,\n    16462, 21559, 136153, 34131, 107506, 162069, 63703, 3101, 215029, 40407, 4178, 3774, 9187, 80019, 17880, 97926,\n    67579, 2600, 18405, 8351, 47924, 86638, 70820, 92206, 86453, 29610, 42241, 119200, 3198, 15466, 67813, 57863,\n    35454, 4779, 99518, 4649, 104641, 144269, 33730, 38073, 65864, 6838, 109456, 193298, 154007, 5623, 45741, 30846,\n    182578, 25573, 157224, 1543, 58575, 138703, 146140, 44971, 49356, 18275, 59064, 20300, 13122, 11848, 24453, 11973,\n    9797, 86843, 2919, 25530, 49210, 1130, 161220, 76788, 75373, 85604, 34926, 36014, 17777, 17255, 51533, 11676,\n    92226, 51845, 119859, 21525, 5936, 18507, 28050, 1140, 31418, 14857, 34207, 47859, 10750, 36382, 32079, 106909,\n    59426, 87757, 38393, 110042, 15965, 97104, 33757, 35344, 97993, 53979, 33651, 45407, 41884, 82515, 173089, 7177,\n    58371, 35365, 47543, 51927, 35587, 10670, 23544, 29306, 84233, 39976, 76076, 62097, 9007, 8668, 28119, 78281,\n    120790, 19835, 143020, 54968, 18670, 64959, 20649, 34469, 42570, 33001, 136570, 87796, 120044, 1106, 58700, 63951,\n    127623, 12805, 83057, 40212, 31773, 49850, 7361, 54336, 347524, 101314, 23751, 19569, 48791, 29174, 49369, 20467,\n    7465, 75842, 38281, 623, 112457, 60210, 28849, 51003, 94720, 6426, 90047, 85560, 43761, 3579, 85105, 34607,\n    90410, 118528, 7224, 42907, 111163, 18168, 6960, 161135, 191298, 5247, 100584, 127552, 171568, 20121, 91173, 12636,\n    54615, 20199, 63730, 98105, 2396, 40387, 14438, 125012, 4765, 33235, 12865, 45299, 37728, 82098, 77872, 114037,\n    59253, 19675, 24838, 398016, 102561, 11446, 17069, 57508, 178277, 65836, 99941, 26114, 2585, 271882, 136866, 50126,\n    11027, 155648, 118367, 14585, 8910, 123015, 335383, 40434, 41016, 53021, 14439, 87098, 176860, 201543, 121888, 2358,\n    9286, 5739, 22666, 54270, 37884, 169381, 33984, 93859, 16124, 89364, 72207, 51639, 76366, 99029, 65812, 2198,\n    12147, 174891, 194289, 6986, 30252, 88822, 21284, 11445, 288337, 160821, 33034, 100869, 43852, 25761, 52882, 1144,\n    103809, 1924, 84458, 86079, 43411, 13542, 139276, 18141, 34978, 41298, 7276, 26481, 173800, 33210, 17951, 142652,\n    33616, 33677, 2210, 19941, 98568, 2486, 192414, 80136, 12058, 235883, 50963, 249638, 29572, 27221, 47034, 6124,\n    72107, 63346, 97620, 158513, 299699, 40388, 23235, 37176, 224244, 198386, 121323, 67992, 23827, 63170, 17838, 106622,\n    158590, 26807, 5345, 23489, 91891, 55474, 74834, 37981, 13058, 5977, 72552, 34706, 26828, 145172, 19904, 21367,\n    34043, 960, 77092, 91381, 4733, 47446, 7680, 41697, 5170, 16960, 14741, 46101, 13656, 473, 51842, 37433,\n    11103, 11551, 121951, 13191, 97536, 165932, 50397, 51628, 129028, 9069, 44885, 6590, 59195, 47045, 32940, 225472,\n    90345, 21833, 13303, 29407, 96615, 141951, 5198, 6028, 18395, 7181, 3861, 14966, 156358, 167182, 36529, 55253,\n    25942, 173153, 30959, 27261, 50691, 150176, 162201, 38467, 48462, 80602, 42163, 118482, 168, 108756, 26011, 17166,\n    54149, 456538, 22512, 91374, 13816, 90358, 131615, 18132, 226707, 1824, 28139, 26860, 42253, 93877, 77351, 65575,\n    8980, 80574, 22020, 27948, 40422, 91324, 76376, 13528, 39281, 91685, 82215, 122541, 144066, 1983, 193851, 17283,\n    26320, 2739, 194978, 4790, 26845, 42627, 61300, 65815, 174612, 55133, 4200, 191130, 79771, 158321, 52280, 166796,\n    221620, 62461, 11278, 4067, 88152, 83409, 31717, 121367, 13522, 47325, 37945, 10406, 174348, 249321, 154101, 64912,\n    29938, 51775, 17220, 15776, 166138, 78890, 84425, 54121, 42861, 16368, 24572, 291647, 10197, 32073, 22651, 11677,\n    97509, 26952, 35787, 18424, 41910, 71614, 94977, 72318, 41594, 70024, 275419, 37702, 60199, 7335, 39107, 61315,\n    18271, 18394, 33768, 87884, 104277, 123724, 7277, 56288, 71981, 189803, 49320, 3352, 6798, 14240, 8954, 69220,\n    94433, 57372, 28620, 68863, 193727, 85575, 42309, 41667, 67689, 42081, 22543, 44824, 12719, 28540, 114236, 101553,\n    27638, 27296, 4300, 5353, 4663, 19379, 94098, 3758, 95888, 95144, 80344, 87320, 28447, 259518, 12718, 71391,\n    152731, 37063, 24132, 31911, 104896, 15672, 103782, 1521, 4945, 72541, 23717, 122632, 15619, 87175, 206120, 29428,\n    189780, 61416, 28350, 44457, 972, 1175, 47233, 198738, 95789, 41907, 21953, 97034, 59341, 22864, 53713, 16873,\n    32971, 20693, 20954, 31336, 21477, 16169, 38370, 16412, 9019, 3841, 24599, 21938, 17085, 6484, 81198, 76413,\n    5849, 72514, 12320, 65247, 276175, 37234, 59796, 52642, 16312, 57349, 198507, 94148, 46134, 18958, 125552, 1747,\n    18725, 151873, 14901, 5490, 68287, 29470, 3689, 64794, 40814, 26018, 25692, 54450, 2703, 88278, 124886, 173087,\n    174000, 24159, 179477, 24276, 46004, 201876, 209202, 445, 52876, 31948, 30206, 157610, 39180, 18439, 44124, 50469,\n    5774, 96278, 222758, 200216, 50290, 45486, 20435, 46986, 46276, 140133, 142326, 15569, 13363, 47522, 92583, 2182,\n    7135, 16853, 22998, 30272, 4952, 63263, 35623, 39096, 53789, 44864, 20053, 110392, 124213, 4630, 16087, 28221,\n    127787, 25839, 77481, 44693, 13464, 113146, 6983, 27069, 55717, 50102, 4760, 7107, 26186, 66507, 59145, 36032,\n    104182, 71328, 29425, 64317, 50781, 47465, 94298, 69706, 74899, 22754, 120756, 25108, 93077, 56834, 73286, 39928,\n    16218, 41699, 176763, 7555, 70819, 50083, 26895, 23315, 26014, 16773, 123079, 41712, 5719, 31516, 90427, 158540,\n    85051, 183128, 40864, 27505, 55392, 9058, 45224, 96857, 30901, 136622, 96557, 56304, 120061, 11501, 151448, 5773,\n    89743, 7769, 86069, 2935, 18471, 41628, 10114, 33660, 110170, 49479, 26745, 92846, 33221, 26731, 18795, 87076,\n    8550, 2100, 29972, 120289, 3077, 72490, 33784, 2630, 208722, 50861, 63483, 79029, 6419, 39467, 14302, 45286,\n    64207, 9686, 67513, 44170, 1050, 77246, 59266, 17055, 53801, 7150, 11111, 42432, 4278, 94579, 362117, 36175,\n    42902, 41933, 39002, 98489, 22913, 74161, 84773, 57036, 17556, 162288, 74485, 178760, 93867, 73635, 128860, 50362,\n    261, 67455, 80001, 46080, 35662, 4368, 25247, 19230, 74393, 22588, 1822, 27682, 235324, 13798, 85998, 13194,\n    235067, 23514, 71669, 147632, 23191, 134748, 214683, 105101, 1518, 25489, 247114, 7380, 54842, 26922, 3971, 26361,\n    20844, 68642, 170517, 77339, 123255, 8963, 77818, 150998, 48466, 36806, 2732, 23261, 11741, 236162, 18243, 126216,\n    28690, 50546, 16385, 92760, 197383, 246558, 201295, 88255, 67588, 71687, 176076, 172653, 169058, 33906, 63747, 24835,\n    157621, 43338, 30050, 46152, 132741, 2770, 51371, 94835, 6614, 15112, 11749, 56936, 1250, 19027, 399017, 58036,\n    100215, 23388, 55815, 308768, 124152, 94803, 9521, 64186, 8971, 28, 30427, 62163, 7616, 103838, 35079, 29203,\n    131235, 7743, 17389, 10882, 37420, 61460, 228512, 85363, 41581, 131077, 62822, 119647, 10130, 54445, 26925, 19968,\n    29016, 24446, 74028, 24176, 61448, 67185, 9254, 8563, 119129, 9771, 99184, 37716, 39514, 10532, 221512, 258753,\n    218630, 55980, 23394, 32141, 61924, 66749, 32411, 3741, 36475, 26678, 77010, 44946, 91203, 128749, 116953, 20476,\n    49625, 53116, 13735, 102335, 29376, 51946, 83407, 67892, 59212, 34685, 21083, 1546, 112982, 32972, 74397, 1078,\n    190545, 16082, 86140, 58591, 89611, 101531, 10061, 105104, 76319, 20035, 17551, 52611, 169061, 190842, 100780, 23907,\n    90413, 115619, 9675, 34710, 193435, 49443, 129734, 11183, 258877, 16318, 136182, 126808, 44635, 27304, 192375, 2599,\n    125648, 47051, 12091, 23814, 721, 58800, 40137, 66726, 97930, 60877, 74487, 7942, 54326, 9841, 41428, 13762,\n    8211, 85383, 6950, 99177, 79806, 201786, 296464, 124087, 13144, 29741, 41721, 47634, 55088, 254286, 106408, 17041,\n    99064, 12942, 64086, 45233, 14005, 2612, 55827, 255, 7984, 13980, 38574, 12776, 46654, 73499, 249951, 2101,\n    26676, 25996, 132326, 116415, 119062, 50449, 31033, 23038, 11589, 179252, 20007, 14860, 129270, 21143, 17796, 144715,\n    60106, 70758, 69842, 34674, 282133, 44014, 16774, 57268, 38528, 24053, 46373, 201667, 28327, 471023, 51889, 102667,\n    21193, 114909, 84132, 69317, 96723, 67969, 16134, 68145, 15058, 28765, 32035, 2524, 101089, 98664, 25045, 76571,\n    14957, 86040, 118506, 262428, 154764, 81573, 39681, 283900, 73287, 127825, 544, 80448, 52347, 38512, 175971, 15180,\n    45467, 33086, 46552, 48894, 81107, 43213, 36672, 54025, 76703, 8053, 7608, 13299, 56619, 20752, 238099, 54164,\n    105133, 1444, 32942, 953, 37564, 8000, 66316, 119463, 106817, 404, 13667, 149108, 128597, 31267, 10269, 49836,\n    106150, 1484, 52330, 76965, 160486, 171648, 38456, 31263, 22424, 37738, 66245, 67467, 143369, 60471, 75610, 20895,\n    115528, 86070, 60854, 40796, 49347, 18989, 15030, 11371, 37578, 15779, 79867, 10187, 86462, 46402, 155626, 93200,\n    40229, 7090, 57547, 108053, 99598, 11088, 47505, 41218, 206017, 2173, 20988, 30219, 22919, 80563, 57566, 42369,\n    93141, 41675, 2407, 182519, 120495, 27154, 16702, 29456, 14349, 7958, 16688, 117177, 140375, 42467, 261919, 74916,\n    153569, 10836, 34742, 49526, 7621, 105997, 12212, 2270, 392377, 7755, 17959, 25086, 232152, 138791, 33847, 13860,\n    35316, 5811, 1344, 71259, 50452, 207539, 92635, 50359, 5821, 33674, 30255, 2086, 2587, 96264, 17543, 42,\n    6029, 9580, 43007, 139248, 82831, 12917, 29607, 25786, 51467, 42137, 85161, 100698, 31561, 88989, 121990, 278500,\n    3602, 109344, 37982, 15279, 116442, 28936, 30880, 87894, 58079, 128661, 126731, 67392, 28051, 146885, 4861, 16216,\n    97344, 42827, 147561, 153948, 22684, 21335, 47685, 1853, 43349, 15185, 59642, 10229, 25520, 187921, 108972, 5579,\n    98037, 24945, 6697, 19193, 63734, 137934, 75056, 89740, 19767, 224268, 56138, 63643, 151661, 39313, 70618, 84031,\n    89723, 84074, 13703, 85626, 35460, 8867, 64845, 3439, 57906, 99776, 63968, 49270, 81130, 34356, 16210, 23547,\n    36446, 34090, 140028, 72439, 2221, 22163, 57058, 363492, 113754, 18913, 95451, 48663, 54464, 54037, 176097, 68425,\n    3023, 34906, 29482, 117389, 341780, 80431, 58330, 16753, 92616, 60907, 94846, 147486, 4498, 48646, 7773, 46801,\n    7778, 18946, 464978, 47558, 33223, 177444, 7328, 15626, 63337, 94700, 11743, 9351, 255024, 39098, 16447, 42647,\n    96230, 39769, 58840, 10068, 63439, 35800, 65843, 58823, 413844, 9156, 51258, 7434, 61791, 85018, 6872, 3692,\n    28096, 7121, 33024, 6009, 75532, 31997, 192535, 9661, 3304, 9547, 14753, 31987, 25314, 55689, 15896, 20430,\n    39472, 31340, 99744, 25398, 115569, 54883, 28719, 205423, 23071, 57855, 64638, 149867, 25671, 82403, 37616, 20668,\n    39989, 77996, 74948, 140555, 175248, 64810, 36515, 46595, 4958, 248773, 24045, 28728, 136673, 168704, 20804, 114833,\n    100325, 27135, 21205, 96151, 153134, 45992, 7093, 13992, 76047, 1980, 19432, 145001, 75159, 87462, 17710, 1013,\n    45556, 34297, 144882, 20648, 26061, 11319, 129567, 108555, 18872, 464580, 33386, 22717, 65948, 167189, 5603, 135042,\n    79542, 8801, 202632, 18114, 91882, 5973, 5239, 67315, 4431, 60916, 47819, 71693, 32597, 32606, 18183, 45072,\n    80329, 76385, 24749, 51305, 40314, 156514, 14693, 130345, 13168, 66214, 18029, 12858, 34801, 27628, 14544, 10823,\n    40522, 40185, 33739, 148694, 23548, 9923, 61012, 28859, 17933, 19442, 34364, 99849, 164107, 141167, 30629, 21054,\n    6744, 36491, 8096, 42474, 41706, 155060, 30650, 10600, 163442, 1143, 96655, 61390, 52359, 7559, 51568, 64256,\n    203854, 4467, 22453, 14504, 436398, 7878, 6980, 8293, 63610, 293747, 16167, 35763, 19627, 147603, 15419, 18032,\n    110744, 51346, 33681, 54571, 40472, 48615, 39073, 21604, 13754, 173027, 92560, 11083, 47299, 63062, 11813, 52007,\n    29883, 9734, 139722, 15953, 1550, 20651, 13616, 49306, 16113, 90089, 92326, 7584, 30712, 72424, 164858, 6831,\n    152871, 55746, 197721, 34167, 196442, 6022, 112107, 55215, 7538, 123381, 4920, 43539, 77165, 8939, 50392, 34192,\n    20225, 79762, 22505, 58667, 40770, 29788, 97180, 82835, 4568, 8579, 13273, 363569, 35898, 49983, 436, 36598,\n    3237, 131691, 62418, 35591, 8101, 4073, 379438, 65218, 76072, 33887, 2968, 27573, 212619, 288680, 68278, 72851,\n    150504, 217896, 6913, 121339, 22017, 35340, 51072, 43616, 75043, 31437, 10833, 81487, 4364, 22968, 41454, 106687,\n    85446, 19863, 109625, 149241, 524, 141850, 214404, 54376, 657, 237023, 9401, 108137, 53800, 32474, 49712, 53334,\n    126876, 27337, 45552, 177696, 8269, 15036, 12097, 42240, 2328, 125374, 119295, 99715, 2500, 19624, 39441, 27220,\n    102691, 60957, 94543, 39101, 18566, 67362, 13975, 78230, 25017, 34017, 239007, 90027, 39351, 41681, 35354, 43822,\n    1043, 916, 58587, 141983, 94818, 38799, 75459, 41114, 67432, 16195, 36606, 59568, 22272, 126769, 31424, 68659,\n    12287, 134302, 257977, 5756, 207285, 95637, 47248, 117689, 19583, 77451, 22373, 12200, 54993, 117118, 34244, 29386,\n    34562, 53819, 71267, 64172, 77665, 49368, 7716, 59301, 25749, 45426, 194789, 17297, 2650, 1766, 32501, 45198,\n    20403, 20984, 6600, 14171, 94604, 19037, 5402, 29896, 9938, 59935, 109708, 88081, 145182, 44844, 39167, 352626,\n    164173, 35374, 45982, 6122, 154, 73419, 220487, 53834, 53601, 17992, 8609, 229321, 5610, 68098, 66815, 71012,\n    95069, 140968, 27396, 8957, 134489, 24656, 86659, 56598, 134852, 17316, 123838, 255436, 6613, 41610, 138033, 81452,\n    32023, 32396, 123687, 63398, 8693, 29712, 30407, 19296, 121188, 3551, 36099, 20032, 111948, 56624, 16547, 27453,\n    35916, 15378, 52039, 56849, 13489, 22214, 73177, 53097, 277349, 2157, 14029, 187886, 10260, 141743, 246460, 91880,\n    50869, 3788, 49486, 133566, 54950, 33120, 129337, 53768, 18333, 9525, 26902, 312251, 10297, 9020, 70759, 16647,\n    112432, 59260, 84609, 9818, 82766, 73569, 468, 46001, 75780, 55028, 52106, 11498, 43645, 108069, 17150, 17753,\n    29417, 16705, 31799, 9606, 289, 122254, 115975, 8620, 6133, 255357, 56908, 14456, 133464, 43554, 79224, 11247,\n    29630, 160, 12756, 25464, 65960, 350428, 62521, 321796, 100359, 67358, 35169, 46172, 113128, 48988, 88868, 31094,\n    33266, 6847, 60887, 98188, 49659, 69117, 92977, 220228, 13947, 80181, 35103, 62170, 97351, 13475, 2440, 199768,\n    19498, 36597, 46971, 25234, 67806, 62881, 84717, 73648, 181966, 10488, 94149, 21550, 26655, 63436, 48375, 14405,\n    165650, 9621, 24439, 28043, 42735, 4490, 29963, 56674, 45373, 1934, 262446, 50855, 67098, 26898, 5261, 52696,\n    40644, 33900, 9440, 180286, 87162, 22940, 19704, 26936, 69769, 10254, 101759, 27406, 12243, 48000, 73926, 113215,\n    54935, 5726, 192787, 4312, 106216, 9366, 11550, 52949, 23457, 212271, 277152, 133895, 108374, 6191, 96477, 29980,\n    218916, 58024, 54696, 40853, 91124, 65894, 91170, 65908, 252552, 6793, 29212, 15389, 44516, 122515, 52617, 35058,\n    9017, 103536, 39510, 49136, 19242, 130652, 662077, 74699, 47024, 31422, 8517, 73351, 24399, 13867, 128360, 4810,\n    4434, 61779, 111983, 61036, 17798, 110240, 59722, 102960, 39688, 10001, 23803, 23039, 176498, 56659, 44814, 134295,\n    17188, 77577, 74466, 226175, 102472, 154333, 63900, 111747, 18062, 41171, 79669, 32773, 408933, 42562, 28931, 30907,\n    107388, 43487, 2946, 240310, 23938, 24354, 319, 184983, 7927, 6488, 1422, 10790, 68809, 68209, 64775, 4361,\n    202, 17123, 59634, 51200, 44391, 18188, 17843, 2619, 74278, 3230, 9540, 47187, 21702, 36274, 56894, 43907,\n    16310, 34790, 16866, 6150, 5561, 13587, 107545, 108873, 126867, 86986, 28640, 33427, 19017, 5762, 80637, 17430,\n    46903, 2047, 131055, 25958, 13558, 5444, 47152, 13900, 44563, 122857, 45348, 70863, 39593, 54332, 38068, 33637,\n    318, 40310, 143467, 18502, 24520, 11377, 62013, 28942, 27246, 28269, 83545, 17999, 59015, 90707, 30065, 15161,\n    34720, 1263, 37008, 2012, 6060, 98575, 92933, 5721, 299, 199555, 24578, 29223, 2985, 743, 115825, 109523,\n    136657, 47454, 26378, 53586, 3733, 174945, 93340, 244456, 5693, 37386, 28782, 89767, 27545, 23573, 18798, 136425,\n    34320, 84778, 20041, 48453, 38215, 7477, 71958, 40621, 8773, 5874, 187927, 105965, 51100, 43533, 18083, 8443,\n    10180, 43597, 2003, 183999, 69689, 12216, 129696, 146188, 62389, 34044, 68410, 12765, 43273, 26949, 266807, 3345,\n    34477, 79197, 5688, 47539, 213110, 21634, 22257, 50092, 32222, 42346, 39530, 63668, 98, 134978, 74022, 5152,\n    59088, 174145, 37220, 9934, 9545, 118937, 5724, 87240, 19875, 15784, 40143, 23263, 87513, 181654, 285152, 37881,\n    263241, 4966, 43934, 10433, 186657, 6470, 74416, 225854, 25908, 142677, 246262, 32280, 6192, 75890, 45546, 143264,\n    135305, 29742, 47013, 77787, 11732, 126658, 8763, 37950, 21806, 57557, 113464, 89465, 108995, 164574, 23894, 22996,\n    23169, 15369, 23117, 17642, 130607, 40503, 36239, 280990, 44666, 9981, 40427, 147487, 26869, 168452, 32886, 32991,\n    46798, 240839, 15111, 70502, 65697, 88548, 44145, 28701, 48767, 31139, 206777, 35659, 181164, 166262, 14554, 171445,\n    31786, 66523, 76607, 17956, 6507, 31279, 90476, 116611, 167918, 6560, 1243, 115324, 80128, 41867, 55897, 187323,\n    37069, 32596, 189444, 145931, 13390, 105530, 65709, 26805, 6999, 55714, 41300, 22915, 68951, 22138, 21120, 22264,\n    10058, 19945, 33635, 56123, 99085, 10032, 5818, 6016, 46649, 57476, 35264, 94413, 112522, 262288, 93686, 83038,\n    14341, 23204, 28807, 66084, 77987, 6101, 126673, 7133, 38126, 5923, 122091, 170240, 97772, 46874, 215746, 43948,\n    41622, 3272, 55596, 8332, 146411, 251315, 13533, 8561, 81521, 115449, 48616, 175175, 2063, 186556, 3036, 134537,\n    75772, 29728, 82360, 22973, 186559, 86348, 89100, 38388, 82297, 45610, 2613, 87082, 9986, 177812, 57884, 23591,\n    47485, 42543, 33582, 44713, 74439, 257444, 252451, 31825, 35631, 38540, 33066, 5147, 13973, 4343, 51830, 70378,\n    22827, 26448, 95560, 36896, 241741, 48067, 203953, 298860, 61620, 20450, 3220, 67272, 6586, 107662, 100160, 108684,\n    6929, 57226, 4762, 7457, 1320, 40404, 77204, 99309, 62750, 208653, 59977, 44000, 74315, 34332, 5819, 172217,\n    64904, 114077, 18147, 84012, 1791, 98456, 90930, 21446, 116669, 103938, 7422, 85140, 59713, 5768, 326211, 16239,\n    75411, 13229, 29398, 10758, 236107, 1539, 112472, 95979, 152154, 151294, 306, 21196, 38146, 10700, 6891, 84282,\n    109646, 56492, 40539, 6589, 119491, 51354, 30685, 140209, 136906, 29622, 73617, 49553, 70525, 51671, 166869, 139616,\n    74395, 37439, 49595, 45678, 11959, 33211, 86560, 52434, 9282, 62690, 112155, 130810, 5243, 108261, 99970, 265613,\n    72551, 80049, 6391, 33365, 90721, 66737, 69872, 87011, 1860, 9032, 112544, 60905, 37371, 89015, 140351, 19076,\n    850, 373531, 2802, 36725, 218795, 72062, 28990, 16550, 24614, 7815, 6187, 26336, 33373, 32162, 42791, 73555,\n    32062, 23386, 10244, 56392, 49442, 27076, 136262, 12412, 14883, 1134, 33675, 97153, 199281, 15608, 100152, 74072,\n    47942, 254301, 36451, 16026, 10687, 65067, 56708, 254030, 30290, 50490, 13864, 57941, 259331, 35588, 23485, 43486,\n    24869, 21620, 92971, 22072, 88645, 1048, 182050, 13343, 32452, 14825, 19509, 3325, 216938, 45740, 99716, 189082,\n    53740, 78245, 25609, 24311, 176777, 47340, 308354, 40669, 66085, 14102, 125339, 9225, 128709, 97207, 1271, 200933,\n    78439, 113451, 88975, 18324, 46521, 11819, 18570, 141756, 72512, 170020, 52754, 63550, 118515, 103073, 93330, 32736,\n    50499, 14722, 31600, 68452, 398867, 29316, 172786, 18417, 104924, 2606, 5670, 84818, 16288, 67106, 59580, 82929,\n    607401, 291, 85829, 359, 15897, 35830, 50696, 65630, 52672, 22115, 356968, 29895, 40837, 231192, 34024, 38957,\n    26722, 406, 23335, 124952, 72068, 68804, 13268, 147101, 164740, 276569, 162596, 66943, 11569, 26654, 66358, 4777,\n    23229, 102127, 5848, 978, 2921, 59666, 5371, 28212, 90108, 42938, 39320, 2499, 4271, 108792, 33510, 125072,\n    71653, 65239, 38250, 66357, 38577, 13964, 86251, 35708, 50755, 36010, 29448, 12209, 3844, 38222, 206337, 100876,\n    67827, 137088, 14167, 252225, 84163, 195270, 1306, 5703, 54198, 779, 46802, 22028, 51124, 86759, 70560, 113164,\n    35685, 162145, 45471, 34561, 422, 2611, 6464, 47486, 19223, 38246, 9191, 18331, 89942, 243642, 212364, 15893,\n    17518, 22617, 6409, 30046, 126182, 59716, 36560, 104428, 18846, 26592, 19458, 50793, 147333, 30826, 1388, 27647,\n    10922, 14495, 33545, 19269, 135828, 39727, 41601, 46931, 233379, 49169, 131130, 182112, 16276, 82381, 118209, 142445,\n    128310, 19672, 28740, 82907, 33436, 3118, 102206, 28723, 24819, 41937, 38854, 5157, 3881, 111491, 1142, 9776,\n    421673, 152241, 29309, 14961, 87854, 6054, 15424, 3796, 82656, 54996, 2108, 55367, 239450, 154525, 9643, 118103,\n    106041, 64601, 68549, 48707, 30266, 25772, 18740, 9462, 229669, 91798, 112152, 191327, 14493, 72828, 8175, 66636,\n    236474, 25817, 87351, 129027, 76653, 20422, 22983, 71240, 27846, 44661, 12399, 46158, 77704, 53101, 35032, 11072,\n    17300, 109294, 33638, 24408, 1895, 11241, 760, 17584, 82479, 125877, 63150, 141075, 34259, 23274, 81698, 15732,\n    43577, 48340, 91584, 14688, 16379, 24481, 150280, 96420, 262050, 48635, 43727, 61819, 56268, 72003, 88178, 17281,\n    79912, 13218, 122519, 125295, 166396, 11811, 2171, 118930, 67746, 17636, 178278, 174656, 95661, 173039, 83845, 79689,\n    17473, 98555, 127696, 203415, 54730, 22925, 232239, 9309, 12136, 175026, 20740, 180188, 10747, 39816, 314017, 266131,\n    10040, 175732, 112550, 220651, 31974, 37393, 888, 23008, 86799, 4303, 64905, 148467, 75337, 251, 3284, 370102,\n    50264, 9835, 5438, 23655, 4481, 29851, 329, 12855, 7162, 64931, 78141, 12804, 42372, 296771, 83547, 18624,\n    34874, 86271, 3360, 48665, 77735, 88767, 11463, 63527, 28889, 22258, 29140, 194315, 113924, 25499, 6406, 31334,\n    1845, 4802, 49184, 43455, 35469, 127594, 92970, 61038, 115005, 38840, 87761, 106838, 8811, 20572, 55637, 11162,\n    96721, 132425, 108925, 2948, 125457, 36356, 3502, 75270, 27622, 127192, 2561, 123095, 49394, 61155, 16897, 110064,\n    9699, 89448, 53356, 19628, 220310, 21622, 83036, 9885, 112214, 6087, 26713, 17901, 161912, 91492, 3440, 68594,\n    9266, 92238, 8087, 6866, 150194, 72175, 80701, 13459, 31836, 43243, 239700, 95846, 44749, 50647, 21945, 230538,\n    120612, 132371, 244604, 5193, 105637, 34661, 41341, 68775, 85393, 1874, 8771, 33718, 49672, 77403, 595452, 99507,\n    6490, 58895, 128742, 7704, 39239, 73217, 43816, 62824, 37804, 199976, 22361, 80005, 87514, 94832, 14089, 4574,\n    139975, 59142, 75523, 100268, 43906, 53442, 15152, 2547, 186002, 17011, 19513, 204282, 3343, 60568, 128318, 119250,\n    4298, 51871, 41336, 71759, 21921, 45074, 98169, 145889, 99427, 11350, 1237, 5520, 28799, 7803, 53702, 21026,\n    136352, 38293, 128690, 12158, 90132, 44600, 10184, 26957, 39459, 126025, 78904, 82999, 59373, 39301, 150198, 120529,\n    153042, 20177, 50089, 14764, 271571, 30530, 123161, 38975, 101562, 22941, 5648, 124654, 109243, 69817, 71675, 49162,\n    106884, 21241, 107795, 30258, 16572, 188262, 141456, 7688, 60718, 8271, 11044, 32440, 104608, 103419, 236109, 93156,\n    43293, 128929, 42107, 67180, 25201, 115254, 185488, 130954, 72813, 167547, 20537, 39969, 38432, 22582, 184022, 1139,\n    27199, 5655, 17767, 97412, 122606, 209377, 27070, 35871, 326617, 188954, 42680, 73512, 80911, 22629, 3011, 95021,\n    315242, 157737, 383, 41821, 41808, 19335, 27950, 15674, 25677, 110950, 35375, 76835, 59108, 57370, 35262, 16569,\n    160415, 37706, 78086, 32041, 49691, 137143, 9782, 172080, 50148, 77917, 6323, 10110, 69172, 17711, 21795, 59511,\n    76184, 135114, 31046, 132319, 59105, 157578, 20549, 80778, 57649, 158421, 65143, 4575, 72235, 21899, 10797, 92745,\n    34035, 106079, 80159, 4508, 78304, 25350, 75457, 46458, 32937, 25623, 47, 8531, 104751, 84953, 8138, 36508,\n    187199, 66310, 115274, 13253, 32461, 38536, 1916, 42007, 187160, 35055, 26325, 84394, 35963, 94216, 45590, 97782\n];\n//# sourceMappingURL=generated-prefix-list-browser.js.map","import { xor as uint8ArrayXor } from 'uint8arrays/xor';\nimport GENERATED_PREFIXES from './generated-prefix-list.js';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { randomBytes } from '@libp2p/crypto';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport length from 'it-length';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { TABLE_REFRESH_INTERVAL, TABLE_REFRESH_QUERY_TIMEOUT } from '../constants.js';\n/**\n * Cannot generate random KadIds longer than this + 1\n */\nconst MAX_COMMON_PREFIX_LENGTH = 15;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nexport class RoutingTableRefresh {\n    constructor(init) {\n        const { peerRouting, routingTable, refreshInterval, refreshQueryTimeout, lan } = init;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table:refresh`);\n        this.peerRouting = peerRouting;\n        this.routingTable = routingTable;\n        this.refreshInterval = refreshInterval ?? TABLE_REFRESH_INTERVAL;\n        this.refreshQueryTimeout = refreshQueryTimeout ?? TABLE_REFRESH_QUERY_TIMEOUT;\n        this.commonPrefixLengthRefreshedAt = [];\n        this.refreshTable = this.refreshTable.bind(this);\n    }\n    async start() {\n        this.log(`refreshing routing table every ${this.refreshInterval}ms`);\n        this.refreshTable(true);\n    }\n    async stop() {\n        if (this.refreshTimeoutId != null) {\n            clearTimeout(this.refreshTimeoutId);\n        }\n    }\n    /**\n     * To speed lookups, we seed the table with random PeerIds. This means\n     * when we are asked to locate a peer on the network, we can find a KadId\n     * that is close to the requested peer ID and query that, then network\n     * peers will tell us who they know who is close to the fake ID\n     */\n    refreshTable(force = false) {\n        this.log('refreshing routing table');\n        const prefixLength = this._maxCommonPrefix();\n        const refreshCpls = this._getTrackedCommonPrefixLengthsForRefresh(prefixLength);\n        this.log(`max common prefix length ${prefixLength}`);\n        this.log(`tracked CPLs [ ${refreshCpls.map(date => date.toISOString()).join(', ')} ]`);\n        /**\n         * If we see a gap at a common prefix length in the Routing table, we ONLY refresh up until\n         * the maximum cpl we have in the Routing Table OR (2 * (Cpl+ 1) with the gap), whichever\n         * is smaller.\n         *\n         * This is to prevent refreshes for Cpls that have no peers in the network but happen to be\n         * before a very high max Cpl for which we do have peers in the network.\n         *\n         * The number of 2 * (Cpl + 1) can be proved and a proof would have been written here if\n         * the programmer had paid more attention in the Math classes at university.\n         *\n         * So, please be patient and a doc explaining it will be published soon.\n         *\n         * https://github.com/libp2p/go-libp2p-kad-dht/commit/2851c88acb0a3f86bcfe3cfd0f4604a03db801d8#diff-ad45f4ba97ffbc4083c2eb87a4420c1157057b233f048030d67c6b551855ccf6R219\n         */\n        Promise.all(refreshCpls.map(async (lastRefresh, index) => {\n            try {\n                await this._refreshCommonPrefixLength(index, lastRefresh, force);\n                if (this._numPeersForCpl(prefixLength) === 0) {\n                    const lastCpl = Math.min(2 * (index + 1), refreshCpls.length - 1);\n                    for (let n = index + 1; n < lastCpl + 1; n++) {\n                        try {\n                            await this._refreshCommonPrefixLength(n, lastRefresh, force);\n                        }\n                        catch (err) {\n                            this.log.error(err);\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n        })).catch(err => {\n            this.log.error(err);\n        }).then(() => {\n            this.refreshTimeoutId = setTimeout(this.refreshTable, this.refreshInterval);\n            if (this.refreshTimeoutId.unref != null) {\n                this.refreshTimeoutId.unref();\n            }\n        }).catch(err => {\n            this.log.error(err);\n        });\n    }\n    async _refreshCommonPrefixLength(cpl, lastRefresh, force) {\n        if (!force && lastRefresh.getTime() > (Date.now() - this.refreshInterval)) {\n            this.log('not running refresh for cpl %s as time since last refresh not above interval', cpl);\n            return;\n        }\n        // gen a key for the query to refresh the cpl\n        const peerId = await this._generateRandomPeerId(cpl);\n        this.log('starting refreshing cpl %s with key %p (routing table size was %s)', cpl, peerId, this.routingTable.size);\n        const controller = new TimeoutController(this.refreshQueryTimeout);\n        try {\n            const peers = await length(this.peerRouting.getClosestPeers(peerId.toBytes(), { signal: controller.signal }));\n            this.log(`found ${peers} peers that were close to imaginary peer %p`, peerId);\n            this.log('finished refreshing cpl %s with key %p (routing table size is now %s)', cpl, peerId, this.routingTable.size);\n        }\n        finally {\n            controller.clear();\n        }\n    }\n    _getTrackedCommonPrefixLengthsForRefresh(maxCommonPrefix) {\n        if (maxCommonPrefix > MAX_COMMON_PREFIX_LENGTH) {\n            maxCommonPrefix = MAX_COMMON_PREFIX_LENGTH;\n        }\n        const dates = [];\n        for (let i = 0; i <= maxCommonPrefix; i++) {\n            // defaults to the zero value if we haven't refreshed it yet.\n            dates[i] = this.commonPrefixLengthRefreshedAt[i] ?? new Date();\n        }\n        return dates;\n    }\n    async _generateRandomPeerId(targetCommonPrefixLength) {\n        if (this.routingTable.kb == null) {\n            throw new Error('Routing table not started');\n        }\n        const randomData = randomBytes(2);\n        const randomUint16 = (randomData[1] << 8) + randomData[0];\n        const key = await this._makePeerId(this.routingTable.kb.localNodeId, randomUint16, targetCommonPrefixLength);\n        return peerIdFromBytes(key);\n    }\n    async _makePeerId(localKadId, randomPrefix, targetCommonPrefixLength) {\n        if (targetCommonPrefixLength > MAX_COMMON_PREFIX_LENGTH) {\n            throw new Error(`Cannot generate peer ID for common prefix length greater than ${MAX_COMMON_PREFIX_LENGTH}`);\n        }\n        const view = new DataView(localKadId.buffer, localKadId.byteOffset, localKadId.byteLength);\n        const localPrefix = view.getUint16(0, false);\n        // For host with ID `L`, an ID `K` belongs to a bucket with ID `B` ONLY IF CommonPrefixLen(L,K) is EXACTLY B.\n        // Hence, to achieve a targetPrefix `T`, we must toggle the (T+1)th bit in L & then copy (T+1) bits from L\n        // to our randomly generated prefix.\n        const toggledLocalPrefix = localPrefix ^ (0x8000 >> targetCommonPrefixLength);\n        // Combine the toggled local prefix and the random bits at the correct offset\n        // such that ONLY the first `targetCommonPrefixLength` bits match the local ID.\n        const mask = 65535 << (16 - (targetCommonPrefixLength + 1));\n        const targetPrefix = (toggledLocalPrefix & mask) | (randomPrefix & ~mask);\n        // Convert to a known peer ID.\n        const keyPrefix = GENERATED_PREFIXES[targetPrefix];\n        const keyBuffer = new ArrayBuffer(34);\n        const keyView = new DataView(keyBuffer, 0, keyBuffer.byteLength);\n        keyView.setUint8(0, sha256.code);\n        keyView.setUint8(1, 32);\n        keyView.setUint32(2, keyPrefix, false);\n        return new Uint8Array(keyView.buffer, keyView.byteOffset, keyView.byteLength);\n    }\n    /**\n     * returns the maximum common prefix length between any peer in the table\n     * and the current peer\n     */\n    _maxCommonPrefix() {\n        // xor our KadId with every KadId in the k-bucket tree,\n        // return the longest id prefix that is the same\n        let prefixLength = 0;\n        for (const length of this._prefixLengths()) {\n            if (length > prefixLength) {\n                prefixLength = length;\n            }\n        }\n        return prefixLength;\n    }\n    /**\n     * Returns the number of peers in the table with a given prefix length\n     */\n    _numPeersForCpl(prefixLength) {\n        let count = 0;\n        for (const length of this._prefixLengths()) {\n            if (length === prefixLength) {\n                count++;\n            }\n        }\n        return count;\n    }\n    /**\n     * Yields the common prefix length of every peer in the table\n     */\n    *_prefixLengths() {\n        if (this.routingTable.kb == null) {\n            return;\n        }\n        for (const { id } of this.routingTable.kb.toIterable()) {\n            const distance = uint8ArrayXor(this.routingTable.kb.localNodeId, id);\n            let leadingZeros = 0;\n            for (const byte of distance) {\n                if (byte === 0) {\n                    leadingZeros++;\n                }\n                else {\n                    break;\n                }\n            }\n            yield leadingZeros;\n        }\n    }\n}\n//# sourceMappingURL=refresh.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message, enumeration } from 'protons-runtime';\nexport var Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.key != null) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if (obj.value != null) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if (obj.author != null) {\n                    w.uint32(26);\n                    w.bytes(obj.author);\n                }\n                if (obj.signature != null) {\n                    w.uint32(34);\n                    w.bytes(obj.signature);\n                }\n                if (obj.timeReceived != null) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.bytes();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        case 3:\n                            obj.author = reader.bytes();\n                            break;\n                        case 4:\n                            obj.signature = reader.bytes();\n                            break;\n                        case 5:\n                            obj.timeReceived = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return encodeMessage(obj, Record.codec());\n    };\n    Record.decode = (buf) => {\n        return decodeMessage(buf, Record.codec());\n    };\n})(Record || (Record = {}));\nexport var Message;\n(function (Message) {\n    let MessageType;\n    (function (MessageType) {\n        MessageType[\"PUT_VALUE\"] = \"PUT_VALUE\";\n        MessageType[\"GET_VALUE\"] = \"GET_VALUE\";\n        MessageType[\"ADD_PROVIDER\"] = \"ADD_PROVIDER\";\n        MessageType[\"GET_PROVIDERS\"] = \"GET_PROVIDERS\";\n        MessageType[\"FIND_NODE\"] = \"FIND_NODE\";\n        MessageType[\"PING\"] = \"PING\";\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let __MessageTypeValues;\n    (function (__MessageTypeValues) {\n        __MessageTypeValues[__MessageTypeValues[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n        __MessageTypeValues[__MessageTypeValues[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n        __MessageTypeValues[__MessageTypeValues[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n        __MessageTypeValues[__MessageTypeValues[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n        __MessageTypeValues[__MessageTypeValues[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n        __MessageTypeValues[__MessageTypeValues[\"PING\"] = 5] = \"PING\";\n    })(__MessageTypeValues || (__MessageTypeValues = {}));\n    (function (MessageType) {\n        MessageType.codec = () => {\n            return enumeration(__MessageTypeValues);\n        };\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let ConnectionType;\n    (function (ConnectionType) {\n        ConnectionType[\"NOT_CONNECTED\"] = \"NOT_CONNECTED\";\n        ConnectionType[\"CONNECTED\"] = \"CONNECTED\";\n        ConnectionType[\"CAN_CONNECT\"] = \"CAN_CONNECT\";\n        ConnectionType[\"CANNOT_CONNECT\"] = \"CANNOT_CONNECT\";\n    })(ConnectionType = Message.ConnectionType || (Message.ConnectionType = {}));\n    let __ConnectionTypeValues;\n    (function (__ConnectionTypeValues) {\n        __ConnectionTypeValues[__ConnectionTypeValues[\"NOT_CONNECTED\"] = 0] = \"NOT_CONNECTED\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CONNECTED\"] = 1] = \"CONNECTED\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CAN_CONNECT\"] = 2] = \"CAN_CONNECT\";\n        __ConnectionTypeValues[__ConnectionTypeValues[\"CANNOT_CONNECT\"] = 3] = \"CANNOT_CONNECT\";\n    })(__ConnectionTypeValues || (__ConnectionTypeValues = {}));\n    (function (ConnectionType) {\n        ConnectionType.codec = () => {\n            return enumeration(__ConnectionTypeValues);\n        };\n    })(ConnectionType = Message.ConnectionType || (Message.ConnectionType = {}));\n    let Peer;\n    (function (Peer) {\n        let _codec;\n        Peer.codec = () => {\n            if (_codec == null) {\n                _codec = message((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.id != null) {\n                        w.uint32(10);\n                        w.bytes(obj.id);\n                    }\n                    if (obj.addrs != null) {\n                        for (const value of obj.addrs) {\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (obj.connection != null) {\n                        w.uint32(24);\n                        Message.ConnectionType.codec().encode(obj.connection, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        addrs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.id = reader.bytes();\n                                break;\n                            case 2:\n                                obj.addrs.push(reader.bytes());\n                                break;\n                            case 3:\n                                obj.connection = Message.ConnectionType.codec().decode(reader);\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer.encode = (obj) => {\n            return encodeMessage(obj, Peer.codec());\n        };\n        Peer.decode = (buf) => {\n            return decodeMessage(buf, Peer.codec());\n        };\n    })(Peer = Message.Peer || (Message.Peer = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    Message.MessageType.codec().encode(obj.type, w);\n                }\n                if (obj.clusterLevelRaw != null) {\n                    w.uint32(80);\n                    w.int32(obj.clusterLevelRaw);\n                }\n                if (obj.key != null) {\n                    w.uint32(18);\n                    w.bytes(obj.key);\n                }\n                if (obj.record != null) {\n                    w.uint32(26);\n                    w.bytes(obj.record);\n                }\n                if (obj.closerPeers != null) {\n                    for (const value of obj.closerPeers) {\n                        w.uint32(66);\n                        Message.Peer.codec().encode(value, w);\n                    }\n                }\n                if (obj.providerPeers != null) {\n                    for (const value of obj.providerPeers) {\n                        w.uint32(74);\n                        Message.Peer.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    closerPeers: [],\n                    providerPeers: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = Message.MessageType.codec().decode(reader);\n                            break;\n                        case 10:\n                            obj.clusterLevelRaw = reader.int32();\n                            break;\n                        case 2:\n                            obj.key = reader.bytes();\n                            break;\n                        case 3:\n                            obj.record = reader.bytes();\n                            break;\n                        case 8:\n                            obj.closerPeers.push(Message.Peer.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 9:\n                            obj.providerPeers.push(Message.Peer.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return encodeMessage(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return decodeMessage(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=dht.js.map","import { peerIdFromBytes } from '@libp2p/peer-id';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { Message as PBMessage } from './dht.js';\nexport const MESSAGE_TYPE = PBMessage.MessageType;\nexport const CONNECTION_TYPE = PBMessage.ConnectionType;\nexport const MESSAGE_TYPE_LOOKUP = Object.keys(MESSAGE_TYPE);\n/**\n * Represents a single DHT control message.\n */\nexport class Message {\n    constructor(type, key, level) {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error('Key must be a Uint8Array');\n        }\n        this.type = type;\n        this.key = key;\n        this.clusterLevelRaw = level;\n        this.closerPeers = [];\n        this.providerPeers = [];\n        this.record = undefined;\n    }\n    /**\n     * @type {number}\n     */\n    get clusterLevel() {\n        const level = this.clusterLevelRaw - 1;\n        if (level < 0) {\n            return 0;\n        }\n        return level;\n    }\n    set clusterLevel(level) {\n        this.clusterLevelRaw = level;\n    }\n    /**\n     * Encode into protobuf\n     */\n    serialize() {\n        return PBMessage.encode({\n            key: this.key,\n            type: this.type,\n            clusterLevelRaw: this.clusterLevelRaw,\n            closerPeers: this.closerPeers.map(toPbPeer),\n            providerPeers: this.providerPeers.map(toPbPeer),\n            record: this.record == null ? undefined : this.record.serialize().subarray()\n        });\n    }\n    /**\n     * Decode from protobuf\n     */\n    static deserialize(raw) {\n        const dec = PBMessage.decode(raw);\n        const msg = new Message(dec.type ?? PBMessage.MessageType.PUT_VALUE, dec.key ?? Uint8Array.from([]), dec.clusterLevelRaw ?? 0);\n        msg.closerPeers = dec.closerPeers.map(fromPbPeer);\n        msg.providerPeers = dec.providerPeers.map(fromPbPeer);\n        if (dec.record?.length != null) {\n            msg.record = Libp2pRecord.deserialize(dec.record);\n        }\n        return msg;\n    }\n}\nfunction toPbPeer(peer) {\n    const output = {\n        id: peer.id.toBytes(),\n        addrs: (peer.multiaddrs ?? []).map((m) => m.bytes),\n        connection: CONNECTION_TYPE.CONNECTED\n    };\n    return output;\n}\nfunction fromPbPeer(peer) {\n    if (peer.id == null) {\n        throw new Error('Invalid peer in message');\n    }\n    return {\n        id: peerIdFromBytes(peer.id),\n        multiaddrs: (peer.addrs ?? []).map((a) => multiaddr(a)),\n        protocols: []\n    };\n}\n//# sourceMappingURL=index.js.map","import { MESSAGE_TYPE_LOOKUP } from '../message/index.js';\nexport function sendingQueryEvent(fields) {\n    return {\n        ...fields,\n        name: 'SENDING_QUERY',\n        type: 0,\n        messageName: fields.type,\n        messageType: MESSAGE_TYPE_LOOKUP.indexOf(fields.type.toString())\n    };\n}\nexport function peerResponseEvent(fields) {\n    return {\n        ...fields,\n        name: 'PEER_RESPONSE',\n        type: 1,\n        messageName: fields.messageType,\n        closer: (fields.closer != null) ? fields.closer : [],\n        providers: (fields.providers != null) ? fields.providers : []\n    };\n}\nexport function finalPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'FINAL_PEER',\n        type: 2\n    };\n}\nexport function queryErrorEvent(fields) {\n    return {\n        ...fields,\n        name: 'QUERY_ERROR',\n        type: 3\n    };\n}\nexport function providerEvent(fields) {\n    return {\n        ...fields,\n        name: 'PROVIDER',\n        type: 4\n    };\n}\nexport function valueEvent(fields) {\n    return {\n        ...fields,\n        name: 'VALUE',\n        type: 5\n    };\n}\nexport function addingPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'ADDING_PEER',\n        type: 6\n    };\n}\nexport function dialingPeerEvent(fields) {\n    return {\n        ...fields,\n        name: 'DIALING_PEER',\n        type: 7\n    };\n}\n//# sourceMappingURL=events.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport drain from 'it-drain';\nimport first from 'it-first';\nimport { Message } from './message/index.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { dialingPeerEvent, sendingQueryEvent, peerResponseEvent, queryErrorEvent } from './query/events.js';\nimport { logger } from '@libp2p/logger';\nimport { abortableDuplex } from 'abortable-iterator';\n/**\n * Handle network operations for the dht\n */\nexport class Network extends EventEmitter {\n    /**\n     * Create a new network\n     */\n    constructor(components, init) {\n        super();\n        const { protocol, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:network`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n    }\n    /**\n     * Is the network online?\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Send a request and record RTT for latency measurements\n     */\n    async *sendRequest(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield dialingPeerEvent({ peer: to });\n        yield sendingQueryEvent({ to, type: msg.type });\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            const response = await this._writeReadMessage(stream, msg.serialize(), options);\n            yield peerResponseEvent({\n                from: to,\n                messageType: response.type,\n                closer: response.closerPeers,\n                providers: response.providerPeers,\n                record: response.record\n            });\n        }\n        catch (err) {\n            yield queryErrorEvent({ from: to, error: err });\n        }\n        finally {\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Sends a message without expecting an answer\n     */\n    async *sendMessage(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield dialingPeerEvent({ peer: to });\n        yield sendingQueryEvent({ to, type: msg.type });\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            await this._writeMessage(stream, msg.serialize(), options);\n            yield peerResponseEvent({ from: to, messageType: msg.type });\n        }\n        catch (err) {\n            yield queryErrorEvent({ from: to, error: err });\n        }\n        finally {\n            if (stream != null) {\n                stream.close();\n            }\n        }\n    }\n    /**\n     * Write a message to the given stream\n     */\n    async _writeMessage(stream, msg, options) {\n        if (options.signal != null) {\n            stream = abortableDuplex(stream, options.signal);\n        }\n        await pipe([msg], lp.encode(), stream, drain);\n    }\n    /**\n     * Write a message and read its response.\n     * If no response is received after the specified timeout\n     * this will error out.\n     */\n    async _writeReadMessage(stream, msg, options) {\n        if (options.signal != null) {\n            stream = abortableDuplex(stream, options.signal);\n        }\n        const res = await pipe([msg], lp.encode(), stream, lp.decode(), async (source) => {\n            const buf = await first(source);\n            if (buf != null) {\n                return buf;\n            }\n            throw new CodeError('No message received', 'ERR_NO_MESSAGE_RECEIVED');\n        });\n        const message = Message.deserialize(res);\n        // tell any listeners about new peers we've seen\n        message.closerPeers.forEach(peerData => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        message.providerPeers.forEach(peerData => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        return message;\n    }\n}\n//# sourceMappingURL=network.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n */\nexport async function verifyRecord(validators, record) {\n    const key = record.key;\n    const keyString = uint8ArrayToString(key);\n    const parts = keyString.split('/');\n    if (parts.length < 3) {\n        // No validator available\n        return;\n    }\n    const validator = validators[parts[1].toString()];\n    if (validator == null) {\n        const errMsg = 'Invalid record keytype';\n        throw new CodeError(errMsg, 'ERR_INVALID_RECORD_KEY_TYPE');\n    }\n    await validator(key, record.value);\n}\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n    if (!(key instanceof Uint8Array)) {\n        throw new CodeError('\"key\" must be a Uint8Array', 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n    }\n    if (key.byteLength < 5) {\n        throw new CodeError('invalid public key record', 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n    }\n    const prefix = uint8ArrayToString(key.subarray(0, 4));\n    if (prefix !== '/pk/') {\n        throw new CodeError('key was not prefixed with /pk/', 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n    }\n    const keyhash = key.slice(4);\n    const publicKeyHash = await sha256.digest(publicKey);\n    if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n        throw new CodeError('public key does not match passed in key', 'ERR_INVALID_RECORD_HASH_MISMATCH');\n    }\n};\nexport const validators = {\n    pk: validatePublicKeyRecord\n};\n//# sourceMappingURL=validators.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * Select the best record out of the given records\n */\nexport function bestRecord(selectors, k, records) {\n    if (records.length === 0) {\n        const errMsg = 'No records given';\n        throw new CodeError(errMsg, 'ERR_NO_RECORDS_RECEIVED');\n    }\n    const kStr = uint8ArrayToString(k);\n    const parts = kStr.split('/');\n    if (parts.length < 3) {\n        const errMsg = 'Record key does not have a selector function';\n        throw new CodeError(errMsg, 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n    }\n    const selector = selectors[parts[1].toString()];\n    if (selector == null) {\n        const errMsg = `Unrecognized key prefix: ${parts[1]}`;\n        throw new CodeError(errMsg, 'ERR_UNRECOGNIZED_KEY_PREFIX');\n    }\n    if (records.length === 1) {\n        return 0;\n    }\n    return selector(k, records);\n}\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publickKey(k, records) {\n    return 0;\n}\nexport const selectors = {\n    pk: publickKey\n};\n//# sourceMappingURL=selectors.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { bestRecord } from '@libp2p/record/selectors';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { valueEvent, queryErrorEvent } from '../query/events.js';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { pipe } from 'it-pipe';\nimport { ALPHA } from '../constants.js';\nimport { createPutRecord, convertBuffer, bufferToRecordKey } from '../utils.js';\nimport { logger } from '@libp2p/logger';\nexport class ContentFetching {\n    constructor(components, init) {\n        const { validators, selectors, peerRouting, queryManager, routingTable, network, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-fetching`);\n        this.validators = validators;\n        this.selectors = selectors;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.routingTable = routingTable;\n        this.network = network;\n    }\n    async putLocal(key, rec) {\n        const dsKey = bufferToRecordKey(key);\n        await this.components.datastore.put(dsKey, rec);\n    }\n    /**\n     * Attempt to retrieve the value for the given key from\n     * the local datastore\n     */\n    async getLocal(key) {\n        this.log('getLocal %b', key);\n        const dsKey = bufferToRecordKey(key);\n        this.log('fetching record for key %k', dsKey);\n        const raw = await this.components.datastore.get(dsKey);\n        this.log('found %k in local datastore', dsKey);\n        const rec = Libp2pRecord.deserialize(raw);\n        await verifyRecord(this.validators, rec);\n        return rec;\n    }\n    /**\n     * Send the best record found to any peers that have an out of date record\n     */\n    async *sendCorrectionRecord(key, vals, best, options = {}) {\n        this.log('sendCorrection for %b', key);\n        const fixupRec = createPutRecord(key, best);\n        for (const { value, from } of vals) {\n            // no need to do anything\n            if (uint8ArrayEquals(value, best)) {\n                this.log('record was ok');\n                continue;\n            }\n            // correct ourself\n            if (this.components.peerId.equals(from)) {\n                try {\n                    const dsKey = bufferToRecordKey(key);\n                    this.log(`Storing corrected record for key ${dsKey.toString()}`);\n                    await this.components.datastore.put(dsKey, fixupRec.subarray());\n                }\n                catch (err) {\n                    this.log.error('Failed error correcting self', err);\n                }\n                continue;\n            }\n            // send correction\n            let sentCorrection = false;\n            const request = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n            request.record = Libp2pRecord.deserialize(fixupRec);\n            for await (const event of this.network.sendRequest(from, request, options)) {\n                if (event.name === 'PEER_RESPONSE' && (event.record != null) && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n                    sentCorrection = true;\n                }\n                yield event;\n            }\n            if (!sentCorrection) {\n                yield queryErrorEvent({ from, error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') });\n            }\n            this.log.error('Failed error correcting entry');\n        }\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        this.log('put key %b value %b', key, value);\n        // create record in the dht format\n        const record = createPutRecord(key, value);\n        // store the record locally\n        const dsKey = bufferToRecordKey(key);\n        this.log(`storing record for key ${dsKey.toString()}`);\n        await this.components.datastore.put(dsKey, record.subarray());\n        // put record to the closest peers\n        yield* pipe(this.peerRouting.getClosestPeers(key, { signal: options.signal }), (source) => map(source, (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                const msg = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n                msg.record = Libp2pRecord.deserialize(record);\n                this.log('send put to %p', event.peer.id);\n                for await (const putEvent of this.network.sendRequest(event.peer.id, msg, options)) {\n                    events.push(putEvent);\n                    if (putEvent.name !== 'PEER_RESPONSE') {\n                        continue;\n                    }\n                    if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n                        events.push(queryErrorEvent({ from: event.peer.id, error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') }));\n                    }\n                }\n                return events;\n            };\n        }), (source) => parallel(source, {\n            ordered: false,\n            concurrency: ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n    }\n    /**\n     * Get the value to the given key\n     */\n    async *get(key, options = {}) {\n        this.log('get %b', key);\n        const vals = [];\n        for await (const event of this.getMany(key, options)) {\n            if (event.name === 'VALUE') {\n                vals.push(event);\n            }\n            yield event;\n        }\n        if (vals.length === 0) {\n            return;\n        }\n        const records = vals.map((v) => v.value);\n        let i = 0;\n        try {\n            i = bestRecord(this.selectors, key, records);\n        }\n        catch (err) {\n            // Assume the first record if no selector available\n            if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {\n                throw err;\n            }\n        }\n        const best = records[i];\n        this.log('GetValue %b %b', key, best);\n        if (best == null) {\n            throw new CodeError('best value was not found', 'ERR_NOT_FOUND');\n        }\n        yield* this.sendCorrectionRecord(key, vals, best, options);\n        yield vals[i];\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n    async *getMany(key, options = {}) {\n        this.log('getMany values for %b', key);\n        try {\n            const localRec = await this.getLocal(key);\n            yield valueEvent({\n                value: localRec.value,\n                from: this.components.peerId\n            });\n        }\n        catch (err) {\n            this.log('error getting local value for %b', key, err);\n        }\n        const id = await convertBuffer(key);\n        const rtp = this.routingTable.closestPeers(id);\n        this.log('found %d peers in routing table', rtp.length);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const getValueQuery = async function* ({ peer, signal }) {\n            for await (const event of self.peerRouting.getValueOrPeers(peer, key, { signal })) {\n                yield event;\n                if (event.name === 'PEER_RESPONSE' && (event.record != null)) {\n                    yield valueEvent({ from: peer, value: event.record.value });\n                }\n            }\n        };\n        // we have peers, lets send the actual query to them\n        yield* this.queryManager.run(key, rtp, getValueQuery, options);\n    }\n}\n//# sourceMappingURL=index.js.map","import { Message, MESSAGE_TYPE } from '../message/index.js';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { convertBuffer } from '../utils.js';\nimport { ALPHA } from '../constants.js';\nimport { pipe } from 'it-pipe';\nimport { queryErrorEvent, peerResponseEvent, providerEvent } from '../query/events.js';\nimport { logger } from '@libp2p/logger';\nexport class ContentRouting {\n    constructor(components, init) {\n        const { network, peerRouting, queryManager, routingTable, providers, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-routing`);\n        this.network = network;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.routingTable = routingTable;\n        this.providers = providers;\n    }\n    /**\n     * Announce to the network that we can provide the value for a given key and\n     * are contactable on the given multiaddrs\n     */\n    async *provide(key, multiaddrs, options = {}) {\n        this.log('provide %s', key);\n        // Add peer as provider\n        await this.providers.addProvider(key, this.components.peerId);\n        const msg = new Message(MESSAGE_TYPE.ADD_PROVIDER, key.multihash.bytes, 0);\n        msg.providerPeers = [{\n                id: this.components.peerId,\n                multiaddrs,\n                protocols: []\n            }];\n        let sent = 0;\n        const maybeNotifyPeer = (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                this.log('putProvider %s to %p', key, event.peer.id);\n                try {\n                    this.log('sending provider record for %s to %p', key, event.peer.id);\n                    for await (const sendEvent of this.network.sendMessage(event.peer.id, msg, options)) {\n                        if (sendEvent.name === 'PEER_RESPONSE') {\n                            this.log('sent provider record for %s to %p', key, event.peer.id);\n                            sent++;\n                        }\n                        events.push(sendEvent);\n                    }\n                }\n                catch (err) {\n                    this.log.error('error sending provide record to peer %p', event.peer.id, err);\n                    events.push(queryErrorEvent({ from: event.peer.id, error: err }));\n                }\n                return events;\n            };\n        };\n        // Notify closest peers\n        yield* pipe(this.peerRouting.getClosestPeers(key.multihash.bytes, options), (source) => map(source, (event) => maybeNotifyPeer(event)), (source) => parallel(source, {\n            ordered: false,\n            concurrency: ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n        this.log('sent provider records to %d peers', sent);\n    }\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     */\n    async *findProviders(key, options) {\n        const toFind = this.routingTable.kBucketSize;\n        const target = key.multihash.bytes;\n        const id = await convertBuffer(target);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        this.log('findProviders %c', key);\n        const provs = await this.providers.getProviders(key);\n        // yield values if we have some, also slice because maybe we got lucky and already have too many?\n        if (provs.length > 0) {\n            const providers = [];\n            for (const peerId of provs.slice(0, toFind)) {\n                providers.push({\n                    id: peerId,\n                    multiaddrs: ((await this.components.peerStore.addressBook.get(peerId)) ?? []).map(address => address.multiaddr),\n                    protocols: []\n                });\n            }\n            yield peerResponseEvent({ from: this.components.peerId, messageType: MESSAGE_TYPE.GET_PROVIDERS, providers });\n            yield providerEvent({ from: this.components.peerId, providers });\n        }\n        // All done\n        if (provs.length >= toFind) {\n            return;\n        }\n        /**\n         * The query function to use on this particular disjoint path\n         */\n        const findProvidersQuery = async function* ({ peer, signal }) {\n            const request = new Message(MESSAGE_TYPE.GET_PROVIDERS, target, 0);\n            yield* self.network.sendRequest(peer, request, { signal });\n        };\n        const providers = new Set(provs.map(p => p.toString()));\n        for await (const event of this.queryManager.run(target, this.routingTable.closestPeers(id), findProvidersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                this.log('Found %d provider entries for %c and %d closer peers', event.providers.length, key, event.closer.length);\n                const newProviders = [];\n                for (const peer of event.providers) {\n                    if (providers.has(peer.id.toString())) {\n                        continue;\n                    }\n                    providers.add(peer.id.toString());\n                    newProviders.push(peer);\n                }\n                if (newProviders.length > 0) {\n                    yield providerEvent({ from: event.from, providers: newProviders });\n                }\n                if (providers.size === toFind) {\n                    return;\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import * as utils from '../utils.js';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor';\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport class PeerDistanceList {\n    constructor(originDhtKey, capacity) {\n        this.originDhtKey = originDhtKey;\n        this.capacity = capacity;\n        this.peerDistances = [];\n    }\n    /**\n     * The length of the list\n     */\n    get length() {\n        return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n    get peers() {\n        return this.peerDistances.map(pd => pd.peerId);\n    }\n    /**\n     * Add a peerId to the list.\n     */\n    async add(peerId) {\n        if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n            return;\n        }\n        const dhtKey = await utils.convertPeerId(peerId);\n        const el = {\n            peerId,\n            distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n        };\n        this.peerDistances.push(el);\n        this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));\n        this.peerDistances = this.peerDistances.slice(0, this.capacity);\n    }\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     */\n    async anyCloser(peerIds) {\n        if (peerIds.length === 0) {\n            return false;\n        }\n        if (this.length === 0) {\n            return true;\n        }\n        const dhtKeys = await Promise.all(peerIds.map(utils.convertPeerId));\n        const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n        for (const dhtKey of dhtKeys) {\n            const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n            if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=peer-distance-list.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport * as utils from '../utils.js';\nimport { queryErrorEvent, finalPeerEvent, valueEvent } from '../query/events.js';\nimport { PeerDistanceList } from '../peer-list/peer-distance-list.js';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { logger } from '@libp2p/logger';\nimport { keys } from '@libp2p/crypto';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nexport class PeerRouting {\n    constructor(components, init) {\n        const { routingTable, network, validators, queryManager, lan } = init;\n        this.components = components;\n        this.routingTable = routingTable;\n        this.network = network;\n        this.validators = validators;\n        this.queryManager = queryManager;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:peer-routing`);\n    }\n    /**\n     * Look if we are connected to a peer with the given id.\n     * Returns its id and addresses, if found, otherwise `undefined`.\n     */\n    async findPeerLocal(peer) {\n        let peerData;\n        const p = await this.routingTable.find(peer);\n        if (p != null) {\n            this.log('findPeerLocal found %p in routing table', peer);\n            try {\n                peerData = await this.components.peerStore.get(p);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData == null) {\n            try {\n                peerData = await this.components.peerStore.get(peer);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData != null) {\n            this.log('findPeerLocal found %p in peer store', peer);\n            return {\n                id: peerData.id,\n                multiaddrs: peerData.addresses.map((address) => address.multiaddr),\n                protocols: []\n            };\n        }\n        return undefined;\n    }\n    /**\n     * Get a value via rpc call for the given parameters\n     */\n    async *_getValueSingle(peer, key, options = {}) {\n        const msg = new Message(MESSAGE_TYPE.GET_VALUE, key, 0);\n        yield* this.network.sendRequest(peer, msg, options);\n    }\n    /**\n     * Get the public key directly from a node\n     */\n    async *getPublicKeyFromNode(peer, options = {}) {\n        const pkKey = utils.keyForPublicKey(peer);\n        for await (const event of this._getValueSingle(peer, pkKey, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE' && event.record != null) {\n                const recPeer = await peerIdFromKeys(keys.marshalPublicKey({ bytes: event.record.value }));\n                // compare hashes of the pub key\n                if (!recPeer.equals(peer)) {\n                    throw new CodeError('public key does not match id', 'ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID');\n                }\n                if (recPeer.publicKey == null) {\n                    throw new CodeError('public key missing', 'ERR_PUBLIC_KEY_MISSING');\n                }\n                yield valueEvent({ from: peer, value: recPeer.publicKey });\n            }\n        }\n        throw new CodeError(`Node not responding with its public key: ${peer.toString()}`, 'ERR_INVALID_RECORD');\n    }\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        this.log('findPeer %p', id);\n        // Try to find locally\n        const pi = await this.findPeerLocal(id);\n        // already got it\n        if (pi != null) {\n            this.log('found local');\n            yield finalPeerEvent({\n                from: this.components.peerId,\n                peer: pi\n            });\n            return;\n        }\n        const key = await utils.convertPeerId(id);\n        const peers = this.routingTable.closestPeers(key);\n        // sanity check\n        const match = peers.find((p) => p.equals(id));\n        if (match != null) {\n            try {\n                const peer = await this.components.peerStore.get(id);\n                this.log('found in peerStore');\n                yield finalPeerEvent({\n                    from: this.components.peerId,\n                    peer: {\n                        id: peer.id,\n                        multiaddrs: peer.addresses.map((address) => address.multiaddr),\n                        protocols: []\n                    }\n                });\n                return;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const findPeerQuery = async function* ({ peer, signal }) {\n            const request = new Message(MESSAGE_TYPE.FIND_NODE, id.toBytes(), 0);\n            for await (const event of self.network.sendRequest(peer, request, { signal })) {\n                yield event;\n                if (event.name === 'PEER_RESPONSE') {\n                    const match = event.closer.find((p) => p.id.equals(id));\n                    // found the peer\n                    if (match != null) {\n                        yield finalPeerEvent({ from: event.from, peer: match });\n                    }\n                }\n            }\n        };\n        let foundPeer = false;\n        for await (const event of this.queryManager.run(id.toBytes(), peers, findPeerQuery, options)) {\n            if (event.name === 'FINAL_PEER') {\n                foundPeer = true;\n            }\n            yield event;\n        }\n        if (!foundPeer) {\n            yield queryErrorEvent({ from: this.components.peerId, error: new CodeError('Not found', 'ERR_NOT_FOUND') });\n        }\n    }\n    /**\n     * Kademlia 'node lookup' operation on a key, which could be a the\n     * bytes from a multihash or a peer ID\n     */\n    async *getClosestPeers(key, options = {}) {\n        this.log('getClosestPeers to %b', key);\n        const id = await utils.convertBuffer(key);\n        const tablePeers = this.routingTable.closestPeers(id);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const peers = new PeerDistanceList(id, this.routingTable.kBucketSize);\n        await Promise.all(tablePeers.map(async (peer) => { await peers.add(peer); }));\n        const getCloserPeersQuery = async function* ({ peer, signal }) {\n            self.log('closerPeersSingle %s from %p', uint8ArrayToString(key, 'base32'), peer);\n            const request = new Message(MESSAGE_TYPE.FIND_NODE, key, 0);\n            yield* self.network.sendRequest(peer, request, { signal });\n        };\n        for await (const event of this.queryManager.run(key, tablePeers, getCloserPeersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                await Promise.all(event.closer.map(async (peerData) => { await peers.add(peerData.id); }));\n            }\n        }\n        this.log('found %d peers close to %b', peers.length, key);\n        for (const peer of peers.peers) {\n            yield finalPeerEvent({\n                from: this.components.peerId,\n                peer: {\n                    id: peer,\n                    multiaddrs: (await (this.components.peerStore.addressBook.get(peer)) ?? []).map(addr => addr.multiaddr),\n                    protocols: []\n                }\n            });\n        }\n    }\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     */\n    async *getValueOrPeers(peer, key, options = {}) {\n        for await (const event of this._getValueSingle(peer, key, options)) {\n            if (event.name === 'PEER_RESPONSE') {\n                if (event.record != null) {\n                    // We have a record\n                    try {\n                        await this._verifyRecordOnline(event.record);\n                    }\n                    catch (err) {\n                        const errMsg = 'invalid record received, discarded';\n                        this.log(errMsg);\n                        yield queryErrorEvent({ from: event.from, error: new CodeError(errMsg, 'ERR_INVALID_RECORD') });\n                        continue;\n                    }\n                }\n            }\n            yield event;\n        }\n    }\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Throws an error if the record is invalid.\n     */\n    async _verifyRecordOnline(record) {\n        if (record.timeReceived == null) {\n            throw new CodeError('invalid record received', 'ERR_INVALID_RECORD');\n        }\n        await verifyRecord(this.validators, new Libp2pRecord(record.key, record.value, record.timeReceived));\n    }\n    /**\n     * Get the nearest peers to the given query, but if closer\n     * than self\n     */\n    async getCloserPeersOffline(key, closerThan) {\n        const id = await utils.convertBuffer(key);\n        const ids = this.routingTable.closestPeers(id);\n        const output = [];\n        for (const peerId of ids) {\n            if (peerId.equals(closerThan)) {\n                continue;\n            }\n            try {\n                const addresses = await this.components.peerStore.addressBook.get(peerId);\n                const protocols = await this.components.peerStore.protoBook.get(peerId);\n                output.push({\n                    id: peerId,\n                    multiaddrs: addresses.map((address) => address.multiaddr),\n                    protocols\n                });\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (output.length > 0) {\n            this.log('getCloserPeersOffline found %d peer(s) closer to %b than %p', output.length, key, closerThan);\n        }\n        else {\n            this.log('getCloserPeersOffline could not find peer closer to %b than %p', key, closerThan);\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=index.js.map","import cache from 'hashlru';\nimport varint from 'varint';\nimport { Key } from 'interface-datastore/key';\nimport Queue from 'p-queue';\nimport { PROVIDERS_CLEANUP_INTERVAL, PROVIDERS_VALIDITY, PROVIDERS_LRU_CACHE_SIZE, PROVIDER_KEY_PREFIX } from './constants.js';\nimport { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('libp2p:kad-dht:providers');\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\nexport class Providers {\n    constructor(components, init = {}) {\n        const { cacheSize, cleanupInterval, provideValidity } = init;\n        this.components = components;\n        this.cleanupInterval = cleanupInterval ?? PROVIDERS_CLEANUP_INTERVAL;\n        this.provideValidity = provideValidity ?? PROVIDERS_VALIDITY;\n        this.cache = cache(cacheSize ?? PROVIDERS_LRU_CACHE_SIZE);\n        this.syncQueue = new Queue({ concurrency: 1 });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start the provider cleanup service\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        this.cleaner = setInterval(() => {\n            this._cleanup().catch(err => {\n                log.error(err);\n            });\n        }, this.cleanupInterval);\n    }\n    /**\n     * Release any resources.\n     */\n    async stop() {\n        this.started = false;\n        if (this.cleaner != null) {\n            clearInterval(this.cleaner);\n            this.cleaner = undefined;\n        }\n    }\n    /**\n     * Check all providers if they are still valid, and if not delete them\n     */\n    async _cleanup() {\n        await this.syncQueue.add(async () => {\n            const start = Date.now();\n            let count = 0;\n            let deleteCount = 0;\n            const deleted = new Map();\n            const batch = this.components.datastore.batch();\n            // Get all provider entries from the datastore\n            const query = this.components.datastore.query({ prefix: PROVIDER_KEY_PREFIX });\n            for await (const entry of query) {\n                try {\n                    // Add a delete to the batch for each expired entry\n                    const { cid, peerId } = parseProviderKey(entry.key);\n                    const time = readTime(entry.value).getTime();\n                    const now = Date.now();\n                    const delta = now - time;\n                    const expired = delta > this.provideValidity;\n                    log('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');\n                    if (expired) {\n                        deleteCount++;\n                        batch.delete(entry.key);\n                        const peers = deleted.get(cid) ?? new Set();\n                        peers.add(peerId);\n                        deleted.set(cid, peers);\n                    }\n                    count++;\n                }\n                catch (err) {\n                    log.error(err.message);\n                }\n            }\n            // Commit the deletes to the datastore\n            if (deleted.size > 0) {\n                log('deleting %d / %d entries', deleteCount, count);\n                await batch.commit();\n            }\n            else {\n                log('nothing to delete');\n            }\n            // Clear expired entries from the cache\n            for (const [cid, peers] of deleted) {\n                const key = makeProviderKey(cid);\n                const provs = this.cache.get(key);\n                if (provs != null) {\n                    for (const peerId of peers) {\n                        provs.delete(peerId);\n                    }\n                    if (provs.size === 0) {\n                        this.cache.remove(key);\n                    }\n                    else {\n                        this.cache.set(key, provs);\n                    }\n                }\n            }\n            log('Cleanup successful (%dms)', Date.now() - start);\n        });\n    }\n    /**\n     * Get the currently known provider peer ids for a given CID\n     */\n    async _getProvidersMap(cid) {\n        const cacheKey = makeProviderKey(cid);\n        let provs = this.cache.get(cacheKey);\n        if (provs == null) {\n            provs = await loadProviders(this.components.datastore, cid);\n            this.cache.set(cacheKey, provs);\n        }\n        return provs;\n    }\n    /**\n     * Add a new provider for the given CID\n     */\n    async addProvider(cid, provider) {\n        await this.syncQueue.add(async () => {\n            log('%p provides %s', provider, cid);\n            const provs = await this._getProvidersMap(cid);\n            log('loaded %s provs', provs.size);\n            const now = new Date();\n            provs.set(provider.toString(), now);\n            const dsKey = makeProviderKey(cid);\n            this.cache.set(dsKey, provs);\n            await writeProviderEntry(this.components.datastore, cid, provider, now);\n        });\n    }\n    /**\n     * Get a list of providers for the given CID\n     */\n    async getProviders(cid) {\n        return await this.syncQueue.add(async () => {\n            log('get providers for %s', cid);\n            const provs = await this._getProvidersMap(cid);\n            return [...provs.keys()].map(peerIdStr => {\n                return peerIdFromString(peerIdStr);\n            });\n        }, {\n            // no timeout is specified for this queue so it will not\n            // throw, but this is required to get the right return\n            // type since p-queue@7.3.4\n            throwOnTimeout: true\n        });\n    }\n}\n/**\n * Encode the given key its matching datastore key\n */\nfunction makeProviderKey(cid) {\n    const cidStr = typeof cid === 'string' ? cid : uint8ArrayToString(cid.multihash.bytes, 'base32');\n    return `${PROVIDER_KEY_PREFIX}/${cidStr}`;\n}\n/**\n * Write a provider into the given store\n */\nasync function writeProviderEntry(store, cid, peer, time) {\n    const dsKey = [\n        makeProviderKey(cid),\n        '/',\n        peer.toString()\n    ].join('');\n    const key = new Key(dsKey);\n    const buffer = Uint8Array.from(varint.encode(time.getTime()));\n    await store.put(key, buffer);\n}\n/**\n * Parse the CID and provider peer id from the key\n */\nfunction parseProviderKey(key) {\n    const parts = key.toString().split('/');\n    if (parts.length !== 5) {\n        throw new Error(`incorrectly formatted provider entry key in datastore: ${key.toString()}`);\n    }\n    return {\n        cid: parts[3],\n        peerId: parts[4]\n    };\n}\n/**\n * Load providers for the given CID from the store\n */\nasync function loadProviders(store, cid) {\n    const providers = new Map();\n    const query = store.query({ prefix: makeProviderKey(cid) });\n    for await (const entry of query) {\n        const { peerId } = parseProviderKey(entry.key);\n        providers.set(peerId, readTime(entry.value));\n    }\n    return providers;\n}\nfunction readTime(buf) {\n    return new Date(varint.decode(buf));\n}\n//# sourceMappingURL=providers.js.map","import Queue from 'p-queue';\nimport { xor } from 'uint8arrays/xor';\nimport { toString } from 'uint8arrays/to-string';\nimport defer from 'p-defer';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { convertPeerId, convertBuffer } from '../utils.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { queryErrorEvent } from './events.js';\nconst MAX_XOR = BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\n/**\n * Walks a path through the DHT, calling the passed query function for\n * every peer encountered that we have not seen before\n */\nexport async function* queryPath(options) {\n    const { key, startingPeer, ourPeerId, signal, query, alpha, pathIndex, numPaths, cleanUp, queryFuncTimeout, log, peersSeen } = options;\n    // Only ALPHA node/value lookups are allowed at any given time for each process\n    // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1\n    const queue = new Queue({\n        concurrency: alpha\n    });\n    // perform lookups on kadId, not the actual value\n    const kadId = await convertBuffer(key);\n    /**\n     * Adds the passed peer to the query queue if it's not us and no\n     * other path has passed through this peer\n     */\n    function queryPeer(peer, peerKadId) {\n        if (peer == null) {\n            return;\n        }\n        peersSeen.add(peer);\n        const peerXor = BigInt('0x' + toString(xor(peerKadId, kadId), 'base16'));\n        queue.add(async () => {\n            let timeout;\n            const signals = [signal];\n            if (queryFuncTimeout != null) {\n                timeout = new TimeoutController(queryFuncTimeout);\n                signals.push(timeout.signal);\n            }\n            const compoundSignal = anySignal(signals);\n            try {\n                for await (const event of query({\n                    key,\n                    peer,\n                    signal: compoundSignal,\n                    pathIndex,\n                    numPaths\n                })) {\n                    if (compoundSignal.aborted) {\n                        return;\n                    }\n                    // if there are closer peers and the query has not completed, continue the query\n                    if (event.name === 'PEER_RESPONSE') {\n                        for (const closerPeer of event.closer) {\n                            if (peersSeen.has(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('already seen %p in query', closerPeer.id);\n                                continue;\n                            }\n                            if (ourPeerId.equals(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('not querying ourselves');\n                                continue;\n                            }\n                            const closerPeerKadId = await convertPeerId(closerPeer.id);\n                            const closerPeerXor = BigInt('0x' + toString(xor(closerPeerKadId, kadId), 'base16'));\n                            // only continue query if closer peer is actually closer\n                            if (closerPeerXor > peerXor) { // eslint-disable-line max-depth\n                                log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer);\n                                continue;\n                            }\n                            log('querying closer peer %p', closerPeer.id);\n                            queryPeer(closerPeer.id, closerPeerKadId);\n                        }\n                    }\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('completed', event);\n                }\n                timeout?.clear();\n            }\n            catch (err) {\n                if (signal.aborted) {\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('error', err);\n                }\n                else {\n                    // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n                    queue.emit('completed', queryErrorEvent({\n                        from: peer,\n                        error: err\n                    }));\n                }\n            }\n            finally {\n                timeout?.clear();\n            }\n        }, {\n            // use xor value as the queue priority - closer peers should execute first\n            // subtract it from MAX_XOR because higher priority values execute sooner\n            // @ts-expect-error this is supposed to be a Number but it's ok to use BigInts\n            // as long as all priorities are BigInts since we won't mix BigInts and Number\n            // values in arithmetic operations\n            priority: MAX_XOR - peerXor\n        }).catch(err => {\n            log.error(err);\n        });\n    }\n    // begin the query with the starting peer\n    queryPeer(startingPeer, await convertPeerId(startingPeer));\n    // yield results as they come in\n    yield* toGenerator(queue, signal, cleanUp, log);\n}\nasync function* toGenerator(queue, signal, cleanUp, log) {\n    let deferred = defer();\n    let running = true;\n    const results = [];\n    const cleanup = () => {\n        if (!running) {\n            return;\n        }\n        log('clean up queue, results %d, queue size %d, pending tasks %d', results.length, queue.size, queue.pending);\n        running = false;\n        queue.clear();\n        results.splice(0, results.length);\n    };\n    queue.on('completed', result => {\n        results.push(result);\n        deferred.resolve();\n    });\n    queue.on('error', err => {\n        log('queue error', err);\n        cleanup();\n        deferred.reject(err);\n    });\n    queue.on('idle', () => {\n        log('queue idle');\n        running = false;\n        deferred.resolve();\n    });\n    // clear the queue and throw if the query is aborted\n    signal.addEventListener('abort', () => {\n        log('abort queue');\n        const wasRunning = running;\n        cleanup();\n        if (wasRunning) {\n            deferred.reject(new CodeError('Query aborted', 'ERR_QUERY_ABORTED'));\n        }\n    });\n    // the user broke out of the loop early, ensure we resolve the deferred result\n    // promise and clear the queue of any remaining jobs\n    cleanUp.addEventListener('cleanup', () => {\n        cleanup();\n        deferred.resolve();\n    });\n    while (running) { // eslint-disable-line no-unmodified-loop-condition\n        await deferred.promise;\n        deferred = defer();\n        // yield all available results\n        while (results.length > 0) {\n            const result = results.shift();\n            if (result != null) {\n                yield result;\n            }\n        }\n    }\n    // yield any remaining results\n    yield* results;\n}\n//# sourceMappingURL=query-path.js.map","import { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { ALPHA, K, DEFAULT_QUERY_TIMEOUT } from '../constants.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { queryPath } from './query-path.js';\nimport merge from 'it-merge';\nimport { setMaxListeners } from 'events';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { PeerSet } from '@libp2p/peer-collections';\n/**\n * Keeps track of all running queries\n */\nexport class QueryManager {\n    constructor(components, init) {\n        const { lan = false, disjointPaths = K, alpha = ALPHA } = init;\n        this.components = components;\n        this.disjointPaths = disjointPaths ?? K;\n        this.controllers = new Set();\n        this.running = false;\n        this.alpha = alpha ?? ALPHA;\n        this.lan = lan;\n        this.queries = 0;\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Starts the query manager\n     */\n    async start() {\n        this.running = true;\n        if (this.components.metrics != null && this.metrics == null) {\n            this.metrics = {\n                runningQueries: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_running_queries`),\n                queryTime: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_query_time_seconds`)\n            };\n        }\n    }\n    /**\n     * Stops all queries\n     */\n    async stop() {\n        this.running = false;\n        for (const controller of this.controllers) {\n            controller.abort();\n        }\n        this.controllers.clear();\n    }\n    async *run(key, peers, queryFunc, options = {}) {\n        if (!this.running) {\n            throw new Error('QueryManager not started');\n        }\n        const stopQueryTimer = this.metrics?.queryTime.timer();\n        let timeoutController;\n        if (options.signal == null) {\n            // don't let queries run forever\n            timeoutController = new TimeoutController(DEFAULT_QUERY_TIMEOUT);\n            options.signal = timeoutController.signal;\n            // this signal will get listened to for network requests, etc\n            // so make sure we don't make a lot of noise in the logs\n            try {\n                if (setMaxListeners != null) {\n                    setMaxListeners(Infinity, timeoutController.signal);\n                }\n            }\n            catch { } // fails on node < 15.4\n        }\n        // allow us to stop queries on shut down\n        const abortController = new AbortController();\n        this.controllers.add(abortController);\n        const signals = [abortController.signal];\n        if (options.signal != null) {\n            signals.push(options.signal);\n        }\n        const signal = anySignal(signals);\n        // this signal will get listened to for every invocation of queryFunc\n        // so make sure we don't make a lot of noise in the logs\n        try {\n            if (setMaxListeners != null) {\n                setMaxListeners(Infinity, signal);\n            }\n        }\n        catch { } // fails on node < 15.4\n        const log = logger(`libp2p:kad-dht:${this.lan ? 'lan' : 'wan'}:query:` + uint8ArrayToString(key, 'base58btc'));\n        // query a subset of peers up to `kBucketSize / 2` in length\n        const peersToQuery = peers.slice(0, Math.min(this.disjointPaths, peers.length));\n        const startTime = Date.now();\n        const cleanUp = new EventEmitter();\n        try {\n            log('query:start');\n            this.queries++;\n            this.metrics?.runningQueries.update(this.queries);\n            if (peers.length === 0) {\n                log.error('Running query with no peers');\n                return;\n            }\n            // make sure we don't get trapped in a loop\n            const peersSeen = new PeerSet();\n            // Create query paths from the starting peers\n            const paths = peersToQuery.map((peer, index) => {\n                return queryPath({\n                    key,\n                    startingPeer: peer,\n                    ourPeerId: this.components.peerId,\n                    signal,\n                    query: queryFunc,\n                    pathIndex: index,\n                    numPaths: peersToQuery.length,\n                    alpha: this.alpha,\n                    cleanUp,\n                    queryFuncTimeout: options.queryFuncTimeout,\n                    log,\n                    peersSeen\n                });\n            });\n            // Execute the query along each disjoint path and yield their results as they become available\n            for await (const event of merge(...paths)) {\n                yield event;\n                if (event.name === 'QUERY_ERROR') {\n                    log('error', event.error);\n                }\n            }\n        }\n        catch (err) {\n            if (!this.running && err.code === 'ERR_QUERY_ABORTED') {\n                // ignore query aborted errors that were thrown during query manager shutdown\n            }\n            else {\n                throw err;\n            }\n        }\n        finally {\n            this.controllers.delete(abortController);\n            if (timeoutController != null) {\n                timeoutController.clear();\n            }\n            this.queries--;\n            this.metrics?.runningQueries.update(this.queries);\n            if (stopQueryTimer != null) {\n                stopQueryTimer();\n            }\n            cleanUp.dispatchEvent(new CustomEvent('cleanup'));\n            log('query:done in %dms', Date.now() - startTime);\n        }\n    }\n}\n//# sourceMappingURL=manager.js.map","import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:add-provider');\nexport class AddProviderHandler {\n    constructor(init) {\n        const { providers } = init;\n        this.providers = providers;\n    }\n    async handle(peerId, msg) {\n        log('start');\n        if (msg.key == null || msg.key.length === 0) {\n            throw new CodeError('Missing key', 'ERR_MISSING_KEY');\n        }\n        let cid;\n        try {\n            // this is actually just the multihash, not the whole CID\n            cid = CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        if (msg.providerPeers == null || msg.providerPeers.length === 0) {\n            log.error('no providers found in message');\n        }\n        await Promise.all(msg.providerPeers.map(async (pi) => {\n            // Ignore providers not from the originator\n            if (!pi.id.equals(peerId)) {\n                log('invalid provider peer %p from %p', pi.id, peerId);\n                return;\n            }\n            if (pi.multiaddrs.length < 1) {\n                log('no valid addresses for provider %p. Ignore', peerId);\n                return;\n            }\n            log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map((m) => m.toString()));\n            await this.providers.addProvider(cid, pi.id);\n        }));\n        return undefined;\n    }\n}\n//# sourceMappingURL=add-provider.js.map","import { Message } from '../../message/index.js';\nimport { logger } from '@libp2p/logger';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:kad-dht:rpc:handlers:find-node');\nexport class FindNodeHandler {\n    constructor(components, init) {\n        const { peerRouting, lan } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n        this.lan = Boolean(lan);\n    }\n    /**\n     * Process `FindNode` DHT messages\n     */\n    async handle(peerId, msg) {\n        log('incoming request from %p for peers closer to %b', peerId, msg.key);\n        let closer = [];\n        if (uint8ArrayEquals(this.components.peerId.toBytes(), msg.key)) {\n            closer = [{\n                    id: this.components.peerId,\n                    multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code)),\n                    protocols: []\n                }];\n        }\n        else {\n            closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId);\n        }\n        closer = closer\n            .map(this.lan ? removePublicAddresses : removePrivateAddresses)\n            .filter(({ multiaddrs }) => multiaddrs.length);\n        const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n        if (closer.length > 0) {\n            response.closerPeers = closer;\n        }\n        else {\n            log('could not find any peers closer to %b than %p', msg.key, peerId);\n        }\n        return response;\n    }\n}\n//# sourceMappingURL=find-node.js.map","import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Message } from '../../message/index.js';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-providers');\nexport class GetProvidersHandler {\n    constructor(components, init) {\n        const { peerRouting, providers, lan } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n        this.providers = providers;\n        this.lan = Boolean(lan);\n    }\n    async handle(peerId, msg) {\n        let cid;\n        try {\n            cid = CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        log('%p asking for providers for %s', peerId, cid);\n        const [peers, closer] = await Promise.all([\n            this.providers.getProviders(cid),\n            this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n        ]);\n        const providerPeers = await this._getPeers(peers);\n        const closerPeers = await this._getPeers(closer.map(({ id }) => id));\n        const response = new Message(msg.type, msg.key, msg.clusterLevel);\n        if (providerPeers.length > 0) {\n            response.providerPeers = providerPeers;\n        }\n        if (closerPeers.length > 0) {\n            response.closerPeers = closerPeers;\n        }\n        log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n        return response;\n    }\n    async _getAddresses(peerId) {\n        const addrs = await this.components.peerStore.addressBook.get(peerId);\n        return addrs.map(address => address.multiaddr);\n    }\n    async _getPeers(peerIds) {\n        const output = [];\n        const addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses;\n        for (const peerId of peerIds) {\n            const peer = addrFilter({\n                id: peerId,\n                multiaddrs: await this._getAddresses(peerId),\n                protocols: []\n            });\n            if (peer.multiaddrs.length > 0) {\n                output.push(peer);\n            }\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=get-providers.js.map","import { Libp2pRecord } from '@libp2p/record';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Message, MESSAGE_TYPE } from '../../message/index.js';\nimport { MAX_RECORD_AGE } from '../../constants.js';\nimport { bufferToRecordKey, isPublicKeyKey, fromPublicKeyKey } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-value');\nexport class GetValueHandler {\n    constructor(components, init) {\n        const { peerRouting } = init;\n        this.components = components;\n        this.peerRouting = peerRouting;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        log('%p asked for key %b', peerId, key);\n        if (key == null || key.length === 0) {\n            throw new CodeError('Invalid key', 'ERR_INVALID_KEY');\n        }\n        const response = new Message(MESSAGE_TYPE.GET_VALUE, key, msg.clusterLevel);\n        if (isPublicKeyKey(key)) {\n            log('is public key');\n            const idFromKey = fromPublicKeyKey(key);\n            let pubKey;\n            try {\n                const key = await this.components.peerStore.keyBook.get(idFromKey);\n                if (key == null) {\n                    throw new CodeError('No public key found in key book', 'ERR_NOT_FOUND');\n                }\n                pubKey = key;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n            if (pubKey != null) {\n                log('returning found public key');\n                response.record = new Libp2pRecord(key, pubKey, new Date());\n                return response;\n            }\n        }\n        const [record, closer] = await Promise.all([\n            this._checkLocalDatastore(key),\n            this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n        ]);\n        if (record != null) {\n            log('had record for %b in local datastore', key);\n            response.record = record;\n        }\n        if (closer.length > 0) {\n            log('had %s closer peers in routing table', closer.length);\n            response.closerPeers = closer;\n        }\n        return response;\n    }\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record if it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     */\n    async _checkLocalDatastore(key) {\n        log('checkLocalDatastore looking for %b', key);\n        const dsKey = bufferToRecordKey(key);\n        // Fetch value from ds\n        let rawRecord;\n        try {\n            rawRecord = await this.components.datastore.get(dsKey);\n        }\n        catch (err) {\n            if (err.code === 'ERR_NOT_FOUND') {\n                return undefined;\n            }\n            throw err;\n        }\n        // Create record from the returned bytes\n        const record = Libp2pRecord.deserialize(rawRecord);\n        if (record == null) {\n            throw new CodeError('Invalid record', 'ERR_INVALID_RECORD');\n        }\n        // Check validity: compare time received with max record age\n        if (record.timeReceived == null ||\n            Date.now() - record.timeReceived.getTime() > MAX_RECORD_AGE) {\n            // If record is bad delete it and return\n            await this.components.datastore.delete(dsKey);\n            return undefined;\n        }\n        // Record is valid\n        return record;\n    }\n}\n//# sourceMappingURL=get-value.js.map","import { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:ping');\nexport class PingHandler {\n    async handle(peerId, msg) {\n        log('ping from %p', peerId);\n        return msg;\n    }\n}\n//# sourceMappingURL=ping.js.map","import { bufferToRecordKey } from '../../utils.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { logger } from '@libp2p/logger';\nexport class PutValueHandler {\n    constructor(components, init) {\n        const { validators } = init;\n        this.components = components;\n        this.log = logger('libp2p:kad-dht:rpc:handlers:put-value');\n        this.validators = validators;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        this.log('%p asked us to store value for key %b', peerId, key);\n        const record = msg.record;\n        if (record == null) {\n            const errMsg = `Empty record from: ${peerId.toString()}`;\n            this.log.error(errMsg);\n            throw new CodeError(errMsg, 'ERR_EMPTY_RECORD');\n        }\n        try {\n            await verifyRecord(this.validators, record);\n            record.timeReceived = new Date();\n            const recordKey = bufferToRecordKey(record.key);\n            await this.components.datastore.put(recordKey, record.serialize().subarray());\n            this.log('put record for %b into datastore under key %k', key, recordKey);\n        }\n        catch (err) {\n            this.log('did not put record for key %b into datastore %o', key, err);\n        }\n        return msg;\n    }\n}\n//# sourceMappingURL=put-value.js.map","import { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport { logger } from '@libp2p/logger';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { AddProviderHandler } from './handlers/add-provider.js';\nimport { FindNodeHandler } from './handlers/find-node.js';\nimport { GetProvidersHandler } from './handlers/get-providers.js';\nimport { GetValueHandler } from './handlers/get-value.js';\nimport { PingHandler } from './handlers/ping.js';\nimport { PutValueHandler } from './handlers/put-value.js';\nexport class RPC {\n    constructor(components, init) {\n        const { providers, peerRouting, validators, lan } = init;\n        this.log = logger('libp2p:kad-dht:rpc');\n        this.routingTable = init.routingTable;\n        this.handlers = {\n            [MESSAGE_TYPE.GET_VALUE]: new GetValueHandler(components, { peerRouting }),\n            [MESSAGE_TYPE.PUT_VALUE]: new PutValueHandler(components, { validators }),\n            [MESSAGE_TYPE.FIND_NODE]: new FindNodeHandler(components, { peerRouting, lan }),\n            [MESSAGE_TYPE.ADD_PROVIDER]: new AddProviderHandler({ providers }),\n            [MESSAGE_TYPE.GET_PROVIDERS]: new GetProvidersHandler(components, { peerRouting, providers, lan }),\n            [MESSAGE_TYPE.PING]: new PingHandler()\n        };\n    }\n    /**\n     * Process incoming DHT messages\n     */\n    async handleMessage(peerId, msg) {\n        try {\n            await this.routingTable.add(peerId);\n        }\n        catch (err) {\n            this.log.error('Failed to update the kbucket store', err);\n        }\n        // get handler & execute it\n        const handler = this.handlers[msg.type];\n        if (handler == null) {\n            this.log.error(`no handler found for message type: ${msg.type}`);\n            return;\n        }\n        return await handler.handle(peerId, msg);\n    }\n    /**\n     * Handle incoming streams on the dht protocol\n     */\n    onIncomingStream(data) {\n        Promise.resolve().then(async () => {\n            const { stream, connection } = data;\n            const peerId = connection.remotePeer;\n            try {\n                await this.routingTable.add(peerId);\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n            const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            await pipe(stream, lp.decode(), async function* (source) {\n                for await (const msg of source) {\n                    // handle the message\n                    const desMessage = Message.deserialize(msg);\n                    self.log('incoming %s from %p', desMessage.type, peerId);\n                    const res = await self.handleMessage(peerId, desMessage);\n                    // Not all handlers will return a response\n                    if (res != null) {\n                        yield res.serialize();\n                    }\n                }\n            }, lp.encode(), stream);\n        })\n            .catch(err => {\n            this.log.error(err);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","import { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends EventEmitter {\n    constructor(components, init) {\n        super();\n        const { protocol, lan } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n        // register protocol with topology\n        const topology = createTopology({\n            onConnect: (peerId) => {\n                this.log('observed peer %p with protocol %s', peerId, this.protocol);\n                this.dispatchEvent(new CustomEvent('peer', {\n                    detail: peerId\n                }));\n            }\n        });\n        this.registrarId = await this.components.registrar.register(this.protocol, topology);\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n        // unregister protocol and handlers\n        if (this.registrarId != null) {\n            this.components.registrar.unregister(this.registrarId);\n            this.registrarId = undefined;\n        }\n    }\n}\n//# sourceMappingURL=topology-listener.js.map","import { setMaxListeners } from 'events';\nimport take from 'it-take';\nimport length from 'it-length';\nimport { QUERY_SELF_INTERVAL, QUERY_SELF_TIMEOUT, K } from './constants.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { logger } from '@libp2p/logger';\nimport { pipe } from 'it-pipe';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class QuerySelf {\n    constructor(components, init) {\n        const { peerRouting, lan, count, interval, queryTimeout } = init;\n        this.components = components;\n        this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:query-self`);\n        this.running = false;\n        this.peerRouting = peerRouting;\n        this.count = count ?? K;\n        this.interval = interval ?? QUERY_SELF_INTERVAL;\n        this.queryTimeout = queryTimeout ?? QUERY_SELF_TIMEOUT;\n    }\n    isStarted() {\n        return this.running;\n    }\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n        this._querySelf();\n    }\n    async stop() {\n        this.running = false;\n        if (this.timeoutId != null) {\n            clearTimeout(this.timeoutId);\n        }\n        if (this.controller != null) {\n            this.controller.abort();\n        }\n    }\n    _querySelf() {\n        Promise.resolve().then(async () => {\n            const timeoutController = new TimeoutController(this.queryTimeout);\n            try {\n                this.controller = new AbortController();\n                const signal = anySignal([this.controller.signal, timeoutController.signal]);\n                // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged\n                try {\n                    if (setMaxListeners != null) {\n                        setMaxListeners(Infinity, signal);\n                    }\n                }\n                catch { } // fails on node < 15.4\n                const found = await pipe(this.peerRouting.getClosestPeers(this.components.peerId.toBytes(), {\n                    signal\n                }), (source) => take(source, this.count), async (source) => await length(source));\n                this.log('query ran successfully - found %d peers', found);\n            }\n            catch (err) {\n                this.log('query error', err);\n            }\n            finally {\n                this.timeoutId = setTimeout(this._querySelf.bind(this), this.interval);\n                timeoutController.clear();\n            }\n        }).catch(err => {\n            this.log('query error', err);\n        });\n    }\n}\n//# sourceMappingURL=query-self.js.map","import { RoutingTable } from './routing-table/index.js';\nimport { RoutingTableRefresh } from './routing-table/refresh.js';\nimport { Network } from './network.js';\nimport { ContentFetching } from './content-fetching/index.js';\nimport { ContentRouting } from './content-routing/index.js';\nimport { PeerRouting } from './peer-routing/index.js';\nimport { Providers } from './providers.js';\nimport { QueryManager } from './query/manager.js';\nimport { RPC } from './rpc/index.js';\nimport { TopologyListener } from './topology-listener.js';\nimport { QuerySelf } from './query-self.js';\nimport { removePrivateAddresses, removePublicAddresses } from './utils.js';\nimport { logger } from '@libp2p/logger';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { validators as recordValidators } from '@libp2p/record/validators';\nimport { selectors as recordSelectors } from '@libp2p/record/selectors';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nimport { PROTOCOL_DHT, PROTOCOL_PREFIX, LAN_PREFIX } from './constants.js';\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class KadDHT extends EventEmitter {\n    /**\n     * Create a new KadDHT\n     */\n    constructor(components, init) {\n        super();\n        const { kBucketSize, clientMode, validators, selectors, querySelfInterval, lan, protocolPrefix, pingTimeout, pingConcurrency, maxInboundStreams, maxOutboundStreams, providers: providersInit } = init;\n        this.running = false;\n        this.components = components;\n        this.lan = Boolean(lan);\n        this.log = logger(`libp2p:kad-dht:${lan === true ? 'lan' : 'wan'}`);\n        this.protocol = `${protocolPrefix ?? PROTOCOL_PREFIX}${lan === true ? LAN_PREFIX : ''}${PROTOCOL_DHT}`;\n        this.kBucketSize = kBucketSize ?? 20;\n        this.clientMode = clientMode ?? true;\n        this.maxInboundStreams = maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n        this.maxOutboundStreams = maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n        this.routingTable = new RoutingTable(components, {\n            kBucketSize,\n            lan: this.lan,\n            pingTimeout,\n            pingConcurrency,\n            protocol: this.protocol\n        });\n        this.providers = new Providers(components, providersInit ?? {});\n        this.validators = {\n            ...recordValidators,\n            ...validators\n        };\n        this.selectors = {\n            ...recordSelectors,\n            ...selectors\n        };\n        this.network = new Network(components, {\n            protocol: this.protocol,\n            lan: this.lan\n        });\n        this.queryManager = new QueryManager(components, {\n            // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n            disjointPaths: Math.ceil(this.kBucketSize / 2),\n            lan\n        });\n        // DHT components\n        this.peerRouting = new PeerRouting(components, {\n            routingTable: this.routingTable,\n            network: this.network,\n            validators: this.validators,\n            queryManager: this.queryManager,\n            lan: this.lan\n        });\n        this.contentFetching = new ContentFetching(components, {\n            validators: this.validators,\n            selectors: this.selectors,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            routingTable: this.routingTable,\n            network: this.network,\n            lan: this.lan\n        });\n        this.contentRouting = new ContentRouting(components, {\n            network: this.network,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            routingTable: this.routingTable,\n            providers: this.providers,\n            lan: this.lan\n        });\n        this.routingTableRefresh = new RoutingTableRefresh({\n            peerRouting: this.peerRouting,\n            routingTable: this.routingTable,\n            lan: this.lan\n        });\n        this.rpc = new RPC(components, {\n            routingTable: this.routingTable,\n            providers: this.providers,\n            peerRouting: this.peerRouting,\n            validators: this.validators,\n            lan: this.lan\n        });\n        this.topologyListener = new TopologyListener(components, {\n            protocol: this.protocol,\n            lan: this.lan\n        });\n        this.querySelf = new QuerySelf(components, {\n            peerRouting: this.peerRouting,\n            interval: querySelfInterval,\n            lan: this.lan\n        });\n        // handle peers being discovered during processing of DHT messages\n        this.network.addEventListener('peer', (evt) => {\n            const peerData = evt.detail;\n            this.onPeerConnect(peerData).catch(err => {\n                this.log.error('could not add %p to routing table', peerData.id, err);\n            });\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        // handle peers being discovered via other peer discovery mechanisms\n        this.topologyListener.addEventListener('peer', (evt) => {\n            const peerId = evt.detail;\n            Promise.resolve().then(async () => {\n                const multiaddrs = await this.components.peerStore.addressBook.get(peerId);\n                const peerData = {\n                    id: peerId,\n                    multiaddrs: multiaddrs.map(addr => addr.multiaddr),\n                    protocols: []\n                };\n                await this.onPeerConnect(peerData);\n            }).catch(err => {\n                this.log.error('could not add %p to routing table', peerId, err);\n            });\n        });\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/kad-dht';\n    }\n    async onPeerConnect(peerData) {\n        this.log('peer %p connected with protocols %s', peerData.id, peerData.protocols);\n        if (this.lan) {\n            peerData = removePublicAddresses(peerData);\n        }\n        else {\n            peerData = removePrivateAddresses(peerData);\n        }\n        if (peerData.multiaddrs.length === 0) {\n            this.log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this.lan ? 'private' : 'public', peerData.multiaddrs.map(addr => addr.toString()));\n            return;\n        }\n        try {\n            await this.routingTable.add(peerData.id);\n        }\n        catch (err) {\n            this.log.error('could not add %p to routing table', peerData.id, err);\n        }\n    }\n    /**\n     * Is this DHT running.\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async getMode() {\n        return this.clientMode ? 'client' : 'server';\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async setMode(mode) {\n        await this.components.registrar.unhandle(this.protocol);\n        if (mode === 'client') {\n            this.log('enabling client mode');\n            this.clientMode = true;\n        }\n        else {\n            this.log('enabling server mode');\n            this.clientMode = false;\n            await this.components.registrar.handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n                maxInboundStreams: this.maxInboundStreams,\n                maxOutboundStreams: this.maxOutboundStreams\n            });\n        }\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n    async start() {\n        this.running = true;\n        // Only respond to queries when not in client mode\n        await this.setMode(this.clientMode ? 'client' : 'server');\n        await Promise.all([\n            this.providers.start(),\n            this.queryManager.start(),\n            this.network.start(),\n            this.routingTable.start(),\n            this.topologyListener.start(),\n            this.querySelf.start()\n        ]);\n        await this.routingTableRefresh.start();\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n    async stop() {\n        this.running = false;\n        await Promise.all([\n            this.providers.stop(),\n            this.queryManager.stop(),\n            this.network.stop(),\n            this.routingTable.stop(),\n            this.routingTableRefresh.stop(),\n            this.topologyListener.stop(),\n            this.querySelf.stop()\n        ]);\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        yield* this.contentFetching.put(key, value, options);\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n    async *get(key, options = {}) {\n        yield* this.contentFetching.get(key, options);\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n    async *provide(key, options = {}) {\n        yield* this.contentRouting.provide(key, this.components.addressManager.getAddresses(), options);\n    }\n    /**\n     * Search the dht for providers of the given CID\n     */\n    async *findProviders(key, options = {}) {\n        yield* this.contentRouting.findProviders(key, options);\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        yield* this.peerRouting.findPeer(id, options);\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n    async *getClosestPeers(key, options = {}) {\n        yield* this.peerRouting.getClosestPeers(key, options);\n    }\n    async refreshRoutingTable() {\n        this.routingTableRefresh.refreshTable(true);\n    }\n}\n//# sourceMappingURL=kad-dht.js.map","import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport merge from 'it-merge';\nimport { queryErrorEvent } from './query/events.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nconst log = logger('libp2p:kad-dht');\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class DualKadDHT extends EventEmitter {\n    constructor(components, wan, lan) {\n        super();\n        this.components = components;\n        this.wan = wan;\n        this.lan = lan;\n        // handle peers being discovered during processing of DHT messages\n        this.wan.addEventListener('peer', (evt) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: evt.detail\n            }));\n        });\n        this.lan.addEventListener('peer', (evt) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: evt.detail\n            }));\n        });\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/dual-kad-dht';\n    }\n    /**\n     * Is this DHT running.\n     */\n    isStarted() {\n        return this.wan.isStarted() && this.lan.isStarted();\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async getMode() {\n        return await this.wan.getMode();\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async setMode(mode) {\n        await this.wan.setMode(mode);\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n    async start() {\n        await Promise.all([\n            this.lan.start(),\n            this.wan.start()\n        ]);\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n    async stop() {\n        await Promise.all([\n            this.lan.stop(),\n            this.wan.stop()\n        ]);\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        for await (const event of merge(this.lan.put(key, value, options), this.wan.put(key, value, options))) {\n            yield event;\n        }\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n    async *get(key, options = {}) {\n        let queriedPeers = false;\n        let foundValue = false;\n        for await (const event of merge(this.lan.get(key, options), this.wan.get(key, options))) {\n            yield event;\n            if (event.name === 'DIALING_PEER') {\n                queriedPeers = true;\n            }\n            if (event.name === 'VALUE') {\n                queriedPeers = true;\n                if (event.value != null) {\n                    foundValue = true;\n                }\n            }\n            if (event.name === 'SENDING_QUERY') {\n                queriedPeers = true;\n            }\n        }\n        if (!queriedPeers) {\n            throw new CodeError('No peers found in routing table!', 'ERR_NO_PEERS_IN_ROUTING_TABLE');\n        }\n        if (!foundValue) {\n            yield queryErrorEvent({\n                from: this.components.peerId,\n                error: new CodeError('Not found', 'ERR_NOT_FOUND')\n            });\n        }\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n    async *provide(key, options = {}) {\n        let sent = 0;\n        let success = 0;\n        const errors = [];\n        const dhts = [this.lan];\n        // only run provide on the wan if we are in server mode\n        if ((await this.wan.getMode()) === 'server') {\n            dhts.push(this.wan);\n        }\n        for await (const event of merge(...dhts.map(dht => dht.provide(key, options)))) {\n            yield event;\n            if (event.name === 'SENDING_QUERY') {\n                sent++;\n            }\n            if (event.name === 'QUERY_ERROR') {\n                errors.push(event.error);\n            }\n            if (event.name === 'PEER_RESPONSE' && event.messageName === 'ADD_PROVIDER') {\n                log('sent provider record for %s to %p', key, event.from);\n                success++;\n            }\n        }\n        if (success === 0) {\n            if (errors.length > 0) {\n                // if all sends failed, throw an error to inform the caller\n                throw new CodeError(`Failed to provide to ${errors.length} of ${sent} peers`, 'ERR_PROVIDES_FAILED', { errors });\n            }\n            throw new CodeError('Failed to provide - no peers found', 'ERR_PROVIDES_FAILED');\n        }\n    }\n    /**\n     * Search the dht for up to `K` providers of the given CID\n     */\n    async *findProviders(key, options = {}) {\n        yield* merge(this.lan.findProviders(key, options), this.wan.findProviders(key, options));\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        let queriedPeers = false;\n        for await (const event of merge(this.lan.findPeer(id, options), this.wan.findPeer(id, options))) {\n            yield event;\n            if (event.name === 'SENDING_QUERY' || event.name === 'FINAL_PEER') {\n                queriedPeers = true;\n            }\n        }\n        if (!queriedPeers) {\n            throw new CodeError('Peer lookup failed', 'ERR_LOOKUP_FAILED');\n        }\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n    async *getClosestPeers(key, options = {}) {\n        yield* merge(this.lan.getClosestPeers(key, options), this.wan.getClosestPeers(key, options));\n    }\n    async refreshRoutingTable() {\n        await Promise.all([\n            this.lan.refreshRoutingTable(),\n            this.wan.refreshRoutingTable()\n        ]);\n    }\n}\n//# sourceMappingURL=dual-kad-dht.js.map","import { KadDHT as SingleKadDHT } from './kad-dht.js';\nimport { DualKadDHT } from './dual-kad-dht.js';\nclass KadDHT extends DualKadDHT {\n    constructor(components, init) {\n        super(components, new SingleKadDHT(components, {\n            protocolPrefix: '/ipfs',\n            ...init,\n            lan: false\n        }), new SingleKadDHT(components, {\n            protocolPrefix: '/ipfs',\n            ...init,\n            clientMode: false,\n            lan: true\n        }));\n    }\n}\nexport function kadDHT(init) {\n    return (components) => new KadDHT(components, init);\n}\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport { P2P } from '@multiformats/mafmt';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nconst log = logger('libp2p:bootstrap');\nconst DEFAULT_BOOTSTRAP_TAG_NAME = 'bootstrap';\nconst DEFAULT_BOOTSTRAP_TAG_VALUE = 50;\nconst DEFAULT_BOOTSTRAP_TAG_TTL = 120000;\nconst DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1000;\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends EventEmitter {\n    constructor(components, options = { list: [] }) {\n        if (options.list == null || options.list.length === 0) {\n            throw new Error('Bootstrap requires a list of peer addresses');\n        }\n        super();\n        this.components = components;\n        this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT;\n        this.list = [];\n        for (const candidate of options.list) {\n            if (!P2P.matches(candidate)) {\n                log.error('Invalid multiaddr');\n                continue;\n            }\n            const ma = multiaddr(candidate);\n            const peerIdStr = ma.getPeerId();\n            if (peerIdStr == null) {\n                log.error('Invalid bootstrap multiaddr without peer id');\n                continue;\n            }\n            const peerData = {\n                id: peerIdFromString(peerIdStr),\n                multiaddrs: [ma],\n                protocols: []\n            };\n            this.list.push(peerData);\n        }\n        this._init = options;\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/bootstrap';\n    }\n    isStarted() {\n        return Boolean(this.timer);\n    }\n    /**\n     * Start emitting events\n     */\n    start() {\n        if (this.isStarted()) {\n            return;\n        }\n        log('Starting bootstrap node discovery, discovering peers after %s ms', this.timeout);\n        this.timer = setTimeout(() => {\n            void this._discoverBootstrapPeers()\n                .catch(err => {\n                log.error(err);\n            });\n        }, this.timeout);\n    }\n    /**\n     * Emit each address in the list as a PeerInfo\n     */\n    async _discoverBootstrapPeers() {\n        if (this.timer == null) {\n            return;\n        }\n        for (const peerData of this.list) {\n            await this.components.peerStore.tagPeer(peerData.id, this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME, {\n                value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,\n                ttl: this._init.tagTTL ?? DEFAULT_BOOTSTRAP_TAG_TTL\n            });\n            // check we are still running\n            if (this.timer == null) {\n                return;\n            }\n            this.dispatchEvent(new CustomEvent('peer', { detail: peerData }));\n        }\n    }\n    /**\n     * Stop emitting events\n     */\n    stop() {\n        if (this.timer != null) {\n            clearTimeout(this.timer);\n        }\n        this.timer = undefined;\n    }\n}\nBootstrap.tag = 'bootstrap';\nexport function bootstrap(init) {\n    return (components) => new Bootstrap(components, init);\n}\n//# sourceMappingURL=index.js.map","export function createListener() {\n    throw new Error('WebSocket Servers can not be created in the browser!');\n}\n//# sourceMappingURL=listener.browser.js.map","// p2p multi-address code\nexport const CODE_P2P = 421;\nexport const CODE_CIRCUIT = 290;\nexport const CODE_TCP = 6;\nexport const CODE_WS = 477;\nexport const CODE_WSS = 478;\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 2000;\n//# sourceMappingURL=constants.js.map","import { abortableSource } from 'abortable-iterator';\nimport { CLOSE_TIMEOUT } from './constants.js';\nimport pTimeout from 'p-timeout';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:websockets:socket');\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nexport function socketToMaConn(stream, remoteAddr, options) {\n    options = options ?? {};\n    const maConn = {\n        async sink(source) {\n            if ((options?.signal) != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await stream.sink(source);\n            }\n            catch (err) {\n                if (err.type !== 'aborted') {\n                    log.error(err);\n                }\n            }\n        },\n        source: (options.signal != null) ? abortableSource(stream.source, options.signal) : stream.source,\n        remoteAddr,\n        timeline: { open: Date.now() },\n        async close() {\n            const start = Date.now();\n            try {\n                await pTimeout(stream.close(), {\n                    milliseconds: CLOSE_TIMEOUT\n                });\n            }\n            catch (err) {\n                const { host, port } = maConn.remoteAddr.toOptions();\n                log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n                stream.destroy();\n            }\n            finally {\n                maConn.timeline.close = Date.now();\n            }\n        }\n    };\n    stream.socket.addEventListener('close', () => {\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }, { once: true });\n    return maConn;\n}\n//# sourceMappingURL=socket-to-conn.js.map","import * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT, CODE_P2P, CODE_TCP, CODE_WS, CODE_WSS } from './constants.js';\nexport function all(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSockets.matches(testMa) ||\n            mafmt.WebSocketsSecure.matches(testMa);\n    });\n}\nexport function wss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSocketsSecure.matches(testMa);\n    });\n}\nexport function dnsWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        return mafmt.WebSocketsSecure.matches(testMa) &&\n            mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n    });\n}\nexport function dnsWsOrWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(CODE_P2P);\n        // WS\n        if (mafmt.WebSockets.matches(testMa)) {\n            return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));\n        }\n        // WSS\n        return mafmt.WebSocketsSecure.matches(testMa) &&\n            mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n    });\n}\n//# sourceMappingURL=filters.js.map","import { connect } from 'it-ws/client';\nimport { multiaddrToUri as toUri } from '@multiformats/multiaddr-to-uri';\nimport { AbortError } from '@libp2p/interfaces/errors';\nimport pDefer from 'p-defer';\nimport { logger } from '@libp2p/logger';\nimport { isBrowser, isWebWorker } from 'wherearewe';\nimport { createListener } from './listener.js';\nimport { socketToMaConn } from './socket-to-conn.js';\nimport * as filters from './filters.js';\nimport { symbol } from '@libp2p/interface-transport';\nconst log = logger('libp2p:websockets');\nclass WebSockets {\n    constructor(init) {\n        this.init = init;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/websockets';\n    }\n    get [symbol]() {\n        return true;\n    }\n    async dial(ma, options) {\n        log('dialing %s', ma);\n        options = options ?? {};\n        const socket = await this._connect(ma, options);\n        const maConn = socketToMaConn(socket, ma);\n        log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options?.signal?.aborted === true) {\n            throw new AbortError();\n        }\n        const cOpts = ma.toOptions();\n        log('dialing %s:%s', cOpts.host, cOpts.port);\n        const errorPromise = pDefer();\n        const errfn = (err) => {\n            log.error('connection error:', err);\n            errorPromise.reject(err);\n        };\n        const rawSocket = connect(toUri(ma), this.init);\n        if (rawSocket.socket.on != null) {\n            rawSocket.socket.on('error', errfn);\n        }\n        else {\n            rawSocket.socket.onerror = errfn;\n        }\n        if (options.signal == null) {\n            await Promise.race([rawSocket.connected(), errorPromise.promise]);\n            log('connected %s', ma);\n            return rawSocket;\n        }\n        // Allow abort via signal during connect\n        let onAbort;\n        const abort = new Promise((resolve, reject) => {\n            onAbort = () => {\n                reject(new AbortError());\n                rawSocket.close().catch(err => {\n                    log.error('error closing raw socket', err);\n                });\n            };\n            // Already aborted?\n            if (options?.signal?.aborted === true) {\n                onAbort();\n                return;\n            }\n            options?.signal?.addEventListener('abort', onAbort);\n        });\n        try {\n            await Promise.race([abort, errorPromise.promise, rawSocket.connected()]);\n        }\n        finally {\n            if (onAbort != null) {\n                options?.signal?.removeEventListener('abort', onAbort);\n            }\n        }\n        log('connected %s', ma);\n        return rawSocket;\n    }\n    /**\n     * Creates a Websockets listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`\n     */\n    createListener(options) {\n        return createListener({ ...this.init, ...options });\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.\n     * By default, in a browser environment only DNS+WSS multiaddr is accepted,\n     * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        if (this.init?.filter != null) {\n            return this.init?.filter(multiaddrs);\n        }\n        // Browser\n        if (isBrowser || isWebWorker) {\n            return filters.wss(multiaddrs);\n        }\n        return filters.all(multiaddrs);\n    }\n}\nexport function webSockets(init = {}) {\n    return () => {\n        return new WebSockets(init);\n    };\n}\n//# sourceMappingURL=index.js.map","export function allocUnsafe(size) {\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc-unsafe-browser.js.map","export var MessageTypes;\n(function (MessageTypes) {\n    MessageTypes[MessageTypes[\"NEW_STREAM\"] = 0] = \"NEW_STREAM\";\n    MessageTypes[MessageTypes[\"MESSAGE_RECEIVER\"] = 1] = \"MESSAGE_RECEIVER\";\n    MessageTypes[MessageTypes[\"MESSAGE_INITIATOR\"] = 2] = \"MESSAGE_INITIATOR\";\n    MessageTypes[MessageTypes[\"CLOSE_RECEIVER\"] = 3] = \"CLOSE_RECEIVER\";\n    MessageTypes[MessageTypes[\"CLOSE_INITIATOR\"] = 4] = \"CLOSE_INITIATOR\";\n    MessageTypes[MessageTypes[\"RESET_RECEIVER\"] = 5] = \"RESET_RECEIVER\";\n    MessageTypes[MessageTypes[\"RESET_INITIATOR\"] = 6] = \"RESET_INITIATOR\";\n})(MessageTypes || (MessageTypes = {}));\nexport const MessageTypeNames = Object.freeze({\n    0: 'NEW_STREAM',\n    1: 'MESSAGE_RECEIVER',\n    2: 'MESSAGE_INITIATOR',\n    3: 'CLOSE_RECEIVER',\n    4: 'CLOSE_INITIATOR',\n    5: 'RESET_RECEIVER',\n    6: 'RESET_INITIATOR'\n});\nexport const InitiatorMessageTypes = Object.freeze({\n    NEW_STREAM: MessageTypes.NEW_STREAM,\n    MESSAGE: MessageTypes.MESSAGE_INITIATOR,\n    CLOSE: MessageTypes.CLOSE_INITIATOR,\n    RESET: MessageTypes.RESET_INITIATOR\n});\nexport const ReceiverMessageTypes = Object.freeze({\n    MESSAGE: MessageTypes.MESSAGE_RECEIVER,\n    CLOSE: MessageTypes.CLOSE_RECEIVER,\n    RESET: MessageTypes.RESET_RECEIVER\n});\n//# sourceMappingURL=message-types.js.map","import varint from 'varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { allocUnsafe } from './alloc-unsafe.js';\nimport { MessageTypes } from './message-types.js';\nimport batchedBytes from 'it-batched-bytes';\nconst POOL_SIZE = 10 * 1024;\nclass Encoder {\n    constructor() {\n        this._pool = allocUnsafe(POOL_SIZE);\n        this._poolOffset = 0;\n    }\n    /**\n     * Encodes the given message and adds it to the passed list\n     */\n    write(msg, list) {\n        const pool = this._pool;\n        let offset = this._poolOffset;\n        varint.encode(msg.id << 3 | msg.type, pool, offset);\n        offset += varint.encode.bytes ?? 0;\n        if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            varint.encode(msg.data.length, pool, offset);\n        }\n        else {\n            varint.encode(0, pool, offset);\n        }\n        offset += varint.encode.bytes ?? 0;\n        const header = pool.subarray(this._poolOffset, offset);\n        if (POOL_SIZE - offset < 100) {\n            this._pool = allocUnsafe(POOL_SIZE);\n            this._poolOffset = 0;\n        }\n        else {\n            this._poolOffset = offset;\n        }\n        list.append(header);\n        if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            list.append(msg.data);\n        }\n    }\n}\nconst encoder = new Encoder();\n/**\n * Encode and yield one or more messages\n */\nexport async function* encode(source, minSendBytes = 0) {\n    if (minSendBytes == null || minSendBytes === 0) {\n        // just send the messages\n        for await (const messages of source) {\n            const list = new Uint8ArrayList();\n            for (const msg of messages) {\n                encoder.write(msg, list);\n            }\n            yield list.subarray();\n        }\n        return;\n    }\n    // batch messages up for sending\n    yield* batchedBytes(source, {\n        size: minSendBytes,\n        serialize: (obj, list) => {\n            for (const m of obj) {\n                encoder.write(m, list);\n            }\n        }\n    });\n}\n//# sourceMappingURL=encode.js.map","import { MessageTypeNames, MessageTypes } from './message-types.js';\nimport { Uint8ArrayList } from 'uint8arraylist';\nexport const MAX_MSG_SIZE = 1 << 20; // 1MB\nexport const MAX_MSG_QUEUE_SIZE = 4 << 20; // 4MB\nexport class Decoder {\n    constructor(maxMessageSize = MAX_MSG_SIZE, maxUnprocessedMessageQueueSize = MAX_MSG_QUEUE_SIZE) {\n        this._buffer = new Uint8ArrayList();\n        this._headerInfo = null;\n        this._maxMessageSize = maxMessageSize;\n        this._maxUnprocessedMessageQueueSize = maxUnprocessedMessageQueueSize;\n    }\n    write(chunk) {\n        if (chunk == null || chunk.length === 0) {\n            return [];\n        }\n        this._buffer.append(chunk);\n        if (this._buffer.byteLength > this._maxUnprocessedMessageQueueSize) {\n            throw Object.assign(new Error('unprocessed message queue size too large!'), { code: 'ERR_MSG_QUEUE_TOO_BIG' });\n        }\n        const msgs = [];\n        while (this._buffer.length !== 0) {\n            if (this._headerInfo == null) {\n                try {\n                    this._headerInfo = this._decodeHeader(this._buffer);\n                }\n                catch (err) {\n                    if (err.code === 'ERR_MSG_TOO_BIG') {\n                        throw err;\n                    }\n                    break; // We haven't received enough data yet\n                }\n            }\n            const { id, type, length, offset } = this._headerInfo;\n            const bufferedDataLength = this._buffer.length - offset;\n            if (bufferedDataLength < length) {\n                break; // not enough data yet\n            }\n            const msg = {\n                id,\n                type\n            };\n            if (type === MessageTypes.NEW_STREAM || type === MessageTypes.MESSAGE_INITIATOR || type === MessageTypes.MESSAGE_RECEIVER) {\n                msg.data = this._buffer.sublist(offset, offset + length);\n            }\n            msgs.push(msg);\n            this._buffer.consume(offset + length);\n            this._headerInfo = null;\n        }\n        return msgs;\n    }\n    /**\n     * Attempts to decode the message header from the buffer\n     */\n    _decodeHeader(data) {\n        const { value: h, offset } = readVarInt(data);\n        const { value: length, offset: end } = readVarInt(data, offset);\n        const type = h & 7;\n        // @ts-expect-error h is a number not a CODE\n        if (MessageTypeNames[type] == null) {\n            throw new Error(`Invalid type received: ${type}`);\n        }\n        // test message type varint + data length\n        if (length > this._maxMessageSize) {\n            throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' });\n        }\n        // @ts-expect-error h is a number not a CODE\n        return { id: h >> 3, type, offset: offset + end, length };\n    }\n}\nconst MSB = 0x80;\nconst REST = 0x7F;\nfunction readVarInt(buf, offset = 0) {\n    let res = 0;\n    let shift = 0;\n    let counter = offset;\n    let b;\n    const l = buf.length;\n    do {\n        if (counter >= l || shift > 49) {\n            offset = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf.get(counter++);\n        res += shift < 28\n            ? (b & REST) << shift\n            : (b & REST) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB);\n    offset = counter - offset;\n    return {\n        value: res,\n        offset\n    };\n}\n//# sourceMappingURL=decode.js.map","import { abortableSource } from 'abortable-iterator';\nimport { pushable } from 'it-pushable';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { MAX_MSG_SIZE } from './decode.js';\nimport { anySignal } from 'any-signal';\nimport { InitiatorMessageTypes, ReceiverMessageTypes } from './message-types.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:mplex:stream');\nconst ERR_STREAM_RESET = 'ERR_STREAM_RESET';\nconst ERR_STREAM_ABORT = 'ERR_STREAM_ABORT';\nconst ERR_SINK_ENDED = 'ERR_SINK_ENDED';\nconst ERR_DOUBLE_SINK = 'ERR_DOUBLE_SINK';\nexport function createStream(options) {\n    const { id, name, send, onEnd, type = 'initiator', maxMsgSize = MAX_MSG_SIZE } = options;\n    const abortController = new AbortController();\n    const resetController = new AbortController();\n    const closeController = new AbortController();\n    const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n    const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`;\n    const streamName = `${name == null ? id : name}`;\n    let sourceEnded = false;\n    let sinkEnded = false;\n    let sinkSunk = false;\n    let endErr;\n    const timeline = {\n        open: Date.now()\n    };\n    const onSourceEnd = (err) => {\n        if (sourceEnded) {\n            return;\n        }\n        sourceEnded = true;\n        log.trace('%s stream %s source end - err: %o', type, streamName, err);\n        if (err != null && endErr == null) {\n            endErr = err;\n        }\n        if (sinkEnded) {\n            stream.stat.timeline.close = Date.now();\n            if (onEnd != null) {\n                onEnd(endErr);\n            }\n        }\n    };\n    const onSinkEnd = (err) => {\n        if (sinkEnded) {\n            return;\n        }\n        sinkEnded = true;\n        log.trace('%s stream %s sink end - err: %o', type, streamName, err);\n        if (err != null && endErr == null) {\n            endErr = err;\n        }\n        if (sourceEnded) {\n            timeline.close = Date.now();\n            if (onEnd != null) {\n                onEnd(endErr);\n            }\n        }\n    };\n    const streamSource = pushable({\n        onEnd: onSourceEnd\n    });\n    const stream = {\n        // Close for both Reading and Writing\n        close: () => {\n            log.trace('%s stream %s close', type, streamName);\n            stream.closeRead();\n            stream.closeWrite();\n        },\n        // Close for reading\n        closeRead: () => {\n            log.trace('%s stream %s closeRead', type, streamName);\n            if (sourceEnded) {\n                return;\n            }\n            streamSource.end();\n        },\n        // Close for writing\n        closeWrite: () => {\n            log.trace('%s stream %s closeWrite', type, streamName);\n            if (sinkEnded) {\n                return;\n            }\n            closeController.abort();\n            try {\n                send({ id, type: Types.CLOSE });\n            }\n            catch (err) {\n                log.trace('%s stream %s error sending close', type, name, err);\n            }\n            onSinkEnd();\n        },\n        // Close for reading and writing (local error)\n        abort: (err) => {\n            log.trace('%s stream %s abort', type, streamName, err);\n            // End the source with the passed error\n            streamSource.end(err);\n            abortController.abort();\n            onSinkEnd(err);\n        },\n        // Close immediately for reading and writing (remote error)\n        reset: () => {\n            const err = new CodeError('stream reset', ERR_STREAM_RESET);\n            resetController.abort();\n            streamSource.end(err);\n            onSinkEnd(err);\n        },\n        sink: async (source) => {\n            if (sinkSunk) {\n                throw new CodeError('sink already called on stream', ERR_DOUBLE_SINK);\n            }\n            sinkSunk = true;\n            if (sinkEnded) {\n                throw new CodeError('stream closed for writing', ERR_SINK_ENDED);\n            }\n            const signal = anySignal([\n                abortController.signal,\n                resetController.signal,\n                closeController.signal\n            ]);\n            try {\n                source = abortableSource(source, signal);\n                if (type === 'initiator') { // If initiator, open a new stream\n                    send({ id, type: InitiatorMessageTypes.NEW_STREAM, data: new Uint8ArrayList(uint8ArrayFromString(streamName)) });\n                }\n                for await (let data of source) {\n                    while (data.length > 0) {\n                        if (data.length <= maxMsgSize) {\n                            send({ id, type: Types.MESSAGE, data: data instanceof Uint8Array ? new Uint8ArrayList(data) : data });\n                            break;\n                        }\n                        data = data instanceof Uint8Array ? new Uint8ArrayList(data) : data;\n                        send({ id, type: Types.MESSAGE, data: data.sublist(0, maxMsgSize) });\n                        data.consume(maxMsgSize);\n                    }\n                }\n            }\n            catch (err) {\n                if (err.type === 'aborted' && err.message === 'The operation was aborted') {\n                    if (closeController.signal.aborted) {\n                        return;\n                    }\n                    if (resetController.signal.aborted) {\n                        err.message = 'stream reset';\n                        err.code = ERR_STREAM_RESET;\n                    }\n                    if (abortController.signal.aborted) {\n                        err.message = 'stream aborted';\n                        err.code = ERR_STREAM_ABORT;\n                    }\n                }\n                // Send no more data if this stream was remotely reset\n                if (err.code === ERR_STREAM_RESET) {\n                    log.trace('%s stream %s reset', type, name);\n                }\n                else {\n                    log.trace('%s stream %s error', type, name, err);\n                    try {\n                        send({ id, type: Types.RESET });\n                    }\n                    catch (err) {\n                        log.trace('%s stream %s error sending reset', type, name, err);\n                    }\n                }\n                streamSource.end(err);\n                onSinkEnd(err);\n                return;\n            }\n            finally {\n                signal.clear();\n            }\n            try {\n                send({ id, type: Types.CLOSE });\n            }\n            catch (err) {\n                log.trace('%s stream %s error sending close', type, name, err);\n            }\n            onSinkEnd();\n        },\n        source: streamSource,\n        sourcePush: (data) => {\n            streamSource.push(data);\n        },\n        sourceReadableLength() {\n            return streamSource.readableLength;\n        },\n        stat: {\n            direction: type === 'initiator' ? 'outbound' : 'inbound',\n            timeline\n        },\n        metadata: {},\n        id: externalId\n    };\n    return stream;\n}\n//# sourceMappingURL=stream.js.map","import { pushableV } from 'it-pushable';\nimport { abortableSource } from 'abortable-iterator';\nimport { encode } from './encode.js';\nimport { Decoder } from './decode.js';\nimport { MessageTypes, MessageTypeNames } from './message-types.js';\nimport { createStream } from './stream.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { anySignal } from 'any-signal';\nconst log = logger('libp2p:mplex');\nconst MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAM_BUFFER_SIZE = 1024 * 1024 * 4; // 4MB\nconst DISCONNECT_THRESHOLD = 5;\nfunction printMessage(msg) {\n    const output = {\n        ...msg,\n        type: `${MessageTypeNames[msg.type]} (${msg.type})`\n    };\n    if (msg.type === MessageTypes.NEW_STREAM) {\n        output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray());\n    }\n    if (msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) {\n        output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray(), 'base16');\n    }\n    return output;\n}\nexport class MplexStreamMuxer {\n    constructor(init) {\n        this.protocol = '/mplex/6.7.0';\n        init = init ?? {};\n        this._streamId = 0;\n        this._streams = {\n            /**\n             * Stream to ids map\n             */\n            initiators: new Map(),\n            /**\n             * Stream to ids map\n             */\n            receivers: new Map()\n        };\n        this._init = init;\n        /**\n         * An iterable sink\n         */\n        this.sink = this._createSink();\n        /**\n         * An iterable source\n         */\n        const source = this._createSource();\n        this._source = source;\n        this.source = source;\n        /**\n         * Close controller\n         */\n        this.closeController = new AbortController();\n        this.rateLimiter = new RateLimiterMemory({\n            points: init.disconnectThreshold ?? DISCONNECT_THRESHOLD,\n            duration: 1\n        });\n    }\n    /**\n     * Returns a Map of streams and their ids\n     */\n    get streams() {\n        // Inbound and Outbound streams may have the same ids, so we need to make those unique\n        const streams = [];\n        for (const stream of this._streams.initiators.values()) {\n            streams.push(stream);\n        }\n        for (const stream of this._streams.receivers.values()) {\n            streams.push(stream);\n        }\n        return streams;\n    }\n    /**\n     * Initiate a new stream with the given name. If no name is\n     * provided, the id of the stream will be used.\n     */\n    newStream(name) {\n        if (this.closeController.signal.aborted) {\n            throw new Error('Muxer already closed');\n        }\n        const id = this._streamId++;\n        name = name == null ? id.toString() : name.toString();\n        const registry = this._streams.initiators;\n        return this._newStream({ id, name, type: 'initiator', registry });\n    }\n    /**\n     * Close or abort all tracked streams and stop the muxer\n     */\n    close(err) {\n        if (this.closeController.signal.aborted)\n            return;\n        if (err != null) {\n            this.streams.forEach(s => { s.abort(err); });\n        }\n        else {\n            this.streams.forEach(s => { s.close(); });\n        }\n        this.closeController.abort();\n    }\n    /**\n     * Called whenever an inbound stream is created\n     */\n    _newReceiverStream(options) {\n        const { id, name } = options;\n        const registry = this._streams.receivers;\n        return this._newStream({ id, name, type: 'receiver', registry });\n    }\n    _newStream(options) {\n        const { id, name, type, registry } = options;\n        log('new %s stream %s', type, id);\n        if (type === 'initiator' && this._streams.initiators.size === (this._init.maxOutboundStreams ?? MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION)) {\n            throw new CodeError('Too many outbound streams open', 'ERR_TOO_MANY_OUTBOUND_STREAMS');\n        }\n        if (registry.has(id)) {\n            throw new Error(`${type} stream ${id} already exists!`);\n        }\n        const send = (msg) => {\n            if (log.enabled) {\n                log.trace('%s stream %s send', type, id, printMessage(msg));\n            }\n            this._source.push(msg);\n        };\n        const onEnd = () => {\n            log('%s stream with id %s and protocol %s ended', type, id, stream.stat.protocol);\n            registry.delete(id);\n            if (this._init.onStreamEnd != null) {\n                this._init.onStreamEnd(stream);\n            }\n        };\n        const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._init.maxMsgSize });\n        registry.set(id, stream);\n        return stream;\n    }\n    /**\n     * Creates a sink with an abortable source. Incoming messages will\n     * also have their size restricted. All messages will be varint decoded.\n     */\n    _createSink() {\n        const sink = async (source) => {\n            const signal = anySignal([this.closeController.signal, this._init.signal]);\n            try {\n                source = abortableSource(source, signal);\n                const decoder = new Decoder(this._init.maxMsgSize, this._init.maxUnprocessedMessageQueueSize);\n                for await (const chunk of source) {\n                    for (const msg of decoder.write(chunk)) {\n                        await this._handleIncoming(msg);\n                    }\n                }\n                this._source.end();\n            }\n            catch (err) {\n                log('error in sink', err);\n                this._source.end(err); // End the source with an error\n            }\n            finally {\n                signal.clear();\n            }\n        };\n        return sink;\n    }\n    /**\n     * Creates a source that restricts outgoing message sizes\n     * and varint encodes them\n     */\n    _createSource() {\n        const onEnd = (err) => {\n            this.close(err);\n        };\n        const source = pushableV({\n            objectMode: true,\n            onEnd\n        });\n        return Object.assign(encode(source, this._init.minSendBytes), {\n            push: source.push,\n            end: source.end,\n            return: source.return\n        });\n    }\n    async _handleIncoming(message) {\n        const { id, type } = message;\n        if (log.enabled) {\n            log.trace('incoming message', printMessage(message));\n        }\n        // Create a new stream?\n        if (message.type === MessageTypes.NEW_STREAM) {\n            if (this._streams.receivers.size === (this._init.maxInboundStreams ?? MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION)) {\n                log('too many inbound streams open');\n                // not going to allow this stream, send the reset message manually\n                // instead of setting it up just to tear it down\n                this._source.push({\n                    id,\n                    type: MessageTypes.RESET_RECEIVER\n                });\n                // if we've hit our stream limit, and the remote keeps trying to open\n                // more new streams, if they are doing this very quickly maybe they\n                // are attacking us and we should close the connection\n                try {\n                    await this.rateLimiter.consume('new-stream', 1);\n                }\n                catch {\n                    log('rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection');\n                    // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n                    this._source.end(new Error('Too many open streams'));\n                    return;\n                }\n                return;\n            }\n            const stream = this._newReceiverStream({ id, name: uint8ArrayToString(message.data instanceof Uint8Array ? message.data : message.data.subarray()) });\n            if (this._init.onIncomingStream != null) {\n                this._init.onIncomingStream(stream);\n            }\n            return;\n        }\n        const list = (type & 1) === 1 ? this._streams.initiators : this._streams.receivers;\n        const stream = list.get(id);\n        if (stream == null) {\n            log('missing stream %s for message type %s', id, MessageTypeNames[type]);\n            return;\n        }\n        const maxBufferSize = this._init.maxStreamBufferSize ?? MAX_STREAM_BUFFER_SIZE;\n        switch (type) {\n            case MessageTypes.MESSAGE_INITIATOR:\n            case MessageTypes.MESSAGE_RECEIVER:\n                if (stream.sourceReadableLength() > maxBufferSize) {\n                    // Stream buffer has got too large, reset the stream\n                    this._source.push({\n                        id: message.id,\n                        type: type === MessageTypes.MESSAGE_INITIATOR ? MessageTypes.RESET_RECEIVER : MessageTypes.RESET_INITIATOR\n                    });\n                    // Inform the stream consumer they are not fast enough\n                    const error = new CodeError('Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers', 'ERR_STREAM_INPUT_BUFFER_FULL');\n                    stream.abort(error);\n                    return;\n                }\n                // We got data from the remote, push it into our local stream\n                stream.sourcePush(message.data);\n                break;\n            case MessageTypes.CLOSE_INITIATOR:\n            case MessageTypes.CLOSE_RECEIVER:\n                // We should expect no more data from the remote, stop reading\n                stream.closeRead();\n                break;\n            case MessageTypes.RESET_INITIATOR:\n            case MessageTypes.RESET_RECEIVER:\n                // Stop reading and writing to the stream immediately\n                stream.reset();\n                break;\n            default:\n                log('unknown message type %s', type);\n        }\n    }\n}\n//# sourceMappingURL=mplex.js.map","import { MplexStreamMuxer } from './mplex.js';\nclass Mplex {\n    constructor(init = {}) {\n        this.protocol = '/mplex/6.7.0';\n        this._init = init;\n    }\n    createStreamMuxer(init = {}) {\n        return new MplexStreamMuxer({\n            ...init,\n            ...this._init\n        });\n    }\n}\nexport function mplex(init = {}) {\n    return () => new Mplex(init);\n}\n//# sourceMappingURL=index.js.map","export const NOISE_MSG_MAX_LENGTH_BYTES = 65535;\nexport const NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16;\nexport const DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS);\n//# sourceMappingURL=constants.js.map","import { HKDF } from '@stablelib/hkdf';\nimport * as x25519 from '@stablelib/x25519';\nimport { SHA256, hash } from '@stablelib/sha256';\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305';\nexport const stablelib = {\n    hashSHA256(data) {\n        return hash(data);\n    },\n    getHKDF(ck, ikm) {\n        const hkdf = new HKDF(SHA256, ikm, ck);\n        const okmU8Array = hkdf.expand(96);\n        const okm = okmU8Array;\n        const k1 = okm.subarray(0, 32);\n        const k2 = okm.subarray(32, 64);\n        const k3 = okm.subarray(64, 96);\n        return [k1, k2, k3];\n    },\n    generateX25519KeyPair() {\n        const keypair = x25519.generateKeyPair();\n        return {\n            publicKey: keypair.publicKey,\n            privateKey: keypair.secretKey\n        };\n    },\n    generateX25519KeyPairFromSeed(seed) {\n        const keypair = x25519.generateKeyPairFromSeed(seed);\n        return {\n            publicKey: keypair.publicKey,\n            privateKey: keypair.secretKey\n        };\n    },\n    generateX25519SharedKey(privateKey, publicKey) {\n        return x25519.sharedKey(privateKey, publicKey);\n    },\n    chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {\n        const ctx = new ChaCha20Poly1305(k);\n        return ctx.seal(nonce, plaintext, ad);\n    },\n    chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {\n        const ctx = new ChaCha20Poly1305(k);\n        return ctx.open(nonce, ciphertext, ad, dst);\n    }\n};\n//# sourceMappingURL=stablelib.js.map","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nconst allocUnsafe = (len) => {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.allocUnsafe(len);\n    }\n    return new Uint8Array(len);\n};\nexport const uint16BEEncode = (value) => {\n    const target = allocUnsafe(2);\n    new DataView(target.buffer, target.byteOffset, target.byteLength).setUint16(0, value, false);\n    return target;\n};\nuint16BEEncode.bytes = 2;\nexport const uint16BEDecode = (data) => {\n    if (data.length < 2)\n        throw RangeError('Could not decode int16BE');\n    if (data instanceof Uint8Array) {\n        return new DataView(data.buffer, data.byteOffset, data.byteLength).getUint16(0, false);\n    }\n    return data.getUint16(0);\n};\nuint16BEDecode.bytes = 2;\n// Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)\nexport function encode0(message) {\n    return uint8ArrayConcat([message.ne, message.ciphertext], message.ne.length + message.ciphertext.length);\n}\nexport function encode1(message) {\n    return uint8ArrayConcat([message.ne, message.ns, message.ciphertext], message.ne.length + message.ns.length + message.ciphertext.length);\n}\nexport function encode2(message) {\n    return uint8ArrayConcat([message.ns, message.ciphertext], message.ns.length + message.ciphertext.length);\n}\nexport function decode0(input) {\n    if (input.length < 32) {\n        throw new Error('Cannot decode stage 0 MessageBuffer: length less than 32 bytes.');\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ciphertext: input.subarray(32, input.length),\n        ns: new Uint8Array(0)\n    };\n}\nexport function decode1(input) {\n    if (input.length < 80) {\n        throw new Error('Cannot decode stage 1 MessageBuffer: length less than 80 bytes.');\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ns: input.subarray(32, 80),\n        ciphertext: input.subarray(80, input.length)\n    };\n}\nexport function decode2(input) {\n    if (input.length < 48) {\n        throw new Error('Cannot decode stage 2 MessageBuffer: length less than 48 bytes.');\n    }\n    return {\n        ne: new Uint8Array(0),\n        ns: input.subarray(0, 48),\n        ciphertext: input.subarray(48, input.length)\n    };\n}\n//# sourceMappingURL=encoder.js.map","import { TAG_LENGTH } from '@stablelib/chacha20poly1305';\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from '../constants.js';\nimport { uint16BEEncode } from '../encoder.js';\n// Returns generator that encrypts payload from the user\nexport function encryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n                let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                const data = handshake.encrypt(chunk.subarray(i, end), handshake.session);\n                metrics?.encryptedPackets.increment();\n                yield uint16BEEncode(data.byteLength);\n                yield data;\n            }\n        }\n    };\n}\n// Decrypt received payload to the user\nexport function decryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n                let end = i + NOISE_MSG_MAX_LENGTH_BYTES;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                if (end - TAG_LENGTH < i) {\n                    throw new Error('Invalid chunk');\n                }\n                const encrypted = chunk.subarray(i, end);\n                // memory allocation is not cheap so reuse the encrypted Uint8Array\n                // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n                // this is ok because chacha20 reads bytes one by one and don't reread after that\n                // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n                const dst = chunk.subarray(i, end - TAG_LENGTH);\n                const { plaintext: decrypted, valid } = handshake.decrypt(encrypted, handshake.session, dst);\n                if (!valid) {\n                    metrics?.decryptErrors.increment();\n                    throw new Error('Failed to validate decrypted chunk');\n                }\n                metrics?.decryptedPackets.increment();\n                yield decrypted;\n            }\n        }\n    };\n}\n//# sourceMappingURL=streaming.js.map","export class UnexpectedPeerError extends Error {\n    constructor(message = 'Unexpected Peer') {\n        super(message);\n        this.code = UnexpectedPeerError.code;\n    }\n    static get code() {\n        return 'ERR_UNEXPECTED_PEER';\n    }\n}\nexport class InvalidCryptoExchangeError extends Error {\n    constructor(message = 'Invalid crypto exchange') {\n        super(message);\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static get code() {\n        return 'ERR_INVALID_CRYPTO_EXCHANGE';\n    }\n}\nexport class InvalidCryptoTransmissionError extends Error {\n    constructor(message = 'Invalid crypto transmission') {\n        super(message);\n        this.code = InvalidCryptoTransmissionError.code;\n    }\n    static get code() {\n        return 'ERR_INVALID_CRYPTO_TRANSMISSION';\n    }\n}\n//# sourceMappingURL=errors.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var NoiseExtensions;\n(function (NoiseExtensions) {\n    let _codec;\n    NoiseExtensions.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.webtransportCerthashes != null) {\n                    for (const value of obj.webtransportCerthashes) {\n                        w.uint32(10);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    webtransportCerthashes: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.webtransportCerthashes.push(reader.bytes());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseExtensions.encode = (obj) => {\n        return encodeMessage(obj, NoiseExtensions.codec());\n    };\n    NoiseExtensions.decode = (buf) => {\n        return decodeMessage(buf, NoiseExtensions.codec());\n    };\n})(NoiseExtensions || (NoiseExtensions = {}));\nexport var NoiseHandshakePayload;\n(function (NoiseHandshakePayload) {\n    let _codec;\n    NoiseHandshakePayload.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (opts.writeDefaults === true || (obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.identityKey ?? new Uint8Array(0));\n                }\n                if (opts.writeDefaults === true || (obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.identitySig ?? new Uint8Array(0));\n                }\n                if (obj.extensions != null) {\n                    w.uint32(34);\n                    NoiseExtensions.codec().encode(obj.extensions, w, {\n                        writeDefaults: false\n                    });\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    identityKey: new Uint8Array(0),\n                    identitySig: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.identityKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.identitySig = reader.bytes();\n                            break;\n                        case 4:\n                            obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseHandshakePayload.encode = (obj) => {\n        return encodeMessage(obj, NoiseHandshakePayload.codec());\n    };\n    NoiseHandshakePayload.decode = (buf) => {\n        return decodeMessage(buf, NoiseHandshakePayload.codec());\n    };\n})(NoiseHandshakePayload || (NoiseHandshakePayload = {}));\n//# sourceMappingURL=payload.js.map","import { unmarshalPublicKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { NoiseHandshakePayload } from './proto/payload.js';\nexport async function getPayload(localPeer, staticPublicKey, extensions) {\n    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n    if (localPeer.publicKey == null) {\n        throw new Error('PublicKey was missing from local PeerId');\n    }\n    return createHandshakePayload(localPeer.publicKey, signedPayload, extensions);\n}\nexport function createHandshakePayload(libp2pPublicKey, signedPayload, extensions) {\n    return NoiseHandshakePayload.encode({\n        identityKey: libp2pPublicKey,\n        identitySig: signedPayload,\n        extensions: extensions ?? { webtransportCerthashes: [] }\n    }).subarray();\n}\nexport async function signPayload(peerId, payload) {\n    if (peerId.privateKey == null) {\n        throw new Error('PrivateKey was missing from PeerId');\n    }\n    const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n    return await privateKey.sign(payload);\n}\nexport async function getPeerIdFromPayload(payload) {\n    return await peerIdFromKeys(payload.identityKey);\n}\nexport function decodePayload(payload) {\n    return NoiseHandshakePayload.decode(payload);\n}\nexport function getHandshakePayload(publicKey) {\n    const prefix = uint8ArrayFromString('noise-libp2p-static-key:');\n    return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n *\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nexport async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n    // Unmarshaling from PublicKey protobuf\n    const payloadPeerId = await peerIdFromKeys(payload.identityKey);\n    if (!payloadPeerId.equals(remotePeer)) {\n        throw new Error(`Payload identity key ${payloadPeerId.toString()} does not match expected remote peer ${remotePeer.toString()}`);\n    }\n    const generatedPayload = getHandshakePayload(noiseStaticKey);\n    if (payloadPeerId.publicKey == null) {\n        throw new Error('PublicKey was missing from PeerId');\n    }\n    if (payload.identitySig == null) {\n        throw new Error('Signature was missing from message');\n    }\n    const publicKey = unmarshalPublicKey(payloadPeerId.publicKey);\n    const valid = await publicKey.verify(generatedPayload, payload.identitySig);\n    if (!valid) {\n        throw new Error(\"Static key doesn't match to peer that signed payload!\");\n    }\n    return payloadPeerId;\n}\nexport function isValidPublicKey(pk) {\n    if (!(pk instanceof Uint8Array)) {\n        return false;\n    }\n    if (pk.length !== 32) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { DUMP_SESSION_KEYS } from './constants.js';\nconst log = logger('libp2p:noise');\nexport { log as logger };\nlet keyLogger;\nif (DUMP_SESSION_KEYS) {\n    keyLogger = log;\n}\nelse {\n    keyLogger = Object.assign(() => { }, {\n        enabled: false,\n        trace: () => { },\n        error: () => { }\n    });\n}\nexport function logLocalStaticKeys(s) {\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`);\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`);\n}\nexport function logLocalEphemeralKeys(e) {\n    if (e) {\n        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`);\n        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing local ephemeral keys.');\n    }\n}\nexport function logRemoteStaticKey(rs) {\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs, 'hex')}`);\n}\nexport function logRemoteEphemeralKey(re) {\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re, 'hex')}`);\n}\nexport function logCipherState(session) {\n    if (session.cs1 && session.cs2) {\n        keyLogger(`CIPHER_STATE_1 ${session.cs1.n.getUint64()} ${uint8ArrayToString(session.cs1.k, 'hex')}`);\n        keyLogger(`CIPHER_STATE_2 ${session.cs2.n.getUint64()} ${uint8ArrayToString(session.cs2.k, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing cipher state.');\n    }\n}\n//# sourceMappingURL=logger.js.map","export const MIN_NONCE = 0;\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff;\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n    constructor(n = MIN_NONCE) {\n        this.n = n;\n        this.bytes = new Uint8Array(12);\n        this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength);\n        this.view.setUint32(4, n, true);\n    }\n    increment() {\n        this.n++;\n        // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n        this.view.setUint32(4, this.n, true);\n    }\n    getBytes() {\n        return this.bytes;\n    }\n    getUint64() {\n        return this.n;\n    }\n    assertValue() {\n        if (this.n > MAX_NONCE) {\n            throw new Error(ERR_MAX_NONCE);\n        }\n    }\n}\n//# sourceMappingURL=nonce.js.map","import { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays';\nimport { logger } from '../logger.js';\nimport { Nonce } from '../nonce.js';\nexport class AbstractHandshake {\n    constructor(crypto) {\n        this.crypto = crypto;\n    }\n    encryptWithAd(cs, ad, plaintext) {\n        const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n        cs.n.increment();\n        return e;\n    }\n    decryptWithAd(cs, ad, ciphertext, dst) {\n        const { plaintext, valid } = this.decrypt(cs.k, cs.n, ad, ciphertext, dst);\n        if (valid)\n            cs.n.increment();\n        return { plaintext, valid };\n    }\n    // Cipher state related\n    hasKey(cs) {\n        return !this.isEmptyKey(cs.k);\n    }\n    createEmptyKey() {\n        return new Uint8Array(32);\n    }\n    isEmptyKey(k) {\n        const emptyKey = this.createEmptyKey();\n        return uint8ArrayEquals(emptyKey, k);\n    }\n    encrypt(k, n, ad, plaintext) {\n        n.assertValue();\n        return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k);\n    }\n    encryptAndHash(ss, plaintext) {\n        let ciphertext;\n        if (this.hasKey(ss.cs)) {\n            ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n        }\n        else {\n            ciphertext = plaintext;\n        }\n        this.mixHash(ss, ciphertext);\n        return ciphertext;\n    }\n    decrypt(k, n, ad, ciphertext, dst) {\n        n.assertValue();\n        const encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k, dst);\n        if (encryptedMessage) {\n            return {\n                plaintext: encryptedMessage,\n                valid: true\n            };\n        }\n        else {\n            return {\n                plaintext: new Uint8Array(0),\n                valid: false\n            };\n        }\n    }\n    decryptAndHash(ss, ciphertext) {\n        let plaintext;\n        let valid = true;\n        if (this.hasKey(ss.cs)) {\n            ({ plaintext, valid } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n        }\n        else {\n            plaintext = ciphertext;\n        }\n        this.mixHash(ss, ciphertext);\n        return { plaintext, valid };\n    }\n    dh(privateKey, publicKey) {\n        try {\n            const derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey);\n            if (derivedU8.length === 32) {\n                return derivedU8;\n            }\n            return derivedU8.subarray(0, 32);\n        }\n        catch (e) {\n            const err = e;\n            logger.error(err);\n            return new Uint8Array(32);\n        }\n    }\n    mixHash(ss, data) {\n        ss.h = this.getHash(ss.h, data);\n    }\n    getHash(a, b) {\n        const u = this.crypto.hashSHA256(uint8ArrayConcat([a, b], a.length + b.length));\n        return u;\n    }\n    mixKey(ss, ikm) {\n        const [ck, tempK] = this.crypto.getHKDF(ss.ck, ikm);\n        ss.cs = this.initializeKey(tempK);\n        ss.ck = ck;\n    }\n    initializeKey(k) {\n        return { k, n: new Nonce() };\n    }\n    // Symmetric state related\n    initializeSymmetric(protocolName) {\n        const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8');\n        const h = this.hashProtocolName(protocolNameBytes);\n        const ck = h;\n        const key = this.createEmptyKey();\n        const cs = this.initializeKey(key);\n        return { cs, ck, h };\n    }\n    hashProtocolName(protocolName) {\n        if (protocolName.length <= 32) {\n            const h = new Uint8Array(32);\n            h.set(protocolName);\n            return h;\n        }\n        else {\n            return this.getHash(protocolName, new Uint8Array(0));\n        }\n    }\n    split(ss) {\n        const [tempk1, tempk2] = this.crypto.getHKDF(ss.ck, new Uint8Array(0));\n        const cs1 = this.initializeKey(tempk1);\n        const cs2 = this.initializeKey(tempk2);\n        return { cs1, cs2 };\n    }\n    writeMessageRegular(cs, payload) {\n        const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);\n        const ne = this.createEmptyKey();\n        const ns = new Uint8Array(0);\n        return { ne, ns, ciphertext };\n    }\n    readMessageRegular(cs, message) {\n        return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);\n    }\n}\n//# sourceMappingURL=abstract-handshake.js.map","import { isValidPublicKey } from '../utils.js';\nimport { AbstractHandshake } from './abstract-handshake.js';\nexport class XX extends AbstractHandshake {\n    initializeInitiator(prologue, s, rs, psk) {\n        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = new Uint8Array(32);\n        return { ss, s, rs, psk, re };\n    }\n    initializeResponder(prologue, s, rs, psk) {\n        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = new Uint8Array(32);\n        return { ss, s, rs, psk, re };\n    }\n    writeMessageA(hs, payload, e) {\n        const ns = new Uint8Array(0);\n        if (e !== undefined) {\n            hs.e = e;\n        }\n        else {\n            hs.e = this.crypto.generateX25519KeyPair();\n        }\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageB(hs, payload) {\n        hs.e = this.crypto.generateX25519KeyPair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageC(hs, payload) {\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        const ne = this.createEmptyKey();\n        const messageBuffer = { ne, ns, ciphertext };\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, messageBuffer, cs1, cs2 };\n    }\n    readMessageA(hs, message) {\n        if (isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        return this.decryptAndHash(hs.ss, message.ciphertext);\n    }\n    readMessageB(hs, message) {\n        if (isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        if (!hs.e) {\n            throw new Error('Handshake state `e` param is missing.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        return { plaintext, valid: (valid1 && valid2) };\n    }\n    readMessageC(hs, message) {\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        if (!hs.e) {\n            throw new Error('Handshake state `e` param is missing.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 };\n    }\n    initSession(initiator, prologue, s) {\n        const psk = this.createEmptyKey();\n        const rs = new Uint8Array(32); // no static key yet\n        let hs;\n        if (initiator) {\n            hs = this.initializeInitiator(prologue, s, rs, psk);\n        }\n        else {\n            hs = this.initializeResponder(prologue, s, rs, psk);\n        }\n        return {\n            hs,\n            i: initiator,\n            mc: 0\n        };\n    }\n    sendMessage(session, message, ephemeral) {\n        let messageBuffer;\n        if (session.mc === 0) {\n            messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n        }\n        else if (session.mc === 1) {\n            messageBuffer = this.writeMessageB(session.hs, message);\n        }\n        else if (session.mc === 2) {\n            const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message);\n            messageBuffer = resultingBuffer;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        else if (session.mc > 2) {\n            if (session.i) {\n                if (!session.cs1) {\n                    throw new Error('CS1 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs1, message);\n            }\n            else {\n                if (!session.cs2) {\n                    throw new Error('CS2 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs2, message);\n            }\n        }\n        else {\n            throw new Error('Session invalid.');\n        }\n        session.mc++;\n        return messageBuffer;\n    }\n    recvMessage(session, message) {\n        let plaintext = new Uint8Array(0);\n        let valid = false;\n        if (session.mc === 0) {\n            ({ plaintext, valid } = this.readMessageA(session.hs, message));\n        }\n        else if (session.mc === 1) {\n            ({ plaintext, valid } = this.readMessageB(session.hs, message));\n        }\n        else if (session.mc === 2) {\n            const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message);\n            plaintext = resultingPlaintext;\n            valid = resultingValid;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        session.mc++;\n        return { plaintext, valid };\n    }\n}\n//# sourceMappingURL=xx.js.map","import { InvalidCryptoExchangeError, UnexpectedPeerError } from '@libp2p/interface-connection-encrypter/errors';\nimport { decode0, decode1, decode2, encode0, encode1, encode2 } from './encoder.js';\nimport { XX } from './handshakes/xx.js';\nimport { logger, logLocalStaticKeys, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey, logCipherState } from './logger.js';\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from './utils.js';\nexport class XXHandshake {\n    constructor(isInitiator, payload, prologue, crypto, staticKeypair, connection, remotePeer, handshake) {\n        this.remoteExtensions = { webtransportCerthashes: [] };\n        this.isInitiator = isInitiator;\n        this.payload = payload;\n        this.prologue = prologue;\n        this.staticKeypair = staticKeypair;\n        this.connection = connection;\n        if (remotePeer) {\n            this.remotePeer = remotePeer;\n        }\n        this.xx = handshake ?? new XX(crypto);\n        this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    }\n    // stage 0\n    async propose() {\n        logLocalStaticKeys(this.session.hs.s);\n        if (this.isInitiator) {\n            logger.trace('Stage 0 - Initiator starting to send first message.');\n            const messageBuffer = this.xx.sendMessage(this.session, new Uint8Array(0));\n            this.connection.writeLP(encode0(messageBuffer));\n            logger.trace('Stage 0 - Initiator finished sending first message.');\n            logLocalEphemeralKeys(this.session.hs.e);\n        }\n        else {\n            logger.trace('Stage 0 - Responder waiting to receive first message...');\n            const receivedMessageBuffer = decode0((await this.connection.readLP()).subarray());\n            const { valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 0 validation fail');\n            }\n            logger.trace('Stage 0 - Responder received first message.');\n            logRemoteEphemeralKey(this.session.hs.re);\n        }\n    }\n    // stage 1\n    async exchange() {\n        if (this.isInitiator) {\n            logger.trace('Stage 1 - Initiator waiting to receive first message from responder...');\n            const receivedMessageBuffer = decode1((await this.connection.readLP()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 1 validation fail');\n            }\n            logger.trace('Stage 1 - Initiator received the message.');\n            logRemoteEphemeralKey(this.session.hs.re);\n            logRemoteStaticKey(this.session.hs.rs);\n            logger.trace(\"Initiator going to check remote's signature...\");\n            try {\n                const decodedPayload = decodePayload(plaintext);\n                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n                await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            }\n            catch (e) {\n                const err = e;\n                throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n            logger.trace('All good with the signature!');\n        }\n        else {\n            logger.trace('Stage 1 - Responder sending out first message with signed payload and static key.');\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            this.connection.writeLP(encode1(messageBuffer));\n            logger.trace('Stage 1 - Responder sent the second handshake message with signed payload.');\n            logLocalEphemeralKeys(this.session.hs.e);\n        }\n    }\n    // stage 2\n    async finish() {\n        if (this.isInitiator) {\n            logger.trace('Stage 2 - Initiator sending third handshake message.');\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            this.connection.writeLP(encode2(messageBuffer));\n            logger.trace('Stage 2 - Initiator sent message with signed payload.');\n        }\n        else {\n            logger.trace('Stage 2 - Responder waiting for third handshake message...');\n            const receivedMessageBuffer = decode2((await this.connection.readLP()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new InvalidCryptoExchangeError('xx handshake stage 2 validation fail');\n            }\n            logger.trace('Stage 2 - Responder received the message, finished handshake.');\n            try {\n                const decodedPayload = decodePayload(plaintext);\n                this.remotePeer = this.remotePeer || await getPeerIdFromPayload(decodedPayload);\n                await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            }\n            catch (e) {\n                const err = e;\n                throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n        }\n        logCipherState(this.session);\n    }\n    encrypt(plaintext, session) {\n        const cs = this.getCS(session);\n        return this.xx.encryptWithAd(cs, new Uint8Array(0), plaintext);\n    }\n    decrypt(ciphertext, session, dst) {\n        const cs = this.getCS(session, false);\n        return this.xx.decryptWithAd(cs, new Uint8Array(0), ciphertext, dst);\n    }\n    getRemoteStaticKey() {\n        return this.session.hs.rs;\n    }\n    getCS(session, encryption = true) {\n        if (!session.cs1 || !session.cs2) {\n            throw new InvalidCryptoExchangeError('Handshake not completed properly, cipher state does not exist.');\n        }\n        if (this.isInitiator) {\n            return encryption ? session.cs1 : session.cs2;\n        }\n        else {\n            return encryption ? session.cs2 : session.cs1;\n        }\n    }\n    setRemoteNoiseExtension(e) {\n        if (e) {\n            this.remoteExtensions = e;\n        }\n    }\n}\n//# sourceMappingURL=handshake-xx.js.map","export function registerMetrics(metrics) {\n    return {\n        xxHandshakeSuccesses: metrics.registerCounter('libp2p_noise_xxhandshake_successes_total', {\n            help: 'Total count of noise xxHandshakes successes_'\n        }),\n        xxHandshakeErrors: metrics.registerCounter('libp2p_noise_xxhandshake_error_total', {\n            help: 'Total count of noise xxHandshakes errors'\n        }),\n        encryptedPackets: metrics.registerCounter('libp2p_noise_encrypted_packets_total', {\n            help: 'Total count of noise encrypted packets successfully'\n        }),\n        decryptedPackets: metrics.registerCounter('libp2p_noise_decrypted_packets_total', {\n            help: 'Total count of noise decrypted packets'\n        }),\n        decryptErrors: metrics.registerCounter('libp2p_noise_decrypt_errors_total', {\n            help: 'Total count of noise decrypt errors'\n        })\n    };\n}\n//# sourceMappingURL=metrics.js.map","import { pbStream } from 'it-pb-stream';\nimport { duplexPair } from 'it-pair/duplex';\nimport { pipe } from 'it-pipe';\nimport { decode } from 'it-length-prefixed';\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js';\nimport { stablelib } from './crypto/stablelib.js';\nimport { decryptStream, encryptStream } from './crypto/streaming.js';\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js';\nimport { XXHandshake } from './handshake-xx.js';\nimport { getPayload } from './utils.js';\nimport { registerMetrics } from './metrics.js';\nexport class Noise {\n    constructor(init = {}) {\n        this.protocol = '/noise';\n        const { staticNoiseKey, extensions, crypto, prologueBytes, metrics } = init;\n        this.crypto = crypto ?? stablelib;\n        this.extensions = extensions;\n        this.metrics = metrics ? registerMetrics(metrics) : undefined;\n        if (staticNoiseKey) {\n            // accepts x25519 private key of length 32\n            this.staticKeys = this.crypto.generateX25519KeyPairFromSeed(staticNoiseKey);\n        }\n        else {\n            this.staticKeys = this.crypto.generateX25519KeyPair();\n        }\n        this.prologue = prologueBytes ?? new Uint8Array(0);\n    }\n    /**\n     * Encrypt outgoing data to the remote party (handshake as initiator)\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer\n     * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encrypted\n     * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n     * @returns {Promise<SecuredConnection>}\n     */\n    async secureOutbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = pbStream(connection, {\n            lengthEncoder: uint16BEEncode,\n            lengthDecoder: uint16BEDecode,\n            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: true,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        return {\n            conn,\n            remoteExtensions: handshake.remoteExtensions,\n            remotePeer: handshake.remotePeer\n        };\n    }\n    /**\n     * Decrypt incoming data (handshake as responder).\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer.\n     * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encryption.\n     * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n     * @returns {Promise<SecuredConnection>}\n     */\n    async secureInbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = pbStream(connection, {\n            lengthEncoder: uint16BEEncode,\n            lengthDecoder: uint16BEDecode,\n            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: false,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        return {\n            conn,\n            remotePeer: handshake.remotePeer,\n            remoteExtensions: handshake.remoteExtensions\n        };\n    }\n    /**\n     * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.\n     * If noise pipes disabled or remote peer static key is unknown, use XX.\n     *\n     * @param {HandshakeParams} params\n     */\n    async performHandshake(params) {\n        const payload = await getPayload(params.localPeer, this.staticKeys.publicKey, this.extensions);\n        // run XX handshake\n        return await this.performXXHandshake(params, payload);\n    }\n    async performXXHandshake(params, payload) {\n        const { isInitiator, remotePeer, connection } = params;\n        const handshake = new XXHandshake(isInitiator, payload, this.prologue, this.crypto, this.staticKeys, connection, remotePeer);\n        try {\n            await handshake.propose();\n            await handshake.exchange();\n            await handshake.finish();\n            this.metrics?.xxHandshakeSuccesses.increment();\n        }\n        catch (e) {\n            this.metrics?.xxHandshakeErrors.increment();\n            if (e instanceof Error) {\n                e.message = `Error occurred during XX handshake: ${e.message}`;\n                throw e;\n            }\n        }\n        return handshake;\n    }\n    async createSecureConnection(connection, handshake) {\n        // Create encryption box/unbox wrapper\n        const [secure, user] = duplexPair();\n        const network = connection.unwrap();\n        await pipe(secure, // write to wrapper\n        encryptStream(handshake, this.metrics), // encrypt data + prefix with message length\n        network, // send to the remote peer\n        decode({ lengthDecoder: uint16BEDecode }), // read message length prefix\n        decryptStream(handshake, this.metrics), // decrypt the incoming data\n        secure // pipe to the wrapper\n        );\n        return user;\n    }\n}\n//# sourceMappingURL=noise.js.map","import { Noise } from './noise.js';\nexport * from './crypto.js';\nexport * from './crypto/stablelib.js';\nexport function noise(init = {}) {\n    return () => new Noise(init);\n}\n//# sourceMappingURL=index.js.map","import get from 'dlv'\nimport mergeOpts from 'merge-options'\nimport errCode from 'err-code'\nimport { routers } from 'ipfs-core-config/libp2p-pubsub-routers'\nimport { delegatedPeerRouting } from '@libp2p/delegated-peer-routing'\nimport { delegatedContentRouting } from '@libp2p/delegated-content-routing'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { ipfsCore as pkgversion } from '../version.js'\nimport { libp2pConfig as getEnvLibp2pOptions } from 'ipfs-core-config/libp2p'\nimport { createLibp2p as createNode } from 'libp2p'\nimport { kadDHT } from '@libp2p/kad-dht'\nimport { bootstrap } from '@libp2p/bootstrap'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { webSockets } from '@libp2p/websockets'\nimport { mplex } from '@libp2p/mplex'\nimport { noise } from '@chainsafe/libp2p-noise'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true, concatArrays: true })\n\n/**\n * @typedef {object} DekOptions\n * @property {string} hash\n * @property {string} salt\n * @property {number} iterationCount\n * @property {number} keyLength\n *\n * @typedef {object} KeychainConfig\n * @property {string} [pass]\n * @property {DekOptions} [dek]\n *\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('libp2p').Libp2p} LibP2P\n * @typedef {import('libp2p').Libp2pOptions} Libp2pOptions\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {object} config\n * @param {Repo} config.repo\n * @param {IPFSOptions|undefined} config.options\n * @param {PeerId} config.peerId\n * @param {Multiaddr[]|undefined} config.multiaddrs\n * @param {KeychainConfig|undefined} config.keychainConfig\n * @param {Partial<IPFSConfig>|undefined} config.config\n */\nexport function createLibp2p ({\n  options = {},\n  peerId,\n  multiaddrs = [],\n  repo,\n  keychainConfig = {},\n  config = {}\n}) {\n  const { datastore } = repo\n\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  })\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({ libp2pOptions, options, config, datastore, peerId })\n  }\n\n  // do not start by default\n  libp2pOptions.start = false\n\n  return createNode(libp2pOptions)\n}\n\n/**\n * @param {object} input\n * @param {IPFSOptions} input.options\n * @param {Partial<IPFSConfig>} input.config\n * @param {Repo['datastore']} input.datastore\n * @param {KeychainConfig} input.keychainConfig\n * @param {PeerId} input.peerId\n * @param {Multiaddr[]} input.multiaddrs\n * @returns {Libp2pOptions}\n */\nfunction getLibp2pOptions ({ options, config, datastore, keychainConfig, peerId, multiaddrs }) {\n  const getPubsubRouter = () => {\n    const router = get(config, 'Pubsub.Router') || 'gossipsub'\n\n    const availableRouters = routers()\n\n    if (!availableRouters[router]) {\n      throw errCode(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${router} router.`), 'ERR_NOT_SUPPORTED')\n    }\n\n    return availableRouters[router]\n  }\n\n  /** @type {Libp2pOptions} */\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId\n  }\n\n  /** @type {Libp2pOptions} */\n  const libp2pOptions = {\n    addresses: {\n      listen: multiaddrs.map(ma => ma.toString()),\n      announce: get(options, 'addresses.announce', get(config, 'Addresses.Announce', [])),\n      noAnnounce: get(options, 'addresses.noAnnounce', get(config, 'Addresses.NoAnnounce', []))\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: keychainConfig,\n    identify: {\n      host: {\n        agentVersion: `js-ipfs/${pkgversion}`\n      }\n    },\n    contentRouters: [],\n    peerRouters: [],\n    peerDiscovery: [],\n    transports: [],\n    streamMuxers: [\n      mplex({\n        maxInboundStreams: 256,\n        maxOutboundStreams: 1024\n      })\n    ],\n    connectionEncryption: [\n      noise()\n    ],\n    relay: {\n      enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n      hop: {\n        enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n        active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n      }\n    },\n    nat: {\n      enabled: !get(config, 'Swarm.DisableNatPortMap', false)\n    }\n  }\n\n  if (get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))) {\n    libp2pOptions.pubsub = getPubsubRouter()\n  }\n\n  if (get(config, 'Routing.Type', 'dhtclient') !== 'none') {\n    libp2pOptions.dht = kadDHT({\n      clientMode: get(config, 'Routing.Type', 'dht') !== 'dhtserver',\n      kBucketSize: get(options, 'dht.kBucketSize', 20),\n      validators: {\n        ipns: ipnsValidator\n      },\n      selectors: {\n        ipns: ipnsSelector\n      }\n    })\n  }\n\n  const boostrapNodes = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []))\n\n  if (boostrapNodes.length > 0) {\n    libp2pOptions.peerDiscovery?.push(\n      bootstrap({\n        list: boostrapNodes\n      })\n    )\n  }\n\n  /** @type {import('libp2p').Libp2pOptions | undefined} */\n  let constructorOptions = get(options, 'libp2p', undefined)\n\n  if (typeof constructorOptions === 'function') {\n    constructorOptions = undefined\n  }\n\n  // Merge defaults with Node.js/browser/other environments options and configuration\n  /** @type {Libp2pOptions} */\n  const libp2pFinalConfig = mergeOptions(\n    libp2pDefaults,\n    getEnvLibp2pOptions(),\n    libp2pOptions,\n    constructorOptions\n  )\n\n  // Set up Delegate Routing based on the presence of Delegates in the config\n  const delegateHosts = get(options, 'config.Addresses.Delegates',\n    get(config, 'Addresses.Delegates', [])\n  )\n\n  if (delegateHosts.length > 0) {\n    // Pick a random delegate host\n    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)]\n    const delegateAddr = multiaddr(delegateString).toOptions()\n    const delegateApiOptions = {\n      host: delegateAddr.host,\n      // port is a string atm, so we need to convert for the check\n      // @ts-expect-error - parseInt(input:string) => number\n      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',\n      port: delegateAddr.port\n    }\n\n    const delegateHttpClient = ipfsHttpClient(delegateApiOptions)\n\n    libp2pFinalConfig.contentRouters?.push(delegatedContentRouting(delegateHttpClient))\n    libp2pFinalConfig.peerRouters?.push(delegatedPeerRouting(delegateHttpClient))\n  }\n\n  // TODO: fixme\n  if (!get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))) {\n    libp2pFinalConfig.peerDiscovery = libp2pFinalConfig.peerDiscovery?.filter(d => {\n      try {\n        if (typeof d === 'function') {\n          // @ts-expect-error not components\n          return d({})[Symbol.toStringTag] !== '@libp2p/mdns'\n        }\n      } catch {}\n      return true\n    })\n  }\n\n  if (libp2pFinalConfig.transports == null) {\n    libp2pFinalConfig.transports = []\n  }\n\n  // add WebSocket transport if not overridden by user config\n  if (libp2pFinalConfig.transports.find(t => {\n    try {\n      if (typeof t === 'function') {\n        return t({})[Symbol.toStringTag] === '@libp2p/websockets'\n      }\n    } catch {}\n    return false\n  }) == null) {\n    libp2pFinalConfig.transports.push(webSockets())\n  }\n\n  return libp2pFinalConfig\n}\n"],"names":["debug","v","base58btc","base32","base64","createDisabledLogger","namespace","logger","name","trace","r","n","_AbortError","message","__publicField","AbortError","CodeError","code","props","symbol","isPeerId","other","inspect","baseDecoder","bases","codec","acc","curr","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","init","CID","id","uint8ArrayEquals","peerIdFromString","RSAPeerIdImpl","Ed25519PeerIdImpl","Secp256k1PeerIdImpl","peerIdFromPeerId","str","decoder","multihash","Digest.decode","peerIdFromBytes","buf","identity","sha256","peerIdFromCID","cid","peerIdFromKeys","publicKey","privateKey","Digest.create","PUBLIC_KEY_BYTE_LENGTH","PRIVATE_KEY_BYTE_LENGTH","KEYS_BYTE_LENGTH","generateKey","privateKeyRaw","ed.utils","ed.getPublicKey","concatKeys","generateKeyFromSeed","seed","hashAndSign","msg","ed.sign","hashAndVerify","sig","ed.verify","i","webcrypto","win","nativeCrypto","derivedEmptyPasswordKey","create","opts","algorithm","keyLength","nonceLength","digest","saltLength","iterations","crypto","encrypt","data","password","salt","nonce","aesGcm","fromString","cryptoKey","deriveParams","runtimeDerivedEmptyPassword","rawKey","ciphertext","concat","decrypt","plaintext","exporter","encryptedKey","ciphers.create","KeyType","__KeyTypeValues","enumeration","PublicKey","_codec","obj","w","reader","length","end","tag","encodeMessage","decodeMessage","PrivateKey","Ed25519PublicKey","key","ensureKey","crypto.publicKeyLength","crypto.hashAndVerify","pbm.PublicKey","pbm.KeyType","bytes","Ed25519PrivateKey","crypto.privateKeyLength","crypto.hashAndSign","pbm.PrivateKey","encoding","format","unmarshalEd25519PrivateKey","privateKeyBytes","publicKeyBytes","unmarshalEd25519PublicKey","generateKeyPair","crypto.generateKey","generateKeyPairFromSeed","crypto.generateKeyFromSeed","bigIntegerToUintBase64url","num","len","uint8ArrayConcat","uint8ArrayToString","base64urlToBigInteger","base64urlToBuffer","forge","uint8ArrayFromString","bits","curveTypes","importer","randomBytes","utils","convert","types","jwk2priv","jwk2pub","pkcs1ToJwk","asn1","jwkToPkcs1","jwk","pkixToJwk","jwkToPkix","pair","keys","exportKey","unmarshalPrivateKey","derivePublicFromPrivate","jwKey","convertKey","pub","handle","fkey","fmsg","fomsg","RsaPublicKey","crypto.utils.jwkToPkix","crypto.encrypt","RsaPrivateKey","crypto.getRandomValues","crypto.decrypt","crypto.utils.jwkToPkcs1","hash","buffer","options","unmarshalRsaPrivateKey","crypto.utils.pkcs1ToJwk","crypto.unmarshalPrivateKey","unmarshalRsaPublicKey","crypto.utils.pkixToJwk","fromJwk","secp.utils","secp.sign","err","secp.verify","compressPublicKey","secp.Point","validatePrivateKey","secp.getPublicKey","validatePublicKey","computePublicKey","Secp256k1PublicKey","crypto.validatePublicKey","crypto.compressPublicKey","keysProtobuf.PublicKey","keysProtobuf.KeyType","Secp256k1PrivateKey","crypto.computePublicKey","crypto.validatePrivateKey","keysProtobuf.PrivateKey","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","supportedKeys","RSA","Ed25519","Secp256k1","unsupportedKey","type","supported","typeToKey","unmarshalPublicKey","decoded","keysPBM.PublicKey","keysPBM.KeyType","marshalPublicKey","keysPBM.PrivateKey","marshalPrivateKey","importKey","der","Record","toRFC3339","time","year","month","day","hour","minute","seconds","milliseconds","nanoseconds","parseRFC3339","rfc3339Matcher","m","date","second","millisecond","Libp2pRecord","value","timeReceived","utils.toRFC3339","raw","rec","recvtime","utils.parseRFC3339","codes","Envelope","RecordEnvelope","peerId","payloadType","payload","signature","Protobuf","domain","signData","formatSignaturePayload","envelopeData","record","envelope","domainUint8Array","uint8arraysFromString","domainLength","unsigned","payloadTypeLength","payloadLength","Uint8ArrayList","arrayEquals","a","b","sort","item","index","PeerRecord","AddressInfo","ENVELOPE_DOMAIN_PEER_RECORD","ENVELOPE_PAYLOAD_TYPE_PEER_RECORD","multiaddrs","seqNumber","peerRecord","multiaddr","topologySymbol","isTopology","noop","TopologyImpl","registrar","createTopology","EventEmitter","__privateAdd","_listeners","listeners","__privateGet","listener","list","callback","event","result","once","detail","CustomEvent","CustomEventPolyfill","MessageCache","gossip","historyCapacity","msgIdToStrFn","messageId","validated","msgIdStr","msgId","fromPeerIdStr","entry","p","count","topics","msgIdsByTopic","msgIds","originatingPeers","cacheEntry","global","factory","require","module","require$$0","this","$protobuf","$Reader","$Writer","$util","$root","RPC","ks","$oneOfFields","l","t","d","o","j","SubOpts","c","Message","ControlMessage","ControlIHave","ControlIWant","ControlGraft","ControlPrune","PeerInfo","cjs","FloodsubID","GossipsubIDv10","GossipsubIDv11","GossipsubD","GossipsubDlo","GossipsubDhi","GossipsubDscore","GossipsubDout","GossipsubHistoryLength","GossipsubHistoryGossip","GossipsubDlazy","GossipsubGossipFactor","GossipsubGossipRetransmission","GossipsubHeartbeatInitialDelay","GossipsubHeartbeatInterval","GossipsubFanoutTTL","GossipsubPrunePeers","GossipsubPruneBackoff","GossipsubPruneBackoffTicks","GossipsubDirectConnectTicks","GossipsubDirectConnectInitialDelay","GossipsubOpportunisticGraftTicks","GossipsubOpportunisticGraftPeers","GossipsubGraftFloodThreshold","GossipsubMaxIHaveLength","GossipsubMaxIHaveMessages","GossipsubIWantFollowupTime","GossipsubSeenTTL","TimeCacheDuration","ERR_TOPIC_VALIDATOR_REJECT","ERR_TOPIC_VALIDATOR_IGNORE","ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE","ACCEPT_FROM_WHITELIST_MAX_MESSAGES","ACCEPT_FROM_WHITELIST_DURATION_MS","DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS","shuffle","arr","randInt","tmp","messageIdToString","toString","StrictSign","StrictNoSign","TopicValidatorResult","SignaturePolicy","PublishConfigType","RejectReason","ValidateError","MessageStatus","rejectReasonFromAcceptance","acceptance","getPublishConfigFromPeerId","signaturePolicy","ERR_INVALID_PEER_SCORE_PARAMS","defaultPeerScoreParams","defaultTopicScoreParams","createPeerScoreParams","topic","topicScoreParams","createTopicScoreParams","validatePeerScoreParams","params","validateTopicScoreParams","e","defaultPeerScoreThresholds","createPeerScoreThresholds","computeScore","peer","pstats","peerIPs","score","tstats","topicParams","topicScore","p1","p2","deficit","p3","p3b","p4","p5","ip","peersInIP","numPeersInIP","surplus","p6","excess","p7","DeliveryRecordStatus","MessageDeliveries","Denque","drec","now","head","removeItemsFromSet","superSet","ineed","cond","subset","removeFirstNItemsFromSet","MapDef","getDefault","log","PeerScore","metrics","stats","decayToZero","tparams","cacheUntil","penalty","penaltyLabel","peersWithIP","threshold","from","reason","cap","validatedTime","deliveryDelayMs","isLateDelivery","ipsToRemove","ipToRemove","peerSet","topicStats","IWantTracer","gossipsubIWantFollowupMs","ix","expireByPeer","brokenPromises","expire","isDuplicate","maxMs","k","requestMs","SimpleTimeCache","MessageSource","InclusionReason","ChurnReason","ScorePenalty","IHaveIgnoreReason","ScoreThreshold","getMetrics","register","topicStrToLabel","topicStr","hit","ihave","idonthave","iwantByTopic","iwantDonthave","iwant","tosendCount","tosendGroupCount","dataLen","status","error","rpc","rpcBytes","graft","prune","scores","scoreThresholds","graylist","publish","mesh","sw","wsTopic","scoreByPeer","peersPerTopicLabel","peers","topicLabel","peersInMesh","meshScores","hashName","pbkdf2","keySize","hasher","dek","forgePbkdf2","forgeUtil","SignPrefix","buildRawMessage","publishConfig","originalData","transformedData","rpcMsg","validateToRawMessage","fromPeerId","rpcMsgPreSign","seqno","seqnoBytes","msgIdFnStrictSign","msgIdFnStrictNoSign","computeScoreWeights","byTopic","topicScores","p1w","p2w","p3w","p3bw","p4w","capF","ws","p5w","p6w","p7w","computeAllPeersScoreWeights","peerIdStrs","peerStats","peerIdStr","swPeer","swPeerTopic","swTopic","OutboundStream","rawStream","errCallback","pushable","pipe","abortableSource","encode","InboundStream","decode","defaultDecodeRpcLimits","decodeRpc","protobuf","decodeSubOpts","decodeControlMessage","decodeControlIHave","decodeControlIWant","decodeControlGraft","decodeControlPrune","decodePeerInfo","Protocol","multiaddrToIPStr","tuple","convertToString","GossipStatusCode","GossipSub","components","constants.GossipsubIDv11","constants.GossipsubIDv10","timer","msToNextHeartbeat","constants.GossipsubD","constants.GossipsubDlo","constants.GossipsubDhi","constants.GossipsubDscore","constants.GossipsubDout","constants.GossipsubDlazy","constants.GossipsubHeartbeatInterval","constants.GossipsubFanoutTTL","constants.GossipsubHistoryLength","constants.GossipsubHistoryGossip","constants.GossipsubSeenTTL","constants.GossipsubIWantFollowupTime","constants.GossipsubPrunePeers","constants.GossipsubPruneBackoff","constants.GossipsubGraftFloodThreshold","constants.GossipsubOpportunisticGraftPeers","constants.GossipsubOpportunisticGraftTicks","constants.GossipsubDirectConnectTicks","constants.FloodsubID","maxMeshMessageDeliveriesWindowMs","topicParam","constants.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS","protocol","source","connection","multicodec","topology","registrarTopologyIds","heartbeatTimeout","constants.GossipsubHeartbeatInitialDelay","constants.GossipsubDirectConnectInitialDelay","outboundStream","inboundStream","stream","priorInboundStream","direction","addr","currentIP","peersInTopic","subscriptions","messages","subOpt","subscribe","handleReceivedMessagePromise","topicSet","validationResult","propagationSource","fastMsgIdStr","msgIdCached","topicValidator","errCode","constants.ERR_TOPIC_VALIDATOR_IGNORE","constants.ERR_TOPIC_VALIDATOR_REJECT","toPeer","controlMsg","sent","iwantMessageIds","peerhave","constants.GossipsubMaxIHaveMessages","iasked","constants.GossipsubMaxIHaveLength","topicID","messageIDs","iask","iwantList","constants.GossipsubGossipRetransmission","doPX","floodCutoff","backoff","interval","constants.GossipsubPruneBackoffTicks","toconnect","pi","eid","wasSubscribed","toAdd","fanoutPeers","fanoutCount","meshPeers","excludePeers","tosend","newFanoutPeers","rawMsg","ignoreDuplicatePublishError","willSendToSelf","allowPublishToZeroPeers","rejectReason","ctrl","outRpc","tograft","toprune","noPX","pruning","peersToGossipByTopic","gossipIDsByTopic","peersToGossip","candidateToGossip","target","factor","constants.GossipsubGossipFactor","peerMessageIDs","control","controlIHaveMsgs","xid","px","D","Dlo","Dhi","Dscore","Dout","fanoutTTL","getScore","s","candidateMeshPeers","shuffledPeers","peerStreams","prunePeer","graftPeer","peersArray","outbound","rotate","peersList","medianIndex","medianScore","newMeshPeers","lastpb","topicPeers","candidateFanoutPeers","filter","backoffSize","gossipsub","routers","DEFAULT_TIMEOUT","CONCURRENT_HTTP_REQUESTS","EventTypes","MessageType","DelegatedPeerRouting","client","PQueue","host","port","anySignal","onStart","defer","onFinish","cidOrPeerId","closer","delegatedPeerRouting","CONCURRENT_HTTP_REFS_REQUESTS","DelegatedContentRouting","prov","drain","delegatedContentRouting","CODE_P2P","CODE_CIRCUIT","CLOSE_TIMEOUT","MAX_BUFFERED_AMOUNT","CHANNEL_CLOSING_TIMEOUT","WebRTCDataChannel","channel","isClosing","DEFAULT_PEER_CONNECTION_CONFIG","getBrowserRTC","wrtc","WebRTCPeer","randombytes","dataChannel","delay","WebRTCHandshake","signal","iceCandidate","WebRTCReceiver","WebRTCReceiverHandshake","candidate","answer","ICECOMPLETE_TIMEOUT","WebRTCInitiator","WebRTCInitiatorHandshake","offer","pEvent","toMultiaddrConnection","socket","sink","maConn","start","timeout","cleanUrlSIO","ma","maStrSplit","tcpProto","wsProto","tcpPort","isName","cleanMultiaddr","maStr","legacy","tuppleIPFS","tupple","sioOptions","SigServer","signallingUrl","signallingAddr","upgrader","handler","channelOptions","connect","previouslyConnected","intentId","srcMultiaddr","dstMultiaddr","onError","evt","conn","untrackConn","pendingSignals","handshake","WebRTCListener","transport","pDefer","server","createListener","FaultTolerance","webrtcSupport","WebRTCStarDiscovery","peerDiscoverySymbol","WebRTCStar","rawConn","cOpts","resolve","reject","sio","errcode","connected","done","onReady","onAbort","mafmt.WebRTCStar","webRTCStar","libp2pConfig","webRtcStar","isStartable","storeAddresses","peerStore","map","uniquePeers","seen","requirePeers","min","DefaultPeerRouting","setDelayedInterval","TimeoutController","setMaxListeners","clearDelayedInterval","output","merge","router","first","CompoundContentRouting","dht","nVals","gotValues","defaultAddressFilter","addrs","DefaultAddressManager","listen","announce","remotePeer","addrString","addrSet","VisibilityChangeEmitter","hidden","visibilityChange","visible","LatencyMonitor","latencyCheckIntervalMs","dataEmitIntervalMs","asyncTestFn","latencyRandomPercentage","startTime","hrtime","isBrowser","pageInFocus","summary","latency","randomness","localData","cb","deltaMS","OPEN","CLOSING","CLOSED","mapIterable","iter","iterator","next","val","PeerMap","fn","PeerSet","set","predicate","KEEP_ALIVE","getPeerAddress","isMultiaddr","defaultOptions","STARTUP_RECONNECT_TIMEOUT","DefaultConnectionManager","mergeOptions","RateLimiterMemory","metric","conns","allStreams","streams","counts","keepAlivePeers","tasks","connectionList","storedConns","numConnections","toPrune","storedConn","peerIdOrMultiaddr","existingConnections","timeoutController","peerConnections","trackedConnection","connections","STATUS.OPEN","limit","peerValues","tags","sortedConnections","peerAValue","peerBValue","connectionALifespan","connectionBLifespan","toClose","AutoDialler","minConnections","retimer","allPeers","all","CircuitRelay","Status","__StatusValues","Type","__TypeValues","Peer","streamToMaConnection","remoteAddr","mapSource","close","RELAY_CODEC","listeningAddrs","relayPeerStr","relayPeerId","relayConn","relayedAddr","getAddrs","writeResponse","streamHandler","validateAddrs","StreamHandler","maxLength","lp.decode","lp.encode","handleStop","request","CircuitPB","stop","response","handleHop","hopRequest","circuit","connectionManager","destinationPeer","destinationConnections","stopRequest","destinationStream","sourceStream","hop","Errors","canHop","handleCanHop","Circuit","controller","abortableDuplex","virtualConnection","localAddr","relayAddr","destinationAddr","relayId","destinationId","errMsg","relayPeer","disconnectOnFailure","relayConnection","mafmt.Circuit","namespaceToCid","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","CIRCUIT_PROTO_CODE","HOP_METADATA_KEY","HOP_METADATA_VALUE","RELAY_RENDEZVOUS_NS","isPrivate","address","isIpPrivate","publicAddressesFirst","isAPrivate","isBPrivate","AutoRelay","protocols","remoteAddrs","peersToIgnore","knownHopsToDial","metadata","idStr","supportsHop","provider","Relay","pki","certificateForKey","cert","attrs","findAsync","array","asyncCompare","promises","privates","CMS","keychain","plain","pem","cached","certificate","cmsData","cms","recipients","recipient","missingKeys","keyPrefix","infoPrefix","NIST","validateKeyName","sanitize","randomDelay","DsName","Key","DsInfoName","KeyChain","dsname","size","keyInfo","keypair","kid","batch","query","info","res","oldName","newName","oldDsname","newDsname","oldInfoName","newInfoName","oldPass","newPass","oldDek","newDek","keyAsPEM","TrackedMap","deleted","trackedMap","config","DefaultTransportManager","couldNotListen","supportedAddrs","pSettle","PROTOCOL_ID","MAX_PROTOCOL_LENGTH","NewLine","write","writer","encoded","writeAll","buffers","read","byteLength","varByteSource","input","onLength","readString","select","rest","shakeStream","multistream.writeAll","multistream.readString","multistream.write","multistream.encode","ConnectionImpl","newStream","getStreams","stat","createConnection","DEFAULT_MAX_INBOUND_STREAMS","DEFAULT_MAX_OUTBOUND_STREAMS","DefaultRegistrar","topologies","protocolList","peerProtocols","oldProtocols","removed","added","findIncomingStreamLimit","findOutgoingStreamLimit","countStreams","streamCount","DefaultUpgrader","encrypter","muxer","encryptedConn","upgradedConn","muxerFactory","cryptoProtocol","abortableStream","protectedConn","protector","remotePeerId","multiplexed","muxedStream","mss.handle","incomingLimit","mss.select","outgoingLimit","_timeline","args","errConnectionNotMultiplexed","muxers","Identify","version","AGENT_VERSION","IDENTIFY_PROTOCOL_VERSION","MULTICODEC_IDENTIFY_PROTOCOL_NAME","MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME","MULTICODEC_IDENTIFY_PROTOCOL_VERSION","MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION","MAX_IDENTIFY_MESSAGE_SIZE","IdentifyService","signedPeerRecord","listenAddrs","pushes","observedAddr","agentVersion","protocolVersion","cleanObservedAddr","peerData","msgWithLenPrefix","FetchRequest","FetchResponse","StatusCode","__StatusCodeValues","PROTOCOL_VERSION","PROTOCOL_NAME","FetchService","errmsg","uint8arrayToString","self","lookup","uint8arrayFromString","prefix","PING_LENGTH","PingService","isLoopback","isLoopbackAddr","DEFAULT_TTL","highPort","max","NatManager","pkg.name","pkg.version","family","publicIp","isPrivateIp","publicPort","fromNodeAddress","upnpNat","PeerRecordUpdater","DHTPeerRouting","EVENT_NAME","allowAll","PeerStoreAddressBook","dispatchEvent","store","addressFilter","release","updatedPeer","storedEnvelope","storedRecord","addresses","filterMultiaddrs","hasPeer","isCertified","PeerStoreKeyBook","updatedKey","uint8arrayEquals","PeerStoreMetadataBook","existingValue","PeerStoreProtoBook","protocolSet","Address","Metadata","NAMESPACE_COMMON","PersistentStore","mortice","b32key","PeerPB","meta","addressSet","addrStr","base32Str","Tags","Tag","PersistentPeerStore","providedValue","ttl","unexpiredTags","DHTContentRouting","DefaultComponents","startable","addressManager","transportManager","connectionGater","contentRouting","peerRouting","datastore","connectionProtector","dialer","pubsub","DIAL_TIMEOUT","INBOUND_UPGRADE_TIMEOUT","MAX_PARALLEL_DIALS","MAX_PER_PEER_DIALS","MAX_ADDRS_TO_DIAL","DefaultConfig","Constants.MAX_PARALLEL_DIALS","Constants.MAX_PER_PEER_DIALS","Constants.DIAL_TIMEOUT","Constants.INBOUND_UPGRADE_TIMEOUT","dnsaddrResolver","RelayConstants.ADVERTISE_BOOT_DELAY","RelayConstants.ADVERTISE_TTL","validateConfig","resultingOptions","isNode","isElectronMain","isWebWorker","isElectronRenderer","isReactNative","PeerIdProto","createEd25519PeerId","createFromPrivKey","createRSAPeerId","DummyDHT","DummyPubSub","DialRequest","dialAction","tokens","tokenHolder","FIFO","token","dialAbortControllers","completedDials","DefaultDialer","_","resolvers","dial","pendingTarget","controllerId","randomId","dialTarget","pendingDial","peerIdMultiaddr","addressPeerId","isTruthy","dialRequest","signals","total","resolvedMultiaddrs","nm","newM","Libp2pNode","MemoryDatastore","keychainOpts","peerRouters","contentRouters","component","service","peerInfo","peerKey","createLibp2pNode","keyChain","createLibp2p","node","MAX_RECORD_AGE","LAN_PREFIX","PROTOCOL_PREFIX","PROTOCOL_DHT","RECORD_KEY_PREFIX","PROVIDER_KEY_PREFIX","PROVIDERS_LRU_CACHE_SIZE","PROVIDERS_VALIDITY","PROVIDERS_CLEANUP_INTERVAL","K","ALPHA","QUERY_SELF_INTERVAL","QUERY_SELF_TIMEOUT","TABLE_REFRESH_INTERVAL","TABLE_REFRESH_QUERY_TIMEOUT","DEFAULT_QUERY_TIMEOUT","PK_PREFIX","removePrivateAddresses","removePublicAddresses","convertBuffer","convertPeerId","bufferToRecordKey","keyForPublicKey","isPublicKeyKey","fromPublicKeyKey","createPutRecord","debounce","wait","KAD_CLOSE_TAG_NAME","KAD_CLOSE_TAG_VALUE","KBUCKET_SIZE","PING_TIMEOUT","PING_CONCURRENCY","RoutingTable","kBucketSize","pingTimeout","lan","pingConcurrency","tagName","tagValue","updatePingQueueSizeMetric","Queue","kBuck","KBuck","utils.convertPeerId","kClosest","updatePeerTags","utils.debounce","newClosest","contact","addedPeers","removedPeers","oldContacts","newContact","responded","oldContact","closest","GENERATED_PREFIXES","MAX_COMMON_PREFIX_LENGTH","RoutingTableRefresh","routingTable","refreshInterval","refreshQueryTimeout","force","prefixLength","refreshCpls","lastRefresh","lastCpl","cpl","maxCommonPrefix","dates","targetCommonPrefixLength","randomData","randomUint16","localKadId","randomPrefix","toggledLocalPrefix","mask","targetPrefix","keyBuffer","keyView","distance","uint8ArrayXor","leadingZeros","byte","__MessageTypeValues","ConnectionType","__ConnectionTypeValues","MESSAGE_TYPE","PBMessage","CONNECTION_TYPE","MESSAGE_TYPE_LOOKUP","level","toPbPeer","dec","fromPbPeer","sendingQueryEvent","fields","peerResponseEvent","finalPeerEvent","queryErrorEvent","providerEvent","valueEvent","dialingPeerEvent","Network","to","verifyRecord","validators","parts","validator","validatePublicKeyRecord","keyhash","publicKeyHash","bestRecord","selectors","records","selector","publickKey","ContentFetching","queryManager","network","dsKey","vals","best","fixupRec","sentCorrection","events","putEvent","parallel","localRec","rtp","getValueQuery","ContentRouting","providers","maybeNotifyPeer","sendEvent","toFind","provs","findProvidersQuery","newProviders","PeerDistanceList","originDhtKey","capacity","pd","dhtKey","el","uint8ArrayCompare","peerIds","dhtKeys","furthestDistance","keyDistance","PeerRouting","pkKey","utils.keyForPublicKey","recPeer","keys.marshalPublicKey","findPeerQuery","match","foundPeer","utils.convertBuffer","tablePeers","getCloserPeersQuery","closerThan","ids","Providers","cacheSize","cleanupInterval","provideValidity","cache","deleteCount","parseProviderKey","readTime","delta","expired","makeProviderKey","cacheKey","loadProviders","writeProviderEntry","cidStr","varint","MAX_XOR","queryPath","startingPeer","ourPeerId","alpha","pathIndex","numPaths","cleanUp","queryFuncTimeout","peersSeen","queue","kadId","queryPeer","peerKadId","peerXor","xor","compoundSignal","closerPeer","closerPeerKadId","toGenerator","deferred","running","results","cleanup","wasRunning","QueryManager","disjointPaths","queryFunc","stopQueryTimer","abortController","peersToQuery","paths","AddProviderHandler","FindNodeHandler","GetProvidersHandler","providerPeers","closerPeers","addrFilter","GetValueHandler","idFromKey","pubKey","rawRecord","PingHandler","PutValueHandler","recordKey","desMessage","TopologyListener","QuerySelf","queryTimeout","found","take","clientMode","querySelfInterval","protocolPrefix","maxInboundStreams","maxOutboundStreams","providersInit","recordValidators","recordSelectors","mode","DualKadDHT","wan","queriedPeers","foundValue","success","errors","dhts","KadDHT","SingleKadDHT","kadDHT","DEFAULT_BOOTSTRAP_TAG_NAME","DEFAULT_BOOTSTRAP_TAG_VALUE","DEFAULT_BOOTSTRAP_TAG_TTL","DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT","Bootstrap","P2P","bootstrap","socketToMaConn","pTimeout","testMa","mafmt.WebSockets","mafmt.WebSocketsSecure","wss","WebSockets","errorPromise","errfn","rawSocket","toUri","abort","filters.wss","filters.all","webSockets","allocUnsafe","MessageTypes","MessageTypeNames","InitiatorMessageTypes","ReceiverMessageTypes","POOL_SIZE","Encoder","pool","offset","header","encoder","minSendBytes","batchedBytes","MAX_MSG_SIZE","MAX_MSG_QUEUE_SIZE","Decoder","maxMessageSize","maxUnprocessedMessageQueueSize","chunk","msgs","h","readVarInt","MSB","REST","shift","counter","ERR_STREAM_RESET","ERR_STREAM_ABORT","ERR_SINK_ENDED","ERR_DOUBLE_SINK","createStream","send","onEnd","maxMsgSize","resetController","closeController","Types","externalId","streamName","sourceEnded","sinkEnded","sinkSunk","endErr","timeline","onSourceEnd","onSinkEnd","streamSource","MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION","MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION","MAX_STREAM_BUFFER_SIZE","DISCONNECT_THRESHOLD","printMessage","MplexStreamMuxer","registry","pushableV","maxBufferSize","Mplex","mplex","NOISE_MSG_MAX_LENGTH_BYTES","NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG","DUMP_SESSION_KEYS","stablelib","ck","ikm","okm","HKDF","SHA256","k1","k2","k3","x25519.generateKeyPair","x25519.generateKeyPairFromSeed","x25519.sharedKey","ad","ChaCha20Poly1305","dst","uint16BEEncode","uint16BEDecode","encode0","encode1","encode2","decode0","decode1","decode2","encryptStream","decryptStream","TAG_LENGTH","encrypted","decrypted","valid","UnexpectedPeerError","InvalidCryptoExchangeError","NoiseExtensions","NoiseHandshakePayload","getPayload","localPeer","staticPublicKey","extensions","signedPayload","signPayload","getHandshakePayload","createHandshakePayload","libp2pPublicKey","getPeerIdFromPayload","decodePayload","verifySignedPayload","noiseStaticKey","payloadPeerId","generatedPayload","isValidPublicKey","pk","keyLogger","logLocalStaticKeys","logLocalEphemeralKeys","logRemoteStaticKey","rs","logRemoteEphemeralKey","re","logCipherState","session","MIN_NONCE","MAX_NONCE","ERR_MAX_NONCE","Nonce","AbstractHandshake","cs","emptyKey","ss","encryptedMessage","derivedU8","tempK","protocolName","protocolNameBytes","tempk1","tempk2","cs1","cs2","ne","ns","XX","prologue","psk","hs","spk","messageBuffer","valid1","valid2","initiator","ephemeral","resultingBuffer","resultingPlaintext","resultingValid","XXHandshake","isInitiator","staticKeypair","receivedMessageBuffer","decodedPayload","encryption","registerMetrics","Noise","staticNoiseKey","prologueBytes","wrappedConnection","pbStream","secure","user","duplexPair","noise","mergeOpts","repo","keychainConfig","libp2pOptions","getLibp2pOptions","createNode","getPubsubRouter","get","availableRouters","libp2pDefaults","pkgversion","ipnsValidator","ipnsSelector","boostrapNodes","constructorOptions","libp2pFinalConfig","getEnvLibp2pOptions","delegateHosts","delegateString","delegateAddr","delegateApiOptions","delegateHttpClient","ipfsHttpClient"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215]}